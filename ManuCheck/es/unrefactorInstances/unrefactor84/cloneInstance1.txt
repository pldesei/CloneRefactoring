(startLine=90 endLine=128 srcPath=/root/Projects/elasticsearchFilter/1870/elasticsearch/modules/elasticsearch/src/main/java/org/elasticsearch/util/http/client/providers/NettyAsyncHttpProvider.java)
    void configure(final boolean useSSL, final ConnectListener<?> cl) {

        bootstrap.setPipelineFactory(new ChannelPipelineFactory() {

            /* @Override */
            public ChannelPipeline getPipeline() throws Exception {
                ChannelPipeline pipeline = pipeline();

                if (useSSL) {
                    try {
                        SSLEngine sslEngine = config.getSSLEngine();
                        if (sslEngine == null) {
                            sslEngine = SslUtils.getSSLEngine();
                        }
                        pipeline.addLast("ssl", new SslHandler(sslEngine));
                    } catch (Throwable ex) {
                        cl.future().abort(ex);
                    }
                }

                pipeline.addLast("codec", new HttpClientCodec());

                if (config.isCompressionEnabled()) {
                    pipeline.addLast("inflater", new HttpContentDecompressor());
                }

                IdleStateHandler h = new IdleStateHandler(timer, 0, 0, config.getIdleConnectionTimeoutInMs(), TimeUnit.MILLISECONDS) {
                    @SuppressWarnings("unused")
                    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws MalformedURLException {
                        e.getChannel().close();
                        removeFromCache(ctx, e);
                    }
                };
                pipeline.addLast("timeout", h);
                pipeline.addLast("httpProcessor", NettyAsyncHttpProvider.this);
                return pipeline;
            }
        });
    }

