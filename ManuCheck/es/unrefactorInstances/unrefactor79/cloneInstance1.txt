(startLine=214 endLine=269 srcPath=/root/Projects/elasticsearchFilter/1387/elasticsearch/src/main/java/org/elasticsearch/action/support/broadcast/TransportBroadcastOperationAction.java)
        void performOperation(final ShardIterator shardIt, final ShardRouting shard, boolean localAsync) {
            if (shard == null) {
                // no more active shards... (we should not really get here, just safety)
                onOperation(null, shardIt, null);
            } else {
                final ShardRequest shardRequest = newShardRequest(shard, request);
                if (shard.currentNodeId().equals(nodes.localNodeId())) {
                    if (localAsync) {
                        threadPool.executor(executor).execute(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    onOperation(shard, shardOperation(shardRequest));
                                } catch (Exception e) {
                                    onOperation(shard, shardIt, e);
                                }
                            }
                        });
                    } else {
                        try {
                            onOperation(shard, shardOperation(shardRequest));
                        } catch (Exception e) {
                            onOperation(shard, shardIt, e);
                        }
                    }
                } else {
                    DiscoveryNode node = nodes.get(shard.currentNodeId());
                    if (node == null) {
                        // no node connected, act as failure
                        onOperation(shard, shardIt, null);
                    } else {
                        transportService.sendRequest(node, transportShardAction, shardRequest, new BaseTransportResponseHandler<ShardResponse>() {
                            @Override
                            public ShardResponse newInstance() {
                                return newShardResponse();
                            }

                            @Override
                            public String executor() {
                                return ThreadPool.Names.SAME;
                            }

                            @Override
                            public void handleResponse(ShardResponse response) {
                                onOperation(shard, response);
                            }

                            @Override
                            public void handleException(TransportException e) {
                                onOperation(shard, shardIt, e);
                            }
                        });
                    }
                }
            }
        }

