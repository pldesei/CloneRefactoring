(startLine=7590 endLine=7616 srcPath=/root/Projects/eclipse.jdt.coreFilter/110/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java)
    public void test0313() throws JavaModelException {
        ICompilationUnit sourceUnit = getCompilationUnit("Converter" , "src", "test0313", "Test.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
        char[] source = sourceUnit.getSource().toCharArray();
        ASTNode result = runConversion(sourceUnit, true);
        assertNotNull("No compilation unit", result); //$NON-NLS-1$
        assertTrue("result is not a compilation unit", result instanceof CompilationUnit); //$NON-NLS-1$
        CompilationUnit compilationUnit = (CompilationUnit) result;
        ASTNode node = getASTNode(compilationUnit, 0, 0, 0);
        assertTrue("Not a VariableDeclarationStatement", node instanceof VariableDeclarationStatement); //$NON-NLS-1$
        VariableDeclarationStatement variableDeclarationStatement = (VariableDeclarationStatement) node;
        List fragments = variableDeclarationStatement.fragments();
        assertEquals("wrong size", 1, fragments.size()); //$NON-NLS-1$
        VariableDeclarationFragment variableDeclarationFragment = (VariableDeclarationFragment) fragments.get(0);
        Expression expression = variableDeclarationFragment.getInitializer();
        assertTrue("Not an InfixExpression", expression instanceof InfixExpression); //$NON-NLS-1$
        InfixExpression infixExpression = (InfixExpression) expression;
        checkSourceRange(infixExpression, "i+j", source); //$NON-NLS-1$
        Expression expression2 = infixExpression.getLeftOperand();
        checkSourceRange(expression2, "i", source); //$NON-NLS-1$
        assertTrue("Not a name", expression2 instanceof Name); //$NON-NLS-1$
        Name name = (Name) expression2;
        IBinding binding = name.resolveBinding();
        assertNotNull("No binding", binding); //$NON-NLS-1$
        ASTNode astNode = compilationUnit.findDeclaringNode(binding);
        assertNotNull("No declaring node", astNode); //$NON-NLS-1$
        checkSourceRange(astNode, "int i", source); //$NON-NLS-1$
    }

