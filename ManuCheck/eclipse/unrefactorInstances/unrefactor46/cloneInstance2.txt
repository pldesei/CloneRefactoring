(startLine=7381 endLine=7421 srcPath=/root/Projects/eclipse.jdt.coreFilter/2010/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java)
    public void test0312() throws JavaModelException {
        ICompilationUnit sourceUnit = getCompilationUnit("Converter" , "", "test0312", "Test.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
        char[] source = sourceUnit.getSource().toCharArray();
        ASTNode result = runConversion(sourceUnit, true);
        assertNotNull("No compilation unit", result); //$NON-NLS-1$
        assertTrue("result is not a compilation unit", result instanceof CompilationUnit); //$NON-NLS-1$
        CompilationUnit compilationUnit = (CompilationUnit) result;
        ASTNode node = getASTNode(compilationUnit, 0, 0, 1);
        assertTrue("Not a VariableDeclarationStatement", node instanceof VariableDeclarationStatement); //$NON-NLS-1$
        VariableDeclarationStatement variableDeclarationStatement = (VariableDeclarationStatement) node;
        List fragments = variableDeclarationStatement.fragments();
        assertEquals("wrong size", 1, fragments.size()); //$NON-NLS-1$
        VariableDeclarationFragment variableDeclarationFragment = (VariableDeclarationFragment) fragments.get(0);
        Expression expression = variableDeclarationFragment.getInitializer();
        assertTrue("not a class instance creation", expression instanceof ClassInstanceCreation); //$NON-NLS-1$
        ClassInstanceCreation classInstanceCreation = (ClassInstanceCreation) expression;
        AnonymousClassDeclaration anonymousClassDeclaration = classInstanceCreation.getAnonymousClassDeclaration();
        assertNotNull("No body", anonymousClassDeclaration); //$NON-NLS-1$
        List bodyDeclarations = anonymousClassDeclaration.bodyDeclarations();
        assertEquals("wrong size for body declarations", 1, bodyDeclarations.size()); //$NON-NLS-1$
        BodyDeclaration bodyDeclaration = (BodyDeclaration) bodyDeclarations.get(0);
        assertTrue("Not a method declaration", bodyDeclaration instanceof MethodDeclaration); //$NON-NLS-1$
        MethodDeclaration methodDeclaration = (MethodDeclaration) bodyDeclaration;
        Block block = methodDeclaration.getBody();
        assertNotNull("no body", block); //$NON-NLS-1$
        List statements = block.statements();
        assertEquals("Wrong size for statements", 1, statements.size()); //$NON-NLS-1$
        Statement statement = (Statement) statements.get(0);
        assertTrue("not a variable declaration statement", statement instanceof VariableDeclarationStatement); //$NON-NLS-1$
        VariableDeclarationStatement variableDeclarationStatement2 = (VariableDeclarationStatement) statement;
        List fragments2 = variableDeclarationStatement2.fragments();
        assertEquals("wrong size for fragments2", 1, fragments2.size()); //$NON-NLS-1$
        VariableDeclarationFragment variableDeclarationFragment2 = (VariableDeclarationFragment) fragments2.get(0);
        Expression expression2 = variableDeclarationFragment2.getInitializer();
        assertTrue("Not a name", expression2 instanceof Name); //$NON-NLS-1$
        Name name = (Name) expression2;
        checkSourceRange(name, "j", source); //$NON-NLS-1$
        IBinding binding = name.resolveBinding();
        ASTNode declaringNode = compilationUnit.findDeclaringNode(binding);
        assertNull("No declaring node is available", declaringNode); //$NON-NLS-1$
    }

