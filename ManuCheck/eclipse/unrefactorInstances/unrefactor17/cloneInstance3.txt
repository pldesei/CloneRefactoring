(startLine=1911 endLine=1934 srcPath=/root/Projects/eclipse.jdt.coreFilter/1196/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java)
    public void test0085() throws JavaModelException {
        ICompilationUnit sourceUnit = getCompilationUnit("Converter" , "src", "test0085", "Test.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
        char[] source = sourceUnit.getSource().toCharArray();
        ASTNode result = runConversion(sourceUnit, false);
        ASTNode node = getASTNode((CompilationUnit) result, 0, 0, 0);
        assertNotNull("Expression should not be null", node); //$NON-NLS-1$
        ForStatement forStatement = this.ast.newForStatement();
        VariableDeclarationFragment variableDeclarationFragment = this.ast.newVariableDeclarationFragment();
        variableDeclarationFragment.setName(this.ast.newSimpleName("i")); //$NON-NLS-1$
        variableDeclarationFragment.setInitializer(this.ast.newNumberLiteral("0"));//$NON-NLS-1$

        VariableDeclarationExpression variableDeclarationExpression = this.ast.newVariableDeclarationExpression(variableDeclarationFragment);
        variableDeclarationExpression.setModifiers(Modifier.NONE);
        variableDeclarationExpression.setType(this.ast.newPrimitiveType(PrimitiveType.INT));
        
        forStatement.initializers().add(variableDeclarationExpression);
        PostfixExpression postfixExpression = this.ast.newPostfixExpression();
        postfixExpression.setOperand(this.ast.newSimpleName("i"));//$NON-NLS-1$
        postfixExpression.setOperator(PostfixExpression.Operator.INCREMENT);
        forStatement.updaters().add(postfixExpression);
        forStatement.setBody(this.ast.newEmptyStatement());
        assertTrue("Both AST trees should be identical", forStatement.subtreeMatch(new ASTMatcher(), node));        //$NON-NLS-1$
        checkSourceRange(node, "for (int i = 0;; i++);", source); //$NON-NLS-1$
    }

