(startLine=101 endLine=191 srcPath=/root/Projects/eclipse.jdt.coreFilter/2025/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveResourcesTests.java)
public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException {
    try {
        startDeltas();
        
        // if forcing, ensure that a name collision exists
        int i;
        if (force) {
            for (i = 0; i < elements.length; i++) {
                IJavaElement e = elements[i];
                IJavaElement collision = null;
                if (names == null) {
                    collision = generateHandle(e, null, destinations[i]);
                } else {
                    collision = generateHandle(e, names[i], destinations[i]);
                }
                assertTrue("Collision does not exist", collision.exists());
            }
        }
    
        // move
        getJavaModel().move(elements, destinations, siblings, names, force, monitor);
    
        for (i = 0; i < elements.length; i++) {
            IJavaElement element = elements[i];
            IJavaElement moved = null;
            if (names == null) {
                moved = generateHandle(element, null, destinations[i]);
            } else {
                moved = generateHandle(element, names[i], destinations[i]);
            }
            // ensure the original element no longer exists, unless moving within the same container
            if (!destinations[i].equals(element.getParent())) {
                assertTrue("The original element must not exist", !element.exists());
            }
            assertTrue("Moved element should exist", moved.exists());
    
            IJavaElement container = destinations[i];
            if (container.getElementType() == IJavaElement.PACKAGE_FRAGMENT) {
                if (container.getElementName().equals("")) {
                    // default package
                    if (moved.getElementType() == IJavaElement.COMPILATION_UNIT) {
                        IJavaElement[] children = ((ICompilationUnit) moved).getChildren();
                        for (int j = 0; j < children.length; j++) {
                            if (children[j].getElementType() == IJavaElement.PACKAGE_DECLARATION) {
                                assertTrue("Should not find package decl", false);
                            }
                        }
                    }
                } else {
                    IJavaElement[] children = ((ICompilationUnit) moved).getChildren();
                    boolean found = false;
                    for (int j = 0; j < children.length; j++) {
                        if (children[j] instanceof IPackageDeclaration) {
                            assertTrue("package declaration incorrect", ((IPackageDeclaration) children[j]).getElementName().equals(container.getElementName()));
                            found = true;
                            break;
                        }
                    }
                    assertTrue("Did not find package decl", found);
                }
            }
            IJavaElementDelta destDelta = null;
            if (isMainType(element, destinations[i]) && names != null && names[i] != null) { //moved/renamed main type to same cu
                destDelta = getDeltaFor(moved.getParent());
                assertTrue("Renamed compilation unit as result of main type not added", destDelta != null && destDelta.getKind() == IJavaElementDelta.ADDED);
                IJavaElementDelta[] deltas = destDelta.getAddedChildren();
                assertTrue("Added children not correct for element copy", deltas[0].getElement().equals(moved));
                assertTrue("flag should be F_MOVED_FROM", (deltas[0].getFlags() & IJavaElementDelta.F_MOVED_FROM) > 0);
                assertTrue("moved from handle should be original", deltas[0].getMovedFromElement().equals(element));
            } else {
                destDelta = getDeltaFor(destinations[i], true);
                assertTrue("Destination container not changed", destDelta != null && destDelta.getKind() == IJavaElementDelta.CHANGED);
                IJavaElementDelta[] deltas = destDelta.getAddedChildren();
                for (int j = 0; j < deltas.length - 1; j++) {
                    // side effect packages added
                    IJavaElement pkg = deltas[j].getElement();
                    assertTrue("Side effect child should be a package fragment", pkg.getElementType() == IJavaElement.PACKAGE_FRAGMENT);
                    assertTrue("Side effect child should be an enclosing package", element.getElementName().startsWith(pkg.getElementName()));
                }
                IJavaElementDelta pkgDelta = deltas[deltas.length - 1];
                assertTrue("Added children not correct for element copy", pkgDelta.getElement().equals(moved));
                assertTrue("flag should be F_MOVED_FROM", (pkgDelta.getFlags() & IJavaElementDelta.F_MOVED_FROM) > 0);
                assertTrue("moved from handle shoud be original", pkgDelta.getMovedFromElement().equals(element));
                IJavaElementDelta sourceDelta = getDeltaFor(element, true);
                assertTrue("moved to handle should be original", sourceDelta.getMovedToElement().equals(moved));
            }
        }
    } finally {
        stopDeltas();
    }
}

