(startLine=4301 endLine=4437 srcPath=/root/Projects/eclipse.jdt.coreFilter/27/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java)
    public void testVariableDeclarationStatement() {
        VariableDeclarationFragment x1 = this.ast.newVariableDeclarationFragment();
        long previousCount = this.ast.modificationCount();
        final VariableDeclarationStatement x =
            this.ast.newVariableDeclarationStatement(x1);
        assertTrue(this.ast.modificationCount() > previousCount);
        previousCount = this.ast.modificationCount();
        assertTrue(x.getAST() == this.ast);
        assertTrue(x.getParent() == null);
        if (this.ast.apiLevel() == AST.JLS2) {
            assertTrue(x.getModifiers() == Modifier.NONE);
        } else {
            assertTrue(x.modifiers().size() == 0);
        }
        assertTrue(x.getType() != null);
        assertTrue(x.getType().getParent() == x);
        assertTrue(x.fragments().size() == 1);
        assertTrue(x.fragments().get(0) == x1);
        assertTrue(x1.getParent() == x);
        assertTrue(x.getNodeType() == ASTNode.VARIABLE_DECLARATION_STATEMENT);
        assertTrue(x.structuralPropertiesForType() ==
            VariableDeclarationStatement.propertyDescriptors(this.ast.apiLevel()));
        // make sure that reading did not change modification count
        assertTrue(this.ast.modificationCount() == previousCount);

        tLeadingComment(x);

        if (this.ast.apiLevel() == AST.JLS2) {
            int legal = Modifier.FINAL;
            previousCount = this.ast.modificationCount();
            x.setModifiers(legal);
            assertTrue(this.ast.modificationCount() > previousCount);
            assertTrue(x.getModifiers() == legal);

            previousCount = this.ast.modificationCount();
            x.setModifiers(Modifier.NONE);
            assertTrue(this.ast.modificationCount() > previousCount);
            assertTrue(x.getModifiers() == Modifier.NONE);
        }

        if (this.ast.apiLevel() >= AST.JLS3) {
            genericPropertyListTest(x, x.modifiers(), new Property("Modifiers", true, IExtendedModifier.class) { //$NON-NLS-1$
                public ASTNode sample(AST targetAst, boolean parented) {
                    Modifier result = targetAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);
                    if (parented) {
                        TypeDeclaration pd = targetAst.newTypeDeclaration();
                        pd.modifiers().add(result);
                    }
                    return result;
                }
                public ASTNode wrap() {
                    SingleMemberAnnotation s1 = x.getAST().newSingleMemberAnnotation();
                    ClassInstanceCreation s2 = x.getAST().newClassInstanceCreation();
                    AnonymousClassDeclaration s3 = x.getAST().newAnonymousClassDeclaration();
                    MethodDeclaration s4 = x.getAST().newMethodDeclaration();
                    Block s5 = x.getAST().newBlock();
                    VariableDeclarationFragment s6 = x.getAST().newVariableDeclarationFragment();
                    VariableDeclarationStatement s7 = x.getAST().newVariableDeclarationStatement(s6);
                    s1.setValue(s2);
                    s2.setAnonymousClassDeclaration(s3);
                    s3.bodyDeclarations().add(s4);
                    s4.setBody(s5);
                    s5.statements().add(s7);
                    s7.modifiers().add(x);
                    return s1;
                }
                public void unwrap() {
                    VariableDeclarationStatement s7 = (VariableDeclarationStatement) x.getParent();
                    s7.modifiers().remove(x);
                }
            });

            // check that getModifiers() tracks changes to modifiers()
            x.modifiers().clear();
            assertTrue(x.getModifiers() == Modifier.NONE);
            Modifier[] allMods = allModifiers();
            // one at a time
            for (int i = 0 ; i < allMods.length; i++) {
                x.modifiers().add(allMods[i]);
                assertTrue(x.getModifiers() == allMods[i].getKeyword().toFlagValue());
                x.modifiers().remove(allMods[i]);
                assertTrue(x.getModifiers() == Modifier.NONE);
            }
            // all at same time
            for (int i = 0 ; i < allMods.length; i++) {
                x.modifiers().add(allMods[i]);
            }
            int flags  = x.getModifiers();
            for (int i = 0 ; i < allMods.length; i++) {
                assertTrue((flags & allMods[i].getKeyword().toFlagValue()) != 0);
            }
        }

        genericPropertyTest(x, new Property("Type", true, Type.class) { //$NON-NLS-1$
            public ASTNode sample(AST targetAst, boolean parented) {
                SimpleType result = targetAst.newSimpleType(
                    targetAst.newSimpleName("foo")); //$NON-NLS-1$
                if (parented) {
                    targetAst.newArrayType(result);
                }
                return result;
            }
            public ASTNode get() {
                return x.getType();
            }
            public void set(ASTNode value) {
                x.setType((Type) value);
            }
        });

        genericPropertyListTest(x, x.fragments(),
          new Property("VariableSpecifiers", true, VariableDeclarationFragment.class) { //$NON-NLS-1$
            public ASTNode sample(AST targetAst, boolean parented) {
                VariableDeclarationFragment result = targetAst.newVariableDeclarationFragment();
                if (parented) {
                    targetAst.newVariableDeclarationExpression(result);
                }
                return result;
            }
            public ASTNode wrap() {
                // return VariableDeclarationFragment that embeds x
                VariableDeclarationFragment s1 = ASTTest.this.ast.newVariableDeclarationFragment();
                ClassInstanceCreation s0 = ASTTest.this.ast.newClassInstanceCreation();
                AnonymousClassDeclaration a1 = ASTTest.this.ast.newAnonymousClassDeclaration();
                s0.setAnonymousClassDeclaration(a1);
                s1.setInitializer(s0);
                Initializer s2 = ASTTest.this.ast.newInitializer();
                a1.bodyDeclarations().add(s2);
                s2.getBody().statements().add(x);
                return s1;
            }
            public void unwrap() {
                Block s3 = (Block) x.getParent();
                s3.statements().remove(x);
            }
        });
    }

