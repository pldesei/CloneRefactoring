(startLine=721 endLine=801 srcPath=/root/Projects/eclipse.jdt.coreFilter/468/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AccessRestrictionsTests.java)
public void test008() throws CoreException {
    ICompilationUnit x1 = null, x2 = null, y =  null;
    try {
        IJavaProject p1 = createJavaProject(
            "P1", 
            new String[] {"src"}, 
            new String[] {"JCL_LIB"}, 
            "bin");
        p1.setOption("org.eclipse.jdt.core.compiler.compliance", "1.5");
        p1.setOption("org.eclipse.jdt.core.compiler.source", "1.5");
        p1.setOption("org.eclipse.jdt.core.compiler.targetPlatform", "1.5");        
        p1.setOption(JavaCore.COMPILER_PB_RAW_TYPE_REFERENCE, JavaCore.IGNORE);
        this.problemRequestor = new ProblemRequestor();
        x1 = getWorkingCopy(
            "/P1/src/p/X1.java",
            "package p;\n" +
            "public class X1<T> {\n" +
            "    void foo() {\n" +
            "    }\n" +
            "}"
        );    
        assertProblems(
            "Unexpected problems", 
            "----------\n" + 
            "----------\n"
        );
        x2 = getWorkingCopy(            
            "/P1/src/p/X2.java",
            "package p;\n" +
            "public class X2 extends X1 {\n" +
            "    void bar() {\n" +
            "    }\n" +
            "}"
        );    
        assertProblems(
            "Unexpected problems", 
            "----------\n" + 
            "----------\n"
        );
        IJavaProject p2 = createJavaProject("P2", new String[] {"src"}, 
                new String[] {"JCL_LIB"}, "bin");
        p2.setOption("org.eclipse.jdt.core.compiler.compliance", "1.5");
        p2.setOption("org.eclipse.jdt.core.compiler.source", "1.5");
        p2.setOption("org.eclipse.jdt.core.compiler.targetPlatform", "1.5");        
        IClasspathEntry[] classpath = p2.getRawClasspath();
        int length = classpath.length;
        System.arraycopy(classpath, 0, classpath = new IClasspathEntry[length+1], 0, length);
        classpath[length] = createSourceEntry("P2", "/P1", "-p/X1");
        p2.setRawClasspath(classpath, null);
        String src = 
            "package p;\n" +
            "public class Y extends X2 {\n" +
            "    void foobar() {\n" +
            "        foo(); // accesses X1.foo, should trigger an error\n" +
            "        bar(); // accesses X2.bar, OK\n" +
            "    }\n" +
            "}";
        this.problemRequestor = new ProblemRequestor(src);
        y = getWorkingCopy(            
            "/P2/src/p/Y.java", 
            src
        );    
        assertProblems(
            "Unexpected problems value", 
            "----------\n" + 
            "1. ERROR in /P2/src/p/Y.java (at line 4)\n" + 
            "    foo(); // accesses X1.foo, should trigger an error\n" + 
            "    ^^^^^\n" + 
            "Access restriction: The method foo() from the type X1 is not accessible due to restriction on required project P1\n" + 
            "----------\n"
        );
    } finally {
        if (x1 != null)
            x1.discardWorkingCopy();
        if (x2 != null)
            x2.discardWorkingCopy();
        if (y != null)
            y.discardWorkingCopy();
        deleteProjects(new String[] {"P1", "P2"});
    }
}

