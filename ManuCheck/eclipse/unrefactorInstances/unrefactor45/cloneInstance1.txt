(startLine=2331 endLine=2533 srcPath=/root/Projects/eclipse.jdt.coreFilter/888/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/workspace/Compiler/src/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java)
public int literalIndexForJavaLangStringBufferAppend(int typeID) {
    int index = 0;
    int nameAndTypeIndex = 0;
    int classIndex = 0;
    switch (typeID) {
        case T_int :
        case T_byte :
        case T_short :
            if ((index = wellKnownMethods[STRINGBUFFER_APPEND_INT_METHOD]) == 0) {
                classIndex = literalIndexForJavaLangStringBuffer();
                if ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_INT_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {
                    int nameIndex = literalIndex(QualifiedNamesConstants.Append);
                    int typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendIntSignature);
                    nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_INT_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;
                    writeU1(NameAndTypeTag);
                    writeU2(nameIndex);
                    writeU2(typeIndex);
                }
                index = wellKnownMethods[STRINGBUFFER_APPEND_INT_METHOD] = currentIndex++;
                if (index > 0xFFFF){
                    this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
                }
                // Write the method ref constant into the constant pool
                // First add the tag
                writeU1(MethodRefTag);
                // Then write the class index
                writeU2(classIndex);
                // The write the nameAndType index
                writeU2(nameAndTypeIndex);
            }
            break;
        case T_long :
            if ((index = wellKnownMethods[STRINGBUFFER_APPEND_LONG_METHOD]) == 0) {
                classIndex = literalIndexForJavaLangStringBuffer();
                if ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_LONG_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {
                    int nameIndex = literalIndex(QualifiedNamesConstants.Append);
                    int typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendLongSignature);
                    nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_LONG_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;
                    writeU1(NameAndTypeTag);
                    writeU2(nameIndex);
                    writeU2(typeIndex);
                }
                index = wellKnownMethods[STRINGBUFFER_APPEND_LONG_METHOD] = currentIndex++;
                if (index > 0xFFFF){
                    this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
                }
                // Write the method ref constant into the constant pool
                // First add the tag
                writeU1(MethodRefTag);
                // Then write the class index
                writeU2(classIndex);
                // The write the nameAndType index
                writeU2(nameAndTypeIndex);
            }
            break;
        case T_float :
            if ((index = wellKnownMethods[STRINGBUFFER_APPEND_FLOAT_METHOD]) == 0) {
                classIndex = literalIndexForJavaLangStringBuffer();
                if ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_FLOAT_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {
                    int nameIndex = literalIndex(QualifiedNamesConstants.Append);
                    int typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendFloatSignature);
                    nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_FLOAT_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;
                    writeU1(NameAndTypeTag);
                    writeU2(nameIndex);
                    writeU2(typeIndex);
                }
                index = wellKnownMethods[STRINGBUFFER_APPEND_FLOAT_METHOD] = currentIndex++;
                if (index > 0xFFFF){
                    this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
                }
                // Write the method ref constant into the constant pool
                // First add the tag
                writeU1(MethodRefTag);
                // Then write the class index
                writeU2(classIndex);
                // The write the nameAndType index
                writeU2(nameAndTypeIndex);
            }
            break;
        case T_double :
            if ((index = wellKnownMethods[STRINGBUFFER_APPEND_DOUBLE_METHOD]) == 0) {
                classIndex = literalIndexForJavaLangStringBuffer();
                if ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_DOUBLE_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {
                    int nameIndex = literalIndex(QualifiedNamesConstants.Append);
                    int typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendDoubleSignature);
                    nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_DOUBLE_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;
                    writeU1(NameAndTypeTag);
                    writeU2(nameIndex);
                    writeU2(typeIndex);
                }
                index = wellKnownMethods[STRINGBUFFER_APPEND_DOUBLE_METHOD] = currentIndex++;
                if (index > 0xFFFF){
                    this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
                }
                // Write the method ref constant into the constant pool
                // First add the tag
                writeU1(MethodRefTag);
                // Then write the class index
                writeU2(classIndex);
                // The write the nameAndType index
                writeU2(nameAndTypeIndex);
            }
            break;
        case T_char :
            if ((index = wellKnownMethods[STRINGBUFFER_APPEND_CHAR_METHOD]) == 0) {
                classIndex = literalIndexForJavaLangStringBuffer();
                if ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_CHAR_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {
                    int nameIndex = literalIndex(QualifiedNamesConstants.Append);
                    int typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendCharSignature);
                    nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_CHAR_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;
                    writeU1(NameAndTypeTag);
                    writeU2(nameIndex);
                    writeU2(typeIndex);
                }
                index = wellKnownMethods[STRINGBUFFER_APPEND_CHAR_METHOD] = currentIndex++;
                if (index > 0xFFFF){
                    this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
                }
                // Write the method ref constant into the constant pool
                // First add the tag
                writeU1(MethodRefTag);
                // Then write the class index
                writeU2(classIndex);
                // The write the nameAndType index
                writeU2(nameAndTypeIndex);
            }
            break;
        case T_boolean :
            if ((index = wellKnownMethods[STRINGBUFFER_APPEND_BOOLEAN_METHOD]) == 0) {
                classIndex = literalIndexForJavaLangStringBuffer();
                if ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_BOOLEAN_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {
                    int nameIndex = literalIndex(QualifiedNamesConstants.Append);
                    int typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendBooleanSignature);
                    nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_BOOLEAN_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;
                    writeU1(NameAndTypeTag);
                    writeU2(nameIndex);
                    writeU2(typeIndex);
                }
                index = wellKnownMethods[STRINGBUFFER_APPEND_BOOLEAN_METHOD] = currentIndex++;
                if (index > 0xFFFF){
                    this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
                }
                // Write the method ref constant into the constant pool
                // First add the tag
                writeU1(MethodRefTag);
                // Then write the class index
                writeU2(classIndex);
                // The write the nameAndType index
                writeU2(nameAndTypeIndex);
            }
            break;
        case T_Object :
            if ((index = wellKnownMethods[STRINGBUFFER_APPEND_OBJECT_METHOD]) == 0) {
                classIndex = literalIndexForJavaLangStringBuffer();
                if ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_OBJECT_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {
                    int nameIndex = literalIndex(QualifiedNamesConstants.Append);
                    int typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendObjectSignature);
                    nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_OBJECT_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;
                    writeU1(NameAndTypeTag);
                    writeU2(nameIndex);
                    writeU2(typeIndex);
                }
                index = wellKnownMethods[STRINGBUFFER_APPEND_OBJECT_METHOD] = currentIndex++;
                if (index > 0xFFFF){
                    this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
                }
                // Write the method ref constant into the constant pool
                // First add the tag
                writeU1(MethodRefTag);
                // Then write the class index
                writeU2(classIndex);
                // The write the nameAndType index
                writeU2(nameAndTypeIndex);
            }
            break;
        case T_String :
        case T_null :
            if ((index = wellKnownMethods[STRINGBUFFER_APPEND_STRING_METHOD]) == 0) {
                classIndex = literalIndexForJavaLangStringBuffer();
                if ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_STRING_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {
                    int nameIndex = literalIndex(QualifiedNamesConstants.Append);
                    int typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendStringSignature);
                    nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_STRING_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;
                    writeU1(NameAndTypeTag);
                    writeU2(nameIndex);
                    writeU2(typeIndex);
                }
                index = wellKnownMethods[STRINGBUFFER_APPEND_STRING_METHOD] = currentIndex++;
                if (index > 0xFFFF){
                    this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
                }
                // Write the method ref constant into the constant pool
                // First add the tag
                writeU1(MethodRefTag);
                // Then write the class index
                writeU2(classIndex);
                // The write the nameAndType index
                writeU2(nameAndTypeIndex);
            }
            break;
    }
    return index;
}

