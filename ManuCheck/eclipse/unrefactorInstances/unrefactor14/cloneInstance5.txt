(startLine=878 endLine=956 srcPath=/root/Projects/eclipse.jdt.coreFilter/1189/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java)
public void testAccessRestriction5() throws Exception {
    Hashtable oldOptions = JavaCore.getOptions();
    try {
        Hashtable options = new Hashtable(oldOptions);
        options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
        options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR);
        JavaCore.setOptions(options);
        
        // create variable
        JavaCore.setClasspathVariables(
            new String[] {"JCL_LIB", "JCL_SRC", "JCL_SRCROOT"},
            new IPath[] {getExternalJCLPath(), getExternalJCLSourcePath(), getExternalJCLRootSourcePath()},
            null);

        // create P1
        this.createJavaProject(
            "P1",
            new String[]{"src"},
            Util.getJavaClassLibs(),
             "bin");
        
        this.createFolder("/P1/src/a");
        this.createFile(
                "/P1/src/a/XX1.java",
                "package a;\n"+
                "public class XX1 {\n"+
                "}");

        this.createFolder("/P1/src/b");
        this.createFile(
                "/P1/src/b/XX2.java",
                "package b;\n"+
                "public class XX2 {\n"+
                "}");
        
        // create P2
        this.createJavaProject(
            "P2",
            new String[]{"src"},
            Util.getJavaClassLibs(),
            null,
            null,
            new String[]{"/P1"},
            new String[][]{{}},
            new String[][]{{"a/*"}},
            new boolean[]{false},
            "bin",
            null,
            null,
            null,
            "1.4");
        this.createFile(
            "/P2/src/YY.java",
            "public class YY {\n"+
            "  void foo() {\n"+
            "    XX\n"+
            "  }\n"+
            "}");
        
        waitUntilIndexesReady();
        
        // do completion
        CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
        ICompilationUnit cu= getCompilationUnit("P2", "src", "", "YY.java");
        
        String str = cu.getSource();
        String completeBehind = "XX";
        int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
        cu.codeComplete(cursorLocation, requestor);
        
        assertResults(
            "XX2[TYPE_REF]{b.XX2, b, Lb.XX2;, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
            requestor.getResults());
    } finally {
        this.deleteProject("P1");
        this.deleteProject("P2");
        JavaCore.setOptions(oldOptions);
    }
}

