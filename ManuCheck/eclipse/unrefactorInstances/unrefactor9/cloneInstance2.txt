(startLine=170 endLine=191 srcPath=/root/Projects/eclipse.jdt.coreFilter/776/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterAST3Test.java)
    public void test0005() throws JavaModelException {
        ICompilationUnit sourceUnit = getCompilationUnit("Converter" , "src", "test0005", "Test.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
        char[] source = sourceUnit.getSource().toCharArray();
        ASTNode result = runConversion(AST.JLS3, sourceUnit, false);
        ASTNode expression = getASTNodeToCompare((CompilationUnit) result);
        assertNotNull("Expression should not be null", expression); //$NON-NLS-1$
        ClassInstanceCreation classInstanceCreation = this.ast.newClassInstanceCreation();
        QualifiedName name = 
            this.ast.newQualifiedName(
                this.ast.newQualifiedName(
                    this.ast.newSimpleName("java"), //$NON-NLS-1$
                    this.ast.newSimpleName("lang")), //$NON-NLS-1$
                this.ast.newSimpleName("Object"));//$NON-NLS-1$
        classInstanceCreation.setType(this.ast.newSimpleType(name));
        AnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();
        classInstanceCreation.setAnonymousClassDeclaration(anonymousClassDeclaration);
        assertTrue("Both AST trees should be identical", classInstanceCreation.subtreeMatch(new ASTMatcher(), expression));        //$NON-NLS-1$
        checkSourceRange(expression, "new java.lang.Object() {}", source); //$NON-NLS-1$
        ClassInstanceCreation classInstanceCreation2 = (ClassInstanceCreation) expression;
        Type type = classInstanceCreation2.getType();
        checkSourceRange(type, "java.lang.Object", source); //$NON-NLS-1$
    }

