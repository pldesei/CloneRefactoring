(startLine=1506 endLine=1531 srcPath=/root/Projects/eclipse.jdt.coreFilter/405/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java)
    public void test0048() throws JavaModelException {
        ICompilationUnit sourceUnit = getCompilationUnit("Converter15" , "src", "test0048", "X.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
        char[] source = sourceUnit.getSource().toCharArray();
        ASTNode result = runJLS3Conversion(sourceUnit, true, true);
        assertNotNull(result);
        assertTrue("Not a compilation unit", result.getNodeType() == ASTNode.COMPILATION_UNIT);
        CompilationUnit compilationUnit = (CompilationUnit) result;
        assertProblemsSize(compilationUnit, 0);
        ASTNode node = getASTNode(compilationUnit, 0);
        assertEquals("Not an enum declaration", ASTNode.ENUM_DECLARATION, node.getNodeType());
        EnumDeclaration enumDeclaration = (EnumDeclaration) node;
        List enumConstants = enumDeclaration.enumConstants();
        assertEquals("wrong size", 2, enumConstants.size());
        EnumConstantDeclaration enumConstantDeclaration = (EnumConstantDeclaration) enumConstants.get(0);
        IMethodBinding methodBinding = enumConstantDeclaration.resolveConstructorBinding();
        assertNotNull("No binding", methodBinding);
        assertTrue("Not a constructor", methodBinding.isConstructor());
        checkSourceRange(enumConstantDeclaration, "GREEN(0, 1)", source);
        checkSourceRange(enumConstantDeclaration.getName(), "GREEN", source);
        enumConstantDeclaration = (EnumConstantDeclaration) enumConstants.get(1);
        methodBinding = enumConstantDeclaration.resolveConstructorBinding();
        assertNotNull("No binding", methodBinding);
        assertTrue("Not a constructor", methodBinding.isConstructor());
        checkSourceRange(enumConstantDeclaration.getName(), "RED", source);
        checkSourceRange(enumConstantDeclaration, "RED()", source);
    }

