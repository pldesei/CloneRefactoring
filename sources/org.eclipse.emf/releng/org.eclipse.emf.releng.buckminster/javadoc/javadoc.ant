<project name="javadoc-project">

	<target name="create.javadoc">


		<!-- workspace default properties -->
		<property name="checkoutRoot" location="../../../.." />
		<property name="targetPlatform" location="${eclipse.home}" />


		<echo message="Target platform path ${targetPlatform}" />

		<condition property="build.stable" value="yes">
			<matches string="${build.id}" pattern="[S|R](d)*" />
		</condition>
		<condition property="generate.javadoc" value="yes">
			<or>
				<istrue value="${build.stable}" />
				<istrue value="${force.javadoc}" />
			</or>
		</condition>

		<echo message="Build id ${build.id}" />
		<echo message="Build stable? ${build.stable}" />
		<echo message="Force javadoc generation? ${force.javadoc}" />
		<echo message="Skip javadoc generation? ${skip.javadoc}" />

		<!--	<antcall target="-collect-docfiles" inheritall="true">
			<param name="projectName" value="EMF" />
			<param name="subproject" value="emf" />
		</antcall>-->
		<!-- EMF -->
		<antcall target="-generate.javadoc" inheritall="true">
			<param name="projectName" value="EMF" />
			<param name="subproject" value="emf" />
		</antcall>
		<!--XSD -->
		<antcall target="-generate.javadoc" inheritall="true">
			<param name="projectName" value="XSD" />
			<param name="subproject" value="xsd" />
		</antcall>
	</target>

	<target name="-generate.javadoc" if="generate.javadoc" unless="skip.javadoc">
		<property name="sourcesLocation" location="${checkoutRoot}/org.eclipse.${subproject}-master/" />
		<property name="output" location="./javadoc-${subproject}" />

		<echo message="Generate ${subproject}" />
		<echo message="Source code location ${sourcesLocation}" />
		<echo message="Javadoc output location ${output}" />

		<!-- Define classpath -->
		<path id="javadoc-classpath">
			<fileset dir="${targetPlatform}">
				<include name="**/*.jar" />
				<exclude name="**/*.source*.jar" />
			</fileset>
		</path>

		<!-- Prepare dirs -->
		<delete dir="${output}" />
		<mkdir dir="${output}" />

		<javadoc destdir="${output}" use="false" Encoding="ISO-8859-1" classpathref="javadoc-classpath" maxmemory="1024m" source="1.5" useexternalfile="true" author="true" version="true" Verbose="no" windowtitle="${projectName} Documentation">
			<fileset dir="${sourcesLocation}" defaultexcludes="true">
				<include name="**/plugins/org.eclipse.${subproject}*/**/org/eclipse/${subproject}/**/*.java" />
				<!--<include name="**/tests/org.eclipse.${subproject}*/**/org/eclipse/${subproject}/**/*.java" />-->
				<!--
				<exclude name="**/org.eclipse.xtend.standalone.maven/**" />
				<exclude name="**/packrat/**" />
				<exclude name="**/antlr/internal/**" />
				-->
				<exclude name="**/org.eclipse.emf.gwt*/**/*" />
				<exclude name="**/java/io/**" />
			</fileset>

			<tag name="generated" description="EMF generated code" />
			<tag name="model" description="EMF model element" />
			<tag name="ordered" description="EMF ordered" />
			<tag name="noimplement" description="This interface is not intended to be implemented by clients." />
			<tag name="noextend" description="This class is not intended to be subclassed by clients." />
			<tag name="noinstantiate" description="This class is not intended to be instantiated by clients." />
			<tag name="noreference" description="This method is not intended to be referenced by clients." />
			<tag name="nooverride" description="This method is not intended to be extended (re-implement with a call to the overridden parent) or re-implemented (with no call to the overridden parent) by clients." />
		</javadoc>
		<!-- copy doc-files files -->
		<antcall target="-collect-docfiles" inheritall="true" />
		<!-- Compress the output javadoc in a zip file -->
		<zip destfile="${output}/javadoc.zip" basedir="${output}">
			<exclude name="*-${subproject}.zip" />
		</zip>
	</target>

	<target name="-collect-docfiles">
		<!-- copy doc-files files -->
		<!--org.eclipse.emf.ecore.change/src/org/eclipse/emf/ecore/change/doc-files/ChangeAPI.gif-->
		<fileset id="docFiles" dir="${sourcesLocation}/plugins" includes="org.eclipse.${subproject}*/src/**/doc-files/*" />
		<echo>${toString:docFiles}</echo>
		<pathconvert property="docFilesToCopy" refid="docFiles" pathsep=" ">
			<mapper>
				<regexpmapper handledirsep="yes" from=".*\/src\/(.*)doc-files(.*)" to="\1doc-files\2" />
			</mapper>
		</pathconvert>
		<echo>${docFilesToCopy}</echo>
		<copy todir="${output}">
			<fileset refid="docFiles" />
			<mapper>
				<regexpmapper handledirsep="yes" from=".*\/src\/(.*)doc-files(.*)" to="\1doc-files\2" />
			</mapper>
		</copy>
	</target>
</project>