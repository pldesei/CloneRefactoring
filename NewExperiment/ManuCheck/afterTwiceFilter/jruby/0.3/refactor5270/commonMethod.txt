(startLine=48 endLine=78 srcPath=/home/sonia/NewExperiment/jrubyFilter/01539/core/src/main/java/org/jruby/truffle/nodes/supercall/AbstractGeneralSuperCallNode.java)
    protected void lookup() {
        CompilerAsserts.neverPartOfCompilation();

        final RubyModule declaringModule = RubyCallStack.getCurrentDeclaringModule();

        if (!(declaringModule instanceof RubyClass)) {
            method = null;
            throw new RaiseException(getContext().getCoreLibrary().nameErrorNoMethod(name, "wasn't a class"));
        }

        assert declaringModule instanceof RubyClass;
        method = ((RubyClass) declaringModule).getSuperclass().lookupMethod(name);

        if (method == null || method.isUndefined()) {
            method = null;
            throw new RaiseException(getContext().getCoreLibrary().nameErrorNoMethod(name, "no such method"));
        }

        getContext().getRuntime().getWarnings().warn(IRubyWarnings.ID.TRUFFLE, getSourceSection().getSource().getName(), getSourceSection().getStartLine(), "lookup for super call is " + method.getSharedMethodInfo().getSourceSection());

        final DirectCallNode newCallNode = Truffle.getRuntime().createDirectCallNode(method.getCallTarget());

        if (callNode == null) {
            callNode = newCallNode;
            adoptChildren();
        } else {
            callNode.replace(newCallNode);
        }

        unmodifiedAssumption = declaringModule.getUnmodifiedAssumption();
    }

