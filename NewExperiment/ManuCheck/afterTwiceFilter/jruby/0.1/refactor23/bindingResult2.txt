ProjectPath:/home/sonia/NewExperiment/jrubyFilter/00120
predFragLineRange:1881-1889
predMethodLineRange:279-2408
nextLineRange:269-2480
predStrMethodInvoNames:
[arraycopy, arraycopy, advance, token, value, yyerror, yyExpecting, value, yyDefault, getDynamicVars, setLexState, top_local_init, getRubyClass, getObjectClass, getClasses, setClassNest, setClassNest, isCompileForEval, getType, void_expr, getNextNode, getNextNode, void_expr, getHeadNode, setEvalTree, block_append, getEvalTree, top_local_setup, setClassNest, setDynamicVars, void_stmts, newline_node, block_append, newline_node, setLexState, isInDef, isInSingle, yyerror, newAlias, isInDef, isInSingle, yyerror, newVAlias, isInDef, isInSingle, yyerror, newVAlias, getNth, yyerror, isInDef, isInSingle, yyerror, value_expr, setPosFrom, newIf, cond, value_expr, setPosFrom, newUnless, cond, value_expr, newWhile, cond, getBodyNode, newWhile, cond, value_expr, newUntil, cond, getBodyNode, newUntil, cond, newRescue, newResBody, isInDef, isInSingle, yyerror, local_push, setEvalTreeBegin, block_append, getEvalTree, newPreExe, local_pop, isCompileForEval, isInDef, isInSingle, yyerror, newIter, newPostExe, value_expr, node_assign, value_expr, setValueNode, node_assign, value_expr, setValueNode, isCompileForEval, isInDef, isInSingle, yyerror, newReturn, logop, logop, value_expr, newNot, cond, newNot, cond, value_expr, new_call, value_expr, new_call, setPosFrom, new_fcall, value_expr, setPosFrom, new_call, value_expr, setPosFrom, new_call, isCompileForEval, isInDef, isInSingle, yyerror, setPosFrom, new_super, setPosFrom, newYield, newMAsgn, newList, newMAsgn, newMAsgn, list_append, newMAsgn, newMAsgn, newMAsgn, newMAsgn, newList, list_append, getAssignmentNode, aryset, attrset, attrset, attrset, rb_backref_error, getAssignmentNode, aryset, attrset, attrset, attrset, rb_backref_error, yyerror, setLexState, setLexState, newUndef, setLexState, block_append, newUndef, value_expr, node_assign, getAssignmentNode, equals, setValueNode, newOpAsgnOr, getAccessNode, isInstanceVariable, setAId, equals, setValueNode, newOpAsgnAnd, getAccessNode, setValueNode, call_op, getAccessNode, setPosFrom, newList, list_append, newNil, list_concat, setPosFrom, newOpAsgn1, setPosFrom, newOpAsgn2, setPosFrom, newOpAsgn2, setPosFrom, newOpAsgn2, rb_backref_error, newDot2, newDot3, call_op, call_op, call_op, call_op, call_op, getLiteral, getLiteral, getLiteral, isTrue, funcall, getLiteral, zero, setLiteral, funcall, getLiteral, call_op, call_op, call_op, getLiteral, num2long, getLiteral, setLiteral, newFixnum, call_op, call_op, call_op, call_op, call_op, call_op, call_op, call_op, call_op, call_op, call_op, newNot, call_op, match_gen, newNot, match_gen, value_expr, newNot, cond, call_op, call_op, call_op, logop, logop, setInDefined, setInDefined, newDefined, value_expr, setPosFrom, newIf, cond, newList, list_append, value_expr, arg_concat, newList, newHash, value_expr, newRestArgs, newList, list_append, newList, list_append, arg_blk_pass, value_expr, arg_concat, arg_blk_pass, newList, newHash, arg_blk_pass, value_expr, arg_concat, newList, newHash, arg_blk_pass, list_append, newHash, arg_blk_pass, value_expr, arg_concat, list_append, newHash, arg_blk_pass, value_expr, arg_blk_pass, newRestArgs, CMDARG_PUSH, CMDARG_POP, value_expr, newBlockPass, value_expr, newList, value_expr, list_append, value_expr, value_expr, list_append, value_expr, arg_concat, value_expr, getType, getNextNode, getHeadNode, getType, rb_compile_error, newLit, newXStr, newVCall, newBegin, newRescue, rb_warn, block_append, newEnsure, setPosFrom, value_expr, newColon2, newColon3, value_expr, newCall, newZArray, newHash, isCompileForEval, isInDef, isInSingle, yyerror, value_expr, newReturn, isCompileForEval, isInDef, isInSingle, yyerror, newReturn, isCompileForEval, isInDef, isInSingle, yyerror, newReturn, value_expr, newYield, newYield, newYield, setInDefined, setInDefined, newDefined, setIterNode, newFCall, getType, rb_compile_error, setIterNode, setPosFrom, value_expr, setPosFrom, newIf, cond, value_expr, setPosFrom, newUnless, cond, COND_PUSH, COND_POP, value_expr, setPosFrom, newWhile, cond, COND_PUSH, COND_POP, value_expr, setPosFrom, newUntil, cond, value_expr, setPosFrom, newCase, COND_PUSH, COND_POP, value_expr, setPosFrom, newFor, isInDef, isInSingle, yyerror, setClassNest, getClassNest, local_push, getSourceLine, newClass, setLine, intValue, local_pop, setClassNest, getClassNest, getInDef, setInDef, getInSingle, setInSingle, setClassNest, getClassNest, local_push, setPosFrom, newSClass, local_pop, setClassNest, getClassNest, setInDef, intValue, setInSingle, intValue, isInDef, isInSingle, yyerror, setClassNest, getClassNest, local_push, getSourceLine, newModule, setLine, intValue, local_pop, setClassNest, getClassNest, isInDef, isInSingle, yyerror, setCurMid, setInDef, getInDef, local_push, newRescue, rb_warn, block_append, newEnsure, newDefn, getClassNest, isAttrSet, setNoex, setPosFrom, local_pop, setInDef, getInDef, setCurMid, setLexState, value_expr, setInSingle, getInSingle, local_push, setLexState, newRescue, rb_warn, block_append, newEnsure, newDefs, setPosFrom, local_pop, setInSingle, getInSingle, newBreak, newNext, newRedo, newRetry, value_expr, setPosFrom, newIf, cond, dyna_push, setPosFrom, newIter, dyna_pop, getType, rb_compile_error, setIterNode, value_expr, new_call, value_expr, new_call, setPosFrom, new_fcall, value_expr, setPosFrom, new_call, value_expr, setPosFrom, new_call, value_expr, new_call, isCompileForEval, isInDef, isInSingle, isInDefined, yyerror, new_super, isCompileForEval, isInDef, isInSingle, isInDefined, yyerror, newZSuper, dyna_push, setPosFrom, newIter, dyna_pop, dyna_push, setPosFrom, newIter, dyna_pop, newWhen, value_expr, list_append, newWhen, value_expr, newList, newWhen, node_assign, newGVar, block_append, setPosFrom, newResBody, newNil, newSymbol, newStr, getType, list_append, newStr, concat, getLiteral, getType, newDStr, getLiteral, newArray, list_concat, setLexState, getAccessNode, newNil, newSelf, newTrue, newFalse, newStr, newString, getSourceFile, newLit, newFixnum, getSourceLine, setLexState, yyerrok, setLexState, block_append, newArgs, intValue, block_append, newArgs, block_append, newArgs, intValue, block_append, newArgs, block_append, newArgs, intValue, block_append, newArgs, block_append, newArgs, intValue, block_append, newArgs, newArgs, yyerror, yyerror, yyerror, yyerror, isLocal, yyerror, isLocalRegistered, yyerror, getLocalIndex, intValue, isLocal, yyerror, isLocalRegistered, yyerror, getLocalIndex, getAssignmentNode, newBlock, block_append, isLocal, yyerror, isLocalRegistered, yyerror, getLocalIndex, isLocal, yyerror, isLocalRegistered, yyerror, newBlockArg, getType, newSelf, setLexState, getType, yyerror, list_concat, list_append, newList, yyerrok, yyerrok, advance, token]
%%%%%%%%%%
AddedMethodInvo Line:346 InvoName:lexer.setState(LexState.EXPR_BEG)
mBinding is null
%%%%%%%%%%
AddedMethodInvo Line:347 InvoName:support.initTopLocalVariables()
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.ParserSupport
ClassName:ParserSupport
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/ParserSupport.java
InvokedMethodSig:public void initTopLocalVariables() 
%%%%%%%%%%
AddedMethodInvo Line:362 InvoName:support.checkUselessStatement(ListNodeUtil.getLast(((IListNode)yyVals[0 + yyTop])))
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.ParserSupport
ClassName:ParserSupport
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/ParserSupport.java
InvokedMethodSig:public void checkUselessStatement(INode) 
%%%%%%%%%%
AddedMethodInvo Line:362 InvoName:ListNodeUtil.getLast(((IListNode)yyVals[0 + yyTop]))
mBinding is null
%%%%%%%%%%
AddedMethodInvo Line:364 InvoName:support.checkUselessStatement(((INode)yyVals[0 + yyTop]))
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.ParserSupport
ClassName:ParserSupport
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/ParserSupport.java
InvokedMethodSig:public void checkUselessStatement(INode) 
%%%%%%%%%%
AddedMethodInvo Line:367 InvoName:support.getResult().setAST(support.appendToBlock(support.getResult().getAST(),((INode)yyVals[0 + yyTop])))
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.RubyParserResult
ClassName:RubyParserResult
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/RubyParserResult.java
InvokedMethodSig:public void setAST(INode) 
%%%%%%%%%%
AddedMethodInvo Line:367 InvoName:support.getResult()
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.ParserSupport
ClassName:ParserSupport
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/ParserSupport.java
InvokedMethodSig:public org.jruby.parser.RubyParserResult getResult() 
%%%%%%%%%%
AddedMethodInvo Line:367 InvoName:support.appendToBlock(support.getResult().getAST(),((INode)yyVals[0 + yyTop]))
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.ParserSupport
ClassName:ParserSupport
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/ParserSupport.java
InvokedMethodSig:public INode appendToBlock(INode, INode) 
%%%%%%%%%%
AddedMethodInvo Line:367 InvoName:support.getResult().getAST()
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.RubyParserResult
ClassName:RubyParserResult
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/RubyParserResult.java
InvokedMethodSig:public INode getAST() 
%%%%%%%%%%
AddedMethodInvo Line:367 InvoName:support.getResult()
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.ParserSupport
ClassName:ParserSupport
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/ParserSupport.java
InvokedMethodSig:public org.jruby.parser.RubyParserResult getResult() 
%%%%%%%%%%
AddedMethodInvo Line:368 InvoName:support.updateTopLocalVariables()
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.ParserSupport
ClassName:ParserSupport
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/ParserSupport.java
InvokedMethodSig:public void updateTopLocalVariables() 
%%%%%%%%%%
AddedMethodInvo Line:377 InvoName:support.checkUselessStatements(((BlockNode)yyVals[-1 + yyTop]))
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.ParserSupport
ClassName:ParserSupport
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/ParserSupport.java
InvokedMethodSig:public void checkUselessStatements(BlockNode) 
%%%%%%%%%%
AddedMethodInvo Line:391 InvoName:support.appendToBlock(((INode)yyVals[-2 + yyTop]),support.newline_node(((INode)yyVals[0 + yyTop])))
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.ParserSupport
ClassName:ParserSupport
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/ParserSupport.java
InvokedMethodSig:public INode appendToBlock(INode, INode) 
%%%%%%%%%%
AddedMethodInvo Line:403 InvoName:lexer.setState(LexState.EXPR_FNAME)
mBinding is null
%%%%%%%%%%
AddedMethodInvo Line:412 InvoName:getPosition()
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.DefaultRubyParser
ClassName:DefaultRubyParser
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/DefaultRubyParser.java
InvokedMethodSig:private ISourcePosition getPosition() 
%%%%%%%%%%
AddedMethodInvo Line:421 InvoName:getPosition()
PackageName:org.jruby.parser
QualifiedClassName:org.jruby.parser.DefaultRubyParser
ClassName:DefaultRubyParser
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00120/org/jruby/parser/DefaultRubyParser.java
InvokedMethodSig:private ISourcePosition getPosition() 
%%%%%%%%%%
AddedMethodInvo Line:430 InvoName:getPosition()
