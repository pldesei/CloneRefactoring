(startLine=311 endLine=375 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00847/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    /**
     *  This method will generate Schema element for all the excetion types in a given JMethod
     *  - No matter what it will generate Schema element for java.lang.Exception so that for other
     *    exception which extend java.lang.Excetion can use as the base class type
     */
    protected void processException(JMethod jMethod, 
                                                 AxisOperation axisOperation) throws Exception {
        XmlSchemaComplexType methodSchemaType;
        XmlSchemaSequence sequence;
        if (jMethod.getExceptionTypes().length > 0) {
            if (!generateBaseException) {
                sequence = new XmlSchemaSequence();
                XmlSchema xmlSchema = getXmlSchema(schemaTargetNameSpace);
                QName elementName = new QName(schemaTargetNameSpace,
                        "Exception",
                        schema_namespace_prefix);
                XmlSchemaComplexType complexType = new XmlSchemaComplexType(xmlSchema);
                complexType.setName("Exception");
                xmlSchema.getItems().add(complexType);
                xmlSchema.getElements().add(elementName, complexType);
                typeTable.addComplexSchema(Exception.class.getName(), elementName);
                QName schemaTypeName = TypeTable.ANY_TYPE;
                addContentToMethodSchemaType(sequence,
                        schemaTypeName,
                        "Exception",
                        false);
                complexType.setParticle(sequence);
                generateBaseException = true;
            }
            JClass[] extypes = jMethod.getExceptionTypes();
            for (int j = 0; j < extypes.length; j++) {
                JClass extype = extypes[j];
                if (AxisFault.class.getName().equals(extype.getQualifiedName())) {
                    continue;
                }
                String partQname = extype.getSimpleName();
                methodSchemaType = createSchemaTypeForFault(partQname);
                QName elementName =
                        new QName(this.schemaTargetNameSpace, partQname, this.schema_namespace_prefix);
                sequence = new XmlSchemaSequence();
                if (Exception.class.getName().equals(extype.getQualifiedName())) {
                    addContentToMethodSchemaType(sequence,
                            typeTable.getComplexSchemaType(Exception.class.getName()),
                            partQname,
                            false);
                    methodSchemaType.setParticle(sequence);
                    typeTable.addComplexSchema(Exception.class.getPackage().getName(),
                            methodSchemaType.getQName());
                } else {
                    generateSchemaForType(sequence, extype, extype.getSimpleName());
                    methodSchemaType.setParticle(sequence);
                }

                typeTable.addComplexSchema(partQname,elementName);

                if (AxisFault.class.getName().equals(extype.getQualifiedName())) {
                    continue;
                }
                AxisMessage faultMessage = new AxisMessage();
                faultMessage.setName(extype.getSimpleName());
                faultMessage.setElementQName(typeTable.getQNamefortheType(partQname));
                axisOperation.setFaultMessages(faultMessage);
            }
        }
    }

