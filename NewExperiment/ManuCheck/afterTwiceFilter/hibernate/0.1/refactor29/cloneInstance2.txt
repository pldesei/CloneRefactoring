(startLine=139 endLine=176 srcPath=/root/NewExperiment/hibernateFilter/00482/hibernate-core/src/main/java/org/hibernate/hql/ast/exec/AbstractStatementExecutor.java)
	protected void createTemporaryTableIfNecessary(final Queryable persister, final SessionImplementor session) {
		// Don't really know all the codes required to adequately decipher returned jdbc exceptions here.
		// simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
		IsolatedWork work = new IsolatedWork() {
			public void doWork(Connection connection) throws HibernateException {
				try {
					Statement statement = connection.createStatement();
					try {
						statement.executeUpdate( persister.getTemporaryIdTableDDL() );
						JDBCExceptionReporter.handleAndClearWarnings( statement, CREATION_WARNING_HANDLER );
					}
					finally {
						try {
							statement.close();
						}
						catch( Throwable ignore ) {
							// ignore
						}
					}
				}
				catch( Exception e ) {
                    LOG.debugf("Unable to create temporary id table [%s]", e.getMessage());
				}
			}
		};
		if ( shouldIsolateTemporaryTableDDL() ) {
			if ( getFactory().getSettings().isDataDefinitionInTransactionSupported() ) {
				Isolater.doIsolatedWork( work, session );
			}
			else {
				Isolater.doNonTransactedWork( work, session );
			}
		}
		else {
			work.doWork( session.getJDBCContext().getConnectionManager().getConnection() );
			session.getJDBCContext().getConnectionManager().afterStatement();
		}
	}

