(startLine=205 endLine=240 srcPath=/home/sonia/NewExperiment/eclipse.jdt.coreFilter/00349/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java)
			if (fields != null) {
				for (int i = 0, count = fields.length; i < count; i++) {
					FieldDeclaration field = fields[i];
					if (field.isStatic()) {
						/*if (field.isField()){
							staticInitializerContext.handledExceptions = NoExceptions; // no exception is allowed jls8.3.2
						} else {*/
						staticInitializerContext.handledExceptions = defaultHandledExceptions; // tolerate them all, and record them
						/*}*/
						staticFieldInfo =
							field.analyseCode(
								staticInitializerScope,
								staticInitializerContext,
								staticFieldInfo);
						// in case the initializer is not reachable, use a reinitialized flowInfo and enter a fake reachable
						// branch, since the previous initializer already got the blame.
						if (staticFieldInfo == FlowInfo.DEAD_END) {
							staticInitializerScope.problemReporter().initializerMustCompleteNormally(field);
							staticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);
						}
					} else {
						/*if (field.isField()){
							initializerContext.handledExceptions = NoExceptions; // no exception is allowed jls8.3.2
						} else {*/
							initializerContext.handledExceptions = defaultHandledExceptions; // tolerate them all, and record them
						/*}*/
						nonStaticFieldInfo = field.analyseCode(initializerScope, initializerContext, nonStaticFieldInfo);
						// in case the initializer is not reachable, use a reinitialized flowInfo and enter a fake reachable
						// branch, since the previous initializer already got the blame.
						if (nonStaticFieldInfo == FlowInfo.DEAD_END) {
							initializerScope.problemReporter().initializerMustCompleteNormally(field);
							nonStaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);
						}
					}
				}
			}

