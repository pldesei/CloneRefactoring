(startLine=1582 endLine=1611 srcPath=/home/sonia/NewExperiment/eclipse.jdt.coreFilter/01393/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java)
		int typeID) {
			
		/* In the case trying to make a string concatenation, there is no need to create a new
		 * string buffer, thus use a lower-level API for code generation involving only the
		 * appending of arguments to the existing StringBuffer
		 */

		if ((((bits & OperatorMASK) >> OperatorSHIFT) == PLUS)
			&& ((bits & ReturnTypeIDMASK) == T_JavaLangString)) {
			if (constant != Constant.NotAConstant) {
				codeStream.generateConstant(constant, implicitConversion);
				codeStream.invokeStringConcatenationAppendForType(implicitConversion & COMPILE_TYPE_MASK);
			} else {
				int pc = codeStream.position;
				left.generateOptimizedStringConcatenation(
					blockScope,
					codeStream,
					left.implicitConversion & COMPILE_TYPE_MASK);
				codeStream.recordPositionsFrom(pc, left.sourceStart);
				pc = codeStream.position;
				right.generateOptimizedStringConcatenation(
					blockScope,
					codeStream,
					right.implicitConversion & COMPILE_TYPE_MASK);
				codeStream.recordPositionsFrom(pc, right.sourceStart);
			}
		} else {
			super.generateOptimizedStringConcatenation(blockScope, codeStream, typeID);
		}
	}

