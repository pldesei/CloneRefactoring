(startLine=737 endLine=785 srcPath=/home/sonia/NewExperiment/eclipse.jdt.coreFilter/01846/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java)
String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator) {
	TextEdit edit = codeFormatter.format(kind, source, offset, length, indentationLevel, lineSeparator);//$NON-NLS-1$
	if (edit == null) return null;
	String result = org.eclipse.jdt.internal.core.util.Util.editedString(source, edit);

	int count = 1;
	if (COMPARE == null && length == source.length()) {
		String previousResult = result;
		while (count++ < FORMAT_REPEAT) {
			edit = codeFormatter.format(kind, result, 0, result.length(), indentationLevel, lineSeparator);//$NON-NLS-1$
			if (edit == null) return null;
			previousResult = result;
			result = org.eclipse.jdt.internal.core.util.Util.editedString(result, edit);
		}
		if (!previousResult.equals(result)) {
			switch (IGNORE_SPACES) {
				case ALL_SPACES:
					String trimmedExpected = ModelTestsUtil.removeWhiteSpace(previousResult);
					String trimmedActual= ModelTestsUtil.removeWhiteSpace(result);
					if (trimmedExpected.equals(trimmedActual)) {
						this.whitespacesFailures.add(this.path);
						this.hasSpaceFailure = true;
						return previousResult;
					}
					break;
				case LINES_LEADING_SPACES:
					trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(previousResult);
					trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(result);
					if (trimmedExpected.equals(trimmedActual)) {
						this.leadingWhitespacesFailures.add(this.path);
						this.hasSpaceFailure = true;
						return previousResult;
					}
					if (ModelTestsUtil.removeWhiteSpace(previousResult).equals(ModelTestsUtil.removeWhiteSpace(result))) {
						this.whitespacesFailures.add(this.path);
						this.hasSpaceFailure = true;
						return previousResult;
					}
					break;
			}
			if (!isExpectedFailure()) {
				String counterString = counterToString(count);
				assertSourceEquals(counterString+" formatting is different from first one!", Util.convertToIndependantLineDelimiter(previousResult), Util.convertToIndependantLineDelimiter(result));
			}
			result = previousResult;
		}
	}
	return result;
}

