(startLine=919 endLine=1017 srcPath=/home/sonia/NewExperiment/eclipse.jdt.coreFilter/00598/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java)
	private void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace) {
		final int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;
		if (numberOfParens > 0) {
			manageOpeningParenthesizedExpression(arrayInitializer, numberOfParens);
		}
		
		String array_initializer_brace_position = this.preferences.array_initializer_brace_position;
		formatOpeningBrace(array_initializer_brace_position, insertSpaceBeforeOpeningBrace);

		if (this.preferences.insert_new_line_after_opening_brace_in_array_initializer) {
			this.scribe.printNewLine();
			for (int i = this.preferences.array_initializer_continuation_indentation; i > 0; i--) {
				this.scribe.indent();
			}
		}

		final Expression[] expressions = arrayInitializer.expressions;
		if (expressions != null) {
			int expressionsLength = expressions.length;
			if (expressionsLength > 1) {
				Alignment arrayInitializerAlignment =this.scribe.createAlignment(
						"array_initializer",//$NON-NLS-1$
						this.preferences.array_initializer_expressions_alignment,
						Alignment.R_OUTERMOST,
						expressionsLength,
						this.scribe.scanner.currentPosition,
						this.preferences.insert_new_line_after_opening_brace_in_array_initializer ? 0 : this.preferences.array_initializer_continuation_indentation,
						true);
				this.scribe.enterAlignment(arrayInitializerAlignment);
				boolean ok = false;
				do {
					try {
						this.scribe.alignFragment(arrayInitializerAlignment, 0);
						if (this.preferences.insert_space_before_first_initializer) {
							this.scribe.space();
						}
						expressions[0].traverse(this, scope);
						for (int i = 1; i < expressionsLength; i++) {
							this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
							this.scribe.alignFragment(arrayInitializerAlignment, i);
							if (this.preferences.insert_space_after_comma_in_array_initializer) {
								this.scribe.space();
							}
							expressions[i].traverse(this, scope);
							if (i == expressionsLength - 1) {
								if (isComma()) {
									this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
								}
							}
						}
						ok = true;
					} catch (AlignmentException e) {
						this.scribe.redoAlignment(e);
					}
				} while (!ok);
				this.scribe.exitAlignment(arrayInitializerAlignment, true);
			} else {
				// we don't need to use an alignment
				if (this.preferences.insert_space_before_first_initializer) {
					this.scribe.space();
				}
				expressions[0].traverse(this, scope);
				if (expressionsLength == 1) {
					if (isComma()) {
						this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
					}
				} else {
					for (int i = 1; i < expressionsLength; i++) {
						this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
						if (this.preferences.insert_space_after_comma_in_array_initializer) {
							this.scribe.space();
						}
						expressions[i].traverse(this, scope);
						if (i == expressionsLength - 1) {
							if (isComma()) {
								this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
							}
						}
					}
				}
			}
		}
		if (this.preferences.insert_new_line_after_opening_brace_in_array_initializer) {
			for (int i = this.preferences.array_initializer_continuation_indentation; i > 0; i--) {
				this.scribe.unIndent();
			}			
		}
		if (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {
			this.scribe.printNewLine();
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_before_closing_brace_in_array_initializer, true); 
		if (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {
			this.scribe.unIndent();
		}	
	
		if (numberOfParens > 0) {
			manageClosingParenthesizedExpression(arrayInitializer, numberOfParens);
		}
	}

