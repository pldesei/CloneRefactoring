(startLine=766 endLine=805 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Returns true if the Unit, or its owner has the ability
     * identified by <code>id</code>.
     *
     * @param id a <code>String</code> value
     * @return a <code>boolean</code> value
     */
    public boolean hasAbility(String id) {
        Set<Ability> result = new HashSet<Ability>();
        // UnitType abilities always apply
        result.addAll(unitType.getFeatureContainer().getAbilitySet(id));
        // the player's abilities may not apply
        result.addAll(getOwner().getFeatureContainer()
                      .getAbilitySet(id, unitType, getGame().getTurn()));
        // EquipmentType abilities always apply
        for (EquipmentType equipmentType : equipment.keySet()) {
            result.addAll(equipmentType.getFeatureContainer().getAbilitySet(id));
            // player abilities may also apply to equipment (missionary)
            result.addAll(getOwner().getFeatureContainer()
                          .getAbilitySet(id, equipmentType, getGame().getTurn()));
        }
        // Location abilities may apply. TODO: extend this to all
        // locations? May simplify code. Units are also Locations,
        // however, which complicates the issue. We do not want Units
        // aboard other Units to share the abilities of the carriers.
        if (getColony() != null) {
            result.addAll(getColony().getFeatureContainer()
                          .getAbilitySet(id, unitType, getGame().getTurn()));
        } else if (isInEurope()) {
            // TODO: the following check should not be necessary
            // Presumably, it will become redundant as soon as
            // Europe abilities are in the spec
            if (getOwner().getEurope() != null
                && getOwner().getEurope().getFeatureContainer() != null) {
                result.addAll(getOwner().getEurope().getFeatureContainer()
                              .getAbilitySet(id, unitType, getGame().getTurn()));
            }
        }
        return FeatureContainer.hasAbility(result);
    }

