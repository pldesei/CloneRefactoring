(startLine=8179 endLine=8248 srcPath=/home/sonia/NewExperiment/eclipse.jdt.coreFilter/02254/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java)
protected void consumeReferenceExpressionTypeForm(boolean isPrimitive, boolean isArray) {
	
	// ReferenceExpression ::= PrimitiveType Dims PushModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew
	// ReferenceExpression ::= Modifiers PrimitiveType Dims PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew
	// ReferenceExpression ::= Name Dims PushModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew
	// ReferenceExpression ::= Modifiers Name Dims PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew
	// ReferenceExpression ::= Modifiers Name PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew

	ReferenceExpression rexp;
	TypeReference type = null;
	TypeReference [] typeArguments = null;
	SingleNameReference methodReference = null;
	int newEnd = -1;
	
	boolean newForm = this.intStack[this.intPtr--] != 0;
	if (newForm) {
		newEnd = this.intStack[this.intPtr--] + 3; // "new"
	} else {
		methodReference = (SingleNameReference) getUnspecifiedReferenceOptimized();
	}
	
	int length = this.genericsLengthStack[this.genericsLengthPtr--];
	if (length > 0) {
		this.genericsPtr -= length;
		System.arraycopy(this.genericsStack, this.genericsPtr + 1, typeArguments = new TypeReference[length], 0, length);
		this.intPtr--;  // pop type arguments source start.
	}
	
	int illegalModifiersSourceStart = this.intStack[this.intPtr--];
	int illegalModifiers = this.intStack[this.intPtr--];
	
	if (!isPrimitive) { // handle type arguments
		pushOnGenericsLengthStack(0);
		pushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);
	}

	// Type Annotations are in the expression stack, so retrieve as unannotated type 
	type = getUnannotatedTypeReference(isArray ? this.intStack[this.intPtr--] : 0);
    // and attach the annotations now.
	if ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {
		type.annotations = new Annotation[type.getAnnotatableLevels()][];
		System.arraycopy(
				this.expressionStack,
				(this.expressionPtr -= length) + 1,
				type.annotations[0] = new Annotation[length],
				0,
				length);
		type.sourceStart = type.annotations[0][0].sourceStart;
		type.bits |= ASTNode.HasTypeAnnotations;
	}
	if (illegalModifiersSourceStart >= 0 && illegalModifiersSourceStart < type.sourceStart) {
		type.sourceStart = illegalModifiersSourceStart;
	}

	if (illegalModifiers != ClassFileConstants.AccDefault) {
		problemReporter().invalidLocationForModifiers(type);
	}
	resetModifiers();
	
	if (newForm) {
		rexp = new ReferenceExpression(type, typeArguments, newEnd);
	} else {
		rexp = new ReferenceExpression(type, typeArguments, methodReference);
	}

	pushOnExpressionStack(rexp);
	if (!this.parsingJava8Plus) {
		problemReporter().referenceExpressionsNotBelow18(rexp);
	}
}

