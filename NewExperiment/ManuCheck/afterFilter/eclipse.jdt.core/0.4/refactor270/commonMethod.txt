(startLine=272 endLine=305 srcPath=/home/sonia/NewExperiment/eclipse.jdt.coreFilter/00477/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java)
	/**
	 * Check binary operator casted arguments 
	 */
	public static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, Expression right, int rightTypeId) {

		if (scope.environment().options.getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) return;

		// check need for operand cast
		boolean unnecessaryLeftCast = (left.bits & UnnecessaryCastMask) != 0;
		int alternateLeftTypeId = unnecessaryLeftCast ? ((CastExpression)left).expression.resolvedType.id : leftTypeId;
		if (unnecessaryLeftCast && alternateLeftTypeId == leftTypeId) {
			// obvious identity cast
			scope.problemReporter().unnecessaryCast((CastExpression)left); 
			unnecessaryLeftCast = false;
		}
		boolean unnecessaryRightCast = (right.bits & UnnecessaryCastMask) != 0;
		int alternateRightTypeId = unnecessaryRightCast ? ((CastExpression)right).expression.resolvedType.id : rightTypeId;
		if (unnecessaryRightCast && alternateRightTypeId == rightTypeId) {
			// obvious identity cast
			scope.problemReporter().unnecessaryCast((CastExpression)right); 
			unnecessaryRightCast = false;
		}
		if (unnecessaryLeftCast || unnecessaryRightCast) {
			int alternateOperatorSignature = OperatorExpression.OperatorSignatures[operator][(alternateLeftTypeId << 4) + alternateRightTypeId];
			// (cast)  left   Op (cast)  right --> result
			//  1111   0000       1111   0000     1111
			//  <<16   <<12       <<8    <<4       <<0
			final int CompareMASK = (0xF<<16) + (0xF<<8) + 0xF; // mask hiding compile-time types
			if ((operatorSignature & CompareMASK) == (alternateOperatorSignature & CompareMASK)) { // same promotions and result
				if (unnecessaryLeftCast) scope.problemReporter().unnecessaryCastForArgument((CastExpression)left,  TypeBinding.wellKnownType(scope, left.implicitConversion >> 4)); 
				if (unnecessaryRightCast) scope.problemReporter().unnecessaryCastForArgument((CastExpression)right, TypeBinding.wellKnownType(scope,  right.implicitConversion >> 4));
			}
		}
	}

