(startLine=115 endLine=187 srcPath=/root/NewExperiment/hibernateFilter/01093/hibernate-core/src/test/java/org/hibernate/loader/EntityWithNonLazyOneToManyListResultSetProcessorTest.java)
		{
			final SingleRootReturnLoadPlanBuilderStrategy strategy = new SingleRootReturnLoadPlanBuilderStrategy(
					sessionFactory(),
					LoadQueryInfluencers.NONE
			);
			final LoadPlan plan = LoadPlanBuilder.buildRootEntityLoadPlan( strategy, entityPersister );
			final LoadQueryAliasResolutionContext aliasResolutionContext =
					new LoadQueryAliasResolutionContextImpl(
							sessionFactory(),
							0,
							Collections.singletonMap( plan.getReturns().get( 0 ), new String[] { "abc" } )
					);
			final EntityLoadQueryBuilderImpl queryBuilder = new EntityLoadQueryBuilderImpl(
					LoadQueryInfluencers.NONE,
					plan
			);
			final String sql = queryBuilder.generateSql( 1, sessionFactory(), aliasResolutionContext );

			final ResultSetProcessorImpl resultSetProcessor = new ResultSetProcessorImpl( plan );
			final List results = new ArrayList();

			final Session workSession = openSession();
			workSession.beginTransaction();
			workSession.doWork(
					new Work() {
						@Override
						public void execute(Connection connection) throws SQLException {
							PreparedStatement ps = connection.prepareStatement( sql );
							ps.setInt( 1, 0 );
							ResultSet resultSet = ps.executeQuery();
							results.addAll(
									resultSetProcessor.extractResults(
											NoOpLoadPlanAdvisor.INSTANCE,
											resultSet,
											(SessionImplementor) workSession,
											new QueryParameters(),
											new NamedParameterContext() {
												@Override
												public int[] getNamedParameterLocations(String name) {
													return new int[0];
												}
											},
											aliasResolutionContext,
											true,
											false,
											null,
											null
									)
							);
							resultSet.close();
							ps.close();
						}
					}
			);
			assertEquals( 2, results.size() );
			Object result1 = results.get( 0 );
			assertNotNull( result1 );
			assertSame( result1, results.get( 1 ) );

			Poster workPoster = ExtraAssertions.assertTyping( Poster.class, result1 );
			assertEquals( 0, workPoster.pid.intValue() );
			assertEquals( poster.name, workPoster.name );
			assertTrue( Hibernate.isInitialized( workPoster.messages ) );
			assertEquals( 2, workPoster.messages.size() );
			assertTrue( Hibernate.isInitialized( posterGotten.messages ) );
			assertEquals( 2, workPoster.messages.size() );
			assertEquals( message1.msgTxt, workPoster.messages.get( 0 ).msgTxt );
			assertEquals( message2.msgTxt, workPoster.messages.get( 1 ).msgTxt );
			assertSame( workPoster, workPoster.messages.get( 0 ).poster );
			assertSame( workPoster, workPoster.messages.get( 1 ).poster );
			workSession.getTransaction().commit();
			workSession.close();
		}

