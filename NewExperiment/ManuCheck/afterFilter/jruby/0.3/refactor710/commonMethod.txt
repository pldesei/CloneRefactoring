(startLine=937 endLine=980 srcPath=/home/sonia/NewExperiment/jrubyFilter/00811/src/org/jruby/javasupport/JavaUtil.java)
    public static Object coerceNumericToType(RubyNumeric numeric, Class target) {
        // TODO: this could be faster
        if (target.isPrimitive()) {
            if (target == Byte.TYPE) {
                return Byte.valueOf((byte)numeric.getLongValue());
            } else if (target == Short.TYPE) {
                return Short.valueOf((short)numeric.getLongValue());
            } else if (target == Character.TYPE) {
                return Character.valueOf((char)numeric.getLongValue());
            } else if (target == Integer.TYPE) {
                return Integer.valueOf((int)numeric.getLongValue());
            } else if (target == Long.TYPE) {
                return Long.valueOf(numeric.getLongValue());
            } else if (target == Double.TYPE) {
                return Double.valueOf(numeric.getDoubleValue());
            } else if (target == Float.TYPE) {
                return Float.valueOf((float)numeric.getDoubleValue());
            }
        } else if (target == Byte.class) {
            return Byte.valueOf((byte)numeric.getLongValue());
        } else if (target == Short.class) {
            return Short.valueOf((short)numeric.getLongValue());
        } else if (target == Character.class) {
            return Character.valueOf((char)numeric.getLongValue());
        } else if (target == Integer.class) {
            return Integer.valueOf((int)numeric.getLongValue());
        } else if (target == Long.class) {
            return Long.valueOf((long)numeric.getLongValue());
        } else if (target == Float.class) {
            return Float.valueOf((float)numeric.getDoubleValue());
        } else if (target == Double.class) {
            return Double.valueOf((double)numeric.getDoubleValue());
        } else if (target == Object.class) {
            // for Object, default to natural wrapper type
            if (numeric instanceof RubyFixnum) {
                return Long.valueOf(numeric.getLongValue());
            } else if (numeric instanceof RubyFloat) {
                return Double.valueOf(numeric.getDoubleValue());
            } else if (numeric instanceof RubyBignum) {
                return ((RubyBignum)numeric).getValue();
            }
        }
        throw numeric.getRuntime().newTypeError("could not coerce " + numeric.getMetaClass() + " to " + target);
    }

