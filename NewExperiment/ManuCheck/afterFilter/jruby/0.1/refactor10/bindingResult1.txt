ProjectPath:/home/sonia/NewExperiment/jrubyFilter/00074
predFragLineRange:968-976
predMethodLineRange:277-2368
nextLineRange:277-2349
predStrMethodInvoNames:
[arraycopy, arraycopy, advance, token, value, yyerror, yyExpecting, value, yyDefault, getDynamicVars, setLexState, top_local_init, getRubyClass, getObjectClass, getClasses, setClassNest, setClassNest, isCompileForEval, getType, void_expr, getNextNode, getNextNode, void_expr, getHeadNode, setEvalTree, block_append, getEvalTree, top_local_setup, setClassNest, setDynamicVars, void_stmts, newline_node, block_append, newline_node, setLexState, isInDef, isInSingle, yyerror, newAlias, isInDef, isInSingle, yyerror, newVAlias, isInDef, isInSingle, yyerror, getNth, newVAlias, intern, yyerror, isInDef, isInSingle, yyerror, value_expr, newIf, cond, fixpos, value_expr, newUnless, cond, fixpos, value_expr, newWhile, cond, getBodyNode, newWhile, cond, value_expr, newUntil, cond, getBodyNode, newUntil, cond, newRescue, newResBody, isInDef, isInSingle, yyerror, local_push, setEvalTreeBegin, block_append, getEvalTree, newPreExe, local_pop, isCompileForEval, isInDef, isInSingle, yyerror, newIter, newPostExe, value_expr, node_assign, value_expr, setValueNode, node_assign, value_expr, setValueNode, isCompileForEval, isInDef, isInSingle, yyerror, newReturn, ret_args, logop, logop, value_expr, newNot, cond, newNot, cond, value_expr, new_call, value_expr, new_call, new_fcall, fixpos, value_expr, new_call, fixpos, value_expr, new_call, fixpos, isCompileForEval, isInDef, isInSingle, yyerror, new_super, fixpos, newYield, ret_args, fixpos, newMAsgn, newList, newMAsgn, newMAsgn, list_append, newMAsgn, newMAsgn, newMAsgn, newMAsgn, newList, list_append, assignable, aryset, attrset, attrset, attrset, rb_backref_error, assignable, aryset, attrset, attrset, attrset, rb_backref_error, yyerror, setLexState, setLexState, newUndef, setLexState, block_append, newUndef, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, newId, value_expr, node_assign, assignable, intValue, setValueNode, newOpAsgnOr, gettable, isInstanceId, setAId, intValue, setValueNode, newOpAsgnAnd, gettable, setValueNode, call_op, gettable, intValue, fixpos, newList, list_append, newNil, list_concat, intValue, newId, intValue, newId, newOpAsgn1, fixpos, intValue, newId, intValue, newId, newOpAsgn2, fixpos, intValue, newId, intValue, newId, newOpAsgn2, fixpos, intValue, newId, intValue, newId, newOpAsgn2, fixpos, rb_backref_error, newDot2, newDot3, call_op, call_op, call_op, call_op, call_op, getLiteral, getLiteral, getLiteral, isTrue, funcall, getLiteral, intern, zero, setLiteral, funcall, getLiteral, intern, call_op, call_op, call_op, getLiteral, getValue, getLiteral, setLiteral, newFixnum, call_op, call_op, call_op, call_op, call_op, call_op, call_op, call_op, call_op, call_op, call_op, newNot, call_op, match_gen, newNot, match_gen, value_expr, newNot, cond, call_op, call_op, call_op, logop, logop, setInDefined, setInDefined, newDefined, value_expr, newIf, cond, fixpos, newList, list_append, value_expr, arg_concat, newList, newHash, value_expr, newRestArgs, newList, list_append, newList, list_append, arg_blk_pass, value_expr, arg_concat, arg_blk_pass, newList, newHash, arg_blk_pass, value_expr, arg_concat, newList, newHash, arg_blk_pass, list_append, newHash, arg_blk_pass, value_expr, arg_concat, list_append, newHash, arg_blk_pass, value_expr, arg_blk_pass, newRestArgs, CMDARG_PUSH, CMDARG_POP, value_expr, newBlockPass, value_expr, newList, value_expr, list_append, value_expr, value_expr, list_append, value_expr, arg_concat, value_expr, getType, getNextNode, getHeadNode, getType, rb_compile_error, newLit, newXStr, newVCall, newBegin, newRescue, rb_warn, block_append, newEnsure, fixpos, value_expr, newColon2, newColon3, value_expr, newCall, newId, newZArray, newHash, isCompileForEval, isInDef, isInSingle, yyerror, value_expr, newReturn, isCompileForEval, isInDef, isInSingle, yyerror, newReturn, isCompileForEval, isInDef, isInSingle, yyerror, newReturn, value_expr, newYield, newYield, newYield, setInDefined, setInDefined, newDefined, setIterNode, newFCall, getType, rb_compile_error, setIterNode, fixpos, value_expr, newIf, cond, fixpos, value_expr, newUnless, cond, fixpos, COND_PUSH, COND_POP, value_expr, newWhile, cond, fixpos, COND_PUSH, COND_POP, value_expr, newUntil, cond, fixpos, value_expr, newCase, fixpos, COND_PUSH, COND_POP, value_expr, newFor, fixpos, isInDef, isInSingle, yyerror, setClassNest, getClassNest, local_push, getSourceLine, newClass, setLine, intValue, local_pop, setClassNest, getClassNest, getInDef, setInDef, getInSingle, setInSingle, setClassNest, getClassNest, local_push, newSClass, fixpos, local_pop, setClassNest, getClassNest, setInDef, intValue, setInSingle, intValue, isInDef, isInSingle, yyerror, setClassNest, getClassNest, local_push, getSourceLine, newModule, setLine, intValue, local_pop, setClassNest, getClassNest, isInDef, isInSingle, yyerror, getCurMid, setCurMid, setInDef, getInDef, local_push, newRescue, rb_warn, block_append, newEnsure, newDefn, getClassNest, isAttrSetId, setNoex, fixpos, local_pop, setInDef, getInDef, setCurMid, setLexState, value_expr, setInSingle, getInSingle, local_push, setLexState, newRescue, rb_warn, block_append, newEnsure, newDefs, fixpos, local_pop, setInSingle, getInSingle, newBreak, newNext, newRedo, newRetry, value_expr, newIf, cond, fixpos, dyna_push, newIter, fixpos, dyna_pop, getType, rb_compile_error, setIterNode, fixpos, value_expr, new_call, value_expr, new_call, new_fcall, fixpos, value_expr, new_call, fixpos, value_expr, new_call, fixpos, value_expr, new_call, isCompileForEval, isInDef, isInSingle, isInDefined, yyerror, new_super, isCompileForEval, isInDef, isInSingle, isInDefined, yyerror, newZSuper, dyna_push, newIter, fixpos, dyna_pop, dyna_push, newIter, fixpos, dyna_pop, newWhen, value_expr, list_append, newWhen, value_expr, newList, newWhen, node_assign, newGVar, intern, block_append, newResBody, fixpos, newNil, toSymbol, newStr, getType, list_append, newStr, concat, getLiteral, getType, newDStr, getLiteral, setHeadNode, newStr, getLiteral, printStackTrace, getName, getClass, list_concat, setLexState, newId, newId, newId, newId, newId, newId, gettable, setLexState, yyerrok, setLexState, block_append, newArgs, intValue, block_append, newArgs, block_append, newArgs, intValue, block_append, newArgs, block_append, newArgs, intValue, block_append, newArgs, block_append, newArgs, intValue, block_append, newArgs, newArgs, yyerror, yyerror, yyerror, yyerror, isLocalId, yyerror, local_id, yyerror, local_cnt, intValue, isLocalId, yyerror, local_id, yyerror, assignable, newBlock, setEndNode, block_append, isLocalId, yyerror, local_id, yyerror, local_cnt, isLocalId, yyerror, local_id, yyerror, newBlockArg, getType, newSelf, setLexState, getType, yyerror, list_concat, list_append, newList, yyerrok, yyerrok, advance, token]
%%%%%%%%%%
AddedMethodInvo Line:932 InvoName:((String)yyVals[-2 + yyTop]).equals("||")
PackageName:java.lang
QualifiedClassName:java.lang.String
ClassName:String
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00074/java/lang/String.java
InvokedMethodSig:public boolean equals(java.lang.Object) 
%%%%%%%%%%
AddedMethodInvo Line:935 InvoName:IdUtil.isInstanceVariable(((String)yyVals[-3 + yyTop]))
PackageName:org.jruby.util
QualifiedClassName:org.jruby.util.IdUtil
ClassName:IdUtil
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00074/org/jruby/util/IdUtil.java
InvokedMethodSig:public static boolean isInstanceVariable(java.lang.String) 
%%%%%%%%%%
AddedMethodInvo Line:938 InvoName:((String)yyVals[-2 + yyTop]).equals("&&")
PackageName:java.lang
QualifiedClassName:java.lang.String
ClassName:String
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00074/java/lang/String.java
InvokedMethodSig:public boolean equals(java.lang.Object) 
%%%%%%%%%%
AddedMethodInvo Line:1738 InvoName:IdUtil.isAttrSet(((String)yyVals[-7 + yyTop]))
PackageName:org.jruby.util
QualifiedClassName:org.jruby.util.IdUtil
ClassName:IdUtil
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00074/org/jruby/util/IdUtil.java
InvokedMethodSig:public static boolean isAttrSet(java.lang.String) 
%%%%%%%%%%
AddedMethodInvo Line:1996 InvoName:RubySymbol.newSymbol(ruby,((String)yyVals[0 + yyTop]))
PackageName:org.jruby
QualifiedClassName:org.jruby.RubySymbol
ClassName:RubySymbol
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00074/org/jruby/RubySymbol.java
InvokedMethodSig:public static org.jruby.RubySymbol newSymbol(org.jruby.Ruby, java.lang.String) 
%%%%%%%%%%
AddedMethodInvo Line:2183 InvoName:IdUtil.isLocal(((String)yyVals[0 + yyTop]))
PackageName:org.jruby.util
QualifiedClassName:org.jruby.util.IdUtil
ClassName:IdUtil
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00074/org/jruby/util/IdUtil.java
InvokedMethodSig:public static boolean isLocal(java.lang.String) 
%%%%%%%%%%
AddedMethodInvo Line:2200 InvoName:IdUtil.isLocal(((String)yyVals[-2 + yyTop]))
PackageName:org.jruby.util
QualifiedClassName:org.jruby.util.IdUtil
ClassName:IdUtil
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00074/org/jruby/util/IdUtil.java
InvokedMethodSig:public static boolean isLocal(java.lang.String) 
%%%%%%%%%%
AddedMethodInvo Line:2223 InvoName:IdUtil.isLocal(((String)yyVals[0 + yyTop]))
PackageName:org.jruby.util
QualifiedClassName:org.jruby.util.IdUtil
ClassName:IdUtil
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00074/org/jruby/util/IdUtil.java
InvokedMethodSig:public static boolean isLocal(java.lang.String) 
%%%%%%%%%%
AddedMethodInvo Line:2239 InvoName:IdUtil.isLocal(((String)yyVals[0 + yyTop]))
PackageName:org.jruby.util
QualifiedClassName:org.jruby.util.IdUtil
ClassName:IdUtil
InvokedFilePath:/home/sonia/NewExperiment/jrubyFilter/00074/org/jruby/util/IdUtil.java
InvokedMethodSig:public static boolean isLocal(java.lang.String) 
