(startLine=155 endLine=192 srcPath=/home/sonia/NewExperiment/jrubyFilter/00087/org/jruby/javasupport/JavaSupport.java)
		{

			Map.Entry entry = (Map.Entry) iter.next();
			//make sure we add the method and not replace a previously existing version


			String javaName = (String)entry.getKey();
			String lRubyStyleName = null;
			if (javaName.startsWith("get"))
			{
				lRubyStyleName = Character.toLowerCase(javaName.charAt(3)) + javaName.substring(4);
			} else if (javaName.startsWith("is"))
			{
				lRubyStyleName = Character.toLowerCase(javaName.charAt(2)) + javaName.substring(3) + "?";
			} else if (javaName.startsWith("can"))
			{
				lRubyStyleName = Character.toLowerCase(javaName.charAt(3)) + javaName.substring(4) + "?";
			} else if (javaName.startsWith("has"))
			{
				lRubyStyleName = Character.toLowerCase(javaName.charAt(3)) + javaName.substring(4) + "?";
			} else if (javaName.startsWith("set"))
			{
				lRubyStyleName = Character.toLowerCase(javaName.charAt(3)) + javaName.substring(4) + "=";
			}
			if (lRubyStyleName != null)
			{ 
				List lMethodList = (List)singletonMethodMap.get(lRubyStyleName);
				if (lMethodList != null)
					lMethodList.addAll((List)entry.getValue());
				else 
					lMethodList = (List)entry.getValue();
				methods = (Method[]) lMethodList.toArray(new Method[lMethodList.size()]);
				newRubyClass.defineSingletonMethod(lRubyStyleName, new JavaMethod(methods, true));
			}
			List lMethodList = (List) entry.getValue();
			methods = (Method[]) lMethodList.toArray(new Method[lMethodList.size()]);
			newRubyClass.defineSingletonMethod(javaName, new JavaMethod(methods, true));
		}

