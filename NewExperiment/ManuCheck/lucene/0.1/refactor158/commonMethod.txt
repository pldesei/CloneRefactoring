(startLine=29 endLine=66 srcPath=/home/sonia/NewExperiment/luceneFilter/02745/lucene/spatial3d/src/java/org/apache/lucene/geo3d/XYZSolidFactory.java)
  /**
   * Create a XYZSolid of the right kind given (x,y,z) bounds.
   * @param planetModel is the planet model
   * @param minX is the min X boundary
   * @param maxX is the max X boundary
   * @param minY is the min Y boundary
   * @param maxY is the max Y boundary
   * @param minZ is the min Z boundary
   * @param maxZ is the max Z boundary
   */
  public static XYZSolid makeXYZSolid(final PlanetModel planetModel, final double minX, final double maxX, final double minY, final double maxY, final double minZ, final double maxZ) {
    if (Math.abs(maxX - minX) < Vector.MINIMUM_RESOLUTION) {
      if (Math.abs(maxY - minY) < Vector.MINIMUM_RESOLUTION) {
        if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {
          return new dXdYdZSolid(planetModel, (minX+maxX) * 0.5, (minY+maxY) * 0.5, minZ);
        } else {
          return new dXdYZSolid(planetModel, (minX+maxX) * 0.5, (minY+maxY) * 0.5, minZ, maxZ);
        }
      } else {
        if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {
          return new dXYdZSolid(planetModel, (minX+maxX) * 0.5, minY, maxY, (minZ+maxZ) * 0.5);
        } else {
          return new dXYZSolid(planetModel, (minX+maxX) * 0.5, minY, maxY, minZ, maxZ);
        }
      }
    }
    if (Math.abs(maxY - minY) < Vector.MINIMUM_RESOLUTION) {
      if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {
        return new XdYdZSolid(planetModel, minX, maxX, (minY+maxY) * 0.5, (minZ+maxZ) * 0.5);
      } else {
        return new XdYZSolid(planetModel, minX, maxX, (minY+maxY) * 0.5, minZ, maxZ);
      }
    }
    if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {
      return new XYdZSolid(planetModel, minX, maxX, minY, maxY, (minZ+maxZ) * 0.5);
    }
    return new StandardXYZSolid(planetModel, minX, maxX, minY, maxY, minZ, maxZ);
  }

