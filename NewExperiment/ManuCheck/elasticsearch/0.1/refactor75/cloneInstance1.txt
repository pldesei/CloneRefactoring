(startLine=81 endLine=155 srcPath=/root/NewExperiment/elasticsearchFilter/00729/src/main/java/org/elasticsearch/index/fielddata/plain/FloatArrayIndexFieldData.java)
    public FloatArrayAtomicFieldData loadDirect(AtomicReaderContext context) throws Exception {
        AtomicReader reader = context.reader();

        Terms terms = reader.terms(getFieldNames().indexName());
        if (terms == null) {
            return FloatArrayAtomicFieldData.EMPTY;
        }

        // TODO: how can we guess the number of terms? numerics end up creating more terms per value...
        final TFloatArrayList values = new TFloatArrayList();
        ArrayList<int[]> ordinals = new ArrayList<int[]>();
        int[] idx = new int[reader.maxDoc()];
        ordinals.add(new int[reader.maxDoc()]);

        values.add(0); // first "t" indicates null value
        int termOrd = 1;  // current term number

        TermsEnum termsEnum = terms.iterator(null);
        try {
            DocsEnum docsEnum = null;
            for (BytesRef term = termsEnum.next(); term != null; term = termsEnum.next()) {
                values.add(FieldCache.NUMERIC_UTILS_FLOAT_PARSER.parseFloat(term));
                docsEnum = termsEnum.docs(reader.getLiveDocs(), docsEnum, 0);
                for (int docId = docsEnum.nextDoc(); docId != DocsEnum.NO_MORE_DOCS; docId = docsEnum.nextDoc()) {
                    int[] ordinal;
                    if (idx[docId] >= ordinals.size()) {
                        ordinal = new int[reader.maxDoc()];
                        ordinals.add(ordinal);
                    } else {
                        ordinal = ordinals.get(idx[docId]);
                    }
                    ordinal[docId] = termOrd;
                    idx[docId]++;
                }
                termOrd++;
            }
        } catch (RuntimeException e) {
            if (e.getClass().getName().endsWith("StopFillCacheException")) {
                // all is well, in case numeric parsers are used.
            } else {
                throw e;
            }
        }

        if (ordinals.size() == 1) {
            int[] nativeOrdinals = ordinals.get(0);
            FixedBitSet set = new FixedBitSet(reader.maxDoc());
            float[] sValues = new float[reader.maxDoc()];
            boolean allHaveValue = true;
            for (int i = 0; i < nativeOrdinals.length; i++) {
                int nativeOrdinal = nativeOrdinals[i];
                if (nativeOrdinal == 0) {
                    allHaveValue = false;
                } else {
                    set.set(i);
                    sValues[i] = values.get(nativeOrdinal);
                }
            }
            if (allHaveValue) {
                return new FloatArrayAtomicFieldData.Single(sValues, reader.maxDoc());
            } else {
                return new FloatArrayAtomicFieldData.SingleFixedSet(sValues, reader.maxDoc(), set);
            }
        } else {
            int[][] nativeOrdinals = new int[ordinals.size()][];
            for (int i = 0; i < nativeOrdinals.length; i++) {
                nativeOrdinals[i] = ordinals.get(i);
            }
            return new FloatArrayAtomicFieldData.WithOrdinals(
                    values.toArray(new float[values.size()]),
                    reader.maxDoc(),
                    Ordinals.Factories.createFromFlatOrdinals(nativeOrdinals, termOrd, fieldDataType.getSettings())
            );
        }
    }

