(startLine=294 endLine=317 srcPath=/root/NewExperiment/elasticsearchFilter/00938/src/test/java/org/elasticsearch/test/integration/recovery/RecoveryWhileUnderLoadTests.java)
    private void iterateAssertCount(final int numberOfShards, final long numberOfDocs, int iterations) {

        CountResponse[] iterationResults = new CountResponse[iterations];

        for (int i = 0; i < iterations; i++) {
            CountResponse countResponse = client().prepareCount().setQuery(matchAllQuery()).execute().actionGet();
            iterationResults[i] = countResponse;
            logger.info("iteration [{}] - successful shards: {} (expected {})", i, countResponse.getSuccessfulShards(), numberOfShards);
            logger.info("iteration [{}] - failed shards: {} (expected 0)", i, countResponse.getFailedShards());
            if (countResponse.getShardFailures() != null && countResponse.getShardFailures().length > 1) {
                logger.info("iteration [{}] - shard failures: {}", i, Arrays.toString(countResponse.getShardFailures()));
            }
            logger.info("iteration [{}] - returned documents: {} (expected {})", i, countResponse.getCount(), numberOfDocs);
        }

        for (int i = 0; i < iterations; i++) {
            CountResponse actionGet = iterationResults[i];
            assertNoFailures(actionGet);
            //checking that we are not missing any shard
            assertThat(actionGet.getSuccessfulShards(), equalTo(numberOfShards));
            //if it fails here it means that some shard is missing documents (not refreshed?)
            assertThat("iteration: " + i + " failed", actionGet.getCount(), equalTo(numberOfDocs));
        }
    }

