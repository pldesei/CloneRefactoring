[<(startLine=207 endLine=229 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00748/modules/java2wsdl/src/org/apache/ws/java2wsdl/Java2OMBuilder.java)
                    + RESPONSE)) != null) {
                namespaceURI = messagePartType.getNamespaceURI();
                if ((namespacePrefix = (String) messagePartType.getPrefix()) == null &&
                        (namespacePrefix = (String) namespaceMap.get(namespaceURI)) == null) {
                    namespacePrefix = generatePrefix();
                    namespaceMap.put(namespaceURI, namespacePrefix);
                }
                //Response Message
                OMElement responseMessge = fac.createOMElement(
                        MESSAGE_LOCAL_NAME, wsdl);
                responseMessge.addAttribute(ATTRIBUTE_NAME, jmethod
                        .getSimpleName()
                        + RESPONSE_MESSAGE, null);
                definitions.addChild(responseMessge);
                OMElement responsePart = fac.createOMElement(
                        PART_ATTRIBUTE_NAME, wsdl);
                responseMessge.addChild(responsePart);
                responsePart.addAttribute(ATTRIBUTE_NAME, "part1", null);

                responsePart.addAttribute(ELEMENT_ATTRIBUTE_NAME,
                        namespacePrefix + COLON_SEPARATOR
                                + jmethod.getSimpleName() + RESPONSE, null);
            }
,
(startLine=231 endLine=255 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00748/modules/java2wsdl/src/org/apache/ws/java2wsdl/Java2OMBuilder.java)
            if (jmethod.getExceptionTypes().length > 0) {
                if ((messagePartType = typeTable.getComplexSchemaType(jmethod.getSimpleName() + "Fault")) != null) {
                    namespaceURI = messagePartType.getNamespaceURI();
                    if ((namespacePrefix = (String) messagePartType.getPrefix()) == null &&
                            (namespacePrefix = (String) namespaceMap.get(namespaceURI)) == null) {
                        namespacePrefix = generatePrefix();
                        namespaceMap.put(namespaceURI, namespacePrefix);
                    }
                    //Response Message
                    OMElement responseMessge = fac.createOMElement(
                            MESSAGE_LOCAL_NAME, wsdl);
                    responseMessge.addAttribute(ATTRIBUTE_NAME, jmethod
                            .getSimpleName()
                            + "Fault", null);
                    definitions.addChild(responseMessge);
                    OMElement responsePart = fac.createOMElement(
                            PART_ATTRIBUTE_NAME, wsdl);
                    responseMessge.addChild(responsePart);
                    responsePart.addAttribute(ATTRIBUTE_NAME, "part1", null);

                    responsePart.addAttribute(ELEMENT_ATTRIBUTE_NAME,
                            namespacePrefix + COLON_SEPARATOR
                                    + jmethod.getSimpleName() + "Fault", null);
                }
            }
,
>
, <(startLine=189 endLine=218 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00513/modules/core/src/org/apache/axis2/description/OperationDescription.java)
    public OperationContext findOperationContext(MessageContext msgContext, ServiceContext serviceContext) throws AxisFault {
        OperationContext operationContext = null;

        if (null == msgContext.getRelatesTo()) {
            //Its a new incomming message so get the factory to create a new
            // one
            operationContext =
                    OperationContextFactory.createOperationContext(
                            getAxisSpecifMEPConstant(),  this, serviceContext);

        } else {
            // So this message is part of an ongoing MEP
            //			operationContext =
            ConfigurationContext configContext = msgContext.getSystemContext();
            operationContext =
                    configContext.getOperationContext(
                            msgContext.getRelatesTo().getValue());

            if (null == operationContext) {
                throw new AxisFault(Messages.getMessage("cannotCorrealteMsg",
                        this.getName().toString(),msgContext.getRelatesTo().getValue()));
            }

        }

        registerOperationContext(msgContext, operationContext);

        return operationContext;

    }
,
(startLine=226 endLine=248 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00513/modules/core/src/org/apache/axis2/description/OperationDescription.java)
    public OperationContext findForExistingOperationContext(MessageContext msgContext) throws AxisFault {
        OperationContext operationContext = null;

        if (null == msgContext.getRelatesTo()) {
            return null;
        } else {
            // So this message is part of an ongoing MEP
            //			operationContext =
            ConfigurationContext configContext = msgContext.getSystemContext();
            operationContext = configContext.getOperationContext(msgContext.getRelatesTo().getValue());

            if (null == operationContext) {
                throw new AxisFault(Messages.getMessage("cannotCorrealteMsg",
                        this.getName().toString(),msgContext.getRelatesTo().getValue()));
            }

        }

        registerOperationContext(msgContext, operationContext);

        return operationContext;

    }
,
>
, <(startLine=27 endLine=45 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00675/modules/integration/src/test/interop/whitemesa/round3/util/GDRpcVoidUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/WSDLInteropTestRpcEnc", "tns");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");

        OMElement operation = omfactory.createOMElement("echoVoid", "http://soapinterop.org/WSDLInteropTestRpcEnc", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        return reqEnv;

    }
,
(startLine=28 endLine=43 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00675/modules/integration/src/test/interop/whitemesa/round3/util/GFHeaderTestUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");

        OMElement operation = omfactory.createOMElement("echoStringParam", "http://soapinterop.org/xsd", null);
        reqEnv.getBody().addChild(operation);
        operation.addChild(omfactory.createOMText("apache axis2"));
        return reqEnv;
    }
,
(startLine=27 endLine=45 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00675/modules/integration/src/test/interop/whitemesa/round1/util/Round1VoidUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();

        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        OMNamespace envNs = reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");

        OMElement operation = omfactory.createOMElement("echoVoid", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.declareNamespace(envNs);
        operation.addAttribute("encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", envNs);

        return reqEnv;

    }
,
(startLine=28 endLine=48 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00675/modules/integration/src/test/interop/whitemesa/round2/util/Round2EchoVoidClientUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();

        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        OMNamespace envNs = reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");

        OMElement operation = omfactory.createOMElement("echoVoid", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.declareNamespace(envNs);
        operation.addAttribute("encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", envNs);

        return reqEnv;


    }
,
(startLine=27 endLine=43 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00675/modules/integration/src/test/interop/whitemesa/round2/util/soap12/Round2Soap12EchoVoidClientUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");

        OMElement operation = omfactory.createOMElement("echoVoid", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        return reqEnv;

    }
,
(startLine=27 endLine=44 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00675/modules/integration/src/test/interop/whitemesa/round2/util/GroupcVoidUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();

        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");


        OMElement operation = omfactory.createOMElement("echoVoid", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        return reqEnv;
    }
,
>
, <(startLine=40 endLine=53 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00892/modules/samples/rmi/src/sample/rmi/client/TestService3.java)
    public void testMethod1() {

        try {
            RMIClient rmiClient = new RMIClient(Service3.class, configurator, "http://localhost:8080/axis2/services/Service3");
            List inputObjects = new ArrayList();
            rmiClient.invokeMethod("method1", inputObjects);
        } catch (Exception e) {
            if (e instanceof Exception1) {
                System.out.println("Got the exception 1");
            } else {
                e.printStackTrace();
            }
        }
    }
,
(startLine=55 endLine=69 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00892/modules/samples/rmi/src/sample/rmi/client/TestService3.java)
    public void testMethod2() {

        try {
            RMIClient rmiClient = new RMIClient(Service3.class, configurator, "http://localhost:8080/axis2/services/Service3");
            List inputObjects = new ArrayList();
            inputObjects.add("test string");
            rmiClient.invokeMethod("method2", inputObjects);
        } catch (Exception e) {
            if (e instanceof Exception2) {
                System.out.println("Got the exception 2");
            } else {
                e.printStackTrace();
            }
        }
    }
,
(startLine=71 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00892/modules/samples/rmi/src/sample/rmi/client/TestService3.java)
    public void testMethod3() {

        try {
            RMIClient rmiClient = new RMIClient(Service3.class, configurator, "http://localhost:8080/axis2/services/Service3");
            List inputObjects = new ArrayList();
            inputObjects.add(new Integer(5));
            rmiClient.invokeMethod("method3", inputObjects);
        } catch (Exception e) {
            if (e instanceof Exception3) {
                System.out.println("Got the exception 3");
            } else {
                e.printStackTrace();
            }
        }
    }
,
>
, <(startLine=77 endLine=133 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01152/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/AsyncExecutorTests.java)
        for (int i = 0; i < 10; i++) {
            
            request1 = req1base + "_" + i;
            request2 = req2base + "_" + i;

            TestLogger.logger.debug(title + "iteration [" + i + "] using request1 [" + request1 +
                    "]  request2 [" + request2 + "]");

            // submit request #1 to the server-side web service that 
            // the web service will keep until we ask for it
            Response<SleepResponse> resp1 = port.sleepAsync(request1);

            // submit request #2 to the server that essentially processes
            // without delay
            Response<CustomAsyncResponse> resp2 = port.remappedAsync(request2);

            // wait until the response for request #2 is done 
            waitBlocking(resp2);

            // check the waiting request #1
            String asleep = port.isAsleep(request1);
            //System.out.println(title+"iteration ["+i+"]   port.isAsleep(request1 ["+request1+"]) = ["+asleep+"]");

            // wakeup the waiting request #1
            String wake = port.wakeUp(request1);
            //System.out.println(title+"iteration ["+i+"]   port.wakeUp(request1 ["+request1+"]) = ["+wake+"]");

            // wait until the response for request #1 is done
            waitBlocking(resp1);
        
            // get the responses
            String req1_result = null;
            String req2_result = null;

            try {
                req1_result = resp1.get().getMessage();
                req2_result = resp2.get().getResponse();
            } catch (Exception e) {
                TestLogger.logger.debug(
                        title + "iteration [" + i + "] using request1 [" + request1 +
                                "]  request2 [" + request2 + "] :  got exception [" +
                                e.getClass().getName() + "]  [" + e.getMessage() + "] ");
                e.printStackTrace();
                fail(e.toString());
            }

            // check status on request #1
            assertEquals("sleepAsync did not sleep as expected", request1, asleep);
            assertEquals("sleepAsync did not return expected response ", request1, req1_result);

            // check status on request #2
            assertEquals("remappedAsync did not return expected response", request2, req2_result);

            // Calling get() again should return the same object as the first call to get()
            assertEquals("sleepAsync did not return expected response ", request1, resp1.get().getMessage());
            assertEquals("remappedAsync did not return expected response", request2, resp2.get().getResponse());
        }
,
(startLine=78 endLine=136 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01152/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/ParallelAsyncTests.java)
        for (int i = 0; i < 10; i++) {
            
            request1 = req1base + "_" + i;
            request2 = req2base + "_" + i;

            TestLogger.logger.debug(title + "iteration [" + i + "] using request1 [" + request1 +
                    "]  request2 [" + request2 + "]");

            // submit request #1 to the server-side web service that 
            // the web service will keep until we ask for it
            Response<SleepResponse> resp1 = port.sleepAsync(request1);

            // submit request #2 to the server that essentially processes
            // without delay
            Response<CustomAsyncResponse> resp2 = port.remappedAsync(request2);

            // wait until the response for request #2 is done 
            waitBlocking(resp2);

            // check the waiting request #1
            String asleep = port.isAsleep(request1);
            //System.out.println(title+"iteration ["+i+"]   port.isAsleep(request1 ["+request1+"]) = ["+asleep+"]");

            // wakeup the waiting request #1
            String wake = port.wakeUp(request1);
            //System.out.println(title+"iteration ["+i+"]   port.wakeUp(request1 ["+request1+"]) = ["+wake+"]");

            // wait until the response for request #1 is done
            waitBlocking(resp1);
        
            // get the responses
            String req1_result = null;
            String req2_result = null;

            try {
                req1_result = resp1.get().getMessage();
                req2_result = resp2.get().getResponse();
            } catch (Exception e) {
                TestLogger.logger.debug(
                        title + "iteration [" + i + "] using request1 [" + request1 +
                                "]  request2 [" + request2 + "] :  got exception [" +
                                e.getClass().getName() + "]  [" + e.getMessage() + "] ");
                e.printStackTrace();
                fail(e.toString());
            }

            // check status on request #1
            assertEquals("sleepAsync did not sleep as expected", request1, asleep);
            assertEquals("sleepAsync did not return expected response ", request1, req1_result);

            // check status on request #2
            assertEquals("remappedAsync did not return expected response", request2, req2_result);
            

            // Calling get() again should return the same object as the first call to get()
            assertEquals("sleepAsync did not return expected response ", request1, resp1.get().getMessage());
            assertEquals("remappedAsync did not return expected response", request2, resp2.get().getResponse());
            
        }
,
>
, <(startLine=169 endLine=193 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00492/modules/core/src/org/apache/axis2/transport/http/HTTPWorker.java)
    private void setResponseHeaders(final SimpleHttpServerConnection conn, SimpleRequest request, SimpleResponse response) {
        if (!response.containsHeader("Connection")) {
            // See if the the client explicitly handles connection persistence
            Header connheader = request.getFirstHeader("Connection");
            if (connheader != null) {
                if (connheader.getValue().equalsIgnoreCase("keep-alive")) {
                    Header header = new Header("Connection", "keep-alive");
                    response.addHeader(header);
                    conn.setKeepAlive(true);
                }
                if (connheader.getValue().equalsIgnoreCase("close")) {
                    Header header = new Header("Connection", "close");
                    response.addHeader(header);
                    conn.setKeepAlive(false);
                }
            } else {
                // Use protocol default connection policy
                if (response.getHttpVersion().greaterEquals(HttpVersion.HTTP_1_1)) {
                    conn.setKeepAlive(true);
                } else {
                    conn.setKeepAlive(false);
                }
            }
        }
    }
,
(startLine=98 endLine=120 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00492/modules/core/src/org/apache/axis2/transport/http/server/HttpServiceHandler.java)
        if (!response.containsHeader("Connection")) {
            // See if the the client explicitly handles connection persistence
            Header connheader = request.getFirstHeader("Connection");
            if (connheader != null) {
                if (connheader.getValue().equalsIgnoreCase("keep-alive")) {
                    Header header = new Header("Connection", "keep-alive"); 
                    response.addHeader(header);
                    conn.setKeepAlive(true);
                }
                if (connheader.getValue().equalsIgnoreCase("close")) {
                    Header header = new Header("Connection", "close"); 
                    response.addHeader(header);
                    conn.setKeepAlive(false);
                }
            } else {
                // Use protocol default connection policy
                if (response.getHttpVersion().greaterEquals(HttpVersion.HTTP_1_1)) {
                    conn.setKeepAlive(true);
                } else {
                    conn.setKeepAlive(false);
                }
            }
        }
,
>
, <(startLine=115 endLine=209 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00187/modules/core/src/java/org/apache/axis/transport/http/HTTPTransportReceiver.java)
            throws AxisFault {
        HashMap map = new HashMap();
        try {

            StringBuffer str = new StringBuffer();

            int state = BEFORE_SEPERATOR;

            String key = null;
            String value = null;

            int start = 0;

            length = readLine(reader, buf);
            if (serverSide) {
                if (buf[0] == 'P'
                        && buf[1] == 'O'
                        && buf[2] == 'S'
                        && buf[3] == 'T') {
                    index = 5;
                    value = readFirstLineArg(' ');
                    map.put(HTTPConstants.REQUEST_URI, value);
                    value = readFirstLineArg('\n');
                    map.put(HTTPConstants.PROTOCOL_VERSION, value);
                } else {
                    throw new AxisFault("Only the POST requests are supported");
                }
            } else {
                index = 0;
                value = readFirstLineArg(' ');
                map.put(HTTPConstants.PROTOCOL_VERSION, value);
                value = readFirstLineArg(' ');
                map.put(HTTPConstants.RESPONSE_CODE, value);
                value = readFirstLineArg('\n');
                map.put(HTTPConstants.RESPONSE_WORD, value);
            }

            state = BEFORE_SEPERATOR;


            while (!done) {
                length = readLine(reader, buf);
                if (length <= 0) {
                    throw new AxisFault("Premature end of steam");
                }
                for (int i = 0; i < length; i++) {
                    switch (state) {
                        case BEFORE_SEPERATOR:
                            if (buf[i] == ':') {
                                key = str.toString();
                                str = new StringBuffer();
                                state = AFTER_SEPERATOR;

                                if (buf[i + 1] == ' ') {
                                    i++; //ignore next space
                                }
                            } else {
                                str.append(buf[i]);
                            }
                            break;
                        case AFTER_SEPERATOR:
                            if (buf[i] == '\n') {
                                value = str.toString();
                                map.put(key, value);
                                str = new StringBuffer();
                                i = length;
                            } else {
                                str.append(buf[i]);
                            }
                            break;
                            //                            case END_OF_LINE :
                            //                                if (buf[i] == '\n') {
                            //                                    state = END;
                            //                                    break;
                            //                                } else {
                            //                                    state = BEFORE_SEPERATOR;
                            //                                    str.append(buf[i]);
                            //                                }
                            //                                break;
                            //                            case END:
                            //                            break;    
                        default :
                            throw new AxisFault("Error Occured Unknown state " + state);

                    }
                }

                state = BEFORE_SEPERATOR;

            }
        } catch (IOException e) {
            throw new AxisFault(e.getMessage(), e);
        }
        return map;
    }
,
(startLine=115 endLine=209 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00187/modules/core/src/java/org/apache/axis/transport/http/HTTPTransportReciver.java)
            throws AxisFault {
        HashMap map = new HashMap();
        try {

            StringBuffer str = new StringBuffer();

            int state = BEFORE_SEPERATOR;

            String key = null;
            String value = null;

            int start = 0;

            length = readLine(reader, buf);
            if (serverSide) {
                if (buf[0] == 'P'
                        && buf[1] == 'O'
                        && buf[2] == 'S'
                        && buf[3] == 'T') {
                    index = 5;
                    value = readFirstLineArg(' ');
                    map.put(HTTPConstants.REQUEST_URI, value);
                    value = readFirstLineArg('\n');
                    map.put(HTTPConstants.PROTOCOL_VERSION, value);
                } else {
                    throw new AxisFault("Only the POST requests are supported");
                }
            } else {
                index = 0;
                value = readFirstLineArg(' ');
                map.put(HTTPConstants.PROTOCOL_VERSION, value);
                value = readFirstLineArg(' ');
                map.put(HTTPConstants.RESPONSE_CODE, value);
                value = readFirstLineArg('\n');
                map.put(HTTPConstants.RESPONSE_WORD, value);
            }

            state = BEFORE_SEPERATOR;


            while (!done) {
                length = readLine(reader, buf);
                if (length <= 0) {
                    throw new AxisFault("Premature end of steam");
                }
                for (int i = 0; i < length; i++) {
                    switch (state) {
                        case BEFORE_SEPERATOR:
                            if (buf[i] == ':') {
                                key = str.toString();
                                str = new StringBuffer();
                                state = AFTER_SEPERATOR;

                                if (buf[i + 1] == ' ') {
                                    i++; //ignore next space
                                }
                            } else {
                                str.append(buf[i]);
                            }
                            break;
                        case AFTER_SEPERATOR:
                            if (buf[i] == '\n') {
                                value = str.toString();
                                map.put(key, value);
                                str = new StringBuffer();
                                i = length;
                            } else {
                                str.append(buf[i]);
                            }
                            break;
                            //                            case END_OF_LINE :
                            //                                if (buf[i] == '\n') {
                            //                                    state = END;
                            //                                    break;
                            //                                } else {
                            //                                    state = BEFORE_SEPERATOR;
                            //                                    str.append(buf[i]);
                            //                                }
                            //                                break;
                            //                            case END:
                            //                            break;    
                        default :
                            throw new AxisFault("Error Occured Unknown state " + state);

                    }
                }

                state = BEFORE_SEPERATOR;

            }
        } catch (IOException e) {
            throw new AxisFault(e.getMessage(), e);
        }
        return map;
    }
,
>
, <(startLine=113 endLine=137 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01358/modules/json/src/org/apache/axis2/json/gson/GsonXMLStreamReader.java)
    private void process() throws AxisFault {
        Object ob = configContext.getProperty(JsonConstant.XMLNODES);
        if (ob != null) {
            Map<QName, XmlNode> nodeMap = (Map<QName, XmlNode>) ob;
            XmlNode requesNode = nodeMap.get(elementQname);
            if (requesNode != null) {
                xmlNodeGenerator = new XmlNodeGenerator();
                queue = xmlNodeGenerator.getQueue(requesNode);
            } else {
                xmlNodeGenerator = new XmlNodeGenerator(xmlSchemaList, elementQname);
                mainXmlNode = xmlNodeGenerator.getMainXmlNode();
                queue = xmlNodeGenerator.getQueue(mainXmlNode);
                nodeMap.put(elementQname, mainXmlNode);
                configContext.setProperty(JsonConstant.XMLNODES, nodeMap);
            }
        } else {
            Map<QName, XmlNode> newNodeMap = new HashMap<QName, XmlNode>();
            xmlNodeGenerator = new XmlNodeGenerator(xmlSchemaList, elementQname);
            mainXmlNode = xmlNodeGenerator.getMainXmlNode();
            queue = xmlNodeGenerator.getQueue(mainXmlNode);
            newNodeMap.put(elementQname, mainXmlNode);
            configContext.setProperty(JsonConstant.XMLNODES, newNodeMap);
        }
        isProcessed = true;
    }
,
(startLine=103 endLine=128 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01358/modules/json/src/org/apache/axis2/json/gson/GsonXMLStreamWriter.java)
    private void process() throws IOException {
        Object ob = configContext.getProperty(JsonConstant.XMLNODES);
        if (ob != null) {
            Map<QName, XmlNode> nodeMap = (Map<QName, XmlNode>) ob;
            XmlNode resNode = nodeMap.get(elementQName);
            if (resNode != null) {
                xmlNodeGenerator = new XmlNodeGenerator();
                queue = xmlNodeGenerator.getQueue(resNode);
            } else {
                xmlNodeGenerator = new XmlNodeGenerator(xmlSchemaList, elementQName);
                mainXmlNode = xmlNodeGenerator.getMainXmlNode();
                queue = xmlNodeGenerator.getQueue(mainXmlNode);
                nodeMap.put(elementQName, mainXmlNode);
                configContext.setProperty(JsonConstant.XMLNODES, nodeMap);
            }
        } else {
            Map<QName, XmlNode> newNodeMap = new HashMap<QName, XmlNode>();
            xmlNodeGenerator = new XmlNodeGenerator(xmlSchemaList, elementQName);
            mainXmlNode = xmlNodeGenerator.getMainXmlNode();
            queue = xmlNodeGenerator.getQueue(mainXmlNode);
            newNodeMap.put(elementQName, mainXmlNode);
            configContext.setProperty(JsonConstant.XMLNODES, newNodeMap);
        }
        isProcessed = true;
        this.jsonWriter.beginObject();
    }
,
>
, <(startLine=138 endLine=151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00817/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/java2wsdl/OutputPanel.java)
    public void mouseClicked(MouseEvent e) {
        Object obj = e.getSource();
        if(obj ==txtFileName ){
            if (txtFileName .getText() != null && !txtFileName.getText().trim().equals("")) {
                BottomPanel.setEnable(true,false, true, true);
                wsdlgenBean.setServiceName(txtFileName.getText().trim());
            }
        }  else if(obj ==txtLocation ){
            if (txtLocation .getText() != null && !txtLocation.getText().trim().equals("")) {
                BottomPanel.setEnable(true,false, true, true);
                wsdlgenBean.setServiceName(txtLocation.getText().trim());
            }
        }
    }
,
(startLine=156 endLine=169 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00817/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/java2wsdl/OutputPanel.java)
    public void mouseExited(MouseEvent e) {
        Object obj = e.getSource();
         if(obj ==txtFileName ){
            if (txtFileName .getText() != null && !txtFileName.getText().trim().equals("")) {
                BottomPanel.setEnable(true,false, true, true);
                wsdlgenBean.setServiceName(txtFileName.getText().trim());
            }
        }  else if(obj ==txtLocation ){
            if (txtLocation .getText() != null && !txtLocation.getText().trim().equals("")) {
                BottomPanel.setEnable(true,false, true, true);
                wsdlgenBean.setServiceName(txtLocation.getText().trim());
            }
        }
    }
,
(startLine=171 endLine=184 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00817/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/java2wsdl/OutputPanel.java)
    public void mousePressed(MouseEvent e) {
        Object obj = e.getSource();
        if(obj ==txtFileName ){
            if (txtFileName .getText() != null && !txtFileName.getText().trim().equals("")) {
                BottomPanel.setEnable(true,false, true, true);
                wsdlgenBean.setServiceName(txtFileName.getText().trim());
            }
        }  else if(obj ==txtLocation ){
            if (txtLocation .getText() != null && !txtLocation.getText().trim().equals("")) {
                BottomPanel.setEnable(true,false, true, true);
                wsdlgenBean.setServiceName(txtLocation.getText().trim());
            }
        }
    }
,
(startLine=186 endLine=199 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00817/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/java2wsdl/OutputPanel.java)
    public void mouseReleased(MouseEvent e) {
        Object obj = e.getSource();
        if(obj ==txtFileName ){
            if (txtFileName .getText() != null && !txtFileName.getText().trim().equals("")) {
                BottomPanel.setEnable(true,false, true, true);
                wsdlgenBean.setServiceName(txtFileName.getText().trim());
            }
        } else if(obj ==txtLocation ){
            if (txtLocation .getText() != null && !txtLocation.getText().trim().equals("")) {
                BottomPanel.setEnable(true,false, true, true);
                wsdlgenBean.setServiceName(txtLocation.getText().trim());
            }
        }
    }
,
>
, <(startLine=79 endLine=89 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00406/modules/core/src/org/apache/axis2/transport/http/HTTPTransportUtils.java)
						&& Constants.VALUE_TRUE.equals(enable)) {
					msgContext.setDoingREST(true);
					SOAPFactory soapFactory = new SOAP11Factory();
                    Reader reader = new InputStreamReader(in);
                    XMLStreamReader xmlreader = XMLInputFactory.newInstance()
                            .createXMLStreamReader(reader);
					builder = new StAXOMBuilder(xmlreader);
					builder.setOmbuilderFactory(soapFactory);
					envelope = soapFactory.getDefaultEnvelope();
					envelope.getBody().addChild(builder.getDocumentElement());
				}
,
(startLine=65 endLine=74 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00406/modules/core/src/org/apache/axis2/transport/TransportUtils.java)
            }else if (msgContext.isDoingREST()) {
                Reader reader = new InputStreamReader(inStream);
                XMLStreamReader xmlreader =
                    XMLInputFactory.newInstance().createXMLStreamReader(reader);
                SOAPFactory soapFactory = new SOAP11Factory();
                builder = new StAXOMBuilder(xmlreader);
                builder.setOmbuilderFactory(soapFactory);
                envelope = soapFactory.getDefaultEnvelope();
                envelope.getBody().addChild(builder.getDocumentElement());
            } else {
,
>
, <(startLine=76 endLine=100 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00720/modules/jaxws/test/server/EchoStringResponse.java)
            try {
                int event = reader.getEventType();

                //event better be a START_ELEMENT. if not we should go up to the start element here
                while (event != javax.xml.stream.XMLStreamReader.START_ELEMENT) {
                    event = reader.next();
                }

                if (!MY_QNAME.equals(reader.getName())) {
                    throw new Exception("Wrong QName");
                }

                org.apache.axis2.databinding.utils.SimpleElementReaderStateMachine stateMachine1 = new org.apache.axis2.databinding.utils.SimpleElementReaderStateMachine();
                javax.xml.namespace.QName startQname1 = new javax.xml.namespace.QName(
                        "http://test", "echoStringReturn");
                stateMachine1.setElementNameToTest(startQname1);
                stateMachine1.setNillable();
                stateMachine1.read(reader);
                object
                        .setEchoStringReturn(stateMachine1.getText() == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil
                                        .convertToString(stateMachine1
                                                .getText().getBytes()));

            } catch (javax.xml.stream.XMLStreamException e) {
,
(startLine=95 endLine=121 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00720/modules/jaxws/test/server/EchoString.java)
               try {
               int event = reader.getEventType();

              //event better be a START_ELEMENT. if not we should go up to the start element here
               while (event!= javax.xml.stream.XMLStreamReader.START_ELEMENT) {
                   event = reader.next();
               }

               
               if (!MY_QNAME.equals(reader.getName())){
                           throw new Exception("Wrong QName");
               }
               
                       org.apache.axis2.databinding.utils.SimpleElementReaderStateMachine stateMachine1
                         = new org.apache.axis2.databinding.utils.SimpleElementReaderStateMachine();
                       javax.xml.namespace.QName startQname1 = new javax.xml.namespace.QName(
                                            "http://test",
                                           "input");
                       stateMachine1.setElementNameToTest(startQname1);
                       stateMachine1.setNillable();
                       stateMachine1.read(reader);
                       object.setInput(
                         stateMachine1.getText()==null?null:
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                  stateMachine1.getText()));
                             
               } catch (javax.xml.stream.XMLStreamException e) {
,
>
, <(startLine=913 endLine=923 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00849/modules/adb-codegen/src/org/apache/axis2/schema/writer/JavaBeanWriter.java)
            while (iterator.hasNext()) {
                Element enumFacet = XSLTUtils.addChildElement(model, "enumFacet", property);
                String attribValue = (String) iterator.next();
                XSLTUtils.addAttribute(model, "value", attribValue, enumFacet);
                if (validJava) {
                    XSLTUtils.addAttribute(model, "id", attribValue, enumFacet);
                } else {
                    id++;
                    XSLTUtils.addAttribute(model, "id", "value" + id, enumFacet);
                }
            }
,
(startLine=814 endLine=824 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00849/modules/adb-codegen/src/org/apache/axis2/schema/writer/CStructWriter.java)
                while (iterator.hasNext()) {
                    Element enumFacet = XSLTUtils.addChildElement(model, "enumFacet", property);
                    String attribValue = (String) iterator.next();
                    XSLTUtils.addAttribute(model, "value", attribValue, enumFacet);
                    if (validJava) {
                        XSLTUtils.addAttribute(model, "id", attribValue, enumFacet);
                    } else {
                        id++;
                        XSLTUtils.addAttribute(model, "id", "value" + id, enumFacet);
                    }
                }
,
>
, <(startLine=383 endLine=408 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00984/modules/jaxws/test/org/apache/axis2/jaxws/spi/ClientMetadataHandlerChainTest.java)
    public void testCompositeOnServiceAndPort() {
        QName serviceQN = new QName(namespaceURI, svcLocalPart + uniqueService++);
        
        // Create a service with a composite specifying handlers
        DescriptionBuilderComposite sparseComposite = new DescriptionBuilderComposite();
        HandlerChainsType handlerChainsType = getHandlerChainsType();
        sparseComposite.setHandlerChainsType(handlerChainsType);
        ServiceDelegate.setServiceMetadata(sparseComposite);
        Service service = Service.create(serviceQN);

        // Create a port with a composite specifying different handlers
        DescriptionBuilderComposite portComposite = new DescriptionBuilderComposite();
        HandlerChainsType portHandlerChainsType = getHandlerChainsType("ClientMetadataHandlerChainTest.xml");
        portComposite.setHandlerChainsType(portHandlerChainsType);
        ServiceDelegate.setPortMetadata(portComposite);
        ClientMetadataHandlerChainTestSEI port = service.getPort(ClientMetadataHandlerChainTestSEI.class);
        BindingProvider bindingProvider = (BindingProvider) port;
        Binding binding = (Binding) bindingProvider.getBinding();
        List<Handler> portHandlers = binding.getHandlerChain();

        // If there is a HandlerChainsType composite specified on both the Service and the Port,
        // then the composite specified on the Port should be the one used to associate the 
        // handlers for that Port.
        assertEquals(1, portHandlers.size());
        assertTrue(containsHandlerChainAnnotationHandlers(portHandlers));
    }
,
(startLine=383 endLine=408 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00984/modules/jaxws-integration/test/org/apache/axis2/jaxws/spi/ClientMetadataHandlerChainTest.java)
    public void testCompositeOnServiceAndPort() {
        QName serviceQN = new QName(namespaceURI, svcLocalPart + uniqueService++);
        
        // Create a service with a composite specifying handlers
        DescriptionBuilderComposite sparseComposite = new DescriptionBuilderComposite();
        HandlerChainsType handlerChainsType = getHandlerChainsType();
        sparseComposite.setHandlerChainsType(handlerChainsType);
        ServiceDelegate.setServiceMetadata(sparseComposite);
        Service service = Service.create(serviceQN);

        // Create a port with a composite specifying different handlers
        DescriptionBuilderComposite portComposite = new DescriptionBuilderComposite();
        HandlerChainsType portHandlerChainsType = getHandlerChainsType("ClientMetadataHandlerChainTest.xml");
        portComposite.setHandlerChainsType(portHandlerChainsType);
        ServiceDelegate.setPortMetadata(portComposite);
        ClientMetadataHandlerChainTestSEI port = service.getPort(ClientMetadataHandlerChainTestSEI.class);
        BindingProvider bindingProvider = (BindingProvider) port;
        Binding binding = (Binding) bindingProvider.getBinding();
        List<Handler> portHandlers = binding.getHandlerChain();

        // If there is a HandlerChainsType composite specified on both the Service and the Port,
        // then the composite specified on the Port should be the one used to associate the 
        // handlers for that Port.
        assertEquals(1, portHandlers.size());
        assertTrue(containsHandlerChainAnnotationHandlers(portHandlers));
    }
,
>
, <(startLine=141 endLine=150 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00983/modules/jaxws/test/org/apache/axis2/jaxws/handler/context/LogicalMessageContextTests.java)
        for (int i = 0; i < loopCount; ++i) {
            Source payload = msg.getPayload();
            assertTrue("Attempt number "  + i + " to get the payload (Source) was null", payload != null);


            String resultContent = _getStringFromSource(payload);
            assertTrue("The content returned in loop " + i + " was null", resultContent != null);
            assertTrue("The content returned in loop " + i + " was incomplete, unexpected element", resultContent.indexOf("echoString") > -1);
            assertTrue("The content returned in loop " + i + " was incomplete, unexpected content", resultContent.indexOf(INPUT) > -1);            
        }
,
(startLine=141 endLine=150 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00983/modules/jaxws-integration/test/org/apache/axis2/jaxws/handler/context/LogicalMessageContextTests.java)
        for (int i = 0; i < loopCount; ++i) {
            Source payload = msg.getPayload();
            assertTrue("Attempt number "  + i + " to get the payload (Source) was null", payload != null);


            String resultContent = _getStringFromSource(payload);
            assertTrue("The content returned in loop " + i + " was null", resultContent != null);
            assertTrue("The content returned in loop " + i + " was incomplete, unexpected element", resultContent.indexOf("echoString") > -1);
            assertTrue("The content returned in loop " + i + " was incomplete, unexpected content", resultContent.indexOf(INPUT) > -1);            
        }
,
>
, <(startLine=874 endLine=916 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01206/modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointInterfaceDescriptionImpl.java)
    private boolean isNewSunBehavior(String propertyToSet) {

        if (log.isDebugEnabled()) {
            log.debug("isNewSunBehavior: Validating that JDK version can be used with property: " +propertyToSet);

        }
        
        boolean versionValid = false;

        try {
            
            String wsGenVersion = WSToolingUtils.getWsGenVersion();
            
            versionValid = WSToolingUtils.isValidVersion(wsGenVersion);
            
            if (log.isDebugEnabled()) {
                log.debug("isNewSunBehavior: versionValid is: " +versionValid);
            }
            
            if (!versionValid) {

                if (log.isWarnEnabled()) {
                    log.warn("You are attempting set a property: "
                        + propertyToSet
                        + " This property is not supported with this version of the JDK");
                }
            }

            // We don't want to affect existing systems, if anything goes
            // wrong just display
            // a warning and default to old behavior
        } catch (ClassNotFoundException e) {
            if (log.isWarnEnabled()) {
                log.warn(" Unable to determine WsGen version being used");
            }
        } catch (IOException ioex) {
            if (log.isWarnEnabled()) {
                log.warn(" Unable to determine WsGen version being used");
            }
        }
        
        return versionValid;
    }
,
(startLine=925 endLine=965 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01206/modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointInterfaceDescriptionImpl.java)
    private boolean isNewSunBehaviorSupported() {

        if (log.isDebugEnabled()) {
            log.debug("isNewSunBehavior: Validating that JDK version can be used");

        }
        
        boolean versionValid = false;

        try {
            
            String wsGenVersion = WSToolingUtils.getWsGenVersion();
            
            versionValid = WSToolingUtils.isValidVersion(wsGenVersion);
            
            if (log.isDebugEnabled()) {
                log.debug("isNewSunBehavior: versionValid is: " +versionValid);
            }
            
            if (!versionValid) {

                if (log.isDebugEnabled()) {
                    log.debug("New Sun tooling behavior is not supported with this version of the JDK");
                }
            }

            // We don't want to affect existing systems, if anything goes
            // wrong just display
            // a warning and default to old behavior
        } catch (ClassNotFoundException e) {
            if (log.isDebugEnabled()) {
                log.debug(" Unable to determine WsGen version being used");
            }
        } catch (IOException ioex) {
            if (log.isDebugEnabled()) {
                log.debug(" Unable to determine WsGen version being used");
            }
        }
        
        return versionValid;
    }
,
>
, <(startLine=64 endLine=70 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00283/modules/addressing/src/org/apache/axis/handlers/AddressingInHandler.java)
        } else {
            // no addressing headers present
            if(!isAddressingOptional){
                throw new AxisFault("Addressing Handlers should present, but doesn't present in the incoming message !!");
            }
            logger.debug("No Addressing Headers present in the IN message. Addressing In Handler does nothing.");
        }
,
(startLine=64 endLine=70 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00283/modules/core/samples/deployment/module2/org/apache/axis/handlers/AddressingInHandler.java)
        } else {
            // no addressing headers present
            if(!isAddressingOptional){
                throw new AxisFault("Addressing Handlers should present, but doesn't present in the incoming message !!");
            }
            logger.debug("No Addressing Headers present in the IN message. Addressing In Handler does nothing.");
        }
,
(startLine=59 endLine=65 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00283/modules/core/src/org/apache/axis/handlers/addressing/AddressingInHandler.java)
        } else {
            // no addressing headers present
            if(!isAddressingOptional){
                throw new AxisFault("Addressing Handlers should present, but doesn't present in the incoming message !!");
            }
            logger.debug("No Addressing Headers present in the IN message. Addressing In Handler does nothing.");
        }
,
>
, <(startLine=185 endLine=194 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00108/dev/scratch/chinthaka/OMAPI_with_Impl/src/test/org/apache/axis/om/Tester.java)
		do {
			if (node instanceof OMElement) {
				OMElement el= (OMElement)node;
				System.out.print("OMElement= " + el.getLocalName());
			}
			else
				System.out.print("OMText= " + node.getValue());
			System.out.println(" isComplete= " + node.isComplete());
			node= navigator.next();
		}
,
(startLine=169 endLine=178 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00108/dev/scratch/dasarath/om/src/test/org/apache/axis/om/Tester.java)
		do {
			if (node instanceof OMElement) {
				OMElement el= (OMElement)node;
				System.out.print("OMElement= " + el.getLocalName());
			}
			else
				System.out.print("OMText= " + node.getValue());
			System.out.println(" isComplete= " + node.isComplete());
			node= navigator.next();
		}
,
(startLine=185 endLine=194 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00108/dev/scratch/chinthaka/OM/src/test/org/apache/axis/om/Tester.java)
		do {
			if (tempNode instanceof OMElement) {
				OMElement el= (OMElement)tempNode;
				System.out.print("OMElement= " + el.getLocalName());
			}
			else
				System.out.print("OMText= " + tempNode.getValue());
			System.out.println(" isComplete= " + tempNode.isComplete());
			tempNode= navigator.next();
		}
,
>
, <(startLine=668 endLine=686 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01072/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/MtomSampleTests.java)
        } catch (Exception e) {
            assertNotNull(e);
            if (CHECK_VERSIONMISMATCH) {
                assertTrue("Expected SOAPFaultException, but received: "+ e.getClass(),
                           e instanceof SOAPFaultException);
                SOAPFaultException sfe = (SOAPFaultException) e;

                SOAPFault fault = sfe.getFault();

                assertTrue("SOAPFault is null ",
                           fault != null);
                QName faultCode = sfe.getFault().getFaultCodeAsQName();


                assertTrue("Expected VERSION MISMATCH but received: "+ faultCode,
                           new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "VersionMismatch", SOAPConstants.SOAP_ENV_PREFIX).equals(faultCode));

            }
        }
,
(startLine=692 endLine=710 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01072/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/MtomSampleTests.java)
        } catch (Exception e) {
            assertNotNull(e);
            if (CHECK_VERSIONMISMATCH) {
                assertTrue("Expected SOAPFaultException, but received: "+ e.getClass(),
                           e instanceof SOAPFaultException);
                SOAPFaultException sfe = (SOAPFaultException) e;

                SOAPFault fault = sfe.getFault();

                assertTrue("SOAPFault is null ",
                           fault != null);
                QName faultCode = sfe.getFault().getFaultCodeAsQName();


                assertTrue("Expected VERSION MISMATCH but received: "+ faultCode,
                           new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "VersionMismatch", SOAPConstants.SOAP_ENV_PREFIX).equals(faultCode));

            }
        }
,
(startLine=762 endLine=780 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01072/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/MtomSampleTests.java)
        } catch (Exception e) {
            assertNotNull(e);
            if (CHECK_VERSIONMISMATCH) {
                assertTrue("Expected SOAPFaultException, but received: "+ e.getClass(),
                           e instanceof SOAPFaultException);
                SOAPFaultException sfe = (SOAPFaultException) e;

                SOAPFault fault = sfe.getFault();

                assertTrue("SOAPFault is null ",
                           fault != null);
                QName faultCode = sfe.getFault().getFaultCodeAsQName();


                assertTrue("Expected VERSION MISMATCH but received: "+ faultCode,
              		  new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "VersionMismatch", SOAPConstants.SOAP_ENV_PREFIX).equals(faultCode));

            }
        }
,
(startLine=786 endLine=804 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01072/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/MtomSampleTests.java)
        } catch (Exception e) {
            assertNotNull(e);
            if (CHECK_VERSIONMISMATCH) {
                assertTrue("Expected SOAPFaultException, but received: "+ e.getClass(),
                           e instanceof SOAPFaultException);
                SOAPFaultException sfe = (SOAPFaultException) e;

                SOAPFault fault = sfe.getFault();

                assertTrue("SOAPFault is null ",
                           fault != null);
                QName faultCode = sfe.getFault().getFaultCodeAsQName();


                assertTrue("Expected VERSION MISMATCH but received: "+ faultCode,
                          new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "VersionMismatch", SOAPConstants.SOAP_ENV_PREFIX).equals(faultCode));

            }
        }
,
>
, <(startLine=28 endLine=36 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01046/modules/rmi/test/org/apache/axis2/rmi/databind/ExtensionTest.java)
    public void testTestClass101() {

        Class testClass = TestClass10.class;
        Parameter parameter = new Parameter(testClass, "Param1");
        TestClass10 testObject = new TestClass10();
        testObject.setParam1("Test String");
        TestClass10 result = (TestClass10) getReturnObject(parameter, testObject);
        assertEquals(result.getParam1(), "Test String");
    }
,
(startLine=38 endLine=46 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01046/modules/rmi/test/org/apache/axis2/rmi/databind/ExtensionTest.java)
    public void testTestClass102() {

        Class testClass = TestClass10.class;
        Parameter parameter = new Parameter(testClass, "Param1");
        TestClass10 testObject = new TestClass10();
        testObject.setParam1(new Integer(5));
        TestClass10 result = (TestClass10) getReturnObject(parameter, testObject);
        assertEquals(result.getParam1(), new Integer(5));
    }
,
>
, <(startLine=145 endLine=292 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01052/modules/jaxws/src/org/apache/axis2/jaxws/spi/handler/BaseHandlerResolver.java)
                                   boolean isCaseSensitive) {

        char[] patArr = pattern.toCharArray();
        char[] strArr = str.toCharArray();
        int patIdxStart = 0;
        int patIdxEnd = patArr.length - 1;
        int strIdxStart = 0;
        int strIdxEnd = strArr.length - 1;
        char ch;
        boolean containsStar = false;

        for (int i = 0; i < patArr.length; i++) {
            if (patArr[i] == '*') {
                containsStar = true;
                break;
            }
        }
        if (!containsStar) {

            // No '*'s, so we make a shortcut
            if (patIdxEnd != strIdxEnd) {
                return false;        // Pattern and string do not have the same size
            }
            for (int i = 0; i <= patIdxEnd; i++) {
                ch = patArr[i];
                if (isCaseSensitive && (ch != strArr[i])) {
                    return false;    // Character mismatch
                }
                if (!isCaseSensitive
                        && (Character.toUpperCase(ch)
                        != Character.toUpperCase(strArr[i]))) {
                    return false;    // Character mismatch
                }
            }
            return true;             // String matches against pattern
        }
        if (patIdxEnd == 0) {
            return true;    // Pattern contains only '*', which matches anything
        }

        // Process characters before first star
        while ((ch = patArr[patIdxStart]) != '*'
                && (strIdxStart <= strIdxEnd)) {
            if (isCaseSensitive && (ch != strArr[strIdxStart])) {
                return false;    // Character mismatch
            }
            if (!isCaseSensitive
                    && (Character.toUpperCase(ch)
                    != Character.toUpperCase(strArr[strIdxStart]))) {
                return false;    // Character mismatch
            }
            patIdxStart++;
            strIdxStart++;
        }
        if (strIdxStart > strIdxEnd) {

            // All characters in the string are used. Check if only '*'s are
            // left in the pattern. If so, we succeeded. Otherwise failure.
            for (int i = patIdxStart; i <= patIdxEnd; i++) {
                if (patArr[i] != '*') {
                    return false;
                }
            }
            return true;
        }

        // Process characters after last star
        while ((ch = patArr[patIdxEnd]) != '*' && (strIdxStart <= strIdxEnd)) {
            if (isCaseSensitive && (ch != strArr[strIdxEnd])) {
                return false;    // Character mismatch
            }
            if (!isCaseSensitive
                    && (Character.toUpperCase(ch)
                    != Character.toUpperCase(strArr[strIdxEnd]))) {
                return false;    // Character mismatch
            }
            patIdxEnd--;
            strIdxEnd--;
        }
        if (strIdxStart > strIdxEnd) {

            // All characters in the string are used. Check if only '*'s are
            // left in the pattern. If so, we succeeded. Otherwise failure.
            for (int i = patIdxStart; i <= patIdxEnd; i++) {
                if (patArr[i] != '*') {
                    return false;
                }
            }
            return true;
        }

        // process pattern between stars. padIdxStart and patIdxEnd point
        // always to a '*'.
        while ((patIdxStart != patIdxEnd) && (strIdxStart <= strIdxEnd)) {
            int patIdxTmp = -1;

            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {
                if (patArr[i] == '*') {
                    patIdxTmp = i;
                    break;
                }
            }
            if (patIdxTmp == patIdxStart + 1) {

                // Two stars next to each other, skip the first one.
                patIdxStart++;
                continue;
            }

            // Find the pattern between padIdxStart & padIdxTmp in str between
            // strIdxStart & strIdxEnd
            int patLength = (patIdxTmp - patIdxStart - 1);
            int strLength = (strIdxEnd - strIdxStart + 1);
            int foundIdx = -1;

            strLoop:
            for (int i = 0; i <= strLength - patLength; i++) {
                for (int j = 0; j < patLength; j++) {
                    ch = patArr[patIdxStart + j + 1];
                    if (isCaseSensitive
                            && (ch != strArr[strIdxStart + i + j])) {
                        continue strLoop;
                    }
                    if (!isCaseSensitive && (Character
                            .toUpperCase(ch) != Character
                            .toUpperCase(strArr[strIdxStart + i + j]))) {
                        continue strLoop;
                    }
                }
                foundIdx = strIdxStart + i;
                break;
            }
            if (foundIdx == -1) {
                return false;
            }
            patIdxStart = patIdxTmp;
            strIdxStart = foundIdx + patLength;
        }

        // All characters in the string are used. Check if only '*'s are left
        // in the pattern. If so, we succeeded. Otherwise failure.
        for (int i = patIdxStart; i <= patIdxEnd; i++) {
            if (patArr[i] != '*') {
                return false;
            }
        }
        return true;
    }
,
(startLine=298 endLine=445 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01052/modules/kernel/src/org/apache/axis2/transport/http/ProxyConfiguration.java)
                                   boolean isCaseSensitive) {

        char[] patArr = pattern.toCharArray();
        char[] strArr = str.toCharArray();
        int patIdxStart = 0;
        int patIdxEnd = patArr.length - 1;
        int strIdxStart = 0;
        int strIdxEnd = strArr.length - 1;
        char ch;
        boolean containsStar = false;

        for (int i = 0; i < patArr.length; i++) {
            if (patArr[i] == '*') {
                containsStar = true;
                break;
            }
        }
        if (!containsStar) {

            // No '*'s, so we make a shortcut
            if (patIdxEnd != strIdxEnd) {
                return false;        // Pattern and string do not have the same size
            }
            for (int i = 0; i <= patIdxEnd; i++) {
                ch = patArr[i];
                if (isCaseSensitive && (ch != strArr[i])) {
                    return false;    // Character mismatch
                }
                if (!isCaseSensitive
                        && (Character.toUpperCase(ch)
                        != Character.toUpperCase(strArr[i]))) {
                    return false;    // Character mismatch
                }
            }
            return true;             // String matches against pattern
        }
        if (patIdxEnd == 0) {
            return true;    // Pattern contains only '*', which matches anything
        }

        // Process characters before first star
        while ((ch = patArr[patIdxStart]) != '*'
                && (strIdxStart <= strIdxEnd)) {
            if (isCaseSensitive && (ch != strArr[strIdxStart])) {
                return false;    // Character mismatch
            }
            if (!isCaseSensitive
                    && (Character.toUpperCase(ch)
                    != Character.toUpperCase(strArr[strIdxStart]))) {
                return false;    // Character mismatch
            }
            patIdxStart++;
            strIdxStart++;
        }
        if (strIdxStart > strIdxEnd) {

            // All characters in the string are used. Check if only '*'s are
            // left in the pattern. If so, we succeeded. Otherwise failure.
            for (int i = patIdxStart; i <= patIdxEnd; i++) {
                if (patArr[i] != '*') {
                    return false;
                }
            }
            return true;
        }

        // Process characters after last star
        while ((ch = patArr[patIdxEnd]) != '*' && (strIdxStart <= strIdxEnd)) {
            if (isCaseSensitive && (ch != strArr[strIdxEnd])) {
                return false;    // Character mismatch
            }
            if (!isCaseSensitive
                    && (Character.toUpperCase(ch)
                    != Character.toUpperCase(strArr[strIdxEnd]))) {
                return false;    // Character mismatch
            }
            patIdxEnd--;
            strIdxEnd--;
        }
        if (strIdxStart > strIdxEnd) {

            // All characters in the string are used. Check if only '*'s are
            // left in the pattern. If so, we succeeded. Otherwise failure.
            for (int i = patIdxStart; i <= patIdxEnd; i++) {
                if (patArr[i] != '*') {
                    return false;
                }
            }
            return true;
        }

        // process pattern between stars. padIdxStart and patIdxEnd point
        // always to a '*'.
        while ((patIdxStart != patIdxEnd) && (strIdxStart <= strIdxEnd)) {
            int patIdxTmp = -1;

            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {
                if (patArr[i] == '*') {
                    patIdxTmp = i;
                    break;
                }
            }
            if (patIdxTmp == patIdxStart + 1) {

                // Two stars next to each other, skip the first one.
                patIdxStart++;
                continue;
            }

            // Find the pattern between padIdxStart & padIdxTmp in str between
            // strIdxStart & strIdxEnd
            int patLength = (patIdxTmp - patIdxStart - 1);
            int strLength = (strIdxEnd - strIdxStart + 1);
            int foundIdx = -1;

            strLoop:
            for (int i = 0; i <= strLength - patLength; i++) {
                for (int j = 0; j < patLength; j++) {
                    ch = patArr[patIdxStart + j + 1];
                    if (isCaseSensitive
                            && (ch != strArr[strIdxStart + i + j])) {
                        continue strLoop;
                    }
                    if (!isCaseSensitive && (Character
                            .toUpperCase(ch) != Character
                            .toUpperCase(strArr[strIdxStart + i + j]))) {
                        continue strLoop;
                    }
                }
                foundIdx = strIdxStart + i;
                break;
            }
            if (foundIdx == -1) {
                return false;
            }
            patIdxStart = patIdxTmp;
            strIdxStart = foundIdx + patLength;
        }

        // All characters in the string are used. Check if only '*'s are left
        // in the pattern. If so, we succeeded. Otherwise failure.
        for (int i = patIdxStart; i <= patIdxEnd; i++) {
            if (patArr[i] != '*') {
                return false;
            }
        }
        return true;
    }
,
>
, <(startLine=78 endLine=97 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00142/dev/scratch/prototype2/src/samples/userguide/sample1/src/org/apache/axis/samples/userguide/example1/SampleEnvironmentCreator.java)
    protected void setUp() throws Exception {
        AxisGlobal global = new AxisGlobal();
        engineRegistry = new org.apache.axis.impl.engine.EngineRegistryImpl(global);
        
        AxisService service = new AxisService(serviceName);
        service.setClassLoader(Thread.currentThread().getContextClassLoader());
        service.setServiceClass(Echo.class);
        service.setProvider(new SimpleJavaProvider());

        AxisOperation operation1 = new SimpleAxisOperationImpl(operationName1);
        service.addOperation(operation1);
        
        AxisOperation operation2 = new SimpleAxisOperationImpl(operationName2);
        service.addOperation(operation2);

        EngineUtils.createExecutionChains(service);
        engineRegistry.addService(service);
        
        sas = EngineUtils.startServer(engineRegistry);        
    }
,
(startLine=52 endLine=71 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00142/dev/scratch/prototype2/src/test/org/apache/axis/engine/EchoTest.java)
    protected void setUp() throws Exception {
        AxisGlobal global = new AxisGlobal();
        engineRegistry = new org.apache.axis.impl.engine.EngineRegistryImpl(global);
        
        AxisService service = new AxisService(serviceName);
        service.setClassLoader(Thread.currentThread().getContextClassLoader());
        service.setServiceClass(Echo.class);
        service.setProvider(new SimpleJavaProvider());

        AxisOperation operation1 = new SimpleAxisOperationImpl(operationName1);
        service.addOperation(operation1);
        
        AxisOperation operation2 = new SimpleAxisOperationImpl(operationName2);
        service.addOperation(operation2);

        EngineUtils.createExecutionChains(service);
        engineRegistry.addService(service);
        
        sas = EngineUtils.startServer(engineRegistry);
    }
,
>
, <(startLine=211 endLine=226 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01361/modules/jaxbri/src/test/java/org/temp/JaxbSchemaGeneratorTest.java)
        for (XmlSchema xmlSchema : schemaColl) {
            i++;
            // /XmlSchema schema = schemaColl.iterator().next();
            byteArrayOutputStream = new ByteArrayOutputStream();
            xmlSchema.write(byteArrayOutputStream);
            String XML1 = byteArrayOutputStream.toString();

            // Enum has differences when generating schema files
            if (XML1.contains("\"http://ws.apache.org/namespaces/axis2/enum\"")) {
                XML1 = prepareForEnum(XML1);
            }
            XML1 = prepareForEnum(XML1);
            String XML2 = readSchema(c, i);
            assertSimilarXML(XML1, XML2);
            assertIdenticalXML(XML1, XML2);
        }
,
(startLine=387 endLine=401 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01361/modules/kernel/test/org/apache/axis2/description/java2wsdl/DefaultSchemaGeneratorTest.java)
        for (XmlSchema xmlSchema : schemaColl) {
            i++;
            // /XmlSchema schema = schemaColl.iterator().next();
            byteArrayOutputStream = new ByteArrayOutputStream();
            xmlSchema.write(byteArrayOutputStream);
            String XML1 = byteArrayOutputStream.toString();

            // Enum has differences when generating schema files
            if (XML1.contains("\"http://ws.apache.org/namespaces/axis2/enum\"")) {
                XML1 = prepareForEnum(XML1);
            }
            XML1 = prepareForEnum(XML1);
            String XML2 = readSchema(c, i);
            assertSimilarXML(XML2, XML1);
        }
,
>
, <(startLine=525 endLine=549 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00660/modules/adb-codegen/src/org/apache/axis2/schema/SchemaCompiler.java)
                    if (schemaType instanceof XmlSchemaComplexType) {
                        //set a name
                        schemaType.setName(generatedTypeName.getLocalPart());
                        // Must do this up front to support recursive types
                        String fullyQualifiedClassName = writer.makeFullyQualifiedClassName(schemaType.getQName());
                        processedTypemap.put(schemaType.getQName(), fullyQualifiedClassName);

                        BeanWriterMetaInfoHolder metaInfHolder = (BeanWriterMetaInfoHolder) processedAnonymousComplexTypesMap.get(xsElt);
                        metaInfHolder.setOwnQname(schemaType.getQName());
                        metaInfHolder.setOwnClassName(fullyQualifiedClassName);

                        writeComplexType((XmlSchemaComplexType) schemaType,
                                metaInfHolder);
                        //remove the reference from the anon list since we named the type
                        processedAnonymousComplexTypesMap.remove(xsElt);
                        String className = findClassName(schemaType.getQName(), isArray(xsElt));
                        innerElementMap.put(
                                xsElt.getQName(),
                                className);

                        //store in the schema map
                        xsElt.addMetaInfo(
                                SchemaConstants.SchemaCompilerInfoHolder.CLASSNAME_KEY,
                                className);
                    } else if (schemaType instanceof XmlSchemaSimpleType) {
,
(startLine=549 endLine=574 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00660/modules/adb-codegen/src/org/apache/axis2/schema/SchemaCompiler.java)
                    } else if (schemaType instanceof XmlSchemaSimpleType) {
                        //set a name
                        schemaType.setName(generatedTypeName.getLocalPart());
                        // Must do this up front to support recursive types
                        String fullyQualifiedClassName = writer.makeFullyQualifiedClassName(schemaType.getQName());
                        processedTypemap.put(schemaType.getQName(), fullyQualifiedClassName);

                        BeanWriterMetaInfoHolder metaInfHolder = (BeanWriterMetaInfoHolder) processedAnonymousComplexTypesMap.get(xsElt);
                        metaInfHolder.setOwnQname(schemaType.getQName());
                        metaInfHolder.setOwnClassName(fullyQualifiedClassName);

                        writeSimpleType((XmlSchemaSimpleType) schemaType,
                                metaInfHolder);
                        //remove the reference from the anon list since we named the type
                        processedAnonymousComplexTypesMap.remove(xsElt);
                        String className = findClassName(schemaType.getQName(), isArray(xsElt));
                        innerElementMap.put(
                                xsElt.getQName(),
                                className);

                        //store in the schema map
                        xsElt.addMetaInfo(
                                SchemaConstants.SchemaCompilerInfoHolder.CLASSNAME_KEY,
                                className);

                    }
,
>
, <(startLine=30 endLine=38 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00560/modules/jaxws/test/org/apache/axis2/jaxws/description/builder/GenericsParsingTests.java)
    public void testHolder() {
        String holderInputString = JAXWS_HOLDER + "<java.lang.Object>";
        assertTrue(ParameterDescriptionComposite.isHolderType(holderInputString));
        String holderResultString = ParameterDescriptionComposite.getRawType(holderInputString);
        assertEquals(JAXWS_HOLDER, holderResultString);
        
        String actualTypeResult = ParameterDescriptionComposite.getHolderActualType(holderInputString);
        assertEquals("java.lang.Object", actualTypeResult);
    }
,
(startLine=50 endLine=59 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00560/modules/jaxws/test/org/apache/axis2/jaxws/description/builder/GenericsParsingTests.java)
    public void testHolderGeneric() {
        String holderInputString = JAXWS_HOLDER + "<java.util.List<java.lang.Object>>";
        assertTrue(ParameterDescriptionComposite.isHolderType(holderInputString));
        String holderResultString = ParameterDescriptionComposite.getRawType(holderInputString);
        assertEquals(JAXWS_HOLDER, holderResultString);
        
        String actualTypeResult = ParameterDescriptionComposite.getHolderActualType(holderInputString);
        assertEquals("java.util.List", actualTypeResult);
        
    }
,
>
, <(startLine=183 endLine=233 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01337/modules/transport/http-hc3/src/main/java/org/apache/axis2/transport/http/impl/httpclient3/HTTPSenderImpl.java)
            throws AxisFault {
        return new Request() {
            @Override
            public void execute() throws AxisFault {
                HttpClient httpClient = getHttpClient(msgContext);
        
                /*
                 * What's up with this, it never gets used anywhere?? --Glen String
                 * charEncoding = (String)
                 * msgContext.getProperty(Constants.Configuration
                 * .CHARACTER_SET_ENCODING);
                 * 
                 * if (charEncoding == null) { charEncoding =
                 * MessageContext.DEFAULT_CHAR_SET_ENCODING; }
                 */
        
                PostMethod postMethod = new PostMethod();
                if (log.isTraceEnabled()) {
                    log.trace(Thread.currentThread() + " PostMethod " + postMethod + " / " + httpClient);
                }
                MessageFormatter messageFormatter = populateCommonProperties(msgContext, url, postMethod,
                        httpClient, soapActionString);
        
                postMethod.setRequestEntity(new AxisRequestEntityImpl(messageFormatter, msgContext, format,
                        soapActionString, chunked, isAllowedRetry));
        
                if (!httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10) && chunked) {
                    postMethod.setContentChunked(true);
                }
        
                String soapAction = messageFormatter.formatSOAPAction(msgContext, format, soapActionString);
        
                if (soapAction != null && !msgContext.isDoingREST()) {
                    postMethod.setRequestHeader(HTTPConstants.HEADER_SOAP_ACTION, soapAction);
                }
        
                /*
                 * main excecution takes place..
                 */
                try {
                    executeMethod(httpClient, msgContext, url, postMethod);
                    handleResponse(msgContext, postMethod);
                } catch (IOException e) {
                    log.info("Unable to sendViaPost to url[" + url + "]", e);
                    throw AxisFault.makeFault(e);
                } finally {
                    cleanup(msgContext, postMethod);
                }
            }
        };
    }
,
(startLine=248 endLine=294 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01337/modules/transport/http-hc3/src/main/java/org/apache/axis2/transport/http/impl/httpclient3/HTTPSenderImpl.java)
            throws AxisFault {
        return new Request() {
            @Override
            public void execute() throws AxisFault {
                HttpClient httpClient = getHttpClient(msgContext);
        
                /*
                 * Same deal - this value never gets used, why is it here? --Glen String
                 * charEncoding = (String)
                 * msgContext.getProperty(Constants.Configuration
                 * .CHARACTER_SET_ENCODING);
                 * 
                 * if (charEncoding == null) { charEncoding =
                 * MessageContext.DEFAULT_CHAR_SET_ENCODING; }
                 */
        
                PutMethod putMethod = new PutMethod();
                MessageFormatter messageFormatter = populateCommonProperties(msgContext, url, putMethod,
                        httpClient, soapActionString);
        
                putMethod.setRequestEntity(new AxisRequestEntityImpl(messageFormatter, msgContext, format,
                        soapActionString, chunked, isAllowedRetry));
        
                if (!httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10) && chunked) {
                    putMethod.setContentChunked(true);
                }
        
                String soapAction = messageFormatter.formatSOAPAction(msgContext, format, soapActionString);
                if (soapAction != null && !msgContext.isDoingREST()) {
                    putMethod.setRequestHeader(HTTPConstants.HEADER_SOAP_ACTION, soapAction);
                }
        
                /*
                 * main excecution takes place..
                 */
                try {
                    executeMethod(httpClient, msgContext, url, putMethod);
                    handleResponse(msgContext, putMethod);
                } catch (IOException e) {
                    log.info("Unable to sendViaPut to url[" + url + "]", e);
                    throw AxisFault.makeFault(e);
                } finally {
                    cleanup(msgContext, putMethod);
                }
            }
        };
    }
,
(startLine=208 endLine=260 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01337/modules/transport/http/src/org/apache/axis2/transport/http/impl/httpclient4/HTTPSenderImpl.java)
            throws AxisFault {
        return new Request() {
            @Override
            public void execute() throws AxisFault {
                AbstractHttpClient httpClient = getHttpClient(msgContext);
        
                /*
                 * What's up with this, it never gets used anywhere?? --Glen String
                 * charEncoding = (String)
                 * msgContext.getProperty(Constants.Configuration
                 * .CHARACTER_SET_ENCODING);
                 *
                 * if (charEncoding == null) { charEncoding =
                 * MessageContext.DEFAULT_CHAR_SET_ENCODING; }
                 */
        
                HttpPost postMethod = new HttpPost();
                if (log.isTraceEnabled()) {
                    log.trace(Thread.currentThread() + " PostMethod " + postMethod + " / " + httpClient);
                }
                MessageFormatter messageFormatter = populateCommonProperties(msgContext, url, postMethod,
                                                                             httpClient, soapActionString);
                AxisRequestEntityImpl requestEntity =
                        new AxisRequestEntityImpl(messageFormatter, msgContext, format,
                                                  soapActionString, chunked, isAllowedRetry);
                postMethod.setEntity(requestEntity);
        
                if (!httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10) && chunked) {
                    requestEntity.setChunked(chunked);
                }
        
                String soapAction = messageFormatter.formatSOAPAction(msgContext, format, soapActionString);
        
                if (soapAction != null && !msgContext.isDoingREST()) {
                    postMethod.setHeader(HTTPConstants.HEADER_SOAP_ACTION, soapAction);
                }
        
                /*
                 * main execution takes place..
                 */
                HttpResponse response = null;
                try {
                    response = executeMethod(httpClient, msgContext, url, postMethod);
                    handleResponse(msgContext, response);
                } catch (IOException e) {
                    log.info("Unable to sendViaPost to url[" + url + "]", e);
                    throw AxisFault.makeFault(e);
                } finally {
                    cleanup(msgContext, response);
                }
            }
        };
    }
,
(startLine=271 endLine=319 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01337/modules/transport/http/src/org/apache/axis2/transport/http/impl/httpclient4/HTTPSenderImpl.java)
            throws AxisFault {
        return new Request() {
            @Override
            public void execute() throws AxisFault {
                AbstractHttpClient httpClient = getHttpClient(msgContext);
        
                /*
                 * Same deal - this value never gets used, why is it here? --Glen String
                 * charEncoding = (String)
                 * msgContext.getProperty(Constants.Configuration
                 * .CHARACTER_SET_ENCODING);
                 *
                 * if (charEncoding == null) { charEncoding =
                 * MessageContext.DEFAULT_CHAR_SET_ENCODING; }
                 */
        
                HttpPut putMethod = new HttpPut();
                MessageFormatter messageFormatter = populateCommonProperties(msgContext, url, putMethod,
                                                                             httpClient, soapActionString);
                AxisRequestEntityImpl requestEntity =
                        new AxisRequestEntityImpl(messageFormatter, msgContext, format,
                                                  soapActionString, chunked, isAllowedRetry);
                putMethod.setEntity(requestEntity);
        
                if (!httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10) && chunked) {
                    requestEntity.setChunked(chunked);
                }
        
                String soapAction = messageFormatter.formatSOAPAction(msgContext, format, soapActionString);
                if (soapAction != null && !msgContext.isDoingREST()) {
                    putMethod.setHeader(HTTPConstants.HEADER_SOAP_ACTION, soapAction);
                }
        
                /*
                 * main execution takes place..
                 */
                HttpResponse response = null;
                try {
                    response = executeMethod(httpClient, msgContext, url, putMethod);
                    handleResponse(msgContext, response);
                } catch (IOException e) {
                    log.info("Unable to sendViaPut to url[" + url + "]", e);
                    throw AxisFault.makeFault(e);
                } finally {
                    cleanup(msgContext, response);
                }
            }
        };
    }
,
>
, <(startLine=61 endLine=70 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00058/dev/scratch/prototype2/src/java/org/apache/axis/deployment/MetaData/ServerMetaData.java)
    private void dummpPhases() {
        PhaseMetaData phaseMetaData = new PhaseMetaData("service");
        phases.add(phaseMetaData);
        PhaseMetaData p1 = new PhaseMetaData("P1");
        phases.add(p1);
        PhaseMetaData p2 = new PhaseMetaData("P1");
        phases.add(p2);
        PhaseMetaData p3 = new PhaseMetaData("P3");
        phases.add(p3);
    }
,
(startLine=62 endLine=71 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00058/dev/scratch/prototype1/src/java/org/apache/axis/deployment/metadata/ServerMetaData.java)
    private void dummpPhases() {
        PhaseMetaData phaseMetaData = new PhaseMetaData("service");
        phases.add(phaseMetaData);
        PhaseMetaData p1 = new PhaseMetaData("P1");
        phases.add(p1);
        PhaseMetaData p2 = new PhaseMetaData("P1");
        phases.add(p2);
        PhaseMetaData p3 = new PhaseMetaData("P3");
        phases.add(p3);
    }
,
>
, <(startLine=351 endLine=400 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00533/modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/CEmitter.java)
            if (mep == null) {

                opsFound = true;

                List soapHeaderInputParameterList = new ArrayList();
                List soapHeaderOutputParameterList = new ArrayList();

                methodElement = doc.createElement("method");

                String localPart = axisOperation.getName().getLocalPart();
                String opCName = makeCClassName(localPart);
                String opNS = axisOperation.getName().getNamespaceURI();

                addAttribute(doc, "name", opCName, methodElement);
                addAttribute(doc, "localpart", localPart, methodElement);
                addAttribute(doc, "qname", localPart+ "|"+ opNS, methodElement);

                addAttribute(doc, "namespace", opNS, methodElement);
                String style = axisOperation.getStyle();
                addAttribute(doc, "style", style, methodElement);
                addAttribute(doc, "dbsupportname", portTypeName + localPart + DATABINDING_SUPPORTER_NAME_SUFFIX,
                        methodElement);


                addAttribute(doc, "mep", Utils.getAxisSpecifMEPConstant(axisOperation.getMessageExchangePattern()) + "", methodElement);
                addAttribute(doc, "mepURI", axisOperation.getMessageExchangePattern(), methodElement);


                addSOAPAction(doc, methodElement, axisOperation);
                //add header ops for input
                addHeaderOperations(soapHeaderInputParameterList, axisOperation, true);
                //add header ops for output
                addHeaderOperations(soapHeaderOutputParameterList, axisOperation, false);

                PolicyInclude policyInclude = axisOperation.getPolicyInclude();
                Policy policy = policyInclude.getPolicy();
                if (policy != null) {
                    try {
                        addAttribute(doc, "policy", PolicyUtil.policyComponentToString(policy), methodElement);
                    } catch (Exception ex) {
                        throw new RuntimeException("can't serialize the policy to a String " , ex);
                    }
                }

                methodElement.appendChild(getInputElement(doc, axisOperation, soapHeaderInputParameterList));
                methodElement.appendChild(getOutputElement(doc, axisOperation, soapHeaderOutputParameterList));
                methodElement.appendChild(getFaultElement(doc, axisOperation));

                rootElement.appendChild(methodElement);
            } else {
,
(startLine=400 endLine=457 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00533/modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/CEmitter.java)
            } else {
                //mep is present - we move ahead only if the given mep matches the mep of this operation

                if (mep.equals(axisOperation.getMessageExchangePattern())) {
                    //at this point we know it's true
                    opsFound = true;
                    List soapHeaderInputParameterList = new ArrayList();
                    List soapHeaderOutputParameterList = new ArrayList();
                    methodElement = doc.createElement("method");
                    String localPart = axisOperation.getName().getLocalPart();
                    String opCName = makeCClassName(localPart);
                    String opNS = axisOperation.getName().getNamespaceURI();

                    addAttribute(doc, "name", opCName, methodElement);
                    addAttribute(doc, "localpart", localPart, methodElement);
                    addAttribute(doc, "qname", localPart+ "|"+ opNS, methodElement);

                    addAttribute(doc, "namespace", axisOperation.getName().getNamespaceURI(), methodElement);
                    addAttribute(doc, "style", axisOperation.getStyle(), methodElement);
                    addAttribute(doc, "dbsupportname", portTypeName + localPart + DATABINDING_SUPPORTER_NAME_SUFFIX,
                            methodElement);

                    addAttribute(doc, "mep", Utils.getAxisSpecifMEPConstant(axisOperation.getMessageExchangePattern()) + "", methodElement);
                    addAttribute(doc, "mepURI", axisOperation.getMessageExchangePattern(), methodElement);


                    addSOAPAction(doc, methodElement, axisOperation);
                    addHeaderOperations(soapHeaderInputParameterList, axisOperation, true);
                    addHeaderOperations(soapHeaderOutputParameterList, axisOperation, false);

                    /*
                     * Setting the policy of the operation
                     */

                    Policy policy = axisOperation.getPolicyInclude().getPolicy();
                    if (policy != null) {
                        try {
                        addAttribute(doc, "policy",
                                PolicyUtil.policyComponentToString(policy),
                                methodElement);
                        } catch (Exception ex) {
                            throw new RuntimeException("can't serialize the policy to a String", ex);
                        }
                    }


                    methodElement.appendChild(getInputElement(doc,
                            axisOperation, soapHeaderInputParameterList));
                    methodElement.appendChild(getOutputElement(doc,
                            axisOperation, soapHeaderOutputParameterList));
                    methodElement.appendChild(getFaultElement(doc,
                            axisOperation));

                    rootElement.appendChild(methodElement);
                    //////////////////////
                }

            }
,
>
, <(startLine=311 endLine=323 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00142/dev/scratch/prototype1/src/java/org/apache/axis/i18n/RB.java)
        if (language != null) {

            if (country != null) {

                if (variant != null) {
                    props = merge(props, loadProperties(basename + "_" + language +"_" + country + "_" + variant +
                                                        PROPERTY_EXT, loader));
                }
                props = merge(props, loadProperties(basename + "_" + language +"_" + country +
                                                    PROPERTY_EXT, loader));
            }
            props = merge(props, loadProperties(basename + "_" + language + PROPERTY_EXT, loader));
        }
,
(startLine=311 endLine=323 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00142/dev/scratch/srinath_eran_jaliya/src/java/org/apache/axis/i18n/RB.java)
        if (language != null) {

            if (country != null) {

                if (variant != null) {
                    props = merge(props, loadProperties(basename + "_" + language +"_" + country + "_" + variant +
                                                        PROPERTY_EXT, loader));
                }
                props = merge(props, loadProperties(basename + "_" + language +"_" + country +
                                                    PROPERTY_EXT, loader));
            }
            props = merge(props, loadProperties(basename + "_" + language + PROPERTY_EXT, loader));
        }
,
>
, <(startLine=190 endLine=209 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01204/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/Attachment.java)
    private static byte[] createBytesFromImage(Image image, String mimeType)  {
        try {
            ImageWriter imageWriter = null;
            BufferedImage bufferedImage = (BufferedImage) image;
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            Iterator iterator = javax.imageio.ImageIO.getImageWritersByMIMEType(mimeType);
            if (iterator.hasNext()) {
                imageWriter = (ImageWriter) iterator.next();
            }
            ImageOutputStream ios = javax.imageio.ImageIO.createImageOutputStream(baos);
            imageWriter.setOutput(ios);
            imageWriter.write(new IIOImage(bufferedImage, null, null));
            ios.flush();
            imageWriter.dispose();
            return baos.toByteArray();
        } catch (IOException e) {
            throw ExceptionFactory.makeWebServiceException(e);
        }

    }
,
(startLine=130 endLine=144 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01204/modules/jaxws/test/org/apache/axis2/jaxws/providerapi/AttachmentUtil.java)
    public static void storeImage(String mimeType, Image image, OutputStream os) throws Exception {
        ImageWriter imageWriter = null;
        BufferedImage bufferedImage = (BufferedImage) image;
        
        Iterator iterator = javax.imageio.ImageIO.getImageWritersByMIMEType(mimeType);
        if (iterator.hasNext()) {
        	imageWriter = (ImageWriter) iterator.next();
        }
        ImageOutputStream ios = javax.imageio.ImageIO.createImageOutputStream(os);
        imageWriter.setOutput(ios);

        imageWriter.write(new IIOImage(bufferedImage, null, null));
        ios.flush();
        imageWriter.dispose();
    }
,
(startLine=158 endLine=172 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01204/modules/jaxws-integration/test/org/apache/axis2/jaxws/provider/AttachmentUtil.java)
    public static void storeImage(String mimeType, Image image, OutputStream os) throws Exception {
        ImageWriter imageWriter = null;
        BufferedImage bufferedImage = (BufferedImage) image;
        
        Iterator iterator = javax.imageio.ImageIO.getImageWritersByMIMEType(mimeType);
        if (iterator.hasNext()) {
        	imageWriter = (ImageWriter) iterator.next();
        }
        ImageOutputStream ios = javax.imageio.ImageIO.createImageOutputStream(os);
        imageWriter.setOutput(ios);

        imageWriter.write(new IIOImage(bufferedImage, null, null));
        ios.flush();
        imageWriter.dispose();
    }
,
>
, <(startLine=102 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00908/modules/kernel/src/org/apache/axis2/transport/nhttp/HttpCoreNIOSSLSender.java)
            try {
                KeyStore trustStore = KeyStore.getInstance(type);
                URL url = getClass().getClassLoader().getResource(location);
                log.debug("Loading Trust Key Store from URL : " + url);

                trustStore.load(url.openStream(), storePassword.toCharArray());
                TrustManagerFactory trustManagerfactory = TrustManagerFactory.getInstance(
                    TrustManagerFactory.getDefaultAlgorithm());
                trustManagerfactory.init(trustStore);
                trustManagers = trustManagerfactory.getTrustManagers();

            } catch (GeneralSecurityException gse) {
,
(startLine=118 endLine=129 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00908/modules/kernel/src/org/apache/axis2/transport/nhttp/HttpCoreNIOSSLListener.java)
            try {
                KeyStore trustStore = KeyStore.getInstance(type);
                URL url = getClass().getClassLoader().getResource(location);
                log.debug("Loading Trust Key Store from URL : " + url);

                trustStore.load(url.openStream(), storePassword.toCharArray());
                TrustManagerFactory trustManagerfactory = TrustManagerFactory.getInstance(
                    TrustManagerFactory.getDefaultAlgorithm());
                trustManagerfactory.init(trustStore);
                trustManagers = trustManagerfactory.getTrustManagers();

            } catch (GeneralSecurityException gse) {
,
>
, <(startLine=224 endLine=243 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00560/modules/saaj/src/javax/xml/soap/MimeHeaders.java)
    public void addHeader(String name, String value) {

        if ((name == null) || "".equals(name)) {
            throw new IllegalArgumentException("Illegal MimeHeader name");
        }

        int i = headers.size();

        for (int j = i - 1; j >= 0; j--) {
            MimeHeader mimeheader = (MimeHeader) headers.elementAt(j);

            if (mimeheader.getName().equalsIgnoreCase(name)) {
                headers.insertElementAt(new MimeHeader(name, value), j + 1);

                return;
            }
        }

        headers.addElement(new MimeHeader(name, value));
    }
,
(startLine=224 endLine=243 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00560/modules/saaj-api/src/javax/xml/soap/MimeHeaders.java)
    public void addHeader(String name, String value) {

        if ((name == null) || "".equals(name)) {
            throw new IllegalArgumentException("Illegal MimeHeader name");
        }

        int i = headers.size();

        for (int j = i - 1; j >= 0; j--) {
            MimeHeader mimeheader = (MimeHeader) headers.elementAt(j);

            if (mimeheader.getName().equalsIgnoreCase(name)) {
                headers.insertElementAt(new MimeHeader(name, value), j + 1);

                return;
            }
        }

        headers.addElement(new MimeHeader(name, value));
    }
,
>
, <(startLine=93 endLine=102 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00716/modules/kernel/src/org/apache/axis2/transport/tcp/TCPTransportSender.java)
        } else {
            out = (OutputStream) msgContext.getProperty(MessageContext.TRANSPORT_OUT);

            if (out != null) {
                TransportUtils.writeMessage(msgContext, out);
            } else {
                throw new AxisFault(
                        "Both the TO and Property MessageContext.TRANSPORT_OUT is Null, No where to send");
            }
        }
,
(startLine=78 endLine=87 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00716/modules/kernel/src/org/apache/axis2/transport/local/LocalResponder.java)
        } else {
            out = (OutputStream) msgContext.getProperty(MessageContext.TRANSPORT_OUT);

            if (out != null) {
                TransportUtils.writeMessage(msgContext, out);
            } else {
                throw new AxisFault(
                        "Both the TO and Property MessageContext.TRANSPORT_OUT is Null, No where to send");
            }
        }
,
(startLine=82 endLine=91 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00716/modules/kernel/src/org/apache/axis2/transport/local/LocalTransportSender.java)
        } else {
            out = (OutputStream) msgContext.getProperty(MessageContext.TRANSPORT_OUT);

            if (out != null) {
                TransportUtils.writeMessage(msgContext, out);
            } else {
                throw new AxisFault(
                        "Both the TO and Property MessageContext.TRANSPORT_OUT is Null, No where to send");
            }
        }
,
>
, <(startLine=60 endLine=68 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01068/modules/adb/src/org/apache/axis2/databinding/types/IDRefs.java)
    public String toString() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < idrefs.length; i++) {
            IDRef ref = idrefs[i];
            if (i > 0) buf.append(" ");
            buf.append(ref.toString());
        }
        return buf.toString();
    }
,
(startLine=54 endLine=62 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01068/modules/adb/src/org/apache/axis2/databinding/types/NMTokens.java)
    public String toString() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < tokens.length; i++) {
            NMToken token = tokens[i];
            if (i > 0) buf.append(" ");
            buf.append(token.toString());
        }
        return buf.toString();
    }
,
>
, <(startLine=71 endLine=81 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01071/modules/jaxws/src/org/apache/axis2/jaxws/utility/ClassUtils.java)
    static {
        loadClassMap.put("byte", byte.class);
        loadClassMap.put("int", int.class);
        loadClassMap.put("short", short.class);
        loadClassMap.put("long", long.class);
        loadClassMap.put("float", float.class);
        loadClassMap.put("double", double.class);
        loadClassMap.put("boolean", boolean.class);
        loadClassMap.put("char", char.class);
        loadClassMap.put("void", void.class);
    }
,
(startLine=63 endLine=74 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01071/modules/kernel/src/org/apache/axis2/context/externalize/ObjectInputStreamWithCL.java)
    {
        primClasses.put("boolean", boolean.class);
        primClasses.put("byte", byte.class);
        primClasses.put("char", char.class);
        primClasses.put("short", short.class);
        primClasses.put("int", int.class);
        primClasses.put("long", long.class);
        primClasses.put("float", float.class);
        primClasses.put("double", double.class);
        primClasses.put("void", void.class);

    }
,
>
, <(startLine=146 endLine=163 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01028/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/RuntimeExceptionsAsyncMepTest.java)
	public void testAsyncPolling_asyncMEP_WebServiceException() throws Exception {
		
		AsyncPort port = getPort();
		Response<ThrowExceptionResponse> resp = port
				.throwExceptionAsync(ExceptionTypeEnum.WSE);

		AsyncClient.waitBlocking(resp);
		try {
			resp.get();
			fail("ExecutionException expected at Response.get when ednpoint throws an exception");
		} catch (ExecutionException ee) {
			//Constants.logStack(ee);

			assertTrue(
					"ExecutionException.getCause should be an instance of SOAPFaultException",
					ee.getCause() instanceof SOAPFaultException);
		}
	}
,
(startLine=170 endLine=187 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01028/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/RuntimeExceptionsAsyncMepTest.java)
	public void testAsyncPolling_asyncMEP_WsdlFault() throws Exception{
		
		AsyncPort port = getPort();
		Response<ThrowExceptionResponse> resp = port
				.throwExceptionAsync(ExceptionTypeEnum.WSDL_FAULT);

		AsyncClient.waitBlocking(resp);
		try {
			resp.get();
			fail("ExecutionException expected at Response.get when ednpoint throws an exception");
		} catch (ExecutionException ee) {
			//Constants.logStack(ee);

			assertTrue(
					"ExecutionException.getCause should be an instance of SimpleFault",
					ee.getCause() instanceof ThrowExceptionFault);
		}
	}
,
(startLine=297 endLine=316 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01028/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/RuntimeExceptionsAsyncMepTest.java)
	public void testAsyncCallback_asyncMEP_WsdlFault() throws Exception{
		
		AsyncPort port = getPort();
		CallbackHandler<ThrowExceptionResponse> handler = new CallbackHandler<ThrowExceptionResponse>();
		Future<?> resp = port.throwExceptionAsync(ExceptionTypeEnum.WSDL_FAULT, handler);

		AsyncClient.waitBlocking(resp);
		
		try {
			handler.get();
			
			fail("ExecutionException expected at Response.get when ednpoint throws an exception");
		} catch (ExecutionException ee) {
			//Constants.logStack(ee);

			assertTrue(
					"ExecutionException.getCause should be an instance of SimpleFault",
					ee.getCause() instanceof ThrowExceptionFault);
		}
	}
,
>
, <(startLine=113 endLine=137 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01289/modules/json/src/org/apache/axis2/json/impl/GsonXMLStreamReader.java)
    private void process() {
        Object ob = configContext.getProperty(JsonConstant.XMLNODES);
        if (ob != null) {
            Map<QName, XmlNode> nodeMap = (Map<QName, XmlNode>) ob;
            XmlNode requesNode = nodeMap.get(elementQname);
            if (requesNode != null) {
                xmlNodeGenerator = new XmlNodeGenerator();
                queue = xmlNodeGenerator.getQueue(requesNode);
            } else {
                xmlNodeGenerator = new XmlNodeGenerator(xmlSchemaList, elementQname);
                mainXmlNode = xmlNodeGenerator.getMainXmlNode();
                queue = xmlNodeGenerator.getQueue(mainXmlNode);
                nodeMap.put(elementQname, mainXmlNode);
                configContext.setProperty(JsonConstant.XMLNODES, nodeMap);
            }
        } else {
            Map<QName, XmlNode> newNodeMap = new HashMap<QName, XmlNode>();
            xmlNodeGenerator = new XmlNodeGenerator(xmlSchemaList, elementQname);
            mainXmlNode = xmlNodeGenerator.getMainXmlNode();
            queue = xmlNodeGenerator.getQueue(mainXmlNode);
            newNodeMap.put(elementQname, mainXmlNode);
            configContext.setProperty(JsonConstant.XMLNODES, newNodeMap);
        }
        isProcessed = true;
    }
,
(startLine=103 endLine=128 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01289/modules/json/src/org/apache/axis2/json/impl/GsonXMLStreamWriter.java)
    private void process() throws IOException {
        Object ob = configContext.getProperty(JsonConstant.XMLNODES);
        if (ob != null) {
            Map<QName, XmlNode> nodeMap = (Map<QName, XmlNode>) ob;
            XmlNode resNode = nodeMap.get(elementQName);
            if (resNode != null) {
                xmlNodeGenerator = new XmlNodeGenerator();
                queue = xmlNodeGenerator.getQueue(resNode);
            } else {
                xmlNodeGenerator = new XmlNodeGenerator(xmlSchemaList, elementQName);
                mainXmlNode = xmlNodeGenerator.getMainXmlNode();
                queue = xmlNodeGenerator.getQueue(mainXmlNode);
                nodeMap.put(elementQName, mainXmlNode);
                configContext.setProperty(JsonConstant.XMLNODES, nodeMap);
            }
        } else {
            Map<QName, XmlNode> newNodeMap = new HashMap<QName, XmlNode>();
            xmlNodeGenerator = new XmlNodeGenerator(xmlSchemaList, elementQName);
            mainXmlNode = xmlNodeGenerator.getMainXmlNode();
            queue = xmlNodeGenerator.getQueue(mainXmlNode);
            newNodeMap.put(elementQName, mainXmlNode);
            configContext.setProperty(JsonConstant.XMLNODES, newNodeMap);
        }
        isProcessed = true;
        this.jsonWriter.beginObject();
    }
,
>
, <(startLine=18 endLine=38 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00511/modules/integration/src/org/apache/axis2/interopt/whitemesa/round1/util/Round1VoidUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.createSOAPEnvelope();
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/wsdl/", "xmlns");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/wsdl/soap/", "soap");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/wsdl/", "wsdl");

        OMElement operation = omfactory.createOMElement("echoVoid", "http://soapinterop.org/", null);
        SOAPBody body = omfactory.createSOAPBody(reqEnv);
        body.addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        return reqEnv;

    }
,
(startLine=34 endLine=55 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00511/modules/integration/src/org/apache/axis2/interopt/whitemesa/round2/util/Round2EchoVoidClientUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.createSOAPEnvelope();
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/wsdl/", "xmlns");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/wsdl/soap/", "soap");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/wsdl/", "wsdl");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance","xsi");

        OMElement operation = omfactory.createOMElement("echoVoid", "http://soapinterop.org/", null);
        SOAPBody body = omfactory.createSOAPBody(reqEnv);
        body.addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        return reqEnv;

    }
,
(startLine=35 endLine=57 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00511/modules/integration/src/org/apache/axis2/interopt/whitemesa/round3/util/GDRpcVoidUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.createSOAPEnvelope();
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/wsdl/", "xmlns");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/wsdl/soap/", "soap");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/wsdl/", "wsdl");
        reqEnv.declareNamespace("http://soapinterop.org/WSDLInteropTestRpcEnc", "tns");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance","xsi");

        OMElement operation = omfactory.createOMElement("echoVoid", "http://soapinterop.org/WSDLInteropTestRpcEnc", null);
        SOAPBody body = omfactory.createSOAPBody(reqEnv);
        body.addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        return reqEnv;

    }
,
>
, <(startLine=230 endLine=245 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01124/modules/saaj/test/org/apache/axis2/saaj/SOAPFactoryTest.java)
    public void testSOAPFaultException1() {
        try {
            SOAPFactory factory = SOAPFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
            SOAPFault fault = factory.createFault("This is the fault reason.",
                                                  new QName("http://MyNamespaceURI.org/",
                                                            "My Fault Code"));
        } catch (UnsupportedOperationException e) {
            //Caught expected UnsupportedOperationException
        } catch (SOAPException e) {
            //Caught expected SOAPException
        } catch (IllegalArgumentException e) {
            //Caught expected IllegalArgumentException
        } catch (Exception e) {
            fail("Exception: " + e);
        }
    }
,
(startLine=249 endLine=265 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01124/modules/saaj/test/org/apache/axis2/saaj/SOAPFactoryTest.java)
    public void testSOAPFaultException2() {
        try {
            SOAPFactory factory = SOAPFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
            SOAPFault sf = factory.createFault("This is the fault reason.",
                                               new QName("http://MyNamespaceURI.org/",
                                                         "My Fault Code"));
            fail("Did not throw expected SOAPException");
        } catch (UnsupportedOperationException e) {
            //Caught expected UnsupportedOperationException
        } catch (SOAPException e) {
            //Caught expected SOAPException
        } catch (IllegalArgumentException e) {
            //Caught expected IllegalArgumentException
        } catch (Exception e) {
            fail("Exception: " + e);
        }
    }
,
>
, <(startLine=103 endLine=123 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00756/modules/integration/src/test/interop/whitemesa/WhiteMesaIneterop.java)
        try {
            String xPathExpr = seperator + seperator + nsPrefix + colon + echoStringArrayResponse +
                    seperator + ret + seperator + item;
            AXIOMXPath xpath = new AXIOMXPath(xPathExpr);
            addNamespaces(xpath);
            List itemElems = xpath.selectNodes(payload);
            assertNotNull(itemElems);
            assertEquals(itemElems.size(), 3);

            Iterator iter = itemElems.iterator();
            OMElement itemElem = (OMElement)iter.next();
            assertNotNull(itemElem);
            assertEquals(itemElem.getText(), WhiteMesaConstants.ECHO_STRING_ARR_1);
            itemElem = (OMElement)iter.next();
            assertNotNull(itemElem);
            assertEquals(itemElem.getText(), WhiteMesaConstants.ECHO_STRING_ARR_2);
            itemElem = (OMElement)iter.next();
            assertNotNull(itemElem);
            assertEquals(itemElem.getText(), WhiteMesaConstants.ECHO_STRING_ARR_3);

        } catch (JaxenException e) {
,
(startLine=162 endLine=182 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00756/modules/integration/src/test/interop/whitemesa/WhiteMesaIneterop.java)
        try {
            String xPathExpr = seperator + seperator + nsPrefix + colon + echoIntegerArrayResponse +
                    seperator + ret + seperator + item;
            AXIOMXPath xpath = new AXIOMXPath(xPathExpr);
            addNamespaces(xpath);
            List itemElems = xpath.selectNodes(payload);
            assertNotNull(itemElems);
            assertEquals(itemElems.size(), 3);

            Iterator iter = itemElems.iterator();
            OMElement itemElem = (OMElement)iter.next();
            assertNotNull(itemElem);
            assertEquals(itemElem.getText(), WhiteMesaConstants.ECHO_INTEGER_ARR_1);
            itemElem = (OMElement)iter.next();
            assertNotNull(itemElem);
            assertEquals(itemElem.getText(), WhiteMesaConstants.ECHO_INTEGER_ARR_2);
            itemElem = (OMElement)iter.next();
            assertNotNull(itemElem);
            assertEquals(itemElem.getText(), WhiteMesaConstants.ECHO_INTEGER_ARR_3);

        } catch (JaxenException e) {
,
(startLine=221 endLine=241 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00756/modules/integration/src/test/interop/whitemesa/WhiteMesaIneterop.java)
        try {
            String xPathExpr = seperator + seperator + nsPrefix + colon + echoFloatArrayResponse +
                    seperator + ret + seperator + item;
            AXIOMXPath xpath = new AXIOMXPath(xPathExpr);
            addNamespaces(xpath);
            List itemElems = xpath.selectNodes(payload);
            assertNotNull(itemElems);
            assertEquals(itemElems.size(), 3);

            Iterator iter = itemElems.iterator();
            OMElement itemElem = (OMElement)iter.next();
            assertNotNull(itemElem);
            assertEquals(itemElem.getText(), WhiteMesaConstants.ECHO_FLOAT_ARR_1);
            itemElem = (OMElement)iter.next();
            assertNotNull(itemElem);
            assertEquals(itemElem.getText(), WhiteMesaConstants.ECHO_FLOAT_ARR_2);
            itemElem = (OMElement)iter.next();
            assertNotNull(itemElem);
            assertEquals(itemElem.getText(), WhiteMesaConstants.ECHO_FLOAT_ARR_3);

        } catch (JaxenException e) {
,
>
, <(startLine=142 endLine=152 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00256/modules/core/src/org/apache/axis/context/OperationContext.java)
    public boolean isComplete(){
		if (WSDLConstants.MEP_URI_IN_ONLY.equals(this.axisOperation.getMessageExchangePattern())){
			if(1 == this.messageContextList.size())
				return true;
		}else if(WSDLConstants.MEP_URI_IN_OUT.equals(this.axisOperation.getMessageExchangePattern())){
			if(2 == this.messageContextList.size())
				return true;
		}

		return false;
	}
,
(startLine=142 endLine=152 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00256/modules/core/src/org/apache/axis/context/BasicOperationContext.java)
    public boolean isComplete(){
		if (WSDLConstants.MEP_URI_IN_ONLY.equals(this.axisOperation.getMessageExchangePattern())){
			if(1 == this.messageContextList.size())
				return true;
		}else if(WSDLConstants.MEP_URI_IN_OUT.equals(this.axisOperation.getMessageExchangePattern())){
			if(2 == this.messageContextList.size())
				return true;
		}
		
		return false;
	}
,
>
, <(startLine=74 endLine=82 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01056/modules/metadata/test/org/apache/axis2/jaxws/description/feature/MTOMFeatureTests.java)
    public void testThreshold() {
        ServiceDescription sd = DescriptionFactory.createServiceDescription(ThresholdService.class);
        
        EndpointDescription ed = sd.getEndpointDescription(new QName(ns, thresholdServicePortName));
        assertTrue("The EndpointDescription should not be null.", ed != null);
        
        int threshold = ed.getMTOMThreshold();
        assertTrue("MTOM threshold should be 2000.", threshold == 20000);
    }
,
(startLine=84 endLine=92 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01056/modules/metadata/test/org/apache/axis2/jaxws/description/feature/MTOMFeatureTests.java)
    public void testBadThreshold() {
        ServiceDescription sd = DescriptionFactory.createServiceDescription(BadThresholdService.class);
        
        EndpointDescription ed = sd.getEndpointDescription(new QName(ns, badThresholdServicePortName));
        assertTrue("The EndpointDescription should not be null.", ed != null);
        
        int threshold = ed.getMTOMThreshold();
        assertTrue("MTOM threshold should be [0], but was [" + threshold + "].", threshold == 0);
    }
,
>
, <(startLine=445 endLine=466 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00839/modules/adb-codegen/test/org/apache/axis2/schema/particalmaxoccurs/ParticalMaxOccursTest.java)
         try {
             OMElement omElement = testParticalChoiceMaxOccurs4.getOMElement(TestParticalChoiceMaxOccurs4.MY_QNAME,
                      OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestParticalChoiceMaxOccurs4 result = TestParticalChoiceMaxOccurs4.Factory.parse(xmlReader);
            TestParticalChoiceMaxOccursType4Choice[] resultChoices =
                    result.getTestParticalChoiceMaxOccurs4().getTestParticalChoiceMaxOccursType4Choice();
            assertTrue(isEqual(resultChoices[0].getParm1(), testParticalChoiceMaxOccursType4Choice[0].getParm1()));
            assertTrue(isEqual(resultChoices[0].getParm2(), testParticalChoiceMaxOccursType4Choice[0].getParm2()));
            assertTrue(isEqual(resultChoices[0].getParm3(), testParticalChoiceMaxOccursType4Choice[0].getParm3()));

            assertTrue(isEqual(resultChoices[1].getParm1(), testParticalChoiceMaxOccursType4Choice[1].getParm1()));
            assertTrue(isEqual(resultChoices[1].getParm2(), testParticalChoiceMaxOccursType4Choice[1].getParm2()));
            assertTrue(isEqual(resultChoices[1].getParm3(), testParticalChoiceMaxOccursType4Choice[1].getParm3()));

            assertTrue(isEqual(resultChoices[2].getParm1(), testParticalChoiceMaxOccursType4Choice[2].getParm1()));
            assertTrue(isEqual(resultChoices[2].getParm2(), testParticalChoiceMaxOccursType4Choice[2].getParm2()));
            assertTrue(isEqual(resultChoices[2].getParm3(), testParticalChoiceMaxOccursType4Choice[2].getParm3()));

        } catch (XMLStreamException e) {
,
(startLine=495 endLine=516 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00839/modules/adb-codegen/test/org/apache/axis2/schema/particalmaxoccurs/ParticalMaxOccursTest.java)
       try {
            OMElement omElement = testParticalChoiceMaxOccurs5.getOMElement(TestParticalChoiceMaxOccurs5.MY_QNAME,
                   OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestParticalChoiceMaxOccurs5 result = TestParticalChoiceMaxOccurs5.Factory.parse(xmlReader);
            TestParticalChoiceMaxOccursType5Choice[] resultChoices =
                    result.getTestParticalChoiceMaxOccurs5().getTestParticalChoiceMaxOccursType5Choice();
            assertTrue(isEqual(resultChoices[0].getParm1(), testParticalChoiceMaxOccursType5Choice[0].getParm1()));
            assertTrue(isEqual(resultChoices[0].getParm2(), testParticalChoiceMaxOccursType5Choice[0].getParm2()));
            assertTrue(isEqual(resultChoices[0].getParm3(), testParticalChoiceMaxOccursType5Choice[0].getParm3()));

            assertTrue(isEqual(resultChoices[1].getParm1(), testParticalChoiceMaxOccursType5Choice[1].getParm1()));
            assertTrue(isEqual(resultChoices[1].getParm2(), testParticalChoiceMaxOccursType5Choice[1].getParm2()));
            assertTrue(isEqual(resultChoices[1].getParm3(), testParticalChoiceMaxOccursType5Choice[1].getParm3()));

            assertTrue(isEqual(resultChoices[2].getParm1(), testParticalChoiceMaxOccursType5Choice[2].getParm1()));
            assertTrue(isEqual(resultChoices[2].getParm2(), testParticalChoiceMaxOccursType5Choice[2].getParm2()));
            assertTrue(isEqual(resultChoices[2].getParm3(), testParticalChoiceMaxOccursType5Choice[2].getParm3()));

        } catch (XMLStreamException e) {
,
>
, <(startLine=57 endLine=74 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00971/modules/jaxws/test/org/apache/axis2/jaxws/sample/AddNumbersTests.java)
    public void testOneWay() {
        try {
            TestLogger.logger.debug("----------------------------------");
            TestLogger.logger.debug("test: " + getName());
            
            AddNumbersService service = new AddNumbersService();
            AddNumbersPortType proxy = service.getAddNumbersPort();
            
            BindingProvider bp = (BindingProvider) proxy;
            bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, 
                    axisEndpoint);
            proxy.oneWayInt(11);
            TestLogger.logger.debug("----------------------------------");
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }       
    }
,
(startLine=444 endLine=461 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00971/modules/jaxws/test/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
    public void testOneWay() {
        try {
            TestLogger.logger.debug("----------------------------------");
            TestLogger.logger.debug("test: " + getName());
            
            AddNumbersHandlerService service = new AddNumbersHandlerService();
            AddNumbersHandlerPortType proxy = service.getAddNumbersHandlerPort();
            
            BindingProvider bp = (BindingProvider) proxy;
            bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, 
                    axisEndpoint);
            proxy.oneWayInt(11);
            TestLogger.logger.debug("----------------------------------");
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }       
    }
,
>
, <(startLine=331 endLine=349 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00044/dev/scratch/om_xmlbeanch/src/com/sosnoski/xmlbench/BenchATM3.java)
        if (m_printSummary) {
            printSummary("  Document", info, m_printStream);
            m_printStream.println("  Original text size was " + text.length );
//				", output text size was " + output.length);
            if (serial != null) {
                m_printStream.println("  Serialized length was " +
                        serial.length);
            }
            info.reset();
            walk(docs[0][0], info);
            printSummary("  Modified document", info, m_printStream);
/*			if (s_firstTime) {
out.reset();
output(docs[0][0], out);
m_printStream.println(" Text of modified document:");
m_printStream.println(out.toString());
s_firstTime = false;
}	*/
        }
,
(startLine=400 endLine=418 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00044/dev/scratch/om_xmlbeanch/src/com/sosnoski/xmlbench/BenchDocBase.java)
		if (m_printSummary) {
			printSummary("  Document", info, m_printStream);
			m_printStream.println("  Original text size was " + text.length +
				", output text size was " + output.length);
			if (serial != null) {
				m_printStream.println("  Serialized length was " +
					serial.length);
			}
			info.reset();
			walk(docs[0][0], info);
			printSummary("  Modified document", info, m_printStream);
/*			if (s_firstTime) {
				out.reset();
				output(docs[0][0], out);
				m_printStream.println(" Text of modified document:");
				m_printStream.println(out.toString());
				s_firstTime = false;
			}	*/
		}
,
(startLine=331 endLine=349 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00044/dev/scratch/om_xmlbeanch/src/com/sosnoski/xmlbench/BenchATM2.java)
        if (m_printSummary) {
            printSummary("  Document", info, m_printStream);
            m_printStream.println("  Original text size was " + text.length );
//				", output text size was " + output.length);
            if (serial != null) {
                m_printStream.println("  Serialized length was " +
                        serial.length);
            }
            info.reset();
            walk(docs[0][0], info);
            printSummary("  Modified document", info, m_printStream);
/*			if (s_firstTime) {
out.reset();
output(docs[0][0], out);
m_printStream.println(" Text of modified document:");
m_printStream.println(out.toString());
s_firstTime = false;
}	*/
        }
,
(startLine=337 endLine=355 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00044/dev/scratch/om_xmlbeanch/src/com/sosnoski/xmlbench/BenchATM.java)
		if (m_printSummary) {
			printSummary("  Document", info, m_printStream);
			m_printStream.println("  Original text size was " + text.length );
//				", output text size was " + output.length);
			if (serial != null) {
				m_printStream.println("  Serialized length was " +
					serial.length);
			}
			info.reset();
			walk(docs[0][0], info);
			printSummary("  Modified document", info, m_printStream);
/*			if (s_firstTime) {
				out.reset();
				output(docs[0][0], out);
				m_printStream.println(" Text of modified document:");
				m_printStream.println(out.toString());
				s_firstTime = false;
			}	*/
		}
,
>
, <(startLine=79 endLine=95 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00373/modules/xml/src/org/apache/axis/om/impl/llom/util/XMLComparator.java)
    private void compareChildren(OMElement elementOne, OMElement elementTwo) throws XMLComparisonException {
        Iterator elementOneChildren = elementOne.getChildren();
        while (elementOneChildren.hasNext()) {
            OMNode omNode = (OMNode) elementOneChildren.next();
            if (omNode instanceof OMElement) {
                OMElement elementOneChild = (OMElement) omNode;
                if("Reference4".equals(elementOneChild.getLocalName())){
                    System.out.println("Reference4");
                }
                OMElement elementTwoChild = elementTwo.getFirstChildWithName(elementOneChild.getQName());
                if (elementTwoChild == null) {
                    throw new XMLComparisonException(" There is no " + elementOneChild.getLocalName() + " element under " + elementTwo.getLocalName());
                }
                compare(elementOneChild, elementTwoChild);
            }
        }
    }
,
(startLine=78 endLine=91 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00373/modules/xml/test/org/apache/axis/om/util/XMLComparator.java)
    private void compareChildren(OMElement elementOne, OMElement elementTwo) throws XMLComparisonException {
        Iterator elementOneChildren = elementOne.getChildren();
        while (elementOneChildren.hasNext()) {
            OMNode omNode = (OMNode) elementOneChildren.next();
            if(omNode instanceof OMElement){
                OMElement elementOneChild = (OMElement) omNode;
                OMElement elementTwoChild = elementTwo.getFirstChildWithName(elementOneChild.getQName());
                if(elementTwoChild == null){
                    throw new XMLComparisonException(" There is no " + elementOneChild.getLocalName() + " element under " + elementTwo.getLocalName());
                }
                compare(elementOneChild, elementTwoChild);
            }
        }
    }
,
>
, <(startLine=587 endLine=676 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00598/modules/kernel/src/org/apache/axis2/description/AxisService2OM.java)
        for (Iterator operations = axisService.getOperations(); operations.hasNext();) {
            AxisOperation axisOperation = (AxisOperation) operations.next();
            if (axisOperation.isControlOperation() || axisOperation.getName() == null) {
                continue;
            }
            String operationName = axisOperation.getName().getLocalPart();
            OMElement operation = fac.createOMElement(OPERATION_LOCAL_NAME,
                    wsdl);
            binding.addChild(operation);
            String soapAction = axisOperation.getInputAction();
            if (soapAction == null) {
                soapAction = "";
            }
            addExtensionElement(fac, operation, OPERATION_LOCAL_NAME,
                    SOAP_ACTION, soapAction, STYLE, style, soap);

            addPolicyAsExtElement(PolicyInclude.BINDING_OPERATION_POLICY,
                    axisOperation.getPolicyInclude(), operation, fac);
            addPolicyAsExtElement(PolicyInclude.AXIS_OPERATION_POLICY,
                    axisOperation.getPolicyInclude(), operation, fac);

            String MEP = axisOperation.getMessageExchangePattern();

            if (WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_ONLY.equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_OPTIONAL_OUT
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_OUT_OPTIONAL_IN
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_ROBUST_OUT_ONLY
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_ROBUST_IN_ONLY
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_OUT
                    .equals(MEP)) {
                AxisMessage inaxisMessage = axisOperation
                        .getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                if (inaxisMessage != null) {
                    operation.addAttribute(ATTRIBUTE_NAME, operationName, null);
                    OMElement input = fac.createOMElement(IN_PUT_LOCAL_NAME,
                            wsdl);
                    addExtensionElement(fac, input, SOAP_BODY, SOAP_USE, use,
                            null, targetNamespace, soap);
                    addPolicyAsExtElement(PolicyInclude.BINDING_INPUT_POLICY,
                            inaxisMessage.getPolicyInclude(), input, fac);
                    operation.addChild(input);
                    writeSoapHeaders(inaxisMessage, fac, input, soap);
                }
            }

            if (WSDLConstants.WSDL20_2004Constants.MEP_URI_OUT_ONLY.equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_OUT_OPTIONAL_IN
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_OPTIONAL_OUT
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_ROBUST_OUT_ONLY
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_OUT
                    .equals(MEP)) {
                AxisMessage outAxisMessage = axisOperation
                        .getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
                if (outAxisMessage != null) {
                    OMElement output = fac.createOMElement(OUT_PUT_LOCAL_NAME,
                            wsdl);
                    addExtensionElement(fac, output, SOAP_BODY, SOAP_USE, use,
                            null, targetNamespace, soap);
                    addPolicyAsExtElement(PolicyInclude.BINDING_OUTPUT_POLICY,
                            outAxisMessage.getPolicyInclude(), output, fac);
                    operation.addChild(output);
                    writeSoapHeaders(outAxisMessage, fac, output, soap);
                }
            }

            // generate fault Messages
            ArrayList faultyMessages = axisOperation.getFaultMessages();
            if (faultyMessages != null) {
                for (int i = 0; i < faultyMessages.size(); i++) {
                    AxisMessage faultyMessage = (AxisMessage) faultyMessages
                            .get(i);
                    OMElement fault = fac.createOMElement(FAULT_LOCAL_NAME,
                            wsdl);
                    addExtensionElement(fac, fault, SOAP_BODY, SOAP_USE, use,
                            null, targetNamespace, soap);
                    fault.addAttribute(ATTRIBUTE_NAME, faultyMessage.getName(),
                            null);
                    // TODO adding policies for fault messages
                    operation.addChild(fault);
                    writeSoapHeaders(faultyMessage, fac, fault, soap);
                }
            }
        }
,
(startLine=721 endLine=810 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00598/modules/kernel/src/org/apache/axis2/description/AxisService2OM.java)
        for (Iterator operations = axisService.getOperations(); operations.hasNext();) {
            AxisOperation axisOperation = (AxisOperation) operations.next();
            if (axisOperation.isControlOperation() || axisOperation.getName() == null) {
                continue;
            }
            String opeartionName = axisOperation.getName().getLocalPart();
            OMElement operation = fac.createOMElement(OPERATION_LOCAL_NAME,
                    wsdl);
            binding.addChild(operation);
            String soapAction = axisOperation.getInputAction();
            if (soapAction == null) {
                soapAction = "";
            }
            addExtensionElement(fac, operation, OPERATION_LOCAL_NAME,
                    SOAP_ACTION, soapAction, STYLE, style, soap12);

            addPolicyAsExtElement(PolicyInclude.BINDING_OPERATION_POLICY,
                    axisOperation.getPolicyInclude(), operation, fac);
            addPolicyAsExtElement(PolicyInclude.AXIS_OPERATION_POLICY,
                    axisOperation.getPolicyInclude(), operation, fac);

            String MEP = axisOperation.getMessageExchangePattern();

            if (WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_ONLY.equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_OPTIONAL_OUT
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_OUT_OPTIONAL_IN
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_ROBUST_OUT_ONLY
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_ROBUST_IN_ONLY
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_OUT
                    .equals(MEP)) {
                AxisMessage inaxisMessage = axisOperation
                        .getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                if (inaxisMessage != null) {
                    operation.addAttribute(ATTRIBUTE_NAME, opeartionName, null);
                    OMElement input = fac.createOMElement(IN_PUT_LOCAL_NAME,
                            wsdl);
                    addExtensionElement(fac, input, SOAP_BODY, SOAP_USE, use,
                            null, targetNamespace, soap12);
                    addPolicyAsExtElement(PolicyInclude.BINDING_INPUT_POLICY,
                            inaxisMessage.getPolicyInclude(), input, fac);
                    operation.addChild(input);
                    writeSoapHeaders(inaxisMessage, fac, input, soap12);
                }
            }

            if (WSDLConstants.WSDL20_2004Constants.MEP_URI_OUT_ONLY.equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_OUT_OPTIONAL_IN
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_OPTIONAL_OUT
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_ROBUST_OUT_ONLY
                    .equals(MEP)
                    || WSDLConstants.WSDL20_2004Constants.MEP_URI_IN_OUT
                    .equals(MEP)) {
                AxisMessage outAxisMessage = axisOperation
                        .getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
                if (outAxisMessage != null) {
                    OMElement output = fac.createOMElement(OUT_PUT_LOCAL_NAME,
                            wsdl);
                    addExtensionElement(fac, output, SOAP_BODY, SOAP_USE, use,
                            null, targetNamespace, soap12);
                    addPolicyAsExtElement(PolicyInclude.BINDING_OUTPUT_POLICY,
                            outAxisMessage.getPolicyInclude(), output, fac);
                    operation.addChild(output);
                    writeSoapHeaders(outAxisMessage, fac, output, soap12);
                }
            }

            // generate fault Messages
            ArrayList faultyMessages = axisOperation.getFaultMessages();
            if (faultyMessages != null) {
                for (int i = 0; i < faultyMessages.size(); i++) {
                    AxisMessage faultyMessage = (AxisMessage) faultyMessages
                            .get(i);
                    OMElement fault = fac.createOMElement(FAULT_LOCAL_NAME,
                            wsdl);
                    addExtensionElement(fac, fault, FAULT_LOCAL_NAME, SOAP_USE, use,
                                        ATTRIBUTE_NAME, faultyMessage.getName(), soap12);
                    fault.addAttribute(ATTRIBUTE_NAME, faultyMessage.getName(),
                            null);
                    // add policies for fault messages
                    operation.addChild(fault);
                    writeSoapHeaders(faultyMessage, fac, fault, soap12);
                }
            }
        }
,
>
, <(startLine=180 endLine=207 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01267/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/BareTests.java)
    public void testHeader() throws Exception {
        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());


        BareDocLitService service = new BareDocLitService();
        DocLitBarePortType proxy = service.getBareDocLitPort();
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE);
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_URI_PROPERTY, "headerTest");
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ENDPOINT_URL);

        String request = "Hello World";
        String response = proxy.headerTest(1, request);
        assertTrue(response != null);
        assertTrue(response.indexOf(request) > 0);
        
        // Try the test again
        request = "Hello World";
        response = proxy.headerTest(1,request);
        assertTrue(response != null);
        assertTrue(response.indexOf(request) > 0);

        TestLogger.logger.debug("------------------------------");

    }
,
(startLine=209 endLine=238 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01267/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/BareTests.java)
    public void testHeaderWithNull() throws Exception {
        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());


        BareDocLitService service = new BareDocLitService();
        DocLitBarePortType proxy = service.getBareDocLitPort();
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE);
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_URI_PROPERTY, "headerTest");
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ENDPOINT_URL);
        
        // Don't write a header element when the @WebParam header parameter is null.
        p.getRequestContext().put(org.apache.axis2.jaxws.Constants.WRITE_HEADER_ELEMENT_IF_NULL, Boolean.FALSE);

        String request = null;  // No header
        String response = proxy.headerTest(1, request);
        assertTrue(response != null);
        assertTrue(response.indexOf("No Header") > 0);

        // Try the test again
        request = null;
        response = proxy.headerTest(1,request);
        assertTrue(response != null);
        assertTrue(response.indexOf("No Header") > 0);

        TestLogger.logger.debug("------------------------------");
    }
,
>
, <(startLine=347 endLine=370 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01163/modules/corba/src/org/apache/axis2/corba/deployer/CorbaDeployer.java)
    protected MessageReceiver loadMessageReceiver(ClassLoader loader, String className) throws DeploymentException {
        MessageReceiver receiver = null;
        try {
            Class messageReceiver;
            if ((className != null) && !"".equals(className)) {
                messageReceiver = Loader.loadClass(loader, className);
                receiver = (MessageReceiver) messageReceiver.newInstance();
            }
        } catch (ClassNotFoundException e) {
            throw new DeploymentException(org.apache.axis2.i18n.Messages.getMessage(
                    DeploymentErrorMsgs.ERROR_IN_LOADING_MESSAGE_RECEIVER,
                    "ClassNotFoundException", className), e);
        } catch (IllegalAccessException e) {
            throw new DeploymentException(org.apache.axis2.i18n.Messages.getMessage(
                    DeploymentErrorMsgs.ERROR_IN_LOADING_MESSAGE_RECEIVER,
                    "IllegalAccessException", className), e);
        } catch (InstantiationException e) {
            throw new DeploymentException(org.apache.axis2.i18n.Messages.getMessage(
                    DeploymentErrorMsgs.ERROR_IN_LOADING_MESSAGE_RECEIVER,
                    "InstantiationException", className), e);
        }

        return receiver;
    }
,
(startLine=181 endLine=209 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01163/modules/kernel/src/org/apache/axis2/deployment/DescriptionBuilder.java)
                                                  OMElement element) throws DeploymentException {
        OMAttribute receiverName = element.getAttribute(new QName(
                TAG_CLASS_NAME));
        String className = receiverName.getAttributeValue();
        MessageReceiver receiver = null;

        try {
            Class messageReceiver;

            if ((className != null) && !"".equals(className)) {
                messageReceiver = Loader.loadClass(loader, className);
                receiver = (MessageReceiver) messageReceiver.newInstance();
            }
        } catch (ClassNotFoundException e) {
            throw new DeploymentException(Messages.getMessage(
                    DeploymentErrorMsgs.ERROR_IN_LOADING_MESSAGE_RECEIVER,
                    "ClassNotFoundException", className), e);
        } catch (IllegalAccessException e) {
            throw new DeploymentException(Messages.getMessage(
                    DeploymentErrorMsgs.ERROR_IN_LOADING_MESSAGE_RECEIVER,
                    "IllegalAccessException", className), e);
        } catch (InstantiationException e) {
            throw new DeploymentException(Messages.getMessage(
                    DeploymentErrorMsgs.ERROR_IN_LOADING_MESSAGE_RECEIVER,
                    "InstantiationException", className), e);
        }

        return receiver;
    }
,
>
, <(startLine=38 endLine=47 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00616/modules/kernel/src/org/apache/axis2/util/threadpool/DefaultThreadFactory.java)
    public Thread newThread(final Runnable runnable) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(this.namePrefix);
        buffer.append('-');
        buffer.append(this.count.getAndIncrement());
        Thread t = new Thread(group, runnable, buffer.toString(), 0);
        t.setDaemon(false);
        t.setPriority(Thread.NORM_PRIORITY);
        return t;
    }
,
(startLine=47 endLine=56 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00616/modules/kernel/src/org/apache/axis2/transport/http/server/DefaultThreadFactory.java)
    public Thread newThread(final Runnable runnable) {
    	StringBuffer buffer = new StringBuffer();
    	buffer.append(this.namePrefix);
    	buffer.append('-');
    	buffer.append(this.count.getAndIncrement());
        Thread t = new Thread(group, runnable, buffer.toString(), 0);
        t.setDaemon(false);
        t.setPriority(Thread.NORM_PRIORITY);
        return t;
    }
,
>
, <(startLine=82 endLine=91 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00163/dev/scratch/prototype2/src/test/org/apache/wsdl/InterfaceTest.java)
        for(int i= 0; i< interfaceCounter; i++){
            intfc = new WSDLInterfaceImpl();
            for(int j=0; j< operationCounter; j++){
                op = new WSDLOperationImpl();
                op.setName(new QName(WSDLConstants.WSDL1_1_NAMESPACE, "operation"+j));                
                intfc.setOperation(op);
            }
            intfc.setName(new QName(WSDLConstants.WSDL2_0_NAMESPACE, "Interface"+i));
            array[i] = intfc;
        }
,
(startLine=91 endLine=101 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00163/dev/scratch/wsdl_pt_chatura/test/org/apache/wsdl/wom/InterfaceTest.java)
        for(int i= 0; i< interfaceCounter; i++){
            intfc = new WSDLInterfaceImpl();
            for(int j=0; j< operationCounter; j++){
                op = new WSDLOperationImpl();
                op.setName(new QName(WSDLConstants.WSDL2_0_NAMESPACE,"operation"+j));
                op.setTargetnemespace(new URI(WSDLConstants.WSDL2_0_NAMESPACE));
                intfc.setOperation(op);
            }
            intfc.setName(new QName(WSDLConstants.WSDL2_0_NAMESPACE, "Interface"+i));
            array[i] = intfc;
        }
,
>
, <(startLine=33 endLine=137 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00513/modules/integration/src/org/apache/axis2/interopt/whitemesa/round2/util/GroupcStructArrayUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.createSOAPEnvelope();
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC"); //xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns"); //xmlns:m0="http://soapinterop.org/echoheader/
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createText("string"));
        // header.addChild(headerChild);
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoStructArray", "http://soapinterop.org/", null);
        SOAPBody body = omfactory.createSOAPBody(reqEnv);
        body.addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        OMElement part = omfactory.createOMElement("inputStructArray", "", null);
        part.addAttribute("xsi:type", "SOAP-ENC:Array", null);
        part.addAttribute("SOAP-ENC:arrayType", "s:SOAPStruct[3]", null);

        OMElement item0 = omfactory.createOMElement("item0", null);

        OMElement value00 = omfactory.createOMElement("varString", "", null);
        value00.addAttribute("xsi:type", "xsd:string", null);
        value00.addChild(omfactory.createText("strss fdfing1"));
        OMElement value01 = omfactory.createOMElement("varInt", "", null);
        value01.addAttribute("xsi:type", "xsd:int", null);
        value01.addChild(omfactory.createText("25"));
        OMElement value02 = omfactory.createOMElement("varFloat", "", null);
        value02.addAttribute("xsi:type", "xsd:float", null);
        value02.addChild(omfactory.createText("25.23"));

        OMElement item1 = omfactory.createOMElement("item0", null);

        OMElement value10 = omfactory.createOMElement("varString", "", null);
        value10.addAttribute("xsi:type", "xsd:string", null);
        value10.addChild(omfactory.createText("strss fdfing1"));
        OMElement value11 = omfactory.createOMElement("varInt", "", null);
        value11.addAttribute("xsi:type", "xsd:int", null);
        value11.addChild(omfactory.createText("25"));
        OMElement value12 = omfactory.createOMElement("varFloat", "", null);
        value12.addAttribute("xsi:type", "xsd:float", null);
        value12.addChild(omfactory.createText("25.23"));

        OMElement item2 = omfactory.createOMElement("item0", null);

        OMElement value20 = omfactory.createOMElement("varString", "", null);
        value20.addAttribute("xsi:type", "xsd:string", null);
        value20.addChild(omfactory.createText("strss fdfing1"));
        OMElement value21 = omfactory.createOMElement("varInt", "", null);
        value21.addAttribute("xsi:type", "xsd:int", null);
        value21.addChild(omfactory.createText("25"));
        OMElement value22 = omfactory.createOMElement("varFloat", "", null);
        value22.addAttribute("xsi:type", "xsd:float", null);
        value22.addChild(omfactory.createText("25.23"));

        item0.addChild(value00);
        item0.addChild(value01);
        item0.addChild(value02);

        item1.addChild(value10);
        item1.addChild(value11);
        item1.addChild(value12);

        item2.addChild(value20);
        item2.addChild(value21);
        item2.addChild(value22);

        part.addChild(item0);
        part.addChild(item1);
        part.addChild(item2);

        operation.addChild(part);

        //reqEnv.getBody().addChild(method);
        return reqEnv;

    }
,
(startLine=18 endLine=124 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00513/modules/integration/src/org/apache/axis2/interopt/whitemesa/round2/util/soap12/WMRound2Soap12GroupcStructArrayUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.createSOAPEnvelope();
        //reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC"); //xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");
        reqEnv.declareNamespace("http://soapinterop.org", "m1");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/wsdl/soap12/", "soap12");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns"); //xmlns:m0="http://soapinterop.org/echoheader/
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createText("string"));
        // header.addChild(headerChild);
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoStructArray", "http://soapinterop.org/", null);
        SOAPBody body = omfactory.createSOAPBody(reqEnv);
        body.addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        OMElement part = omfactory.createOMElement("inputStructArray", "", null);
        part.addAttribute("xsi:type", "SOAP-ENC:Array", null);
        part.addAttribute("SOAP-ENC:arrayType", "s:SOAPStruct[3]", null);

        OMElement item0 = omfactory.createOMElement("item0", null);

        OMElement value00 = omfactory.createOMElement("varString", "", null);
        value00.addAttribute("xsi:type", "xsd:string", null);
        value00.addChild(omfactory.createText("strss fdfing1"));
        OMElement value01 = omfactory.createOMElement("varInt", "", null);
        value01.addAttribute("xsi:type", "xsd:int", null);
        value01.addChild(omfactory.createText("25"));
        OMElement value02 = omfactory.createOMElement("varFloat", "", null);
        value02.addAttribute("xsi:type", "xsd:float", null);
        value02.addChild(omfactory.createText("25.23"));

        OMElement item1 = omfactory.createOMElement("item0", null);

        OMElement value10 = omfactory.createOMElement("varString", "", null);
        value10.addAttribute("xsi:type", "xsd:string", null);
        value10.addChild(omfactory.createText("strss fdfing1"));
        OMElement value11 = omfactory.createOMElement("varInt", "", null);
        value11.addAttribute("xsi:type", "xsd:int", null);
        value11.addChild(omfactory.createText("25"));
        OMElement value12 = omfactory.createOMElement("varFloat", "", null);
        value12.addAttribute("xsi:type", "xsd:float", null);
        value12.addChild(omfactory.createText("25.23"));

        OMElement item2 = omfactory.createOMElement("item0", null);

        OMElement value20 = omfactory.createOMElement("varString", "", null);
        value20.addAttribute("xsi:type", "xsd:string", null);
        value20.addChild(omfactory.createText("strss fdfing1"));
        OMElement value21 = omfactory.createOMElement("varInt", "", null);
        value21.addAttribute("xsi:type", "xsd:int", null);
        value21.addChild(omfactory.createText("25"));
        OMElement value22 = omfactory.createOMElement("varFloat", "", null);
        value22.addAttribute("xsi:type", "xsd:float", null);
        value22.addChild(omfactory.createText("25.23"));

        item0.addChild(value00);
        item0.addChild(value01);
        item0.addChild(value02);

        item1.addChild(value10);
        item1.addChild(value11);
        item1.addChild(value12);

        item2.addChild(value20);
        item2.addChild(value21);
        item2.addChild(value22);

        part.addChild(item0);
        part.addChild(item1);
        part.addChild(item2);

        operation.addChild(part);

        //reqEnv.getBody().addChild(method);
        return reqEnv;

    }
,
>
, <(startLine=110 endLine=119 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00171/dev/scratch/prototype2/src/samples/general/sample2/src/samples/userguide/sample2/client/InteropTest_Stub.java)
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child.getType() == OMNode.ELEMENT_NODE && "Fault".equalsIgnoreCase(((OMElement)child).getLocalName())){
				throw new AxisFault("Fault in server side");
			}

			if(child.getType() == OMNode.ELEMENT_NODE && "echoStringResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}		
,
(startLine=140 endLine=149 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00171/dev/scratch/prototype2/src/samples/general/sample2/src/samples/userguide/sample2/client/InteropTest_Stub.java)
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child.getType() == OMNode.ELEMENT_NODE && "Fault".equalsIgnoreCase(((OMElement)child).getLocalName())){
				throw new AxisFault("Fault in server side");
			}
			
			if(child.getType() == OMNode.ELEMENT_NODE && "echoIntResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}
,
(startLine=105 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00171/dev/scratch/prototype2/src/samples/general/sample4/src/samples/userguide/sample1/client/InteropTest_Stub.java)
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child.getType() == OMNode.ELEMENT_NODE && "Fault".equalsIgnoreCase(((OMElement)child).getLocalName())){
				throw new AxisFault("Fault in server side");
			}
			if(child.getType() == OMNode.ELEMENT_NODE && "echoStringResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}		
,
(startLine=134 endLine=142 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00171/dev/scratch/prototype2/src/samples/general/sample4/src/samples/userguide/sample1/client/InteropTest_Stub.java)
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child.getType() == OMNode.ELEMENT_NODE && "Fault".equalsIgnoreCase(((OMElement)child).getLocalName())){
				throw new AxisFault("Fault in server side");
			}
			if(child.getType() == OMNode.ELEMENT_NODE && "echoIntResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}
,
(startLine=118 endLine=126 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00171/dev/scratch/prototype2/src/samples/general/sample3/src/samples/userguide/sample3/client/InteropTest_Stub.java)
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child.getType() == OMNode.ELEMENT_NODE && "Fault".equalsIgnoreCase(((OMElement)child).getLocalName())){
				throw new AxisFault("Fault in server side");
			}
			if(child.getType() == OMNode.ELEMENT_NODE && "echoStringResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}		
,
(startLine=147 endLine=155 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00171/dev/scratch/prototype2/src/samples/general/sample3/src/samples/userguide/sample3/client/InteropTest_Stub.java)
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child.getType() == OMNode.ELEMENT_NODE && "Fault".equalsIgnoreCase(((OMElement)child).getLocalName())){
				throw new AxisFault("Fault in server side");
			}
			if(child.getType() == OMNode.ELEMENT_NODE && "echoIntResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}
,
>
, <(startLine=36 endLine=48 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00951/modules/samples/yahoorestsearch/src/sample/yahooservices/RESTSearch/RESTSearchClient.java)
    public static void main(String[] args) {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        width = screenSize.width;
        height = screenSize.height;
        RESTSearchClient form = new RESTSearchClient("Axis2 REST Search Client");

        int left = (width) / 2;
        int top = (height) / 2;
        form.setLocation(left, top);
        form.setSize(width, height);
        form.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        form.setVisible(true);
    }
,
(startLine=36 endLine=49 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00951/modules/samples/yahoojsonsearch/src/sample/yahooservices/JSONSearch/JSONSearchClient.java)
    public static void main(String[] args) {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        width = screenSize.width;
        height = screenSize.height;
        JSONSearchClient form = new JSONSearchClient("Axis2 Yahoo-JSON Search Client");


        int left = (width) / 2;
        int top = (height) / 2;
        form.setLocation(left, top);
        form.setSize(width, height);
        form.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        form.setVisible(true);
    }
,
>
, <(startLine=128 endLine=144 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00457/modules/core/src/org/apache/axis2/deployment/repository/util/ArchiveReader.java)
        try {
            zin = new ZipInputStream(new FileInputStream(strArchive));
            ZipEntry entry;
            while ((entry = zin.getNextEntry()) != null) {
                if (entry.getName().equals(SERVICEXML)) {
                    foundServiceXML = true;
                    DeploymentParser schme = new DeploymentParser(zin, engine);
                    schme.parseServiceXML(service);
                    break;
                }
            }
            zin.close();
            if (!foundServiceXML) {
                throw new DeploymentException(Messages.getMessage(DeploymentErrorMsgs.SERVICE_XML_NOT_FOUND));
//                "service.xml not found");
            }
        } catch (Exception e) {
,
(startLine=156 endLine=174 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00457/modules/core/src/org/apache/axis2/deployment/repository/util/ArchiveReader.java)
        try {
            zin = new ZipInputStream(new FileInputStream(strArchive));
            ZipEntry entry;
            while ((entry = zin.getNextEntry()) != null) {
                if (entry.getName().equals(MODULEXML)) {
                    foundmoduleXML = true;
                    DeploymentParser schme = new DeploymentParser(zin, engine);
                    schme.procesModuleXML(module);
                    break;
                }
            }
            //  zin.closeEntry();
            zin.close();
            if (!foundmoduleXML) {
                throw new DeploymentException(Messages.getMessage(DeploymentErrorMsgs.MODULEXML_NOT_FOUND_FOR_THE_MODULE, strArchive));
//                        "module.xml not found  for the module :  " +
//                        strArchive);
            }
        } catch (Exception e) {
,
>
, <(startLine=285 endLine=298 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01269/modules/jaxws/test/org/apache/axis2/jaxws/handler/context/LogicalMessageContextTests.java)
    private String _getStringFromSource(Source source) throws Exception {
        TransformerFactory factory = TransformerFactory.newInstance();
        Transformer trans = factory.newTransformer();
        
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        StreamResult result = new StreamResult(baos);
        
        trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        trans.transform(source, result);
        
        String content = new String(baos.toByteArray());
        
        return content;
    }
,
(startLine=189 endLine=206 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01269/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersClientLogicalHandler.java)
    private static String getStringFromSourcePayload(Source payload) {
        try {

            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer trans = factory.newTransformer();

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            StreamResult result = new StreamResult(baos);

            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            trans.transform(payload, result);

            return new String(baos.toByteArray());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }
,
(startLine=63 endLine=80 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01269/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersClientLogicalHandler3.java)
    private static String getStringFromSourcePayload(Source payload) {
        try {

            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer trans = factory.newTransformer();

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            StreamResult result = new StreamResult(baos);

            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            trans.transform(payload, result);

            return new String(baos.toByteArray());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }
,
(startLine=133 endLine=149 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01269/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersLogicalHandler2.java)
    private static String getStringFromSourcePayload(Source payload) {
        try {

            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer trans = factory.newTransformer();

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            StreamResult result = new StreamResult(baos);

            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            trans.transform(payload, result);

            return new String(baos.toByteArray());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
,
(startLine=85 endLine=101 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01269/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersClientLogicalHandler2.java)
    private static String getStringFromSourcePayload(Source payload) {
        try {

            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer trans = factory.newTransformer();

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            StreamResult result = new StreamResult(baos);

            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            trans.transform(payload, result);

            return new String(baos.toByteArray());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
,
(startLine=166 endLine=185 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01269/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/headershandler/HeadersServerLogicalHandler.java)
    private static String getStringFromSourcePayload(Source payload) {
        try {

            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer trans = factory.newTransformer();

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            StreamResult result = new StreamResult(baos);

            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            trans.transform(payload, result);

            HandlerTracker tracker = new HandlerTracker(HeadersServerLogicalHandler.class.getSimpleName());
            
            return new String(baos.toByteArray());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }
,
(startLine=191 endLine=208 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01269/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/headershandler/HeadersClientLogicalHandler.java)
    private static String getStringFromSourcePayload(Source payload) {
        try {

            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer trans = factory.newTransformer();

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            StreamResult result = new StreamResult(baos);

            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            trans.transform(payload, result);

            return new String(baos.toByteArray());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }
,
>
, <(startLine=797 endLine=823 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00214/modules/deployment/src/java/org/apache/axis/deployment/DeploymentParser.java)
        try {
            while (!END_INFLOW) {
                pullparser.next();
                int eventType = pullparser.getEventType();
                if (eventType == XMLStreamConstants.END_DOCUMENT) {
// document end tag met , break the loop
// but the doc end tag wont meet here :)
                    END_INFLOW = true;
                } else if (eventType == XMLStreamConstants.START_ELEMENT) {
                    String tagnae = pullparser.getLocalName();
                    if (HANDERST.equals(tagnae)) {
                        HandlerMetadata handler = processHandler();
                        inFlow.addHandler(handler);
                    } else {
                        throw new DeploymentException("parser Exception : un supported element" + tagnae);
                    }
                } else if (eventType == XMLStreamConstants.END_ELEMENT) {
                    String endtagname = pullparser.getLocalName();
                    if (INFLOWST.equals(endtagname)) {
                        END_INFLOW = true;
                        break;
                    }
                } else if (eventType == XMLStreamConstants.CHARACTERS) {
                    text += pullparser.getText();
                }
            }
        } catch (XMLStreamException e) {
,
(startLine=836 endLine=861 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00214/modules/deployment/src/java/org/apache/axis/deployment/DeploymentParser.java)
        try {
            while (!END_OUTFLOW) {
                int eventType = pullparser.next();
                if (eventType == XMLStreamConstants.END_DOCUMENT) {
// document end tag met , break the loop
// but the doc end tag wont meet here :)
                    END_OUTFLOW = true;
                } else if (eventType == XMLStreamConstants.START_ELEMENT) {
                    String tagnae = pullparser.getLocalName();
                    if (HANDERST.equals(tagnae)) {
                        HandlerMetadata handler = processHandler();
                        outFlow.addHandler(handler);
                    } else {
                        throw new DeploymentException("parser Exception : un supported element" + tagnae);
                    }
                } else if (eventType == XMLStreamConstants.END_ELEMENT) {
                    String endtagname = pullparser.getLocalName();
                    if (OUTFLOWST.equals(endtagname)) {
                        END_OUTFLOW = true;
                        break;
                    }
                } else if (eventType == XMLStreamConstants.CHARACTERS) {
                    text += pullparser.getText();
                }
            }
        } catch (XMLStreamException e) {
,
(startLine=875 endLine=900 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00214/modules/deployment/src/java/org/apache/axis/deployment/DeploymentParser.java)
        try {
            while (!END_FAULTFLOW) {
                int eventType = pullparser.next();
                if (eventType == XMLStreamConstants.END_DOCUMENT) {
// document end tag met , break the loop
// but the doc end tag wont meet here :)
                    END_FAULTFLOW = true;
                } else if (eventType == XMLStreamConstants.START_ELEMENT) {
                    String tagnae = pullparser.getLocalName();
                    if (HANDERST.equals(tagnae)) {
                        HandlerMetadata handler = processHandler();
                        faultFlow.addHandler(handler);
                    } else {
                        throw new DeploymentException("parser Exception : un supported element" + tagnae);
                    }
                } else if (eventType == XMLStreamConstants.END_ELEMENT) {
                    String endtagname = pullparser.getLocalName();
                    if (FAILTFLOWST.equals(endtagname)) {
                        END_FAULTFLOW = true;
                        break;
                    }
                } else if (eventType == XMLStreamConstants.CHARACTERS) {
                    text += pullparser.getText();
                }
            }
        } catch (XMLStreamException e) {
,
>
, <(startLine=181 endLine=195 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01266/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointCallback.java)
        if (response != null) {
            // Invoke the outbound response handlers.
            // We can be sure we need to invoke any handlers because this
            // cannot be a one-way flow
            response.setMEPContext(request.getMEPContext());
            HandlerInvocationContext hiContext = EndpointController.buildHandlerInvocationContext(
                                                                               request, 
                                                                               eic.getHandlers(), 
                                                                               HandlerChainProcessor.MEP.RESPONSE,
                                                                               false);
            HandlerInvokerFactory hiFactory = (HandlerInvokerFactory) 
                FactoryRegistry.getFactory(HandlerInvokerFactory.class);
            HandlerInvoker handlerInvoker = hiFactory.createHandlerInvoker(response);
            handlerInvoker.invokeOutboundHandlers(hiContext);
        } 
,
(startLine=383 endLine=394 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01266/modules/jaxws/src/org/apache/axis2/jaxws/server/EndpointController.java)
               if (!isOneWay(request.getAxisMessageContext())) {
                    response.setMEPContext(request.getMEPContext());
                    
                    HandlerInvocationContext hiContext = buildHandlerInvocationContext(request, eic.getHandlers(), 
                                                                                       HandlerChainProcessor.MEP.RESPONSE,
                                                                                       false);
                    HandlerInvokerFactory hiFactory = (HandlerInvokerFactory) 
                        FactoryRegistry.getFactory(HandlerInvokerFactory.class);
                    HandlerInvoker handlerInvoker = hiFactory.createHandlerInvoker(response);
                    handlerInvoker.invokeOutboundHandlers(hiContext);
                    
               }
,
>
, <(startLine=793 endLine=817 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01068/modules/kernel/src/org/apache/axis2/deployment/util/Utils.java)
	public static List findLibJars(URL url) {
		ArrayList embedded_jars = new ArrayList();
		try {
			ZipInputStream zin = new ZipInputStream(url.openStream());
			ZipEntry entry;
			String entryName = "";
			while ((entry = zin.getNextEntry()) != null) {
				entryName = entry.getName();
				/**
				 * if the entry name start with /lib and ends with .jar add it
				 * to the the arraylist
				 */
				if (entryName != null
						&& (entryName.startsWith("lib/") || entryName
								.startsWith("Lib/"))
						&& entryName.endsWith(".jar")) {
					embedded_jars.add(entryName);
				}
			}
			zin.close();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return embedded_jars;
	}
,
(startLine=61 endLine=89 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01068/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/PluginClassLoader.java)
    private void findLibJars() {
        /**
         * though the URL array can contains one or more urls , I have only consider the
         * first one , that is this classLoader is only for Axis2 stuff and the classloader
         * is created by Deployment , so there wont be any chance to have more the one urls for
         * the URL array list
         */
        File file = new File(urls[0].getFile());
        try {
            ZipInputStream zin = new ZipInputStream(new FileInputStream(file));
            ZipEntry entry;
            String entryName = "";
            while ((entry = zin.getNextEntry()) != null) {
                entryName = entry.getName();
                /**
                 * id the entry name start with /lib and end with .jar
                 * then those entry name will be added to the arraylist
                 */
                if (entryName != null && (entryName.startsWith("lib/") ||
                        entryName.startsWith("Lib/")) &&
                        entryName.endsWith(".jar")) {
                    lib_jars_list.add(entryName);
                }
            }
            zin.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
,
>
, <(startLine=46 endLine=54 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00396/modules/core/test/org/apache/axis/transport/http/HTTPTransportUtilTest.java)
    public void testOptimizedEnvelope(){
        SOAPEnvelope soapEnvelope = factory.getDefaultEnvelope();

        OMElement element = factory.createOMElement(new QName("MyFirstBodyElement"), soapEnvelope.getBody());
        OMElement element11 = factory.createOMElement(new QName("MyFirstBodyElement"), element);
        OMText optimizedText = factory.createText("Hi", "text/plain", true);
        element11.addChild(optimizedText);
        assertTrue("optmization check has not performed correctly in SOAPEnvelope", httpTransportUtils.checkEnvelopeForOptimise(soapEnvelope));
    }
,
(startLine=56 endLine=64 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00396/modules/core/test/org/apache/axis/transport/http/HTTPTransportUtilTest.java)
    public void testNonOptimizedEnvelope(){
        SOAPEnvelope soapEnvelope = factory.getDefaultEnvelope();

        OMElement element = factory.createOMElement(new QName("MyFirstBodyElement"), soapEnvelope.getBody());
        OMElement element11 = factory.createOMElement(new QName("MyFirstBodyElement"), element);
        OMText optimizedText = factory.createText("Hi", "text/plain", false);
        element11.addChild(optimizedText);
        assertFalse("optmization check has not performed correctly in SOAPEnvelope", httpTransportUtils.checkEnvelopeForOptimise(soapEnvelope));
    }
,
>
, <(startLine=249 endLine=263 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/metadata/src/org/apache/axis2/jaxws/util/XMLRootElementUtil.java)
                    fieldName.equalsIgnoreCase(pd.getName())   ) {
                    // Get the xmlElement name for this field
                    String xmlName =getXmlElementName(field.getDeclaringClass(), field);
                    found = true;
                    if (log.isDebugEnabled()) {
                        log.debug("    Found field " + field.getName() + " which has xmlname=" + xmlName);
                    }
                    if (map.get(xmlName) != null) {
                        if (log.isDebugEnabled()) {
                            log.debug("    ALERT: property " + map.get(xmlName).getName() + " already has this same xmlName..this may cause problems.");
                        }
                    }
                    map.put(xmlName, pd);
                    break;
                }
,
(startLine=269 endLine=283 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/metadata/src/org/apache/axis2/jaxws/util/XMLRootElementUtil.java)
                            fieldName.equalsIgnoreCase(pd.getName())) {
                        // Get the xmlElement name for this field
                        String xmlName =getXmlElementName(field.getDeclaringClass(), field);
                        found = true;
                        if (log.isDebugEnabled()) {
                            log.debug("    Found field " + field.getName() + " which has xmlname=" + xmlName);
                        }
                        if (map.get(xmlName) != null) {
                            if (log.isDebugEnabled()) {
                                log.debug("    ALERT: property " + map.get(xmlName).getName() + " already has this same xmlName..this may cause problems.");
                            }
                        }
                        map.put(xmlName, pd);
                        break;
                    }
,
(startLine=288 endLine=299 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/metadata/src/org/apache/axis2/jaxws/util/XMLRootElementUtil.java)
            if (!found) {
                String xmlName = pd.getName();
                if (log.isDebugEnabled()) {
                    log.debug("    A matching field was not found.  Defaulting xmlname to " + xmlName);
                }
                if (map.get(xmlName) != null) {
                    if (log.isDebugEnabled()) {
                        log.debug("    ALERT: property " + map.get(xmlName).getName() + " already has this same xmlName..this may cause problems.");
                    }
                }
                map.put(xmlName, pd);
            }
,
>
, <(startLine=251 endLine=262 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00868/modules/jaxws/src/org/apache/axis2/jaxws/utility/PropertyDescriptorPlus.java)
    private static Collection asCollection(Object propValue, Class destType) {
        // TODO Missing function
        // Convert the object into an equivalent object that is a collection
        if (ConvertUtils.isConvertable(propValue, destType)) {
            return (Collection)ConvertUtils.convert(propValue, destType);
        } else {
            String objectClass = (propValue == null) ? "null" : propValue.getClass().getName();
            throw ExceptionFactory.makeWebServiceException(
                    Messages.getMessage("convertProblem", objectClass, destType.getName()));

        }
    }
,
(startLine=269 endLine=278 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00868/modules/jaxws/src/org/apache/axis2/jaxws/utility/PropertyDescriptorPlus.java)
    private static Object asArray(Object propValue, Class destType) {
        if (ConvertUtils.isConvertable(propValue, destType)) {
            return ConvertUtils.convert(propValue, destType);
        } else {
            String objectClass = (propValue == null) ? "null" : propValue.getClass().getName();
            throw ExceptionFactory.makeWebServiceException(
                    Messages.getMessage("convertProblem", objectClass, destType.getName()));

        }
    }
,
>
, <(startLine=241 endLine=291 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01378/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/FaultyWebServiceTests.java)
    throws Exception {

        String host = "this.is.a.bad.endpoint.terrible.in.fact";
        String badEndpoint = "http://" + host;

        TestLogger.logger.debug("------------------------------");

        FaultyWebServiceService service = new FaultyWebServiceService();
        FaultyWebServicePortType proxy = service.getFaultyWebServicePort();
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
                                  badEndpoint);

        FaultyAsyncHandler callback = new FaultyAsyncHandler();
        Future<?> future = proxy.faultyWebServiceAsync(1, callback);

        await(future);

        Exception e = callback.getException();

        // Section 4.3.3 states that the top level Exception should be
        // an ExecutionException, with a WebServiceException underneath.
        assertNotNull("The exception was null.", e);
        assertTrue("The thrown exception should be an ExecutionException.", e
                   .getClass().equals(ExecutionException.class));
        assertTrue(
                   "The expected fault type under the ExecutionException should be a "
                   + "SOAPFaultException.  Found type: "
                   + e.getCause().getClass(), e.getCause().getClass()
                   .isAssignableFrom(SOAPFaultException.class));
        
        // Repeat to verify behavior
        callback = new FaultyAsyncHandler();
        future = proxy.faultyWebServiceAsync(1, callback);

        await(future);

        e = callback.getException();

        // Section 4.3.3 states that the top level Exception should be
        // an ExecutionException, with a WebServiceException underneath.
        assertNotNull("The exception was null.", e);
        assertTrue("The thrown exception should be an ExecutionException.", e
                   .getClass().equals(ExecutionException.class));
        assertTrue(
                   "The expected fault type under the ExecutionException should be a "
                   + "SOAPFaultException.  Found type: "
                   + e.getCause().getClass(), e.getCause().getClass()
                   .isAssignableFrom(SOAPFaultException.class));

    }
,
(startLine=295 endLine=352 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01378/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/FaultyWebServiceTests.java)
    throws Exception {

        String host = "this.is.a.bad.endpoint.terrible.in.fact";
        String badEndpoint = "http://" + host;

        TestLogger.logger.debug("------------------------------");

        FaultyWebServiceService service = new FaultyWebServiceService();
        FaultyWebServicePortType proxy = service.getFaultyWebServicePort();
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
                                  badEndpoint);

        Future<?> future = proxy.faultyWebServiceAsync(1);
        await(future);

        Exception e = null;
        try {
            Object obj = future.get();
        } catch (Exception ex) {
            e = ex;
        }

        // Section 4.3.3 states that the top level Exception should be
        // an ExecutionException, with a WebServiceException underneath.
        assertNotNull("The exception was null.", e);
        assertTrue("The thrown exception should be an ExecutionException.", e
                   .getClass().equals(ExecutionException.class));
        assertTrue(
                   "The expected fault type under the ExecutionException should be a "
                   + "SOAPFaultException.  Found type: "
                   + e.getCause().getClass(), e.getCause().getClass()
                   .isAssignableFrom(SOAPFaultException.class));
        
        
        // Repeat to verify behavior
        proxy.faultyWebServiceAsync(1);
        await(future);

        e = null;
        try {
            Object obj = future.get();
        } catch (Exception ex) {
            e = ex;
        }

        // Section 4.3.3 states that the top level Exception should be
        // an ExecutionException, with a WebServiceException underneath.
        assertNotNull("The exception was null.", e);
        assertTrue("The thrown exception should be an ExecutionException.", e
                   .getClass().equals(ExecutionException.class));
        assertTrue(
                   "The expected fault type under the ExecutionException should be a "
                   + "SOAPFaultException.  Found type: "
                   + e.getCause().getClass(), e.getCause().getClass()
                   .isAssignableFrom(SOAPFaultException.class));

    }
,
(startLine=358 endLine=401 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01378/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/FaultyWebServiceTests.java)
    public void testCustomFault_AsyncCallback() throws Exception {
        TestLogger.logger.debug("------------------------------");

        FaultyWebServiceService service = new FaultyWebServiceService();
        FaultyWebServicePortType proxy = service.getFaultyWebServicePort();
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, getEndpoint());

        FaultyAsyncHandler callback = new FaultyAsyncHandler();
        Future<?> future = proxy.faultyWebServiceAsync(1, callback);

        await(future);

        Exception e = callback.getException();
        e.printStackTrace();

        // Section 4.3.3 states that the top level Exception should be
        // an ExecutionException, with a WebServiceException underneath.
        assertNotNull("The exception was null.", e);
        assertTrue("The thrown exception should be an ExecutionException.", 
                   e.getClass().equals(ExecutionException.class));
        assertTrue("The expected fault type under the ExecutionException should be a " +
                   "FaultyWebServiceFault_Exception.  Found type: " + e.getCause().getClass(), 
                   e.getCause().getClass().isAssignableFrom(FaultyWebServiceFault_Exception.class));
        
        
        // Repeat to verify behavior
        callback = new FaultyAsyncHandler();
        future = proxy.faultyWebServiceAsync(1, callback);

        await(future);

        e = callback.getException();
        e.printStackTrace();

        // Section 4.3.3 states that the top level Exception should be
        // an ExecutionException, with a WebServiceException underneath.
        assertNotNull("The exception was null.", e);
        assertTrue("The thrown exception should be an ExecutionException.", 
                   e.getClass().equals(ExecutionException.class));
        assertTrue("The expected fault type under the ExecutionException should be a " +
                   "FaultyWebServiceFault_Exception.  Found type: " + e.getCause().getClass(), 
                   e.getCause().getClass().isAssignableFrom(FaultyWebServiceFault_Exception.class));
    }
,
>
, <(startLine=86 endLine=92 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00613/modules/addressing/src/org/apache/axis2/addressing/AddressingFaultsHelper.java)
        }else if(Final.FAULT_ONLY_ANONYMOUS_ADDRESS_SUPPORTED.equals(faultCodeLocalName)){
            if(faultDetail!=null){
                result = "The "+faultDetail+" header contained a non-anonymous [address] which is not supported by the server.";
            }else{
                result = "A WS-Addressing header contained a non-anonymous [address] which is not supported by the server.";
            }
        }else if(Final.FAULT_ONLY_NON_ANONYMOUS_ADDRESS_SUPPORTED.equals(faultCodeLocalName)){
,
(startLine=92 endLine=98 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00613/modules/addressing/src/org/apache/axis2/addressing/AddressingFaultsHelper.java)
        }else if(Final.FAULT_ONLY_NON_ANONYMOUS_ADDRESS_SUPPORTED.equals(faultCodeLocalName)){
            if(faultDetail!=null){
                result = "The "+faultDetail+" header contained an anonymous [address] which is not supported by the server.";
            }else{
                result = "A WS-Addressing header contained an anonymous [address] which is not supported by the server.";
            }
        }else if(Submission.FAULT_ADDRESSING_HEADER_REQUIRED.equals(faultCodeLocalName)){
,
>
, <(startLine=52 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00982/modules/jaxws/test/org/apache/axis2/jaxws/provider/jaxb/JAXBProvider.java)
    public Source invoke(Source obj) {
        TestLogger.logger.debug(">> JAXB Provider Service: Request received.\n");
        SendImage siRequest = null;
        SendImageResponse siResponse = null;
        StreamSource streamSource = null;
        
        try {
        	//Create a request object
            siRequest = new ObjectFactory().createSendImage();
            
            //Unmarshall recieved Source to get request param.
            JAXBContext jbc = JAXBContext.newInstance("org.test.mtom");
            Unmarshaller um = jbc.createUnmarshaller();
            siRequest = (SendImage)um.unmarshal(obj);
            
            //Create a response object
            siResponse = new ObjectFactory().createSendImageResponse();
            siResponse.setOutput(siRequest.getInput());
            
            //Marshall the response object and create a StreamSource from the 
            //resulting byte array input stream
            Marshaller m = jbc.createMarshaller();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            m.marshal(siResponse, baos);
            byte []bite = baos.toByteArray();
            ByteArrayInputStream bais = new ByteArrayInputStream(bite);
            streamSource = new StreamSource(bais);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return streamSource;

    }
,
(startLine=52 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00982/modules/jaxws-integration/test/org/apache/axis2/jaxws/provider/jaxb/JAXBProvider.java)
    public Source invoke(Source obj) {
        TestLogger.logger.debug(">> JAXB Provider Service: Request received.\n");
        SendImage siRequest = null;
        SendImageResponse siResponse = null;
        StreamSource streamSource = null;
        
        try {
        	//Create a request object
            siRequest = new ObjectFactory().createSendImage();
            
            //Unmarshall recieved Source to get request param.
            JAXBContext jbc = JAXBContext.newInstance("org.test.mtom");
            Unmarshaller um = jbc.createUnmarshaller();
            siRequest = (SendImage)um.unmarshal(obj);
            
            //Create a response object
            siResponse = new ObjectFactory().createSendImageResponse();
            siResponse.setOutput(siRequest.getInput());
            
            //Marshall the response object and create a StreamSource from the 
            //resulting byte array input stream
            Marshaller m = jbc.createMarshaller();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            m.marshal(siResponse, baos);
            byte []bite = baos.toByteArray();
            ByteArrayInputStream bais = new ByteArrayInputStream(bite);
            streamSource = new StreamSource(bais);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return streamSource;

    }
,
>
, <(startLine=176 endLine=252 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00519/modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/CEmitter.java)
    protected Document createDOMDocumentForInterfaceImplementation() throws Exception {

        String serviceName = axisService.getName();
        String serviceTns = axisService.getTargetNamespace();
        String serviceCName = makeCClassName(axisService.getName());
        String stubName = C_STUB_PREFIX + serviceCName + C_STUB_SUFFIX;
        Document doc = getEmptyDocument();
        Element rootElement = doc.createElement("class");

        addAttribute(doc, "name", stubName, rootElement);
        addAttribute( doc,"prefix", stubName, rootElement); //prefix to be used by the functions
        addAttribute(doc, "qname", serviceName + "|" + serviceTns, rootElement);
        addAttribute(doc, "servicename", serviceCName, rootElement);
        addAttribute(doc, "package", "", rootElement);

        addAttribute(doc, "namespace", serviceTns, rootElement);
        addAttribute(doc, "interfaceName", serviceCName, rootElement);

        /* The following block of code is same as for the
         * AxisServiceBasedMultiLanguageEmitter createDOMDocumentForInterfaceImplementation()
         */
        // add the wrap classes flag
        if (codeGenConfiguration.isPackClasses()) {
            addAttribute(doc, "wrapped", "yes", rootElement);
        }

        // add SOAP version
        addSoapVersion(doc, rootElement);

        // add the end point
        addEndpoint(doc, rootElement);

        // set the sync/async attributes
        fillSyncAttributes(doc, rootElement);

        // ###########################################################################################
        // this block of code specifically applies to the integration of databinding code into the
        // generated classes tightly (probably as inner classes)
        // ###########################################################################################
        // check for the special models in the mapper and if they are present process them
        if (mapper.isObjectMappingPresent()) {

            // add an attribute to the root element showing that the writing has been skipped
            addAttribute(doc, "skip-write", "yes", rootElement);

            // process the mapper objects
            processModelObjects(mapper.getAllMappedObjects(), rootElement, doc);
        }

        // #############################################################################################

        // load the operations
        loadOperations(doc, rootElement, null);

        // add the databind supporters. Now the databind supporters are completly contained inside
        // the stubs implementation and not visible outside
        rootElement.appendChild(createDOMElementforDatabinders(doc,false));

        Object stubMethods;

        //if some extension has added the stub methods property, add them to the
        //main document
        if ((stubMethods = codeGenConfiguration.getProperty("stubMethods")) != null) {
            rootElement.appendChild(doc.importNode((Element) stubMethods, true));
        }

        //add another element to have the unique list of faults
        rootElement.appendChild(getUniqueListofFaults(doc));

        /////////////////////////////////////////////////////
        //System.out.println(DOM2Writer.nodeToString(rootElement));
        /////////////////////////////////////////////////////


        doc.appendChild(rootElement);
        return doc;
    }
,
(startLine=421 endLine=492 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00519/modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java)
    protected Document createDOMDocumentForInterfaceImplementation() throws Exception {

        String packageName = codeGenConfiguration.getPackageName();
        String localPart = makeJavaClassName(axisService.getName());
        String stubName = localPart + STUB_SUFFIX;
        Document doc = getEmptyDocument();
        Element rootElement = doc.createElement("class");

        addAttribute(doc, "package", packageName, rootElement);
        addAttribute(doc, "name", stubName, rootElement);
        addAttribute(doc, "servicename", localPart, rootElement);
        //The target nemespace is added as the namespace for this service
        addAttribute(doc, "namespace", axisService.getTargetNamespace(), rootElement);
        addAttribute(doc, "interfaceName", localPart, rootElement);
        addAttribute(doc, "callbackname", localPart + CALL_BACK_HANDLER_SUFFIX, rootElement);

        // add the wrap classes flag
        if (codeGenConfiguration.isPackClasses()) {
            addAttribute(doc, "wrapped", "yes", rootElement);
        }

        // add SOAP version
        addSoapVersion(doc, rootElement);

        // add the end point
        addEndpoint(doc, rootElement);

        // set the sync/async attributes
        fillSyncAttributes(doc, rootElement);

        // ###########################################################################################
        // this block of code specifically applies to the integration of databinding code into the
        // generated classes tightly (probably as inner classes)
        // ###########################################################################################
        // check for the special models in the mapper and if they are present process them
        if (mapper.isObjectMappingPresent()) {

            // add an attribute to the root element showing that the writing has been skipped
            addAttribute(doc, "skip-write", "yes", rootElement);

            // process the mapper objects
            processModelObjects(mapper.getAllMappedObjects(), rootElement, doc);
        }

        // #############################################################################################

        // load the operations
        loadOperations(doc, rootElement, null);

        // add the databind supporters. Now the databind supporters are completly contained inside
        // the stubs implementation and not visible outside
        rootElement.appendChild(createDOMElementforDatabinders(doc,false));

        Object moduleCodegenPolicyExtensionElement;

        //if some extension has added the stub methods property, add them to the
        //main document
        if ((moduleCodegenPolicyExtensionElement = codeGenConfiguration.getProperty("module-codegen-policy-extensions")) != null) {
            rootElement.appendChild(doc.importNode((Element) moduleCodegenPolicyExtensionElement, true));
        }

        //add another element to have the unique list of faults
        rootElement.appendChild(getUniqueListofFaults(doc));


        doc.appendChild(rootElement);

        //////////////////////////////////////////////////////////
//        System.out.println(DOM2Writer.nodeToString(rootElement));
        ////////////////////////////////////////////////////////////
        return doc;
    }
,
>
, <(startLine=2585 endLine=2642 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01358/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jExtensibilityElement instanceof SOAP12Header) {

                SOAP12Header soapHeader = (SOAP12Header) wsdl4jExtensibilityElement;
                SOAPHeaderMessage headerMessage = new SOAPHeaderMessage();

                headerMessage.setNamespaceURI(soapHeader.getNamespaceURI());
                headerMessage.setUse(soapHeader.getUse());

                Boolean required = soapHeader.getRequired();

                if (required != null) {
                    headerMessage.setRequired(required.booleanValue());
                }

                if (wsdl4jDefinition != null) {
                    // find the relevant schema part from the messages
                    Message msg = wsdl4jDefinition.getMessage(soapHeader
                            .getMessage());

                    if (msg == null) {
                        msg = getMessage(wsdl4jDefinition, soapHeader
                            .getMessage(), new HashSet());
                    }
                    
                    if (msg == null) {
                        // TODO i18n this
                        throw new AxisFault("message "
                                            + soapHeader.getMessage()
                                            + " not found in the WSDL ");
                    }
                    Part msgPart = msg.getPart(soapHeader.getPart());

                    if (msgPart == null) {
                        // TODO i18n this
                        throw new AxisFault("message part "
                                            + soapHeader.getPart()
                                            + " not found in the WSDL ");
                    }
                    // see basic profile 4.4.2 Bindings and Faults header, fault and headerfaults
                    // can only have elements
                    headerMessage.setElement(msgPart.getElementName());
                }

                headerMessage.setMessage(soapHeader.getMessage());
                headerMessage.setPart(soapHeader.getPart());

                if (description instanceof AxisBindingMessage) {
                    AxisBindingMessage bindingMessage = (AxisBindingMessage) description;
                    List soapHeaders =
                            (List) bindingMessage.getProperty(WSDL2Constants.ATTR_WSOAP_HEADER);
                    if (soapHeaders == null) {
                        soapHeaders = new ArrayList();
                        bindingMessage.setProperty(WSDL2Constants.ATTR_WSOAP_HEADER, soapHeaders);
                    }
                    soapHeaders.add(headerMessage);
                }

            } else if (wsdl4jExtensibilityElement instanceof SOAPHeader) {
,
(startLine=2642 endLine=2691 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01358/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jExtensibilityElement instanceof SOAPHeader) {

                SOAPHeader soapHeader = (SOAPHeader) wsdl4jExtensibilityElement;
                SOAPHeaderMessage headerMessage = new SOAPHeaderMessage();
                headerMessage.setNamespaceURI(soapHeader.getNamespaceURI());
                headerMessage.setUse(soapHeader.getUse());
                Boolean required = soapHeader.getRequired();
                if (null != required) {
                    headerMessage.setRequired(required.booleanValue());
                }
                if (null != wsdl4jDefinition) {
                    // find the relevant schema part from the messages
                    Message msg = wsdl4jDefinition.getMessage(soapHeader
                            .getMessage());
                    
                    if (msg == null) {
                        msg = getMessage(wsdl4jDefinition, soapHeader
                            .getMessage(), new HashSet());
                    }

                    if (msg == null) {
                        // todo i18n this
                        throw new AxisFault("message "
                                            + soapHeader.getMessage()
                                            + " not found in the WSDL ");
                    }
                    Part msgPart = msg.getPart(soapHeader.getPart());
                    if (msgPart == null) {
                        // todo i18n this
                        throw new AxisFault("message part "
                                            + soapHeader.getPart()
                                            + " not found in the WSDL ");
                    }
                    headerMessage.setElement(msgPart.getElementName());
                }
                headerMessage.setMessage(soapHeader.getMessage());

                headerMessage.setPart(soapHeader.getPart());

                if (description instanceof AxisBindingMessage) {
                    AxisBindingMessage bindingMessage = (AxisBindingMessage) description;
                    List soapHeaders =
                            (List) bindingMessage.getProperty(WSDL2Constants.ATTR_WSOAP_HEADER);
                    if (soapHeaders == null) {
                        soapHeaders = new ArrayList();
                        bindingMessage.setProperty(WSDL2Constants.ATTR_WSOAP_HEADER, soapHeaders);
                    }
                    soapHeaders.add(headerMessage);
                }
            } else if (wsdl4jExtensibilityElement instanceof SOAPBinding) {
,
>
, <(startLine=767 endLine=782 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00499/modules/xml/test/org/apache/axis2/xpath/XPathTestBase.java)
    {
        Navigator nav = getNavigator();
        String url = TESTS_ROOT + "xml/axis.xml";
        log("Document [" + url + "]");
        Object document = nav.getDocument(url);
        XPath contextpath = new BaseXPath("/", nav);
        log("Initial Context :: " + contextpath);
        List list = contextpath.selectNodes(document);
        Iterator iter = list.iterator();
        while (iter.hasNext())
        {
            Object context = iter.next();
            assertValueOfXPath("a.2", context, "name(/root/a/a.3/preceding-sibling::*[1])");
            assertValueOfXPath("a.1", context, "name(/root/a/a.3/preceding-sibling::*[2])");
        }
    }
,
(startLine=785 endLine=800 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00499/modules/xml/test/org/apache/axis2/xpath/XPathTestBase.java)
    {
        Navigator nav = getNavigator();
        String url = TESTS_ROOT + "xml/axis.xml";
        log("Document [" + url + "]");
        Object document = nav.getDocument(url);
        XPath contextpath = new BaseXPath("/", nav);
        log("Initial Context :: " + contextpath);
        List list = contextpath.selectNodes(document);
        Iterator iter = list.iterator();
        while (iter.hasNext())
        {
            Object context = iter.next();
            assertValueOfXPath("a.4", context, "name(/root/a/a.3/following-sibling::*[1])");
            assertValueOfXPath("a.5", context, "name(/root/a/a.3/following-sibling::*[2])");
        }
    }
,
>
, <(startLine=72 endLine=94 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01312/modules/jaxws/test/org/apache/axis2/jaxws/spi/ClientMetadataMTOMFeatureTests.java)
    public void testDefaultThresholdWhenMTOMEnabled() {
        QName serviceQName = new QName(namespaceURI, svcLocalPart);
        URL wsdlUrl = ClientMetadataTest.getWsdlURL(multiPortWsdl);
        DescriptionBuilderComposite serviceDBC = new DescriptionBuilderComposite();
        
        Map<String, List<Annotation>> map = new HashMap();
        ArrayList<Annotation> wsFeatures = new ArrayList<Annotation>();
        MTOMAnnot mtomFeature = new MTOMAnnot();
        // MTOM is enabled, but a threshold is not set
        mtomFeature.setEnabled(true);
        wsFeatures.add(mtomFeature);
        map.put(ClientMetadataMTOMPortSEI.class.getName(), wsFeatures);
        serviceDBC.getProperties().put(MDQConstants.SEI_FEATURES_MAP, map);
        ServiceDelegate.setServiceMetadata(serviceDBC);
        Service service = Service.create(wsdlUrl, serviceQName);
        
        ClientMetadataMTOMPortSEI port = service.getPort(ClientMetadataMTOMPortSEI.class);
        
        BindingProvider bindingProvider = (BindingProvider) port;
        SOAPBinding soapBinding = (SOAPBinding) bindingProvider.getBinding();
        assertTrue("MTOM is not enabled but should be", soapBinding.isMTOMEnabled());
        assertEquals("MTOM threshold default incorrect", 0, soapBinding.getMTOMThreshold());
    }
,
(startLine=140 endLine=164 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01312/modules/jaxws/test/org/apache/axis2/jaxws/spi/ClientMetadataMTOMFeatureTests.java)
    public void testMTOMEnablementConflict_NewOff_OldOn() {
        QName serviceQName = new QName(namespaceURI, svcLocalPart);
        URL wsdlUrl = ClientMetadataTest.getWsdlURL(multiPortWsdl);
        DescriptionBuilderComposite serviceDBC = new DescriptionBuilderComposite();
        
        Map<String, List<Annotation>> map = new HashMap();
        ArrayList<Annotation> wsFeatures = new ArrayList<Annotation>();
        MTOMAnnot mtomFeature = new MTOMAnnot();
        // Explicitly disable MTOM with the new way of enabling it
        mtomFeature.setEnabled(false);
        mtomFeature.setThreshold(MTOM_THRESHOLD);
        wsFeatures.add(mtomFeature);
        map.put(ClientMetadataMTOMPortSEI.class.getName(), wsFeatures);
        serviceDBC.getProperties().put(MDQConstants.SEI_FEATURES_MAP, map);
        // Enable MTOM with the old way of enabling it
        serviceDBC.setIsMTOMEnabled(true);
        ServiceDelegate.setServiceMetadata(serviceDBC);
        Service service = Service.create(wsdlUrl, serviceQName);
        
        ClientMetadataMTOMPortSEI port = service.getPort(ClientMetadataMTOMPortSEI.class);
        
        BindingProvider bindingProvider = (BindingProvider) port;
        SOAPBinding soapBinding = (SOAPBinding) bindingProvider.getBinding();
        assertFalse("MTOM is enabled but should not be", soapBinding.isMTOMEnabled());
    }
,
(startLine=170 endLine=195 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01312/modules/jaxws/test/org/apache/axis2/jaxws/spi/ClientMetadataMTOMFeatureTests.java)
    public void testMTOMEnablementConflict_NewUnspec_OldOn() {
        QName serviceQName = new QName(namespaceURI, svcLocalPart);
        URL wsdlUrl = ClientMetadataTest.getWsdlURL(multiPortWsdl);
        DescriptionBuilderComposite serviceDBC = new DescriptionBuilderComposite();
        
        Map<String, List<Annotation>> map = new HashMap();
        ArrayList<Annotation> wsFeatures = new ArrayList<Annotation>();
        MTOMAnnot mtomFeature = new MTOMAnnot();
        // The port we do the get on will not have any feautres specified for it.
        mtomFeature.setEnabled(false);
        mtomFeature.setThreshold(MTOM_THRESHOLD);
        wsFeatures.add(mtomFeature);
        // Set the feature on a different port name than we will be using in getPort
        map.put(ClientMetadataMTOMPortSEI2.class.getName(), wsFeatures);
        serviceDBC.getProperties().put(MDQConstants.SEI_FEATURES_MAP, map);
        // Enable MTOM with the old way of enabling it
        serviceDBC.setIsMTOMEnabled(true);
        ServiceDelegate.setServiceMetadata(serviceDBC);
        Service service = Service.create(wsdlUrl, serviceQName);
        
        ClientMetadataMTOMPortSEI port = service.getPort(ClientMetadataMTOMPortSEI.class);
        
        BindingProvider bindingProvider = (BindingProvider) port;
        SOAPBinding soapBinding = (SOAPBinding) bindingProvider.getBinding();
        assertTrue("MTOM is not enabled", soapBinding.isMTOMEnabled());
    }
,
(startLine=59 endLine=79 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01312/modules/jaxws/test/org/apache/axis2/jaxws/spi/ClientMetadataAddressingFeatureTests.java)
    public void testAddressingDisabled() {
        QName serviceQName = new QName(namespaceURI, svcLocalPart);
        URL wsdlUrl = ClientMetadataTest.getWsdlURL(multiPortWsdl);
        DescriptionBuilderComposite serviceDBC = new DescriptionBuilderComposite();
        
        Map<String, List<Annotation>> map = new HashMap();
        ArrayList<Annotation> wsFeatures = new ArrayList<Annotation>();
        AddressingAnnot addressingFeature = new AddressingAnnot();
        addressingFeature.setEnabled(false);
        wsFeatures.add(addressingFeature);
        map.put(ClientMetadataAddressingPortSEI.class.getName(), wsFeatures);
        serviceDBC.getProperties().put(MDQConstants.SEI_FEATURES_MAP, map);
        ServiceDelegate.setServiceMetadata(serviceDBC);
        Service service = Service.create(wsdlUrl, serviceQName);
        ClientMetadataAddressingPortSEI port = service.getPort(ClientMetadataAddressingPortSEI.class);

        BindingProvider bindingProvider = (BindingProvider) port;
        SOAPBinding soapBinding = (SOAPBinding) bindingProvider.getBinding();
        assertTrue("Addressing is not configured", soapBinding.isAddressingConfigured());
        assertFalse("Addressing is enabled", soapBinding.isAddressingEnabled());
    }
,
(startLine=91 endLine=112 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01312/modules/jaxws/test/org/apache/axis2/jaxws/spi/ClientMetadataAddressingFeatureTests.java)
    public void testAddressingNotRequired() {
        QName serviceQName = new QName(namespaceURI, svcLocalPart);
        URL wsdlUrl = ClientMetadataTest.getWsdlURL(multiPortWsdl);
        DescriptionBuilderComposite serviceDBC = new DescriptionBuilderComposite();
        
        Map<String, List<Annotation>> map = new HashMap();
        ArrayList<Annotation> wsFeatures = new ArrayList<Annotation>();
        AddressingAnnot addressingFeature = new AddressingAnnot();
        addressingFeature.setEnabled(true);
        addressingFeature.setRequired(false);
        wsFeatures.add(addressingFeature);
        map.put(ClientMetadataAddressingPortSEI.class.getName(), wsFeatures);
        serviceDBC.getProperties().put(MDQConstants.SEI_FEATURES_MAP, map);
        ServiceDelegate.setServiceMetadata(serviceDBC);
        Service service = Service.create(wsdlUrl, serviceQName);
        ClientMetadataAddressingPortSEI port = service.getPort(ClientMetadataAddressingPortSEI.class);

        BindingProvider bindingProvider = (BindingProvider) port;
        SOAPBinding soapBinding = (SOAPBinding) bindingProvider.getBinding();
        assertTrue("Addressing is not configured", soapBinding.isAddressingConfigured());
        assertFalse("Addressing is required", soapBinding.isAddressingRequired());
    }
,
>
, <(startLine=216 endLine=221 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/transport/http/AxisServlet.java)
        } else {
            PrintWriter writer = new PrintWriter(resp.getOutputStream());
            writer.println("<html><body><h2>Please enable REST support in WEB-INF/conf/axis2.xml and WEB-INF/web.xml</h2></body></html>");
            writer.flush();
            resp.setStatus(HttpServletResponse.SC_ACCEPTED);
        }
,
(startLine=403 endLine=409 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/transport/http/AxisServlet.java)
        } else {
            PrintWriter writer = new PrintWriter(resp.getOutputStream());
            writer.println(
                    "<html><body><h2>Please enable REST support in WEB-INF/conf/axis2.xml and WEB-INF/web.xml</h2></body></html>");
            writer.flush();
            resp.setStatus(HttpServletResponse.SC_ACCEPTED);
        }
,
(startLine=442 endLine=448 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/transport/http/AxisServlet.java)
        } else {
            PrintWriter writer = new PrintWriter(resp.getOutputStream());
            writer.println(
                    "<html><body><h2>Please enable REST support in WEB-INF/conf/axis2.xml and WEB-INF/web.xml</h2></body></html>");
            writer.flush();
            resp.setStatus(HttpServletResponse.SC_ACCEPTED);
        }
,
>
, <(startLine=79 endLine=94 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00870/modules/integration/manual/doclit-interop/clients/test/SunRound3DoclitparamInteropTest.java)
    public void testEchoStruct() throws RemoteException {
        soapStruct = SOAPStruct.Factory.newInstance();
        soapStruct.setVarFloat(flt);
        soapStruct.setVarInt(i);
        soapStruct.setVarString(str);
        echoStruct = EchoStructDocument.EchoStruct.Factory.newInstance();
        echoStruct.setParam0(soapStruct);
        structParaDoc = EchoStructDocument.Factory.newInstance();
        structParaDoc.setEchoStruct(echoStruct);
        retStructDoc = stub.echoStruct(structParaDoc);
        retStruct = retStructDoc.addNewEchoStructResponse().getReturn();
        assertEquals(flt,retStruct.getVarFloat(),0);
        assertEquals(i,retStruct.getVarInt());
        assertEquals(str,retStruct.getVarString());

    }
,
(startLine=77 endLine=92 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00870/modules/integration/manual/doclit-interop/clients/test/AspNetRound3DoclitparamInteropTest.java)
    public void testEchoStruct() throws Exception {
        soapStruct = SOAPStruct.Factory.newInstance();
        soapStruct.setVarFloat(flt);
        soapStruct.setVarInt(i);
        soapStruct.setVarString(str);
        echoStruct = EchoStructDocument.EchoStruct.Factory.newInstance();
        echoStruct.setParam0(soapStruct);
        structParaDoc = EchoStructDocument.Factory.newInstance();
        structParaDoc.setEchoStruct(echoStruct);
        retStructDoc = stub.echoStruct(structParaDoc);
        retStruct = retStructDoc.addNewEchoStructResponse().getReturn();
        assertEquals(flt,retStruct.getVarFloat(),0);
        assertEquals(i,retStruct.getVarInt());
        assertEquals(str,retStruct.getVarString());

    }
,
(startLine=80 endLine=95 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00870/modules/integration/manual/doclit-interop/clients/test/Round3DoclitparamInteropTest.java)
    public void testEchoStruct() throws RemoteException {
        soapStruct = SOAPStruct.Factory.newInstance();
        soapStruct.setVarFloat(flt);
        soapStruct.setVarInt(i);
        soapStruct.setVarString(str);
        echoStruct = EchoStructDocument.EchoStruct.Factory.newInstance();
        echoStruct.setParam0(soapStruct);
        structParaDoc = EchoStructDocument.Factory.newInstance();
        structParaDoc.setEchoStruct(echoStruct);
        retStructDoc = stub.echoStruct(structParaDoc);
        retStruct = retStructDoc.addNewEchoStructResponse().getReturn();
        assertEquals(flt,retStruct.getVarFloat(),0);
        assertEquals(i,retStruct.getVarInt());
        assertEquals(str,retStruct.getVarString());

    }
,
>
, <(startLine=84 endLine=117 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01047/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/FaultyWebServiceTests.java)
    public void testFaultyWebService_badEndpoint(){

        String host = "this.is.a.bad.endpoint.terrible.in.fact";
        String badEndpoint = "http://" + host;

        WebServiceException exception = null;

        try{
            TestLogger.logger.debug("----------------------------------");
            TestLogger.logger.debug("test: " + getName());
            FaultyWebServiceService service = new FaultyWebServiceService();
            FaultyWebServicePortType proxy = service.getFaultyWebServicePort();
            BindingProvider p = (BindingProvider)proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,badEndpoint);

            // the invoke will throw an exception, if the test is performed right
            int total = proxy.faultyWebService(10);

        }catch(FaultyWebServiceFault_Exception e) {
            // shouldn't get this exception
            fail(e.toString());
        }catch(WebServiceException e) {
            exception = e;
        }catch(Exception e) {
            fail("This testcase should only produce a WebServiceException.  We got: " + e.toString());
        }

        TestLogger.logger.debug("----------------------------------");

        assertNotNull(exception);
        assertTrue(exception.getCause() instanceof UnknownHostException);
        assertEquals(exception.getCause().getMessage(), host);

    }
,
(startLine=123 endLine=152 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01047/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/FaultyWebServiceTests.java)
    public void testFaultyWebService_badEndpoint_oneWay() {

        String host = "this.is.a.bad.endpoint.terrible.in.fact";
        String badEndpoint = "http://" + host;

        WebServiceException exception = null;

        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());
        try{

            DocLitWrapService service = new DocLitWrapService();
            DocLitWrap proxy = service.getDocLitWrapPort();
            BindingProvider p = (BindingProvider)proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,badEndpoint);
            proxy.oneWayVoid();

        }catch(WebServiceException e) {
            exception = e;
        }catch(Exception e) {
            fail("This testcase should only produce a WebServiceException.  We got: " + e.toString());
        }

        TestLogger.logger.debug("----------------------------------");

        assertNotNull(exception);
        assertTrue(exception.getCause() instanceof UnknownHostException);
        assertEquals(exception.getCause().getMessage(), host);

    }
,
>
, <(startLine=215 endLine=248 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00495/modules/xml/src/org/apache/axis2/attachments/Base64.java)
                              OutputStream ostream) throws IOException {
        if (len <= 0)
            return;
        byte[] out = new byte[4];
        int rindex = off;
        int rest = len - off;
        while (rest >= 3) {
            int i = ((data[rindex] & 0xff) << 16)
                    + ((data[rindex + 1] & 0xff) << 8)
                    + (data[rindex + 2] & 0xff);
            out[0] = (byte) S_BASE64CHAR[i >> 18];
            out[1] = (byte) S_BASE64CHAR[(i >> 12) & 0x3f];
            out[2] = (byte) S_BASE64CHAR[(i >> 6) & 0x3f];
            out[3] = (byte) S_BASE64CHAR[i & 0x3f];
            ostream.write(out, 0, 4);
            rindex += 3;
            rest -= 3;
        }
        if (rest == 1) {
            int i = data[rindex] & 0xff;
            out[0] = (byte) S_BASE64CHAR[i >> 2];
            out[1] = (byte) S_BASE64CHAR[(i << 4) & 0x3f];
            out[2] = (byte) S_BASE64PAD;
            out[3] = (byte) S_BASE64PAD;
            ostream.write(out, 0, 4);
        } else if (rest == 2) {
            int i = ((data[rindex] & 0xff) << 8) + (data[rindex + 1] & 0xff);
            out[0] = (byte) S_BASE64CHAR[i >> 10];
            out[1] = (byte) S_BASE64CHAR[(i >> 4) & 0x3f];
            out[2] = (byte) S_BASE64CHAR[(i << 2) & 0x3f];
            out[3] = (byte) S_BASE64PAD;
            ostream.write(out, 0, 4);
        }
    }
,
(startLine=255 endLine=292 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00495/modules/xml/src/org/apache/axis2/attachments/Base64.java)
            throws IOException {
        if (len <= 0)
            return;
        char[] out = new char[4];
        int rindex = off;
        int rest = len - off;
        int output = 0;
        while (rest >= 3) {
            int i = ((data[rindex] & 0xff) << 16)
                    + ((data[rindex + 1] & 0xff) << 8)
                    + (data[rindex + 2] & 0xff);
            out[0] = S_BASE64CHAR[i >> 18];
            out[1] = S_BASE64CHAR[(i >> 12) & 0x3f];
            out[2] = S_BASE64CHAR[(i >> 6) & 0x3f];
            out[3] = S_BASE64CHAR[i & 0x3f];
            writer.write(out, 0, 4);
            rindex += 3;
            rest -= 3;
            output += 4;
            if (output % 76 == 0)
                writer.write("\n");
        }
        if (rest == 1) {
            int i = data[rindex] & 0xff;
            out[0] = S_BASE64CHAR[i >> 2];
            out[1] = S_BASE64CHAR[(i << 4) & 0x3f];
            out[2] = S_BASE64PAD;
            out[3] = S_BASE64PAD;
            writer.write(out, 0, 4);
        } else if (rest == 2) {
            int i = ((data[rindex] & 0xff) << 8) + (data[rindex + 1] & 0xff);
            out[0] = S_BASE64CHAR[i >> 10];
            out[1] = S_BASE64CHAR[(i >> 4) & 0x3f];
            out[2] = S_BASE64CHAR[(i << 2) & 0x3f];
            out[3] = S_BASE64PAD;
            writer.write(out, 0, 4);
        }
    }
,
>
, <(startLine=109 endLine=123 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00540/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/lifecycle/impl/EndpointLifecycleManagerImpl.java)
	public void invokePostConstruct() throws EndpointLifecycleException{
		if(endpointInstance == null){
			throw new EndpointLifecycleException(Messages.getMessage("EndpointLifecycleManagerImplErr1"));
		}
		Method method = getPostConstructMethod();
		if(method != null){
			if(log.isDebugEnabled()){
				log.debug("Invoking Method with @PostConstruct annotation");
			}
			invokeMethod(method, null);
			if(log.isDebugEnabled()){
				log.debug("Completed invoke on Method with @PostConstruct annotation");
			}
		}
	}
,
(startLine=128 endLine=142 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00540/modules/jaxws/src/org/apache/axis2/jaxws/server/endpoint/lifecycle/impl/EndpointLifecycleManagerImpl.java)
	public void invokePreDestroy() throws EndpointLifecycleException {
		if(endpointInstance == null){
			throw new EndpointLifecycleException(Messages.getMessage("EndpointLifecycleManagerImplErr1"));
		}
		Method method = getPreDestroyMethod();
		if(method != null){
			if(log.isDebugEnabled()){
				log.debug("Invoking Method with @PostConstruct annotation");
			}
			invokeMethod(method, null);
			if(log.isDebugEnabled()){
				log.debug("Completed invoke on Method with @PreDestroy annotation");
			}
		}
	}
,
>
, <(startLine=74 endLine=94 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00663/modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingFinalInHandler.java)
    protected void setDefaults(ArrayList alreadyFoundAddrHeader, MessageContext messageContext) {
        //According to the WS-Addressing spec, we should default the wsa:To header to the
        //anonymous URL. Doing that, however, might prevent a different value from being
        //used instead, such as the transport URL.
        
        if (!alreadyFoundAddrHeader.contains(WSA_REPLY_TO)) {
            Options messageContextOptions = messageContext.getOptions();
            EndpointReference epr = messageContextOptions.getReplyTo();
            
            if (epr == null) {
                epr = new EndpointReference("");
                messageContextOptions.setReplyTo(epr);
            }
            
            if (log.isTraceEnabled()){
                log.trace(messageContext.getLogIDString()+" setDefaults: Setting WS-Addressing default value for the ReplyTo property.");
            }
            
            epr.setAddress(Final.WSA_ANONYMOUS_URL);
        }        
    }
,
(startLine=67 endLine=86 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00663/modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingSubmissionInHandler.java)
    protected void setDefaults(ArrayList alreadyFoundAddrHeader, MessageContext messageContext) {
        //The none URI is not defined in the 2004/08 spec, but it is used here anyway
        //as a flag to indicate the correct semantics to apply, i.e. in the 2004/08 spec
        //the absence of a ReplyTo header indicates that a response is NOT required.
        if (!alreadyFoundAddrHeader.contains(WSA_REPLY_TO)) {
            Options messageContextOptions = messageContext.getOptions();
            EndpointReference epr = messageContextOptions.getReplyTo();
            
            if (epr == null) {
                epr = new EndpointReference("");
                messageContextOptions.setReplyTo(epr);
            }
            
            if (log.isTraceEnabled()){
                log.trace("setDefaults: Setting WS-Addressing default value for the ReplyTo property.");
            }
                
            epr.setAddress(Final.WSA_NONE_URI);
        }        
    }
,
>
, <(startLine=63 endLine=103 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00439/modules/xml/src/org/apache/axis2/soap/impl/llom/soap11/SOAP11FaultReasonImpl.java)
    protected void serialize(OMOutputImpl omOutput, boolean cache) throws XMLStreamException {

        // select the builder
        short builderType = PULL_TYPE_BUILDER;    // default is pull type
        if (builder != null) {
            builderType = this.builder.getBuilderType();
        }
        if ((builderType == PUSH_TYPE_BUILDER)
                && (builder.getRegisteredContentHandler() == null)) {
            builder.registerExternalContentHandler(
                    new StreamWriterToContentHandlerConverter(omOutput));
        }

        XMLStreamWriter writer = omOutput.getXmlStreamWriter();
        if (this.getNamespace() != null) {
            String prefix = this.getNamespace().getPrefix();
            String nameSpaceName = this.getNamespace().getName();
            writer.writeStartElement(prefix, SOAP11Constants.SOAP_FAULT_STRING_LOCAL_NAME,
                    nameSpaceName);
        } else {
            writer.writeStartElement(
                    SOAP11Constants.SOAP_FAULT_STRING_LOCAL_NAME);
        }
        OMSerializerUtil.serializeAttributes(this, omOutput);
        OMSerializerUtil.serializeNamespaces(this, omOutput);

        String text = this.getSOAPText().getText();
        writer.writeCharacters(text);
        writer.writeEndElement();

        //serilize siblings
        if (this.nextSibling != null) {
            nextSibling.serialize(omOutput);
        } else if (this.parent != null) {
            if (!this.parent.isComplete()) {
                builder.setCache(cache);
                builder.next();
            }
        }

    }
,
(startLine=79 endLine=121 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00439/modules/xml/src/org/apache/axis2/soap/impl/llom/soap11/SOAP11FaultCodeImpl.java)
    protected void serialize(org.apache.axis2.om.impl.OMOutputImpl omOutput, boolean cache) throws XMLStreamException {

        // select the builder
        short builderType = PULL_TYPE_BUILDER;    // default is pull type
        if (builder != null) {
            builderType = this.builder.getBuilderType();
        }
        if ((builderType == PUSH_TYPE_BUILDER)
                && (builder.getRegisteredContentHandler() == null)) {
            builder.registerExternalContentHandler(
                    new StreamWriterToContentHandlerConverter(omOutput));
        }

        XMLStreamWriter writer = omOutput.getXmlStreamWriter();
        if (this.getNamespace() != null) {
            String prefix = this.getNamespace().getPrefix();
            String nameSpaceName = this.getNamespace().getName();
            writer.writeStartElement(prefix, SOAP11Constants.SOAP_FAULT_CODE_LOCAL_NAME,
                    nameSpaceName);
        } else {
            writer.writeStartElement(
                    SOAP11Constants.SOAP_FAULT_CODE_LOCAL_NAME);
        }

        OMSerializerUtil.serializeAttributes(this, omOutput);
        OMSerializerUtil.serializeNamespaces(this, omOutput);


        String text = this.getValue().getText();
        writer.writeCharacters(text);
        writer.writeEndElement();

        //serilize siblings
        if (this.nextSibling != null) {
            nextSibling.serialize(omOutput);
        } else if (this.parent != null) {
            if (!this.parent.isComplete()) {
                builder.setCache(cache);
                builder.next();
            }
        }

    }
,
(startLine=56 endLine=96 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00439/modules/xml/src/org/apache/axis2/soap/impl/llom/soap11/SOAP11FaultDetailImpl.java)
    public void serialize(org.apache.axis2.om.impl.OMOutputImpl omOutput, boolean cache) throws XMLStreamException {

        // select the builder
        short builderType = PULL_TYPE_BUILDER;    // default is pull type
        if (builder != null) {
            builderType = this.builder.getBuilderType();
        }
        if ((builderType == PUSH_TYPE_BUILDER)
                && (builder.getRegisteredContentHandler() == null)) {
            builder.registerExternalContentHandler(
                    new StreamWriterToContentHandlerConverter(omOutput));
        }
        XMLStreamWriter writer = omOutput.getXmlStreamWriter();
        if (this.getNamespace() != null) {
            String prefix = this.getNamespace().getPrefix();
            String nameSpaceName = this.getNamespace().getName();
            writer.writeStartElement(prefix, SOAP11Constants.SOAP_FAULT_DETAIL_LOCAL_NAME,
                    nameSpaceName);
        } else {
            writer.writeStartElement(
                    SOAP11Constants.SOAP_FAULT_DETAIL_LOCAL_NAME);
        }
        OMSerializerUtil.serializeAttributes(this, omOutput);
        OMSerializerUtil.serializeNamespaces(this, omOutput);


        String text = this.getText();
        writer.writeCharacters(text);


        if (firstChild != null) {
            firstChild.serialize(omOutput);
        }
        writer.writeEndElement();

        //serilize siblings
        if (this.nextSibling != null) {
            nextSibling.serialize(omOutput);
        }

    }
,
(startLine=48 endLine=88 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00439/modules/xml/src/org/apache/axis2/soap/impl/llom/soap11/SOAP11FaultRoleImpl.java)
    protected void serialize(org.apache.axis2.om.impl.OMOutputImpl omOutput, boolean cache) throws XMLStreamException {

        // select the builder
        short builderType = PULL_TYPE_BUILDER;    // default is pull type
        if (builder != null) {
            builderType = this.builder.getBuilderType();
        }
        if ((builderType == PUSH_TYPE_BUILDER)
                && (builder.getRegisteredContentHandler() == null)) {
            builder.registerExternalContentHandler(
                    new StreamWriterToContentHandlerConverter(omOutput));
        }

        XMLStreamWriter writer = omOutput.getXmlStreamWriter();
        if (this.getNamespace() != null) {
            String prefix = this.getNamespace().getPrefix();
            String nameSpaceName = this.getNamespace().getName();
            writer.writeStartElement(prefix, SOAP11Constants.SOAP_FAULT_ACTOR_LOCAL_NAME,
                    nameSpaceName);
        } else {
            writer.writeStartElement(
                    SOAP11Constants.SOAP_FAULT_ACTOR_LOCAL_NAME);
        }
        OMSerializerUtil.serializeAttributes(this, omOutput);
        OMSerializerUtil.serializeNamespaces(this, omOutput);

        String text = this.getText();
        writer.writeCharacters(text);
        writer.writeEndElement();

        //serilize siblings
        if (this.nextSibling != null) {
            nextSibling.serialize(omOutput);
        } else if (this.parent != null) {
            if (!this.parent.isComplete()) {
                builder.setCache(cache);
                builder.next();
            }
        }

    }
,
>
, <(startLine=34 endLine=49 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00301/modules/core/test/org/apache/axis/deployment/BadServiceXMLTest.java)
    public void testBadServiceXML() {
        try {
            InputStream in = new FileInputStream(getTestResourceFile("deployment/BadService.xml"));
            DeploymentParser parser = new DeploymentParser(in, null);
            ServiceDescription axisService = new ServiceDescription();
            parser.parseServiceXML(axisService);
            fail("this must failed gracefully with DeploymentException or FileNotFoundException");
        } catch (FileNotFoundException e) {
            return;
        } catch (DeploymentException e) {
            return;
        } catch (Exception e) {
            return;
        }

    }
,
(startLine=34 endLine=49 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00301/modules/core/test/org/apache/axis/deployment/BadServerXMLTest.java)
    public void testBadServerXML() {
        try {
            InputStream in = new FileInputStream(getTestResourceFile("deployment/BadServer.xml"));
            DeploymentParser parser = new DeploymentParser(in, null);
            GlobalDescription glabl = new GlobalDescription();
            parser.processGlobalConfig(glabl,DeploymentConstants.SERVERST);
            fail("this must failed gracefully with DeploymentException or FileNotFoundException");
        } catch (FileNotFoundException e) {
            return;
        } catch (DeploymentException e) {
            return;
        } catch (Exception e) {
            return;
        }

    }
,
(startLine=34 endLine=49 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00301/modules/core/test/org/apache/axis/deployment/BadModuleTest.java)
    public void testBadModuleXML() {
        try {
            InputStream in = new FileInputStream(getTestResourceFile("deployment/Badmodule.xml"));
            DeploymentParser parser = new DeploymentParser(in, null);
            GlobalDescription glabl = new GlobalDescription();
            parser.processGlobalConfig(glabl,DeploymentConstants.SERVERST);
            fail("this must failed gracefully with DeploymentException or FileNotFoundException");
        } catch (FileNotFoundException e) {
            return;
        } catch (DeploymentException e) {
            return;
        } catch (Exception e) {
            return;
        }

    }
,
>
, <(startLine=491 endLine=514 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00211/modules/deployment/src/java/org/apache/axis/deployment/DeploymentParser.java)
        for (int i = 0; i < attribCount; i++) {
            String attname = pullparser.getAttributeLocalName(i);
            String attvalue = pullparser.getAttributeValue(i);

            if (CLASSNAME.equals(attname)) {
                handler.setClassName(attvalue);
            } else if (ATTNAME.equals(attname)) {
                if (ref_name) {
                    throw new DeploymentException("Hander canot have both name and ref  " + attvalue);
                } else {
                    handler.setName(new QName(attvalue));
                    ref_name = true;
                }
            } else if (REF.equals(attname)) {
                if (ref_name) {
                    throw new DeploymentException("Hander canot have both name and ref  " + attvalue);
                } else {
                    ref_name = true;
                    throw new UnsupportedOperationException("This should be implmented");
                    //TODO implement this

                }
            }
        }
,
(startLine=723 endLine=746 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00211/modules/deployment/src/java/org/apache/axis/deployment/DeploymentParser.java)
        if (attribCount > 0) {
            for (int i = 0; i < attribCount; i++) {
                String attname = pullparser.getAttributeLocalName(i);
                String attvalue = pullparser.getAttributeValue(i);

                if (ATTNAME.equals(attname)) {
                    if (ref_name) {
                        throw new DeploymentException("Module canot have both name and ref  " + attvalue);
                    } else {
                        module.setName(new QName(attvalue));
                        ref_name = true;
                    }
                } else if (REF.equals(attname)) {
                    if (ref_name) {
                        throw new DeploymentException("Module canot have both name and ref  " + attvalue);
                    } else {
                        //TODO implement this , boz this is not complete
                        //  module.setRef(attvalue);
                        ref_name = true;
                        throw new UnsupportedOperationException("This should be implemented");
                    }
                }
            }
        }
,
>
, <(startLine=203 endLine=281 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01377/modules/adb/src/org/apache/axis2/rpc/receivers/ejb/EJB3Util.java)
        private Object getEJBInterface(AxisService service, String beanJndiName) throws AxisFault {
            Object ejbRemote = null;

            // Set up an InitialContext and use it get the beanJndiName from
            // JNDI
            try {
                Properties properties = null;

                // collect all the properties we need to access JNDI:
                // username, password, factoryclass, contextUrl

                // username
                Parameter username = service.getParameter(EJB_JNDI_USERNAME);
                if (username != null) {
                    if (properties == null)
                        properties = new Properties();
                    properties.setProperty(Context.SECURITY_PRINCIPAL,
                            ((String) username.getValue()).trim());
                }

                // password
                Parameter password = service.getParameter(EJB_JNDI_PASSWORD);
                if (password != null) {
                    if (properties == null)
                        properties = new Properties();
                    properties.setProperty(Context.SECURITY_CREDENTIALS,
                            ((String) password.getValue()).trim());
                }

                // factory class
                Parameter factoryClass = service.getParameter(EJB_INITIAL_CONTEXT_FACTORY);
                if (factoryClass != null) {
                    if (properties == null)
                        properties = new Properties();
                    properties.setProperty(Context.INITIAL_CONTEXT_FACTORY,
                            ((String) factoryClass.getValue()).trim());
                }

                // contextUrl
                Parameter contextUrl = service.getParameter(EJB_PROVIDER_URL);
                if (contextUrl != null) {
                    if (properties == null)
                        properties = new Properties();
                    properties.setProperty(Context.PROVIDER_URL,
                            ((String) contextUrl.getValue()).trim());
                }

                // get context using these properties
                InitialContext context = getContext(properties);

                // if we didn't get a context, fail
                if (context == null)
                    throw new AxisFault("cannot create initial context");

                try {
                    ejbRemote = lookUpEJBInterface(context, beanJndiName);
                } catch (Exception e) {
                    ejbRemote = lookUpEJBInterface(context, beanJndiName); // Retry
                                                                           // for
                                                                           // the
                                                                           // 2nd
                                                                           // time
                                                                           // to
                                                                           // overcome
                                                                           // issues
                                                                           // related
                                                                           // to
                                                                           // cahing
                }

                if (ejbRemote == null)
                    throw new AxisFault("cannot find jndi home");
            } catch (Exception exception) {

                throw AxisFault.makeFault(exception);
            }

            return ejbRemote;
        }
,
(startLine=213 endLine=281 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01377/modules/adb/src/org/apache/axis2/rpc/receivers/ejb/EJBUtil.java)
        private Object getEJBHome(AxisService service, String beanJndiName) throws AxisFault {
            Object ejbHome = null;

            // Set up an InitialContext and use it get the beanJndiName from JNDI
            try {
                Properties properties = null;

                // collect all the properties we need to access JNDI:
                // username, password, factoryclass, contextUrl

                // username
                Parameter username = service.getParameter(EJB_JNDI_USERNAME);
                if (username != null) {
                    if (properties == null)
                        properties = new Properties();
                    properties.setProperty(Context.SECURITY_PRINCIPAL,
                                           ((String)username.getValue()).trim());
                }

                // password
                Parameter password = service.getParameter(EJB_JNDI_PASSWORD);
                if (password != null) {
                    if (properties == null)
                        properties = new Properties();
                    properties.setProperty(Context.SECURITY_CREDENTIALS,
                                           ((String)password.getValue()).trim());
                }

                // factory class
                Parameter factoryClass = service.getParameter(EJB_INITIAL_CONTEXT_FACTORY);
                if (factoryClass != null) {
                    if (properties == null)
                        properties = new Properties();
                    properties.setProperty(Context.INITIAL_CONTEXT_FACTORY,
                                           ((String)factoryClass.getValue()).trim());
                }

                // contextUrl
                Parameter contextUrl = service.getParameter(EJB_PROVIDER_URL);
                if (contextUrl != null) {
                    if (properties == null)
                        properties = new Properties();
                    properties.setProperty(Context.PROVIDER_URL,
                                           ((String)contextUrl.getValue()).trim());
                }

                // get context using these properties
                InitialContext context = getContext(properties);

                // if we didn't get a context, fail
                if (context == null)
                    throw new AxisFault("cannot create initial context");

                try {
                    ejbHome = getEJBHome(context, beanJndiName);
                } catch (Exception e) {
                    ejbHome = getEJBHome(context, beanJndiName); // Retry for the 2nd time to overcome issues related to cahing
                } 

                if (ejbHome == null)
                    throw new AxisFault("cannot find jndi home");
            }
            catch (Exception exception) {

                throw AxisFault.makeFault(exception);
            }

            return ejbHome;
        }
,
>
, <(startLine=70 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00497/modules/xml/src/org/apache/axis2/om/impl/llom/traverse/OMChildElementIterator.java)
    public void remove() {
        if (!nextCalled) {
            throw new IllegalStateException(
                    "next method has not yet being called");
        }
        if (removeCalled) {
            throw new IllegalStateException("remove has already being called");
        }
        removeCalled = true;

        // since this acts on the last child there is no need to mess with the current child
        if (lastChild == null) {
            throw new OMException("cannot remove a child at this stage!");
        }
        lastChild.detach();
    }
,
(startLine=70 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00497/modules/xml/src/org/apache/axis2/om/impl/llom/traverse/OMChildrenIterator.java)
    public void remove() {
        if (!nextCalled) {
            throw new IllegalStateException(
                    "next method has not yet being called");
        }
        if (removeCalled) {
            throw new IllegalStateException("remove has already being called");
        }
        removeCalled = true;

        // since this acts on the last child there is no need to mess with the current child
        if (lastChild == null) {
            throw new OMException("cannot remove a child at this stage!");
        }
        lastChild.detach();
    }
,
>
, <(startLine=896 endLine=909 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00642/modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java)
    protected Document createDOMDocumentForException() {
        Document doc = getEmptyDocument();
        Element rootElement = doc.createElement("callback");

        addAttribute(doc, "package", codeGenConfiguration.getPackageName(), rootElement);
        addAttribute(doc, "name",
                makeJavaClassName(axisService.getName()) + CALL_BACK_HANDLER_SUFFIX, rootElement);

        // TODO JAXRPC mapping support should be considered here ??
        this.loadOperations(doc, rootElement, null);

        doc.appendChild(rootElement);
        return doc;
    }
,
(startLine=935 endLine=948 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00642/modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java)
    protected Document createDOMDocumentForCallbackHandler() {
        Document doc = getEmptyDocument();
        Element rootElement = doc.createElement("callback");

        addAttribute(doc, "package", codeGenConfiguration.getPackageName(), rootElement);
        addAttribute(doc, "name",
                makeJavaClassName(axisService.getName()) + CALL_BACK_HANDLER_SUFFIX, rootElement);

        // TODO JAXRPC mapping support should be considered here ??
        this.loadOperations(doc, rootElement, null);

        doc.appendChild(rootElement);
        return doc;
    }
,
>
, <(startLine=72 endLine=78 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00392/modules/xml/src/org/apache/axis/soap/impl/llom/soap11/SOAP11HeaderBlockImpl.java)
    public void setMustUnderstand(String mustUnderstand) throws SOAPProcessingException {
        if (SOAPConstants.ATTR_MUSTUNDERSTAND_TRUE.equals(mustUnderstand) || SOAPConstants.ATTR_MUSTUNDERSTAND_FALSE.equals(mustUnderstand) || SOAPConstants.ATTR_MUSTUNDERSTAND_0.equals(mustUnderstand) || SOAPConstants.ATTR_MUSTUNDERSTAND_1.equals(mustUnderstand)) {
            setAttribute(SOAPConstants.ATTR_MUSTUNDERSTAND, mustUnderstand, SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        } else {
            throw new SOAPProcessingException("mustUndertand should be one of \"true\", \"false\", \"0\" or \"1\" ");
        }
    }
,
(startLine=75 endLine=81 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00392/modules/xml/src/org/apache/axis/soap/impl/llom/soap12/SOAP12HeaderBlockImpl.java)
    public void setMustUnderstand(String mustUnderstand) throws SOAPProcessingException {
        if (SOAPConstants.ATTR_MUSTUNDERSTAND_TRUE.equals(mustUnderstand) || SOAPConstants.ATTR_MUSTUNDERSTAND_FALSE.equals(mustUnderstand) || SOAPConstants.ATTR_MUSTUNDERSTAND_0.equals(mustUnderstand) || SOAPConstants.ATTR_MUSTUNDERSTAND_1.equals(mustUnderstand)) {
            setAttribute(SOAPConstants.ATTR_MUSTUNDERSTAND, mustUnderstand, SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        } else {
            throw new SOAPProcessingException("mustUndertand should be one of \"true\", \"false\", \"0\" or \"1\" ");
        }
    }
,
>
, <(startLine=30 endLine=37 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00157/dev/scratch/prototype2/src/samples/userguide/sample1/src/org/apache/axis/samples/userguide/sample1/client/EchoString.java)
	public static void main(String[] args) throws Exception{
		InteropTest_Stub stub =new InteropTest_Stub();
		URL url = new URL("http","127.0.0.1",EngineUtils.TESTING_PORT,"/axis/services/EchoXMLService");
		stub.setEndPointReference(new EndpointReference(AddressingConstants.WSA_TO, url.toString()));
		System.out.println(stub.echoString("does this damn think work"));
		
		
	}
,
(startLine=31 endLine=38 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00157/dev/scratch/prototype2/src/samples/userguide/sample3/src/org/apache/axis/samples/userguide/sample3/client/EchoString.java)
	public static void main(String[] args) throws Exception{
		InteropTest_Stub stub =new InteropTest_Stub();
		URL url = new URL("http","127.0.0.1",EngineUtils.TESTING_PORT,"/axis2/services/EchoXMLService");
		stub.setEndPointReference(new EndpointReference(AddressingConstants.WSA_TO, url.toString()));
		System.out.println(stub.echoString("does this damn think work"));
		
		
	}
,
>
, <(startLine=57 endLine=66 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00982/modules/jaxws/test/org/apache/axis2/jaxws/nonanonymous/complextype/NonAnonymousComplexTypeTests.java)
		try {
			String msg = "Hello Server";
		    EchoMessagePortType myPort = (new EchoMessageService()).getEchoMessagePort();
	        BindingProvider p = (BindingProvider) myPort;
	        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);

		    String response = myPort.echoMessage(msg);
            TestLogger.logger.debug(response);
            TestLogger.logger.debug("------------------------------");
		} catch (WebServiceException webEx) {
,
(startLine=57 endLine=66 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00982/modules/jaxws-integration/test/org/apache/axis2/jaxws/nonanonymous/complextype/NonAnonymousComplexTypeTests.java)
		try {
			String msg = "Hello Server";
		    EchoMessagePortType myPort = (new EchoMessageService()).getEchoMessagePort();
	        BindingProvider p = (BindingProvider) myPort;
	        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);

		    String response = myPort.echoMessage(msg);
            TestLogger.logger.debug(response);
            TestLogger.logger.debug("------------------------------");
		} catch (WebServiceException webEx) {
,
>
, <(startLine=70 endLine=86 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00436/modules/samples/test/org/apache/axis2/tcp/TCPTwoChannelEchoRawXMLTest.java)
    protected void setUp() throws Exception {
        UtilsTCPServer.start();

        
        //create and deploy the service
        service =
                Utils.createSimpleService(serviceName,
                        Echo.class.getName(),
                        operationName);
        UtilsTCPServer.deployService(service);

        ServiceDescription service =
                Utils.createSimpleService(serviceName,
                        org.apache.axis2.engine.Echo.class.getName(),
                        operationName);
        serviceContext = UtilServer.createAdressedEnabledClientSide(service);
    }
,
(startLine=72 endLine=88 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00436/modules/samples/test/org/apache/axis2/tcp/TCPEchoRawXMLTest.java)
    protected void setUp() throws Exception {
        UtilsTCPServer.start();

        
        //create and deploy the service
        service =
                Utils.createSimpleService(serviceName,
                        Echo.class.getName(),
                        operationName);
        UtilsTCPServer.deployService(service);

        ServiceDescription service =
                Utils.createSimpleService(serviceName,
                        org.apache.axis2.engine.Echo.class.getName(),
                        operationName);
        serviceContext = UtilServer.createAdressedEnabledClientSide(service);
    }
,
>
, <(startLine=696 endLine=724 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00051/dev/scratch/prototype1/src/java/org/apache/axis/i18n/RB.java)
            catch (MissingResourceException ex) {
                if (curClass == null) {
                    throw ex;
                }

                // Save the first exception
                if (firstEx == null) {
                    firstEx = ex;
                }

                // Get the superclass
                curClass = curClass.getSuperclass();
                if (curClass == null) {
                    if (didNull)
                        throw firstEx;
                    didNull = true;
                    caller = null;
                } else {
                    String cname = curClass.getName();
                    if (cname.startsWith("java.") ||
                        cname.startsWith("javax.")) {
                        if (didNull)
                            throw firstEx;
                        didNull = true;
                        caller = null;
                        curClass = null;
                    }
                }
            }
,
(startLine=696 endLine=724 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00051/dev/scratch/srinath_eran_jaliya/src/java/org/apache/axis/i18n/RB.java)
            catch (MissingResourceException ex) {
                if (curClass == null) {
                    throw ex;
                }

                // Save the first exception
                if (firstEx == null) {
                    firstEx = ex;
                }

                // Get the superclass
                curClass = curClass.getSuperclass();
                if (curClass == null) {
                    if (didNull)
                        throw firstEx;
                    didNull = true;
                    caller = null;
                } else {
                    String cname = curClass.getName();
                    if (cname.startsWith("java.") ||
                        cname.startsWith("javax.")) {
                        if (didNull)
                            throw firstEx;
                        didNull = true;
                        caller = null;
                        curClass = null;
                    }
                }
            }
,
>
, <(startLine=111 endLine=124 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00360/modules/core/src/org/apache/axis/receivers/RawXMLINOnlyMessageRecevier.java)
                } else if (WSDLService.STYLE_RPC.equals(style)) {
                    parmeter = methodElement.getFirstElement();
                    Object[] parms = new Object[] { parmeter };

                    // invoke the WebService
                    OMElement result = (OMElement) method.invoke(obj, parms);
                    SOAPFactory fac = OMAbstractFactory.getSOAP11Factory();
                    envelope = fac.getDefaultEnvelope();

                    OMNamespace ns = fac.createOMNamespace("http://soapenc/", "res");
                    OMElement responseMethodName = fac.createOMElement(methodName + "Response", ns);
                    responseMethodName.addChild(result);
                    envelope.getBody().addChild(responseMethodName);
                } else {
,
(startLine=111 endLine=124 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00360/modules/core/src/org/apache/axis/receivers/RawXMLINOutMessageRecevier.java)
                } else if (WSDLService.STYLE_RPC.equals(style)) {
                    parmeter = methodElement.getFirstElement();
                    Object[] parms = new Object[] { parmeter };

                    // invoke the WebService
                    OMElement result = (OMElement) method.invoke(obj, parms);
                    SOAPFactory fac = OMAbstractFactory.getSOAP11Factory();
                    envelope = fac.getDefaultEnvelope();

                    OMNamespace ns = fac.createOMNamespace("http://soapenc/", "res");
                    OMElement responseMethodName = fac.createOMElement(methodName + "Response", ns);
                    responseMethodName.addChild(result);
                    envelope.getBody().addChild(responseMethodName);
                } else {
,
(startLine=143 endLine=156 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00360/modules/core/src/org/apache/axis/receivers/RawXMLINOutMessageRecevier.java)
                } else if (WSDLService.STYLE_RPC.equals(style)) {
                    
                    Object[] parms = new Object[0];

                    // invoke the WebService
                    OMElement result = (OMElement) method.invoke(obj, parms);
                    SOAPFactory fac = OMAbstractFactory.getSOAP11Factory();
                    envelope = fac.getDefaultEnvelope();

                    OMNamespace ns = fac.createOMNamespace("http://soapenc/", "res");
                    OMElement responseMethodName = fac.createOMElement(methodName + "Response", ns);
                    responseMethodName.addChild(result);
                    envelope.getBody().addChild(responseMethodName);
                } else {
,
>
, <(startLine=369 endLine=397 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00966/modules/kernel/src/org/apache/axis2/deployment/POJODeployer.java)
    public void unDeploy(String fileName) {
        fileName = Utils.getShortFileName(fileName);
        if (fileName.endsWith(".class")) {
            String className = fileName.replaceAll(".class", "");
            try {
                AxisServiceGroup serviceGroup =
                        configCtx.getAxisConfiguration().removeServiceGroup(className);
                configCtx.removeServiceGroupContext(serviceGroup);
                log.info(Messages.getMessage(DeploymentErrorMsgs.SERVICE_REMOVED,
                                             fileName));
            } catch (AxisFault axisFault) {
                //May be a faulty service
                log.debug(Messages.getMessage(DeploymentErrorMsgs.FAULTY_SERVICE_REMOVAL,axisFault.getMessage()),axisFault);
                configCtx.getAxisConfiguration().removeFaultyService(fileName);
            }
        } else if (fileName.endsWith(".jar")) {
            try {
                AxisServiceGroup serviceGroup =
                        configCtx.getAxisConfiguration().removeServiceGroup(fileName);
                configCtx.removeServiceGroupContext(serviceGroup);
                log.info(Messages.getMessage(DeploymentErrorMsgs.SERVICE_REMOVED,
                                             fileName));
            } catch (AxisFault axisFault) {
                //May be a faulty service
                log.debug(Messages.getMessage(DeploymentErrorMsgs.FAULTY_SERVICE_REMOVAL,axisFault.getMessage()),axisFault);
                configCtx.getAxisConfiguration().removeFaultyService(fileName);
            }
        }
    }
,
(startLine=302 endLine=330 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00966/modules/jaxws/test/org/apache/axis2/jaxws/framework/JAXWSDeployer.java)
    public void unDeploy(String fileName) {
        fileName = Utils.getShortFileName(fileName);
        if (fileName.endsWith(".class")) {
            String className = fileName.replaceAll(".class", "");
            try {
                AxisServiceGroup serviceGroup =
                        configCtx.getAxisConfiguration().removeServiceGroup(className);
                configCtx.removeServiceGroupContext(serviceGroup);
                log.info(Messages.getMessage(DeploymentErrorMsgs.SERVICE_REMOVED,
                                             fileName));
            } catch (AxisFault axisFault) {
                //May be a faulty service
                log.debug(Messages.getMessage(DeploymentErrorMsgs.FAULTY_SERVICE_REMOVAL,axisFault.getMessage()),axisFault);
                configCtx.getAxisConfiguration().removeFaultyService(fileName);
            }
        } else if (fileName.endsWith(".jar")) {
            try {
                AxisServiceGroup serviceGroup =
                        configCtx.getAxisConfiguration().removeServiceGroup(fileName);
                configCtx.removeServiceGroupContext(serviceGroup);
                log.info(Messages.getMessage(DeploymentErrorMsgs.SERVICE_REMOVED,
                                             fileName));
            } catch (AxisFault axisFault) {
                //May be a faulty service
                log.debug(Messages.getMessage(DeploymentErrorMsgs.FAULTY_SERVICE_REMOVAL,axisFault.getMessage()),axisFault);
                configCtx.getAxisConfiguration().removeFaultyService(fileName);
            }
        }
    }
,
>
, <(startLine=76 endLine=90 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00585/modules/integration/test/org/apache/axis2/engine/PausingHandlerExecutionTest.java)
    {
      initDone = true;
      ArrayList globalInPhases = UtilServer.getConfigurationContext().getAxisConfiguration().getGlobalInFlow();
      for (int i = 0; i < globalInPhases.size(); i++)
      {
        Phase globalInPhase = (Phase)globalInPhases.get(i);
        if (PhaseMetadata.PHASE_PRE_DISPATCH.equals(globalInPhase.getPhaseName()))
        {
          globalInPhase.addHandler(new TestHandler("In1"));
          middleGlobalInHandler = new TestHandler("In2");
          globalInPhase.addHandler(middleGlobalInHandler);
          globalInPhase.addHandler(new TestHandler("In3"));
        }
      }
    }
,
(startLine=123 endLine=138 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00585/modules/integration/test/org/apache/axis2/engine/HandlerExecutionTest.java)
    {
      initDone = true;

      ArrayList globalInPhases = UtilServer.getConfigurationContext().getAxisConfiguration().getGlobalInFlow();
      for (int i = 0; i < globalInPhases.size(); i++)
      {
        Phase globalInPhase = (Phase)globalInPhases.get(i);
        if (PhaseMetadata.PHASE_PRE_DISPATCH.equals(globalInPhase.getPhaseName()))
        {
          globalInPhase.addHandler(new TestHandler("In1"));
          middleGlobalInHandler = new TestHandler("In2");
          globalInPhase.addHandler(middleGlobalInHandler);
          globalInPhase.addHandler(new TestHandler("In3"));
        }
      }
    }
,
>
, <(startLine=75 endLine=107 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00639/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/SOAPMessageDispatchTest.java)
	public void testSOAPMessageAsyncCallbackMessageMode() throws Exception {
		
        String basedir = new File(System.getProperty("basedir",".")).getAbsolutePath();
        String messageResource = new File(basedir, this.messageResource).getAbsolutePath();
        
		System.out.println("---------------------------------------");
		System.out.println("test: " + getName());
		//Initialize the JAX-WS client artifacts
		Service svc = Service.create(serviceName);
		svc.addPort(portName, null, url);
		Dispatch<SOAPMessage> dispatch = svc.createDispatch(portName,
				SOAPMessage.class, Service.Mode.MESSAGE);

		//Create SOAPMessage Object no attachments here.
		FileInputStream inputStream = new FileInputStream(messageResource);
		MessageFactory factory = MessageFactory.newInstance();
		SOAPMessage msgObject = factory.createMessage(null, inputStream);
		
        AsyncCallback<SOAPMessage> ac = new AsyncCallback<SOAPMessage>();
		//Invoke the Dispatch
		System.out.println(">> Invoking sync Dispatch");
		Future<?> monitor = dispatch.invokeAsync(msgObject, ac);

		assertNotNull("dispatch invokeAsync returned null Future<?>", monitor);
		while (!monitor.isDone()) {
            System.out.println(">> Async invocation still not complete");
            Thread.sleep(1000);
        }
        
        SOAPMessage response = ac.getValue();
        assertNotNull("dispatch invoke returned null", response);
        response.writeTo(System.out);
	}
,
(startLine=109 endLine=140 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00639/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/SOAPMessageDispatchTest.java)
    public void testSOAPMessageAsyncPollingMessageMode() throws Exception {
        
        String basedir = new File(System.getProperty("basedir",".")).getAbsolutePath();
        String messageResource = new File(basedir, this.messageResource).getAbsolutePath();
        
        System.out.println("---------------------------------------");
        System.out.println("test: " + getName());
        //Initialize the JAX-WS client artifacts
        Service svc = Service.create(serviceName);
        svc.addPort(portName, null, url);
        Dispatch<SOAPMessage> dispatch = svc.createDispatch(portName,
                SOAPMessage.class, Service.Mode.MESSAGE);

        //Create SOAPMessage Object no attachments here.
        FileInputStream inputStream = new FileInputStream(messageResource);
        MessageFactory factory = MessageFactory.newInstance();
        SOAPMessage msgObject = factory.createMessage(null, inputStream);

        //Invoke the Dispatch
        System.out.println(">> Invoking sync Dispatch");
        Response<SOAPMessage> asyncResponse = dispatch.invokeAsync(msgObject);

        assertNotNull("dispatch invokeAsync returned null Response", asyncResponse);
        while (!asyncResponse.isDone()) {
            System.out.println(">> Async invocation still not complete");
            Thread.sleep(1000);
        }
        
        SOAPMessage response = asyncResponse.get();
        assertNotNull("dispatch invoke returned null", response);
        response.writeTo(System.out);
    }
,
>
, <(startLine=516 endLine=530 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00850/modules/kernel/src/org/apache/axis2/transport/jms/JMSConnectionFactory.java)
    public EndpointReference getEPRForDestination(String destination) {

        StringBuffer sb = new StringBuffer();
        sb.append(JMSConstants.JMS_PREFIX).append(destination);
        sb.append("?").append(JMSConstants.CONFAC_JNDI_NAME_PARAM).
                append("=").append(getJndiName());
        Iterator props = getProperties().keySet().iterator();
        while (props.hasNext()) {
            String key = (String) props.next();
            String value = (String) getProperties().get(key);
            sb.append("&").append(key).append("=").append(value);
        }

        return new EndpointReference(sb.toString());
    }
,
(startLine=271 endLine=283 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00850/modules/kernel/src/org/apache/axis2/transport/jms/JMSListener.java)
    private static String getEPR(JMSConnectionFactory cf, String destination) {
        StringBuffer sb = new StringBuffer();
        sb.append(JMSConstants.JMS_PREFIX).append(destination);
        sb.append("?").append(JMSConstants.CONFAC_JNDI_NAME_PARAM).
                append("=").append(cf.getJndiName());
        Iterator props = cf.getProperties().keySet().iterator();
        while (props.hasNext()) {
            String key = (String) props.next();
            String value = (String) cf.getProperties().get(key);
            sb.append("&").append(key).append("=").append(value);
        }
        return sb.toString();
    }
,
>
, <(startLine=401 endLine=425 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00983/modules/jaxws/test/org/apache/axis2/jaxws/spi/ClientMetadataPortTest.java)
    public void testEnableMTOM() {
        QName serviceQName = new QName(namespaceURI, svcLocalPart);
        URL wsdlUrl = ClientMetadataTest.getWsdlURL(multiPortWsdl);
        DescriptionBuilderComposite sparseComposite = new DescriptionBuilderComposite();
        sparseComposite.setIsMTOMEnabled(true);
        ServiceDelegate.setServiceMetadata(sparseComposite);
        Service service = Service.create(wsdlUrl, serviceQName);
        ClientMetadataPortSEI port = service.getPort(ClientMetadataPortSEI.class);
        assertNotNull(port);
        // Verify that MTOM is enabled on this port.
        BindingProvider bindingProvider = (BindingProvider) port;
        SOAPBinding binding = (SOAPBinding) bindingProvider.getBinding();
        assertTrue(binding.isMTOMEnabled());
        
        // Verify that specific ports under this service also have MTOM enabled
        QName port1QN = new QName(namespaceURI, multiPortWsdl_portLocalPart1);
        ClientMetadataPortSEI port1 = service.getPort(port1QN, ClientMetadataPortSEI.class);
        SOAPBinding binding1 = ((SOAPBinding) ((BindingProvider) port1).getBinding());
        assertTrue(binding1.isMTOMEnabled());
        
        QName port2QN = new QName(namespaceURI, multiPortWsdl_portLocalPart2);
        ClientMetadataPortSEI port2 = service.getPort(port2QN, ClientMetadataPortSEI.class);
        SOAPBinding binding2 = ((SOAPBinding) ((BindingProvider) port2).getBinding());
        assertTrue(binding2.isMTOMEnabled());
    }
,
(startLine=401 endLine=425 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00983/modules/jaxws-integration/test/org/apache/axis2/jaxws/spi/ClientMetadataPortTest.java)
    public void testEnableMTOM() {
        QName serviceQName = new QName(namespaceURI, svcLocalPart);
        URL wsdlUrl = ClientMetadataTest.getWsdlURL(multiPortWsdl);
        DescriptionBuilderComposite sparseComposite = new DescriptionBuilderComposite();
        sparseComposite.setIsMTOMEnabled(true);
        ServiceDelegate.setServiceMetadata(sparseComposite);
        Service service = Service.create(wsdlUrl, serviceQName);
        ClientMetadataPortSEI port = service.getPort(ClientMetadataPortSEI.class);
        assertNotNull(port);
        // Verify that MTOM is enabled on this port.
        BindingProvider bindingProvider = (BindingProvider) port;
        SOAPBinding binding = (SOAPBinding) bindingProvider.getBinding();
        assertTrue(binding.isMTOMEnabled());
        
        // Verify that specific ports under this service also have MTOM enabled
        QName port1QN = new QName(namespaceURI, multiPortWsdl_portLocalPart1);
        ClientMetadataPortSEI port1 = service.getPort(port1QN, ClientMetadataPortSEI.class);
        SOAPBinding binding1 = ((SOAPBinding) ((BindingProvider) port1).getBinding());
        assertTrue(binding1.isMTOMEnabled());
        
        QName port2QN = new QName(namespaceURI, multiPortWsdl_portLocalPart2);
        ClientMetadataPortSEI port2 = service.getPort(port2QN, ClientMetadataPortSEI.class);
        SOAPBinding binding2 = ((SOAPBinding) ((BindingProvider) port2).getBinding());
        assertTrue(binding2.isMTOMEnabled());
    }
,
>
, <(startLine=361 endLine=479 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00655/modules/kernel/src/org/apache/axis2/transport/http/RESTSender.java)
                             String soapActionString) throws MalformedURLException, AxisFault {

        // execute the HtttpMethodBase - a connection manager can be given for
        // handle multiple
        HttpClient httpClient = getHttpClient(msgContext);

        PostMethod postMethod = new PostMethod(url.toString());
        if (isAuthenticationEnabled(msgContext)) {
            postMethod.setDoAuthentication(true);
        }
        String httpContentType;

        if (msgContext.getProperty(Constants.Configuration.CONTENT_TYPE) != null) {
            httpContentType = (String) msgContext.getProperty(Constants.Configuration.CONTENT_TYPE);
        } else {
            httpContentType = HTTPConstants.MEDIA_TYPE_APPLICATION_XML;
        }

        String charEncoding =
                (String) msgContext.getProperty(Constants.Configuration.CHARACTER_SET_ENCODING);

        if (charEncoding == null) {
            charEncoding = MessageContext.DEFAULT_CHAR_SET_ENCODING;
        }

        String urlString = url.toString();
        int separator = urlString.indexOf('{');
        if (separator > 0) {
            String path = urlString.substring(0, separator - 1);
            String query = urlString.substring(separator - 1);
            String replacedQuery;
            if (httpContentType.equalsIgnoreCase(HTTPConstants.MEDIA_TYPE_X_WWW_FORM)) {
                replacedQuery = applyURITemplating(msgContext, query, true);
            } else {
                replacedQuery = applyURITemplating(msgContext, query, false);
            }
            url = new URL(path + replacedQuery);
        }

        postMethod.setPath(url.getPath());
        postMethod.setQueryString(url.getQuery());

        // if POST as application/x-www-form-urlencoded
        RequestData reqData;

        if (httpContentType.equalsIgnoreCase(HTTPConstants.MEDIA_TYPE_X_WWW_FORM)) {
            reqData = createRequest(msgContext, dataout);
            if (reqData.bodyRequest == null) {
                reqData.bodyRequest = "0";
            }
            postMethod.setRequestEntity(
                    new AxisRESTRequestEntity(reqData.bodyRequest, httpContentType));

        } else if (httpContentType.equalsIgnoreCase(HTTPConstants.MEDIA_TYPE_MULTIPART_FORM_DATA)) {
            Part[] parts = createMultipatFormDataRequest(msgContext, dataout);
            postMethod.setRequestEntity(new MultipartRequestEntity(parts, postMethod.getParams()));
        } else {
            postMethod.setRequestEntity(new AxisRequestEntity(dataout, chunked, msgContext,
                                                              charEncoding, soapActionString,
                                                              httpContentType));
        }

        if (!httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10) && chunked) {
            postMethod.setContentChunked(true);
        }

        postMethod.setRequestHeader(HTTPConstants.HEADER_HOST, url.getHost());

        if (httpVersion != null) {
            if (httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10)) {
                httpClient.getParams().setVersion(HttpVersion.HTTP_1_0);
                postMethod.setRequestHeader(HTTPConstants.HEADER_CONNECTION,
                                            HTTPConstants.HEADER_CONNECTION_KEEPALIVE);
            } else {

                // allowing keep-alive for 1.1
                postMethod.setRequestHeader(HTTPConstants.HEADER_CONNECTION,
                                            HTTPConstants.HEADER_CONNECTION_KEEPALIVE);
                postMethod.setRequestHeader(HTTPConstants.HEADER_EXPECT,
                                            HTTPConstants.HEADER_EXPECT_100_Continue);
            }
        }

        /**
         * main excecution takes place..
         */
        try {
            executeMethod(httpClient, msgContext, url, postMethod);

            if (postMethod.getStatusCode() == HttpStatus.SC_OK) {
                processResponse(postMethod, msgContext);

                return;
            } else if (postMethod.getStatusCode() == HttpStatus.SC_ACCEPTED) {
                return;
            } else if (postMethod.getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR) {
                Header contenttypeHheader =
                        postMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_TYPE);

                if (contenttypeHheader != null) {
                    String value = contenttypeHheader.getValue();

                    if ((value.indexOf(SOAP11Constants.SOAP_11_CONTENT_TYPE) >= 0)
                            || (value.indexOf(SOAP12Constants.SOAP_12_CONTENT_TYPE) >= 0)) {
                        processResponse(postMethod, msgContext);

                        return;
                    }
                }
            }

            throw new AxisFault(Messages.getMessage("transportError",
                                                    String.valueOf(postMethod.getStatusCode()),
                                                    postMethod.getResponseBodyAsString()));
        } catch (Exception e) {
            log.error("Error in processing POST request", e);
            throw new AxisFault("Error in processing POST request");
        }
    }
,
(startLine=483 endLine=601 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00655/modules/kernel/src/org/apache/axis2/transport/http/RESTSender.java)
                            String soapActionString) throws MalformedURLException, AxisFault {

        // execute the HtttpMethodBase - a connection manager can be given for
        // handle multiple
        HttpClient httpClient = getHttpClient(msgContext);

        PutMethod putMethod = new PutMethod(url.toString());
        if (isAuthenticationEnabled(msgContext)) {
            putMethod.setDoAuthentication(true);
        }
        String httpContentType;

        if (msgContext.getProperty(Constants.Configuration.CONTENT_TYPE) != null) {
            httpContentType = (String) msgContext.getProperty(Constants.Configuration.CONTENT_TYPE);
        } else {
            httpContentType = HTTPConstants.MEDIA_TYPE_APPLICATION_XML;
        }

        String charEncoding =
                (String) msgContext.getProperty(Constants.Configuration.CHARACTER_SET_ENCODING);

        if (charEncoding == null) {
            charEncoding = MessageContext.DEFAULT_CHAR_SET_ENCODING;
        }

        String urlString = url.toString();
        int separator = urlString.indexOf('{');
        if (separator > 0) {
            String path = urlString.substring(0, separator - 1);
            String query = urlString.substring(separator - 1);
            String replacedQuery;
            if (httpContentType.equalsIgnoreCase(HTTPConstants.MEDIA_TYPE_X_WWW_FORM)) {
                replacedQuery = applyURITemplating(msgContext, query, true);
            } else {
                replacedQuery = applyURITemplating(msgContext, query, false);
            }
            url = new URL(path + replacedQuery);
        }

        putMethod.setPath(url.getPath());
        putMethod.setQueryString(url.getQuery());

        // if POST as application/x-www-form-urlencoded
        RequestData reqData;

        if (httpContentType.equalsIgnoreCase(HTTPConstants.MEDIA_TYPE_X_WWW_FORM)) {
            reqData = createRequest(msgContext, dataout);
            if (reqData.bodyRequest == null) {
                reqData.bodyRequest = "0";
            }
            putMethod.setRequestEntity(
                    new AxisRESTRequestEntity(reqData.bodyRequest, httpContentType));

        } else if (httpContentType.equalsIgnoreCase(HTTPConstants.MEDIA_TYPE_MULTIPART_FORM_DATA)) {
             Part[] parts = createMultipatFormDataRequest(msgContext, dataout);
             putMethod.setRequestEntity(new MultipartRequestEntity(parts, putMethod.getParams()));
        } else {
            putMethod.setRequestEntity(new AxisRequestEntity(dataout, chunked, msgContext,
                                                             charEncoding, soapActionString,
                                                             httpContentType));
        }

        if (!httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10) && chunked) {
            putMethod.setContentChunked(true);
        }

        putMethod.setRequestHeader(HTTPConstants.HEADER_HOST, url.getHost());

        if (httpVersion != null) {
            if (httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10)) {
                httpClient.getParams().setVersion(HttpVersion.HTTP_1_0);
                putMethod.setRequestHeader(HTTPConstants.HEADER_CONNECTION,
                                           HTTPConstants.HEADER_CONNECTION_KEEPALIVE);
            } else {

                // allowing keep-alive for 1.1
                putMethod.setRequestHeader(HTTPConstants.HEADER_CONNECTION,
                                           HTTPConstants.HEADER_CONNECTION_KEEPALIVE);
                putMethod.setRequestHeader(HTTPConstants.HEADER_EXPECT,
                                           HTTPConstants.HEADER_EXPECT_100_Continue);
            }
        }

        /**
         * main excecution takes place..
         */
        try {
            executeMethod(httpClient, msgContext, url, putMethod);

            if (putMethod.getStatusCode() == HttpStatus.SC_OK) {
                processResponse(putMethod, msgContext);

                return;
            } else if (putMethod.getStatusCode() == HttpStatus.SC_ACCEPTED) {
                return;
            } else if (putMethod.getStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR) {
                Header contenttypeHheader =
                        putMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_TYPE);

                if (contenttypeHheader != null) {
                    String value = contenttypeHheader.getValue();

                    if ((value.indexOf(SOAP11Constants.SOAP_11_CONTENT_TYPE) >= 0)
                            || (value.indexOf(SOAP12Constants.SOAP_12_CONTENT_TYPE) >= 0)) {
                        processResponse(putMethod, msgContext);

                        return;
                    }
                }
            }

            throw new AxisFault(Messages.getMessage("transportError",
                                                    String.valueOf(putMethod.getStatusCode()),
                                                    putMethod.getResponseBodyAsString()));
        } catch (Exception e) {
            log.error("Error in processing POST request", e);
            throw new AxisFault("Error in processing POST request");
        }
    }
,
>
, <(startLine=59 endLine=71 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01336/modules/adb-codegen/test/org/apache/axis2/schema/restriction/SchemaRestrictionTest.java)
    public void testLimitedStringParse2() throws Exception {
        OMFactory factory = OMAbstractFactory.getOMFactory();
        OMElement element = factory.createOMElement(new QName(
                "http://apache.org/axis2/schema/restriction", "LimitedString"));
        element.setText("a");
        try {
            LimitedStringE.Factory.parse(element.getXMLStreamReader());
            fail("This should throw RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(toString(e), ERROR_MSG, e.getMessage());

        }
    }
,
(startLine=73 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01336/modules/adb-codegen/test/org/apache/axis2/schema/restriction/SchemaRestrictionTest.java)
    public void testLimitedStringParse3() throws Exception {
        OMFactory factory = OMAbstractFactory.getOMFactory();
        OMElement element = factory.createOMElement(new QName(
                "http://apache.org/axis2/schema/restriction", "LimitedString"));
        element.setText("abcde");
        try {
            LimitedString.Factory.parse(element.getXMLStreamReader());
            fail("This should throw RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(toString(e), ERROR_MSG, e.getMessage());

        }
    }
,
(startLine=87 endLine=99 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01336/modules/adb-codegen/test/org/apache/axis2/schema/restriction/SchemaRestrictionTest.java)
    public void testLimitedStringParse4() throws Exception {
        OMFactory factory = OMAbstractFactory.getOMFactory();
        OMElement element = factory.createOMElement(new QName(
                "http://apache.org/axis2/schema/restriction", "LimitedString"));
        element.setText("abx");
        try {
            LimitedString.Factory.parse(element.getXMLStreamReader());
            fail("This should throw RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(toString(e), ERROR_MSG, e.getMessage());

        }
    }
,
(startLine=101 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01336/modules/adb-codegen/test/org/apache/axis2/schema/restriction/SchemaRestrictionTest.java)
    public void testLimitedStringParse5() throws Exception {
        OMFactory factory = OMAbstractFactory.getOMFactory();
        OMElement element = factory.createOMElement(new QName(
                "http://apache.org/axis2/schema/restriction", "LimitedString"));
        element.setText("");
        try {
            LimitedString.Factory.parse(element.getXMLStreamReader());
            fail("This should throw RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(toString(e), ERROR_MSG, e.getMessage());

        }
    }
,
(startLine=115 endLine=127 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01336/modules/adb-codegen/test/org/apache/axis2/schema/restriction/SchemaRestrictionTest.java)
    public void testLimitedStringParse6() throws Exception {
        OMFactory factory = OMAbstractFactory.getOMFactory();
        OMElement element = factory.createOMElement(new QName(
                "http://apache.org/axis2/schema/restriction", "LimitedString"));
        element.setText("ab34");
        try {
            LimitedString.Factory.parse(element.getXMLStreamReader());
            fail("This should throw RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(toString(e), ERROR_MSG, e.getMessage());

        }
    }
,
(startLine=137 endLine=149 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01336/modules/adb-codegen/test/org/apache/axis2/schema/restriction/SchemaRestrictionTest.java)
    public void testRatingParse2() throws Exception {
        OMFactory factory = OMAbstractFactory.getOMFactory();
        OMElement element = factory.createOMElement(new QName(
                "http://apache.org/axis2/schema/restriction", "Rating"));
        element.setText("a");
        try {
            Rating.Factory.parse(element.getXMLStreamReader());
            fail("This should throw RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(toString(e), ERROR_MSG, e.getMessage());

        }
    }
,
(startLine=151 endLine=163 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01336/modules/adb-codegen/test/org/apache/axis2/schema/restriction/SchemaRestrictionTest.java)
    public void testRatingParse3() throws Exception {
        OMFactory factory = OMAbstractFactory.getOMFactory();
        OMElement element = factory.createOMElement(new QName(
                "http://apache.org/axis2/schema/restriction", "Rating"));
        element.setText("abcde$");
        try {
            Rating.Factory.parse(element.getXMLStreamReader());
            fail("This should throw RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(toString(e), ERROR_MSG, e.getMessage());

        }
    }
,
(startLine=165 endLine=177 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01336/modules/adb-codegen/test/org/apache/axis2/schema/restriction/SchemaRestrictionTest.java)
    public void testRatingParse4() throws Exception {
        OMFactory factory = OMAbstractFactory.getOMFactory();
        OMElement element = factory.createOMElement(new QName(
                "http://apache.org/axis2/schema/restriction", "Rating"));
        element.setText("ab45");
        try {
            Rating.Factory.parse(element.getXMLStreamReader());
            fail("This should throw RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(toString(e), ERROR_MSG, e.getMessage());

        }
    }
,
(startLine=179 endLine=191 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01336/modules/adb-codegen/test/org/apache/axis2/schema/restriction/SchemaRestrictionTest.java)
    public void testRatingParse5() throws Exception {
        OMFactory factory = OMAbstractFactory.getOMFactory();
        OMElement element = factory.createOMElement(new QName(
                "http://apache.org/axis2/schema/restriction", "Rating"));
        element.setText("");
        try {
            Rating.Factory.parse(element.getXMLStreamReader());
            fail("This should throw RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(toString(e), ERROR_MSG, e.getMessage());

        }
    }
,
(startLine=193 endLine=205 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01336/modules/adb-codegen/test/org/apache/axis2/schema/restriction/SchemaRestrictionTest.java)
    public void testRatingParse6() throws Exception {
        OMFactory factory = OMAbstractFactory.getOMFactory();
        OMElement element = factory.createOMElement(new QName(
                "http://apache.org/axis2/schema/restriction", "Rating"));
        element.setText("ab34");
        try {
            Rating.Factory.parse(element.getXMLStreamReader());
            fail("This should throw RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(toString(e), ERROR_MSG, e.getMessage());

        }
    }
,
>
, <(startLine=481 endLine=488 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01231/modules/jaxws-integration/test/org/apache/axis2/jaxws/provider/soapbinding/soapmsg/SoapMessageProvider.java)
	private SOAPMessage getSOAP12Response() throws SOAPException, IOException{
		MessageFactory factory = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
		MimeHeaders header = new MimeHeaders();
		header.addHeader("Content-Type", "application/soap+xml");
        String responseXML = SOAP12_ENVELOPE_HEAD +"<return>"+XML_SOAP12_RESPONSE+"</return>" + SOAP12_ENVELOPE_TAIL;
        System.out.println("Creating SOAP12 Response");
        return factory.createMessage(header, new ByteArrayInputStream(responseXML.getBytes()));
	}
,
(startLine=104 endLine=111 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01231/modules/jaxws-integration/test/org/apache/axis2/jaxws/provider/soapbinding/SOAPBindingProvider.java)
	private SOAPMessage getSOAP12Response() throws SOAPException, IOException{
		MessageFactory factory = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
		MimeHeaders header = new MimeHeaders();
		header.addHeader("Content-Type", "application/soap+xml");
        String responseXML = SOAP12_ENVELOPE_HEAD +"<return>"+ soap12ResponseStr+"</return>" + SOAP12_ENVELOPE_TAIL;
        System.out.println("Creating SOAP12 Response");
        return factory.createMessage(header, new ByteArrayInputStream(responseXML.getBytes()));
	}
,
>
, <(startLine=89 endLine=111 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01048/modules/jaxws/test/org/apache/axis2/jaxws/description/DescriptionTestUtils2.java)
    static public ServiceDelegate getServiceDelegate(Service service) {
        // Need to get to the private Service._delegate field in order to get to the ServiceDescription to test
        ServiceDelegate returnServiceDelegate = null;
        try {
            try {
                Field serviceDelgateField = service.getClass().getDeclaredFields()[0];
                serviceDelgateField.setAccessible(true);
                returnServiceDelegate = (ServiceDelegate) serviceDelgateField.get(service);
            } catch (ArrayIndexOutOfBoundsException e) {
                // This may be a generated service subclass, so get the delegate from the superclass
                Field serviceDelegateField = service.getClass().getSuperclass().getDeclaredFields()[0];
                serviceDelegateField.setAccessible(true);
                returnServiceDelegate = (ServiceDelegate) serviceDelegateField.get(service);
            } 
        } catch (SecurityException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return returnServiceDelegate;
    }
,
(startLine=89 endLine=111 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01048/modules/jaxws-integration/test/org/apache/axis2/jaxws/description/DescriptionTestUtils2.java)
    static public ServiceDelegate getServiceDelegate(Service service) {
        // Need to get to the private Service._delegate field in order to get to the ServiceDescription to test
        ServiceDelegate returnServiceDelegate = null;
        try {
            try {
                Field serviceDelgateField = service.getClass().getDeclaredFields()[0];
                serviceDelgateField.setAccessible(true);
                returnServiceDelegate = (ServiceDelegate) serviceDelgateField.get(service);
            } catch (ArrayIndexOutOfBoundsException e) {
                // This may be a generated service subclass, so get the delegate from the superclass
                Field serviceDelegateField = service.getClass().getSuperclass().getDeclaredFields()[0];
                serviceDelegateField.setAccessible(true);
                returnServiceDelegate = (ServiceDelegate) serviceDelegateField.get(service);
            } 
        } catch (SecurityException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return returnServiceDelegate;
    }
,
>
, <(startLine=96 endLine=115 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00497/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMTest.java)
    protected OMElement createEnvelope() throws Exception {

        DataHandler expectedDH;
        OMFactory fac = OMAbstractFactory.getOMFactory();
        OMNamespace omNs = fac.createOMNamespace("http://localhost/my", "my");
        OMElement rpcWrapEle = fac.createOMElement("echoOMElement", omNs);
        OMElement data = fac.createOMElement("data", omNs);
        Image expectedImage;
        expectedImage =
                new ImageIO()
                .loadImage(getResourceAsStream("org/apache/axis2/mtom/test.jpg"));
        ImageDataSource dataSource = new ImageDataSource("test.jpg",
                expectedImage);
        expectedDH = new DataHandler(dataSource);
        expectedTextData = new OMTextImpl(expectedDH, true);
        data.addChild(expectedTextData);
        rpcWrapEle.addChild(data);
        return rpcWrapEle;

    }
,
(startLine=84 endLine=105 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00497/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMCommonsChunkingTest.java)
    private OMElement createEnvelope() throws Exception {

        DataHandler expectedDH;
        OMFactory fac = OMAbstractFactory.getOMFactory();
        OMNamespace omNs = fac.createOMNamespace("http://localhost/my", "my");
        OMElement rpcWrapEle = fac.createOMElement("echoOMElement", omNs);
        data = fac.createOMElement("data", omNs);
        Image expectedImage;
        expectedImage = new ImageIO()
                .loadImage(getResourceAsStream("org/apache/axis2/mtom/test.jpg"));

        ImageDataSource dataSource = new ImageDataSource("test.jpg",
                expectedImage);
        expectedDH = new DataHandler(dataSource);
        OMElement subData = fac.createOMElement("subData", omNs);
        OMText textData = new OMTextImpl(expectedDH);
        subData.addChild(textData);
        data.addChild(subData);
        rpcWrapEle.addChild(data);
        return rpcWrapEle;

    }
,
>
, <(startLine=51 endLine=70 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01014/modules/jaxws/test/org/apache/axis2/jaxws/spi/BindingProviderTests.java)
    public void testDisptachBindingProviderSPI() {
        Service svc = Service.create(serviceQName);
        svc.addPort(portQName, SOAPBinding.SOAP11HTTP_BINDING, "");
        
        Dispatch dsp = svc.createDispatch(portQName, Source.class, Service.Mode.MESSAGE);
        
        // Make sure we can cast the object to the right interfaces
        assertTrue("The Dispatch object should also be a javax.xml.ws.BindingProvider", 
                (dsp instanceof javax.xml.ws.BindingProvider));
        assertTrue("The Dispatch object should also be a org.apache.axis2.jaxws.spi.BindingProvider", 
                dsp instanceof org.apache.axis2.jaxws.spi.BindingProvider);
        
        org.apache.axis2.jaxws.spi.BindingProvider bp = (org.apache.axis2.jaxws.spi.BindingProvider) dsp;
        
        ServiceDelegate sd = bp.getServiceDelegate();
        assertTrue("The ServiceDescription was null", sd != null);
        
        EndpointDescription ed = bp.getEndpointDescription();
        assertTrue("The EndpointDescription was null", ed != null);
    }
,
(startLine=75 endLine=92 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01014/modules/jaxws/test/org/apache/axis2/jaxws/spi/BindingProviderTests.java)
    public void testProxyBindingProviderSPI() {
        Service svc = Service.create(serviceQName);
        Sample s = svc.getPort(Sample.class);
        
        // Make sure we can cast the object to the right interfaces
        assertTrue("The Proxy object should also be a javax.xml.ws.BindingProvider",
                s instanceof javax.xml.ws.BindingProvider);
        assertTrue("The Proxy object should also be a org.apache.axis2.jaxws.spi.BindingProvider",
                s instanceof org.apache.axis2.jaxws.spi.BindingProvider);
        
        org.apache.axis2.jaxws.spi.BindingProvider bp = (org.apache.axis2.jaxws.spi.BindingProvider) s;
        
        ServiceDelegate sd = bp.getServiceDelegate();
        assertTrue("The ServiceDescription was null", sd != null);
        
        EndpointDescription ed = bp.getEndpointDescription();
        assertTrue("The EndpointDescription was null", ed != null);
    }
,
>
, <(startLine=103 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01197/modules/rmi/src/org/apache/axis2/rmi/databind/AbstractRMIBean.java)
                                  NamespacePrefix namespacePrefix) throws XMLStreamException {
        if ((attributeQName.getNamespaceURI() != null) && !attributeQName.getNamespaceURI().trim().equals("")) {
            String prefix = writer.getPrefix(attributeQName.getNamespaceURI());
            if (prefix == null) {
                prefix = "ns" + namespacePrefix.getNamesapcePrefix();
                writer.writeNamespace(prefix, attributeQName.getNamespaceURI());
                writer.setPrefix(prefix, attributeQName.getNamespaceURI());
            }
            writer.writeAttribute(attributeQName.getNamespaceURI(),
                    attributeQName.getLocalPart(),
                    attributeValue);

        } else {
            writer.writeAttribute(attributeQName.getLocalPart(), attributeValue);
        }
    }
,
(startLine=437 endLine=453 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01197/modules/rmi/src/org/apache/axis2/rmi/databind/JavaObjectSerializer.java)
                                NamespacePrefix namespacePrefix) throws XMLStreamException {
        if ((attributeQName.getNamespaceURI() != null) && !attributeQName.getNamespaceURI().trim().equals("")){
            String prefix = writer.getPrefix(attributeQName.getNamespaceURI());
            if (prefix == null){
                prefix = "ns" + namespacePrefix.getNamesapcePrefix();
                writer.writeNamespace(prefix, attributeQName.getNamespaceURI());
                writer.setPrefix(prefix, attributeQName.getNamespaceURI());
            }
            writer.writeAttribute(attributeQName.getNamespaceURI(),
                    attributeQName.getLocalPart(),
                    attributeValue);

        } else {
            writer.writeAttribute(attributeQName.getLocalPart(),attributeValue);
        }

    }
,
>
, <(startLine=42 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00507/modules/core/test/org/apache/axis2/phaserule/InvalidPhaseFirstTest.java)
    public void testInvalidPhaseFirst1() {
        try {
            ArrayList phases = new ArrayList();
            Phase p1 = new Phase("PhaseA");
            phases.add(p1);
            Phase p2 = new Phase("PhaseB");
            phases.add(p2);

            MessageContext msg = new MessageContext(
                    new ConfigurationContext(new AxisConfigurationImpl()));

            PhaseHolder ph = new PhaseHolder(phases);
            HandlerDescription hm = new HandlerDescription();
            hm.setClassName("org.apache.axis2.phaserule.PhaseRuleHandlers");
            Handler h1 = new PhaseRuleHandlers();
            h1.init(hm);
            ((PhaseRuleHandlers) h1).setName(new QName("PhaseFirstHnadler"));
            hm.setHandler(h1);
            hm.setName(new QName("H1"));
            PhaseRule rule = new PhaseRule();
            rule.setPhaseName("PhaseA");
            rule.setPhaseFirst(true);
            hm.setRules(rule);
            ph.addHandler(hm);

            HandlerDescription hm1 = new HandlerDescription();
            hm1.setClassName("org.apache.axis2.phaserule.PhaseRuleHandlers");
            Handler h2 = new PhaseRuleHandlers();
            ((PhaseRuleHandlers) h2).setName(new QName("Second Handler"));
            h2.init(hm1);
            hm1.setHandler(h2);
            hm1.setName(new QName("H2"));
            PhaseRule rule1 = new PhaseRule();
            rule1.setPhaseName("PhaseA");
            rule1.setPhaseFirst(true);
            hm1.setRules(rule1);
            ph.addHandler(hm1);
            fail("This should be faild with PhaseFirst alredy has been set, cannot have two " +
                    "phaseFirst Handler for same phase ");
        } catch (AxisFault axisFault) {
            return;
        }

    }
,
(startLine=42 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00507/modules/core/test/org/apache/axis2/phaserule/InvalidPhaselastTest.java)
    public void testInvalidPhaseLast() {
        try {
            ArrayList phases = new ArrayList();
            Phase p1 = new Phase("PhaseA");
            phases.add(p1);
            Phase p2 = new Phase("PhaseB");
            phases.add(p2);

            MessageContext msg = new MessageContext(
                    new ConfigurationContext(new AxisConfigurationImpl()));

            PhaseHolder ph = new PhaseHolder(phases);
            HandlerDescription hm = new HandlerDescription();
            hm.setClassName("org.apache.axis2.phaserule.PhaseRuleHandlers");
            Handler h1 = new PhaseRuleHandlers();
            h1.init(hm);
            ((PhaseRuleHandlers) h1).setName(new QName("PhaseLast"));
            hm.setHandler(h1);
            hm.setName(new QName("H1"));
            PhaseRule rule = new PhaseRule();
            rule.setPhaseName("PhaseA");
            rule.setPhaseLast(true);
            hm.setRules(rule);
            ph.addHandler(hm);

            HandlerDescription hm1 = new HandlerDescription();
            hm1.setClassName("org.apache.axis2.phaserule.PhaseRuleHandlers");
            Handler h2 = new PhaseRuleHandlers();
            ((PhaseRuleHandlers) h2).setName(new QName("Second Handler"));
            h2.init(hm1);
            hm1.setHandler(h2);
            hm1.setName(new QName("H2"));
            PhaseRule rule1 = new PhaseRule();
            rule1.setPhaseName("PhaseA");
            rule1.setPhaseLast(true);
            hm1.setRules(rule1);
            ph.addHandler(hm1);
            fail("This should be faild with Phaselast alredy has been set, cannot have two " +
                    "phaseFirst Handler for same phase ");
        } catch (AxisFault axisFault) {
            return;
        }

    }
,
(startLine=42 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00507/modules/core/test/org/apache/axis2/phaserule/InvalidPhaseLastRuleTest.java)
    public void testInvalidPhaseLast() {
        try {
            ArrayList phases = new ArrayList();
            Phase p1 = new Phase("PhaseA");
            phases.add(p1);
            Phase p2 = new Phase("PhaseB");
            phases.add(p2);

            MessageContext msg = new MessageContext(
                    new ConfigurationContext(new AxisConfigurationImpl()));

            PhaseHolder ph = new PhaseHolder(phases);
            HandlerDescription hm = new HandlerDescription();
            hm.setClassName("org.apache.axis2.phaserule.PhaseRuleHandlers");
            Handler h1 = new PhaseRuleHandlers();
            h1.init(hm);
            ((PhaseRuleHandlers) h1).setName(new QName("PhaseFirstHnadler"));
            hm.setHandler(h1);
            hm.setName(new QName("H1"));
            PhaseRule rule = new PhaseRule();
            rule.setPhaseName("PhaseA");
            rule.setPhaseLast(true);
            rule.setBefore("H2");
            hm.setRules(rule);
            ph.addHandler(hm);

            HandlerDescription hm1 = new HandlerDescription();
            hm1.setClassName("org.apache.axis2.phaserule.PhaseRuleHandlers");
            Handler h2 = new PhaseRuleHandlers();
            ((PhaseRuleHandlers) h2).setName(new QName("Second Handler"));
            h2.init(hm1);
            hm1.setHandler(h2);
            hm1.setName(new QName("H2"));
            PhaseRule rule1 = new PhaseRule();
            rule1.setPhaseName("PhaseA");
            hm1.setRules(rule1);
            ph.addHandler(hm1);
            fail(
                    "Handler with PhaseFirst can not have any before or after proprty error in ");
        } catch (AxisFault axisFault) {
            return;
        }

    }
,
(startLine=42 endLine=86 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00507/modules/core/test/org/apache/axis2/phaserule/SingleHandlerPhaseTest.java)
    public void testSingleHandler() {
        try {
            ArrayList phases = new ArrayList();
            Phase p1 = new Phase("PhaseA");
            phases.add(p1);
            Phase p2 = new Phase("PhaseB");
            phases.add(p2);

            MessageContext msg = new MessageContext(
                    new ConfigurationContext(new AxisConfigurationImpl()));

            PhaseHolder ph = new PhaseHolder(phases);
            HandlerDescription hm = new HandlerDescription();
            hm.setClassName("org.apache.axis2.phaserule.PhaseRuleHandlers");
            Handler h1 = new PhaseRuleHandlers();
            h1.init(hm);
            ((PhaseRuleHandlers) h1).setName(new QName("PhaseFirstHnadler"));
            hm.setHandler(h1);
            hm.setName(new QName("H1"));
            PhaseRule rule = new PhaseRule();
            rule.setPhaseName("PhaseA");
            rule.setPhaseFirst(true);
            rule.setPhaseLast(true);
            hm.setRules(rule);
            ph.addHandler(hm);

            HandlerDescription hm1 = new HandlerDescription();
            hm1.setClassName("org.apache.axis2.phaserule.PhaseRuleHandlers");
            Handler h2 = new PhaseRuleHandlers();
            ((PhaseRuleHandlers) h2).setName(new QName("Second Handler"));
            h2.init(hm1);
            hm1.setHandler(h2);
            hm1.setName(new QName("H2"));
            PhaseRule rule1 = new PhaseRule();
            rule1.setPhaseName("PhaseA");
            rule1.setAfter("H1");
            hm1.setRules(rule1);
            ph.addHandler(hm1);
            p1.invoke(msg);
            fail("This should fail with : can only have one handler, since there is a " +
                    "handler with both phaseFirst and PhaseLast true ");
        } catch (AxisFault axisFault) {
            return;
        }
    }
,
(startLine=42 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00507/modules/core/test/org/apache/axis2/phaserule/InvalidPhaseFirstRulesTest.java)
    public void testInvalidPhaseFirst1() {
        try {
            ArrayList phases = new ArrayList();
            Phase p1 = new Phase("PhaseA");
            phases.add(p1);
            Phase p2 = new Phase("PhaseB");
            phases.add(p2);

            MessageContext msg = new MessageContext(
                    new ConfigurationContext(new AxisConfigurationImpl()));

            PhaseHolder ph = new PhaseHolder(phases);
            HandlerDescription hm = new HandlerDescription();
            hm.setClassName("org.apache.axis2.phaserule.PhaseRuleHandlers");
            Handler h1 = new PhaseRuleHandlers();
            h1.init(hm);
            ((PhaseRuleHandlers) h1).setName(new QName("PhaseFirstHnadler"));
            hm.setHandler(h1);
            hm.setName(new QName("H1"));
            PhaseRule rule = new PhaseRule();
            rule.setPhaseName("PhaseA");
            rule.setPhaseFirst(true);
            rule.setBefore("H2");
            hm.setRules(rule);
            ph.addHandler(hm);

            HandlerDescription hm1 = new HandlerDescription();
            hm1.setClassName("org.apache.axis2.phaserule.PhaseRuleHandlers");
            Handler h2 = new PhaseRuleHandlers();
            ((PhaseRuleHandlers) h2).setName(new QName("Second Handler"));
            h2.init(hm1);
            hm1.setHandler(h2);
            hm1.setName(new QName("H2"));
            PhaseRule rule1 = new PhaseRule();
            rule1.setPhaseName("PhaseA");
            hm1.setRules(rule1);
            ph.addHandler(hm1);
            fail(
                    "Handler with PhaseFirst can not have any before or after proprty error in ");
        } catch (AxisFault axisFault) {
            return;
        }

    }
,
>
, <(startLine=47 endLine=84 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00666/modules/kernel/src/org/apache/axis2/dataRetrieval/BaseAxisDataLocator.java)
			MessageContext msgContext) throws DataRetrievalException {
		log.trace("Default Base DataLocator getData starts");

		OutputForm outputform = (OutputForm) request.getOutputForm();

		if (outputform == null) { // not defined, defualt to inline
			outputform = OutputForm.INLINE_FORM;
		}

		Data[] output = null;
				
		String outputFormString = outputform.getType();
     
		if (outputform == OutputForm.INLINE_FORM) {
	    	output = outputInlineForm(msgContext, dataList);
		}
		else if (outputform == OutputForm.LOCATION_FORM) {
	    	output = outputLocationForm(dataList);
			
		}
		else if (outputform == OutputForm.REFERENCE_FORM) {
			output = outputReferenceForm(msgContext, dataList);
					
		}
		else {
			output = outputInlineForm(msgContext, dataList);
			
		}
	
		if (output == null)
				log.info("Null data return! Data Locator does not know how to handle request for dialect= " + (String) request.getDialect()
					+ " in the form of " + outputFormString);
		

		log.trace("Default Base DataLocator getData ends");

		return output;
	}
,
(startLine=56 endLine=97 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00666/modules/kernel/src/org/apache/axis2/dataRetrieval/WSDLDataLocator.java)
			MessageContext msgContext) throws DataRetrievalException {
		log.trace("Default WSDL DataLocator getData starts");

		request_Identifier = (String) request.getIdentifier();
	
		OutputForm outputform = (OutputForm) request.getOutputForm();

		if (outputform == null) { // not defined, defualt to inline
			outputform = OutputForm.INLINE_FORM;
		}

		Data[] output = null;
				
		String outputFormString = outputform.getType();
     
		if (outputform == OutputForm.INLINE_FORM) {
	    	output = outputInlineForm(msgContext, dataList);
		}
		else if (outputform == OutputForm.LOCATION_FORM) {
	    	output = outputLocationForm(dataList);
			
		}
		else if (outputform == OutputForm.REFERENCE_FORM) {
			output = outputReferenceForm(msgContext, dataList);
					
		}
		else {
			output = outputInlineForm(msgContext, dataList);
			
		}
	
		if (output == null)
			if (log.isTraceEnabled())
				log.trace("Null data return! Data Locator does not know how to handle request for dialect= " + (String) request.getDialect()
					+ " in the form of " + outputFormString);
		

		log.trace("Default WSDL DataLocator getData ends");


		return output;
	}
,
>
, <(startLine=88 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00545/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/StringDispatch.java)
    public void testAsyncCallbackPayloadMode() throws Exception {
        System.out.println("---------------------------------------");
        System.out.println("test: " + getName());
        
        // Initialize the JAX-WS client artifacts
        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
        Dispatch<String> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
                String.class, Service.Mode.PAYLOAD);

        // Create the callback for async responses
        AsyncCallback<String> callback = new AsyncCallback<String>();
        
        System.out.println(">> Invoking async (callback) Dispatch");
        Future<?> monitor = dispatch.invokeAsync(DispatchTestConstants.sampleBodyContent, callback);
	        
        while (!monitor.isDone()) {
            System.out.println(">> Async invocation still not complete");
            Thread.sleep(1000);
        }
        
        String response = callback.getValue();
        assertNotNull("dispatch invoke returned null", response);
        System.out.println(response);
        
        // Check to make sure the content is correct
        assertTrue(!response.contains("soap"));
        assertTrue(!response.contains("Envelope"));
        assertTrue(!response.contains("Body"));
        assertTrue(response.contains("echoStringResponse"));
	}
,
(startLine=123 endLine=153 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00545/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/StringDispatch.java)
    public void testAsyncCallbackMessageMode() throws Exception {
        System.out.println("---------------------------------------");
        System.out.println("test: " + getName());
        
        // Initialize the JAX-WS client artifacts
        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
        Dispatch<String> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
                String.class, Service.Mode.MESSAGE);

        // Create the callback for async responses
        AsyncCallback<String> callback = new AsyncCallback<String>();
        
        System.out.println(">> Invoking async (callback) Dispatch with Message Mode");
        Future<?> monitor = dispatch.invokeAsync(DispatchTestConstants.sampleSoapMessage, callback);
    
        while (!monitor.isDone()) {
            System.out.println(">> Async invocation still not complete");
            Thread.sleep(1000);
        }
        
        String response = callback.getValue();
        assertNotNull("dispatch invoke returned null", response);
        System.out.println(response);
        
        // Check to make sure the content is correct
        assertTrue(response.contains("soap"));
        assertTrue(response.contains("Envelope"));
        assertTrue(response.contains("Body"));
        assertTrue(response.contains("echoStringResponse"));
	}
,
(startLine=158 endLine=185 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00545/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/StringDispatch.java)
    public void testAsyncPollingPayloadMode() throws Exception {
        System.out.println("---------------------------------------");
        System.out.println("test: " + getName());
        
        // Initialize the JAX-WS client artifacts
        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
        Dispatch<String> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
                String.class, Service.Mode.PAYLOAD);

        System.out.println(">> Invoking async (polling) Dispatch");
        Response<String> asyncResponse = dispatch.invokeAsync(DispatchTestConstants.sampleBodyContent);
            
        while (!asyncResponse.isDone()) {
            System.out.println(">> Async invocation still not complete");
            Thread.sleep(1000);
        }
        
        String response = asyncResponse.get();
        assertNotNull("dispatch invoke returned null", response);
        System.out.println(response);
        
        // Check to make sure the content is correct
        assertTrue(!response.contains("soap"));
        assertTrue(!response.contains("Envelope"));
        assertTrue(!response.contains("Body"));
        assertTrue(response.contains("echoStringResponse"));
    }
,
(startLine=190 endLine=217 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00545/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/StringDispatch.java)
    public void testAsyncPollingMessageMode() throws Exception {
        System.out.println("---------------------------------------");
        System.out.println("test: " + getName());
        
        // Initialize the JAX-WS client artifacts
        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
        Dispatch<String> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
                String.class, Service.Mode.MESSAGE);

        System.out.println(">> Invoking async (polling) Dispatch with Message Mode");
        Response<String> asyncResponse = dispatch.invokeAsync(DispatchTestConstants.sampleSoapMessage);
    
        while (!asyncResponse.isDone()) {
            System.out.println(">> Async invocation still not complete");
            Thread.sleep(1000);
        }
        
        String response = asyncResponse.get();
        assertNotNull("dispatch invoke returned null", response);
        System.out.println(response);
        
        // Check to make sure the content is correct
        assertTrue(response.contains("soap"));
        assertTrue(response.contains("Envelope"));
        assertTrue(response.contains("Body"));
        assertTrue(response.contains("echoStringResponse"));
    }
,
(startLine=105 endLine=141 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00545/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/DOMSourceDispatch.java)
    public void testAsyncCallbackPayloadMode() throws Exception {
        System.out.println("---------------------------------------");
        System.out.println("test: " + getName());
        
        // Initialize the JAX-WS client artifacts
        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
                Source.class, Service.Mode.PAYLOAD);
        
        // Create the DOMSource
        DOMSource request = createDOMSourceFromString(DispatchTestConstants.sampleBodyContent);

        // Setup the callback for async responses
        AsyncCallback<Source> callbackHandler = new AsyncCallback<Source>();
        
        System.out.println(">> Invoking async (callback) Dispatch");
        Future<?> monitor = dispatch.invokeAsync(request, callbackHandler);
            
        while (!monitor.isDone()) {
            System.out.println(">> Async invocation still not complete");
            Thread.sleep(1000);
        }
        
        Source response = callbackHandler.getValue();
        assertNotNull(response);
        
        // Turn the Source into a String so we can check it
        String responseText = createStringFromSource(response);        
        System.out.println(responseText);
        
        // Check to make sure the content is correct
        assertTrue(!responseText.contains("soap"));
        assertTrue(!responseText.contains("Envelope"));
        assertTrue(!responseText.contains("Body"));
        assertTrue(responseText.contains("echoStringResponse"));
    }
,
(startLine=143 endLine=179 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00545/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/DOMSourceDispatch.java)
    public void testAsyncCallbackMessageMode() throws Exception {
        System.out.println("---------------------------------------");
        System.out.println("test: " + getName());
        
        // Initialize the JAX-WS client artifacts
        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
                Source.class, Service.Mode.MESSAGE);
        
        // Create the DOMSource
        DOMSource request = createDOMSourceFromString(DispatchTestConstants.sampleSoapMessage);

        // Setup the callback for async responses
        AsyncCallback<Source> callbackHandler = new AsyncCallback<Source>();
        
        System.out.println(">> Invoking async (callback) Dispatch");
        Future<?> monitor = dispatch.invokeAsync(request, callbackHandler);
	        
        while (!monitor.isDone()) {
            System.out.println(">> Async invocation still not complete");
            Thread.sleep(1000);
        }
        
        Source response = callbackHandler.getValue();
        assertNotNull(response);
        
        // Turn the Source into a String so we can check it
        String responseText = createStringFromSource(response);        
        System.out.println(responseText);
        
        // Check to make sure the content is correct
        assertTrue(responseText.contains("soap"));
        assertTrue(responseText.contains("Envelope"));
        assertTrue(responseText.contains("Body"));
        assertTrue(responseText.contains("echoStringResponse"));
	}
,
(startLine=181 endLine=214 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00545/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/DOMSourceDispatch.java)
    public void testAsyncPollingPayloadMode() throws Exception {
        System.out.println("---------------------------------------");
        System.out.println("test: " + getName());
        
        // Initialize the JAX-WS client artifacts
        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
                Source.class, Service.Mode.PAYLOAD);
        
        // Create the DOMSource
        DOMSource request = createDOMSourceFromString(DispatchTestConstants.sampleBodyContent);

        System.out.println(">> Invoking async (polling) Dispatch");
        Response<Source> asyncResponse = dispatch.invokeAsync(request);
            
        while (!asyncResponse.isDone()) {
            System.out.println(">> Async invocation still not complete");
            Thread.sleep(1000);
        }
        
        Source response = asyncResponse.get();
        assertNotNull(response);
        
        // Turn the Source into a String so we can check it
        String responseText = createStringFromSource(response);        
        System.out.println(responseText);
        
        // Check to make sure the content is correct
        assertTrue(!responseText.contains("soap"));
        assertTrue(!responseText.contains("Envelope"));
        assertTrue(!responseText.contains("Body"));
        assertTrue(responseText.contains("echoStringResponse"));
    }
,
(startLine=216 endLine=249 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00545/modules/jaxws/test/org/apache/axis2/jaxws/dispatch/DOMSourceDispatch.java)
    public void testAsyncPollingMessageMode() throws Exception {
        System.out.println("---------------------------------------");
        System.out.println("test: " + getName());
        
        // Initialize the JAX-WS client artifacts
        Service svc = Service.create(DispatchTestConstants.QNAME_SERVICE);
        svc.addPort(DispatchTestConstants.QNAME_PORT, null, DispatchTestConstants.URL);
        Dispatch<Source> dispatch = svc.createDispatch(DispatchTestConstants.QNAME_PORT, 
                Source.class, Service.Mode.MESSAGE);
        
        // Create the DOMSource
        DOMSource request = createDOMSourceFromString(DispatchTestConstants.sampleSoapMessage);

        System.out.println(">> Invoking async (callback) Dispatch");
        Response<Source> asyncResponse = dispatch.invokeAsync(request);
            
        while (!asyncResponse.isDone()) {
            System.out.println(">> Async invocation still not complete");
            Thread.sleep(1000);
        }
        
        Source response = asyncResponse.get();
        assertNotNull(response);
        
        // Turn the Source into a String so we can check it
        String responseText = createStringFromSource(response);        
        System.out.println(responseText);
        
        // Check to make sure the content is correct
        assertTrue(responseText.contains("soap"));
        assertTrue(responseText.contains("Envelope"));
        assertTrue(responseText.contains("Body"));
        assertTrue(responseText.contains("echoStringResponse"));
    }
,
>
, <(startLine=40 endLine=72 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00855/modules/integration/manual/itest/org/apache/axis2/rest/GetTest.java)
    public void testRESTGet() throws Exception {

        String epr = "http://localhost:8080/axis2/services/MyService";

        String xml = "<echo>" +
                "<Text>Hello</Text>" +
                "</echo>";

        byte arr[] = xml.getBytes();
        ByteArrayInputStream bais = new ByteArrayInputStream(arr);

        XMLStreamReader reader = null;
        try {
            reader = StAXUtils.createXMLStreamReader(bais);
        } catch (XMLStreamException e) {
            e.printStackTrace();
        }
        StAXOMBuilder builder = new StAXOMBuilder(reader);
        OMElement data = builder.getDocumentElement();

        Options options = new Options();
        options.setTo(new EndpointReference(epr));
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
        options.setProperty(Constants.Configuration.ENABLE_REST, Constants.VALUE_TRUE);
        options.setProperty(Constants.Configuration.ENABLE_REST_THROUGH_GET, Constants.VALUE_TRUE);

        ServiceClient sender = new ServiceClient();
        sender.setOptions(options);
        options.setTo(new EndpointReference (epr));
        OMElement response = sender.sendReceive(data);

        response.serialize(System.out);
    }
,
(startLine=42 endLine=77 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00855/modules/integration/manual/itest/org/apache/axis2/rest/RESTGetTest.java)
    public void testRESTGet() throws Exception {
        String epr = "http://api.search.yahoo.com/WebSearchService/V1/webSearch";

        String xml =
                "<websearch>" +
                        "<appid>ApacheRestDemo</appid>" +
                        "<query>finances</query>" +
                        "<format>pdf</format>" +
                        "</websearch>";

        byte arr[] = xml.getBytes();
        ByteArrayInputStream bais = new ByteArrayInputStream(arr);

        XMLStreamReader reader = null;
        try {
            reader = StAXUtils.createXMLStreamReader(bais);
        } catch (XMLStreamException e) {
            e.printStackTrace();
        }
        StAXOMBuilder builder = new StAXOMBuilder(reader);
        OMElement data = builder.getDocumentElement();
        Options options = new Options();
        options.setTo(new EndpointReference(epr));
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
        options.setProperty(Constants.Configuration.ENABLE_REST, Constants.VALUE_TRUE);
        options.setProperty(Constants.Configuration.ENABLE_REST_THROUGH_GET, Constants.VALUE_TRUE);

        //if post is through GET of HTTP

        ServiceClient sender = new ServiceClient();
        sender.setOptions(options);
        options.setTo(new EndpointReference (epr));
        OMElement response = sender.sendReceive(data);

        response.serialize(System.out);
    }
,
>
, <(startLine=592 endLine=606 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00532/modules/kernel/src/org/apache/axis2/description/AxisService.java)
        if (isUseUserWSDL()) {
            Parameter wsld4jdefinition = getParameter(WSDLConstants.WSDL_4_J_DEFINITION);
            if (wsld4jdefinition != null) {
                try {
                    Definition definition = (Definition) wsld4jdefinition.getValue();
                    setPortAddress(definition);
                    WSDLWriter writer = WSDLFactory.newInstance().newWSDLWriter();
                    writer.writeWSDL(definition, out);
                } catch (WSDLException e) {
                    throw new AxisFault(e);
                }
            } else {
                printWSDLError(out);
            }
        } else {
,
(startLine=694 endLine=708 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00532/modules/kernel/src/org/apache/axis2/description/AxisService.java)
        if (isUseUserWSDL()) {
            Parameter wsld4jdefinition = getParameter(WSDLConstants.WSDL_4_J_DEFINITION);
            if (wsld4jdefinition != null) {
                try {
                    Definition definition = (Definition) wsld4jdefinition.getValue();
                    setPortAddress(definition);
                    WSDLWriter writer = WSDLFactory.newInstance().newWSDLWriter();
                    writer.writeWSDL(definition, out);
                } catch (WSDLException e) {
                    throw new AxisFault(e);
                }
            } else {
                printWSDLError(out);
            }
        } else {
,
>
, <(startLine=58 endLine=74 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00334/modules/core/src/org/apache/axis/clientapi/TwoChannelBasedSender.java)
                try {
                    //TODO Fix this we support only the HTTP Sync cases, so we hardcode this
                    if (Constants.TRANSPORT_HTTP.equals(transportIn.getName().getLocalPart())) {
                        HTTPTransportReceiver receiver = new HTTPTransportReceiver();
                        resenvelope =
                            receiver.checkForMessage(response,msgctx.getSystemContext());
                    } else if (Constants.TRANSPORT_TCP.equals(transportIn.getName().getLocalPart())) {
                        Reader in = (Reader) response.getProperty(MessageContext.TRANSPORT_READER);
                        if(in != null){
                            XMLStreamReader xmlreader = XMLInputFactory.newInstance().createXMLStreamReader(in);
                            StAXBuilder builder = new StAXSOAPModelBuilder(xmlreader);
                            resenvelope = (SOAPEnvelope) builder.getDocumentElement();
                        }else{
                            throw new AxisFault("Sync invocation expect a proeprty "+ MessageContext.TRANSPORT_READER + " set ");
                        }
                    }
                } catch (XMLStreamException e) {
,
(startLine=333 endLine=352 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00334/modules/core/src/org/apache/axis/clientapi/InOutMEPClient.java)
        try {
            //TODO Fix this we support only the HTTP Sync cases, so we hardcode this
            if (Constants.TRANSPORT_HTTP.equals(listenerTransport)) {
                HTTPTransportReceiver receiver = new HTTPTransportReceiver();
                resenvelope = receiver.checkForMessage(response, serviceContext.getEngineContext());
            } else if (Constants.TRANSPORT_TCP.equals(listenerTransport)) {
                Reader in = (Reader) response.getProperty(MessageContext.TRANSPORT_READER);
                if (in != null) {
                    XMLStreamReader xmlreader =
                        XMLInputFactory.newInstance().createXMLStreamReader(in);
                    StAXBuilder builder = new StAXSOAPModelBuilder(xmlreader);
                    resenvelope = (SOAPEnvelope) builder.getDocumentElement();
                } else {
                    throw new AxisFault(
                        "Sync invocation expect a proeprty "
                            + MessageContext.TRANSPORT_READER
                            + " set ");
                }
            }
        } catch (XMLStreamException e) {
,
>
, <(startLine=420 endLine=426 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01353/modules/metadata/src/org/apache/axis2/jaxws/i18n/ProjectResourceBundle.java)
            if (!packageName.equals(_projectName) && !packageName.startsWith(_projectName + '.')) {
                log.debug("Project not a prefix of Package");
                throw new MissingResourceException("Project '" + _projectName
                        + "' must be a prefix of Package '"
                        + packageName + "'",
                                                   packageName + '.' + _resourceName, "");
            }
,
(startLine=446 endLine=452 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01353/modules/kernel/src/org/apache/axis2/i18n/ProjectResourceBundle.java)
            if (!packageName.equals(_projectName) && !packageName.startsWith(_projectName + '.')) {
                log.debug("Project not a prefix of Package");
                throw new MissingResourceException("Project '" + _projectName
                        + "' must be a prefix of Package '"
                        + packageName + "'",
                                                   packageName + '.' + _resourceName, "");
            }
,
>
, <(startLine=116 endLine=129 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01159/modules/fastinfoset/src/org/apache/axis2/fastinfoset/FastInfosetMessageFormatter.java)
	            && Constants.Configuration.HTTP_METHOD_GET.equalsIgnoreCase(httpMethod)) {
	        String param = getParam(messageContext);
	
	        if (param.length() > 0) {
	            String returnURLFile = targetURL.getFile() + "?" + param;
	            try {
	                targetAddress = 
	                	new URL(targetURL.getProtocol(), targetURL.getHost(), targetURL.getPort(), returnURLFile);
	            } catch (MalformedURLException murle) {
	            	logger.error(murle.getMessage());
	                throw new AxisFault(murle.getMessage(), murle);
	            }
	        }
	    }
,
(startLine=118 endLine=131 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01159/modules/fastinfoset/src/org/apache/axis2/fastinfoset/FastInfosetPOXMessageFormatter.java)
	            && Constants.Configuration.HTTP_METHOD_GET.equalsIgnoreCase(httpMethod)) {
	        String param = getParam(messageContext);
	
	        if (param.length() > 0) {
	            String returnURLFile = targetURL.getFile() + "?" + param;
	            try {
	                targetAddress = 
	                	new URL(targetURL.getProtocol(), targetURL.getHost(), targetURL.getPort(), returnURLFile);
	            } catch (MalformedURLException murle) {
	            	logger.error(murle.getMessage());
	                throw new AxisFault(murle.getMessage(), murle);
	            }
	        }
	    }
,
>
, <(startLine=398 endLine=422 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01375/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/provider/soapmsg/SoapMessageProvider.java)
    private void throwSOAPFaultException() throws SOAPFaultException {
        try {
            MessageFactory mf = MessageFactory.newInstance();
            SOAPFactory sf = SOAPFactory.newInstance();
            
            SOAPMessage m = mf.createMessage();
            SOAPBody body = m.getSOAPBody();
            SOAPFault fault = body.addFault();
            QName faultCode = new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "Client"); 
            fault.setFaultCode(faultCode);
            fault.setFaultString("sample fault");
            Detail detail = fault.addDetail();
            Name deName = sf.createName("detailEntry");
            SOAPElement detailEntry = detail.addDetailEntry(deName);
            detailEntry.addTextNode("sample detail");
            fault.setFaultActor("sample actor");
            
            SOAPFaultException sfe = new SOAPFaultException(fault);
            throw sfe;
        } catch (SOAPFaultException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
,
(startLine=94 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01375/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/provider/om/OMProvider.java)
    private void throwSOAPFaultException() throws SOAPFaultException {
        try {
            MessageFactory mf = MessageFactory.newInstance();
            SOAPFactory sf = SOAPFactory.newInstance();
            
            SOAPMessage m = mf.createMessage();
            SOAPBody body = m.getSOAPBody();
            SOAPFault fault = body.addFault();
            QName faultCode = new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "Client"); 
            fault.setFaultCode(faultCode);
            fault.setFaultString("sample fault");
            Detail detail = fault.addDetail();
            Name deName = sf.createName("detailEntry");
            SOAPElement detailEntry = detail.addDetailEntry(deName);
            detailEntry.addTextNode("sample detail");
            fault.setFaultActor("sample actor");
            
            SOAPFaultException sfe = new SOAPFaultException(fault);
            throw sfe;
        } catch (SOAPFaultException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
,
(startLine=420 endLine=444 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01375/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/provider/soapbinding/soapmsg/SoapMessageProvider.java)
    private void throwSOAPFaultException() throws SOAPFaultException {
        try {
            MessageFactory mf = MessageFactory.newInstance();
            SOAPFactory sf = SOAPFactory.newInstance();
            
            SOAPMessage m = mf.createMessage();
            SOAPBody body = m.getSOAPBody();
            SOAPFault fault = body.addFault();
            QName faultCode = new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "Client"); 
            fault.setFaultCode(faultCode);
            fault.setFaultString("sample fault");
            Detail detail = fault.addDetail();
            Name deName = sf.createName("detailEntry");
            SOAPElement detailEntry = detail.addDetailEntry(deName);
            detailEntry.addTextNode("sample detail");
            fault.setFaultActor("sample actor");
            
            SOAPFaultException sfe = new SOAPFaultException(fault);
            throw sfe;
        } catch (SOAPFaultException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
,
>
, <(startLine=448 endLine=453 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00982/modules/adb/src/org/apache/axis2/databinding/types/soapencoding/Base64Binary.java)
                                        {
                                            java.lang.String id = org.apache.axiom.om.util.ElementHelper.getContentID(reader, "UTF-8");
                                            object.setBase64Binary(((org.apache.axiom.soap.impl.builder.MTOMStAXSOAPModelBuilder) ((org.apache.axiom.om.impl.llom.OMStAXWrapper) reader).getBuilder()).getDataHandler(id));
                                            reader.next();
                                            
                                        } else if(reader.hasText()) {
,
(startLine=448 endLine=453 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00982/modules/adb/src/org/apache/axis2/databinding/types/xsd/Base64Binary.java)
                                        {
                                            java.lang.String id = org.apache.axiom.om.util.ElementHelper.getContentID(reader, "UTF-8");
                                            object.setBase64Binary(((org.apache.axiom.soap.impl.builder.MTOMStAXSOAPModelBuilder) ((org.apache.axiom.om.impl.llom.OMStAXWrapper) reader).getBuilder()).getDataHandler(id));
                                            reader.next();
                                            
                                        } else if(reader.hasText()) {
,
>
, <(startLine=99 endLine=125 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01313/modules/jaxws/src/org/apache/axis2/jaxws/spi/migrator/ApplicationContextMigratorUtil.java)
        if (sd != null) {
            ConfigurationContext configCtx = sd.getAxisConfigContext();
            List<ApplicationContextMigrator> migratorList = (List<ApplicationContextMigrator>) configCtx.getProperty(contextMigratorListID);
            if (migratorList != null) {
                
                // Create copy to avoid using shared list
                List listCPM = null;
                
                // synchronize on non-null migratorList
                synchronized(migratorList){
                     listCPM = new ArrayList(migratorList);
                }
                
                ListIterator<ApplicationContextMigrator> itr = listCPM.listIterator();   // Iterate over non-shared list
                while (itr.hasNext()) {
                    ApplicationContextMigrator cpm = itr.next();
                    if (log.isDebugEnabled()) {
                        log.debug("migrator: " + cpm.getClass().getName() + ".migratePropertiesToMessageContext");
                    }
                    
                    // TODO: Synchronizing here is expensive too.
                    // If a cpm requires synchronization, it should provide it inside of its migratePropertiesFromMessageContext implementation.
                    
                    cpm.migratePropertiesToMessageContext(new ApplicationPropertyMapReader(requestContext, messageContext.getMEPContext()), messageContext);
                }
            }
        }
,
(startLine=141 endLine=169 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01313/modules/jaxws/src/org/apache/axis2/jaxws/spi/migrator/ApplicationContextMigratorUtil.java)
        if (sd != null) {
            ConfigurationContext configCtx = sd.getAxisConfigContext();
            List<ApplicationContextMigrator> migratorList =
                    (List<ApplicationContextMigrator>)configCtx.getProperty(contextMigratorListID);

            if (migratorList != null) {
                
                // Create copy to avoid using shared list
                List listCPM = null;
                
                // synchronize on non-null migratorList
                synchronized(migratorList){
                     listCPM = new ArrayList(migratorList);
                }
            
                ListIterator<ApplicationContextMigrator> itr = listCPM.listIterator();   // Iterate over non-shared list
                while (itr.hasNext()) {
                    ApplicationContextMigrator cpm = itr.next();
                    if (log.isDebugEnabled()) {
                        log.debug("migrator: " + cpm.getClass().getName() + ".migratePropertiesFromMessageContext");
                    }

                    // TODO: Synchronizing here is expensive too.
                    // If a cpm requires synchronization, it should provide it inside of its migratePropertiesFromMessageContext implementation.

                    cpm.migratePropertiesFromMessageContext(new ApplicationPropertyMapWriter(responseContext, messageContext.getMEPContext()), messageContext);
                }
            }
        }
,
>
, <(startLine=87 endLine=96 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00156/dev/scratch/prototype2/src/java/org/apache/axis/wsdl/wsdltowom/WOMBuilderFactory.java)
    private static int getWSDLVersion(Document doc) throws WSDLException{
        //TODO check weather the namespaces are correct and the / problem too
        if(WSDLConstants.WSDL2_0_NAMESPACE.equals(doc.getDocumentElement().getNamespaceURI())){
            return wsdl20;
        }else if(WSDLConstants.WSDL1_1_NAMESPACE.equals(doc.getDocumentElement().getNamespaceURI())){
            return WSDL11;
        }
        
        throw new WSDLException(WSDLException.OTHER_ERROR, "Unable to Figure out the WSDL vesion of the Document");
    }
,
(startLine=76 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00156/dev/scratch/wsdl_pt_chatura/src/java/org/apache/wsdl/wsdltowom/WOMBuilderFactory.java)
    private static int getWSDLVersion(Document doc) throws WSDLException{
        //TODO check weather the namespaces are correct and the / problem too
        if(WSDLConstants.WSDL2_0_NAMESPACE.equals(doc.getDocumentElement().getNamespaceURI())){
            return wsdl20;
        }else if(WSDLConstants.WSDL1_1_NAMESPACE.equals(doc.getDocumentElement().getNamespaceURI())){
            return WSDL11;
        }
        
        throw new WSDLException(WSDLException.OTHER_ERROR, "Unable to Figure out the WSDL vesion of the Document");
    }
,
>
, <(startLine=530 endLine=542 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00731/modules/kernel/src/org/apache/axis2/builder/BuilderUtil.java)
        {
            String faultCode;

            if (SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(soapNamespaceURI)) {
                faultCode = SOAP12Constants.FAULT_CODE_SENDER;
            } else {
                faultCode = SOAP11Constants.FAULT_CODE_SENDER;
            }

            throw new AxisFault("Character Set Encoding from "
                    + "transport information do not match with "
                    + "character set encoding in the received SOAP message", faultCode);
        }
,
(startLine=329 endLine=345 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00731/modules/kernel/src/org/apache/axis2/transport/jms/JMSUtils.java)
                !charEncOfMessage.equalsIgnoreCase(charEncOfTransport)) {

            String faultCode;

            if (envelope.getNamespace() != null &&
                    SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.
                            equals(envelope.getNamespace().getNamespaceURI())) {
                faultCode = SOAP12Constants.FAULT_CODE_SENDER;
            } else {
                faultCode = SOAP11Constants.FAULT_CODE_SENDER;
            }

            handleException(
                    "Character Set Encoding from transport information do not " +
                            "match with character set encoding in the received " +
                            "SOAP message");
        }
,
>
, <(startLine=86 endLine=103 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01079/modules/kernel/src/org/apache/axis2/deployment/ServiceGroupBuilder.java)
                } else {
                    AxisService axisService = (AxisService) wsdlServices.get(serviceName);

                    if (axisService == null) {
                        axisService = new AxisService(serviceName);
                    } else {
                        axisService.setWsdlFound(true);
                        axisService.setCustomWsdl(true);
                    }

                    // the service that has to be deployed
                    axisService.setParent(axisServiceGroup);
                    axisService.setClassLoader(axisServiceGroup.getServiceGroupClassLoader());

                    ServiceBuilder serviceBuilder = new ServiceBuilder(configCtx, axisService);
                    AxisService as = serviceBuilder.populateService(service);
                    serviceList.add(as);
                }
,
(startLine=92 endLine=109 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01079/modules/osgi/src/org/apache/axis2/osgi/deployment/OSGiServiceGroupBuilder.java)
                } else {
                    AxisService axisService = (AxisService) wsdlServices.get(serviceName);

                    if (axisService == null) {
                        axisService = new AxisService(serviceName);
                    } else {
                        axisService.setWsdlFound(true);
                        axisService.setCustomWsdl(true);
                    }

                    // the service that has to be deployed
                    axisService.setParent(axisServiceGroup);
                    axisService.setClassLoader(axisServiceGroup.getServiceGroupClassLoader());

                    ServiceBuilder serviceBuilder = new OSGiServiceBuilder(configCtx, axisService);
                    AxisService as = serviceBuilder.populateService(service);
                    serviceList.add(as);
                }
,
>
, <(startLine=719 endLine=753 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01310/modules/jaxws/src/org/apache/axis2/datasource/jaxb/JAXBDSContext.java)
       throws Exception {
        try {
            if (DEBUG_ENABLED) {
                log.debug("Invoking unmarshalArray");
            }
            Object jaxb = AccessController.doPrivileged(new PrivilegedAction<Object>() {
                public Object run() {
                    try {
                        return u.unmarshal(reader, String[].class);
                    } catch (OMException e) {
                        throw e;
                    } catch (Throwable t) {
                        throw new OMException(t);
                    }
                }
            });

            Object typeObj = getTypeEnabledObject(jaxb);

            // Now convert String Array in to the required Type Array.
            if (typeObj instanceof String[]) {
                String[] strArray = (String[]) typeObj;
                Object obj = XSDListUtils.fromStringArray(strArray, type);
                QName qName =
                    XMLRootElementUtil.getXmlRootElementQNameFromObject(jaxb);
                jaxb = new JAXBElement(qName, type, obj);
            }

            return jaxb;
        } catch (OMException e) {
            throw e;
        } catch (Throwable t) {
            throw new OMException(t);
        }
    }
,
(startLine=773 endLine=810 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01310/modules/jaxws/src/org/apache/axis2/datasource/jaxb/JAXBDSContext.java)
        DatatypeConfigurationException,InvocationTargetException,JAXBException {
        
        
            if (DEBUG_ENABLED) {
                log.debug("Invoking unmarshalAsListOrArray");
            }
            
            // If this is an xsd:list, we need to return the appropriate
            // list or array (see NOTE above)
            // First unmarshal as a String
            Object jaxb = null;
            try {
                jaxb = AccessController.doPrivileged(new PrivilegedAction<Object>() {
                    public Object run() {
                        try {
                            return u.unmarshal(reader, String.class);
                        } catch (OMException e) {
                            throw e;
                        } catch (Throwable t) {
                            throw new OMException(t);
                        }
                    }
                });
            } catch (OMException e) {
                throw e;
            } catch (Throwable t) {
                throw new OMException(t);
            }
            //Second convert the String into a list or array
            if (getTypeEnabledObject(jaxb) instanceof String) {
                QName qName = XMLRootElementUtil.getXmlRootElementQNameFromObject(jaxb);
                Object obj = XSDListUtils.fromXSDListString((String) getTypeEnabledObject(jaxb), type);
                return new JAXBElement(qName, type, obj);
            } else {
                return jaxb;
            }

    }
,
>
, <(startLine=399 endLine=409 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00805/modules/java2wsdl/src/org/apache/ws/java2wsdl/Java2WSDL11.java)
            if (jmethod.getExceptionTypes().length > 0) {
            	JClass[] extypes = jmethod.getExceptionTypes() ;
           	 	for (int j= 0 ; j < extypes.length ; j++) {
           	 		JClass extype = extypes[j] ;
           	 		String exname = extype.getSimpleName() ;
           	 		OMElement fault = fac.createOMElement(FAULT_LOCAL_NAME, wsdl);
           	 		fault.addAttribute(ATTRIBUTE_NAME, exname, null);
           	 		addExtensionElement(fac, fault, soap, SOAP_BODY, SOAP_USE, use);
           	 		operation.addChild(fault);
           	 	}
            }
,
(startLine=449 endLine=459 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00805/modules/java2wsdl/src/org/apache/ws/java2wsdl/Java2WSDL11.java)
            if (jmethod.getExceptionTypes().length > 0) {
                JClass[] extypes = jmethod.getExceptionTypes() ;
                for (int j= 0 ; j < extypes.length ; j++) {
                    JClass extype = extypes[j] ;
                    String exname = extype.getSimpleName() ;
                    OMElement fault = fac.createOMElement(FAULT_LOCAL_NAME, wsdl);
                    fault.addAttribute(ATTRIBUTE_NAME, exname, null);
                    addExtensionElement(fac, fault, soap12, SOAP_BODY, SOAP_USE, use);
                    operation.addChild(fault);
                }
            }
,
>
, <(startLine=3122 endLine=3150 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00887/modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java)
    protected List getParameterElementList(Document doc, List parameters, String location) {
        List parameterElementList = new ArrayList();

        if ((parameters != null) && !parameters.isEmpty()) {
            int count = parameters.size();

            for (int i = 0; i < count; i++) {
                Element param = doc.createElement("param");
                SOAPHeaderMessage header = (SOAPHeaderMessage) parameters.get(i);
                QName name = header.getElement();

                addAttribute(doc, "name", this.mapper.getParameterName(name), param);

                String typeMapping = this.mapper.getTypeMappingName(name);
                String typeMappingStr = (typeMapping == null)
                        ? ""
                        : typeMapping;

                addAttribute(doc, "type", typeMappingStr, param);
                addAttribute(doc, "location", location, param);
                if (header.isMustUnderstand()) {
                    addAttribute(doc, "mustUnderstand", "true", param);
                }
                parameterElementList.add(param);
            }
        }

        return parameterElementList;
    }
,
(startLine=3154 endLine=3185 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00887/modules/codegen/src/org/apache/axis2/wsdl/codegen/emitter/AxisServiceBasedMultiLanguageEmitter.java)
                                                        String location) {


        List parameterElementList = new ArrayList();

        if ((parameters != null) && !parameters.isEmpty()) {
            int count = parameters.size();

            for (int i = 0; i < count; i++) {
                Element param = doc.createElement("param");
                HTTPHeaderMessage httpHeaderMessage = (HTTPHeaderMessage) parameters.get(i);
                QName qName = httpHeaderMessage.getqName();
                String name = httpHeaderMessage.getName();

                // use name as the name attribute of the parameter
                addAttribute(doc, "name", JavaUtils.xmlNameToJavaIdentifier(name), param);
                // header name is to set the header value
                addAttribute(doc, "headername", name, param);

                String typeMapping = this.mapper.getTypeMappingName(qName);
                String typeMappingStr = (typeMapping == null)
                        ? ""
                        : typeMapping;

                addAttribute(doc, "type", typeMappingStr, param);
                addAttribute(doc, "location", location, param);
                parameterElementList.add(param);
            }
        }

        return parameterElementList;
    }
,
>
, <(startLine=1590 endLine=1646 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01153/modules/corba/src/org/apache/axis2/corba/idl/parser/IDLParser.java)
	public final void type_spec() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST type_spec_AST = null;
		
		try {      // for error handling
			switch ( LA(1)) {
			case SCOPEOP:
			case IDENT:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_long:
			case LITERAL_short:
			case LITERAL_unsigned:
			case LITERAL_char:
			case LITERAL_wchar:
			case LITERAL_boolean:
			case LITERAL_octet:
			case LITERAL_any:
			case LITERAL_Object:
			case LITERAL_sequence:
			case LITERAL_string:
			case LITERAL_wstring:
			case LITERAL_fixed:
			case LITERAL_ValueBase:
			{
				simple_type_spec();
				astFactory.addASTChild(currentAST, returnAST);
				type_spec_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_enum:
			{
				constr_type_spec();
				astFactory.addASTChild(currentAST, returnAST);
				type_spec_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_21);
			} else {
			  throw ex;
			}
		}
		returnAST = type_spec_AST;
	}
,
(startLine=2205 endLine=2268 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01153/modules/corba/src/org/apache/axis2/corba/idl/parser/IDLParser.java)
	public final void param_type_spec() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST param_type_spec_AST = null;
		
		try {      // for error handling
			switch ( LA(1)) {
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_long:
			case LITERAL_short:
			case LITERAL_unsigned:
			case LITERAL_char:
			case LITERAL_wchar:
			case LITERAL_boolean:
			case LITERAL_octet:
			case LITERAL_any:
			case LITERAL_Object:
			case LITERAL_ValueBase:
			{
				base_type_spec();
				astFactory.addASTChild(currentAST, returnAST);
				param_type_spec_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_string:
			{
				string_type();
				astFactory.addASTChild(currentAST, returnAST);
				param_type_spec_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_wstring:
			{
				wide_string_type();
				astFactory.addASTChild(currentAST, returnAST);
				param_type_spec_AST = (AST)currentAST.root;
				break;
			}
			case SCOPEOP:
			case IDENT:
			{
				scoped_name();
				astFactory.addASTChild(currentAST, returnAST);
				param_type_spec_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_29);
			} else {
			  throw ex;
			}
		}
		returnAST = param_type_spec_AST;
	}
,
(startLine=3724 endLine=3783 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01153/modules/corba/src/org/apache/axis2/corba/idl/parser/IDLParser.java)
	public final void simple_type_spec() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simple_type_spec_AST = null;
		
		try {      // for error handling
			switch ( LA(1)) {
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_long:
			case LITERAL_short:
			case LITERAL_unsigned:
			case LITERAL_char:
			case LITERAL_wchar:
			case LITERAL_boolean:
			case LITERAL_octet:
			case LITERAL_any:
			case LITERAL_Object:
			case LITERAL_ValueBase:
			{
				base_type_spec();
				astFactory.addASTChild(currentAST, returnAST);
				simple_type_spec_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_sequence:
			case LITERAL_string:
			case LITERAL_wstring:
			case LITERAL_fixed:
			{
				template_type_spec();
				astFactory.addASTChild(currentAST, returnAST);
				simple_type_spec_AST = (AST)currentAST.root;
				break;
			}
			case SCOPEOP:
			case IDENT:
			{
				scoped_name();
				astFactory.addASTChild(currentAST, returnAST);
				simple_type_spec_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_34);
			} else {
			  throw ex;
			}
		}
		returnAST = simple_type_spec_AST;
	}
,
(startLine=4949 endLine=5003 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01153/modules/corba/src/org/apache/axis2/corba/idl/parser/IDLParser.java)
	public final void op_type_spec() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST op_type_spec_AST = null;
		
		try {      // for error handling
			switch ( LA(1)) {
			case SCOPEOP:
			case IDENT:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_long:
			case LITERAL_short:
			case LITERAL_unsigned:
			case LITERAL_char:
			case LITERAL_wchar:
			case LITERAL_boolean:
			case LITERAL_octet:
			case LITERAL_any:
			case LITERAL_Object:
			case LITERAL_string:
			case LITERAL_wstring:
			case LITERAL_ValueBase:
			{
				param_type_spec();
				astFactory.addASTChild(currentAST, returnAST);
				op_type_spec_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_void:
			{
				AST tmp165_AST = null;
				tmp165_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp165_AST);
				match(LITERAL_void);
				op_type_spec_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				reportError(ex);
				recover(ex,_tokenSet_29);
			} else {
			  throw ex;
			}
		}
		returnAST = op_type_spec_AST;
	}
,
>
, <(startLine=73 endLine=88 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00278/modules/core/src/org/apache/axis/deployment/repository/utill/ArchiveReader.java)
        try {
            zin = new ZipInputStream(new FileInputStream(strArchive));
            ZipEntry entry;
            while ((entry = zin.getNextEntry()) != null) {
                if (entry.getName().equals(SERVICEXML)) {
                    foundServiceXML = true;
                    DeploymentParser schme = new DeploymentParser(zin, engine);
                    schme.parseServiceXML(service);
                    break;
                }
            }
            zin.close();
            if (!foundServiceXML) {
                throw new DeploymentException("service.xml not found");
            }
        } catch (Exception e) {
,
(startLine=98 endLine=114 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00278/modules/core/src/org/apache/axis/deployment/repository/utill/ArchiveReader.java)
        try {
            zin = new ZipInputStream(new FileInputStream(strArchive));
            ZipEntry entry;
            while ((entry = zin.getNextEntry()) != null) {
                if (entry.getName().equals(MODULEXML)) {
                    foundmoduleXML = true;
                    DeploymentParser schme = new DeploymentParser(zin, engine);
                    schme.procesModuleXML(module);
                    break;
                }
            }
            //  zin.closeEntry();
            zin.close();
            if (!foundmoduleXML) {
                throw new DeploymentException("module.xml not found");
            }
        } catch (Exception e) {
,
>
, <(startLine=168 endLine=173 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01074/modules/kernel/src/org/apache/axis2/transport/xmpp/util/XMPPPacketListener.java)
		}catch (OMException e) {
			log.error("Error occured while trying to create " +
					"message content using XMPP message received :"+packet.toXML(), e);
			throw new AxisFault("Error occured while trying to create " +
					"message content using XMPP message received :"+packet.toXML());
		}catch (XMLStreamException e) {
,
(startLine=173 endLine=178 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01074/modules/kernel/src/org/apache/axis2/transport/xmpp/util/XMPPPacketListener.java)
		}catch (XMLStreamException e) {
			log.error("Error occured while trying to create " +
					"message content using XMPP message received :"+packet.toXML(), e);
			throw new AxisFault("Error occured while trying to create " +
					"message content using XMPP message received :"+packet.toXML());
		}catch (FactoryConfigurationError e) {
,
(startLine=178 endLine=183 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01074/modules/kernel/src/org/apache/axis2/transport/xmpp/util/XMPPPacketListener.java)
		}catch (FactoryConfigurationError e) {
			log.error("Error occured while trying to create " +
					"message content using XMPP message received :"+packet.toXML(), e);
			throw new AxisFault("Error occured while trying to create " +
					"message content using XMPP message received :"+packet.toXML());
		}catch (AxisFault e){
,
(startLine=183 endLine=188 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01074/modules/kernel/src/org/apache/axis2/transport/xmpp/util/XMPPPacketListener.java)
		}catch (AxisFault e){
			log.error("Error occured while trying to create " +
					"message content using XMPP message received :"+packet.toXML(), e);
			throw new AxisFault("Error occured while trying to create " +
					"message content using XMPP message received :"+packet.toXML());
		}
,
>
, <(startLine=205 endLine=217 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00367/modules/core/src/org/apache/axis/util/tcpmon.java)
                public void actionPerformed(ActionEvent event) {
                    if (listener.equals(event.getActionCommand())) {
                        boolean state = listenerButton.isSelected();
                        tport.setEnabled(state);
                        host.setEnabled(state);
                        hostLabel.setForeground(state
                                        ? Color.black
                                        : Color.gray);
                        tportLabel.setForeground(state
                                        ? Color.black
                                        : Color.gray);
                    }
                }
,
(startLine=250 endLine=262 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00367/modules/core/src/org/apache/axis/util/tcpmon.java)
                public void actionPerformed(ActionEvent event) {
                    if (proxy.equals(event.getActionCommand())) {
                        boolean state = proxyButton.isSelected();
                        tport.setEnabled(!state);
                        host.setEnabled(!state);
                        hostLabel.setForeground(state
                                        ? Color.gray
                                        : Color.black);
                        tportLabel.setForeground(state
                                        ? Color.gray
                                        : Color.black);
                    }
                }
,
>
, <(startLine=122 endLine=149 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01199/modules/metadata/test/org/apache/axis2/jaxws/description/impl/ClientDBCSupportEndpointTests.java)
    public void testAddPort() {
        QName serviceQName = new QName(namespaceURI, svcLocalPart);
        
        ServiceDescription svcDesc = DescriptionFactory.createServiceDescription(null, serviceQName, ClientDBCSupportEndpointServiceSubclass.class);
        assertNotNull(svcDesc);
        ServiceDescriptionImpl svcDescImpl = (ServiceDescriptionImpl) svcDesc;
        DescriptionBuilderComposite svcDescComposite = svcDescImpl.getDescriptionBuilderComposite();
        assertNotNull(svcDescComposite);
        
        Class testServiceClass = svcDescComposite.getCorrespondingClass();
        assertNotNull(testServiceClass);
        assertEquals(ClientDBCSupportEndpointServiceSubclass.class, testServiceClass);
        
        // Now update with an SEI
        QName portQName = new QName(namespaceURI, portLocalPart);
        DescriptionBuilderComposite setEpDescComposite = new DescriptionBuilderComposite();
        Object compositeKey = "Key1";
        try {
            EndpointDescription epDesc = 
                DescriptionFactory.updateEndpoint(svcDesc, ClientDBCSupportEndpointSEI.class, portQName, DescriptionFactory.UpdateType.ADD_PORT,
                                                  setEpDescComposite, compositeKey);
            fail("Should have caught an exception");
        }
        catch (WebServiceException e) {
            // Expected path
        }
        
    }
,
(startLine=154 endLine=184 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01199/modules/metadata/test/org/apache/axis2/jaxws/description/impl/ClientDBCSupportEndpointTests.java)
    public void testCreateDispatch() {
        QName serviceQName = new QName(namespaceURI, svcLocalPart);
        
        ServiceDescription svcDesc = DescriptionFactory.createServiceDescription(null, serviceQName, ClientDBCSupportEndpointServiceSubclass.class);
        assertNotNull(svcDesc);
        ServiceDescriptionImpl svcDescImpl = (ServiceDescriptionImpl) svcDesc;
        DescriptionBuilderComposite svcDescComposite = svcDescImpl.getDescriptionBuilderComposite();
        assertNotNull(svcDescComposite);
        
        Class testServiceClass = svcDescComposite.getCorrespondingClass();
        assertNotNull(testServiceClass);
        assertEquals(ClientDBCSupportEndpointServiceSubclass.class, testServiceClass);
        
        // Now update with an SEI
        QName portQName = new QName(namespaceURI, portLocalPart);
        DescriptionBuilderComposite setEpDescComposite = new DescriptionBuilderComposite();
        Object compositeKey = "Key1";
        try {
            EndpointDescription epDesc = 
                DescriptionFactory.updateEndpoint(svcDesc, null /* SEI can't be specified */, 
                                                  portQName, 
                                                  DescriptionFactory.UpdateType.CREATE_DISPATCH,
                                                  setEpDescComposite, compositeKey);
            fail("Should have caught an exception");
        }
        catch (WebServiceException e) {
            // Expected path
            String msg = Messages.getMessage("serviceDescErr6");
            assertTrue(e.toString().contains(msg));
        }
    }
,
>
, <(startLine=32 endLine=41 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00621/modules/metadata/test/org/apache/axis2/jaxws/description/builder/ReturnTypeParsingTests.java)
    public void testNonHolderGenric() {
        String inputString = "java.util.List<org.apache.axis2.jaxws.description.builder.MyReturnTestObject>";
        MethodDescriptionComposite mdc = new MethodDescriptionComposite();
        mdc.setReturnType(inputString);
        assertEquals(
                "java.util.List<org.apache.axis2.jaxws.description.builder.MyReturnTestObject>",
                mdc.getReturnType());

        assertEquals(java.util.List.class, mdc.getReturnTypeClass());
    }
,
(startLine=134 endLine=142 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00621/modules/metadata/test/org/apache/axis2/jaxws/description/builder/ReturnTypeParsingTests.java)
    public void testListOfMyObjectArray() {
        MethodDescriptionComposite mdc = new MethodDescriptionComposite();
        mdc.setReturnType("java.util.List<org.apache.axis2.jaxws.description.builder.MyReturnTestObject[][]>");
        assertEquals(
                "java.util.List<org.apache.axis2.jaxws.description.builder.MyReturnTestObject[][]>",
                mdc.getReturnType());

        assertEquals(List.class, mdc.getReturnTypeClass());
    }
,
(startLine=152 endLine=158 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00621/modules/metadata/test/org/apache/axis2/jaxws/description/builder/ReturnTypeParsingTests.java)
    public void testGenericArrayMultiDimension() {
        MethodDescriptionComposite mdc = new MethodDescriptionComposite();
        mdc.setReturnType("java.util.List<org.apache.axis2.jaxws.description.builder.MyReturnTestObject>[][]");
        assertEquals("java.util.List<org.apache.axis2.jaxws.description.builder.MyReturnTestObject>[][]",
                mdc.getReturnType());
        assertEquals(List[][].class, mdc.getReturnTypeClass());
    }
,
>
, <(startLine=35 endLine=43 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00562/modules/jaxws/test/org/apache/axis2/jaxws/description/WrapperPackageTests.java)
    public void testSEIPackageWrapper() {
        EndpointInterfaceDescription eiDesc = getEndpointInterfaceDesc(SEIPackageWrapper.class);
        OperationDescription opDesc = eiDesc.getOperation("method1");
        String requestWrapperClass = opDesc.getRequestWrapperClassName();
        assertEquals("org.apache.axis2.jaxws.description.Method1", requestWrapperClass);
        String responseWrapperClass = opDesc.getResponseWrapperClassName();
        assertEquals("org.apache.axis2.jaxws.description.Method1Response", responseWrapperClass);
        
    }
,
(startLine=45 endLine=53 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00562/modules/jaxws/test/org/apache/axis2/jaxws/description/WrapperPackageTests.java)
    public void testSEISubPackageWrapper() {
        EndpointInterfaceDescription eiDesc = getEndpointInterfaceDesc(SEISubPackageWrapper.class);
        OperationDescription opDesc = eiDesc.getOperation("subPackageMethod1");
        String requestWrapperClass = opDesc.getRequestWrapperClassName();
        assertEquals("org.apache.axis2.jaxws.description.jaxws.SubPackageMethod1", requestWrapperClass);
        String responseWrapperClass = opDesc.getResponseWrapperClassName();
        assertEquals("org.apache.axis2.jaxws.description.jaxws.SubPackageMethod1Response", responseWrapperClass);
        
    }
,
>
, <(startLine=87 endLine=98 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00773/modules/jaxws/test/server/EchoServiceMessageReceiverInOut.java)
                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, server.EchoString param, boolean optimizeContent){
                        if (param instanceof org.apache.axis2.databinding.ADBBean){
                            org.apache.axis2.databinding.ADBSOAPModelBuilder builder = new
                                    org.apache.axis2.databinding.ADBSOAPModelBuilder(param.getPullParser(server.EchoString.MY_QNAME),
                                                                                     factory);
                            return builder.getEnvelope();
                        }else{
                           
                           //todo finish this onece the bean serializer has the necessary methods
                            return null;
                        }
                    }
,
(startLine=116 endLine=127 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00773/modules/jaxws/test/server/EchoServiceMessageReceiverInOut.java)
                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, server.EchoStringResponse param, boolean optimizeContent){
                        if (param instanceof org.apache.axis2.databinding.ADBBean){
                            org.apache.axis2.databinding.ADBSOAPModelBuilder builder = new
                                    org.apache.axis2.databinding.ADBSOAPModelBuilder(param.getPullParser(server.EchoStringResponse.MY_QNAME),
                                                                                     factory);
                            return builder.getEnvelope();
                        }else{
                           
                           //todo finish this onece the bean serializer has the necessary methods
                            return null;
                        }
                    }
,
>
, <(startLine=297 endLine=306 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00436/modules/core/src/org/apache/axis2/phaseresolver/PhaseResolver.java)
            if (flow != null) {
                ArrayList handlers = new ArrayList();
                for (int j = 0; j < flow.getHandlerCount(); j++) {
                    HandlerDescription metadata = flow.getHandler(j);
                    metadata.getRules().setPhaseName(
                            PhaseMetadata.TRANSPORT_PHASE);
                    handlers.add(metadata);
                }
                new PhaseHolder().buildTransportHandlerChain(phase, handlers);
            } else {
,
(startLine=338 endLine=347 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00436/modules/core/src/org/apache/axis2/phaseresolver/PhaseResolver.java)
            if (flow != null) {
                ArrayList handlers = new ArrayList();
                for (int j = 0; j < flow.getHandlerCount(); j++) {
                    HandlerDescription metadata = flow.getHandler(j);
                    metadata.getRules().setPhaseName(
                            PhaseMetadata.TRANSPORT_PHASE);
                    handlers.add(metadata);
                }
                new PhaseHolder().buildTransportHandlerChain(phase, handlers);
            } else {
,
>
, <(startLine=28 endLine=61 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00749/modules/integration/src/test/interop/whitemesa/round2/util/GroupbEchoSimpleTypesAsStructUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();

        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        OMNamespace encNs = reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        OMNamespace typeNs = reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        OMNamespace envNs = reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");

        OMElement operation = omfactory.createOMElement("echoSimpleTypesAsStruct", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.declareNamespace(envNs);
        operation.addAttribute("encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", envNs);

        OMElement part0 = omfactory.createOMElement("inputString", null);
        part0.addAttribute("xsi:type", "xsd:string", null);
        part0.addChild(omfactory.createOMText("45ascasc  acasa asd52"));

        OMElement part1 = omfactory.createOMElement("inputInteger", null);
        part1.addAttribute("xsi:type", "xsd:int", null);
        part1.addChild(omfactory.createOMText("4552"));

        OMElement part2 = omfactory.createOMElement("inputFloat", null);
        part2.addAttribute("xsi:type", "xsd:float", null);
        part2.addChild(omfactory.createOMText("450.52"));

        operation.addChild(part0);
        operation.addChild(part1);
        operation.addChild(part2);
        return reqEnv;
    }
,
(startLine=27 endLine=58 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00749/modules/integration/src/test/interop/whitemesa/round2/util/soap12/GroupbSoap12EchoSimpleTypesAsStructUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");

        OMElement operation = omfactory.createOMElement("echoSimpleTypesAsStruct", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        OMElement part0 = omfactory.createOMElement("inputString", "", null);
        part0.addAttribute("xsi:type", "xsd:string", null);
        part0.addChild(omfactory.createOMText("45ascasc  acasa asd52"));

        OMElement part1 = omfactory.createOMElement("inputInteger", "", null);
        part1.addAttribute("xsi:type", "xsd:int", null);
        part1.addChild(omfactory.createOMText("4552"));

        OMElement part2 = omfactory.createOMElement("inputFloat", "", null);
        part2.addAttribute("xsi:type", "xsd:float", null);
        part2.addChild(omfactory.createOMText("450.52"));

        operation.addChild(part0);
        operation.addChild(part1);
        operation.addChild(part2);

        return reqEnv;
    }
,
>
, <(startLine=101 endLine=117 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00060/dev/scratch/prototype2/src/test/org/apache/axis/om/impl/streamwrapper/OMStaxStreamingWrapperTest.java)
    private String getEventString(int event){
        String outStr = "";
        switch (event){
            case XMLStreamConstants.START_ELEMENT:
                outStr = "START_ELEMENT";
                break;
            case XMLStreamConstants.END_ELEMENT:
                outStr = "END_ELEMENT";
                break;
            case XMLStreamConstants.CHARACTERS:
                outStr = "char";
                break;
            default:outStr = event+"";

        }
        return outStr;
    }
,
(startLine=80 endLine=96 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00060/dev/scratch/chinthaka/OM/src/test/org/apache/axis/om/impl/streamwrapper/OMStaxStreamingWrapperTest.java)
    private String getEventString(int event){
        String outStr = "";
        switch (event){
            case XMLStreamConstants.START_ELEMENT:
                outStr = "START_ELEMENT";
                break;
            case XMLStreamConstants.END_ELEMENT:
                outStr = "END_ELEMENT";
                break;
            case XMLStreamConstants.CHARACTERS:
                outStr = "char";
                break;
            default:outStr = event+"";

        }
        return outStr;
    }
,
>
, <(startLine=91 endLine=149 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00419/modules/samples/test/org/apache/axis2/engine/EchoRawXMLOnTwoChannelsTest.java)
    public void testEchoXMLCompleteASync() throws Exception {
        ServiceDescription service =
                Utils.createSimpleService(serviceName,
                        Echo.class.getName(),
                        operationName);

        ServiceContext serviceContext = UtilServer.createAdressedEnabledClientSide(
                service);

        OMFactory fac = OMAbstractFactory.getOMFactory();

        OMNamespace omNs = fac.createOMNamespace("http://localhost/my", "my");
        OMElement method = fac.createOMElement("echoOMElement", omNs);
        OMElement value = fac.createOMElement("myValue", omNs);
        value.setText("Isaac Assimov, the foundation Sega");
        method.addChild(value);

        org.apache.axis2.clientapi.Call call = new org.apache.axis2.clientapi.Call(
                serviceContext);
        call.engageModule(new QName(Constants.MODULE_ADDRESSING));

        try {
            call.setTo(targetEPR);
            call.setTransportInfo(Constants.TRANSPORT_HTTP,
                    Constants.TRANSPORT_HTTP,
                    true);
            Callback callback = new Callback() {
                public void onComplete(AsyncResult result) {
                    TestingUtils.campareWithCreatedOMElement(
                            result.getResponseEnvelope().getBody()
                            .getFirstElement());
                    finish = true;
                }

                public void reportError(Exception e) {
                    e.printStackTrace();
                    finish = true;
                }
            };

            call.invokeNonBlocking(operationName.getLocalPart(),
                    method,
                    callback);
            int index = 0;
            while (!finish) {
                Thread.sleep(1000);
                index++;
                if (index > 10) {
                    throw new AxisFault(
                            "Server is shutdown as the Async response take too longs time");
                }
            }
            log.info("send the reqest");
            call.close();
        } finally {
            call.close();
        }

    }
,
(startLine=104 endLine=162 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00419/modules/samples/test/org/apache/axis2/tcp/TCPTwoChannelEchoRawXMLTest.java)
    public void testEchoXMLCompleteASync() throws Exception {
        ServiceDescription service =
                Utils.createSimpleService(serviceName,
                        Echo.class.getName(),
                        operationName);


        OMFactory fac = OMAbstractFactory.getOMFactory();

        OMNamespace omNs = fac.createOMNamespace("http://localhost/my", "my");
        OMElement method = fac.createOMElement("echoOMElement", omNs);
        OMElement value = fac.createOMElement("myValue", omNs);
        value.setText("Isaac Assimov, the foundation Sega");
        method.addChild(value);

        org.apache.axis2.clientapi.Call call = new org.apache.axis2.clientapi.Call(
                serviceContext);
        call.engageModule(new QName(Constants.MODULE_ADDRESSING));

        try {
            call.setTo(targetEPR);
            call.setTransportInfo(Constants.TRANSPORT_TCP,
                    Constants.TRANSPORT_TCP,
                    true);
            Callback callback = new Callback() {
                public void onComplete(AsyncResult result) {
                    try {
                        result.getResponseEnvelope().serialize(XMLOutputFactory.newInstance()
                                .createXMLStreamWriter(System.out));
                    } catch (XMLStreamException e) {
                        reportError(e);
                    } finally {
                        finish = true;
                    }
                }

                public void reportError(Exception e) {
                    e.printStackTrace();
                    finish = true;
                }
            };

            call.invokeNonBlocking(operationName.getLocalPart(),
                    method,
                    callback);
            int index = 0;
            while (!finish) {
                Thread.sleep(1000);
                index++;
                if (index > 10) {
                    throw new AxisFault(
                            "Server is shutdown as the Async response take too longs time");
                }
            }
        } finally {
            call.close();
        }

    }
,
>
, <(startLine=126 endLine=139 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00716/modules/kernel/src/org/apache/axis2/java/security/AccessController.java)
            throws PrivilegedActionException {
        SecurityManager sm = System.getSecurityManager();
        if (sm == null) {
            try {
                return action.run();
            } catch (java.lang.RuntimeException e) {
                throw e;
            } catch (Exception e) {
                throw new PrivilegedActionException(e);
            }
        } else {
            return java.security.AccessController.doPrivileged(action);
        }
    }
,
(startLine=166 endLine=180 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00716/modules/kernel/src/org/apache/axis2/java/security/AccessController.java)
            throws PrivilegedActionException {

        SecurityManager sm = System.getSecurityManager();
        if (sm == null) {
            try {
                return action.run();
            } catch (java.lang.RuntimeException e) {
                throw e;
            } catch (Exception e) {
                throw new PrivilegedActionException(e);
            }
        } else {
            return java.security.AccessController.doPrivileged(action, context);
        }
    }
,
>
, <(startLine=144 endLine=176 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01276/modules/corba/src/org/apache/axis2/corba/idl/parser/ExpressionUtil.java)
    private static Object add(Object o1, Object o2, TypeCode returnType) throws InvalidIDLException {
        TCKind kind = returnType.kind();
        Object valueObj;
        switch (kind.value()) {
            case TCKind._tk_long:
            case TCKind._tk_ulong:
                valueObj = new Integer(((Integer) o1).intValue() + ((Integer) o2).intValue());
                break;
            case TCKind._tk_longlong:
            case TCKind._tk_ulonglong:
                valueObj = new Long(((Long) o1).longValue() + ((Long) o2).longValue());
                break;
            case TCKind._tk_float:
                valueObj = new Float(((Float) o1).floatValue() + ((Float) o2).floatValue());
                break;
            case TCKind._tk_short:
            case TCKind._tk_ushort:
                valueObj = new Short((short) (((Short) o1).shortValue() + ((Short) o2).shortValue()));
                break;
            case TCKind._tk_double:
                valueObj = new Double(((Double) o1).doubleValue() + ((Double) o2).doubleValue());
                break;
            case TCKind._tk_octet:
                valueObj = new Byte((byte) (((Byte) o1).byteValue() + ((Byte) o2).byteValue()));
                break;
            case TCKind._tk_fixed:
                valueObj = ((BigDecimal) o1).add((BigDecimal) o2);
                break;
            default:
                throw new InvalidIDLException("Unsupported IDL token");
        }
        return valueObj;
    }
,
(startLine=212 endLine=244 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01276/modules/corba/src/org/apache/axis2/corba/idl/parser/ExpressionUtil.java)
    private static Object subtract(Object o1, Object o2, TypeCode returnType) throws InvalidIDLException {
        TCKind kind = returnType.kind();
        Object valueObj;
        switch (kind.value()) {
            case TCKind._tk_long:
            case TCKind._tk_ulong:
                valueObj = new Integer(((Integer) o1).intValue() - ((Integer) o2).intValue());
                break;
            case TCKind._tk_longlong:
            case TCKind._tk_ulonglong:
                valueObj = new Long(((Long) o1).longValue() - ((Long) o2).longValue());
                break;
            case TCKind._tk_float:
                valueObj = new Float(((Float) o1).floatValue() - ((Float) o2).floatValue());
                break;
            case TCKind._tk_short:
            case TCKind._tk_ushort:
                valueObj = new Short((short) (((Short) o1).shortValue() - ((Short) o2).shortValue()));
                break;
            case TCKind._tk_double:
                valueObj = new Double(((Double) o1).doubleValue() - ((Double) o2).doubleValue());
                break;
            case TCKind._tk_octet:
                valueObj = new Byte((byte) (((Byte) o1).byteValue() - ((Byte) o2).byteValue()));
                break;
            case TCKind._tk_fixed:
                valueObj = ((BigDecimal) o1).subtract((BigDecimal) o2);
                break;
            default:
                throw new InvalidIDLException("Unsupported IDL token");
        }
        return valueObj;
    }
,
(startLine=246 endLine=278 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01276/modules/corba/src/org/apache/axis2/corba/idl/parser/ExpressionUtil.java)
    private static Object multiply(Object o1, Object o2, TypeCode returnType) throws InvalidIDLException {
        TCKind kind = returnType.kind();
        Object valueObj;
        switch (kind.value()) {
            case TCKind._tk_long:
            case TCKind._tk_ulong:
                valueObj = new Integer(((Integer) o1).intValue() * ((Integer) o2).intValue());
                break;
            case TCKind._tk_longlong:
            case TCKind._tk_ulonglong:
                valueObj = new Long(((Long) o1).longValue() * ((Long) o2).longValue());
                break;
            case TCKind._tk_float:
                valueObj = new Float(((Float) o1).floatValue() * ((Float) o2).floatValue());
                break;
            case TCKind._tk_short:
            case TCKind._tk_ushort:
                valueObj = new Short((short) (((Short) o1).shortValue() * ((Short) o2).shortValue()));
                break;
            case TCKind._tk_double:
                valueObj = new Double(((Double) o1).doubleValue() * ((Double) o2).doubleValue());
                break;
            case TCKind._tk_octet:
                valueObj = new Byte((byte) (((Byte) o1).byteValue() * ((Byte) o2).byteValue()));
                break;
            case TCKind._tk_fixed:
                valueObj = ((BigDecimal) o1).multiply((BigDecimal) o2);
                break;
            default:
                throw new InvalidIDLException("Unsupported IDL token");
        }
        return valueObj;
    }
,
(startLine=280 endLine=312 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01276/modules/corba/src/org/apache/axis2/corba/idl/parser/ExpressionUtil.java)
    private static Object div(Object o1, Object o2, TypeCode returnType) throws InvalidIDLException {
        TCKind kind = returnType.kind();
        Object valueObj;
        switch (kind.value()) {
            case TCKind._tk_long:
            case TCKind._tk_ulong:
                valueObj = new Integer(((Integer) o1).intValue() / ((Integer) o2).intValue());
                break;
            case TCKind._tk_longlong:
            case TCKind._tk_ulonglong:
                valueObj = new Long(((Long) o1).longValue() / ((Long) o2).longValue());
                break;
            case TCKind._tk_float:
                valueObj = new Float(((Float) o1).floatValue() / ((Float) o2).floatValue());
                break;
            case TCKind._tk_short:
            case TCKind._tk_ushort:
                valueObj = new Short((short) (((Short) o1).shortValue() / ((Short) o2).shortValue()));
                break;
            case TCKind._tk_double:
                valueObj = new Double(((Double) o1).doubleValue() / ((Double) o2).doubleValue());
                break;
            case TCKind._tk_octet:
                valueObj = new Byte((byte) (((Byte) o1).byteValue() / ((Byte) o2).byteValue()));
                break;
            case TCKind._tk_fixed:
                valueObj = ((BigDecimal) o1).divide((BigDecimal) o2);
                break;
            default:
                throw new InvalidIDLException("Unsupported IDL token");
        }
        return valueObj;
    }
,
(startLine=389 endLine=418 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01276/modules/corba/src/org/apache/axis2/corba/idl/parser/ExpressionUtil.java)
    private static Object mod(Object o1, Object o2, TypeCode returnType) throws InvalidIDLException {
        TCKind kind = returnType.kind();
        Object valueObj;
        switch (kind.value()) {
            case TCKind._tk_long:
            case TCKind._tk_ulong:
                valueObj = new Integer(((Integer) o1).intValue() % ((Integer) o2).intValue());
                break;
            case TCKind._tk_longlong:
            case TCKind._tk_ulonglong:
                valueObj = new Long(((Long) o1).longValue() % ((Long) o2).longValue());
                break;
            case TCKind._tk_float:
                valueObj = new Float(((Float) o1).floatValue() % ((Float) o2).floatValue());
                break;
            case TCKind._tk_short:
            case TCKind._tk_ushort:
                valueObj = new Short((short) (((Short) o1).shortValue() % ((Short) o2).shortValue()));
                break;
            case TCKind._tk_double:
                valueObj = new Double(((Double) o1).doubleValue() % ((Double) o2).doubleValue());
                break;
            case TCKind._tk_octet:
                valueObj = new Byte((byte) (((Byte) o1).byteValue() % ((Byte) o2).byteValue()));
                break;
            default:
                throw new InvalidIDLException("Unsupported IDL token");
        }
        return valueObj;
    }
,
>
, <(startLine=89 endLine=98 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00166/dev/scratch/prototype2/src/samples/userguide/sample1/src/samples/userguide/sample1/client/InteropTest_Stub.java)
	protected SOAPEnvelope getSOAPEnvelopForEchoInt(Integer value){
		SOAPEnvelope envelope = OMFactory.newInstance().getDefaultEnvelope();
		OMNamespace namespace = envelope.declareNamespace("http://soapinterop.org/", "interop");
		OMElement echoIntMessage = omFactory.createOMElement("echoInt", namespace);
		OMElement text = omFactory.createOMElement("Text", namespace);
		text.addChild(omFactory.createText(value.toString()));
		echoIntMessage.addChild(text);
		envelope.getBody().addChild(echoIntMessage);
		return envelope;		
	}
,
(startLine=94 endLine=103 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00166/dev/scratch/prototype2/src/samples/userguide/sample2/src/samples/userguide/sample2/client/InteropTest_Stub.java)
	protected SOAPEnvelope getSOAPEnvelopForEchoInt(Integer value){
		SOAPEnvelope envelope = OMFactory.newInstance().getDefaultEnvelope();
		OMNamespace namespace = envelope.declareNamespace("http://soapinterop.org/", "interop");
		OMElement echoIntMessage = omFactory.createOMElement("echoInt", namespace);
		OMElement text = omFactory.createOMElement("Text", namespace);
		text.addChild(omFactory.createText(value.toString()));
		echoIntMessage.addChild(text);
		envelope.getBody().addChild(echoIntMessage);
		return envelope;		
	}
,
(startLine=93 endLine=102 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00166/dev/scratch/prototype2/src/samples/userguide/sample3/src/samples/userguide/sample3/client/InteropTest_Stub.java)
	protected SOAPEnvelope getSOAPEnvelopForEchoInt(Integer value){
		SOAPEnvelope envelope = OMFactory.newInstance().getDefaultEnvelope();
		OMNamespace namespace = envelope.declareNamespace("http://soapinterop.org/", "interop");
		OMElement echoIntMessage = omFactory.createOMElement("echoInt", namespace);
		OMElement text = omFactory.createOMElement("Text", namespace);
		text.addChild(omFactory.createText(value.toString()));
		echoIntMessage.addChild(text);
		envelope.getBody().addChild(echoIntMessage);
		return envelope;		
	}
,
>
, <(startLine=62 endLine=70 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00702/modules/kernel/test/org/apache/axis2/java/security/driver/Java2SecTest.java)
    public Java2SecTest() {
    super();
    System.out.println("\nJava2SecTest ctor 1");
    Calendar cal = Calendar.getInstance(TimeZone.getDefault());
    String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(DATE_FORMAT);
    sdf.setTimeZone(TimeZone.getDefault());               
    System.out.println("Current time => " + sdf.format(cal.getTime()) + "\n");
    }
,
(startLine=73 endLine=81 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00702/modules/kernel/test/org/apache/axis2/java/security/driver/Java2SecTest.java)
    public Java2SecTest(String arg) {
    super(arg);
    System.out.println("\nJava2SecTest ctor 2");
    Calendar cal = Calendar.getInstance(TimeZone.getDefault());
    String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(DATE_FORMAT);
    sdf.setTimeZone(TimeZone.getDefault());               
    System.out.println("Current time => " + sdf.format(cal.getTime()) + "\n");
    }
,
>
, <(startLine=126 endLine=140 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00340/modules/xml/src/org/apache/axis/om/impl/llom/util/XMLComparator.java)
    private void compare(String failureNotice, OMNamespace one, OMNamespace two) throws XMLComparisonException {
        if(one == null && two == null){
            return;
        }else if(one != null && two == null){
            throw new XMLComparisonException("First Namespace is NOT null. But the second is null");
        }else if(one == null && two != null){
            throw new XMLComparisonException("First Namespace is null. But the second is NOT null");
        }

        if(!one.getName().equals(two.getName())){
            throw new XMLComparisonException(failureNotice + one + " != " + two);
        }

        // Do we need to compare prefixes as well
    }
,
(startLine=111 endLine=125 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00340/modules/xml/test/org/apache/axis/om/util/XMLComparator.java)
    private void compare(String failureNotice, OMNamespace one, OMNamespace two) throws XMLComparisonException {
        if(one == null && two == null){
            return;
        }else if(one != null && two == null){
            throw new XMLComparisonException("First Namespace is NOT null. But the second is null");
        }else if(one == null && two != null){
            throw new XMLComparisonException("First Namespace is null. But the second is NOT null");
        }

        if(!one.getName().equals(two.getName())){
            throw new XMLComparisonException(failureNotice + one + " != " + two);
        }

        // Do we need to compare prefixes as well
    }
,
>
, <(startLine=163 endLine=205 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00280/modules/core/samples/deployment/module2/org/apache/axis/handlers/AddressingOutHandler.java)
                                   SOAPHeader soapHeader) {
        if (epr == null) {
            return;
        }
        String address = epr.getAddress();
        if (!"".equals(address) && address != null) {
            SOAPHeaderBlock soapHeaderBlock =
                    soapHeader.addHeaderBlock(type, addressingNamespace);
            OMElement addressElement =
                    OMAbstractFactory.getSOAP11Factory().createOMElement(EPR_ADDRESS,
                            addressingNamespace);
            soapHeaderBlock.addChild(addressElement);
            addressElement.setText(address);

        }

        QName portType = epr.getPortType();
        if (portType != null) {
            SOAPHeaderBlock soapHeaderBlock =
                    soapHeader.addHeaderBlock(EPR_PORT_TYPE, addressingNamespace);
            soapHeaderBlock.addChild(OMAbstractFactory.getSOAP11Factory().createText(portType.getPrefix() + ":" + portType.getLocalPart()));
        }

        ServiceName serviceName = epr.getServiceName();
        if (serviceName != null) {
            SOAPHeaderBlock soapHeaderBlock =
                    soapHeader.addHeaderBlock(EPR_SERVICE_NAME,
                            addressingNamespace);
            soapHeaderBlock.addAttribute(EPR_SERVICE_NAME_PORT_NAME,
                    serviceName.getPortName(),
                    addressingNamespace);
            soapHeaderBlock.addChild(OMAbstractFactory.getSOAP11Factory().createText(serviceName.getName().getPrefix()
                    + ":"
                    + serviceName.getName().getLocalPart()));
        }

        AnyContentType referenceParameters = epr.getReferenceParameters();
        processAnyContentType(referenceParameters, soapHeader);

        AnyContentType referenceProperties = epr.getReferenceProperties();
        processAnyContentType(referenceProperties, soapHeader);

    }
,
(startLine=157 endLine=199 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00280/modules/core/src/org/apache/axis/handlers/addressing/AddressingOutHandler.java)
                                   SOAPHeader soapHeader) {
        if (epr == null) {
            return;
        }
        String address = epr.getAddress();
        if (!"".equals(address) && address != null) {
            SOAPHeaderBlock soapHeaderBlock =
                    soapHeader.addHeaderBlock(type, addressingNamespace);
            OMElement addressElement =
                    OMAbstractFactory.getSOAP11Factory().createOMElement(EPR_ADDRESS,
                            addressingNamespace);
            soapHeaderBlock.addChild(addressElement);
            addressElement.setText(address);

        }

        QName portType = epr.getPortType();
        if (portType != null) {
            SOAPHeaderBlock soapHeaderBlock =
                    soapHeader.addHeaderBlock(EPR_PORT_TYPE, addressingNamespace);
            soapHeaderBlock.addChild(OMAbstractFactory.getSOAP11Factory().createText(portType.getPrefix() + ":" + portType.getLocalPart()));
        }

        ServiceName serviceName = epr.getServiceName();
        if (serviceName != null) {
            SOAPHeaderBlock soapHeaderBlock =
                    soapHeader.addHeaderBlock(EPR_SERVICE_NAME,
                            addressingNamespace);
            soapHeaderBlock.addAttribute(EPR_SERVICE_NAME_PORT_NAME,
                    serviceName.getPortName(),
                    addressingNamespace);
            soapHeaderBlock.addChild(OMAbstractFactory.getSOAP11Factory().createText(serviceName.getName().getPrefix()
                    + ":"
                    + serviceName.getName().getLocalPart()));
        }

        AnyContentType referenceParameters = epr.getReferenceParameters();
        processAnyContentType(referenceParameters, soapHeader);

        AnyContentType referenceProperties = epr.getReferenceProperties();
        processAnyContentType(referenceProperties, soapHeader);

    }
,
(startLine=164 endLine=206 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00280/modules/addressing/src/org/apache/axis/handlers/AddressingOutHandler.java)
                                   SOAPHeader soapHeader) {
        if (epr == null) {
            return;
        }
        String address = epr.getAddress();
        if (!"".equals(address) && address != null) {
            SOAPHeaderBlock soapHeaderBlock =
                    soapHeader.addHeaderBlock(type, addressingNamespace);
            OMElement addressElement =
                    OMAbstractFactory.getSOAP11Factory().createOMElement(EPR_ADDRESS,
                            addressingNamespace);
            soapHeaderBlock.addChild(addressElement);
            addressElement.setText(address);

        }

        QName portType = epr.getPortType();
        if (portType != null) {
            SOAPHeaderBlock soapHeaderBlock =
                    soapHeader.addHeaderBlock(EPR_PORT_TYPE, addressingNamespace);
            soapHeaderBlock.addChild(OMAbstractFactory.getSOAP11Factory().createText(portType.getPrefix() + ":" + portType.getLocalPart()));
        }

        ServiceName serviceName = epr.getServiceName();
        if (serviceName != null) {
            SOAPHeaderBlock soapHeaderBlock =
                    soapHeader.addHeaderBlock(EPR_SERVICE_NAME,
                            addressingNamespace);
            soapHeaderBlock.addAttribute(EPR_SERVICE_NAME_PORT_NAME,
                    serviceName.getPortName(),
                    addressingNamespace);
            soapHeaderBlock.addChild(OMAbstractFactory.getSOAP11Factory().createText(serviceName.getName().getPrefix()
                    + ":"
                    + serviceName.getName().getLocalPart()));
        }

        AnyContentType referenceParameters = epr.getReferenceParameters();
        processAnyContentType(referenceParameters, soapHeader);

        AnyContentType referenceProperties = epr.getReferenceProperties();
        processAnyContentType(referenceProperties, soapHeader);

    }
,
>
, <(startLine=47 endLine=72 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00354/modules/tool/src/org/apache/axis/tool/codegen/eclipse/ui/WSDLFileSelectionPage.java)
   {
      super(org.apache.axis.tool.codegen.eclipse.plugin.CodegenWizardPlugin.getResourceString("page1.name"));
      setTitle(CodegenWizardPlugin.getResourceString("page1.title"));
      setDescription(org.apache.axis.tool.codegen.eclipse.plugin.CodegenWizardPlugin.getResourceString("page1.desc"));
      this.selection = selection;
      setImageDescriptor(org.apache.axis.tool.codegen.eclipse.plugin.CodegenWizardPlugin.getWizardImageDescriptor());
      // set the page complete status to false at initiation
      setPageComplete(false);

      /*
       * Get the settings for this page. If there is no section in the Plugin's settings for this OptionsPage, create a
       * new section
       */
      IDialogSettings rootSettings = CodegenWizardPlugin.getDefault().getDialogSettings();
      IDialogSettings section = rootSettings.getSection(this.getClass().getName());
      if (section == null)
      {
         settings = rootSettings.addNewSection(this.getClass().getName());
         initializeDefaultSettings();
      }
      else
      {
         settings = section;
      }

   }
,
(startLine=56 endLine=81 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00354/modules/tool/src/org/apache/axis/tool/codegen/eclipse/ui/OutputPage.java)
   {
      super(CodegenWizardPlugin.getResourceString("page3.name"));
      setTitle(CodegenWizardPlugin.getResourceString("page3.title"));
      setDescription(org.apache.axis.tool.codegen.eclipse.plugin.CodegenWizardPlugin.getResourceString("page3.desc"));
      setImageDescriptor(org.apache.axis.tool.codegen.eclipse.plugin.CodegenWizardPlugin.getWizardImageDescriptor());
      // set the page complete status to false at initilaization
      setPageComplete(false);

      /*
       * Get the settings for this page. If there is no section in the Plugin's settings for this OptionsPage, create a
       * new section
       */
      IDialogSettings rootSettings = CodegenWizardPlugin.getDefault().getDialogSettings();
      IDialogSettings section = rootSettings.getSection(this.getClass().getName());
      if (section == null)
      {
         settings = rootSettings.addNewSection(this.getClass().getName());
         initializeDefaultSettings();
      }
      else
      {
         settings = section;
      }


   }
,
>
, <(startLine=64 endLine=76 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00456/modules/integration/src/org/apache/axis2/soap12testing/client/SOAPCreater.java)
    public SOAPEnvelope getEnvelopeFromSOAPMessage(String pathAndFileName) {
        File file = new File(pathAndFileName);
        try {
            XMLStreamReader parser =
                XMLInputFactory.newInstance().createXMLStreamReader(new FileReader(file));
            OMXMLParserWrapper builder = new StAXSOAPModelBuilder(parser, null);
            return (SOAPEnvelope) builder.getDocumentElement();
        } catch (Exception e) {
            log.info(e.getMessage());
//            e.printStackTrace();
        }
        return null;
    }
,
(startLine=64 endLine=76 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00456/modules/samples/src/org/apache/axis2/soap12testing/client/SOAPCreater.java)
    public SOAPEnvelope getEnvelopeFromSOAPMessage(String pathAndFileName) {
        File file = new File(pathAndFileName);
        try {
            XMLStreamReader parser =
                XMLInputFactory.newInstance().createXMLStreamReader(new FileReader(file));
            OMXMLParserWrapper builder = new StAXSOAPModelBuilder(parser, null);
            return (SOAPEnvelope) builder.getDocumentElement();
        } catch (Exception e) {
            log.info(e.getMessage());
//            e.printStackTrace();
        }
        return null;
    }
,
>
, <(startLine=56 endLine=106 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00828/modules/codegen/src/org/apache/axis2/wsdl/codegen/extension/XMLBeansExtension.java)
    public void engage(CodeGenConfiguration configuration) {

        //test the databinding type. If not just fall through
        if (testFallThrough(configuration.getDatabindingType())) {
            return;
        }

        try {
            // try dummy load of framework class first to check missing jars
            try {
                getClass().getClassLoader().loadClass(XMLBEANS_CONFIG_CLASS);
            } catch (ClassNotFoundException e) {
                throw new RuntimeException("XMLBeans framework jars not in classpath");
            }

            // load the actual utility class
            Class clazz = null;
            try {
                clazz = getClass().getClassLoader().loadClass(XMLBEANS_UTILITY_CLASS);
            } catch (ClassNotFoundException e) {
                throw new RuntimeException("XMLBeans binding extension not in classpath");
            }

            // invoke utility class method for actual processing
            Method method = clazz.getMethod(XMLBEANS_PROCESS_METHOD,
                                            new Class[] { List.class, Element[].class,
                                                    CodeGenConfiguration.class });
            List schemas = new ArrayList();
            List axisServices = configuration.getAxisServices();
            AxisService axisService = null;
            for (Iterator iter = axisServices.iterator(); iter.hasNext();) {
                axisService = (AxisService)iter.next();
                schemas.addAll(axisService.getSchema());
            }

            Element[] additionalSchemas = loadAdditionalSchemas();
            TypeMapper mapper = (TypeMapper)method.invoke(null,
                                                          new Object[] { schemas, additionalSchemas,
                                                                  configuration });

            // set the type mapper to the config
            configuration.setTypeMapper(mapper);

        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RuntimeException(e);
            }
        }
    }
,
(startLine=59 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00828/modules/codegen/src/org/apache/axis2/wsdl/codegen/extension/JAXBRIExtension.java)
    public void engage(CodeGenConfiguration configuration) {

        //test the databinding type. If not just fall through
        if (testFallThrough(configuration.getDatabindingType())) {
            return;
        }

        try {

            // try dummy load of framework classes first to check missing jars
            try {
                ClassLoader cl = getClass().getClassLoader();
                cl.loadClass(JAXB_RI_API_CLASS);
                cl.loadClass(JAXB_RI_IMPL_CLASS);
                cl.loadClass(JAXB_RI_XJC_CLASS);
            } catch (ClassNotFoundException e) {
                throw new RuntimeException("JAX-B RI JARs not on classpath");
            }

            // load the actual utility class
            Class clazz = null;
            try {
                clazz = JAXBRIExtension.class.getClassLoader().loadClass(JAXB_RI_UTILITY_CLASS);
            } catch (ClassNotFoundException e) {
                throw new RuntimeException("JAX-B RI binding extension not in classpath");
            }

            // invoke utility class method for actual processing
            Method method = clazz.getMethod(JAXB_RI_PROCESS_METHOD,
                                            new Class[] { List.class, Element[].class,
                                                    CodeGenConfiguration.class });
            List schemas = new ArrayList();
            List axisServices = configuration.getAxisServices();
            AxisService axisService = null;
            for (Iterator iter = axisServices.iterator(); iter.hasNext();) {
                axisService = (AxisService)iter.next();
                schemas.addAll(axisService.getSchema());
            }
            Element[] additionalSchemas = loadAdditionalSchemas();
            TypeMapper mapper = (TypeMapper)method.invoke(null,
                                                          new Object[] { schemas, additionalSchemas,
                                                                  configuration });

            // set the type mapper to the config
            configuration.setTypeMapper(mapper);

        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RuntimeException(e);
            }
        }

    }
,
>
, <(startLine=205 endLine=219 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00188/modules/om/src/java/org/apache/axis/om/impl/llom/OMStAXWrapper.java)
    public String getPrefix() {
        String returnStr = null;
        if (parser != null) {
            returnStr = parser.getPrefix();
        } else {
            if ((currentEvent == START_ELEMENT)
                    || (currentEvent == END_ELEMENT)) {
                OMNamespace ns = ((OMElement) lastNode).getNamespace();
                returnStr = (ns == null)
                        ? null
                        : ns.getPrefix();
            }
        }
        return returnStr;
    }
,
(startLine=225 endLine=240 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00188/modules/om/src/java/org/apache/axis/om/impl/llom/OMStAXWrapper.java)
    public String getNamespaceURI() {
        String returnStr = null;
        if (parser != null) {
            returnStr = parser.getNamespaceURI();
        } else {
            if ((currentEvent == START_ELEMENT)
                    || (currentEvent == END_ELEMENT)
                    || (currentEvent == NAMESPACE)) {
                OMNamespace ns = ((OMElement) lastNode).getNamespace();
                returnStr = (ns == null)
                        ? null
                        : ns.getName();
            }
        }
        return returnStr;
    }
,
>
, <(startLine=255 endLine=279 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01206/modules/kernel/src/org/apache/axis2/addressing/AddressingHelper.java)
        } else {
            // otherwise, if no Parameter exists
            if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                log.debug("setInvocationPatternParameterValue: Parameter does not exist");
            }
            // Create new Parameter with correct name/value
            param = new Parameter();
            param.setName(AddressingConstants.WSAM_INVOCATION_PATTERN_PARAMETER_NAME);
            param.setValue(value);
            try {
                if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                    log.debug("setInvocationPatternParameterValue: Adding parameter with value: " + value);
                }
                // and add it to the AxisOperation object
                axisOperation.addParameter(param);
            } catch (AxisFault af) {
                // This should not happen. AxisFault is only ever thrown when a locked Parameter
                // of the same name already exists and this should be dealt with by the outer
                // if statement.
                if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                    log.debug(
                            "setInvocationPatternParameterValue: addParameter failed: " + af.getMessage());
                }
            }
        }
,
(startLine=306 endLine=330 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01206/modules/kernel/src/org/apache/axis2/addressing/AddressingHelper.java)
        } else {
            // otherwise, if no Parameter exists
            if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                log.debug("setAddressingRequirementParemeterValue: Parameter does not exist");
            }
            // Create new Parameter with correct name/value
            param = new Parameter();
            param.setName(AddressingConstants.ADDRESSING_REQUIREMENT_PARAMETER);
            param.setValue(value);
            try {
                if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                    log.debug("setAddressingRequirementParemeterValue: Adding parameter with value: " + value);
                }
                // and add it to the AxisOperation object
                axisDescription.addParameter(param);
            } catch (AxisFault af) {
                // This should not happen. AxisFault is only ever thrown when a locked Parameter
                // of the same name already exists and this should be dealt with by the outer
                // if statement.
                if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                    log.debug(
                            "setAddressingRequirementParemeterValue: addParameter failed: " + af.getMessage());
                }
            }
        }
,
>
, <(startLine=429 endLine=442 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00662/modules/kernel/src/org/apache/axis2/transport/http/RESTSender.java)
        if (httpVersion != null) {
            if (httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10)) {
                httpClient.getParams().setVersion(HttpVersion.HTTP_1_0);
                postMethod.setRequestHeader(HTTPConstants.HEADER_CONNECTION,
                                            HTTPConstants.HEADER_CONNECTION_KEEPALIVE);
            } else {

                // allowing keep-alive for 1.1
                postMethod.setRequestHeader(HTTPConstants.HEADER_CONNECTION,
                                            HTTPConstants.HEADER_CONNECTION_KEEPALIVE);
                postMethod.setRequestHeader(HTTPConstants.HEADER_EXPECT,
                                            HTTPConstants.HEADER_EXPECT_100_Continue);
            }
        }
,
(startLine=551 endLine=564 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00662/modules/kernel/src/org/apache/axis2/transport/http/RESTSender.java)
        if (httpVersion != null) {
            if (httpVersion.equals(HTTPConstants.HEADER_PROTOCOL_10)) {
                httpClient.getParams().setVersion(HttpVersion.HTTP_1_0);
                putMethod.setRequestHeader(HTTPConstants.HEADER_CONNECTION,
                                           HTTPConstants.HEADER_CONNECTION_KEEPALIVE);
            } else {

                // allowing keep-alive for 1.1
                putMethod.setRequestHeader(HTTPConstants.HEADER_CONNECTION,
                                           HTTPConstants.HEADER_CONNECTION_KEEPALIVE);
                putMethod.setRequestHeader(HTTPConstants.HEADER_EXPECT,
                                           HTTPConstants.HEADER_EXPECT_100_Continue);
            }
        }
,
>
, <(startLine=128 endLine=143 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00488/modules/saaj/src/org/apache/axis2/saaj/SOAPBodyImpl.java)
            throws SOAPException {
        try {
            //OM SOAPFaultImpl has SOAPFaultImpl(OMElement parent, Exception e) constructor, will use that
            //actually soap fault is created with the OM's default SOAPFAULT_LOCALNAME and PREFIX, b'coz I've droppe the name param
            //a work around can be possible but would be confusing as there is no straight forward soapfault constructor in om.
            //So am deferring it.
            //even locale param is dropped, don't know how to handle it at the moment. so dropped it.
            SOAPFactory soapFactory = OMAbstractFactory.getDefaultSOAPFactory();
            org.apache.axis2.soap.SOAPFault omSoapFault = soapFactory.createSOAPFault(
                    omSOAPBody, new Exception(faultString));
            omSOAPBody.addFault(omSoapFault);
            return (new SOAPFaultImpl(omSoapFault));
        } catch (Exception e) {
            throw new SOAPException(e);
        }
    }
,
(startLine=155 endLine=169 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00488/modules/saaj/src/org/apache/axis2/saaj/SOAPBodyImpl.java)
            throws SOAPException {
        try {
            //OM SOAPFaultImpl has SOAPFaultImpl(OMElement parent, Exception e) constructor, will use that
            //actually soap fault is created with the OM's default SOAPFAULT_LOCALNAME and PREFIX, b'coz I've droppe the name param
            //a work around can be possible but would be confusing as there is no straight forward soapfault constructor in om.
            //So am deferring it.
            SOAPFactory soapFactory = OMAbstractFactory.getDefaultSOAPFactory();
            org.apache.axis2.soap.SOAPFault omSoapFault = soapFactory.createSOAPFault(
                    omSOAPBody, new Exception(faultString));
            omSOAPBody.addFault(omSoapFault);
            return (new SOAPFaultImpl(omSoapFault));
        } catch (Exception e) {
            throw new SOAPException(e);
        }
    }
,
>
, <(startLine=325 endLine=337 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01257/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/wizardframe/WizardFrame.java)
    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);

        // Transfer bytes from in to out
        byte[] buf = new byte[Constants.Configuration.DEFAULT_DATA_BUFFER_SIZE];
        int len;
        while ((len = in.read(buf)) > 0) {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
    }
,
(startLine=583 endLine=595 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01257/modules/tool/axis2-eclipse-codegen-plugin/src/main/java/org/apache/axis2/tool/codegen/eclipse/CodeGenWizard.java)
    	try {
			in = new FileInputStream(src);
			out = new FileOutputStream(dst);
   
			// Transfer bytes from in to out
			byte[] buf = new byte[Constants.Configuration.DEFAULT_DATA_BUFFER_SIZE];
			int len;
			while ((len = in.read(buf)) > 0) {
			    out.write(buf, 0, len);
			}
			in.close();
			out.close();
		} catch (Exception e) {
,
(startLine=358 endLine=371 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01257/modules/tool/simple-server-maven-plugin/src/main/java/org/apache/axis2/maven2/server/util/RepoHelper.java)
        } else {

            InputStream in = new FileInputStream(sourceLocation);
            OutputStream out = new FileOutputStream(targetLocation);

            // Copy the bits from instream to outstream
            byte[] buf = new byte[bufferSize];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            in.close();
            out.close();
        }
,
>
, <(startLine=170 endLine=190 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01369/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/provider/StringProviderTests.java)
    public void testTwoElementsString() throws Exception {
        TestLogger.logger.debug("---------------------------------------");
        TestLogger.logger.debug("test: " + getName());
        
        Dispatch<String> dispatch = getDispatch();
        
        String request = "<a>hello</a><b>world</b>";
        String response = dispatch.invoke(request);
        
        // The current implementatin only sends the first element
        // So the echo'd response is just the first one.
        assertTrue("<a>hello</a>".equals(response));
        
        
        // Try again to verify
        response = dispatch.invoke(request);
        
        // The current implementatin only sends the first element
        // So the echo'd response is just the first one.
        assertTrue("<a>hello</a>".equals(response));
    }
,
(startLine=192 endLine=210 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01369/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/provider/StringProviderTests.java)
    public void testTwoElementsAndMixedContentString() throws Exception {
        TestLogger.logger.debug("---------------------------------------");
        TestLogger.logger.debug("test: " + getName());
        
        Dispatch<String> dispatch = getDispatch();
        
        String request = "mixed1<a>hello</a>mixed2<b>world</b>mixed3";
        String response = dispatch.invoke(request);
        // The current implementation only sends the first element.
        // The mixed content (mixed1) interferes and thus nothing is sent.
        assertTrue(response == null);
        
        
        // Try again to verify
        response = dispatch.invoke(request);
        // The current implementation only sends the first element.
        // The mixed content (mixed1) interferes and thus nothing is sent.
        assertTrue(response == null);
    }
,
>
, <(startLine=663 endLine=672 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00959/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
                if (outAxisMessage != null) {
                    OMElement output = fac.createOMElement(OUT_PUT_LOCAL_NAME,
                                                           wsdl);
                    addExtensionElement(fac, output, SOAP_BODY, SOAP_USE, use,
                                        null, targetNamespace, soap);
                    addPolicyAsExtElement(PolicyInclude.BINDING_OUTPUT_POLICY,
                                          outAxisMessage.getPolicyInclude(), output);
                    operation.addChild(output);
                    writeSoapHeaders(outAxisMessage, fac, output, soap);
                }
,
(startLine=796 endLine=805 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00959/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
                if (outAxisMessage != null) {
                    OMElement output = fac.createOMElement(OUT_PUT_LOCAL_NAME,
                                                           wsdl);
                    addExtensionElement(fac, output, SOAP_BODY, SOAP_USE, use,
                                        null, targetNamespace, soap12);
                    addPolicyAsExtElement(PolicyInclude.BINDING_OUTPUT_POLICY,
                                          outAxisMessage.getPolicyInclude(), output);
                    operation.addChild(output);
                    writeSoapHeaders(outAxisMessage, fac, output, soap12);
                }
,
>
, <(startLine=101 endLine=125 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00162/dev/scratch/prototype2/src/samples/userguide/sample1/src/org/apache/axis/samples/userguide/sample1/client/InteropTest_Stub.java)
	protected String getEchoStringFromSOAPEnvelop(SOAPEnvelope envelop) throws AxisFault{
		OMElement body = envelop.getBody();
		OMElement response = null;
		Iterator childrenIter = body.getChildren();
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child instanceof OMElement && "echoStringResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}		
		Iterator textChild = response.getChildren();
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoStringReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new String(((OMText)val).getValue());
				
			}
		}
		
		this.log.info("Invalid data Binding");
		throw new AxisFault("Invalid data Binding");		
	}
,
(startLine=127 endLine=152 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00162/dev/scratch/prototype2/src/samples/userguide/sample1/src/org/apache/axis/samples/userguide/sample1/client/InteropTest_Stub.java)
	protected Integer getEchoIntFromSOAPEnvelop(SOAPEnvelope envelop) throws AxisFault{
		OMElement body = envelop.getBody();		
		OMElement response = null;		
		Iterator childrenIter = body.getChildren();
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child instanceof OMElement && "echoIntResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}
		
		Iterator textChild = response.getChildren();
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoIntReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new Integer(((OMText)val).getValue());
				
			}
		}
		
		this.log.info("Invalid data Binding");
		throw new AxisFault("Invalid data Binding");	
	}
,
(startLine=106 endLine=130 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00162/dev/scratch/prototype2/src/samples/userguide/sample2/src/org/apache/axis/samples/userguide/sample2/client/InteropTest_Stub.java)
	public String getEchoStringFromSOAPEnvelop(SOAPEnvelope envelop) throws AxisFault{
		OMElement body = envelop.getBody();
		OMElement response = null;
		Iterator childrenIter = body.getChildren();
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child instanceof OMElement && "echoStringResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}		
		Iterator textChild = response.getChildren();
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoStringReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new String(((OMText)val).getValue());
				
			}
		}
		
		this.log.info("Invalid data Binding");
		throw new AxisFault("Invalid data Binding");		
	}
,
(startLine=132 endLine=157 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00162/dev/scratch/prototype2/src/samples/userguide/sample2/src/org/apache/axis/samples/userguide/sample2/client/InteropTest_Stub.java)
	public Integer getEchoIntFromSOAPEnvelop(SOAPEnvelope envelop) throws AxisFault{
		OMElement body = envelop.getBody();		
		OMElement response = null;		
		Iterator childrenIter = body.getChildren();
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child instanceof OMElement && "echoIntResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}
		
		Iterator textChild = response.getChildren();
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoIntReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new Integer(((OMText)val).getValue());
				
			}
		}
		
		this.log.info("Invalid data Binding");
		throw new AxisFault("Invalid data Binding");	
	}
,
(startLine=101 endLine=125 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00162/dev/scratch/prototype2/src/samples/userguide/sample3/src/org/apache/axis/samples/userguide/sample3/client/InteropTest_Stub.java)
	protected String getEchoStringFromSOAPEnvelop(SOAPEnvelope envelop) throws AxisFault{
		OMElement body = envelop.getBody();
		OMElement response = null;
		Iterator childrenIter = body.getChildren();
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child instanceof OMElement && "echoStringResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}		
		Iterator textChild = response.getChildren();
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoStringReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new String(((OMText)val).getValue());
				
			}
		}
		
		this.log.info("Invalid data Binding");
		throw new AxisFault("Invalid data Binding");		
	}
,
(startLine=127 endLine=152 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00162/dev/scratch/prototype2/src/samples/userguide/sample3/src/org/apache/axis/samples/userguide/sample3/client/InteropTest_Stub.java)
	protected Integer getEchoIntFromSOAPEnvelop(SOAPEnvelope envelop) throws AxisFault{
		OMElement body = envelop.getBody();		
		OMElement response = null;		
		Iterator childrenIter = body.getChildren();
		while(childrenIter.hasNext()){
			OMNode child = (OMNode) childrenIter.next();
			if(child instanceof OMElement && "echoIntResponse".equalsIgnoreCase(((OMElement)child).getLocalName())){
				response = (OMElement)child;				
			}
		}
		
		Iterator textChild = response.getChildren();
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoIntReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new Integer(((OMText)val).getValue());
				
			}
		}
		
		this.log.info("Invalid data Binding");
		throw new AxisFault("Invalid data Binding");	
	}
,
>
, <(startLine=60 endLine=81 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01108/modules/rmi/test/org/apache/axis2/rmi/databind/ComplexRequestResponseTest.java)
    public void testMethod21() {

        try {
            // first create service data

            Operation operation = this.service.getOperation("method2");
            // get objects after serialization and deserialization.
            // this returned objects mustbe identical with the original array list elements
            List inputObjects = new ArrayList();
            inputObjects.add(new TestClass1[]{new TestClass1(), new TestClass1()});
            Object[] objects = getInputObject(inputObjects, operation);

            TestClass1[] object = (TestClass1[]) operation.getJavaMethod().invoke(this.serviceObject, objects);
            TestClass1[] returnObject = (TestClass1[]) getReturnObject(object, operation);

            assertNotNull(returnObject[0]);
            assertNotNull(returnObject[1]);
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }
    }
,
(startLine=83 endLine=105 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01108/modules/rmi/test/org/apache/axis2/rmi/databind/ComplexRequestResponseTest.java)
    public void testMethod22() {

        try {
            // first create service data

            Operation operation = this.service.getOperation("method2");
            // get objects after serialization and deserialization.
            // this returned objects mustbe identical with the original array list elements
            List inputObjects = new ArrayList();
            inputObjects.add(new TestClass1[]{new TestClass1(), null, new TestClass1()});
            Object[] objects = getInputObject(inputObjects, operation);

            TestClass1[] object = (TestClass1[]) operation.getJavaMethod().invoke(this.serviceObject, objects);
            TestClass1[] returnObject = (TestClass1[]) getReturnObject(object, operation);

            assertNotNull(returnObject[0]);
            assertNull(returnObject[1]);
            assertNotNull(returnObject[2]);
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }
    }
,
>
, <(startLine=115 endLine=128 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01322/modules/json/src/org/apache/axis2/json/gson/GsonXMLStreamReader.java)
        if (ob != null) {
            Map<QName, XmlNode> nodeMap = (Map<QName, XmlNode>) ob;
            XmlNode requesNode = nodeMap.get(elementQname);
            if (requesNode != null) {
                xmlNodeGenerator = new XmlNodeGenerator();
                queue = xmlNodeGenerator.getQueue(requesNode);
            } else {
                xmlNodeGenerator = new XmlNodeGenerator(xmlSchemaList, elementQname);
                mainXmlNode = xmlNodeGenerator.getMainXmlNode();
                queue = xmlNodeGenerator.getQueue(mainXmlNode);
                nodeMap.put(elementQname, mainXmlNode);
                configContext.setProperty(JsonConstant.XMLNODES, nodeMap);
            }
        } else {
,
(startLine=105 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01322/modules/json/src/org/apache/axis2/json/gson/GsonXMLStreamWriter.java)
        if (ob != null) {
            Map<QName, XmlNode> nodeMap = (Map<QName, XmlNode>) ob;
            XmlNode resNode = nodeMap.get(elementQName);
            if (resNode != null) {
                xmlNodeGenerator = new XmlNodeGenerator();
                queue = xmlNodeGenerator.getQueue(resNode);
            } else {
                xmlNodeGenerator = new XmlNodeGenerator(xmlSchemaList, elementQName);
                mainXmlNode = xmlNodeGenerator.getMainXmlNode();
                queue = xmlNodeGenerator.getQueue(mainXmlNode);
                nodeMap.put(elementQName, mainXmlNode);
                configContext.setProperty(JsonConstant.XMLNODES, nodeMap);
            }
        } else {
,
>
, <(startLine=902 endLine=913 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01159/modules/jaxws/src/org/apache/axis2/jaxws/spi/ServiceDelegate.java)
        try {
            try {
                Field serviceDelgateField = service.getClass().getDeclaredField("delegate");
                serviceDelgateField.setAccessible(true);
                returnServiceDelegate = (ServiceDelegate) serviceDelgateField.get(service);
            } catch (NoSuchFieldException e) {
                // This may be a generated service subclass, so get the delegate from the superclass
                Field serviceDelegateField = service.getClass().getSuperclass().getDeclaredField("delegate");
                serviceDelegateField.setAccessible(true);
                returnServiceDelegate = (ServiceDelegate) serviceDelegateField.get(service);
            } 
        } catch (SecurityException e) {
,
(startLine=92 endLine=104 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01159/modules/jaxws/test/org/apache/axis2/jaxws/description/DescriptionTestUtils2.java)
        try {
            try {
//                Field serviceDelgateField = service.getClass().getDeclaredFields()[0];
                Field serviceDelgateField = service.getClass().getDeclaredField("delegate");
                serviceDelgateField.setAccessible(true);
                returnServiceDelegate = (ServiceDelegate) serviceDelgateField.get(service);
            } catch (NoSuchFieldException e) {
                // This may be a generated service subclass, so get the delegate from the superclass
                Field serviceDelegateField = service.getClass().getSuperclass().getDeclaredField("delegate");
                serviceDelegateField.setAccessible(true);
                returnServiceDelegate = (ServiceDelegate) serviceDelegateField.get(service);
            } 
        } catch (SecurityException e) {
,
>
, <(startLine=405 endLine=420 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00199/modules/om/src/java/org/apache/axis/om/impl/llom/OMStAXWrapper.java)
    public String getNamespaceURI(int i) {
        String returnString = null;
        if (parser != null) {
            returnString = parser.getNamespaceURI(i);
        } else {
            if (isStartElement() || isEndElement()
                    || (currentEvent == NAMESPACE)) {
                OMNamespace ns = (OMNamespace) getItemFromIterator(
                        ((OMElement) lastNode).getAllDeclaredNamespaces(), i);
                returnString = (ns == null)
                        ? null
                        : ns.getName();
            }
        }
        return returnString;
    }
,
(startLine=427 endLine=442 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00199/modules/om/src/java/org/apache/axis/om/impl/llom/OMStAXWrapper.java)
    public String getNamespacePrefix(int i) {
        String returnString = null;
        if (parser != null) {
            returnString = parser.getNamespacePrefix(i);
        } else {
            if (isStartElement() || isEndElement()
                    || (currentEvent == NAMESPACE)) {
                OMNamespace ns = (OMNamespace) getItemFromIterator(
                        ((OMElement) lastNode).getAllDeclaredNamespaces(), i);
                returnString = (ns == null)
                        ? null
                        : ns.getPrefix();
            }
        }
        return returnString;
    }
,
>
, <(startLine=175 endLine=187 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00980/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/ArtifactProcessor.java)
        if (faultBeanLocalName == null || faultBeanLocalName.length() == 0) {
            if (faultBeanClassName != null && faultBeanClassName.length() > 0) {
                try {
                    Class faultBean = loadClass(faultBeanClassName);
                    AnnotationDesc aDesc = AnnotationDescImpl.create(faultBean);
                    if (aDesc.hasXmlRootElement()) {
                        faultBeanLocalName = aDesc.getXmlRootElementName();
                    }
                } catch (Throwable t) {
                    throw ExceptionFactory.makeWebServiceException(t);
                }
            }
        }
,
(startLine=198 endLine=210 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00980/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/impl/ArtifactProcessor.java)
        if (faultBeanNamespace == null || faultBeanNamespace.length() == 0) {
            if (faultBeanClassName != null && faultBeanClassName.length() > 0) {
                try {
                    Class faultBean = loadClass(faultBeanClassName);
                    AnnotationDesc aDesc = AnnotationDescImpl.create(faultBean);
                    if (aDesc.hasXmlRootElement()) {
                        faultBeanNamespace = aDesc.getXmlRootElementNamespace();
                    }
                } catch (Throwable t) {
                   throw ExceptionFactory.makeWebServiceException(t);
                }
            }
        }
,
>
, <(startLine=119 endLine=129 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/XsdAnyElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_TRUE_TEST : {
                TestAnyType1 testAnyType = new TestAnyType1();
                testAnyType.setTestValue(innerElement);
                omElement = testAnyType.getOMElement(TestAnyType1.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestAnyType1.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=130 endLine=140 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/XsdAnyElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_FALSE_TEST : {
                TestAnyType3 testAnyType = new TestAnyType3();
                testAnyType.setTestValue(innerElement);
                omElement = testAnyType.getOMElement(TestAnyType3.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestAnyType3.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=141 endLine=151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/XsdAnyElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_TRUE_TEST : {
                TestAnyType5 testAnyType = new TestAnyType5();
                testAnyType.setTestValue(innerElement);
                omElement = testAnyType.getOMElement(TestAnyType5.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestAnyType5.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=152 endLine=162 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/XsdAnyElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_FALSE_TEST : {
                TestAnyType7 testAnyType = new TestAnyType7();
                testAnyType.setTestValue(innerElement);
                omElement = testAnyType.getOMElement(TestAnyType7.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestAnyType7.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=219 endLine=229 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/XsdAnyElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_TRUE_TEST : {
                TestAnyType2 testAnyType = new TestAnyType2();
                testAnyType.setTestValue(innerElement);
                omElement = testAnyType.getOMElement(TestAnyType2.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestAnyType2.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=230 endLine=240 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/XsdAnyElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_FALSE_TEST : {
                TestAnyType4 testAnyType = new TestAnyType4();
                testAnyType.setTestValue(innerElement);
                omElement = testAnyType.getOMElement(TestAnyType4.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestAnyType4.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=241 endLine=251 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/XsdAnyElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_TRUE_TEST : {
                TestAnyType6 testAnyType = new TestAnyType6();
                testAnyType.setTestValue(innerElement);
                omElement = testAnyType.getOMElement(TestAnyType6.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestAnyType6.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=252 endLine=262 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/XsdAnyElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_FALSE_TEST : {
                TestAnyType8 testAnyType = new TestAnyType8();
                testAnyType.setTestValue(innerElement);
                omElement = testAnyType.getOMElement(TestAnyType8.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestAnyType8.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=118 endLine=128 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/CustomElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_TRUE_TEST : {
                TestBookInformation1 testBookInformation = new TestBookInformation1();
                testBookInformation.setTestValue(innerElement);
                omElement = testBookInformation.getOMElement(TestBookInformation1.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestBookInformation1.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=129 endLine=139 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/CustomElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_FALSE_TEST : {
                TestBookInformation3 testBookInformation = new TestBookInformation3();
                testBookInformation.setTestValue(innerElement);
                omElement = testBookInformation.getOMElement(TestBookInformation3.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestBookInformation3.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=140 endLine=150 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/CustomElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_TRUE_TEST : {
                TestBookInformation5 testBookInformation = new TestBookInformation5();
                testBookInformation.setTestValue(innerElement);
                omElement = testBookInformation.getOMElement(TestBookInformation5.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestBookInformation5.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=151 endLine=161 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/CustomElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_FALSE_TEST : {
                TestBookInformation7 testBookInformation = new TestBookInformation7();
                testBookInformation.setTestValue(innerElement);
                omElement = testBookInformation.getOMElement(TestBookInformation7.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestBookInformation7.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=217 endLine=227 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/CustomElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_TRUE_TEST : {
                TestBookInformation2 testBookInformation = new TestBookInformation2();
                testBookInformation.setTestValue(innerElement);
                omElement = testBookInformation.getOMElement(TestBookInformation2.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestBookInformation2.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=228 endLine=238 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/CustomElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_FALSE_TEST : {
                TestBookInformation4 testBookInformation = new TestBookInformation4();
                testBookInformation.setTestValue(innerElement);
                omElement = testBookInformation.getOMElement(TestBookInformation4.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestBookInformation4.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=239 endLine=249 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/CustomElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_TRUE_TEST : {
                TestBookInformation6 testBookInformation = new TestBookInformation6();
                testBookInformation.setTestValue(innerElement);
                omElement = testBookInformation.getOMElement(TestBookInformation6.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestBookInformation6.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=250 endLine=260 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/CustomElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_FALSE_TEST : {
                TestBookInformation8 testBookInformation = new TestBookInformation8();
                testBookInformation.setTestValue(innerElement);
                omElement = testBookInformation.getOMElement(TestBookInformation8.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestBookInformation8.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=105 endLine=115 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/IntElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_TRUE_TEST : {
                TestInt1 testInt = new TestInt1();
                testInt.setTestValue(innerElement);
                omElement = testInt.getOMElement(TestInt1.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestInt1.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=116 endLine=126 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/IntElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_FALSE_TEST : {
                TestInt3 testInt = new TestInt3();
                testInt.setTestValue(innerElement);
                omElement = testInt.getOMElement(TestInt3.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestInt3.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=127 endLine=137 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/IntElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_TRUE_TEST : {
                TestInt5 testInt = new TestInt5();
                testInt.setTestValue(innerElement);
                omElement = testInt.getOMElement(TestInt5.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestInt5.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=138 endLine=148 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/IntElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_FALSE_TEST : {
                TestInt7 testInt = new TestInt7();
                testInt.setTestValue(innerElement);
                omElement = testInt.getOMElement(TestInt7.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnObject = TestInt7.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=200 endLine=210 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/IntElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_TRUE_TEST : {
                TestInt2 testInt = new TestInt2();
                testInt.setTestValue(innerElement);
                omElement = testInt.getOMElement(TestInt2.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnInt = TestInt2.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=211 endLine=221 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/IntElementsTest.java)
            case MIN_EQUALS_ZERO_NILLABLE_FALSE_TEST : {
                TestInt4 testInt = new TestInt4();
                testInt.setTestValue(innerElement);
                omElement = testInt.getOMElement(TestInt4.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnInt = TestInt4.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=222 endLine=232 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/IntElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_TRUE_TEST : {
                TestInt6 testInt = new TestInt6();
                testInt.setTestValue(innerElement);
                omElement = testInt.getOMElement(TestInt6.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnInt = TestInt6.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
(startLine=233 endLine=243 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01354/modules/adb-tests/src/test/java/org/apache/axis2/schema/testsuite/IntElementsTest.java)
            case MIN_EQUALS_ONE_NILLABLE_FALSE_TEST : {
                TestInt8 testInt = new TestInt8();
                testInt.setTestValue(innerElement);
                omElement = testInt.getOMElement(TestInt8.MY_QNAME, OMAbstractFactory.getSOAP12Factory());
                omElementString = omElement.toStringWithConsume();
                System.out.println("OMElement ==> " + omElementString);
                XMLStreamReader xmlReader =
                        StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
                returnInt = TestInt6.Factory.parse(xmlReader).getTestValue();
                break;
            }
,
>
, <(startLine=89 endLine=111 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00052/dev/scratch/deepal/deployment/src/org/apache/axis/deployment/deployEvents/WSListenerImpl.java)
    private void searchWS(String folderName, int type) {
        String files[];
        current_jars = new Vector();
        File root = new File(folderName);
        // adding the root folder to the vector
        current_jars.addElement(root);

        while (current_jars.size() > 0) {         // loop until empty
            File dir = (File)current_jars.elementAt(0); // get first dir
            current_jars.remove(0);       // remove it
            files = dir.list();              // get list of files

            for (int i = 0; i < files.length ; i++) { // iterate
                File f = new File(dir, files[i]);
                if (f.isDirectory()) {        // see if it's a directory
                    current_jars.insertElementAt(f, 0);
                } // add dir to start of agenda
                else if (isJarFile(f.getName())){
                    wsinfoList.addWSInfoItem(f,type);
                }
            }
        }
    }
,
(startLine=91 endLine=115 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00052/dev/scratch/prototype1/src/java/org/apache/axis/deployment/deployEvents/RepositaryListenerImpl.java)
    private void searchWS(String folderName, int type) {
        String files[];
        current_jars = new Vector();
        File root = new File(folderName);
        // adding the root folder to the vector
        current_jars.addElement(root);

        while (current_jars.size() > 0) {         // loop until empty
            File dir = (File) current_jars.elementAt(0); // get first dir
            current_jars.remove(0);       // remove it
            files = dir.list();              // get list of files
            if(files != null){
                for (int i = 0; i < files.length; i++) { // iterate
                    File f = new File(dir, files[i]);
                    if (f.isDirectory()) {        // see if it's a directory
                        current_jars.insertElementAt(f, 0);
                    } // add dir to start of agenda
                    else if (isJarFile(f.getName())) {
                        wsinfoList.addWSInfoItem(f, type);
                    }
                }
            
            }
        }
    }
,
(startLine=91 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00052/dev/scratch/prototype1/src/java/org/apache/axis/deployment/deployEvents/WSListenerImpl.java)
    private void searchWS(String folderName, int type) {
        String files[];
        current_jars = new Vector();
        File root = new File(folderName);
        // adding the root folder to the vector
        current_jars.addElement(root);

        while (current_jars.size() > 0) {         // loop until empty
            File dir = (File) current_jars.elementAt(0); // get first dir
            current_jars.remove(0);       // remove it
            files = dir.list();              // get list of files

            for (int i = 0; i < files.length; i++) { // iterate
                File f = new File(dir, files[i]);
                if (f.isDirectory()) {        // see if it's a directory
                    current_jars.insertElementAt(f, 0);
                } // add dir to start of agenda
                else if (isJarFile(f.getName())) {
                    wsinfoList.addWSInfoItem(f, type);
                }
            }
        }
    }
,
>
, <(startLine=157 endLine=164 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00130/dev/scratch/deepal/deployment/src/org/apache/axis/deployment/util/Handler.java)
    public void printMe(){
        System.out.println("===========================================");
        System.out.println("Name : " + getName());
        System.out.println("Ref : "  + getRef());
        System.out.println("Class : " + getClassName());
         System.out.println("Phase : " + getPhase());
        System.out.println("===========================================");
    }
,
(startLine=160 endLine=167 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00130/dev/scratch/prototype1/src/java/org/apache/axis/deployment/metadata/HandlerMetaData.java)
    public void printMe() {
        System.out.println("===========================================");
        System.out.println("Name : " + getName());
        System.out.println("Ref : " + getRef());
        System.out.println("Class : " + getClassName());
        System.out.println("PhaseMetaData : " + getPhase());
        System.out.println("===========================================");
    }
,
>
, <(startLine=58 endLine=69 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01221/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/DLWMinTests.java)
    private Greeter getProxy(String action) {
        Service service = Service.create(QNAME_SERVICE);
        Greeter proxy = service.getPort(QNAME_PORT, Greeter.class);
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(
                BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE);
        p.getRequestContext().put(
                BindingProvider.SOAPACTION_URI_PROPERTY, action);
        p.getRequestContext().put(
                BindingProvider.ENDPOINT_ADDRESS_PROPERTY, URL_ENDPOINT);
        return proxy;
    }
,
(startLine=61 endLine=72 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01221/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/DLWMinArrayTests.java)
    private IGenericService getProxy(String action) {
        Service service = Service.create(QNAME_SERVICE);
        IGenericService proxy = service.getPort(QNAME_PORT, IGenericService.class);
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(
                BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE);
        p.getRequestContext().put(
                BindingProvider.SOAPACTION_URI_PROPERTY, action);
        p.getRequestContext().put(
                BindingProvider.ENDPOINT_ADDRESS_PROPERTY, URL_ENDPOINT);
        return proxy;
    }
,
>
, <(startLine=1036 endLine=1052 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00787/modules/fastinfoset/test/org/apache/axis2/fastinfoset/xsd/SimpleAddServiceStub.java)
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
,
(startLine=1485 endLine=1501 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00787/modules/fastinfoset/test/org/apache/axis2/fastinfoset/xsd/SimpleAddServiceStub.java)
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
,
(startLine=1960 endLine=1976 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00787/modules/fastinfoset/test/org/apache/axis2/fastinfoset/xsd/SimpleAddServiceStub.java)
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
,
(startLine=2400 endLine=2416 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00787/modules/fastinfoset/test/org/apache/axis2/fastinfoset/xsd/SimpleAddServiceStub.java)
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
,
(startLine=2867 endLine=2883 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00787/modules/fastinfoset/test/org/apache/axis2/fastinfoset/xsd/SimpleAddServiceStub.java)
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
,
(startLine=3311 endLine=3327 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00787/modules/fastinfoset/test/org/apache/axis2/fastinfoset/xsd/SimpleAddServiceStub.java)
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
,
>
, <(startLine=69 endLine=81 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00212/modules/samples/src/java/org/apache/axis/testUtils/SimpleTypeEncodingUtils.java)
        try {
            int event = xpp.getEventType();
            while (XMLStreamConstants.START_ELEMENT != event) {
                event = xpp.next();
            }
            event = xpp.next();
            while (XMLStreamConstants.END_ELEMENT != event) {
                if (XMLStreamConstants.CHARACTERS == event) {
                    value.append(xpp.getText());
                }
                event = xpp.next();
            }
        } catch (XMLStreamException e) {
,
(startLine=93 endLine=105 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00212/modules/samples/src/java/org/apache/axis/testUtils/SimpleTypeEncodingUtils.java)
        try {
            int event = xpp.getEventType();
            while (XMLStreamConstants.START_ELEMENT != event) {
                event = xpp.next();
            }
            event = xpp.next();
            while (XMLStreamConstants.END_ELEMENT != event) {
                if (XMLStreamConstants.CHARACTERS == event && !xpp.isWhiteSpace()) {
                    value = xpp.getText();
                }
                event = xpp.next();
            }
        } catch (XMLStreamException e) {
,
>
, <(startLine=170 endLine=189 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00536/modules/jaxws/src/org/apache/axis2/jaxws/util/WSDL4JWrapper.java)
	public String getSOAPAction(QName serviceQname) {
		// TODO Auto-generated method stub
		Binding binding = getFirstPortBinding(serviceQname);
		if(binding==null){
			return null;
		}
		List operations = binding.getBindingOperations();
		for(Object opObj : operations){
			BindingOperation operation = (BindingOperation)opObj;
			List exElements =operation.getExtensibilityElements();
			for(Object elObj:exElements){
				ExtensibilityElement exElement = (ExtensibilityElement)elObj;
				if(isSoapOperation(exElement)){
					SOAPOperation soapOperation = (SOAPOperation)exElement;
					return soapOperation.getSoapActionURI();
				}
			}
		}
		return null;
	}
,
(startLine=191 endLine=214 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00536/modules/jaxws/src/org/apache/axis2/jaxws/util/WSDL4JWrapper.java)
	public String getSOAPAction(QName serviceQname, QName portQname) {
		// TODO Auto-generated method stub
		Port port = getPort(serviceQname, portQname);
		if(port == null){
			return null;
		}
		Binding binding = port.getBinding();
		if(binding==null){
			return null;
		}
		List operations = binding.getBindingOperations();
		for(Object opObj : operations){
			BindingOperation operation = (BindingOperation)opObj;
			List exElements =operation.getExtensibilityElements();
			for(Object elObj:exElements){
				ExtensibilityElement exElement = (ExtensibilityElement)elObj;
				if(isSoapOperation(exElement)){
					SOAPOperation soapOperation = (SOAPOperation)exElement;
						return soapOperation.getSoapActionURI();
				}
			}
		}
		return null;
	}
,
(startLine=216 endLine=245 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00536/modules/jaxws/src/org/apache/axis2/jaxws/util/WSDL4JWrapper.java)
	public String getSOAPAction(QName serviceQname, QName portQname, QName operationQname) {
		Port port = getPort(serviceQname, portQname);
		if(port == null){
			return null;
		}
		Binding binding = port.getBinding();
		if(binding==null){
			return null;
		}
		List operations = binding.getBindingOperations();
		if(operations == null){
			return null;
		}
		BindingOperation operation = null;
		for(Object opObj : operations){
			operation = (BindingOperation)opObj;
		}
		List exElements =operation.getExtensibilityElements();
		for(Object elObj:exElements){
			ExtensibilityElement exElement = (ExtensibilityElement)elObj;
			if(isSoapOperation(exElement)){
				SOAPOperation soapOperation = (SOAPOperation)exElement;
				if(soapOperation.getElementType().equals(operationQname)){
					return soapOperation.getSoapActionURI();
				}
			}
		}
		
		return null;
	}
,
>
, <(startLine=357 endLine=374 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00187/modules/deployment/src/java/org/apache/axis/deployment/DeploymentParser.java)
        try {
            while (!END_PARAMETER) {
                int eventType = pullparser.next();
                if (eventType == XMLStreamConstants.END_DOCUMENT) {
                    // document end tag met , break the loop
                    // but the doc end tag wont meet here :)
                    END_PARAMETER = true;
                } else if (eventType == XMLStreamConstants.END_ELEMENT) {
                    String endtagname = pullparser.getLocalName();
                    if (PARAMETERST.equals(endtagname)) {
                        END_PARAMETER = true;
                        break;
                    }
                } else if (eventType == XMLStreamConstants.CHARACTERS) {
                    element += pullparser.getText();
                }
            }
        } catch (XMLStreamException e) {
,
(startLine=501 endLine=518 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00187/modules/deployment/src/java/org/apache/axis/deployment/DeploymentParser.java)
        try {
            while (!END_TYPEMAPPING) {
                int eventType = pullparser.next();
                if (eventType == XMLStreamConstants.END_DOCUMENT) {
// document end tag met , break the loop
// but the doc end tag wont meet here :)
                    END_TYPEMAPPING = true;
                } else if (eventType == XMLStreamConstants.END_ELEMENT) {
                    String endtagname = pullparser.getLocalName();
                    if (TYPEMAPPINGST.equals(endtagname)) {
                        END_TYPEMAPPING = true;
                        break;
                    }
                } else if (eventType == XMLStreamConstants.CHARACTERS) {
                    text += pullparser.getText();
                }
            }
        } catch (XMLStreamException e) {
,
(startLine=602 endLine=619 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00187/modules/deployment/src/java/org/apache/axis/deployment/DeploymentParser.java)
        try {
            while (!END_BEANMAPPING) {
                int eventType = pullparser.next();
                if (eventType == XMLStreamConstants.END_DOCUMENT) {
// document end tag met , break the loop
// but the doc end tag wont meet here :)
                    END_BEANMAPPING = true;
                } else if (eventType == XMLStreamConstants.END_ELEMENT) {
                    String endtagname = pullparser.getLocalName();
                    if (BEANMAPPINGST.equals(endtagname)) {
                        END_BEANMAPPING = true;
                        break;
                    }
                } else if (eventType == XMLStreamConstants.CHARACTERS) {
                    text += pullparser.getText();
                }
            }
        } catch (XMLStreamException e) {
,
>
, <(startLine=284 endLine=295 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01158/modules/metadata/src/org/apache/axis2/jaxws/description/builder/JAXWSRIWSDLGenerator.java)
        if (classDirectory.isDirectory()) {
            File[] files = classDirectory.listFiles();
            for (File file : files) {
                String fileName = file.getName();
                if (fileName.endsWith(".wsdl")) {
                    if (log.isDebugEnabled()) {
                        log.debug("Located generated WSDL file: " + fileName);
                    }
                    wsdlFiles.add(file);
                }
            }
        }
,
(startLine=349 endLine=360 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01158/modules/metadata/src/org/apache/axis2/jaxws/description/builder/JAXWSRIWSDLGenerator.java)
        if (classDirectory.isDirectory()) {
            File[] files = classDirectory.listFiles();
            for (File file : files) {
                String fileName = file.getName();
                if (fileName.endsWith(".xsd")) {
                    if (log.isDebugEnabled()) {
                        log.debug("Located generated schema file: " + fileName);
                    }
                    schemaFiles.add(file);
                }
            }
        }
,
>
, <(startLine=105 endLine=115 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00572/modules/kernel/src/org/apache/axis2/util/Base64.java)
        for (int i = 0; i < data.length(); i++) {
            char ch = data.charAt(i);
            if (ch == S_BASE64PAD || ch < S_DECODETABLE.length
                    && S_DECODETABLE[ch] != Byte.MAX_VALUE) {
                ibuf[ibufcount++] = ch;
                if (ibufcount == ibuf.length) {
                    ibufcount = 0;
                    obufcount += decode0(ibuf, obuf, obufcount);
                }
            }
        }
,
(startLine=131 endLine=142 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00572/modules/kernel/src/org/apache/axis2/util/Base64.java)
        for (int i = off; i < off + len; i++) {
            char ch = data[i];
            if (ch == S_BASE64PAD || ch < S_DECODETABLE.length
                    && S_DECODETABLE[ch] != Byte.MAX_VALUE) {
                ibuf[ibufcount++] = ch;
                if (ibufcount == ibuf.length) {
                    ibufcount = 0;
                    int obufcount = decode0(ibuf, obuf, 0);
                    ostream.write(obuf, 0, obufcount);
                }
            }
        }
,
(startLine=153 endLine=164 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00572/modules/kernel/src/org/apache/axis2/util/Base64.java)
        for (int i = 0; i < data.length(); i++) {
            char ch = data.charAt(i);
            if (ch == S_BASE64PAD || ch < S_DECODETABLE.length
                    && S_DECODETABLE[ch] != Byte.MAX_VALUE) {
                ibuf[ibufcount++] = ch;
                if (ibufcount == ibuf.length) {
                    ibufcount = 0;
                    int obufcount = decode0(ibuf, obuf, 0);
                    ostream.write(obuf, 0, obufcount);
                }
            }
        }
,
>
, <(startLine=110 endLine=134 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01361/modules/metadata/src/org/apache/axis2/jaxws/description/impl/PostRI216MethodRetrieverImpl.java)
            while (!DescriptionUtils.isEmpty(tempDBC.getSuperClassName())) {

                //verify that this superclass name is not
                //      java.lang.object, if so, then we're done processing
                if (DescriptionUtils.javifyClassName(tempDBC.getSuperClassName()).equals(
                    MDQConstants.OBJECT_CLASS_NAME))
                    break;

                DescriptionBuilderComposite superDBC = eid.getEndpointDescriptionImpl()
                .getServiceDescriptionImpl().getDBCMap().get(tempDBC.getSuperClassName());

                if (log.isTraceEnabled())
                    log.trace("superclass name for this DBC is:" + tempDBC.getSuperClassName());

                //Verify that we can find the SEI in the composite list
                if (superDBC == null) {
                    throw ExceptionFactory.makeWebServiceException(Messages
                        .getMessage("seiNotFoundErr"));
                }

                // Now, gather the list of Methods just like we do for
                // the lowest subclass
                retrieveList.addAll(retrieveImplicitSEIMethods(superDBC));
                tempDBC = superDBC;
            } //Done with implied SEI's superclasses
,
(startLine=115 endLine=143 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01361/modules/metadata/src/org/apache/axis2/jaxws/description/impl/LegacyMethodRetrieverImpl.java)
            while (!DescriptionUtils.isEmpty(tempDBC.getSuperClassName())) {

                //verify that this superclass name is not
                //      java.lang.object, if so, then we're done processing
                if (DescriptionUtils.javifyClassName(tempDBC.getSuperClassName())
                    .equals(MDQConstants.OBJECT_CLASS_NAME))
                    break;

                DescriptionBuilderComposite superDBC = 
                    eid.getEndpointDescriptionImpl().getServiceDescriptionImpl().getDBCMap()
                    .get(tempDBC.getSuperClassName());

                if (log.isTraceEnabled())
                    log.trace("superclass name for this DBC is:" + tempDBC.getSuperClassName());

                //Verify that we can find the SEI in the composite list
                if (superDBC == null) {
                    throw ExceptionFactory.makeWebServiceException(Messages.getMessage("seiNotFoundErr"));
                }

                //If the superclass contains a WebService annotation then retrieve its methods
                //as we would for the impl class, otherwise ignore the methods of this
                //superclass
                if (superDBC.getWebServiceAnnot() != null) {
                    //Now, gather the list of Methods just like we do for the lowest subclass
                    retrieveList.addAll(retrieveImplicitSEIMethods(superDBC));
                }
                tempDBC = superDBC;
            } //Done with implied SEI's superclasses
,
>
, <(startLine=87 endLine=97 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00374/modules/core/src/org/apache/axis/description/ServiceDescription.java)
        if (moduleref != null) {
            Collection collectionModule = (Collection) this.getComponentProperty(MODULEREF_KEY);
            for (Iterator iterator = collectionModule.iterator(); iterator.hasNext();) {
                ModuleDescription   modu = (ModuleDescription) iterator.next();
                if(modu.getName().equals(moduleref.getName())){
                    throw new AxisFault(moduleref.getName().getLocalPart()+ " module has alredy engaged to the seevice" +
                            "  operation terminated !!!");
                }

            }
        }
,
(startLine=69 endLine=79 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00374/modules/core/src/org/apache/axis/description/OperationDescription.java)
        if (moduleref != null) {
            Collection collectionModule = (Collection) this.getComponentProperty(MODULEREF_KEY);
            for (Iterator iterator = collectionModule.iterator(); iterator.hasNext();) {
                ModuleDescription   modu = (ModuleDescription) iterator.next();
                if(modu.getName().equals(moduleref.getName())){
                    throw new AxisFault(moduleref.getName().getLocalPart()+ " module has alredy engaged to the operation" +
                            "  operation terminated !!!");
                }

            }
        }
,
>
, <(startLine=140 endLine=151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00376/modules/core/src/org/apache/axis/deployment/DeploymentEngine.java)
                try {
                    serverConf.createNewFile();
                    FileOutputStream out = new FileOutputStream(serverConf);
                    int BUFSIZE = 512; // since only a test file going to load , the size has selected
                    byte[] buf = new byte[BUFSIZE];
                    int read;
                    while ((read = in.read(buf)) > 0) {
                        out.write(buf, 0, read);
                    }
                    in.close();
                    out.close();
                } catch (IOException e) {
,
(startLine=286 endLine=297 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00376/modules/core/src/org/apache/axis/deployment/DeploymentEngine.java)
                try {
                    serverConf.createNewFile();
                    FileOutputStream out = new FileOutputStream(serverConf);
                    int BUFSIZE = 512; // since only a test file going to load , the size has selected
                    byte[] buf = new byte[BUFSIZE];
                    int read;
                    while ((read = in.read(buf)) > 0) {
                        out.write(buf, 0, read);
                    }
                    in.close();
                    out.close();
                } catch (IOException e) {
,
>
, <(startLine=91 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01076/modules/corba/src/org/apache/axis2/corba/receivers/CorbaInOnlyMessageReceiver.java)
            if (inAxisMessage != null) {
                if (inAxisMessage.getElementQName()!=null) {
                    elementQName = inAxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null ||
                                !messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " +
                                    methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault("namespace mismatch. Axis Oepration expects non-namespace " +
                                "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = CorbaUtil.extractParameters(methodElement, invoker.getParameterMembers());
                    invoker.setParameters(objectArray);
                }
                invoker.invoke();
            }
,
(startLine=94 endLine=120 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01076/modules/corba/src/org/apache/axis2/corba/receivers/CorbaMessageReceiver.java)
            if (inAxisMessage != null) {
                if (inAxisMessage.getElementQName() != null) {
                    elementQName = inAxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found none");
                        }
                        if (!messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault("namespace mismatch. Axis Oepration expects non-namespace " +
                                "qualified element. But received a namespace qualified element");
                    }
                    Object[] objectArray = CorbaUtil.extractParameters(methodElement, invoker.getParameterMembers());
                    invoker.setParameters(objectArray);
                }
                resObject = invoker.invoke();
                params = invoker.getParameterMembers();
                outParamValues = invoker.getOutParameterValuess();
            }
,
(startLine=96 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01076/modules/corba/src/org/apache/axis2/corba/receivers/CorbaInOutAsyncMessageReceiver.java)
            if (inAxisMessage != null) {
                if (inAxisMessage.getElementQName()!=null) {
                    elementQName = inAxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null || !messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault("namespace mismatch. Axis Oepration expects non-namespace " +
                                "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = CorbaUtil.extractParameters(methodElement, invoker.getParameterMembers());
                    invoker.setParameters(objectArray);
                    params = invoker.getParameterMembers();
                    outParamValues = invoker.getOutParameterValuess();
                }
                resObject = invoker.invoke();
            }
,
>
, <(startLine=101 endLine=117 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00073/dev/scratch/prototype2/src/java/org/apache/axis/deployment/metadata/phaserule/PhaseHolder.java)
    private void OrderdPhases() {
        //todo complet this using phaseordeer
        PhaseMetaData[] phase = new PhaseMetaData[phaseholder.size()];
        for (int i = 0; i < phaseholder.size(); i++) {
            PhaseMetaData tempphase = (PhaseMetaData) phaseholder.elementAt(i);
            phase[i] = tempphase;
        }
        phase = serverMetaData.getOrderPhases(phase);
        // remove all items inorder to rearrange them
        phaseholder.removeAllElements();

        for (int i = 0; i < phase.length; i++) {
            PhaseMetaData phaseMetaData = phase[i];
            phaseholder.add(phaseMetaData);

        }
    }
,
(startLine=101 endLine=117 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00073/dev/scratch/prototype1/src/java/org/apache/axis/deployment/metadata/phaserule/PhaseHolder.java)
    private void OrderdPhases() {
        //todo complet this using phaseordeer
        PhaseMetaData[] phase = new PhaseMetaData[phaseholder.size()];
        for (int i = 0; i < phaseholder.size(); i++) {
            PhaseMetaData tempphase = (PhaseMetaData) phaseholder.elementAt(i);
            phase[i] = tempphase;
        }
        phase = serverMetaData.getOrderPhases(phase);
        // remove all items inorder to rearrange them
        phaseholder.removeAllElements();

        for (int i = 0; i < phase.length; i++) {
            PhaseMetaData phaseMetaData = phase[i];
            phaseholder.add(phaseMetaData);

        }
    }
,
>
, <(startLine=248 endLine=261 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01372/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/provider/SoapMessageProviderTests.java)
            } catch (SOAPFaultException e) {
                // Okay
                SOAPFault fault = e.getFault();
                assertTrue(fault != null);
                assertTrue(fault.getFaultString().equals("sample fault"));
                QName expectedFaultCode = new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "Client"); 
                assertTrue(fault.getFaultCodeAsQName().equals(expectedFaultCode));
                assertTrue(fault.getDetail() != null);
                DetailEntry de = (DetailEntry) fault.getDetail().getDetailEntries().next();
                assertTrue(de != null);
                assertTrue(de.getLocalName().equals("detailEntry"));
                assertTrue(de.getValue().equals("sample detail"));
                assertTrue(fault.getFaultActor().equals("sample actor"));
            }    
,
(startLine=269 endLine=282 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01372/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/provider/SoapMessageProviderTests.java)
            } catch (SOAPFaultException e) {
                // Okay
                SOAPFault fault = e.getFault();
                assertTrue(fault != null);
                assertTrue(fault.getFaultString().equals("sample fault"));
                QName expectedFaultCode = new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "Client"); 
                assertTrue(fault.getFaultCodeAsQName().equals(expectedFaultCode));
                assertTrue(fault.getDetail() != null);
                DetailEntry de = (DetailEntry) fault.getDetail().getDetailEntries().next();
                assertTrue(de != null);
                assertTrue(de.getLocalName().equals("detailEntry"));
                assertTrue(de.getValue().equals("sample detail"));
                assertTrue(fault.getFaultActor().equals("sample actor"));
            }    
,
(startLine=125 endLine=138 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01372/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/provider/soapbinding/tests/SoapMessageProviderTests.java)
        } catch (SOAPFaultException e) {
            // Okay
            SOAPFault fault = e.getFault();
            assertTrue(fault != null);
            assertTrue(fault.getFaultString().equals("sample fault"));
            QName expectedFaultCode = new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "Client"); 
            assertTrue(fault.getFaultCodeAsQName().equals(expectedFaultCode));
            assertTrue(fault.getDetail() != null);
            DetailEntry de = (DetailEntry) fault.getDetail().getDetailEntries().next();
            assertTrue(de != null);
            assertTrue(de.getLocalName().equals("detailEntry"));
            assertTrue(de.getValue().equals("sample detail"));
            assertTrue(fault.getFaultActor().equals("sample actor"));
        }    
,
(startLine=146 endLine=159 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01372/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/provider/soapbinding/tests/SoapMessageProviderTests.java)
        } catch (SOAPFaultException e) {
            // Okay
            SOAPFault fault = e.getFault();
            assertTrue(fault != null);
            assertTrue(fault.getFaultString().equals("sample fault"));
            QName expectedFaultCode = new QName(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, "Client"); 
            assertTrue(fault.getFaultCodeAsQName().equals(expectedFaultCode));
            assertTrue(fault.getDetail() != null);
            DetailEntry de = (DetailEntry) fault.getDetail().getDetailEntries().next();
            assertTrue(de != null);
            assertTrue(de.getLocalName().equals("detailEntry"));
            assertTrue(de.getValue().equals("sample detail"));
            assertTrue(fault.getFaultActor().equals("sample actor"));
        }    
,
>
, <(startLine=67 endLine=77 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00229/modules/samples/test/org/apache/axis/engine/EchoRawXMLTest.java)
    protected void setUp() throws Exception {
        UtilServer.start();
        AxisService service = new AxisService(serviceName);
        service.setClassLoader(Thread.currentThread().getContextClassLoader());
        service.setServiceClass(Echo.class);
        service.setMessageReceiver(new RawXMLProvider());
        AxisOperation operation = new AxisOperation(operationName);

        service.addOperation(operation);
        UtilServer.deployService(service);
    }
,
(startLine=68 endLine=84 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00229/modules/samples/test/org/apache/axis/clientapi/TestSendReceive.java)
    protected void setUp() throws Exception {
       

        service = new AxisService(serviceName);
        service.setClassLoader(Thread.currentThread().getContextClassLoader());
        service.setServiceClass(Echo.class);
        service.setMessageReceiver(new RawXMLProvider());
        AxisOperation operation = new AxisOperation(operationName);

        service.addOperation(operation);

        Utils.createExecutionChains(service);
        

        UtilServer.start();
        UtilServer.deployService(service);
    }
,
(startLine=78 endLine=91 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00229/modules/samples/test/org/apache/axis/clientapi/TestSendReceiveAsync.java)
    protected void setUp() throws Exception {

        AxisService service = new AxisService(serviceName);
        service.setClassLoader(Thread.currentThread().getContextClassLoader());
        service.setServiceClass(Echo.class);
        service.setMessageReceiver(new RawXMLProvider());
        AxisOperation operation = new AxisOperation(operationName);

        service.addOperation(operation);

        Utils.createExecutionChains(service);
        UtilServer.start();
        UtilServer.deployService(service);
    }
,
>
, <(startLine=129 endLine=143 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00711/modules/clustering/src/org/apache/axis2/cluster/tribes/TribesClusterManager.java)
		if (comMsg.getCommandName().equals(CommandType.CREATE_SERVICE_GROUP_CONTEXT)) {

			// add to the duplicate list to prevent cyclic replication
			contextManager.addToDuplicateServiceGroupContexts(comMsg.getContextId());
			updater.addServiceGroupContext(comMsg.getContextId());

			ContextEvent event = new ContextEvent();
			event.setContextType(ContextType.SERVICE_GROUP_CONTEXT);
			event.setContextID(comMsg.getContextId());
			event.setParentContextID(comMsg.getParentId());
			event.setDescriptionID(comMsg.getAxisDescriptionName());

			contextManager.notifyListeners(event, ContextListenerEventType.ADD_CONTEXT);

		} else if (comMsg.getCommandName().equals(CommandType.CREATE_SERVICE_CONTEXT)) {
,
(startLine=143 endLine=158 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00711/modules/clustering/src/org/apache/axis2/cluster/tribes/TribesClusterManager.java)
		} else if (comMsg.getCommandName().equals(CommandType.CREATE_SERVICE_CONTEXT)) {

			// add to the duplicate list to prevent cyclic replication
			contextManager.addToDuplicateServiceContexts(comMsg.getParentId()
					+ comMsg.getContextId());
			updater.addServiceContext(comMsg.getParentId(), comMsg.getContextId());

			ContextEvent event = new ContextEvent();
			event.setContextType(ContextType.SERVICE_CONTEXT);
			event.setContextID(comMsg.getContextId());
			event.setParentContextID(comMsg.getParentId());
			event.setDescriptionID(comMsg.getAxisDescriptionName());

			contextManager.notifyListeners(event, ContextListenerEventType.ADD_CONTEXT);

		} else if (comMsg.getCommandName().equals(CommandType.UPDATE_STATE)) {
,
>
, <(startLine=45 endLine=53 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/xml/test/org/apache/axis2/soap/SOAPFaultTest.java)
    public void testSOAP11GetCode() {
        assertTrue(
                "SOAP 1.1 Fault Test:- After creating a SOAP11Fault, it has a code",
                soap11Fault.getCode() == null);
        soap11Fault.setCode(soap11Factory.createSOAPFaultCode(soap11Fault));
        assertFalse(
                "SOAP 1.1 Fault Test:- After calling setCode method, Fault has no code",
                soap11Fault.getCode() == null);
    }
,
(startLine=70 endLine=78 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/xml/test/org/apache/axis2/soap/SOAPFaultTest.java)
    public void testSOAP11GetReason() {
        assertTrue(
                "SOAP 1.1 Fault Test:- After creating a SOAP11Fault, it has a reason",
                soap11Fault.getReason() == null);
        soap11Fault.setReason(soap11Factory.createSOAPFaultReason(soap11Fault));
        assertFalse(
                "SOAP 1.1 Fault Test:- After calling setReason method, Fault has no reason",
                soap11Fault.getReason() == null);
    }
,
(startLine=95 endLine=103 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/xml/test/org/apache/axis2/soap/SOAPFaultTest.java)
    public void testSOAP11GetNode() {
        assertTrue(
                "SOAP 1.1 Fault Test:- After creating a SOAP11Fault, it has a node",
                soap11Fault.getNode() == null);
        soap11Fault.setNode(soap11Factory.createSOAPFaultNode(soap11Fault));
        assertFalse(
                "SOAP 1.1 Fault Test:- After calling setNode method, Fault has no node",
                soap11Fault.getNode() == null);
    }
,
(startLine=118 endLine=126 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/xml/test/org/apache/axis2/soap/SOAPFaultTest.java)
    public void testSOAP11GetRole() {
        assertTrue(
                "SOAP 1.1 Fault Test:- After creating a SOAP11Fault, it has a role",
                soap11Fault.getRole() == null);
        soap11Fault.setRole(soap11Factory.createSOAPFaultRole(soap11Fault));
        assertFalse(
                "SOAP 1.1 Fault Test:- After calling setRole method, Fault has no role",
                soap11Fault.getRole() == null);
    }
,
(startLine=142 endLine=150 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/xml/test/org/apache/axis2/soap/SOAPFaultTest.java)
    public void testSOAP11GetDetail() {
        assertTrue(
                "SOAP 1.1 Fault Test:- After creating a SOAP11Fault, it has a detail",
                soap11Fault.getDetail() == null);
        soap11Fault.setDetail(soap11Factory.createSOAPFaultDetail(soap11Fault));
        assertFalse(
                "SOAP 1.1 Fault Test:- After calling setDetail method, Fault has no detail",
                soap11Fault.getDetail() == null);
    }
,
>
, <(startLine=1042 endLine=1059 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01008/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
			} else {
				String uri = ((PolicyReference) policyElement).getURI();
				PolicyRegistry registry = policyInclude.getPolicyRegistry();

				if (uri.startsWith("#")) {
					key = uri.substring(uri.indexOf('#') + 1);
				} else {
					key = uri;
				}

				Policy p = registry.lookup(key);

				if (p == null) {
					throw new RuntimeException("Cannot resolve " + uri
							+ " to a Policy");
				}
				addPolicyToDefinitionElement(key, p);
			}
,
(startLine=1708 endLine=1724 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01008/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
			} else {
				String uri = ((PolicyReference) policyElement).getURI();
				PolicyLocator locator = new PolicyLocator(axisService);
				if (uri.startsWith("#")) {
					key = uri.substring(uri.indexOf('#') + 1);
				} else {
					key = uri;
				}

				Policy p = locator.lookup(key);

				if (p == null) {
					throw new RuntimeException("Cannot resolve " + uri
							+ " to a Policy");
				}
				addPolicyToDefinitionElement(key, p);
			}
,
>
, <(startLine=78 endLine=112 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00983/modules/jaxws/test/org/apache/axis2/jaxws/message/SAAJConverterTests.java)
	public void test1() throws Exception {
		
		// Bootstrap: Create an OM SOAPEnvelope from the sample text
		StringReader sr = new StringReader(sampleEnvelope);
		XMLStreamReader inflow = inputFactory.createXMLStreamReader(sr);
		StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(inflow, null);
		org.apache.axiom.soap.SOAPEnvelope omEnvelope = builder.getSOAPEnvelope();
		
		// Step 1: Get the SAAJConverter object from the Factory
		SAAJConverterFactory f = (SAAJConverterFactory) 
			FactoryRegistry.getFactory(SAAJConverterFactory.class);
		SAAJConverter converter = f.getSAAJConverter();
		
		// Step 2: Convert the OM SOAPEnvelope to an SAAJ SOAPEnvelope
		SOAPEnvelope saajEnvelope = converter.toSAAJ(omEnvelope);
		
		// Step 2a: Simple assertion check to ensure correctness.
		String name = saajEnvelope.getBody().getFirstChild().getLocalName();
		assertTrue("a".equals(name));
		
		// Step 3: Convert the SAAJ SOAPEnvelope to an OM SOAPEnvelope
		omEnvelope = converter.toOM(saajEnvelope);
		
		// Step 3a: Simple assertion check to ensure correctness
		name = omEnvelope.getBody().getFirstElement().getLocalName();
		assertTrue("a".equals(name));
		
		// Step 4: Rinse and repeat
		saajEnvelope = converter.toSAAJ(omEnvelope);
		name = saajEnvelope.getBody().getFirstChild().getLocalName();
		assertTrue("a".equals(name));
		omEnvelope = converter.toOM(saajEnvelope);
		name = omEnvelope.getBody().getFirstElement().getLocalName();
		assertTrue("a".equals(name));
	}
,
(startLine=78 endLine=112 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00983/modules/jaxws-integration/test/org/apache/axis2/jaxws/message/SAAJConverterTests.java)
	public void test1() throws Exception {
		
		// Bootstrap: Create an OM SOAPEnvelope from the sample text
		StringReader sr = new StringReader(sampleEnvelope);
		XMLStreamReader inflow = inputFactory.createXMLStreamReader(sr);
		StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(inflow, null);
		org.apache.axiom.soap.SOAPEnvelope omEnvelope = builder.getSOAPEnvelope();
		
		// Step 1: Get the SAAJConverter object from the Factory
		SAAJConverterFactory f = (SAAJConverterFactory) 
			FactoryRegistry.getFactory(SAAJConverterFactory.class);
		SAAJConverter converter = f.getSAAJConverter();
		
		// Step 2: Convert the OM SOAPEnvelope to an SAAJ SOAPEnvelope
		SOAPEnvelope saajEnvelope = converter.toSAAJ(omEnvelope);
		
		// Step 2a: Simple assertion check to ensure correctness.
		String name = saajEnvelope.getBody().getFirstChild().getLocalName();
		assertTrue("a".equals(name));
		
		// Step 3: Convert the SAAJ SOAPEnvelope to an OM SOAPEnvelope
		omEnvelope = converter.toOM(saajEnvelope);
		
		// Step 3a: Simple assertion check to ensure correctness
		name = omEnvelope.getBody().getFirstElement().getLocalName();
		assertTrue("a".equals(name));
		
		// Step 4: Rinse and repeat
		saajEnvelope = converter.toSAAJ(omEnvelope);
		name = saajEnvelope.getBody().getFirstChild().getLocalName();
		assertTrue("a".equals(name));
		omEnvelope = converter.toOM(saajEnvelope);
		name = omEnvelope.getBody().getFirstElement().getLocalName();
		assertTrue("a".equals(name));
	}
,
>
, <(startLine=111 endLine=124 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00632/modules/metadata/test/org/apache/axis2/jaxws/description/AnnotationProviderImplDescriptionTests.java)
    public void testNoWebServiceProvider() {
        // Use the description factory directly; this will be done within the JAX-WS runtime
        try {
            ServiceDescription serviceDesc = 
                DescriptionFactory.createServiceDescriptionFromServiceImpl(NoWebServiceProviderTestImpl.class, null);
            fail("Expected WebServiceException not caught");
        }
        catch (WebServiceException e) {
            // This is the expected successful test path
        }
        catch (Exception e) {
            fail ("Wrong exception caught.  Expected WebServiceException but caught " + e);
        }
    }
,
(startLine=126 endLine=139 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00632/modules/metadata/test/org/apache/axis2/jaxws/description/AnnotationProviderImplDescriptionTests.java)
    public void testBothWebServiceAnnotations() {
        // Use the description factory directly; this will be done within the JAX-WS runtime
        try {
            ServiceDescription serviceDesc = 
                DescriptionFactory.createServiceDescriptionFromServiceImpl(BothWebServiceAnnotationTestImpl.class, null);
            fail("Expected WebServiceException not caught");
        }
        catch (WebServiceException e) {
            // This is the expected successful test path
        }
        catch (Exception e) {
            fail ("Wrong exception caught.  Expected WebServiceException but caught " + e);
        }
    }
,
>
, <(startLine=255 endLine=268 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01023/modules/kernel/src/org/apache/axis2/util/PolicyUtil.java)
		for (Iterator iterator = policies.iterator(); iterator.hasNext();) {
			Object policyElement = iterator.next();
			if (policyElement instanceof Policy) {
				policy = (policy == null) ? (Policy) policyElement
						: (Policy) policy.merge((Policy) policyElement);

			} else {
				PolicyReference policyReference = (PolicyReference) policyElement;
				Policy policy2 = (Policy) policyReference.normalize(
						new AxisPolicyLocator(description), false);
				policy = (policy == null) ? policy2 : (Policy) policy
						.merge(policy2);
			}
		}
,
(startLine=282 endLine=295 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01023/modules/kernel/src/org/apache/axis2/util/PolicyUtil.java)
		for (Iterator iterator = policies.iterator(); iterator.hasNext();) {
			Object policyElement = iterator.next();
			if (policyElement instanceof Policy) {
				policy = (policy == null) ? (Policy) policyElement
						: (Policy) policy.merge((Policy) policyElement);

			} else {
				PolicyReference policyReference = (PolicyReference) policyElement;
				Policy policy2 = (Policy) policyReference.normalize(
						new PolicyLocator(service), false);
				policy = (policy == null) ? policy2 : (Policy) policy
						.merge(policy2);
			}
		}
,
>
, <(startLine=229 endLine=266 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00908/modules/kernel/test/org/apache/axis2/phaserule/PhaseRuleTests.java)
    public void testPhaseFirst() throws AxisFault {
        ArrayList phases = new ArrayList();
        Phase p1 = new Phase("PhaseA");
        phases.add(p1);
        Phase p2 = new Phase("PhaseB");
        phases.add(p2);
        PhaseHolder ph = new PhaseHolder(phases);
        HandlerDescription hm = new HandlerDescription();
        hm.setClassName("org.apache.axis2.phaserule.PhaseRuleHandler");
        Handler h1 = new PhaseRuleHandler();
        h1.init(hm);
        ((PhaseRuleHandler) h1).setName("PhaseFirstHandler");
        hm.setHandler(h1);
        hm.setName("H1");
        PhaseRule rule = new PhaseRule();
        rule.setPhaseName("PhaseA");
        rule.setPhaseFirst(true);
        hm.setRules(rule);
        ph.addHandler(hm);

        HandlerDescription hm1 = new HandlerDescription();
        hm1.setClassName("org.apache.axis2.phaserule.PhaseRuleHandler");
        Handler h2 = new PhaseRuleHandler();
        ((PhaseRuleHandler) h2).setName("Second Handler");
        h2.init(hm1);
        hm1.setHandler(h2);
        hm1.setName("H2");
        PhaseRule rule1 = new PhaseRule();
        rule1.setPhaseName("PhaseA");
        rule1.setBefore("H1");
        hm1.setRules(rule1);
        try {
            ph.addHandler(hm1);
        } catch (PhaseException e) {
            return;
        }
        fail("Succeeded in deploying after PhaseFirst handler!");
    }
,
(startLine=268 endLine=306 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00908/modules/kernel/test/org/apache/axis2/phaserule/PhaseRuleTests.java)
    public void testPhaseLast() throws AxisFault {
        ArrayList phases = new ArrayList();
        Phase p1 = new Phase("PhaseA");
        phases.add(p1);
        Phase p2 = new Phase("PhaseB");
        phases.add(p2);

        PhaseHolder ph = new PhaseHolder(phases);
        HandlerDescription hm = new HandlerDescription();
        hm.setClassName("org.apache.axis2.phaserule.PhaseRuleHandler");
        Handler h1 = new PhaseRuleHandler();
        h1.init(hm);
        ((PhaseRuleHandler) h1).setName("PhaseLast");
        hm.setHandler(h1);
        hm.setName("H1");
        PhaseRule rule = new PhaseRule();
        rule.setPhaseName("PhaseA");
        rule.setPhaseLast(true);
        hm.setRules(rule);
        ph.addHandler(hm);

        HandlerDescription hm1 = new HandlerDescription();
        hm1.setClassName("org.apache.axis2.phaserule.PhaseRuleHandler");
        Handler h2 = new PhaseRuleHandler();
        ((PhaseRuleHandler) h2).setName("Second Handler");
        h2.init(hm1);
        hm1.setHandler(h2);
        hm1.setName("H2");
        PhaseRule rule1 = new PhaseRule();
        rule1.setPhaseName("PhaseA");
        rule1.setAfter("H1");
        hm1.setRules(rule1);
        try {
            ph.addHandler(hm1);
        } catch (PhaseException e) {
            return;
        }
        fail("Succeeded in deploying after PhaseLast handler!");
    }
,
(startLine=371 endLine=412 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00908/modules/kernel/test/org/apache/axis2/phaserule/PhaseRuleTests.java)
    public void testSingleHandler() throws Exception {
        ArrayList phases = new ArrayList();
        Phase p1 = new Phase("PhaseA");
        phases.add(p1);
        Phase p2 = new Phase("PhaseB");
        phases.add(p2);

        PhaseHolder ph = new PhaseHolder(phases);
        HandlerDescription hm = new HandlerDescription();
        hm.setClassName("org.apache.axis2.phaserule.PhaseRuleHandler");
        Handler h1 = new PhaseRuleHandler();
        h1.init(hm);
        ((PhaseRuleHandler) h1).setName("PhaseFirstHandler");
        hm.setHandler(h1);
        hm.setName("H1");
        PhaseRule rule = new PhaseRule();
        rule.setPhaseName("PhaseA");
        rule.setPhaseFirst(true);
        rule.setPhaseLast(true);
        hm.setRules(rule);
        ph.addHandler(hm);

        HandlerDescription hm1 = new HandlerDescription();
        hm1.setClassName("org.apache.axis2.phaserule.PhaseRuleHandler");
        Handler h2 = new PhaseRuleHandler();
        ((PhaseRuleHandler) h2).setName("Second Handler");
        h2.init(hm1);
        hm1.setHandler(h2);
        hm1.setName("H2");
        PhaseRule rule1 = new PhaseRule();
        rule1.setPhaseName("PhaseA");
        rule1.setAfter("H1");
        hm1.setRules(rule1);
        try {
            ph.addHandler(hm1);
        } catch (PhaseException e) {
            // Caught expected Exception
            return;
        }
        fail("This should fail with : can only have one handler, since there is a " +
                "handler with both phaseFirst and PhaseLast true ");
    }
,
(startLine=443 endLine=481 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00908/modules/kernel/test/org/apache/axis2/phaserule/PhaseRuleTests.java)
    public void testInvalidPhaseFirst1() {
        try {
            ArrayList phases = new ArrayList();
            Phase p1 = new Phase("PhaseA");
            phases.add(p1);
            Phase p2 = new Phase("PhaseB");
            phases.add(p2);

            PhaseHolder ph = new PhaseHolder(phases);
            HandlerDescription hm = new HandlerDescription();
            hm.setClassName("org.apache.axis2.phaserule.PhaseRuleHandler");
            Handler h1 = new PhaseRuleHandler();
            h1.init(hm);
            ((PhaseRuleHandler) h1).setName("PhaseFirstHandler");
            hm.setHandler(h1);
            hm.setName("H1");
            PhaseRule rule = new PhaseRule();
            rule.setPhaseName("PhaseA");
            rule.setPhaseFirst(true);
            hm.setRules(rule);
            ph.addHandler(hm);

            HandlerDescription hm1 = new HandlerDescription();
            hm1.setClassName("org.apache.axis2.phaserule.PhaseRuleHandler");
            Handler h2 = new PhaseRuleHandler();
            ((PhaseRuleHandler) h2).setName("Second Handler");
            h2.init(hm1);
            hm1.setHandler(h2);
            hm1.setName("H2");
            PhaseRule rule1 = new PhaseRule();
            rule1.setPhaseName("PhaseA");
            rule1.setPhaseFirst(true);
            hm1.setRules(rule1);
            ph.addHandler(hm1);
            fail("This should be faild with PhaseFirst already has been set, cannot have two " +
                    "phaseFirst Handler for same phase ");
        } catch (AxisFault axisFault) {
        }
    }
,
(startLine=512 endLine=550 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00908/modules/kernel/test/org/apache/axis2/phaserule/PhaseRuleTests.java)
    public void testInvalidPhaseLast() {
        try {
            ArrayList phases = new ArrayList();
            Phase p1 = new Phase("PhaseA");
            phases.add(p1);
            Phase p2 = new Phase("PhaseB");
            phases.add(p2);

            PhaseHolder ph = new PhaseHolder(phases);
            HandlerDescription hm = new HandlerDescription();
            hm.setClassName("org.apache.axis2.phaserule.PhaseRuleHandler");
            Handler h1 = new PhaseRuleHandler();
            h1.init(hm);
            ((PhaseRuleHandler) h1).setName("PhaseLast");
            hm.setHandler(h1);
            hm.setName("H1");
            PhaseRule rule = new PhaseRule();
            rule.setPhaseName("PhaseA");
            rule.setPhaseLast(true);
            hm.setRules(rule);
            ph.addHandler(hm);

            HandlerDescription hm1 = new HandlerDescription();
            hm1.setClassName("org.apache.axis2.phaserule.PhaseRuleHandler");
            Handler h2 = new PhaseRuleHandler();
            ((PhaseRuleHandler) h2).setName("Second Handler");
            h2.init(hm1);
            hm1.setHandler(h2);
            hm1.setName("H2");
            PhaseRule rule1 = new PhaseRule();
            rule1.setPhaseName("PhaseA");
            rule1.setPhaseLast(true);
            hm1.setRules(rule1);
            ph.addHandler(hm1);
            fail("This should be faild with Phaselast already has been set, cannot have two " +
                    "phaseLast Handler for same phase ");
        } catch (AxisFault axisFault) {
        }
    }
,
>
, <(startLine=72 endLine=96 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00503/modules/core/src/org/apache/axis2/deployment/repository/util/WSInfoList.java)
                {
                    if (!isFileExist(file.getName())) { // chacking whether the file is already deployed
                        WSInfo wsInfo = new WSInfo(file.getName(),
                                file.lastModified(),
                                SERVICE);
                        jarlist.add(wsInfo);
                        ArchiveFileData archiveFileData = new ArchiveFileData(file, SERVICE);
                        deployer.addWSToDeploy(archiveFileData);//to inform that new web service is deployed
                    } else {
                        if (deployer.isHotUpdate()) {
                            WSInfo tempWSInfo = getFileItem(file.getName());
                            if (isModified(file, tempWSInfo)) {  // caheck whether file is updated
                                tempWSInfo.setLastModifiedDate(file.lastModified());
                                WSInfo wsInfo = new WSInfo(tempWSInfo.getFilename(),
                                        tempWSInfo.getLastmodifieddate(),
                                        SERVICE);
                                deployer.addWSToUndeploy(wsInfo);  // add entry to undeploy list
                                ArchiveFileData archiveFileData = new ArchiveFileData(file, SERVICE);
                                deployer.addWSToDeploy(archiveFileData);   // add entry to deploylist

                            }
                        }
                    }
                    break;
                }
,
(startLine=98 endLine=122 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00503/modules/core/src/org/apache/axis2/deployment/repository/util/WSInfoList.java)
                {
                    if (!isFileExist(file.getName())) {  // chacking whether the file is already deployed
                        WSInfo wsInfo = new WSInfo(file.getName(),
                                file.lastModified(),
                                MODULE);
                        jarlist.add(wsInfo);
                        ArchiveFileData archiveFileData = new ArchiveFileData(file, MODULE);
                        deployer.addWSToDeploy(archiveFileData);//to inform that new web service is deployed
                    } else {
                        if (deployer.isHotUpdate()) {
                            WSInfo tempWSInfo = getFileItem(file.getName());
                            if (isModified(file, tempWSInfo)) {
                                tempWSInfo.setLastModifiedDate(file.lastModified());
                                WSInfo wsInfo = new WSInfo(tempWSInfo.getFilename(),
                                        tempWSInfo.getLastmodifieddate(),
                                        MODULE);
                                deployer.addWSToUndeploy(wsInfo);   // add entry to undeploy list
                                ArchiveFileData archiveFileData = new ArchiveFileData(file, MODULE);
                                deployer.addWSToDeploy(archiveFileData); // add entry to deploylist

                            }
                        }
                    }
                    break;
                }
,
>
, <(startLine=51 endLine=65 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00047/dev/scratch/prototype1/src/java/org/apache/axis/handlers/RPCOpNameFinder.java)
                    if(node.getType() == OMNode.ELEMENT_NODE){
                        OMElement bodyChild  = (OMElement)node;
                    
                        OMNamespace omns = bodyChild.getNamespace();
    
                        if(omns != null){
                            String ns = omns.getValue();
                            if(ns != null){
                                msgContext.setCurrentOperation(new QName(ns,bodyChild.getLocalName())); 
                            }
                        }else{
                            throw new AxisFault("SOAP Body must be NS Qualified");                            
                        }
                
                    }    
,
(startLine=51 endLine=65 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00047/dev/scratch/srinath_eran_jaliya/src/java/org/apache/axis/handlers/RPCOpNameFinder.java)
                    if(node.getType() == OMNode.ELEMENT_NODE){
                        OMElement bodyChild  = (OMElement)node;
                    
                        OMNamespace omns = bodyChild.getNamespace();
    
                        if(omns != null){
                            String ns = omns.getValue();
                            if(ns != null){
                                msgContext.setCurrentOperation(new QName(ns,bodyChild.getLocalName())); 
                            }
                        }else{
                            throw new AxisFault("SOAP Body must be NS Qualified");                            
                        }
                
                    }    
,
>
, <(startLine=46 endLine=67 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01035/modules/kernel/src/org/apache/axis2/receivers/RawXMLINOnlyMessageReceiver.java)
    private Method findOperation(AxisOperation op, Class implClass) {
        Method method = (Method)(op.getParameterValue("myMethod"));
        if (method != null) return method;

        String methodName = op.getName().getLocalPart();
        try {
            // Looking for a method of the form "void method(OMElement)"
            method = implClass.getMethod(methodName, new Class [] { OMElement.class });
            if (method.getReturnType().equals(void.class)) {
                try {
                    op.addParameter("myMethod", method);
                } catch (AxisFault axisFault) {
                    // Do nothing here
                }
                return method;
            }
        } catch (NoSuchMethodException e) {
            // Fall through
        }

        return null;
    }
,
(startLine=48 endLine=70 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01035/modules/kernel/src/org/apache/axis2/receivers/RawXMLINOutMessageReceiver.java)
    private Method findOperation(AxisOperation op, Class implClass) {
        Method method = (Method)(op.getParameterValue("myMethod"));
        if (method != null) return method;

        String methodName = op.getName().getLocalPart();

        try {
            // Looking for a method of the form "OMElement method(OMElement)"
            method = implClass.getMethod(methodName, new Class [] { OMElement.class });
            if (method.getReturnType().equals(OMElement.class)) {
                try {
                    op.addParameter("myMethod", method);
                } catch (AxisFault axisFault) {
                    // Do nothing here
                }
                return method;
            }
        } catch (NoSuchMethodException e) {
            // Fault through
        }

        return null;
    }
,
>
, <(startLine=166 endLine=174 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00185/modules/core/src/java/org/apache/axis/phaseresolver/PhaseHolder.java)
                        for (int i = 0; i < phaseholder.size(); i++) {
                            PhaseMetadata phase = (PhaseMetadata) phaseholder.get(i);
                            Phase axisPhase = new Phase(phase.getName());
                            handlers = phase.getOrderedHandlers();
                            for (int j = 0; j < handlers.length; j++) {
                                axisPhase.addHandler(handlers[j].getHandler());
                            }
                            inChain.add(axisPhase);
                        }
,
(startLine=181 endLine=189 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00185/modules/core/src/java/org/apache/axis/phaseresolver/PhaseHolder.java)
                        for (int i = 0; i < phaseholder.size(); i++) {
                            PhaseMetadata phase = (PhaseMetadata) phaseholder.get(i);
                            Phase axisPhase = new Phase(phase.getName());
                            handlers = phase.getOrderedHandlers();
                            for (int j = 0; j < handlers.length; j++) {
                                axisPhase.addHandler(handlers[j].getHandler());
                            }
                            outChain.add(axisPhase);
                        }
,
(startLine=196 endLine=204 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00185/modules/core/src/java/org/apache/axis/phaseresolver/PhaseHolder.java)
                        for (int i = 0; i < phaseholder.size(); i++) {
                            PhaseMetadata phase = (PhaseMetadata) phaseholder.get(i);
                            Phase axisPhase = new Phase(phase.getName());
                            handlers = phase.getOrderedHandlers();
                            for (int j = 0; j < handlers.length; j++) {
                                axisPhase.addHandler(handlers[j].getHandler());
                            }
                            faultChain.add(axisPhase);
                        }
,
(startLine=319 endLine=327 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00185/modules/core/src/java/org/apache/axis/phaseresolver/PhaseHolder.java)
                        for (int i = 0; i < phaseholder.size(); i++) {
                            PhaseMetadata phase = (PhaseMetadata) phaseholder.get(i);
                            Phase axisPhase = new Phase(phase.getName());
                            handlers = phase.getOrderedHandlers();
                            for (int j = 0; j < handlers.length; j++) {
                                axisPhase.addHandler(handlers[j].getHandler());
                            }
                            inChain.add(axisPhase);
                        }
,
(startLine=334 endLine=342 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00185/modules/core/src/java/org/apache/axis/phaseresolver/PhaseHolder.java)
                        for (int i = 0; i < phaseholder.size(); i++) {
                            PhaseMetadata phase = (PhaseMetadata) phaseholder.get(i);
                            Phase axisPhase = new Phase(phase.getName());
                            handlers = phase.getOrderedHandlers();
                            for (int j = 0; j < handlers.length; j++) {
                                axisPhase.addHandler(handlers[j].getHandler());
                            }
                            outChain.add(axisPhase);
                        }
,
(startLine=349 endLine=357 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00185/modules/core/src/java/org/apache/axis/phaseresolver/PhaseHolder.java)
                        for (int i = 0; i < phaseholder.size(); i++) {
                            PhaseMetadata phase = (PhaseMetadata) phaseholder.get(i);
                            Phase axisPhase = new Phase(phase.getName());
                            handlers = phase.getOrderedHandlers();
                            for (int j = 0; j < handlers.length; j++) {
                                axisPhase.addHandler(handlers[j].getHandler());
                            }
                            faultChain.add(axisPhase);
                        }
,
>
, <(startLine=596 endLine=611 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00952/modules/kernel/src/org/apache/axis2/util/XMLUtils.java)
    public static OMNode toOM(InputStream inputStream, boolean buildAll) throws XMLStreamException {
        XMLStreamReader xmlReader = StAXUtils
                .createXMLStreamReader(inputStream);
        OMFactory fac = OMAbstractFactory.getOMFactory();
        StAXOMBuilder builder = new StAXOMBuilder(fac, xmlReader);
        builder.setCache(true);
        builder.releaseParserOnClose(true);
        OMNode omNode = builder.getDocumentElement();
        
        if (buildAll) {
            omNode.build();
            builder.close();
        }
        
        return omNode;
    }
,
(startLine=635 endLine=650 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00952/modules/kernel/src/org/apache/axis2/util/XMLUtils.java)
    public static OMNode toOM(Reader reader, boolean buildAll) throws XMLStreamException {
        XMLStreamReader xmlReader = StAXUtils
                .createXMLStreamReader(reader);
        OMFactory fac = OMAbstractFactory.getOMFactory();
        StAXOMBuilder builder = new StAXOMBuilder(fac, xmlReader);
        builder.setCache(true);
        builder.releaseParserOnClose(true);
        OMNode omNode = builder.getDocumentElement();
        
        if (buildAll) {
            omNode.build();
            builder.close();
        }
        
        return omNode;
    }
,
>
, <(startLine=140 endLine=176 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00206/modules/core/src/java/org/apache/axis/phaseresolver/PhaseResolver.java)
        while (itr.hasNext()) {
            QName moduleref = (QName) itr.next();

            // }
            // Vector modules = (Vector)axisService.getModules();
            // for (int i = 0; i < modules.size(); i++) {
            // QName moduleref = (QName) modules.elementAt(i);
            module = engineRegistry.getModule(moduleref);
            switch (flowtype) {
                case 1:
                    {
                        flow = module.getInFlow();
                        break;
                    }
                case 2:
                    {
                        flow = module.getOutFlow();
                        break;
                    }
                case 3:
                    {
                        flow = module.getFaultFlow();
                        break;
                    }
            }
            if (flow != null) {
                for (int j = 0; j < flow.getHandlerCount(); j++) {
                    HandlerMetadata metadata = flow.getHandler(j);

                    // todo change this in properway
                    if (metadata.getRules().getPhaseName().equals("")) {
                        metadata.getRules().setPhaseName("service");
                    }
                    allHandlers.add(metadata);
                }
            }
        }
,
(startLine=292 endLine=323 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00206/modules/core/src/java/org/apache/axis/phaseresolver/PhaseResolver.java)
            for (int intA = 0; intA < count; intA++) {
                moduleName = (QName) modules.get(intA);
                module = engineRegistry.getModule(moduleName);
                switch (type) {
                    case 1:
                        {
                            flow = module.getInFlow();
                            break;
                        }
                    case 2:
                        {
                            flow = module.getOutFlow();
                            break;
                        }
                    case 3:
                        {
                            flow = module.getFaultFlow();
                            break;
                        }
                }
                if (flow != null) {
                    for (int j = 0; j < flow.getHandlerCount(); j++) {
                        HandlerMetadata metadata = flow.getHandler(j);

                        // todo change this in properway
                        if (metadata.getRules().getPhaseName().equals("")) {
                            metadata.getRules().setPhaseName("global");
                        }
                        phaseHolder.addHandler(metadata);
                    }
                }
            }
,
>
, <(startLine=198 endLine=237 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00499/modules/tool/src/org/apache/axis2/tool/service/eclipse/ui/WSDLOptionsPage.java)
    private void updateTable() {
        //get a URL from the class file location
        try {
            String classFileLocation = getClassFileLocation();
            URL classFileURL = new File(classFileLocation).toURL();
            ClassLoader loader = new URLClassLoader(new URL[] { classFileURL });

            Class clazz = loader.loadClass(classNameTextBox.getText());
            Method[] methods = null;
            
            if (searchDeclaredMethodsCheckBox.getSelection()){
                methods = clazz.getDeclaredMethods();
            }else{
                methods = clazz.getMethods();
            }

            int methodCount = methods.length;
            if (methodCount > 0) {
                table.removeAll();
                TableItem[] items = new TableItem[methodCount]; // An item for each field
                for (int i = 0 ; i < methodCount; i++){
                   items[i] = new TableItem(table, SWT.NONE);
                   items[i].setText(1,methods[i].getName());
                   items[i].setText(2,methods[i].getReturnType().getName());
                   items[i].setText(3,methods[i].getParameterTypes().length+"");
                   items[i].setChecked(true);//check them all by default
                }
                table.setVisible(true);
                
                //update the dirty variable
               updateDirtyStatus(false);
               updateStatus(null);
            }

        } catch (MalformedURLException e) {
           updateStatus("Error : invalid location " +e.getMessage());
        } catch (ClassNotFoundException e) {
           updateStatus("Error : Class not found " + e.getMessage());
        }
    }
,
(startLine=196 endLine=235 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00499/modules/tool/src/org/apache/axis2/tool/service/eclipse/ui/ServiceXMLGenerationPage.java)
    private void updateTable() {
        //get a URL from the class file location
        try {
            String classFileLocation = getClassFileLocation();
            URL classFileURL = new File(classFileLocation).toURL();
            ClassLoader loader = new URLClassLoader(new URL[] { classFileURL });

            Class clazz = loader.loadClass(classNameTextBox.getText());
            Method[] methods = null;
            
            if (searchDeclaredMethodsCheckBox.getSelection()){
                methods = clazz.getDeclaredMethods();
            }else{
                methods = clazz.getMethods();
            }

            int methodCount = methods.length;
            if (methodCount > 0) {
                table.removeAll();
                TableItem[] items = new TableItem[methodCount]; // An item for each field
                for (int i = 0 ; i < methodCount; i++){
                   items[i] = new TableItem(table, SWT.NONE);
                   items[i].setText(1,methods[i].getName());
                   items[i].setText(2,methods[i].getReturnType().getName());
                   items[i].setText(3,methods[i].getParameterTypes().length+"");
                   items[i].setChecked(true);//check them all by default
                }
                table.setVisible(true);
                
                //update the dirty variable
               updateDirtyStatus(false);
               updateStatus(null);
            }

        } catch (MalformedURLException e) {
           updateStatus("Error : invalid location " +e.getMessage());
        } catch (ClassNotFoundException e) {
           updateStatus("Error : Class not found " + e.getMessage());
        }
    }
,
(startLine=229 endLine=268 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00499/modules/tool/src/org/apache/axis2/tool/codegen/eclipse/ui/JavaSourceSelectionPage.java)
    private void updateTable() {
        //get a URL from the class file location
        try {
            String classFileLocation = this.getClassLocation();
            URL classFileURL = new File(classFileLocation).toURL();
            ClassLoader loader = new URLClassLoader(new URL[] { classFileURL },Thread.currentThread().getContextClassLoader());

            Class clazz = loader.loadClass(getClassName());
            Method[] methods = null;
            
            if (searchDeclaredMethodsCheckBox.getSelection()){
                methods = clazz.getDeclaredMethods();
            }else{
                methods = clazz.getMethods();
            }

            int methodCount = methods.length;
            if (methodCount > 0) {
                table.removeAll();
                TableItem[] items = new TableItem[methodCount]; // An item for each field
                for (int i = 0 ; i < methodCount; i++){
                   items[i] = new TableItem(table, SWT.NONE);
                   items[i].setText(1,methods[i].getName());
                   items[i].setText(2,methods[i].getReturnType().getName());
                   items[i].setText(3,methods[i].getParameterTypes().length+"");
                   items[i].setChecked(true);//check them all by default
                }
                table.setVisible(true);
                
                //update the dirty variable
               updateDirtyStatus(false);
               updateStatus(null);
            }

        } catch (MalformedURLException e) {
           updateStatus("Error : invalid location " +e.getMessage());
        } catch (ClassNotFoundException e) {
           updateStatus("Error : Class not found " + e.getMessage());
        }
    }
,
>
, <(startLine=471 endLine=483 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01076/modules/kernel/test/org/apache/axis2/java/security/driver/Java2SecTest.java)
        } finally {
            assertTrue("Accessing to public.txt file is denied; Test failed.", allowed);
            // Disable security manager if it is enabled by this testcsae
            if (System.getSecurityManager() != null && oldSM == null) {
                System.setSecurityManager(null);
                if (System.getSecurityManager() == null) {
                    System.out.println("Security Manager is successfully disabled.");
                } else {
                    System.out.println("Security Manager is still enabled");
                }
            }
            System.out.println("\ntestCheckPermissionAllowed() ends.\n");
        }
,
(startLine=530 endLine=543 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01076/modules/kernel/test/org/apache/axis2/java/security/driver/Java2SecTest.java)
        } finally {
            assertTrue("Accessing to private.txt file is allowed; Test failed.", denied);

            // Disable security manager if it is enabled by this testcsae
            if (System.getSecurityManager() != null && oldSM == null) {
                System.setSecurityManager(null);
                if (System.getSecurityManager() == null) {
                    System.out.println("Security Manager is successfully disabled.");
                } else {
                    System.out.println("Security Manager is still enabled");
                }
            }
            System.out.println("\ntestCheckPermissionDenied() ends.\n");
        }
,
>
, <(startLine=30 endLine=89 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00943/modules/integration/manual/src/test/interop/whitemesa/round2/util/soap12/GroupbSoap12EchoNestedStructUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");

        OMElement operation =
                omfactory.createOMElement("echoNestedStruct", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding",
                               null);

        OMElement part = omfactory.createOMElement("inputStruct", "", null);
        part.addAttribute("xsi:type", "s:SOAPStructStruct", null);


        OMElement value0 = omfactory.createOMElement("varString", "", null);
        value0.addAttribute("xsi:type", "xsd:string", null);
        value0.addChild(omfactory.createOMText("strss fdfing1"));

        OMElement value1 = omfactory.createOMElement("varInt", "", null);
        value1.addAttribute("xsi:type", "xsd:int", null);
        value1.addChild(omfactory.createOMText("25"));

        OMElement value2 = omfactory.createOMElement("varFloat", "", null);
        value2.addAttribute("xsi:type", "xsd:float", null);
        value2.addChild(omfactory.createOMText("25.23"));

        OMElement value3 = omfactory.createOMElement("varStruct", "", null);

        OMElement value30 = omfactory.createOMElement("varString", "", null);
        value30.addAttribute("xsi:type", "xsd:string", null);
        value30.addChild(omfactory.createOMText("strss fdfing1"));

        OMElement value31 = omfactory.createOMElement("varInt", "", null);
        value31.addAttribute("xsi:type", "xsd:int", null);
        value31.addChild(omfactory.createOMText("25"));

        OMElement value32 = omfactory.createOMElement("varFloat", "", null);
        value32.addAttribute("xsi:type", "xsd:float", null);
        value32.addChild(omfactory.createOMText("25.23"));

        value3.addChild(value30);
        value3.addChild(value31);
        value3.addChild(value32);

        part.addChild(value0);
        part.addChild(value1);
        part.addChild(value2);
        part.addChild(value3);

        operation.addChild(part);

        return reqEnv;

    }
,
(startLine=31 endLine=98 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00943/modules/integration/manual/src/test/interop/whitemesa/round2/util/GroupbEchoNestedArrayUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();

        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");

        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        OMNamespace encNs =
                reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        OMNamespace envNs =
                reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");

        OMElement operation =
                omfactory.createOMElement("echoNestedArray", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.declareNamespace(envNs);
        operation.addAttribute("encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", envNs);

        OMElement part = omfactory.createOMElement("inputStruct", null);
        part.addAttribute("xsi:type", "s:SOAPStruct", null);


        OMElement value0 = omfactory.createOMElement("varString", null);
        value0.addAttribute("xsi:type", "xsd:string", null);
        value0.addChild(omfactory.createOMText("strss fdfing1"));

        OMElement value1 = omfactory.createOMElement("varInt", null);
        value1.addAttribute("xsi:type", "xsd:int", null);
        value1.addChild(omfactory.createOMText("25"));

        OMElement value2 = omfactory.createOMElement("varFloat", null);
        value2.addAttribute("xsi:type", "xsd:float", null);
        value2.addChild(omfactory.createOMText("25.23"));

        OMElement value3 = omfactory.createOMElement("varArray", null);
        part.addAttribute("xsi:type", "s:SOAPArrayStruct", null);
        value3.declareNamespace(encNs);
        value3.addAttribute("arrayType", "xsd:string[3]", encNs);

        OMElement value30 = omfactory.createOMElement("item", null);
        value30.addAttribute("xsi:type", "xsd:string", null);
        value30.addChild(omfactory.createOMText("strss fdfing1"));

        OMElement value31 = omfactory.createOMElement("item", null);
        value31.addAttribute("xsi:type", "xsd:string", null);
        value31.addChild(omfactory.createOMText("strss fdfing2"));

        OMElement value32 = omfactory.createOMElement("item", null);
        value32.addAttribute("xsi:type", "xsd:string", null);
        value32.addChild(omfactory.createOMText("strss fdfing3"));

        value3.addChild(value30);
        value3.addChild(value31);
        value3.addChild(value32);

        part.addChild(value0);
        part.addChild(value1);
        part.addChild(value2);
        part.addChild(value3);

        operation.addChild(part);

        return reqEnv;

    }
,
(startLine=30 endLine=91 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00943/modules/integration/manual/src/test/interop/whitemesa/round2/util/GroupbEchoNestedStructUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();

        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");

        OMElement operation =
                omfactory.createOMElement("echoNestedStruct", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/",
                               null);

        OMElement part = omfactory.createOMElement("inputStruct", "", null);
        part.addAttribute("xsi:type", "s:SOAPStructStruct", null);


        OMElement value0 = omfactory.createOMElement("varString", "", null);
        value0.addAttribute("xsi:type", "xsd:string", null);
        value0.addChild(omfactory.createOMText("strss fdfing1"));

        OMElement value1 = omfactory.createOMElement("varInt", "", null);
        value1.addAttribute("xsi:type", "xsd:int", null);
        value1.addChild(omfactory.createOMText("25"));

        OMElement value2 = omfactory.createOMElement("varFloat", "", null);
        value2.addAttribute("xsi:type", "xsd:float", null);
        value2.addChild(omfactory.createOMText("25.23"));

        OMElement value3 = omfactory.createOMElement("varStruct", "", null);

        OMElement value30 = omfactory.createOMElement("varString", "", null);
        value30.addAttribute("xsi:type", "xsd:string", null);
        value30.addChild(omfactory.createOMText("strss fdfing1"));

        OMElement value31 = omfactory.createOMElement("varInt", "", null);
        value31.addAttribute("xsi:type", "xsd:int", null);
        value31.addChild(omfactory.createOMText("25"));

        OMElement value32 = omfactory.createOMElement("varFloat", "", null);
        value32.addAttribute("xsi:type", "xsd:float", null);
        value32.addChild(omfactory.createOMText("25.23"));

        value3.addChild(value30);
        value3.addChild(value31);
        value3.addChild(value32);

        part.addChild(value0);
        part.addChild(value1);
        part.addChild(value2);
        part.addChild(value3);


        operation.addChild(part);

        return reqEnv;

    }
,
(startLine=30 endLine=90 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00943/modules/integration/manual/src/test/interop/whitemesa/round2/util/soap12/GroupbSoap12EchoNestedArrayUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://soapinterop.org/", "tns");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");

        OMElement operation =
                omfactory.createOMElement("echoNestedArray", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding",
                               null);

        OMElement part = omfactory.createOMElement("inputStruct", "", null);
        part.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement value0 = omfactory.createOMElement("varString", "", null);
        value0.addAttribute("xsi:type", "xsd:string", null);
        value0.addChild(omfactory.createOMText("strss fdfing1"));

        OMElement value1 = omfactory.createOMElement("varInt", "", null);
        value1.addAttribute("xsi:type", "xsd:int", null);
        value1.addChild(omfactory.createOMText("25"));

        OMElement value2 = omfactory.createOMElement("varFloat", "", null);
        value2.addAttribute("xsi:type", "xsd:float", null);
        value2.addChild(omfactory.createOMText("25.23"));

        OMElement value3 = omfactory.createOMElement("varArray", "", null);
        part.addAttribute("xsi:type", "s:SOAPArrayStruct", null);
        value3.addAttribute("SOAP-ENC:arrayType", "xsd:string[3]", null);

        OMElement value30 = omfactory.createOMElement("item", "", null);
        value30.addAttribute("xsi:type", "xsd:string", null);
        value30.addChild(omfactory.createOMText("strss fdfing1"));

        OMElement value31 = omfactory.createOMElement("item", "", null);
        value31.addAttribute("xsi:type", "xsd:string", null);
        value31.addChild(omfactory.createOMText("strss fdfing2"));

        OMElement value32 = omfactory.createOMElement("item", "", null);
        value32.addAttribute("xsi:type", "xsd:string", null);
        value32.addChild(omfactory.createOMText("strss fdfing3"));

        value3.addChild(value30);
        value3.addChild(value31);
        value3.addChild(value32);

        part.addChild(value0);
        part.addChild(value1);
        part.addChild(value2);
        part.addChild(value3);

        operation.addChild(part);

        return reqEnv;

    }
,
>
, <(startLine=89 endLine=111 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00057/dev/scratch/deepal/deployment/src/org/apache/axis/deployment/deployEvents/WSListenerImpl.java)
    private void searchWS(String folderName, int type) {
        String files[];
        current_jars = new Vector();
        File root = new File(folderName);
        // adding the root folder to the vector
        current_jars.addElement(root);

        while (current_jars.size() > 0) {         // loop until empty
            File dir = (File)current_jars.elementAt(0); // get first dir
            current_jars.remove(0);       // remove it
            files = dir.list();              // get list of files

            for (int i = 0; i < files.length ; i++) { // iterate
                File f = new File(dir, files[i]);
                if (f.isDirectory()) {        // see if it's a directory
                    current_jars.insertElementAt(f, 0);
                } // add dir to start of agenda
                else if (isJarFile(f.getName())){
                    wsinfoList.addWSInfoItem(f,type);
                }
            }
        }
    }
,
(startLine=90 endLine=114 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00057/dev/scratch/prototype1/src/java/org/apache/axis/deployment/listener/RepositaryListenerImpl.java)
    private void searchWS(String folderName, int type) {
        String files[];
        current_jars = new Vector();
        File root = new File(folderName);
        // adding the root folder to the vector
        current_jars.addElement(root);

        while (current_jars.size() > 0) {         // loop until empty
            File dir = (File) current_jars.elementAt(0); // get first dir
            current_jars.remove(0);       // remove it
            files = dir.list();              // get list of files
            if(files == null){
                continue;
            }
            for (int i = 0; i < files.length; i++) { // iterate
                File f = new File(dir, files[i]);
                if (f.isDirectory()) {        // see if it's a directory
                    current_jars.insertElementAt(f, 0);
                } // add dir to start of agenda
                else if (isJarFile(f.getName())) {
                    wsinfoList.addWSInfoItem(f, type);
                }
            }
        }
    }
,
(startLine=91 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00057/dev/scratch/prototype1/src/java/org/apache/axis/deployment/listener/WSListenerImpl.java)
    private void searchWS(String folderName, int type) {
        String files[];
        current_jars = new Vector();
        File root = new File(folderName);
        // adding the root folder to the vector
        current_jars.addElement(root);

        while (current_jars.size() > 0) {         // loop until empty
            File dir = (File) current_jars.elementAt(0); // get first dir
            current_jars.remove(0);       // remove it
            files = dir.list();              // get list of files

            for (int i = 0; i < files.length; i++) { // iterate
                File f = new File(dir, files[i]);
                if (f.isDirectory()) {        // see if it's a directory
                    current_jars.insertElementAt(f, 0);
                } // add dir to start of agenda
                else if (isJarFile(f.getName())) {
                    wsinfoList.addWSInfoItem(f, type);
                }
            }
        }
    }
,
>
, <(startLine=30 endLine=73 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/soap12/WMRound2Soap12GroupcVoidUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");
        reqEnv.declareNamespace("http://soapinterop.org", "m1");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));

        OMElement operation = omfactory.createOMElement("echoVoid", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        return reqEnv;

    }
,
(startLine=29 endLine=77 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/soap12/WMRound2Soap12GroupcBooleanUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");
        reqEnv.declareNamespace("http://soapinterop.org", "m1");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("852"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoBoolean", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        OMElement part = omfactory.createOMElement("inputBoolean", "", null);
        part.addAttribute("xsi:type", "xsd:boolean", null);
        part.addChild(omfactory.createOMText("1"));

        operation.addChild(part);
        return reqEnv;

    }
,
(startLine=30 endLine=79 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/soap12/WMRound2Soap12GroupcEchoStringUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");
        reqEnv.declareNamespace("http://soapinterop.org", "m1");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoString", "http://soapinterop.org/", null);

        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        OMElement part = omfactory.createOMElement("inputString", null);
        part.addAttribute("xsi:type", "xsd:string", null);
        part.addChild(omfactory.createOMText("Apache Software Foundation"));

        operation.addChild(part);
        return reqEnv;

    }
,
(startLine=30 endLine=69 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/soap12/GroupcSoap12VoidUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");
        OMNamespace ns1 =reqEnv.declareNamespace("http://soapinterop.org", "m1");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", ns1);
        block2.addAttribute("xsi:type", "hns:echoMeStructRequest", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoVoid", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        return reqEnv;

    }
,
(startLine=30 endLine=78 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/soap12/WMRound2Saop12GroupcFloatUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");
        reqEnv.declareNamespace("http://soapinterop.org", "m1");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoFloat", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        OMElement part = omfactory.createOMElement("inputFloat", "", null);
        part.addAttribute("xsi:type", "xsd:float", null);
        part.addChild(omfactory.createOMText("50.25"));

        operation.addChild(part);
        return reqEnv;

    }
,
(startLine=30 endLine=79 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/soap12/WMRound2Soap12GroupcBase64Util.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");
        reqEnv.declareNamespace("http://soapinterop.org", "m1");


        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoBase64", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        OMElement part = omfactory.createOMElement("inputBase64", "", null);
        part.addAttribute("xsi:type", "xsd:base64Binary", null);
        part.addChild(omfactory.createOMText("SGVsbG8gV29ybGQ="));

        operation.addChild(part);
        return reqEnv;

    }
,
(startLine=30 endLine=79 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/soap12/WMRound2Soap12GroupcIntergerUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");
        reqEnv.declareNamespace("http://soapinterop.org", "m1");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoInteger", "http://soapinterop.org/", null);

        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        OMElement part = omfactory.createOMElement("inputInteger", null);
        part.addAttribute("xsi:type", "xsd:int", null);
        part.addChild(omfactory.createOMText("456"));

        operation.addChild(part);
        return reqEnv;

    }
,
(startLine=30 endLine=78 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/soap12/GroupcSoap12EchoStringUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoString", "http://soapinterop.org/", null);

        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);

        OMElement part = omfactory.createOMElement("inputString", null);
        part.addAttribute("xsi:type", "xsd:string", null);
        part.addChild(omfactory.createOMText("strssfdfing1"));

        operation.addChild(part);
        return reqEnv;

    }
,
(startLine=30 endLine=77 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/soap12/WMRound2Soap12GroupcHexBinaryUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");
        reqEnv.declareNamespace("http://soapinterop.org", "m1");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("852"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoHexBinary", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://www.w3.org/2003/05/soap-encoding", null);
        OMElement part = omfactory.createOMElement("inputHexBinary", "", null);
        part.addAttribute("xsi:type", "xsd:hexBinary", null);
        part.addChild(omfactory.createOMText("41394644363445313243"));
        operation.addChild(part);

        return reqEnv;

    }
,
(startLine=30 endLine=78 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/GroupcFloatUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();

        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoFloat", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        OMElement part = omfactory.createOMElement("inputFloat", "", null);
        part.addAttribute("xsi:type", "xsd:float", null);
        part.addChild(omfactory.createOMText("50.25"));

        operation.addChild(part);
        return reqEnv;

    }
,
(startLine=30 endLine=79 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/GroupcDecimalUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC"); //xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns"); //xmlns:m0="http://soapinterop.org/echoheader/
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoDecimal", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        OMElement part = omfactory.createOMElement("inputDecimal", "", null);
        part.addAttribute("xsi:type", "xsd:decimal", null);
        part.addChild(omfactory.createOMText("455646152"));

        operation.addChild(part);

        return reqEnv;

    }
,
(startLine=30 endLine=76 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/GroupcHexBinaryUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();

        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("852"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoHexBinary", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);
        OMElement part = omfactory.createOMElement("inputHexBinary", "", null);
        part.addAttribute("xsi:type", "xsd:hexBinary", null);
        part.addChild(omfactory.createOMText("41394644363445313243"));
        operation.addChild(part);
        return reqEnv;

    }
,
(startLine=30 endLine=79 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/GroupcBase64Util.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();

        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");


        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns");
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoBase64", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        OMElement part = omfactory.createOMElement("inputBase64", "", null);
        part.addAttribute("xsi:type", "xsd:base64Binary", null);
        part.addChild(omfactory.createOMText("SGVsbG8gV29ybGQ="));

        operation.addChild(part);
        return reqEnv;

    }
,
(startLine=30 endLine=79 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/GroupcDateUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.getDefaultEnvelope();
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC"); //xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns"); //xmlns:m0="http://soapinterop.org/echoheader/
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoDate", "http://soapinterop.org/", null);
        reqEnv.getBody().addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        OMElement part = omfactory.createOMElement("inputDate", null);
        part.addAttribute("xsi:type", "xsd:dateTime", null);
        part.addChild(omfactory.createOMText("2002-07-18T19:40:30.387-06:00"));

        operation.addChild(part);

        return reqEnv;

    }
,
(startLine=31 endLine=84 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/GroupcIntergerUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.createSOAPEnvelope();
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/","soapenv");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema","xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/","SOAP-ENC"); //xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance","xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd","s");
        reqEnv.declareNamespace("http://soapinterop.org/","m");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns= reqEnv.declareNamespace("http://soapinterop.org/echoheader/","hns"); //xmlns:m0="http://soapinterop.org/echoheader/
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest",hns);
        block1.addAttribute("xsi:type","xsd:string",null);
        block1.addChild(omfactory.createOMText("string"));
       // header.addChild(headerChild);
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest",hns);
        block2.addAttribute("xsi:type","s:SOAPStruct",null);

        OMElement h2Val1=omfactory.createOMElement("varString",null);
        h2Val1.addAttribute("xsi:type","xsd:string",null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2=omfactory.createOMElement("varInt",null);
        h2Val2.addAttribute("xsi:type","xsd:int",null);
        h2Val2.addChild(omfactory.createOMText("150"));

        OMElement h2Val3=omfactory.createOMElement("varFloat",null);
        h2Val3.addAttribute("xsi:type","xsd:float",null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoInteger","http://soapinterop.org/",  null);

        //operation.setNamespace(ns);
        SOAPBody body = omfactory.createSOAPBody(reqEnv);
        body.addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        OMElement part = omfactory.createOMElement("inputInteger", null);
        part.addAttribute("xsi:type", "xsd:int", null);
        part.addChild(omfactory.createOMText("456"));

        operation.addChild(part);
        //reqEnv.getBody().addChild(method);
        return reqEnv;

    }
,
(startLine=31 endLine=82 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00689/modules/integration/src/test/interop/whitemesa/round2/util/GroupcBooleanUtil.java)
    public SOAPEnvelope getEchoSoapEnvelope() {

        SOAPFactory omfactory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope reqEnv = omfactory.createSOAPEnvelope();
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/envelope/", "soapenv");
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema", "xsd");
        reqEnv.declareNamespace("http://schemas.xmlsoap.org/soap/encoding/", "SOAP-ENC"); //xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
        reqEnv.declareNamespace("http://www.w3.org/2001/XMLSchema-instance", "xsi");
        reqEnv.declareNamespace("http://soapinterop.org/xsd", "s");
        reqEnv.declareNamespace("http://soapinterop.org/", "m");

        SOAPHeader header = omfactory.createSOAPHeader(reqEnv);
        OMNamespace hns = reqEnv.declareNamespace("http://soapinterop.org/echoheader/", "hns"); //xmlns:m0="http://soapinterop.org/echoheader/
        SOAPHeaderBlock block1 = header.addHeaderBlock("echoMeStringRequest", hns);
        block1.addAttribute("xsi:type", "xsd:string", null);
        block1.addChild(omfactory.createOMText("string"));
        // header.addChild(headerChild);
        header.addChild(block1);

        SOAPHeaderBlock block2 = header.addHeaderBlock("echoMeStructRequest", hns);
        block2.addAttribute("xsi:type", "s:SOAPStruct", null);

        OMElement h2Val1 = omfactory.createOMElement("varString", null);
        h2Val1.addAttribute("xsi:type", "xsd:string", null);
        h2Val1.addChild(omfactory.createOMText("string"));

        OMElement h2Val2 = omfactory.createOMElement("varInt", null);
        h2Val2.addAttribute("xsi:type", "xsd:int", null);
        h2Val2.addChild(omfactory.createOMText("852"));

        OMElement h2Val3 = omfactory.createOMElement("varFloat", null);
        h2Val3.addAttribute("xsi:type", "xsd:float", null);
        h2Val3.addChild(omfactory.createOMText("456.321"));

        block2.addChild(h2Val1);
        block2.addChild(h2Val2);
        block2.addChild(h2Val3);

        OMElement operation = omfactory.createOMElement("echoBoolean", "http://soapinterop.org/", null);
        SOAPBody body = omfactory.createSOAPBody(reqEnv);
        body.addChild(operation);
        operation.addAttribute("soapenv:encodingStyle", "http://schemas.xmlsoap.org/soap/encoding/", null);

        OMElement part = omfactory.createOMElement("inputBoolean", "", null);
        part.addAttribute("xsi:type", "xsd:boolean", null);
        part.addChild(omfactory.createOMText("1"));

        operation.addChild(part);
        //reqEnv.getBody().addChild(method);    inputBoolean" type="xsd:boolean"/>
        return reqEnv;

    }
,
>
, <(startLine=112 endLine=121 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00168/dev/scratch/prototype2/src/samples/userguide/sample1/src/samples/userguide/sample1/client/InteropTest_Stub.java)
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoStringReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new String(((OMText)val).getValue());
				
			}
		}
,
(startLine=139 endLine=148 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00168/dev/scratch/prototype2/src/samples/userguide/sample1/src/samples/userguide/sample1/client/InteropTest_Stub.java)
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoIntReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new Integer(((OMText)val).getValue());
				
			}
		}
,
(startLine=121 endLine=130 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00168/dev/scratch/prototype2/src/samples/userguide/sample2/src/samples/userguide/sample2/client/InteropTest_Stub.java)
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoStringReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new String(((OMText)val).getValue());
				
			}
		}
,
(startLine=152 endLine=161 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00168/dev/scratch/prototype2/src/samples/userguide/sample2/src/samples/userguide/sample2/client/InteropTest_Stub.java)
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoIntReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new Integer(((OMText)val).getValue());
				
			}
		}
,
(startLine=125 endLine=134 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00168/dev/scratch/prototype2/src/samples/userguide/sample3/src/samples/userguide/sample3/client/InteropTest_Stub.java)
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoStringReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new String(((OMText)val).getValue());
				
			}
		}
,
(startLine=152 endLine=161 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00168/dev/scratch/prototype2/src/samples/userguide/sample3/src/samples/userguide/sample3/client/InteropTest_Stub.java)
		while(textChild.hasNext()){
			OMNode  child = (OMNode) textChild.next();
			if(child instanceof OMElement && "echoIntReturn".equalsIgnoreCase(((OMElement)child).getLocalName())){
				
				OMNode val =((OMElement)child).getFirstChild();
				if(val instanceof OMText)
					return new Integer(((OMText)val).getValue());
				
			}
		}
,
>
, <(startLine=37 endLine=48 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00752/modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbershandler/AddNumbersLogicalHandler.java)
        if (!outbound) {  // inbound request if we're on the server
            SOAPMessage msg = ((SoapMessageContext)messagecontext).getMessage();
            SOAPPart part = msg.getSOAPPart();
            // hack-ish change, but it's for testing, so who cares.
            String txt = part.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getTextContent();
            if (txt.equals("99")) {
                throw new ProtocolException("I don't like the value 99");
            }
            txt = String.valueOf(Integer.valueOf(txt) - 1);
            part.getFirstChild().getFirstChild().getFirstChild().getFirstChild().setTextContent(txt);
            return true;
        } else { // outbound response if we're on the server
,
(startLine=54 endLine=65 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00752/modules/jaxws/test/org/apache/axis2/jaxws/sample/addnumbers/AddNumbersLogicalHandler.java)
        if (!outbound) {  // inbound request if we're on the server
            SOAPMessage msg = ((SoapMessageContext)messagecontext).getMessage();
            SOAPPart part = msg.getSOAPPart();
            // hack-ish change, but it's for testing, so who cares.
            String txt = part.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getTextContent();
            if (txt.equals("99")) {
                throw new ProtocolException("I don't like the value 99");
            }
            txt = String.valueOf(Integer.valueOf(txt) - 1);
            part.getFirstChild().getFirstChild().getFirstChild().getFirstChild().setTextContent(txt);
            return true;
        } else { // outbound response if we're on the server
,
>
, <(startLine=2020 endLine=2053 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01296/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
    public String getBindingInputNamespace() {
        String tns = null;
        Binding binding =
                this.getEndpointInterfaceDescriptionImpl()
                    .getEndpointDescriptionImpl()
                    .getWSDLBinding();
        if (binding != null) {
            if (log.isDebugEnabled()) {
                log.debug("Found WSDL binding");
            }
            // this call does not support overloaded WSDL operations as it
            // does not specify the name of the input and output messages
            BindingOperation bindingOp =
                    binding.getBindingOperation(getOperationName(), null, null);
            if (bindingOp != null && bindingOp.getBindingInput() != null) {
                if (log.isDebugEnabled()) {
                    log.debug("Found WSDL binding operation and input");
                }
                tns = getBindingNamespace(bindingOp.getBindingInput());
                if (tns != null && log.isDebugEnabled()) {
                    log.debug("For operation: " + bindingOp.getName()
                            + " returning the following namespace for input message"
                            + " from WSDL: " + tns);
                }
            }
        }
        if (tns == null) {
            tns = getEndpointInterfaceDescription().getTargetNamespace();
            if (log.isDebugEnabled()) {
                log.debug("For binding input returning @WebService.targetNamespace: " + tns);
            }
        }
        return tns;
    }
,
(startLine=2060 endLine=2093 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01296/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
    public String getBindingOutputNamespace() {
        String tns = null;
        Binding binding =
                this.getEndpointInterfaceDescriptionImpl()
                    .getEndpointDescriptionImpl()
                    .getWSDLBinding();
        if (binding != null) {
            if (log.isDebugEnabled()) {
                log.debug("Found WSDL binding");
            }
            // this call does not support overloaded WSDL operations as it
            // does not specify the name of the input and output messages
            BindingOperation bindingOp =
                    binding.getBindingOperation(getOperationName(), null, null);
            if (bindingOp != null && bindingOp.getBindingOutput() != null) {
                if (log.isDebugEnabled()) {
                    log.debug("Found WSDL binding operation and output");
                }
                tns = getBindingNamespace(bindingOp.getBindingOutput());
                if (tns != null && log.isDebugEnabled()) {
                    log.debug("For operation: " + bindingOp.getName()
                            + " returning the following namespace for output message"
                            + " from WSDL: " + tns);
                }
            }
        }
        if (tns == null) {
            tns = getEndpointInterfaceDescription().getTargetNamespace();
            if (log.isDebugEnabled()) {
                log.debug("For binding output returning @WebService.targetNamespace: " + tns);
            }
        }
        return tns;
    }
,
>
, <(startLine=1753 endLine=1797 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01122/modules/corba/src/org/apache/axis2/corba/idl/parser/IDLLexer.java)
		{
		_loop394:
		do {
			switch ( LA(1)) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
			case 'u':  case 'v':  case 'w':  case 'x':
			case 'y':  case 'z':
			{
				matchRange('a','z');
				break;
			}
			case 'A':  case 'B':  case 'C':  case 'D':
			case 'E':  case 'F':  case 'G':  case 'H':
			case 'I':  case 'J':  case 'K':  case 'L':
			case 'M':  case 'N':  case 'O':  case 'P':
			case 'Q':  case 'R':  case 'S':  case 'T':
			case 'U':  case 'V':  case 'W':  case 'X':
			case 'Y':  case 'Z':
			{
				matchRange('A','Z');
				break;
			}
			case '_':
			{
				match('_');
				break;
			}
			case '0':  case '1':  case '2':  case '3':
			case '4':  case '5':  case '6':  case '7':
			case '8':  case '9':
			{
				matchRange('0','9');
				break;
			}
			default:
			{
				break _loop394;
			}
			}
		} while (true);
		}
,
(startLine=1842 endLine=1886 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01122/modules/corba/src/org/apache/axis2/corba/idl/parser/IDLLexer.java)
		{
		_loop398:
		do {
			switch ( LA(1)) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
			case 'u':  case 'v':  case 'w':  case 'x':
			case 'y':  case 'z':
			{
				matchRange('a','z');
				break;
			}
			case 'A':  case 'B':  case 'C':  case 'D':
			case 'E':  case 'F':  case 'G':  case 'H':
			case 'I':  case 'J':  case 'K':  case 'L':
			case 'M':  case 'N':  case 'O':  case 'P':
			case 'Q':  case 'R':  case 'S':  case 'T':
			case 'U':  case 'V':  case 'W':  case 'X':
			case 'Y':  case 'Z':
			{
				matchRange('A','Z');
				break;
			}
			case '_':
			{
				match('_');
				break;
			}
			case '0':  case '1':  case '2':  case '3':
			case '4':  case '5':  case '6':  case '7':
			case '8':  case '9':
			{
				matchRange('0','9');
				break;
			}
			default:
			{
				break _loop398;
			}
			}
		} while (true);
		}
,
>
]