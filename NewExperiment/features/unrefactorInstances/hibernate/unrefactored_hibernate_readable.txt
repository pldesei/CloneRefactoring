[<(startLine=66 endLine=77 srcPath=/root/NewExperiment/hibernateFilter/00576/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/naming/quotation/QuotedFieldsEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof QuotedFieldsEntity)) return false;

        QuotedFieldsEntity that = (QuotedFieldsEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;
        if (data1 != null ? !data1.equals(that.data1) : that.data1 != null) return false;
        if (data2 != null ? !data2.equals(that.data2) : that.data2 != null) return false;

        return true;
    }
,
(startLine=87 endLine=98 srcPath=/root/NewExperiment/hibernateFilter/00576/hibernate-envers/src/test/java/org/hibernate/envers/test/entities/UnversionedEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof UnversionedEntity)) return false;

        UnversionedEntity that = (UnversionedEntity) o;

        if (data1 != null ? !data1.equals(that.data1) : that.data1 != null) return false;
        if (data2 != null ? !data2.equals(that.data2) : that.data2 != null) return false;
        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=91 endLine=102 srcPath=/root/NewExperiment/hibernateFilter/00576/hibernate-envers/src/test/java/org/hibernate/envers/test/performance/complex/ChildEntity1.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChildEntity1)) return false;

        ChildEntity1 that = (ChildEntity1) o;

        if (data1 != null ? !data1.equals(that.data1) : that.data1 != null) return false;
        if (data2 != null ? !data2.equals(that.data2) : that.data2 != null) return false;
        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
>
, <(startLine=214 endLine=240 srcPath=/root/NewExperiment/hibernateFilter/00433/hibernate-core/src/test/java/org/hibernate/test/event/collection/AbstractCollectionEventTest.java)
	public void testUpdateParentNullToOneChildDiffCollection() {
		CollectionListeners listeners = new CollectionListeners( getSessions() );
		ParentWithCollection parent = createParentWithNullChildren( "parent" );
		listeners.clear();
		assertNull( parent.getChildren() );
		Session s = openSession();
		Transaction tx = s.beginTransaction();
		parent = ( ParentWithCollection ) s.get( parent.getClass(), parent.getId() );
		Collection collectionOrig = parent.getChildren();
		parent.newChildren( createCollection() );
		Child newChild = parent.addChild( "new" );
		tx.commit();
		s.close();
		int index = 0;
		if ( ( ( PersistentCollection ) collectionOrig ).wasInitialized() ) {
			checkResult( listeners, listeners.getInitializeCollectionListener(), parent, collectionOrig, index++ );
		}
		checkResult( listeners, listeners.getPreCollectionRemoveListener(), parent, collectionOrig, index++ );
		checkResult( listeners, listeners.getPostCollectionRemoveListener(), parent, collectionOrig, index++ );
		if ( newChild instanceof ChildWithBidirectionalManyToMany ) {
			checkResult( listeners, listeners.getPreCollectionRecreateListener(), ( ChildWithBidirectionalManyToMany ) newChild, index++ );
			checkResult( listeners, listeners.getPostCollectionRecreateListener(), ( ChildWithBidirectionalManyToMany ) newChild, index++ );
		}
		checkResult( listeners, listeners.getPreCollectionRecreateListener(), parent, index++ );
		checkResult( listeners, listeners.getPostCollectionRecreateListener(), parent, index++ );
		checkNumberOfResults( listeners, index );
	}
,
(startLine=242 endLine=268 srcPath=/root/NewExperiment/hibernateFilter/00433/hibernate-core/src/test/java/org/hibernate/test/event/collection/AbstractCollectionEventTest.java)
	public void testUpdateParentNoneToOneChildDiffCollection() {
		CollectionListeners listeners = new CollectionListeners( getSessions() );
		ParentWithCollection parent = createParentWithNoChildren( "parent" );
		listeners.clear();
		assertEquals( 0, parent.getChildren().size() );
		Session s = openSession();
		Transaction tx = s.beginTransaction();
		parent = ( ParentWithCollection ) s.get( parent.getClass(), parent.getId() );
		Collection oldCollection = parent.getChildren();
		parent.newChildren( createCollection() );
		Child newChild = parent.addChild( "new" );
		tx.commit();
		s.close();
		int index = 0;
		if ( ( ( PersistentCollection ) oldCollection ).wasInitialized() ) {
			checkResult( listeners, listeners.getInitializeCollectionListener(), parent, oldCollection, index++ );
		}
		checkResult( listeners, listeners.getPreCollectionRemoveListener(), parent, oldCollection, index++ );
		checkResult( listeners, listeners.getPostCollectionRemoveListener(), parent, oldCollection, index++ );
		if ( newChild instanceof ChildWithBidirectionalManyToMany ) {
			checkResult( listeners, listeners.getPreCollectionRecreateListener(), ( ChildWithBidirectionalManyToMany ) newChild, index++ );
			checkResult( listeners, listeners.getPostCollectionRecreateListener(), ( ChildWithBidirectionalManyToMany ) newChild, index++ );
		}
		checkResult( listeners, listeners.getPreCollectionRecreateListener(), parent, index++ );
		checkResult( listeners, listeners.getPostCollectionRecreateListener(), parent, index++ );
		checkNumberOfResults( listeners, index );
	}
,
>
, <(startLine=86 endLine=114 srcPath=/root/NewExperiment/hibernateFilter/00271/entitymanager/src/main/java/org/hibernate/ejb/packaging/FileZippedJarVisitor.java)
				if ( name.equals( entry ) ) {
					//exact match, might be a nested jar entry (ie from jar:file:..../foo.ear!/bar.jar)
					/*
					 * This algorithm assumes that the zipped file is only the URL root (including entry), not just any random entry
					 */
					InputStream is = null;
					try {
						is = new BufferedInputStream( jarFile.getInputStream( zipEntry ) );
						JarInputStream jis = new JarInputStream( is );
						ZipEntry subZipEntry = jis.getNextEntry();
						while (subZipEntry != null) {
							if ( ! subZipEntry.isDirectory() ) {
								//FIXME copy sucks
								byte[] entryBytes = JarVisitorFactory.getBytesFromInputStream( jis );
								String subname = subZipEntry.getName();
								if ( subname.startsWith( "/" ) ) subname = subname.substring( 1 );
								addElement(
										subname,
										new ByteArrayInputStream(entryBytes),
										new ByteArrayInputStream(entryBytes)
								);
							}
							subZipEntry = jis.getNextEntry();
						}
					}
					finally {
						if ( is != null) is.close();
					}
				}
,
(startLine=72 endLine=99 srcPath=/root/NewExperiment/hibernateFilter/00271/entitymanager/src/main/java/org/hibernate/ejb/packaging/InputStreamZippedJarVisitor.java)
				if ( name.equals( entry ) ) {
					//exact match, might be a nested jar entry (ie from jar:file:..../foo.ear!/bar.jar)
					/*
					 * This algorithm assumes that the zipped file is only the URL root (including entry), not just any random entry
					 */
					JarInputStream subJis = null;
					try {
						subJis = new JarInputStream( jis );
						ZipEntry subZipEntry = jis.getNextEntry();
						while (subZipEntry != null) {
							if ( ! subZipEntry.isDirectory() ) {
								//FIXME copy sucks
								byte[] entryBytes = JarVisitorFactory.getBytesFromInputStream( jis );
								String subname = subZipEntry.getName();
								if ( subname.startsWith( "/" ) ) subname = subname.substring( 1 );
								addElement(
										subname,
										new ByteArrayInputStream(entryBytes),
										new ByteArrayInputStream(entryBytes)
								);
							}
							subZipEntry = jis.getNextJarEntry();
						}
					}
					finally {
						if (subJis != null) subJis.close();
					}
				}
,
>
, <(startLine=72 endLine=88 srcPath=/root/NewExperiment/hibernateFilter/00368/testsuite/src/test/java/org/hibernate/test/event/collection/AbstractCollectionEventTest.java)
	public void testSaveParentEmptyChildren() {
		CollectionListeners listeners = new CollectionListeners( getSessions() );
		ParentWithCollection parent = createParentWithNoChildren( "parent" );
		assertEquals( 0, parent.getChildren().size() );
		int index = 0;
		checkResult( listeners, listeners.getPreCollectionRecreateListener(), parent, index++ );
		checkResult( listeners, listeners.getPostCollectionRecreateListener(), parent, index++ );
		checkNumberOfResults( listeners, index );
		listeners.clear();
		Session s = openSession();
		Transaction tx = s.beginTransaction();
		parent = ( ParentWithCollection ) s.get( parent.getClass(), parent.getId() );
		tx.commit();
		s.close();
		assertNotNull( parent.getChildren() );
		checkNumberOfResults( listeners, 0 );
	}
,
(startLine=459 endLine=474 srcPath=/root/NewExperiment/hibernateFilter/00368/testsuite/src/test/java/org/hibernate/test/event/collection/AbstractCollectionEventTest.java)
	public void testDeleteParentWithNullChildren() {
		CollectionListeners listeners = new CollectionListeners( getSessions() );
		ParentWithCollection parent = createParentWithNullChildren( "parent" );
		listeners.clear();
		Session s = openSession();
		Transaction tx = s.beginTransaction();
		parent = ( ParentWithCollection ) s.get( parent.getClass(), parent.getId() );
		s.delete( parent );
		tx.commit();
		s.close();
		int index = 0;
		checkResult( listeners, listeners.getInitializeCollectionListener(), parent, index++ );
		checkResult( listeners, listeners.getPreCollectionRemoveListener(), parent, index++ );
		checkResult( listeners, listeners.getPostCollectionRemoveListener(), parent, index++ );
		checkNumberOfResults( listeners, index );
	}
,
(startLine=476 endLine=491 srcPath=/root/NewExperiment/hibernateFilter/00368/testsuite/src/test/java/org/hibernate/test/event/collection/AbstractCollectionEventTest.java)
	public void testDeleteParentWithNoChildren() {
		CollectionListeners listeners = new CollectionListeners( getSessions() );
		ParentWithCollection parent = createParentWithNoChildren( "parent" );
		listeners.clear();
		Session s = openSession();
		Transaction tx = s.beginTransaction();
		parent = ( ParentWithCollection ) s.get( parent.getClass(), parent.getId() );
		s.delete( parent );
		tx.commit();
		s.close();
		int index = 0;
		checkResult( listeners, listeners.getInitializeCollectionListener(), parent, index++ );
		checkResult( listeners, listeners.getPreCollectionRemoveListener(), parent, index++ );
		checkResult( listeners, listeners.getPostCollectionRemoveListener(), parent, index++ );
		checkNumberOfResults( listeners, index );
	}
,
(startLine=140 endLine=157 srcPath=/root/NewExperiment/hibernateFilter/00368/testsuite/src/test/java/org/hibernate/test/event/collection/BrokenCollectionEventTest.java)
	public void testSaveParentNullChildrenFailureExpected() {
		CollectionListeners listeners = new CollectionListeners( getSessions() );
		ParentWithCollection parent = createParentWithNullChildren( "parent" );
		assertNull( parent.getChildren() );
		int index = 0;
		// pre- and post- collection recreate events should be created when creating an entity with a "null" collection
		checkResult( listeners, listeners.getPreCollectionRecreateListener(), parent, index++ );
		checkResult( listeners, listeners.getPostCollectionRecreateListener(), parent, index++ );
		checkNumberOfResults( listeners, index );
		listeners.clear();
		Session s = openSession();
		Transaction tx = s.beginTransaction();
		parent = ( ParentWithCollection ) s.get( parent.getClass(), parent.getId() );
		tx.commit();
		s.close();
		assertNotNull( parent.getChildren() );
		checkNumberOfResults( listeners, 0 );
	}
,
>
, <(startLine=86 endLine=100 srcPath=/root/NewExperiment/hibernateFilter/01854/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/modifiedflags/HasChangedAuditedManyToManyTest.java)
	public void testHasChangedPerson1() throws Exception {
		List list = getAuditReader().createQuery().forRevisionsOfEntity( Person.class, "Personaje", false, false )
				.add( AuditEntity.id().eq( id_pers1 ) )
				.add( AuditEntity.property( "cars" ).hasChanged() )
				.getResultList();
		assertEquals( 1, list.size() );
		assertEquals( makeList( 1 ), extractRevisionNumbers( list ) );

		list = getAuditReader().createQuery().forRevisionsOfEntity( Person.class, "Personaje", false, false )
				.add( AuditEntity.id().eq( id_pers1 ) )
				.add( AuditEntity.property( "cars" ).hasNotChanged() )
				.getResultList();
		assertEquals( 1, list.size() );
		assertEquals( makeList( 2 ), extractRevisionNumbers( list ) );
	}
,
(startLine=103 endLine=116 srcPath=/root/NewExperiment/hibernateFilter/01854/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/modifiedflags/HasChangedAuditedManyToManyTest.java)
	public void testHasChangedPerson2() throws Exception {
		List list = getAuditReader().createQuery().forRevisionsOfEntity( Person.class, "Personaje", false, false )
				.add( AuditEntity.id().eq( id_pers2 ) )
				.add( AuditEntity.property( "cars" ).hasChanged() )
				.getResultList();
		assertEquals( 2, list.size() );
		assertEquals( makeList( 1, 2 ), extractRevisionNumbers( list ) );

		list = getAuditReader().createQuery().forRevisionsOfEntity( Person.class, "Personaje", false, false )
				.add( AuditEntity.id().eq( id_pers2 ) )
				.add( AuditEntity.property( "cars" ).hasNotChanged() )
				.getResultList();
		assertEquals( 0, list.size() );
	}
,
(startLine=119 endLine=132 srcPath=/root/NewExperiment/hibernateFilter/01854/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/modifiedflags/HasChangedAuditedManyToManyTest.java)
	public void testHasChangedCar1() throws Exception {
		List list = getAuditReader().createQuery().forRevisionsOfEntity( Car.class, false, false )
				.add( AuditEntity.id().eq( id_car1 ) )
				.add( AuditEntity.property( "owners" ).hasChanged() )
				.getResultList();
		assertEquals( 1, list.size() );
		assertEquals( makeList( 1 ), extractRevisionNumbers( list ) );

		list = getAuditReader().createQuery().forRevisionsOfEntity( Car.class, false, false )
				.add( AuditEntity.id().eq( id_car1 ) )
				.add( AuditEntity.property( "owners" ).hasNotChanged() )
				.getResultList();
		assertEquals( 0, list.size() );
	}
,
>
, <(startLine=36 endLine=80 srcPath=/root/NewExperiment/hibernateFilter/01497/hibernate-core/src/test/java/org/hibernate/test/propertyref/component/complete/CompleteComponentPropertyRefTest.java)
	public void testComponentPropertyRef() {
		Session s = openSession();
		s.beginTransaction();
		Person p = new Person();
		p.setIdentity( new Identity() );
		Account a = new Account();
		a.setNumber("123-12345-1236");
		a.setOwner(p);
		p.getIdentity().setName("Gavin");
		p.getIdentity().setSsn("123-12-1234");
		s.persist(p);
		s.persist(a);
		s.getTransaction().commit();
		s.close();

		s = openSession();
		s.beginTransaction();
		a = (Account) s.createQuery("from Account a left join fetch a.owner").uniqueResult();
		assertTrue( Hibernate.isInitialized( a.getOwner() ) );
		assertNotNull( a.getOwner() );
		assertEquals( "Gavin", a.getOwner().getIdentity().getName() );
		s.clear();

		a = (Account) s.get(Account.class, "123-12345-1236");
		assertFalse( Hibernate.isInitialized( a.getOwner() ) );
		assertNotNull( a.getOwner() );
		assertEquals( "Gavin", a.getOwner().getIdentity().getName() );
		assertTrue( Hibernate.isInitialized( a.getOwner() ) );

		s.clear();

		sessionFactory().getCache().evictEntityRegion( Account.class );
		sessionFactory().getCache().evictEntityRegion( Person.class );

		a = (Account) s.get(Account.class, "123-12345-1236");
		assertTrue( Hibernate.isInitialized( a.getOwner() ) );
		assertNotNull( a.getOwner() );
		assertEquals( "Gavin", a.getOwner().getIdentity().getName() );
		assertTrue( Hibernate.isInitialized( a.getOwner() ) );

		s.delete( a );
		s.delete( a.getOwner() );
		s.getTransaction().commit();
		s.close();
	}
,
(startLine=35 endLine=79 srcPath=/root/NewExperiment/hibernateFilter/01497/hibernate-core/src/test/java/org/hibernate/test/propertyref/component/partial/PartialComponentPropertyRefTest.java)
	public void testComponentPropertyRef() {
		Session s = openSession();
		s.beginTransaction();
		Person p = new Person();
		p.setIdentity( new Identity() );
		Account a = new Account();
		a.setNumber("123-12345-1236");
		a.setOwner(p);
		p.getIdentity().setName("Gavin");
		p.getIdentity().setSsn("123-12-1234");
		s.persist(p);
		s.persist(a);
		s.getTransaction().commit();
		s.close();

		s = openSession();
		s.beginTransaction();
		a = (Account) s.createQuery("from Account a left join fetch a.owner").uniqueResult();
		assertTrue( Hibernate.isInitialized( a.getOwner() ) );
		assertNotNull( a.getOwner() );
		assertEquals( "Gavin", a.getOwner().getIdentity().getName() );
		s.clear();
		
		a = (Account) s.get(Account.class, "123-12345-1236");
		assertFalse( Hibernate.isInitialized( a.getOwner() ) );
		assertNotNull( a.getOwner() );
		assertEquals( "Gavin", a.getOwner().getIdentity().getName() );
		assertTrue( Hibernate.isInitialized( a.getOwner() ) );
		
		s.clear();

		sessionFactory().getCache().evictEntityRegion( Account.class );
		sessionFactory().getCache().evictEntityRegion( Person.class );
		
		a = (Account) s.get(Account.class, "123-12345-1236");
		assertTrue( Hibernate.isInitialized( a.getOwner() ) );
		assertNotNull( a.getOwner() );
		assertEquals( "Gavin", a.getOwner().getIdentity().getName() );
		assertTrue( Hibernate.isInitialized( a.getOwner() ) );
		
		s.delete( a );
		s.delete( a.getOwner() );
		s.getTransaction().commit();
		s.close();
	}
,
>
, <(startLine=125 endLine=139 srcPath=/root/NewExperiment/hibernateFilter/00738/hibernate-entitymanager/src/main/java/org/hibernate/ejb/event/JpaIntegrator.java)
		for ( Map.Entry<?,?> entry : configuration.getProperties().entrySet() ) {
			if ( ! String.class.isInstance( entry.getKey() ) ) {
				continue;
			}
			final String propertyName = (String) entry.getKey();
			if ( ! propertyName.startsWith( AvailableSettings.EVENT_LISTENER_PREFIX ) ) {
				continue;
			}
			final String eventTypeName = propertyName.substring( AvailableSettings.EVENT_LISTENER_PREFIX.length() + 1 );
			final EventType eventType = EventType.resolveEventTypeByName( eventTypeName );
			final EventListenerGroup eventListenerGroup = eventListenerRegistry.getEventListenerGroup( eventType );
			for ( String listenerImpl : ( (String) entry.getValue() ).split( " ," ) ) {
				eventListenerGroup.appendListener( instantiate( listenerImpl, serviceRegistry ) );
			}
		}
,
(startLine=210 endLine=224 srcPath=/root/NewExperiment/hibernateFilter/00738/hibernate-entitymanager/src/main/java/org/hibernate/ejb/event/JpaIntegrator.java)
        for ( Map.Entry<?,?> entry : sessionFactory.getProperties().entrySet() ) {
            if ( ! String.class.isInstance( entry.getKey() ) ) {
                continue;
            }
            final String propertyName = (String) entry.getKey();
            if ( ! propertyName.startsWith( AvailableSettings.EVENT_LISTENER_PREFIX ) ) {
                continue;
            }
            final String eventTypeName = propertyName.substring( AvailableSettings.EVENT_LISTENER_PREFIX.length() + 1 );
            final EventType eventType = EventType.resolveEventTypeByName( eventTypeName );
            final EventListenerGroup eventListenerGroup = eventListenerRegistry.getEventListenerGroup( eventType );
            for ( String listenerImpl : ( (String) entry.getValue() ).split( " ," ) ) {
                eventListenerGroup.appendListener( instantiate( listenerImpl, serviceRegistry ) );
            }
        }
,
>
, <(startLine=158 endLine=173 srcPath=/root/NewExperiment/hibernateFilter/00658/hibernate-core/src/test/java/org/hibernate/metamodel/source/annotations/util/EmbeddableHierarchyTest.java)
	public void testDefaultFieldAccess() {
		@Entity
		class A {
			@Id
			String id;
		}

		@Entity
		class B extends A {
		}

		Set<ConfiguredClassHierarchy<EntityClass>> hierarchies = createEntityHierarchies( B.class, A.class );
		assertTrue( hierarchies.size() == 1 );
		ConfiguredClassHierarchy hierarchy = hierarchies.iterator().next();
		assertEquals( "Wrong default access type", AccessType.FIELD, hierarchy.getDefaultAccessType() );
	}
,
(startLine=202 endLine=217 srcPath=/root/NewExperiment/hibernateFilter/00658/hibernate-core/src/test/java/org/hibernate/metamodel/source/annotations/util/EmbeddableHierarchyTest.java)
	public void testDefaultInheritanceStrategy() {
		@Entity
		class A {
			@Id
			String id;
		}

		@Entity
		class B extends A {
		}

		Set<ConfiguredClassHierarchy<EntityClass>> hierarchies = createEntityHierarchies( B.class, A.class );
		assertTrue( hierarchies.size() == 1 );
		ConfiguredClassHierarchy hierarchy = hierarchies.iterator().next();
		assertEquals( "Wrong inheritance type", InheritanceType.SINGLE_TABLE, hierarchy.getInheritanceType() );
	}
,
(startLine=158 endLine=173 srcPath=/root/NewExperiment/hibernateFilter/00658/hibernate-core/src/test/java/org/hibernate/metamodel/source/annotations/util/EntityHierarchyTest.java)
	public void testDefaultFieldAccess() {
		@Entity
		class A {
			@Id
			String id;
		}

		@Entity
		class B extends A {
		}

		Set<ConfiguredClassHierarchy<EntityClass>> hierarchies = createEntityHierarchies( B.class, A.class );
		assertTrue( hierarchies.size() == 1 );
		ConfiguredClassHierarchy hierarchy = hierarchies.iterator().next();
		assertEquals( "Wrong default access type", AccessType.FIELD, hierarchy.getDefaultAccessType() );
	}
,
(startLine=202 endLine=217 srcPath=/root/NewExperiment/hibernateFilter/00658/hibernate-core/src/test/java/org/hibernate/metamodel/source/annotations/util/EntityHierarchyTest.java)
	public void testDefaultInheritanceStrategy() {
		@Entity
		class A {
			@Id
			String id;
		}

		@Entity
		class B extends A {
		}

		Set<ConfiguredClassHierarchy<EntityClass>> hierarchies = createEntityHierarchies( B.class, A.class );
		assertTrue( hierarchies.size() == 1 );
		ConfiguredClassHierarchy hierarchy = hierarchies.iterator().next();
		assertEquals( "Wrong inheritance type", InheritanceType.SINGLE_TABLE, hierarchy.getInheritanceType() );
	}
,
>
, <(startLine=114 endLine=131 srcPath=/root/NewExperiment/hibernateFilter/00403/cache-jbosscache/src/test/java/org/hibernate/test/cache/jbc/access/PutFromLoadValidatorUnitTestCase.java)
	private void registeredPutTest(boolean transactional) throws Exception {
		PutFromLoadValidator testee = new PutFromLoadValidator(
				transactional ? tm : null);
		if (transactional) {
			tm.begin();
		}
		testee.registerPendingPut(KEY1);
		
		boolean lockable = testee.acquirePutFromLoadLock(KEY1);
		try {
			assertTrue(lockable);
		}
		finally {
			if (lockable) {
				testee.releasePutFromLoadLock(KEY1);
			}
		}
	}
,
(startLine=112 endLine=129 srcPath=/root/NewExperiment/hibernateFilter/00403/cache-infinispan/src/test/java/org/hibernate/test/cache/infinispan/access/PutFromLoadValidatorUnitTestCase.java)
   private void registeredPutTest(boolean transactional) throws Exception {
      PutFromLoadValidator testee = new PutFromLoadValidator(
            transactional ? tm : null);
      if (transactional) {
         tm.begin();
      }
      testee.registerPendingPut(KEY1);

      boolean lockable = testee.acquirePutFromLoadLock(KEY1);
      try {
         assertTrue(lockable);
      }
      finally {
         if (lockable) {
            testee.releasePutFromLoadLock(KEY1);
         }
      }
   }
,
>
, <(startLine=1090 endLine=1144 srcPath=/root/NewExperiment/hibernateFilter/00742/hibernate-core/src/matrix/java/org/hibernate/test/immutable/entitywithmutablecollection/AbstractEntityWithOneToManyTest.java)
	public void testOneToManyCollectionOptimisticLockingWithMerge() {
		clearCounts();

		Contract cOrig = new Contract( null, "gail", "phone");
		Party partyOrig = new Party( "party" );
		cOrig.addParty( partyOrig );
		Session s = openSession();
		Transaction t = s.beginTransaction();
		s.persist(cOrig);
		t.commit();
		s.close();

		assertInsertCount( 2 );
		assertUpdateCount( 0 );
		clearCounts();

		s = openSession();
		t = s.beginTransaction();
		Contract c = ( Contract ) s.get( Contract.class, cOrig.getId() );
		Party newParty = new Party( "new party" );
		c.addParty( newParty );
		t.commit();
		s.close();

		assertInsertCount( 1 );
		assertUpdateCount( isContractVersioned ? 1 : 0 );
		clearCounts();

		s = openSession();
		t = s.beginTransaction();
		cOrig.removeParty( partyOrig );
		try {
			s.merge( cOrig );
			assertFalse( isContractVersioned );
		}
		catch (StaleObjectStateException ex) {
			assertTrue( isContractVersioned);
		}
		finally {
			t.rollback();
		}
		s.close();
		
		s = openSession();
		t = s.beginTransaction();
		c = (Contract) s.createCriteria(Contract.class).uniqueResult();
		s.delete(c);
		assertEquals( Long.valueOf( 0 ), s.createCriteria(Contract.class).setProjection( Projections.rowCount() ).uniqueResult() );
		assertEquals( Long.valueOf( 0 ), s.createCriteria(Party.class).setProjection( Projections.rowCount() ).uniqueResult() );
		t.commit();
		s.close();

		assertUpdateCount( 0 );
		assertDeleteCount( 3 );
	}
,
(startLine=1148 endLine=1202 srcPath=/root/NewExperiment/hibernateFilter/00742/hibernate-core/src/matrix/java/org/hibernate/test/immutable/entitywithmutablecollection/AbstractEntityWithOneToManyTest.java)
	public void testOneToManyCollectionOptimisticLockingWithUpdate() {
		clearCounts();

		Contract cOrig = new Contract( null, "gail", "phone");
		Party partyOrig = new Party( "party" );
		cOrig.addParty( partyOrig );
		Session s = openSession();
		Transaction t = s.beginTransaction();
		s.persist(cOrig);
		t.commit();
		s.close();

		assertInsertCount( 2 );
		assertUpdateCount( 0 );
		clearCounts();

		s = openSession();
		t = s.beginTransaction();
		Contract c = ( Contract ) s.get( Contract.class, cOrig.getId() );
		Party newParty = new Party( "new party" );
		c.addParty( newParty );
		t.commit();
		s.close();

		assertInsertCount( 1 );
		assertUpdateCount( isContractVersioned ? 1 : 0 );
		clearCounts();

		s = openSession();
		t = s.beginTransaction();
		cOrig.removeParty( partyOrig );
		s.update( cOrig );
		try {
			t.commit();
			assertFalse( isContractVersioned );
		}
		catch (StaleStateException ex) {
			t.rollback();
			assertTrue( isContractVersioned );
			if ( ! sessionFactory().getSettings().isJdbcBatchVersionedData() ) {
				assertTrue( StaleObjectStateException.class.isInstance( ex ) );
			}
		}
		s.close();

		s = openSession();
		t = s.beginTransaction();
		c = (Contract) s.createCriteria(Contract.class).uniqueResult();
		s.createQuery( "delete from Party" ).executeUpdate();
		s.delete( c );
		assertEquals( Long.valueOf( 0 ), s.createCriteria(Contract.class).setProjection( Projections.rowCount() ).uniqueResult() );
		assertEquals( Long.valueOf( 0 ), s.createCriteria(Party.class).setProjection( Projections.rowCount() ).uniqueResult() );
		t.commit();
		s.close();
	}
,
(startLine=844 endLine=898 srcPath=/root/NewExperiment/hibernateFilter/00742/hibernate-core/src/matrix/java/org/hibernate/test/immutable/entitywithmutablecollection/AbstractEntityWithManyToManyTest.java)
	public void testManyToManyCollectionOptimisticLockingWithMerge() {
		clearCounts();

		Plan pOrig = new Plan( "plan" );
		Contract cOrig = new Contract( null, "gail", "phone");
		pOrig.addContract( cOrig );
		Session s = openSession();
		Transaction t = s.beginTransaction();
		s.persist( pOrig );
		t.commit();
		s.close();

		assertInsertCount( 2 );
		assertUpdateCount( 0 );
		clearCounts();

		s = openSession();
		t = s.beginTransaction();
		Plan p = ( Plan ) s.get( Plan.class, pOrig.getId() );
		Contract newC = new Contract( null, "sherman", "note" );
		p.addContract( newC );
		t.commit();
		s.close();

		assertInsertCount( 1 );
		assertUpdateCount( isContractVersioned ? 1 : 0 );
		clearCounts();

		s = openSession();
		t = s.beginTransaction();
		pOrig.removeContract( cOrig );
		try {
			s.merge( pOrig );
			assertFalse( isContractVersioned );
		}
		catch (StaleObjectStateException ex) {
			assertTrue( isContractVersioned);
		}
		finally {
			t.rollback();
		}
		s.close();

		s = openSession();
		t = s.beginTransaction();
		p = ( Plan ) s.createCriteria( Plan.class ).uniqueResult();
		s.delete( p );
		assertEquals( new Long( 0 ), s.createCriteria(Plan.class).setProjection( Projections.rowCount() ).uniqueResult() );
		assertEquals( new Long( 0 ), s.createCriteria(Contract.class).setProjection( Projections.rowCount() ).uniqueResult() );
		t.commit();
		s.close();

		assertUpdateCount( 0 );
		assertDeleteCount( 3 );
	}
,
(startLine=901 endLine=955 srcPath=/root/NewExperiment/hibernateFilter/00742/hibernate-core/src/matrix/java/org/hibernate/test/immutable/entitywithmutablecollection/AbstractEntityWithManyToManyTest.java)
	public void testManyToManyCollectionOptimisticLockingWithUpdate() {
		clearCounts();

		Plan pOrig = new Plan( "plan" );
		Contract cOrig = new Contract( null, "gail", "phone");
		pOrig.addContract( cOrig );
		Session s = openSession();
		Transaction t = s.beginTransaction();
		s.persist(pOrig);
		t.commit();
		s.close();

		assertInsertCount( 2 );
		assertUpdateCount( 0 );
		clearCounts();

		s = openSession();
		t = s.beginTransaction();
		Plan p = ( Plan ) s.get( Plan.class, pOrig.getId() );
		Contract newC = new Contract( null, "yogi", "pawprint" );
		p.addContract( newC );
		t.commit();
		s.close();

		assertInsertCount( 1 );
		assertUpdateCount( isContractVersioned ? 1 : 0 );
		clearCounts();

		s = openSession();
		t = s.beginTransaction();
		pOrig.removeContract( cOrig );
		s.update( pOrig );
		try {
			t.commit();
			assertFalse( isContractVersioned );
		}
		catch (StaleStateException ex) {
			t.rollback();
			assertTrue( isContractVersioned );
			if ( ! sessionFactory().getSettings().isJdbcBatchVersionedData() ) {
				assertTrue( StaleObjectStateException.class.isInstance( ex ) );
			}
		}
		s.close();

		s = openSession();
		t = s.beginTransaction();
		p = ( Plan ) s.createCriteria( Plan.class ).uniqueResult();
		s.delete( p );
		s.createQuery( "delete from Contract" ).executeUpdate();
		assertEquals( new Long( 0 ), s.createCriteria(Plan.class).setProjection( Projections.rowCount() ).uniqueResult() );
		assertEquals( new Long( 0 ), s.createCriteria(Contract.class).setProjection( Projections.rowCount() ).uniqueResult() );
		t.commit();
		s.close();
	}
,
>
, <(startLine=157 endLine=200 srcPath=/root/NewExperiment/hibernateFilter/01525/hibernate-entitymanager/src/test/java/org/hibernate/jpa/test/transaction/TransactionJoiningTest.java)
	public void testMultiThreadTransactionTimeout() throws Exception {
		TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();

		EntityManager em = entityManagerFactory().createEntityManager();
		final SessionImpl sImpl = em.unwrap( SessionImpl.class );

		final CountDownLatch latch = new CountDownLatch( 1 );

		Thread thread = new Thread() {
			public void run() {
				((JtaTransactionCoordinatorImpl)sImpl.getTransactionCoordinator()).getSynchronizationCallbackCoordinator()
						.afterCompletion( Status.STATUS_ROLLEDBACK );
				latch.countDown();
			}
		};
		thread.start();

		latch.await();

		boolean caught = false;
		try {
			em.persist( new Book( "The Book of Foo", 1 ) );
		}
		catch ( PersistenceException e ) {
			caught = e.getCause().getClass().equals( HibernateException.class );
		}
		assertTrue( caught );

		// Ensure that the connection was closed by the background thread.
		caught = false;
		try {
			em.createQuery( "from Book" ).getResultList();
		}
		catch ( PersistenceException e ) {
			// HHH-9312
			caught = true;
		}catch (Exception e){
			caught = true;
		}
		assertTrue( caught );

		TestingJtaPlatformImpl.INSTANCE.getTransactionManager().rollback();
		em.close();
	}
,
(startLine=157 endLine=200 srcPath=/root/NewExperiment/hibernateFilter/01525/hibernate-core/src/test/java/org/hibernate/jpa/test/transaction/TransactionJoiningTest.java)
	public void testMultiThreadTransactionTimeout() throws Exception {
		TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();

		EntityManager em = entityManagerFactory().createEntityManager();
		final SessionImpl sImpl = em.unwrap( SessionImpl.class );

		final CountDownLatch latch = new CountDownLatch( 1 );

		Thread thread = new Thread() {
			public void run() {
				((JtaTransactionCoordinatorImpl)sImpl.getTransactionCoordinator()).getSynchronizationCallbackCoordinator()
						.afterCompletion( Status.STATUS_ROLLEDBACK );
				latch.countDown();
			}
		};
		thread.start();

		latch.await();

		boolean caught = false;
		try {
			em.persist( new Book( "The Book of Foo", 1 ) );
		}
		catch ( PersistenceException e ) {
			caught = e.getCause().getClass().equals( HibernateException.class );
		}
		assertTrue( caught );

		// Ensure that the connection was closed by the background thread.
		caught = false;
		try {
			em.createQuery( "from Book" ).getResultList();
		}
		catch ( PersistenceException e ) {
			// HHH-9312
			caught = true;
		}catch (Exception e){
			caught = true;
		}
		assertTrue( caught );

		TestingJtaPlatformImpl.INSTANCE.getTransactionManager().rollback();
		em.close();
	}
,
>
, <(startLine=200 endLine=209 srcPath=/root/NewExperiment/hibernateFilter/00444/hibernate-core/src/main/java/org/hibernate/engine/jdbc/spi/SQLExceptionHelper.java)
			while ( sqlException != null ) {
				StringBuffer buf = new StringBuffer( 30 )
						.append( "SQL Error: " )
						.append( sqlException.getErrorCode() )
						.append( ", SQLState: " )
						.append( sqlException.getSQLState() );
				log.warn( buf.toString() );
				log.error( sqlException.getMessage() );
				sqlException = sqlException.getNextException();
			}
,
(startLine=227 endLine=236 srcPath=/root/NewExperiment/hibernateFilter/00444/hibernate-core/src/main/java/org/hibernate/util/JDBCExceptionReporter.java)
			while (ex != null) {
				StringBuffer buf = new StringBuffer(30)
						.append( "SQL Error: " )
				        .append( ex.getErrorCode() )
				        .append( ", SQLState: " )
				        .append( ex.getSQLState() );
				log.warn( buf.toString() );
				log.error( ex.getMessage() );
				ex = ex.getNextException();
			}
,
>
, <(startLine=143 endLine=158 srcPath=/root/NewExperiment/hibernateFilter/00449/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/manytomany/BasicList.java)
    public void testHistoryOfEdId1() {
        ListOwningEntity ing1 = getEntityManager().find(ListOwningEntity.class, ing1_id);
        ListOwningEntity ing2 = getEntityManager().find(ListOwningEntity.class, ing2_id);

        ListOwnedEntity rev1 = getAuditReader().find(ListOwnedEntity.class, ed1_id, 1);
        ListOwnedEntity rev2 = getAuditReader().find(ListOwnedEntity.class, ed1_id, 2);
        ListOwnedEntity rev3 = getAuditReader().find(ListOwnedEntity.class, ed1_id, 3);
        ListOwnedEntity rev4 = getAuditReader().find(ListOwnedEntity.class, ed1_id, 4);
        ListOwnedEntity rev5 = getAuditReader().find(ListOwnedEntity.class, ed1_id, 5);

        assert rev1.getReferencing().equals(Collections.EMPTY_LIST);
        assert TestTools.checkList(rev2.getReferencing(), ing1, ing2);
        assert TestTools.checkList(rev3.getReferencing(), ing1, ing2);
        assert TestTools.checkList(rev4.getReferencing(), ing2);
        assert TestTools.checkList(rev5.getReferencing(), ing2);
    }
,
(startLine=161 endLine=176 srcPath=/root/NewExperiment/hibernateFilter/00449/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/manytomany/BasicList.java)
    public void testHistoryOfEdId2() {
        ListOwningEntity ing1 = getEntityManager().find(ListOwningEntity.class, ing1_id);
        ListOwningEntity ing2 = getEntityManager().find(ListOwningEntity.class, ing2_id);

        ListOwnedEntity rev1 = getAuditReader().find(ListOwnedEntity.class, ed2_id, 1);
        ListOwnedEntity rev2 = getAuditReader().find(ListOwnedEntity.class, ed2_id, 2);
        ListOwnedEntity rev3 = getAuditReader().find(ListOwnedEntity.class, ed2_id, 3);
        ListOwnedEntity rev4 = getAuditReader().find(ListOwnedEntity.class, ed2_id, 4);
        ListOwnedEntity rev5 = getAuditReader().find(ListOwnedEntity.class, ed2_id, 5);

        assert rev1.getReferencing().equals(Collections.EMPTY_LIST);
        assert TestTools.checkList(rev2.getReferencing(), ing2);
        assert TestTools.checkList(rev3.getReferencing(), ing1, ing2);
        assert TestTools.checkList(rev4.getReferencing(), ing1, ing2);
        assert TestTools.checkList(rev5.getReferencing(), ing2);
    }
,
>
, <(startLine=117 endLine=126 srcPath=/root/NewExperiment/hibernateFilter/00356/envers/src/test/java/org/hibernate/envers/test/integration/onetoone/bidirectional/ids/EmbIdBidirectional.java)
    public void testHistoryOfIngId1() {
        BiEmbIdRefEdEntity ed1 = getEntityManager().find(BiEmbIdRefEdEntity.class, ed1_id);
        BiEmbIdRefEdEntity ed2 = getEntityManager().find(BiEmbIdRefEdEntity.class, ed2_id);

        BiEmbIdRefIngEntity rev1 = getAuditReader().find(BiEmbIdRefIngEntity.class, ing1_id, 1);
        BiEmbIdRefIngEntity rev2 = getAuditReader().find(BiEmbIdRefIngEntity.class, ing1_id, 2);

        assert rev1.getReference().equals(ed1);
        assert rev2.getReference().equals(ed2);
    }
,
(startLine=117 endLine=126 srcPath=/root/NewExperiment/hibernateFilter/00356/envers/src/test/java/org/hibernate/envers/test/integration/onetoone/bidirectional/ids/MulIdBidirectional.java)
    public void testHistoryOfIngId1() {
        BiMulIdRefEdEntity ed1 = getEntityManager().find(BiMulIdRefEdEntity.class, ed1_id);
        BiMulIdRefEdEntity ed2 = getEntityManager().find(BiMulIdRefEdEntity.class, ed2_id);

        BiMulIdRefIngEntity rev1 = getAuditReader().find(BiMulIdRefIngEntity.class, ing1_id, 1);
        BiMulIdRefIngEntity rev2 = getAuditReader().find(BiMulIdRefIngEntity.class, ing1_id, 2);

        assert rev1.getReference().equals(ed1);
        assert rev2.getReference().equals(ed2);
    }
,
>
, <(startLine=1973 endLine=1989 srcPath=/root/NewExperiment/hibernateFilter/00312/annotations/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverridenAnnotationReader.java)
		else {
			//ignore java annotation, an element is defined
			AnnotationDescriptor annotation = new AnnotationDescriptor( Table.class );
			copyStringAttribute( annotation, subelement, "name", false );
			copyStringAttribute( annotation, subelement, "catalog", false );
			if ( StringHelper.isNotEmpty( defaults.getCatalog() )
					&& StringHelper.isEmpty( (String) annotation.valueOf( "catalog" ) ) ) {
				annotation.setValue( "catalog", defaults.getCatalog() );
			}
			copyStringAttribute( annotation, subelement, "schema", false );
			if ( StringHelper.isNotEmpty( defaults.getSchema() )
					&& StringHelper.isEmpty( (String) annotation.valueOf( "schema" ) ) ) {
				annotation.setValue( "schema", defaults.getSchema() );
			}
			buildUniqueConstraints( annotation, subelement );
			return AnnotationFactory.create( annotation );
		}
,
(startLine=1997 endLine=2013 srcPath=/root/NewExperiment/hibernateFilter/00312/annotations/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverridenAnnotationReader.java)
		for (Element element : elements) {
			AnnotationDescriptor annotation = new AnnotationDescriptor( SecondaryTable.class );
			copyStringAttribute( annotation, element, "name", false );
			copyStringAttribute( annotation, element, "catalog", false );
			if ( StringHelper.isNotEmpty( defaults.getCatalog() )
					&& StringHelper.isEmpty( (String) annotation.valueOf( "catalog" ) ) ) {
				annotation.setValue( "catalog", defaults.getCatalog() );
			}
			copyStringAttribute( annotation, element, "schema", false );
			if ( StringHelper.isNotEmpty( defaults.getSchema() )
					&& StringHelper.isEmpty( (String) annotation.valueOf( "schema" ) ) ) {
				annotation.setValue( "schema", defaults.getSchema() );
			}
			buildUniqueConstraints( annotation, element );
			annotation.setValue( "pkJoinColumns", buildPrimaryKeyJoinColumns( element ) );
			secondaryTables.add( (SecondaryTable) AnnotationFactory.create( annotation ) );
		}
,
>
, <(startLine=56 endLine=73 srcPath=/root/NewExperiment/hibernateFilter/00856/hibernate-core/src/main/java/org/hibernate/service/jdbc/cursor/internal/StandardRefCursorSupport.java)
	public void registerRefCursorParameter(CallableStatement statement, int position) {
		if ( jdbcServices.getExtractedMetaDataSupport().supportsRefCursors() ) {
			try {
				statement.registerOutParameter( position, refCursorTypeCode() );
			}
			catch (SQLException e) {
				throw jdbcServices.getSqlExceptionHelper().convert( e, "Error registering REF_CURSOR parameter [" + position + "]" );
			}
		}
		else {
			try {
				jdbcServices.getDialect().registerResultSetOutParameter( statement, position );
			}
			catch (SQLException e) {
				throw jdbcServices.getSqlExceptionHelper().convert( e, "Error asking dialect to register ref cursor parameter [" + position + "]" );
			}
		}
	}
,
(startLine=76 endLine=93 srcPath=/root/NewExperiment/hibernateFilter/00856/hibernate-core/src/main/java/org/hibernate/service/jdbc/cursor/internal/StandardRefCursorSupport.java)
	public void registerRefCursorParameter(CallableStatement statement, String name) {
		if ( jdbcServices.getExtractedMetaDataSupport().supportsRefCursors() ) {
			try {
				statement.registerOutParameter( name, refCursorTypeCode() );
			}
			catch (SQLException e) {
				throw jdbcServices.getSqlExceptionHelper().convert( e, "Error registering REF_CURSOR parameter [" + name + "]" );
			}
		}
		else {
			try {
				jdbcServices.getDialect().registerResultSetOutParameter( statement, name );
			}
			catch (SQLException e) {
				throw jdbcServices.getSqlExceptionHelper().convert( e, "Error asking dialect to register ref cursor parameter [" + name + "]" );
			}
		}
	}
,
>
, <(startLine=52 endLine=60 srcPath=/root/NewExperiment/hibernateFilter/00829/hibernate-entitymanager/src/test/java/org/hibernate/ejb/criteria/idclass/WidgetId.java)
	public boolean equals( Object obj ) {
		if( obj == null ) return false;
		if( !( obj instanceof WidgetId ) ) return false;
		
		WidgetId id = ( WidgetId )obj;
		if( this.getCode( ) == null || id.getCode( ) == null || this.getDivision( ) == null || id.getDivision( ) == null ) return false;
		
		return this.toString( ).equals( id.toString( ) );
	}
,
(startLine=52 endLine=60 srcPath=/root/NewExperiment/hibernateFilter/00829/hibernate-entitymanager/src/test/java/org/hibernate/ejb/criteria/idclass/HelperId.java)
	public boolean equals( Object obj ) {
		if( obj == null ) return false;
		if( !( obj instanceof HelperId ) ) return false;
		
		HelperId id = ( HelperId )obj;
		if( this.getName() == null || id.getName() == null || this.getType() == null || id.getType() == null ) return false;
		
		return this.toString( ).equals( id.toString( ) );
	}
,
>
, <(startLine=174 endLine=205 srcPath=/root/NewExperiment/hibernateFilter/01300/tooling/hibernate-enhance-maven-plugin/src/main/java/org/hibernate/bytecode/enhance/plugins/MavenEnhancePlugin.java)
            throws MojoExecutionException {
        try {
			if ( javaClassFile.delete() ) {
                    if ( ! javaClassFile.createNewFile() ) {
                        getLog().error( "Unable to recreate class file [" + javaClassFile.getName() + "]");
                    }
            }
			else {
				getLog().error( "Unable to delete class file [" + javaClassFile.getName() + "]");
			}

			FileOutputStream outputStream = new FileOutputStream( javaClassFile, false );
			try {
				outputStream.write( result);
				outputStream.flush();
			}
			finally {
				try {
					outputStream.close();
				}
				catch ( IOException ignore) {
				}
			}
        }
        catch (FileNotFoundException ignore) {
            // should not ever happen because of explicit checks
        }
        catch (IOException e) {
            throw new MojoExecutionException(
                    String.format( "Error processing included file [%s]", javaClassFile.getAbsolutePath() ), e );
        }
    }
,
(startLine=141 endLine=172 srcPath=/root/NewExperiment/hibernateFilter/01300/hibernate-core/src/main/java/org/hibernate/tool/enhance/EnhancementTask.java)
    private void writeEnhancedClass(File javaClassFile, byte[] result) {
        try {
			if ( javaClassFile.delete() ) {
                    if ( ! javaClassFile.createNewFile() ) {
                        log( "Unable to recreate class file [" + javaClassFile.getName() + "]", Project.MSG_INFO );
                    }
            }
			else {
				log( "Unable to delete class file [" + javaClassFile.getName() + "]", Project.MSG_INFO );
			}

			FileOutputStream outputStream = new FileOutputStream( javaClassFile, false );
			try {
				outputStream.write( result);
				outputStream.flush();
			}
			finally {
				try {
					outputStream.close();
				}
				catch ( IOException ignore) {
				}
			}
        }
        catch (FileNotFoundException ignore) {
            // should not ever happen because of explicit checks
        }
        catch (IOException e) {
            throw new BuildException(
                    String.format( "Error processing included file [%s]", javaClassFile.getAbsolutePath() ), e );
        }
    }
,
>
, <(startLine=252 endLine=275 srcPath=/root/NewExperiment/hibernateFilter/01332/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/xml/JpaDescriptorParser.java)
	private void parseEntities(Collection<Entity> entities, String defaultPackageName) {
		for ( Entity entity : entities ) {
			String fqcn = StringUtil.determineFullyQualifiedClassName( defaultPackageName, entity.getClazz() );

			if ( !xmlMappedTypeExists( fqcn ) ) {
				context.logMessage(
						Diagnostic.Kind.WARNING,
						fqcn + " is mapped in xml, but class does not exist. Skipping meta model generation."
				);
				continue;
			}

			XmlMetaEntity metaEntity = new XmlMetaEntity(
					entity, defaultPackageName, getXmlMappedType( fqcn ), context
			);
			if ( context.containsMetaEntity( fqcn ) ) {
				context.logMessage(
						Diagnostic.Kind.WARNING,
						fqcn + " was already processed once. Skipping second occurrence."
				);
			}
			context.addMetaEntity( fqcn, metaEntity );
		}
	}
,
(startLine=277 endLine=300 srcPath=/root/NewExperiment/hibernateFilter/01332/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/xml/JpaDescriptorParser.java)
	private void parseEmbeddable(Collection<org.hibernate.jpamodelgen.xml.jaxb.Embeddable> embeddables, String defaultPackageName) {
		for ( org.hibernate.jpamodelgen.xml.jaxb.Embeddable embeddable : embeddables ) {
			String fqcn = StringUtil.determineFullyQualifiedClassName( defaultPackageName, embeddable.getClazz() );
			// we have to extract the package name from the fqcn. Maybe the entity was setting a fqcn directly
			String pkg = StringUtil.packageNameFromFqcn( fqcn );

			if ( !xmlMappedTypeExists( fqcn ) ) {
				context.logMessage(
						Diagnostic.Kind.WARNING,
						fqcn + " is mapped in xml, but class does not exist. Skipping meta model generation."
				);
				continue;
			}

			XmlMetaEntity metaEntity = new XmlMetaEntity( embeddable, pkg, getXmlMappedType( fqcn ), context );
			if ( context.containsMetaEmbeddable( fqcn ) ) {
				context.logMessage(
						Diagnostic.Kind.WARNING,
						fqcn + " was already processed once. Skipping second occurrence."
				);
			}
			context.addMetaEmbeddable( fqcn, metaEntity );
		}
	}
,
(startLine=302 endLine=330 srcPath=/root/NewExperiment/hibernateFilter/01332/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/xml/JpaDescriptorParser.java)
	private void parseMappedSuperClass(Collection<org.hibernate.jpamodelgen.xml.jaxb.MappedSuperclass> mappedSuperClasses, String defaultPackageName) {
		for ( org.hibernate.jpamodelgen.xml.jaxb.MappedSuperclass mappedSuperClass : mappedSuperClasses ) {
			String fqcn = StringUtil.determineFullyQualifiedClassName(
					defaultPackageName, mappedSuperClass.getClazz()
			);
			// we have to extract the package name from the fqcn. Maybe the entity was setting a fqcn directly
			String pkg = StringUtil.packageNameFromFqcn( fqcn );

			if ( !xmlMappedTypeExists( fqcn ) ) {
				context.logMessage(
						Diagnostic.Kind.WARNING,
						fqcn + " is mapped in xml, but class does not exist. Skipping meta model generation."
				);
				continue;
			}

			XmlMetaEntity metaEntity = new XmlMetaEntity(
					mappedSuperClass, pkg, getXmlMappedType( fqcn ), context
			);

			if ( context.containsMetaEntity( fqcn ) ) {
				context.logMessage(
						Diagnostic.Kind.WARNING,
						fqcn + " was already processed once. Skipping second occurrence."
				);
			}
			context.addMetaEntity( fqcn, metaEntity );
		}
	}
,
>
, <(startLine=109 endLine=127 srcPath=/root/NewExperiment/hibernateFilter/00796/hibernate-envers/src/matrix/java/org/hibernate/envers/test/integration/modifiedflags/HasChangedStringMap.java)
	public void testHasChanged() throws Exception {
		List list = queryForPropertyHasChanged(StringMapEntity.class, sme1_id,
				"strings");
		assertEquals(3, list.size());
		assertEquals(makeList(1, 2, 3), extractRevisionNumbers(list));

		list = queryForPropertyHasChanged(StringMapEntity.class, sme2_id,
				"strings");
		assertEquals(2, list.size());
		assertEquals(makeList(1, 3), extractRevisionNumbers(list));

		list = queryForPropertyHasNotChanged(StringMapEntity.class, sme1_id,
				"strings");
		assertEquals(0, list.size());

		list = queryForPropertyHasNotChanged(StringMapEntity.class, sme2_id,
				"strings");
		assertEquals(0, list.size()); // in rev 2 there was no version generated for sme2_id
	}
,
(startLine=101 endLine=119 srcPath=/root/NewExperiment/hibernateFilter/00796/hibernate-envers/src/matrix/java/org/hibernate/envers/test/integration/modifiedflags/HasChangedStringSet.java)
	public void testHasChanged() throws Exception {
		List list = queryForPropertyHasChanged(StringSetEntity.class, sse1_id,
				"strings");
		assertEquals(2, list.size());
		assertEquals(makeList(1, 2), extractRevisionNumbers(list));

		list = queryForPropertyHasChanged(StringSetEntity.class, sse2_id,
				"strings");
		assertEquals(2, list.size());
		assertEquals(makeList(1, 3), extractRevisionNumbers(list));

		list = queryForPropertyHasNotChanged(StringSetEntity.class, sse1_id,
				"strings");
		assertEquals(0, list.size());

		list = queryForPropertyHasNotChanged(StringSetEntity.class, sse2_id,
				"strings");
		assertEquals(0, list.size());
	}
,
>
, <(startLine=83 endLine=94 srcPath=/root/NewExperiment/hibernateFilter/01634/hibernate-core/src/test/java/org/hibernate/jpa/test/query/NativeQueryOrdinalParametersTest.java)
	public void testNativeQueryIndexedOrdinalParameter() {
		EntityManager em = getOrCreateEntityManager();
		try {
			Query query = em.createNativeQuery( "SELECT * FROM Game g WHERE title = ?1" );
			query.setParameter( 1, "Super Mario Brothers" );
			List list = query.getResultList();
			assertEquals( 1, list.size() );
		}
		finally {
			em.close();
		}
	}
,
(startLine=98 endLine=109 srcPath=/root/NewExperiment/hibernateFilter/01634/hibernate-core/src/test/java/org/hibernate/jpa/test/query/NativeQueryOrdinalParametersTest.java)
	public void testNativeQueryOrdinalParameter() {
		EntityManager em = getOrCreateEntityManager();
		try {
			Query query = em.createNativeQuery( "SELECT * FROM Game g WHERE title = ?" );
			query.setParameter( 1, "Super Mario Brothers" );
			List list = query.getResultList();
			assertEquals( 1, list.size() );
		}
		finally {
			em.close();
		}
	}
,
>
, <(startLine=640 endLine=657 srcPath=/root/NewExperiment/hibernateFilter/00293/annotations/src/main/java/org/hibernate/cfg/Ejb3JoinColumn.java)
		if ( annJoins == null ) {
			Ejb3JoinColumn currentJoinColumn = new Ejb3JoinColumn();
			currentJoinColumn.setImplicit( true );
			currentJoinColumn.setNullable( false ); //I break the spec, but it's for good
			currentJoinColumn.setPropertyHolder( propertyHolder );
			currentJoinColumn.setJoins( secondaryTables );
			currentJoinColumn.setMappings( mappings );
			currentJoinColumn.setPropertyName(
					BinderHelper.getRelativePath( propertyHolder, propertyName )
			);
			currentJoinColumn.setMappedBy( mappedBy );
			currentJoinColumn.bind();

			joinColumns = new Ejb3JoinColumn[] {
					currentJoinColumn

			};
		}
,
(startLine=662 endLine=676 srcPath=/root/NewExperiment/hibernateFilter/00293/annotations/src/main/java/org/hibernate/cfg/Ejb3JoinColumn.java)
			for (int index = 0; index < length; index++) {
				annJoin = annJoins[index];
				Ejb3JoinColumn currentJoinColumn = new Ejb3JoinColumn();
				currentJoinColumn.setImplicit( true );
				currentJoinColumn.setPropertyHolder( propertyHolder );
				currentJoinColumn.setJoins( secondaryTables );
				currentJoinColumn.setMappings( mappings );
				currentJoinColumn.setPropertyName( BinderHelper.getRelativePath( propertyHolder, propertyName ) );
				currentJoinColumn.setMappedBy( mappedBy );
				currentJoinColumn.setJoinAnnotation( annJoin, propertyName );
				currentJoinColumn.setNullable( false ); //I break the spec, but it's for good
				//done after the annotation to override it
				currentJoinColumn.bind();
				joinColumns[index] = currentJoinColumn;
			}
,
>
, <(startLine=451 endLine=458 srcPath=/root/NewExperiment/hibernateFilter/01369/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/oracle/OracleSpatial10gDialect.java)
		public String render(Type firstArgumentType, final List args, final SessionFactoryImplementor factory) {
			final StringBuffer buf = new StringBuffer();
			if ( args.isEmpty() ) {
				throw new IllegalArgumentException( "First Argument in arglist must be object " + "to which method is applied" );
			}
			buf.append( "TO_CHAR(SDO_UTIL.TO_WKTGEOMETRY(" ).append( args.get( 0 ) ).append( "))" );
			return buf.toString();
		}
,
(startLine=77 endLine=86 srcPath=/root/NewExperiment/hibernateFilter/01369/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/oracle/SDOObjectProperty.java)
			throws QueryException {
		final StringBuffer buf = new StringBuffer();
		if ( args.isEmpty() ) {
			throw new QueryException(
					"First Argument in arglist must be object of which property is queried"
			);
		}
		buf.append( args.get( 0 ) ).append( "." ).append( name );
		return buf.toString();
	}
,
(startLine=25 endLine=38 srcPath=/root/NewExperiment/hibernateFilter/01369/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/oracle/GetDimensionFunction.java)
	public String render(Type firstArgumentType, final List args, final SessionFactoryImplementor factory) {
		final StringBuffer buf = new StringBuffer();
		if ( args.isEmpty() ) {
			throw new IllegalArgumentException(
					"First Argument in arglist must be object to "
							+ "which method is applied"
			);
		}

		buf.append( args.get( 0 ) ).append( "." ).append(
				getName()
		).append( "()" );
		return buf.toString();
	}
,
>
, <(startLine=141 endLine=161 srcPath=/root/NewExperiment/hibernateFilter/00295/envers/src/test/java/org/hibernate/envers/test/integration/manytomany/BasicWhereJoinTable.java)
    public void testHistoryOfWjte1() {
        IntNoAutoIdTestEntity ite1_1 = getEntityManager().find(IntNoAutoIdTestEntity.class, ite1_1_id);
        IntNoAutoIdTestEntity ite2_1 = getEntityManager().find(IntNoAutoIdTestEntity.class, ite2_1_id);

        WhereJoinTableEntity rev1 = getAuditReader().find(WhereJoinTableEntity.class, wjte1_id, 1);
        WhereJoinTableEntity rev2 = getAuditReader().find(WhereJoinTableEntity.class, wjte1_id, 2);
        WhereJoinTableEntity rev3 = getAuditReader().find(WhereJoinTableEntity.class, wjte1_id, 3);
        WhereJoinTableEntity rev4 = getAuditReader().find(WhereJoinTableEntity.class, wjte1_id, 4);

        // Checking 1st list
        assert TestTools.checkList(rev1.getReferences1());
        assert TestTools.checkList(rev2.getReferences1(), ite1_1);
        assert TestTools.checkList(rev3.getReferences1(), ite1_1);
        assert TestTools.checkList(rev4.getReferences1());

        // Checking 2nd list
        assert TestTools.checkList(rev1.getReferences2());
        assert TestTools.checkList(rev2.getReferences2(), ite2_1);
        assert TestTools.checkList(rev3.getReferences2(), ite2_1);
        assert TestTools.checkList(rev4.getReferences2(), ite2_1);
    }
,
(startLine=164 endLine=185 srcPath=/root/NewExperiment/hibernateFilter/00295/envers/src/test/java/org/hibernate/envers/test/integration/manytomany/BasicWhereJoinTable.java)
    public void testHistoryOfWjte2() {
        IntNoAutoIdTestEntity ite1_1 = getEntityManager().find(IntNoAutoIdTestEntity.class, ite1_1_id);
        IntNoAutoIdTestEntity ite1_2 = getEntityManager().find(IntNoAutoIdTestEntity.class, ite1_2_id);
        IntNoAutoIdTestEntity ite2_2 = getEntityManager().find(IntNoAutoIdTestEntity.class, ite2_2_id);

        WhereJoinTableEntity rev1 = getAuditReader().find(WhereJoinTableEntity.class, wjte2_id, 1);
        WhereJoinTableEntity rev2 = getAuditReader().find(WhereJoinTableEntity.class, wjte2_id, 2);
        WhereJoinTableEntity rev3 = getAuditReader().find(WhereJoinTableEntity.class, wjte2_id, 3);
        WhereJoinTableEntity rev4 = getAuditReader().find(WhereJoinTableEntity.class, wjte2_id, 4);

        // Checking 1st list
        assert TestTools.checkList(rev1.getReferences1());
        assert TestTools.checkList(rev2.getReferences1());
        assert TestTools.checkList(rev3.getReferences1(), ite1_1, ite1_2);
        assert TestTools.checkList(rev4.getReferences1(), ite1_1, ite1_2);

        // Checking 2nd list
        assert TestTools.checkList(rev1.getReferences2());
        assert TestTools.checkList(rev2.getReferences2());
        assert TestTools.checkList(rev3.getReferences2());
        assert TestTools.checkList(rev4.getReferences2(), ite2_2);
    }
,
>
, <(startLine=446 endLine=460 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java)
	private Object[] toResultRow(Object[] row) {
		if ( selectLength == row.length ) {
			return row;
		}
		else {
			Object[] result = new Object[selectLength];
			int j = 0;
			for ( int i = 0; i < row.length; i++ ) {
				if ( includeInSelect[i] ) {
					result[j++] = row[i];
				}
			}
			return result;
		}
	}
,
(startLine=998 endLine=1010 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java)
	private Object[] toResultRow(Object[] row) {
		if ( selectLength == row.length ) {
			return row;
		}
		else {
			Object[] result = new Object[selectLength];
			int j = 0;
			for ( int i = 0; i < row.length; i++ ) {
				if ( includeInSelect[i] ) result[j++] = row[i];
			}
			return result;
		}
	}
,
>
, <(startLine=61 endLine=87 srcPath=/root/NewExperiment/hibernateFilter/00143/cache-jbosscache/src/test/java/org/hibernate/test/cache/jbc2/collection/CollectionRegionImplTestCase.java)
    protected void supportedAccessTypeTest(RegionFactory regionFactory, Properties properties) {
        
        CollectionRegion region = regionFactory.buildCollectionRegion("test", properties, null);
        
        assertNull("Got TRANSACTIONAL", region.buildAccessStrategy(AccessType.TRANSACTIONAL).lockRegion());
        
        try
        {
            region.buildAccessStrategy(AccessType.READ_ONLY).lockRegion();
            fail("Did not get READ_ONLY");
        }
        catch (UnsupportedOperationException good) {}
        
        try
        {
            region.buildAccessStrategy(AccessType.NONSTRICT_READ_WRITE);
            fail("Incorrectly got NONSTRICT_READ_WRITE");
        }
        catch (CacheException good) {}
        
        try
        {
            region.buildAccessStrategy(AccessType.READ_WRITE);
            fail("Incorrectly got READ_WRITE");
        }
        catch (CacheException good) {}
    }
,
(startLine=60 endLine=87 srcPath=/root/NewExperiment/hibernateFilter/00143/cache-jbosscache/src/test/java/org/hibernate/test/cache/jbc2/entity/EntityRegionImplTestCase.java)
    protected void supportedAccessTypeTest(RegionFactory regionFactory, Properties properties) {
        
        EntityRegion region = regionFactory.buildEntityRegion("test", properties, null);
        
        assertNull("Got TRANSACTIONAL", region.buildAccessStrategy(AccessType.TRANSACTIONAL).lockRegion());
        
        try
        {
            region.buildAccessStrategy(AccessType.READ_ONLY).lockRegion();
            fail("Did not get READ_ONLY");
        }
        catch (UnsupportedOperationException good) {}
        
        try
        {
            region.buildAccessStrategy(AccessType.NONSTRICT_READ_WRITE);
            fail("Incorrectly got NONSTRICT_READ_WRITE");
        }
        catch (CacheException good) {}
        
        try
        {
            region.buildAccessStrategy(AccessType.READ_WRITE);
            fail("Incorrectly got READ_WRITE");
        }
        catch (CacheException good) {}      
        
    }
,
>
, <(startLine=57 endLine=75 srcPath=/root/NewExperiment/hibernateFilter/01052/hibernate-core/src/main/java/org/hibernate/id/GUIDGenerator.java)
		try {
			PreparedStatement st = session.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement( sql );
			try {
				ResultSet rs = session.getTransactionCoordinator().getJdbcCoordinator().getResultSetReturn().extract( st );
				final String result;
				try {
					rs.next();
					result = rs.getString(1);
				}
				finally {
					session.getTransactionCoordinator().getJdbcCoordinator().release( rs, st );
				}
                LOG.guidGenerated(result);
				return result;
			}
			finally {
				session.getTransactionCoordinator().getJdbcCoordinator().release( st );
			}
		}
,
(startLine=119 endLine=138 srcPath=/root/NewExperiment/hibernateFilter/01052/hibernate-core/src/main/java/org/hibernate/id/SequenceGenerator.java)
		try {
			PreparedStatement st = session.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement( sql );
			try {
				ResultSet rs = session.getTransactionCoordinator().getJdbcCoordinator().getResultSetReturn().extract( st );
				try {
					rs.next();
					IntegralDataTypeHolder result = buildHolder();
					result.initialize( rs, 1 );
					LOG.debugf( "Sequence identifier generated: %s", result );
					return result;
				}
				finally {
					session.getTransactionCoordinator().getJdbcCoordinator().release( rs, st );
				}
			}
			finally {
				session.getTransactionCoordinator().getJdbcCoordinator().release( st );
			}

		}
,
>
, <(startLine=93 endLine=127 srcPath=/root/NewExperiment/hibernateFilter/01654/hibernate-core/src/main/java/org/hibernate/jpa/event/internal/jpa/CallbackBuilderLegacyImpl.java)
			for ( final XMethod xMethod : methods ) {
				if ( xMethod.isAnnotationPresent( callbackType.getCallbackAnnotation() ) ) {
					Method method = reflectionManager.toMethod( xMethod );
					final String methodName = method.getName();
					if ( !callbacksMethodNames.contains( methodName ) ) {
						//overridden method, remove the superclass overridden method
						if ( callback == null ) {
							callback = new EntityCallback( method, callbackType );
							Class returnType = method.getReturnType();
							Class[] args = method.getParameterTypes();
							if ( returnType != Void.TYPE || args.length != 0 ) {
								throw new RuntimeException(
										"Callback methods annotated on the bean class must return void and take no arguments: "
												+ callbackType.getCallbackAnnotation().getName() + " - " + xMethod
								);
							}
							method.setAccessible( true );
							log.debugf(
									"Adding %s as %s callback for entity %s",
									methodName,
									callbackType.getCallbackAnnotation().getSimpleName(),
									beanClass.getName()
							);
							callbacks.add( 0, callback ); //superclass first
							callbacksMethodNames.add( 0, methodName );
						}
						else {
							throw new PersistenceException(
									"You can only annotate one callback method with "
											+ callbackType.getCallbackAnnotation().getName() + " in bean class: " + beanClass.getName()
							);
						}
					}
				}
			}
,
(startLine=156 endLine=206 srcPath=/root/NewExperiment/hibernateFilter/01654/hibernate-core/src/main/java/org/hibernate/jpa/event/internal/jpa/CallbackBuilderLegacyImpl.java)
		for ( Class listener : orderedListeners ) {
			Callback callback = null;
			if ( listener != null ) {
				XClass xListener = reflectionManager.toXClass( listener );
				callbacksMethodNames = new ArrayList<String>();
				List<XMethod> methods = xListener.getDeclaredMethods();
				for ( final XMethod xMethod : methods ) {
					if ( xMethod.isAnnotationPresent( callbackType.getCallbackAnnotation() ) ) {
						final Method method = reflectionManager.toMethod( xMethod );
						final String methodName = method.getName();
						if ( !callbacksMethodNames.contains( methodName ) ) {
							//overridden method, remove the superclass overridden method
							if ( callback == null ) {
								callback = new ListenerCallback(
										jpaListenerFactory.buildListener( listener ),
										method,
										callbackType
								);

								Class returnType = method.getReturnType();
								Class[] args = method.getParameterTypes();
								if ( returnType != Void.TYPE || args.length != 1 ) {
									throw new PersistenceException(
											"Callback methods annotated in a listener bean class must return void and take one argument: "
													+ callbackType.getCallbackAnnotation().getName() + " - " + method
									);
								}
								if ( !method.isAccessible() ) {
									method.setAccessible( true );
								}
								log.debugf(
										"Adding %s as %s callback for entity %s",
										methodName,
										callbackType.getCallbackAnnotation().getSimpleName(),
										beanClass.getName()
								);
								callbacks.add( 0, callback ); // listeners first
							}
							else {
								throw new PersistenceException(
										"You can only annotate one callback method with "
												+ callbackType.getCallbackAnnotation().getName()
												+ " in bean class: " + beanClass.getName()
												+ " and callback listener: " + listener.getName()
								);
							}
						}
					}
				}
			}
		}
,
>
, <(startLine=181 endLine=187 srcPath=/root/NewExperiment/hibernateFilter/00441/hibernate-core/src/main/java/org/hibernate/engine/query/HQLQueryPlan.java)
		if ( needsLimit ) {
			log.warn( "firstResult/maxResults specified on polymorphic query; applying in memory!" );
			RowSelection selection = new RowSelection();
			selection.setFetchSize( queryParameters.getRowSelection().getFetchSize() );
			selection.setTimeout( queryParameters.getRowSelection().getTimeout() );
			queryParametersToUse = queryParameters.createCopyUsing( selection );
		}
,
(startLine=352 endLine=358 srcPath=/root/NewExperiment/hibernateFilter/00441/hibernate-core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java)
		if ( hasLimit && containsCollectionFetches() ) {
			log.warn( "firstResult/maxResults specified with collection fetch; applying in memory!" );
			RowSelection selection = new RowSelection();
			selection.setFetchSize( queryParameters.getRowSelection().getFetchSize() );
			selection.setTimeout( queryParameters.getRowSelection().getTimeout() );
			queryParametersToUse = queryParameters.createCopyUsing( selection );
		}
,
>
, <(startLine=218 endLine=224 srcPath=/root/NewExperiment/hibernateFilter/00004/cache-jbosscache2/src/main/resources/org/hibernate/cache/jbc/TreeCacheRegionFactory.java)
		public EntityRegionAccessStrategy buildAccessStrategy(AccessType accessType) throws CacheException {
			if ( ! ( AccessType.READ_ONLY.equals( accessType ) || AccessType.TRANSACTIONAL.equals( accessType ) ) ) {
				throw new CacheException( "TreeCacheRegionFactory only supports ( " + AccessType.READ_ONLY.getName() + " | " + AccessType.TRANSACTIONAL + " ) access strategies [" + accessType.getName() + "]" );
			}
			// todo : implement :)
			return null;
		}
,
(startLine=45 endLine=54 srcPath=/root/NewExperiment/hibernateFilter/00004/cache-jbosscache2/src/main/java/org/hibernate/cache/jbc2/entity/EntityRegionImpl.java)
	public EntityRegionAccessStrategy buildAccessStrategy(AccessType accessType) throws CacheException {
		// todo : allow the other strategies, which will require a non-transactional cache instance
		if ( ! ( AccessType.READ_ONLY.equals( accessType ) || AccessType.TRANSACTIONAL.equals( accessType ) ) ) {
			throw new CacheException(
					"TreeCacheRegionFactory only supports " + AccessType.READ_ONLY.getName() + " or " +
							AccessType.TRANSACTIONAL + " access strategies [" + accessType.getName() + "]"
			);
		}
		return null;
	}
,
>
, <(startLine=89 endLine=100 srcPath=/root/NewExperiment/hibernateFilter/00304/envers/src/test/java/org/hibernate/envers/test/integration/naming/OneToManyUnidirectionalNaming.java)
    public void testHistoryOfUniId1() {
        StrTestEntity str1 = getEntityManager().find(StrTestEntity.class, str1_id);

        DetachedNamingTestEntity rev1 = getAuditReader().find(DetachedNamingTestEntity.class, uni1_id, 1);
        DetachedNamingTestEntity rev2 = getAuditReader().find(DetachedNamingTestEntity.class, uni1_id, 2);

        assert rev1.getCollection().equals(TestTools.makeSet());
        assert rev2.getCollection().equals(TestTools.makeSet(str1));

        assert "data1".equals(rev1.getData());
        assert "data1".equals(rev2.getData());
    }
,
(startLine=89 endLine=100 srcPath=/root/NewExperiment/hibernateFilter/00304/envers/src/test/java/org/hibernate/envers/test/integration/naming/VersionsJoinTableNaming.java)
    public void testHistoryOfUniId1() {
        StrTestEntity str1 = getEntityManager().find(StrTestEntity.class, str1_id);

        VersionsJoinTableTestEntity rev1 = getAuditReader().find(VersionsJoinTableTestEntity.class, uni1_id, 1);
        VersionsJoinTableTestEntity rev2 = getAuditReader().find(VersionsJoinTableTestEntity.class, uni1_id, 2);

        assert rev1.getCollection().equals(TestTools.makeSet());
        assert rev2.getCollection().equals(TestTools.makeSet(str1));

        assert "data1".equals(rev1.getData());
        assert "data1".equals(rev2.getData());
    }
,
(startLine=96 endLine=107 srcPath=/root/NewExperiment/hibernateFilter/00304/envers/src/test/java/org/hibernate/envers/test/integration/onetomany/detached/DataChangesDetachedSet.java)
    public void testHistoryOfColl1() {
        StrTestEntity str1 = getEntityManager().find(StrTestEntity.class, str1_id);

        SetRefCollEntity rev1 = getAuditReader().find(SetRefCollEntity.class, coll1_id, 1);
        SetRefCollEntity rev2 = getAuditReader().find(SetRefCollEntity.class, coll1_id, 2);

        assert rev1.getCollection().equals(TestTools.makeSet());
        assert rev2.getCollection().equals(TestTools.makeSet(str1));

        assert "coll1".equals(rev1.getData());
        assert "coll2".equals(rev2.getData());
    }
,
>
, <(startLine=357 endLine=378 srcPath=/root/NewExperiment/hibernateFilter/00131/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java)
	private int transformInvokevirtualsIntoGetfields(ClassFile classfile, CodeIterator iter, int pos) {
		ConstPool cp = classfile.getConstPool();
		int c = iter.byteAt(pos);
		if (c != Opcode.GETFIELD) {
			return pos;
		}
		int index = iter.u16bitAt(pos + 1);
		String fieldName = cp.getFieldrefName(index);
		String className = cp.getFieldrefClassName(index);
		if ( !filter.handleReadAccess( className, fieldName ) ) {
			return pos;
		}
		String desc = "()" + cp.getFieldrefType( index );
		int read_method_index = cp.addMethodrefInfo(
				cp.getThisClassInfo(),
				EACH_READ_METHOD_PREFIX + fieldName,
				desc
		);
		iter.writeByte(Opcode.INVOKEVIRTUAL, pos);
		iter.write16bit(read_method_index, pos + 1);
		return pos;
	}
,
(startLine=382 endLine=403 srcPath=/root/NewExperiment/hibernateFilter/00131/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java)
			CodeIterator iter, int pos) {
		ConstPool cp = classfile.getConstPool();
		int c = iter.byteAt(pos);
		if (c != Opcode.PUTFIELD) {
			return pos;
		}
		int index = iter.u16bitAt(pos + 1);
		String fieldName = cp.getFieldrefName(index);
		String className = cp.getFieldrefClassName(index);
		if ( !filter.handleWriteAccess( className, fieldName ) ) {
			return pos;
		}
		String desc = "(" + cp.getFieldrefType( index ) + ")V";
		int write_method_index = cp.addMethodrefInfo(
				cp.getThisClassInfo(),
				EACH_WRITE_METHOD_PREFIX + fieldName,
				desc
		);
		iter.writeByte(Opcode.INVOKEVIRTUAL, pos);
		iter.write16bit(write_method_index, pos + 1);
		return pos;
	}
,
>
, <(startLine=218 endLine=251 srcPath=/root/NewExperiment/hibernateFilter/01420/hibernate-core/src/test/java/org/hibernate/test/collection/set/PersistentSetTest.java)
	public void testCompositeElementMerging() {
		Session session = openSession();
		session.beginTransaction();
		Container container = new Container( "p1" );
		Container.Content c1 = new Container.Content( "c1" );
		container.getContents().add( c1 );
		session.save( container );
		session.getTransaction().commit();
		session.close();

		CollectionStatistics stats =  sessionFactory().getStatistics().getCollectionStatistics( Container.class.getName() + ".contents" );
		long recreateCount = stats.getRecreateCount();
		long updateCount = stats.getUpdateCount();

		container.setName( "another name" );

		session = openSession();
		session.beginTransaction();
		container = ( Container ) session.merge( container );
		session.getTransaction().commit();
		session.close();

		assertEquals( 1, container.getContents().size() );
		assertEquals( recreateCount, stats.getRecreateCount() );
		assertEquals( updateCount, stats.getUpdateCount() );

		session = openSession();
		session.beginTransaction();
		container = ( Container ) session.get( Container.class, container.getId() );
		assertEquals( 1, container.getContents().size() );
		session.delete( container );
		session.getTransaction().commit();
		session.close();
	}
,
(startLine=255 endLine=287 srcPath=/root/NewExperiment/hibernateFilter/01420/hibernate-core/src/test/java/org/hibernate/test/collection/set/PersistentSetTest.java)
	public void testCompositeElementCollectionDirtyChecking() {
		Session session = openSession();
		session.beginTransaction();
		Container container = new Container( "p1" );
		Container.Content c1 = new Container.Content( "c1" );
		container.getContents().add( c1 );
		session.save( container );
		session.getTransaction().commit();
		session.close();

		CollectionStatistics stats =  sessionFactory().getStatistics().getCollectionStatistics( Container.class.getName() + ".contents" );
		long recreateCount = stats.getRecreateCount();
		long updateCount = stats.getUpdateCount();

		session = openSession();
		session.beginTransaction();
		container = ( Container ) session.get( Container.class, container.getId() );
		assertEquals( 1, container.getContents().size() );
		session.getTransaction().commit();
		session.close();

		assertEquals( 1, container.getContents().size() );
		assertEquals( recreateCount, stats.getRecreateCount() );
		assertEquals( updateCount, stats.getUpdateCount() );

		session = openSession();
		session.beginTransaction();
		container = ( Container ) session.get( Container.class, container.getId() );
		assertEquals( 1, container.getContents().size() );
		session.delete( container );
		session.getTransaction().commit();
		session.close();
	}
,
>
, <(startLine=112 endLine=123 srcPath=/root/NewExperiment/hibernateFilter/00074/envers/src/test/java/org/jboss/envers/test/integration/onetomany/BasicList.java)
    public void testHistoryOfEdId1() {
        ListRefIngEntity ing1 = getEntityManager().find(ListRefIngEntity.class, ing1_id);
        ListRefIngEntity ing2 = getEntityManager().find(ListRefIngEntity.class, ing2_id);

        ListRefEdEntity rev1 = getVersionsReader().find(ListRefEdEntity.class, ed1_id, 1);
        ListRefEdEntity rev2 = getVersionsReader().find(ListRefEdEntity.class, ed1_id, 2);
        ListRefEdEntity rev3 = getVersionsReader().find(ListRefEdEntity.class, ed1_id, 3);

        assert TestTools.checkList(rev1.getReffering(), ing1, ing2);
        assert TestTools.checkList(rev2.getReffering(), ing2);
        assert TestTools.checkList(rev3.getReffering());
    }
,
(startLine=126 endLine=137 srcPath=/root/NewExperiment/hibernateFilter/00074/envers/src/test/java/org/jboss/envers/test/integration/onetomany/BasicList.java)
    public void testHistoryOfEdId2() {
        ListRefIngEntity ing1 = getEntityManager().find(ListRefIngEntity.class, ing1_id);
        ListRefIngEntity ing2 = getEntityManager().find(ListRefIngEntity.class, ing2_id);

        ListRefEdEntity rev1 = getVersionsReader().find(ListRefEdEntity.class, ed2_id, 1);
        ListRefEdEntity rev2 = getVersionsReader().find(ListRefEdEntity.class, ed2_id, 2);
        ListRefEdEntity rev3 = getVersionsReader().find(ListRefEdEntity.class, ed2_id, 3);

        assert TestTools.checkList(rev1.getReffering());
        assert TestTools.checkList(rev2.getReffering(), ing1);
        assert TestTools.checkList(rev3.getReffering(), ing1, ing2);
    }
,
>
, <(startLine=117 endLine=141 srcPath=/root/NewExperiment/hibernateFilter/01370/hibernate-core/src/test/java/org/hibernate/test/instrument/cases/TestFetchingLazyToOneExecutable.java)
	public final void prepare() {
		BootstrapServiceRegistryBuilder bsrb = new BootstrapServiceRegistryBuilder();
		// make sure we pick up the TCCL, and make sure its the isolated CL...
		ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
		if ( classLoader == null ) {
			throw new RuntimeException( "Isolated ClassLoader not yet set as TCCL" );
		}
		if ( !InstrumentedClassLoader.class.isInstance( classLoader ) ) {
			throw new RuntimeException( "Isolated ClassLoader not yet set as TCCL" );
		}
		bsrb.applyClassLoader( classLoader );

		serviceRegistry = new StandardServiceRegistryBuilder( bsrb.build() )
				.applySetting( Environment.HBM2DDL_AUTO, "create-drop" )
				.applySetting( AvailableSettings.USE_SECOND_LEVEL_CACHE, "false" )
				.build();

		MetadataSources metadataSources = new MetadataSources( serviceRegistry );
		metadataSources.addAnnotatedClass( Person.class );
		metadataSources.addAnnotatedClass( Passport.class );

		factory = metadataSources.buildMetadata().buildSessionFactory();

		createData();
	}
,
(startLine=25 endLine=47 srcPath=/root/NewExperiment/hibernateFilter/01370/hibernate-core/src/test/java/org/hibernate/test/instrument/cases/AbstractExecutable.java)
	public final void prepare() {
		BootstrapServiceRegistryBuilder bsrb = new BootstrapServiceRegistryBuilder();
		// make sure we pick up the TCCL, and make sure its the isolated CL...
		ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
		if ( classLoader == null ) {
			throw new RuntimeException( "Isolated ClassLoader not yet set as TCCL" );
		}
		if ( !InstrumentedClassLoader.class.isInstance( classLoader ) ) {
			throw new RuntimeException( "Isolated ClassLoader not yet set as TCCL" );
		}
		bsrb.applyClassLoader( classLoader );

		serviceRegistry = new StandardServiceRegistryBuilder( bsrb.build() )
				.applySetting( Environment.HBM2DDL_AUTO, "create-drop" )
				.build();

		MetadataSources metadataSources = new MetadataSources( serviceRegistry );
		for ( String resource : getResources() ) {
			metadataSources.addResource( resource );
		}

		factory = metadataSources.buildMetadata().buildSessionFactory();
	}
,
>
, <(startLine=147 endLine=159 srcPath=/root/NewExperiment/hibernateFilter/01825/hibernate-core/src/main/java/org/hibernate/property/access/spi/SetterMethodImpl.java)
		private Method resolveMethod() {
			try {
				final Method method = declaringClass.getDeclaredMethod( methodName, argumentType );
				ReflectHelper.ensureAccessibility( method );
				return method;
			}
			catch (NoSuchMethodException e) {
				throw new PropertyAccessSerializationException(
						"Unable to resolve setter method on deserialization : " + declaringClass.getName() + "#"
								+ methodName + "(" + argumentType.getName() + ")"
				);
			}
		}
,
(startLine=123 endLine=134 srcPath=/root/NewExperiment/hibernateFilter/01825/hibernate-core/src/main/java/org/hibernate/property/access/spi/GetterMethodImpl.java)
		private Method resolveMethod() {
			try {
				final Method method = declaringClass.getDeclaredMethod( methodName );
				ReflectHelper.ensureAccessibility( method );
				return method;
			}
			catch (NoSuchMethodException e) {
				throw new PropertyAccessSerializationException(
						"Unable to resolve getter method on deserialization : " + declaringClass.getName() + "#" + methodName
				);
			}
		}
,
>
, <(startLine=18 endLine=26 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/transaction/JOTMTransactionManagerLookup.java)
	public TransactionManager getTransactionManager(Properties props) throws HibernateException {
		try {
			Class clazz = Class.forName("org.objectweb.jotm.Current");
			return (TransactionManager) clazz.getMethod("getTransactionManager", null).invoke(null, null);
		}
		catch (Exception e) {
			throw new HibernateException( "Could not obtain JOTM transaction manager instance", e );
		}
	}
,
(startLine=18 endLine=26 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/transaction/JOnASTransactionManagerLookup.java)
	public TransactionManager getTransactionManager(Properties props) throws HibernateException {
		try {
			Class clazz = Class.forName("org.objectweb.jonas_tm.Current");
			return (TransactionManager) clazz.getMethod("getTransactionManager", null).invoke(null, null);
		}
		catch (Exception e) {
			throw new HibernateException( "Could not obtain JOnAS transaction manager instance", e );
		}
	}
,
>
, <(startLine=56 endLine=83 srcPath=/root/NewExperiment/hibernateFilter/01772/hibernate-core/src/test/java/org/hibernate/test/id/sequence/NegativeValueSequenceTest.java)
		try {
			serviceRegistry = (ServiceRegistryImplementor) new StandardServiceRegistryBuilder()
					.applySetting( AvailableSettings.HBM2DDL_AUTO, "create-drop" )
					.build();

			Triggerable triggerable = logInspection.watchForLogMessages( "HHH000116" );

			Metadata metadata = new MetadataSources( serviceRegistry )
					.addAnnotatedClass( NegativeOneIncrementSize.class )
					.buildMetadata();

			// NegativeOneIncrementSize ID has allocationSize == -1, so warning should not be triggered.
			assertEquals( false, triggerable.wasTriggered() );

			sessionFactory = (SessionFactoryImplementor) metadata.buildSessionFactory();

			assertOptimizer( sessionFactory, NegativeOneIncrementSize.class, NoopOptimizer.class );

			session = sessionFactory.openSession();
			session.getTransaction().begin();

			// initial value is -10; sequence should be decremented by 1 (since allocationSize is -1)
			for ( Integer i = -10; i >= -15; i-- ) {
				NegativeOneIncrementSize theEntity = new NegativeOneIncrementSize();
				session.persist( theEntity );
				assertEquals( i, theEntity.id );
			}
		}
,
(startLine=104 endLine=132 srcPath=/root/NewExperiment/hibernateFilter/01772/hibernate-core/src/test/java/org/hibernate/test/id/sequence/NegativeValueSequenceTest.java)
		try {
			serviceRegistry = (ServiceRegistryImplementor) new StandardServiceRegistryBuilder()
					.applySetting( AvailableSettings.HBM2DDL_AUTO, "create-drop" )
					.build();

			Triggerable triggerable = logInspection.watchForLogMessages( "HHH000116" );

			Metadata metadata = new MetadataSources( serviceRegistry )
					.addAnnotatedClass( NegativeTwoIncrementSize.class )
					.buildMetadata();

			// NegativeTwoIncrementSize ID has allocationSize == -2, so warning should be triggered.
			assertEquals( true, triggerable.wasTriggered() );

			sessionFactory = (SessionFactoryImplementor) metadata.buildSessionFactory();

			assertOptimizer( sessionFactory, NegativeTwoIncrementSize.class, NoopOptimizer.class );

			session = sessionFactory.openSession();
			session.getTransaction().begin();

			// initial value is -10; sequence should be decremented by 1
			// (since negative NoopOptimizer negative default is -1)
			for ( Integer i = -10; i >= -15; i-- ) {
				NegativeTwoIncrementSize theEntity = new NegativeTwoIncrementSize();
				session.persist( theEntity );
				assertEquals( i, theEntity.id );
			}
		}
,
(startLine=153 endLine=180 srcPath=/root/NewExperiment/hibernateFilter/01772/hibernate-core/src/test/java/org/hibernate/test/id/sequence/NegativeValueSequenceTest.java)
		try {
			serviceRegistry = (ServiceRegistryImplementor) new StandardServiceRegistryBuilder()
					.applySetting( AvailableSettings.HBM2DDL_AUTO, "create-drop" )
					.build();

			Triggerable triggerable = logInspection.watchForLogMessages( "HHH000116" );

			Metadata metadata = new MetadataSources( serviceRegistry )
					.addAnnotatedClass( PositiveOneIncrementSize.class )
					.buildMetadata();

			// PositiveOneIncrementSize ID has allocationSize == 1, so warning should not be triggered.
			assertEquals( false, triggerable.wasTriggered() );

			sessionFactory = (SessionFactoryImplementor) metadata.buildSessionFactory();

			assertOptimizer( sessionFactory, PositiveOneIncrementSize.class, NoopOptimizer.class );

			session = sessionFactory.openSession();
			session.getTransaction().begin();

			// initial value is -5; sequence should be incremented by 1 (since allocationSize is 1)
			for ( Integer i = -5; i <= 5; i++ ) {
				PositiveOneIncrementSize theEntity = new PositiveOneIncrementSize();
				session.persist( theEntity );
				assertEquals( i, theEntity.id );
			}
		}
,
(startLine=201 endLine=231 srcPath=/root/NewExperiment/hibernateFilter/01772/hibernate-core/src/test/java/org/hibernate/test/id/sequence/NegativeValueSequenceTest.java)
		try {
			serviceRegistry = (ServiceRegistryImplementor) new StandardServiceRegistryBuilder()
					.applySetting( AvailableSettings.PREFERRED_POOLED_OPTIMIZER, "none" )
					.applySetting( AvailableSettings.HBM2DDL_AUTO, "create-drop" )
					.build();

			Triggerable triggerable = logInspection.watchForLogMessages( "HHH000116" );

			Metadata metadata = new MetadataSources( serviceRegistry )
					.addAnnotatedClass( PositiveTwoIncrementSize.class )
					.buildMetadata();

			// NoopOptimizer is preferred (due to setting AvailableSettings.PREFERRED_POOLED_OPTIMIZER to "false")
			// PositiveTwoIncrementSize ID has allocationSize == 2, so warning should be triggered.
			assertEquals( true, triggerable.wasTriggered() );

			sessionFactory = (SessionFactoryImplementor) metadata.buildSessionFactory();

			assertOptimizer( sessionFactory, PositiveTwoIncrementSize.class, NoopOptimizer.class );

			session = sessionFactory.openSession();
			session.getTransaction().begin();

			// initial value is -5; sequence should be incremented by 1
			// (since NoopOptimizer positive default allocationSize is 1)
			for ( Integer i = -5; i <= 5; i++ ) {
				PositiveTwoIncrementSize theEntity = new PositiveTwoIncrementSize();
				session.persist( theEntity );
				assertEquals( i, theEntity.id );
			}
		}
,
(startLine=252 endLine=281 srcPath=/root/NewExperiment/hibernateFilter/01772/hibernate-core/src/test/java/org/hibernate/test/id/sequence/NegativeValueSequenceTest.java)
		try {
			serviceRegistry = (ServiceRegistryImplementor) new StandardServiceRegistryBuilder()
					.applySetting( AvailableSettings.HBM2DDL_AUTO, "create-drop" )
					.build();

			Triggerable triggerable = logInspection.watchForLogMessages( "HHH000116" );

			Metadata metadata = new MetadataSources( serviceRegistry )
					.addAnnotatedClass( PositiveTwoIncrementSize.class )
					.buildMetadata();

			// PositiveTwoIncrementSize ID has allocationSize == 2, so PooledOptimizer should be used.
			// Warning should not be triggered.
			assertEquals( false, triggerable.wasTriggered() );

			sessionFactory = (SessionFactoryImplementor) metadata.buildSessionFactory();

			assertOptimizer( sessionFactory, PositiveTwoIncrementSize.class, PooledOptimizer.class );

			session = sessionFactory.openSession();
			session.getTransaction().begin();

			// initial value is -5; sequence should be incremented by 1
			// (since NoopOptimizer positive default allocationSize is 1)
			for ( Integer i = -5; i <= 5; i++ ) {
				PositiveTwoIncrementSize theEntity = new PositiveTwoIncrementSize();
				session.persist( theEntity );
				assertEquals( i, theEntity.id );
			}
		}
,
(startLine=302 endLine=331 srcPath=/root/NewExperiment/hibernateFilter/01772/hibernate-core/src/test/java/org/hibernate/test/id/sequence/NegativeValueSequenceTest.java)
		try {
			serviceRegistry = (ServiceRegistryImplementor) new StandardServiceRegistryBuilder()
					.applySetting( AvailableSettings.HBM2DDL_AUTO, "create-drop" )
					.build();

			Triggerable triggerable = logInspection.watchForLogMessages( "HHH000116" );

			Metadata metadata = new MetadataSources( serviceRegistry )
					.addAnnotatedClass( NegativeTwoIncrementSizePositiveInitialValue.class )
					.buildMetadata();

			// NegativeTwoIncrementSizePositiveInitialValue ID has allocationSize == -2, so warning should be triggered.
			assertEquals( true, triggerable.wasTriggered() );

			sessionFactory = (SessionFactoryImplementor) metadata.buildSessionFactory();

			assertOptimizer( sessionFactory, NegativeTwoIncrementSizePositiveInitialValue.class, NoopOptimizer.class );

			session = sessionFactory.openSession();
			session.getTransaction().begin();

			// initial value is 5; sequence should be decremented by 1
			// (since negative NoopOptimizer negative default is -1)
			for ( Integer i = 5; i <= -5; i-- ) {
				NegativeTwoIncrementSizePositiveInitialValue theEntity =
						new NegativeTwoIncrementSizePositiveInitialValue();
				session.persist( theEntity );
				assertEquals( i, theEntity.id );
			}
		}
,
>
, <(startLine=284 endLine=302 srcPath=/root/NewExperiment/hibernateFilter/00606/hibernate-core/src/test/java/org/hibernate/test/annotations/manytoone/ManyToOneTest.java)
	public void testManyToOneNonPk() throws Exception {
		Session s = openSession();
		Transaction tx = s.beginTransaction();
		Order order = new Order();
		order.setOrderNbr( "123" );
		s.persist( order );
		OrderLine ol = new OrderLine();
		ol.setItem( "Mouse" );
		ol.setOrder( order );
		s.persist( ol );
		s.flush();
		s.clear();
		ol = (OrderLine) s.get( OrderLine.class, ol.getId() );
		assertNotNull( ol.getOrder() );
		assertEquals( "123", ol.getOrder().getOrderNbr() );
		assertTrue( ol.getOrder().getOrderLines().contains( ol ) );
		tx.rollback();
		s.close();
	}
,
(startLine=305 endLine=323 srcPath=/root/NewExperiment/hibernateFilter/00606/hibernate-core/src/test/java/org/hibernate/test/annotations/manytoone/ManyToOneTest.java)
	public void testManyToOneNonPkSecondaryTable() throws Exception {
		Session s = openSession();
		Transaction tx = s.beginTransaction();
		Order order = new Order();
		order.setOrderNbr( "123" );
		s.persist( order );
		OrderLine ol = new OrderLine();
		ol.setItem( "Mouse" );
		ol.setReplacementOrder( order );
		s.persist( ol );
		s.flush();
		s.clear();
		ol = (OrderLine) s.get( OrderLine.class, ol.getId() );
		assertNotNull( ol.getReplacementOrder() );
		assertEquals( "123", ol.getReplacementOrder().getOrderNbr() );
		assertFalse( ol.getReplacementOrder().getOrderLines().contains( ol ) );
		tx.rollback();
		s.close();
	}
,
>
, <(startLine=388 endLine=396 srcPath=/root/NewExperiment/hibernateFilter/00227/core/src/main/java/org/hibernate/impl/AbstractQueryImpl.java)
	public Query setParameter(String name, Object val, Type type) {
		if ( !parameterMetadata.getNamedParameterNames().contains( name ) ) {
			throw new IllegalArgumentException("Parameter " + name + " does not exist as a named parameter in [" + getQueryString() + "]");
		}
		else {
			 namedParameters.put( name, new TypedValue( type, val, session.getEntityMode() ) );
			 return this;
		}
	}
,
(startLine=711 endLine=717 srcPath=/root/NewExperiment/hibernateFilter/00227/core/src/main/java/org/hibernate/impl/AbstractQueryImpl.java)
	public Query setParameterList(String name, Collection vals, Type type) throws HibernateException {
		if ( !parameterMetadata.getNamedParameterNames().contains( name ) ) {
			throw new IllegalArgumentException("Parameter " + name + " does not exist as a named parameter in [" + getQueryString() + "]");
		}
		namedParameterLists.put( name, new TypedValue( type, vals, session.getEntityMode() ) );
		return this;
	}
,
>
, <(startLine=524 endLine=540 srcPath=/root/NewExperiment/hibernateFilter/00428/testsuite/src/test/java/org/hibernate/test/querycache/AbstractQueryCacheResultTransformerTest.java)
			public void check(Object results) {
				List resultList = ( List ) results;
				assertEquals( 2, resultList.size() );
				Object[] yogiObjects = ( Object[] ) resultList.get( 0 );
				assertEquals( yogiExpected, yogiObjects[ 0 ] );
				assertEquals( yogiExpected.getPreferredCourse(), yogiObjects[ 1 ] );
				Object[] shermanObjects = ( Object[] ) resultList.get( 1 );
				assertEquals( shermanExpected, shermanObjects[ 0 ] );
				assertNull( shermanObjects[ 1 ] );
				assertNull( ( ( Student ) shermanObjects[ 0 ] ).getPreferredCourse() );
				if ( areDynamicNonLazyAssociationsChecked() ) {
					assertTrue( Hibernate.isInitialized( ( ( Student )  yogiObjects[ 0 ] ).getEnrolments() ) );
					assertEquals( yogiExpected.getEnrolments(), ( ( Student ) yogiObjects[ 0 ] ).getEnrolments() );
					assertTrue( Hibernate.isInitialized( ( ( Student ) shermanObjects[ 0 ] ).getEnrolments() ) );
					assertEquals( shermanExpected.getEnrolments(), ( ( ( Student ) shermanObjects[ 0 ] ).getEnrolments() ) );
				}
			}
,
(startLine=552 endLine=567 srcPath=/root/NewExperiment/hibernateFilter/00428/testsuite/src/test/java/org/hibernate/test/querycache/AbstractQueryCacheResultTransformerTest.java)
			public void check(Object results) {
				List resultList = ( List ) results;
				assertEquals( 2, resultList.size() );
				Object[] yogiObjects = ( Object[] ) resultList.get( 0 );
				assertEquals( yogiExpected, yogiObjects[ 0 ] );
				assertEquals( yogiExpected.getName(), yogiObjects[ 1 ] );
				Object[] shermanObjects = ( Object[] ) resultList.get( 1 );
				assertEquals( shermanExpected, shermanObjects[ 0 ] );
				assertEquals( shermanExpected.getName(), shermanObjects[ 1 ] );
				if ( areDynamicNonLazyAssociationsChecked() ) {
					assertTrue( Hibernate.isInitialized( ( ( Student )  yogiObjects[ 0 ] ).getEnrolments() ) );
					assertEquals( yogiExpected.getEnrolments(), ( ( Student ) yogiObjects[ 0 ] ).getEnrolments() );
					assertTrue( Hibernate.isInitialized( ( ( Student ) shermanObjects[ 0 ] ).getEnrolments() ) );
					assertEquals( shermanExpected.getEnrolments(), ( ( ( Student ) shermanObjects[ 0 ] ).getEnrolments() ) );
				}
			}
,
(startLine=579 endLine=594 srcPath=/root/NewExperiment/hibernateFilter/00428/testsuite/src/test/java/org/hibernate/test/querycache/AbstractQueryCacheResultTransformerTest.java)
			public void check(Object results) {
				List resultList = ( List ) results;
				assertEquals( 2, resultList.size() );
				Object[] yogiObjects = ( Object[] ) resultList.get( 0 );
				assertEquals( yogiExpected.getName(), yogiObjects[ 0 ] );
				assertEquals( yogiExpected, yogiObjects[ 1 ] );
				Object[] shermanObjects = ( Object[] ) resultList.get( 1 );
				assertEquals( shermanExpected.getName(), shermanObjects[ 0 ] );
				assertEquals( shermanExpected, shermanObjects[ 1 ] );
				if ( areDynamicNonLazyAssociationsChecked() ) {
					assertTrue( Hibernate.isInitialized( ( ( Student )  yogiObjects[ 1 ] ).getEnrolments() ) );
					assertEquals( yogiExpected.getEnrolments(), ( ( Student ) yogiObjects[ 1 ] ).getEnrolments() );
					assertTrue( Hibernate.isInitialized( ( ( Student ) shermanObjects[ 1 ] ).getEnrolments() ) );
					assertEquals( shermanExpected.getEnrolments(), ( ( ( Student ) shermanObjects[ 1 ] ).getEnrolments() ) );
				}
			}
,
(startLine=606 endLine=625 srcPath=/root/NewExperiment/hibernateFilter/00428/testsuite/src/test/java/org/hibernate/test/querycache/AbstractQueryCacheResultTransformerTest.java)
			public void check(Object results) {
				List resultList = ( List ) results;
				assertEquals( 2, resultList.size() );
				Object[] yogiObjects = ( Object[] ) resultList.get( 0 );
				assertEquals( yogiExpected, yogiObjects[ 0 ] );
				assertEquals(
						yogiExpected.getPreferredCourse().getCourseCode(),
						( ( Course ) yogiObjects[ 1 ] ).getCourseCode()
				);
				Object[] shermanObjects = ( Object[]  ) resultList.get( 1 );
				assertEquals( shermanExpected, shermanObjects[ 0 ] );
				assertNull( shermanObjects[ 1 ] );
				if ( areDynamicNonLazyAssociationsChecked() ) {
					assertEquals( yogiExpected.getPreferredCourse(), yogiObjects[ 1 ] );
					assertTrue( Hibernate.isInitialized( ( ( Student ) yogiObjects[ 0 ] ).getEnrolments() ) );
					assertEquals( yogiExpected.getEnrolments(), ( ( Student ) yogiObjects[ 0 ] ).getEnrolments() );
					assertTrue( Hibernate.isInitialized( ( ( Student ) shermanObjects[ 0 ] ).getEnrolments() ) );
					assertEquals( shermanExpected.getEnrolments(), ( ( ( Student ) shermanObjects[ 0 ] ).getEnrolments() ) );
				}
			}
,
(startLine=637 endLine=656 srcPath=/root/NewExperiment/hibernateFilter/00428/testsuite/src/test/java/org/hibernate/test/querycache/AbstractQueryCacheResultTransformerTest.java)
			public void check(Object results) {
				List resultList = ( List ) results;
				assertEquals( 2, resultList.size() );
				Object[] yogiObjects = ( Object[] ) resultList.get( 0 );
				assertEquals( yogiExpected, yogiObjects[ 1 ] );
				assertEquals(
						yogiExpected.getPreferredCourse().getCourseCode(),
						( ( Course ) yogiObjects[ 0 ] ).getCourseCode()
				);
				Object[] shermanObjects = ( Object[]  ) resultList.get( 1 );
				assertEquals( shermanExpected, shermanObjects[ 1 ] );
				assertNull( shermanObjects[ 0 ] );
				if ( areDynamicNonLazyAssociationsChecked() ) {
					assertEquals( yogiExpected.getPreferredCourse(), yogiObjects[ 0 ] );
					assertTrue( Hibernate.isInitialized( ( ( Student ) yogiObjects[ 1 ] ).getEnrolments() ) );
					assertEquals( yogiExpected.getEnrolments(), ( ( Student ) yogiObjects[ 1 ] ).getEnrolments() );
					assertTrue( Hibernate.isInitialized( ( ( Student ) shermanObjects[ 1 ] ).getEnrolments() ) );
					assertEquals( shermanExpected.getEnrolments(), ( ( ( Student ) shermanObjects[ 1 ] ).getEnrolments() ) );
				}
			}
,
>
, <(startLine=63 endLine=73 srcPath=/root/NewExperiment/hibernateFilter/00080/envers/src/test/java/org/hibernate/envers/envers/test/integration/inheritance/single/ChildEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChildEntity)) return false;
        if (!super.equals(o)) return false;

        ChildEntity childEntity = (ChildEntity) o;

        if (number != null ? !number.equals(childEntity.number) : childEntity.number != null) return false;

        return true;
    }
,
(startLine=75 endLine=85 srcPath=/root/NewExperiment/hibernateFilter/00080/envers/src/test/java/org/hibernate/envers/envers/test/integration/inheritance/single/childrelation/ChildIngEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChildIngEntity)) return false;
        if (!super.equals(o)) return false;

        ChildIngEntity childEntity = (ChildIngEntity) o;

        if (number != null ? !number.equals(childEntity.number) : childEntity.number != null) return false;

        return true;
    }
,
(startLine=63 endLine=73 srcPath=/root/NewExperiment/hibernateFilter/00080/envers/src/test/java/org/hibernate/envers/envers/test/integration/inheritance/single/relation/ChildIngEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChildIngEntity)) return false;
        if (!super.equals(o)) return false;

        ChildIngEntity childEntity = (ChildIngEntity) o;

        if (number != null ? !number.equals(childEntity.number) : childEntity.number != null) return false;

        return true;
    }
,
>
, <(startLine=433 endLine=441 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/cfg/Configuration.java)
		try {
			List errors = new ArrayList();
			org.dom4j.Document doc = xmlHelper.createSAXReader( "XML String", errors, entityResolver )
					.read( new StringReader( xml ) );
			if ( errors.size() != 0 ) {
				throw new MappingException( "invalid mapping", (Throwable) errors.get( 0 ) );
			}
			add( doc );
		}
,
(startLine=497 endLine=506 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/cfg/Configuration.java)
		try {
			List errors = new ArrayList();
			org.dom4j.Document doc = xmlHelper.createSAXReader( "XML InputStream", errors, entityResolver )
					.read( new InputSource( xmlInputStream ) );
			if ( errors.size() != 0 ) {
				throw new InvalidMappingException( "invalid mapping", null, (Throwable) errors.get( 0 ) );
			}
			add( doc );
			return this;
		}
,
>
, <(startLine=114 endLine=130 srcPath=/root/NewExperiment/hibernateFilter/00359/envers/src/test/java/org/hibernate/envers/test/integration/reference/BidirectionalReference.java)
    public void testHistoryOfSet1() {
		GreetingSetPO rev1 = getAuditReader().find(GreetingSetPO.class, set1_id, 1);
		GreetingSetPO rev2 = getAuditReader().find(GreetingSetPO.class, set1_id, 2);
		GreetingSetPO rev3 = getAuditReader().find(GreetingSetPO.class, set1_id, 3);

        assert rev1.getName().equals("a1");
        assert rev2.getName().equals("a1");
		assert rev3.getName().equals("a1");

		GreetingPO g1 = new GreetingPO();
		g1.setId(g1_id);
		g1.setGreeting("g1");

		assert rev1.getGreetings().size() == 0;
		assert rev2.getGreetings().equals(TestTools.makeSet(g1));
		assert rev3.getGreetings().size() == 0;
    }
,
(startLine=133 endLine=149 srcPath=/root/NewExperiment/hibernateFilter/00359/envers/src/test/java/org/hibernate/envers/test/integration/reference/BidirectionalReference.java)
    public void testHistoryOfSet2() {
		GreetingSetPO rev1 = getAuditReader().find(GreetingSetPO.class, set2_id, 1);
		GreetingSetPO rev2 = getAuditReader().find(GreetingSetPO.class, set2_id, 2);
		GreetingSetPO rev3 = getAuditReader().find(GreetingSetPO.class, set2_id, 3);

        assert rev1.getName().equals("a2");
        assert rev2.getName().equals("a2");
		assert rev3.getName().equals("a2");

		GreetingPO g1 = new GreetingPO();
		g1.setId(g1_id);
		g1.setGreeting("g1");

		assert rev1.getGreetings().size() == 0;
		assert rev2.getGreetings().size() == 0;
		assert rev3.getGreetings().equals(TestTools.makeSet(g1));
    }
,
>
, <(startLine=272 endLine=280 srcPath=/root/NewExperiment/hibernateFilter/00162/core/src/main/java/org/hibernate/util/StringHelper.java)
	public static String toString(Object[] array) {
		int len = array.length;
		if ( len == 0 ) return "";
		StringBuffer buf = new StringBuffer( len * 12 );
		for ( int i = 0; i < len - 1; i++ ) {
			buf.append( array[i] ).append(", ");
		}
		return buf.append( array[len - 1] ).toString();
	}
,
(startLine=276 endLine=284 srcPath=/root/NewExperiment/hibernateFilter/00162/commons-annotations/src/main/java/org/hibernate/annotations/common/util/StringHelper.java)
	public static String toString(Object[] array) {
		int len = array.length;
		if ( len == 0 ) return "";
		StringBuffer buf = new StringBuffer( len * 12 );
		for ( int i = 0; i < len - 1; i++ ) {
			buf.append( array[i] ).append(", ");
		}
		return buf.append( array[len - 1] ).toString();
	}
,
>
, <(startLine=162 endLine=182 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/tool/hbm2ddl/SchemaExportTask.java)
	private String[] getFiles() {

		List files = new LinkedList();
		for ( Iterator i = fileSets.iterator(); i.hasNext(); ) {

			FileSet fs = (FileSet) i.next();
			DirectoryScanner ds = fs.getDirectoryScanner( getProject() );

			String[] dsFiles = ds.getIncludedFiles();
			for (int j = 0; j < dsFiles.length; j++) {
				File f = new File(dsFiles[j]);
				if ( !f.isFile() ) {
					f = new File( ds.getBasedir(), dsFiles[j] );
				}

				files.add( f.getAbsolutePath() );
			}
		}

		return ArrayHelper.toStringArray(files);
	}
,
(startLine=119 endLine=139 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/tool/hbm2ddl/SchemaUpdateTask.java)
	private String[] getFiles() {

		List files = new LinkedList();
		for ( Iterator i = fileSets.iterator(); i.hasNext(); ) {

			FileSet fs = (FileSet) i.next();
			DirectoryScanner ds = fs.getDirectoryScanner( getProject() );

			String[] dsFiles = ds.getIncludedFiles();
			for (int j = 0; j < dsFiles.length; j++) {
				File f = new File(dsFiles[j]);
				if ( !f.isFile() ) {
					f = new File( ds.getBasedir(), dsFiles[j] );
				}

				files.add( f.getAbsolutePath() );
			}
		}

		return ArrayHelper.toStringArray(files);
	}
,
(startLine=98 endLine=118 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/tool/hbm2ddl/SchemaValidatorTask.java)
	private String[] getFiles() {

		List files = new LinkedList();
		for ( Iterator i = fileSets.iterator(); i.hasNext(); ) {

			FileSet fs = (FileSet) i.next();
			DirectoryScanner ds = fs.getDirectoryScanner( getProject() );

			String[] dsFiles = ds.getIncludedFiles();
			for (int j = 0; j < dsFiles.length; j++) {
				File f = new File(dsFiles[j]);
				if ( !f.isFile() ) {
					f = new File( ds.getBasedir(), dsFiles[j] );
				}

				files.add( f.getAbsolutePath() );
			}
		}

		return ArrayHelper.toStringArray(files);
	}
,
>
, <(startLine=105 endLine=153 srcPath=/root/NewExperiment/hibernateFilter/00456/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlyTest.java)
	public void testReadOnlyMode() {

		clearCounts();

		Session s = openSession();
		Transaction t = s.beginTransaction();
		for ( int i=0; i<100; i++ ) {
			DataPoint dp = new DataPoint();
			dp.setX( new BigDecimal(i * 0.1d).setScale(19, BigDecimal.ROUND_DOWN) );
			dp.setY( new BigDecimal( Math.cos( dp.getX().doubleValue() ) ).setScale(19, BigDecimal.ROUND_DOWN) );
			s.save(dp);
		}
		t.commit();
		s.close();

		assertInsertCount( 100 );
		assertUpdateCount( 0 );
		clearCounts();

		s = openSession();
		t = s.beginTransaction();
		int i = 0;
		ScrollableResults sr = s.createQuery("from DataPoint dp order by dp.x asc")
				.setReadOnly(true)
				.scroll(ScrollMode.FORWARD_ONLY);
		while ( sr.next() ) {
			DataPoint dp = (DataPoint) sr.get(0);
			if (++i==50) {
				s.setReadOnly(dp, false);
			}
			dp.setDescription("done!");
		}
		t.commit();

		assertUpdateCount( 1 );
		clearCounts();

		s.clear();
		t = s.beginTransaction();
		List single = s.createQuery("from DataPoint where description='done!'").list();
		assertEquals( single.size(), 1 );
		assertEquals( 100, s.createQuery("delete from DataPoint").executeUpdate() );
		t.commit();
		s.close();

		assertUpdateCount( 0 );
		//deletes from Query.executeUpdate() are not tracked
		//assertDeleteCount( 100 );
	}
,
(startLine=101 endLine=138 srcPath=/root/NewExperiment/hibernateFilter/00456/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionTest.java)
	public void testReadOnlySessionDefaultQueryScroll() {

		Session s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		Transaction t = s.beginTransaction();
		for ( int i=0; i<100; i++ ) {
			DataPoint dp = new DataPoint();
			dp.setX( new BigDecimal(i * 0.1d).setScale(19, BigDecimal.ROUND_DOWN) );
			dp.setY( new BigDecimal( Math.cos( dp.getX().doubleValue() ) ).setScale(19, BigDecimal.ROUND_DOWN) );
			s.save(dp);
		}
		t.commit();
		s.close();

		s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		t = s.beginTransaction();
		s.setDefaultReadOnly( true );
		int i = 0;
		ScrollableResults sr = s.createQuery("from DataPoint dp order by dp.x asc")
				.scroll(ScrollMode.FORWARD_ONLY);
		s.setDefaultReadOnly( false );
		while ( sr.next() ) {
			DataPoint dp = (DataPoint) sr.get(0);
			if (++i==50) {
				s.setReadOnly(dp, false);
			}
			dp.setDescription("done!");
		}
		t.commit();
		s.clear();
		t = s.beginTransaction();
		List single = s.createQuery("from DataPoint where description='done!'").list();
		assertEquals( 1, single.size() );
		s.createQuery("delete from DataPoint").executeUpdate();
		t.commit();
		s.close();
	}
,
(startLine=140 endLine=177 srcPath=/root/NewExperiment/hibernateFilter/00456/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionTest.java)
	public void testReadOnlySessionModifiableQueryScroll() {

		Session s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		Transaction t = s.beginTransaction();
		for ( int i=0; i<100; i++ ) {
			DataPoint dp = new DataPoint();
			dp.setX( new BigDecimal(i * 0.1d).setScale(19, BigDecimal.ROUND_DOWN) );
			dp.setY( new BigDecimal( Math.cos( dp.getX().doubleValue() ) ).setScale(19, BigDecimal.ROUND_DOWN) );
			s.save(dp);
		}
		t.commit();
		s.close();

		s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		t = s.beginTransaction();
		s.setDefaultReadOnly( true );
		int i = 0;
		ScrollableResults sr = s.createQuery("from DataPoint dp order by dp.x asc")
				.setReadOnly( false )
				.scroll(ScrollMode.FORWARD_ONLY);
		while ( sr.next() ) {
			DataPoint dp = (DataPoint) sr.get(0);
			if (++i==50) {
				s.setReadOnly(dp, true);
			}
			dp.setDescription("done!");
		}
		t.commit();
		s.clear();
		t = s.beginTransaction();
		List list = s.createQuery("from DataPoint where description='done!'").list();
		assertEquals( 99, list.size() );
		s.createQuery("delete from DataPoint").executeUpdate();
		t.commit();
		s.close();
	}
,
(startLine=179 endLine=216 srcPath=/root/NewExperiment/hibernateFilter/00456/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionTest.java)
	public void testModifiableSessionReadOnlyQueryScroll() {

		Session s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		Transaction t = s.beginTransaction();
		for ( int i=0; i<100; i++ ) {
			DataPoint dp = new DataPoint();
			dp.setX( new BigDecimal(i * 0.1d).setScale(19, BigDecimal.ROUND_DOWN) );
			dp.setY( new BigDecimal( Math.cos( dp.getX().doubleValue() ) ).setScale(19, BigDecimal.ROUND_DOWN) );
			s.save(dp);
		}
		t.commit();
		s.close();

		s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		t = s.beginTransaction();
		assertFalse( s.isDefaultReadOnly() );
		int i = 0;
		ScrollableResults sr = s.createQuery("from DataPoint dp order by dp.x asc")
				.setReadOnly( true )
				.scroll(ScrollMode.FORWARD_ONLY);
		while ( sr.next() ) {
			DataPoint dp = (DataPoint) sr.get(0);
			if (++i==50) {
				s.setReadOnly(dp, false);
			}
			dp.setDescription("done!");
		}
		t.commit();
		s.clear();
		t = s.beginTransaction();
		List single = s.createQuery("from DataPoint where description='done!'").list();
		assertEquals( 1, single.size() );
		s.createQuery("delete from DataPoint").executeUpdate();
		t.commit();
		s.close();
	}
,
(startLine=218 endLine=256 srcPath=/root/NewExperiment/hibernateFilter/00456/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionTest.java)
	public void testModifiableSessionDefaultQueryReadOnlySessionScroll() {

		Session s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		Transaction t = s.beginTransaction();
		for ( int i=0; i<100; i++ ) {
			DataPoint dp = new DataPoint();
			dp.setX( new BigDecimal(i * 0.1d).setScale(19, BigDecimal.ROUND_DOWN) );
			dp.setY( new BigDecimal( Math.cos( dp.getX().doubleValue() ) ).setScale(19, BigDecimal.ROUND_DOWN) );
			s.save(dp);
		}
		t.commit();
		s.close();

		s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		t = s.beginTransaction();
		s.setDefaultReadOnly( false );
		int i = 0;
		Query query = s.createQuery("from DataPoint dp order by dp.x asc");
		s.setDefaultReadOnly( true );
		ScrollableResults sr = query.scroll(ScrollMode.FORWARD_ONLY);
		s.setDefaultReadOnly( false );
		while ( sr.next() ) {
			DataPoint dp = (DataPoint) sr.get(0);
			if (++i==50) {
				s.setReadOnly(dp, false);
			}
			dp.setDescription("done!");
		}
		t.commit();
		s.clear();
		t = s.beginTransaction();
		List single = s.createQuery("from DataPoint where description='done!'").list();
		assertEquals( 1, single.size() );
		s.createQuery("delete from DataPoint").executeUpdate();
		t.commit();
		s.close();
	}
,
(startLine=409 endLine=446 srcPath=/root/NewExperiment/hibernateFilter/00456/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionTest.java)
	public void testReadOnlySessionDefaultQueryIterate() {

		Session s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		Transaction t = s.beginTransaction();
		for ( int i=0; i<100; i++ ) {
			DataPoint dp = new DataPoint();
			dp.setX( new BigDecimal(i * 0.1d).setScale(19, BigDecimal.ROUND_DOWN) );
			dp.setY( new BigDecimal( Math.cos( dp.getX().doubleValue() ) ).setScale(19, BigDecimal.ROUND_DOWN) );
			s.save(dp);
		}
		t.commit();
		s.close();

		s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		t = s.beginTransaction();
		s.setDefaultReadOnly( true );
		int i = 0;
		Iterator it = s.createQuery("from DataPoint dp order by dp.x asc")
				.iterate();
		s.setDefaultReadOnly( false );
		while ( it.hasNext() ) {
			DataPoint dp = (DataPoint) it.next();
			if (++i==50) {
				s.setReadOnly(dp, false);
			}
			dp.setDescription("done!");
		}
		t.commit();
		s.clear();
		t = s.beginTransaction();
		List single = s.createQuery("from DataPoint where description='done!'").list();
		assertEquals( 1, single.size() );
		s.createQuery("delete from DataPoint").executeUpdate();
		t.commit();
		s.close();
	}
,
(startLine=448 endLine=485 srcPath=/root/NewExperiment/hibernateFilter/00456/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionTest.java)
	public void testReadOnlySessionModifiableQueryIterate() {

		Session s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		Transaction t = s.beginTransaction();
		for ( int i=0; i<100; i++ ) {
			DataPoint dp = new DataPoint();
			dp.setX( new BigDecimal(i * 0.1d).setScale(19, BigDecimal.ROUND_DOWN) );
			dp.setY( new BigDecimal( Math.cos( dp.getX().doubleValue() ) ).setScale(19, BigDecimal.ROUND_DOWN) );
			s.save(dp);
		}
		t.commit();
		s.close();

		s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		t = s.beginTransaction();
		s.setDefaultReadOnly( true );
		int i = 0;
		Iterator it = s.createQuery("from DataPoint dp order by dp.x asc")
				.setReadOnly( false )
				.iterate();
		while ( it.hasNext() ) {
			DataPoint dp = (DataPoint) it.next();
			if (++i==50) {
				s.setReadOnly(dp, true);
			}
			dp.setDescription("done!");
		}
		t.commit();
		s.clear();
		t = s.beginTransaction();
		List list = s.createQuery("from DataPoint where description='done!'").list();
		assertEquals( 99, list.size() );
		s.createQuery("delete from DataPoint").executeUpdate();
		t.commit();
		s.close();
	}
,
(startLine=487 endLine=524 srcPath=/root/NewExperiment/hibernateFilter/00456/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionTest.java)
	public void testModifiableSessionReadOnlyQueryIterate() {

		Session s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		Transaction t = s.beginTransaction();
		for ( int i=0; i<100; i++ ) {
			DataPoint dp = new DataPoint();
			dp.setX( new BigDecimal(i * 0.1d).setScale(19, BigDecimal.ROUND_DOWN) );
			dp.setY( new BigDecimal( Math.cos( dp.getX().doubleValue() ) ).setScale(19, BigDecimal.ROUND_DOWN) );
			s.save(dp);
		}
		t.commit();
		s.close();

		s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		t = s.beginTransaction();
		assertFalse( s.isDefaultReadOnly() );
		int i = 0;
		Iterator it = s.createQuery("from DataPoint dp order by dp.x asc")
				.setReadOnly( true )
				.iterate();
		while ( it.hasNext() ) {
			DataPoint dp = (DataPoint) it.next();
			if (++i==50) {
				s.setReadOnly(dp, false);
			}
			dp.setDescription("done!");
		}
		t.commit();
		s.clear();
		t = s.beginTransaction();
		List single = s.createQuery("from DataPoint where description='done!'").list();
		assertEquals( 1, single.size() );
		s.createQuery("delete from DataPoint").executeUpdate();
		t.commit();
		s.close();
	}
,
(startLine=526 endLine=564 srcPath=/root/NewExperiment/hibernateFilter/00456/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionTest.java)
	public void testModifiableSessionDefaultQueryReadOnlySessionIterate() {

		Session s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		Transaction t = s.beginTransaction();
		for ( int i=0; i<100; i++ ) {
			DataPoint dp = new DataPoint();
			dp.setX( new BigDecimal(i * 0.1d).setScale(19, BigDecimal.ROUND_DOWN) );
			dp.setY( new BigDecimal( Math.cos( dp.getX().doubleValue() ) ).setScale(19, BigDecimal.ROUND_DOWN) );
			s.save(dp);
		}
		t.commit();
		s.close();

		s = openSession();
		s.setCacheMode(CacheMode.IGNORE);
		t = s.beginTransaction();
		s.setDefaultReadOnly( false );
		int i = 0;
		Query query = s.createQuery("from DataPoint dp order by dp.x asc");
		s.setDefaultReadOnly( true );
		Iterator it = query.iterate();
		s.setDefaultReadOnly( false );
		while ( it.hasNext() ) {
			DataPoint dp = (DataPoint) it.next();
			if (++i==50) {
				s.setReadOnly(dp, false);
			}
			dp.setDescription("done!");
		}
		t.commit();
		s.clear();
		t = s.beginTransaction();
		List single = s.createQuery("from DataPoint where description='done!'").list();
		assertEquals( 1, single.size() );
		s.createQuery("delete from DataPoint").executeUpdate();
		t.commit();
		s.close();
	}
,
>
, <(startLine=537 endLine=550 srcPath=/root/NewExperiment/hibernateFilter/00075/annotations/src/java/org/hibernate/cfg/annotations/CollectionBinder.java)
	) {

		return new CollectionSecondPass( mappings, collection ) {

			public void secondPass(java.util.Map persistentClasses, java.util.Map inheritedMetas)
					throws MappingException {
				bindStarToManySecondPass(
						persistentClasses, collType, fkJoinColumns, keyColumns, inverseColumns, elementColumns,
						isEmbedded, property, unique, assocTableBinder, ignoreNotFound, mappings
				);

			}
		};
	}
,
(startLine=62 endLine=73 srcPath=/root/NewExperiment/hibernateFilter/00075/annotations/src/java/org/hibernate/cfg/annotations/ListBinder.java)
	) {
		return new CollectionSecondPass( mappings, ListBinder.this.collection ) {
			public void secondPass(Map persistentClasses, Map inheritedMetas)
					throws MappingException {
				bindStarToManySecondPass(
						persistentClasses, collType, fkJoinColumns, keyColumns, inverseColumns, elementColumns,
						isEmbedded, property, unique, assocTableBinder, ignoreNotFound, mappings
				);
				bindIndex( mappings );
			}
		};
	}
,
>
, <(startLine=46 endLine=65 srcPath=/root/NewExperiment/hibernateFilter/01661/hibernate-core/src/main/java/org/hibernate/property/access/spi/SetterMethodImpl.java)
		catch (NullPointerException npe) {
			if ( value == null && isPrimitive ) {
				throw new PropertyAccessException(
						npe,
						"Null value was assigned to a property of primitive type",
						true,
						containerClass,
						propertyName
				);
			}
			else {
				throw new PropertyAccessException(
						npe,
						"NullPointerException occurred while calling",
						true,
						containerClass,
						propertyName
				);
			}
		}
,
(startLine=65 endLine=84 srcPath=/root/NewExperiment/hibernateFilter/01661/hibernate-core/src/main/java/org/hibernate/property/access/spi/EnhancedSetterImpl.java)
		catch (NullPointerException npe) {
			if ( value == null && isPrimitive ) {
				throw new PropertyAccessException(
						npe,
						"Null value was assigned to a property of primitive type",
						true,
						containerClass,
						propertyName
				);
			}
			else {
				throw new PropertyAccessException(
						npe,
						"NullPointerException occurred while calling",
						true,
						containerClass,
						propertyName
				);
			}
		}
,
>
, <(startLine=80 endLine=99 srcPath=/root/NewExperiment/hibernateFilter/01723/hibernate-core/src/test/java/org/hibernate/jpa/test/procedure/StoreProcedureRefCursorOutParameterByNameTest.java)
			try {
				Statement statement = conn.createStatement();

				statement.execute(
						"CREATE OR REPLACE PROCEDURE PROC_EXAMPLE ( " +
								"  USER_NAME_PARAM IN VARCHAR2, CURSOR_PARAM OUT SYS_REFCURSOR ) " +
								"AS " +
								"BEGIN " +
								"  OPEN CURSOR_PARAM FOR " +
								"  SELECT * FROM USERS WHERE NAME = USER_NAME_PARAM; " +
								"END PROC_EXAMPLE; "
				);

				try {
					statement.close();
				}
				catch (SQLException ignore) {
					fail();
				}
			}
,
(startLine=80 endLine=99 srcPath=/root/NewExperiment/hibernateFilter/01723/hibernate-core/src/test/java/org/hibernate/jpa/test/procedure/StoreProcedureRefCursorOutParameterByPositionTest.java)
			try {
				Statement statement = conn.createStatement();

				statement.execute(
						"CREATE OR REPLACE PROCEDURE PROC_EXAMPLE ( " +
								"  USER_NAME_PARAM IN VARCHAR2, CURSOR_PARAM OUT SYS_REFCURSOR ) " +
								"AS " +
								"BEGIN " +
								"  OPEN CURSOR_PARAM FOR " +
								"  SELECT * FROM USERS WHERE NAME = USER_NAME_PARAM; " +
								"END PROC_EXAMPLE; "
				);

				try {
					statement.close();
				}
				catch (SQLException ignore) {
					fail();
				}
			}
,
>
, <(startLine=74 endLine=96 srcPath=/root/NewExperiment/hibernateFilter/01131/hibernate-entitymanager/src/test/java/org/hibernate/jpa/test/transaction/TransactionJoiningTest.java)
	public void testImplicitJoining() throws Exception {
		// here the transaction is started before the EM is opened...

		assertFalse( JtaStatusHelper.isActive( TestingJtaPlatformImpl.INSTANCE.getTransactionManager() ) );

		TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
		EntityManager entityManager = entityManagerFactory().createEntityManager();
		SessionImplementor session = entityManager.unwrap( SessionImplementor.class );
		Transaction hibernateTransaction = ( (Session) session ).getTransaction();
		assertTrue( CMTTransaction.class.isInstance( hibernateTransaction ) );
		assertTrue( session.getTransactionCoordinator().isSynchronizationRegistered() );
		assertTrue( hibernateTransaction.isParticipating() );

		assertTrue( entityManager.isOpen() );
		assertTrue( session.isOpen() );
		entityManager.close();
		assertFalse( entityManager.isOpen() );
		assertTrue( session.isOpen() );

		TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
		assertFalse( entityManager.isOpen() );
		assertFalse( session.isOpen() );
	}
,
(startLine=99 endLine=119 srcPath=/root/NewExperiment/hibernateFilter/01131/hibernate-entitymanager/src/test/java/org/hibernate/jpa/test/transaction/TransactionJoiningTest.java)
	public void testCloseAfterCommit() throws Exception {
		assertFalse( JtaStatusHelper.isActive( TestingJtaPlatformImpl.INSTANCE.getTransactionManager() ) );

		TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
		EntityManager entityManager = entityManagerFactory().createEntityManager();
		SessionImplementor session = entityManager.unwrap( SessionImplementor.class );
		Transaction hibernateTransaction = ( (Session) session ).getTransaction();
		assertTrue( CMTTransaction.class.isInstance( hibernateTransaction ) );
		assertTrue( session.getTransactionCoordinator().isSynchronizationRegistered() );
		assertTrue( hibernateTransaction.isParticipating() );

		assertTrue( entityManager.isOpen() );
		assertTrue( session.isOpen() );
		TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
		assertTrue( entityManager.isOpen() );
		assertTrue( session.isOpen() );

		entityManager.close();
		assertFalse( entityManager.isOpen() );
		assertFalse( session.isOpen() );
	}
,
>
, <(startLine=1006 endLine=1094 srcPath=/root/NewExperiment/hibernateFilter/00506/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionLazyNonLazyTest.java)
	public void testDefaultReadOnlyWithModifiableFilterCollectionEntities() {
		Container cOrig = createContainer();
		Set expectedInitializedObjects = new HashSet(
				Arrays.asList(
						cOrig,
						cOrig.getNoProxyInfo(),
						cOrig.getProxyInfo(),
						cOrig.getNonLazyInfo(),
						cOrig.getNoProxyOwner(),
						cOrig.getProxyOwner(),
						cOrig.getNonLazyOwner(),
						cOrig.getLazyDataPoints().iterator().next(),
						cOrig.getNonLazyJoinDataPoints().iterator().next(),
						cOrig.getNonLazySelectDataPoints().iterator().next()
				)
		);
		Set expectedReadOnlyObjects = new HashSet();

		Session s = openSession();
		assertFalse( s.isDefaultReadOnly() );
		Transaction t = s.beginTransaction();
		s.save( cOrig );
		checkContainer( cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s );
		s.setDefaultReadOnly( true );
		assertTrue( s.isDefaultReadOnly() );
		checkContainer( cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s );
		t.commit();
		s.close();

		s = openSession();
		t = s.beginTransaction();
		s.setDefaultReadOnly( true );
		assertTrue( s.isDefaultReadOnly() );
		Container c = ( Container ) s.get( Container.class, cOrig.getId() );
		assertNotSame( cOrig, c );
		expectedInitializedObjects = new HashSet(
				Arrays.asList(
						c,
						c.getNonLazyInfo(),
						c.getNoProxyOwner(),
						c.getProxyOwner(),
						c.getNonLazyOwner(),
						c.getNonLazyJoinDataPoints().iterator().next(),
						c.getNonLazySelectDataPoints().iterator().next()
				)
		);
		expectedReadOnlyObjects = new HashSet(
				Arrays.asList(
						c,
						c.getNoProxyInfo(),
						c.getProxyInfo(),
						c.getNonLazyInfo(),
						c.getNoProxyOwner(),
						c.getProxyOwner(),
						c.getNonLazyOwner(),
						//c.getLazyDataPoints(),
						c.getNonLazyJoinDataPoints().iterator().next(),
						c.getNonLazySelectDataPoints().iterator().next()
				)
		);
		List list = ( List ) s.createFilter( c.getLazyDataPoints(), "" )
				.setMaxResults(1)
				.setReadOnly( false )
				.list();
		assertEquals( 1, list.size() );
		assertFalse( s.isReadOnly( list.get( 0 ) ) );
		list = ( List ) s.createFilter( c.getNonLazyJoinDataPoints(), "" )
				.setMaxResults(1)
				.setReadOnly( false )
				.list();
		assertEquals( 1, list.size() );
		assertTrue( s.isReadOnly( list.get( 0 ) ) );
		list = ( List ) s.createFilter( c.getNonLazySelectDataPoints(), "" )
				.setMaxResults(1)
				.setReadOnly( false )
				.list();
		assertEquals( 1, list.size() );
		assertTrue( s.isReadOnly( list.get( 0 ) ) );
		t.commit();
		s.close();
		s = openSession();
		t = s.beginTransaction();
		s.createQuery("delete from DataPoint").executeUpdate();
		s.createQuery("delete from Container").executeUpdate();
		s.createQuery("delete from Info").executeUpdate();
		s.createQuery("delete from Owner").executeUpdate();
		t.commit();
		s.close();
	}
,
(startLine=1098 endLine=1172 srcPath=/root/NewExperiment/hibernateFilter/00506/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionLazyNonLazyTest.java)
	public void testDefaultModifiableWithReadOnlyFilterCollectionEntities() {
		Container cOrig = createContainer();
		Set expectedInitializedObjects = new HashSet(
				Arrays.asList(
						cOrig,
						cOrig.getNoProxyInfo(),
						cOrig.getProxyInfo(),
						cOrig.getNonLazyInfo(),
						cOrig.getNoProxyOwner(),
						cOrig.getProxyOwner(),
						cOrig.getNonLazyOwner(),
						cOrig.getLazyDataPoints().iterator().next(),
						cOrig.getNonLazyJoinDataPoints().iterator().next(),
						cOrig.getNonLazySelectDataPoints().iterator().next()
				)
		);
		Set expectedReadOnlyObjects = new HashSet();

		Session s = openSession();
		assertFalse( s.isDefaultReadOnly() );
		Transaction t = s.beginTransaction();
		s.save( cOrig );
		checkContainer( cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s );
		s.setDefaultReadOnly( true );
		assertTrue( s.isDefaultReadOnly() );
		checkContainer( cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s );
		t.commit();
		s.close();

		s = openSession();
		t = s.beginTransaction();
		assertFalse( s.isDefaultReadOnly() );
		Container c = ( Container ) s.get( Container.class, cOrig.getId() );
		assertNotSame( cOrig, c );
		expectedInitializedObjects = new HashSet(
				Arrays.asList(
						c,
						c.getNonLazyInfo(),
						c.getNoProxyOwner(),
						c.getProxyOwner(),
						c.getNonLazyOwner(),
						c.getNonLazyJoinDataPoints().iterator().next(),
						c.getNonLazySelectDataPoints().iterator().next()
				)
		);
		expectedReadOnlyObjects = new HashSet();
		List list = ( List ) s.createFilter( c.getLazyDataPoints(), "" )
				.setMaxResults(1)
				.setReadOnly( true )
				.list();
		assertEquals( 1, list.size() );
		assertTrue( s.isReadOnly( list.get( 0 ) ) );
		list = ( List ) s.createFilter( c.getNonLazyJoinDataPoints(), "" )
				.setMaxResults(1)
				.setReadOnly( true )
				.list();
		assertEquals( 1, list.size() );
		assertFalse( s.isReadOnly( list.get( 0 ) ) );
		list = ( List ) s.createFilter( c.getNonLazySelectDataPoints(), "" )
				.setMaxResults(1)
				.setReadOnly( true )
				.list();
		assertEquals( 1, list.size() );
		assertFalse( s.isReadOnly( list.get( 0 ) ) );
		t.commit();
		s.close();
		s = openSession();
		t = s.beginTransaction();
		s.createQuery("delete from DataPoint").executeUpdate();
		s.createQuery("delete from Container").executeUpdate();
		s.createQuery("delete from Info").executeUpdate();
		s.createQuery("delete from Owner").executeUpdate();
		t.commit();
		s.close();
	}
,
(startLine=1176 endLine=1261 srcPath=/root/NewExperiment/hibernateFilter/00506/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionLazyNonLazyTest.java)
	public void testDefaultReadOnlyWithFilterCollectionEntities() {
		Container cOrig = createContainer();
		Set expectedInitializedObjects = new HashSet(
				Arrays.asList(
						cOrig,
						cOrig.getNoProxyInfo(),
						cOrig.getProxyInfo(),
						cOrig.getNonLazyInfo(),
						cOrig.getNoProxyOwner(),
						cOrig.getProxyOwner(),
						cOrig.getNonLazyOwner(),
						cOrig.getLazyDataPoints().iterator().next(),
						cOrig.getNonLazyJoinDataPoints().iterator().next(),
						cOrig.getNonLazySelectDataPoints().iterator().next()
				)
		);
		Set expectedReadOnlyObjects = new HashSet();

		Session s = openSession();
		assertFalse( s.isDefaultReadOnly() );
		Transaction t = s.beginTransaction();
		s.save( cOrig );
		checkContainer( cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s );
		s.setDefaultReadOnly( true );
		assertTrue( s.isDefaultReadOnly() );
		checkContainer( cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s );
		t.commit();
		s.close();

		s = openSession();
		t = s.beginTransaction();
		s.setDefaultReadOnly( true );
		assertTrue( s.isDefaultReadOnly() );
		Container c = ( Container ) s.get( Container.class, cOrig.getId() );
		assertNotSame( cOrig, c );
		expectedInitializedObjects = new HashSet(
				Arrays.asList(
						c,
						c.getNonLazyInfo(),
						c.getNoProxyOwner(),
						c.getProxyOwner(),
						c.getNonLazyOwner(),
						c.getNonLazyJoinDataPoints().iterator().next(),
						c.getNonLazySelectDataPoints().iterator().next()
				)
		);
		expectedReadOnlyObjects = new HashSet(
				Arrays.asList(
						c,
						c.getNoProxyInfo(),
						c.getProxyInfo(),
						c.getNonLazyInfo(),
						c.getNoProxyOwner(),
						c.getProxyOwner(),
						c.getNonLazyOwner(),
						//c.getLazyDataPoints(),
						c.getNonLazyJoinDataPoints().iterator().next(),
						c.getNonLazySelectDataPoints().iterator().next()
				)
		);
		List list = ( List ) s.createFilter( c.getLazyDataPoints(), "" )
				.setMaxResults( 1 )
				.list();
		assertEquals( 1, list.size() );
		assertTrue( s.isReadOnly( list.get( 0 ) ) );
		list = ( List ) s.createFilter( c.getNonLazyJoinDataPoints(), "" )
				.setMaxResults( 1 )
				.list();
		assertEquals( 1, list.size() );
		assertTrue( s.isReadOnly( list.get( 0 ) ) );
		list = ( List ) s.createFilter( c.getNonLazySelectDataPoints(), "" )
				.setMaxResults( 1 )
				.list();
		assertEquals( 1, list.size() );
		assertTrue( s.isReadOnly( list.get( 0 ) ) );
		t.commit();
		s.close();
		s = openSession();
		t = s.beginTransaction();
		s.createQuery("delete from DataPoint").executeUpdate();
		s.createQuery("delete from Container").executeUpdate();
		s.createQuery("delete from Info").executeUpdate();
		s.createQuery("delete from Owner").executeUpdate();
		t.commit();
		s.close();
	}
,
(startLine=1265 endLine=1336 srcPath=/root/NewExperiment/hibernateFilter/00506/hibernate-core/src/test/java/org/hibernate/test/readonly/ReadOnlySessionLazyNonLazyTest.java)
	public void testDefaultModifiableWithFilterCollectionEntities() {
		Container cOrig = createContainer();
		Set expectedInitializedObjects = new HashSet(
				Arrays.asList(
						cOrig,
						cOrig.getNoProxyInfo(),
						cOrig.getProxyInfo(),
						cOrig.getNonLazyInfo(),
						cOrig.getNoProxyOwner(),
						cOrig.getProxyOwner(),
						cOrig.getNonLazyOwner(),
						cOrig.getLazyDataPoints().iterator().next(),
						cOrig.getNonLazyJoinDataPoints().iterator().next(),
						cOrig.getNonLazySelectDataPoints().iterator().next()
				)
		);
		Set expectedReadOnlyObjects = new HashSet();

		Session s = openSession();
		assertFalse( s.isDefaultReadOnly() );
		Transaction t = s.beginTransaction();
		s.save( cOrig );
		checkContainer( cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s );
		s.setDefaultReadOnly( true );
		assertTrue( s.isDefaultReadOnly() );
		checkContainer( cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s );
		t.commit();
		s.close();

		s = openSession();
		t = s.beginTransaction();
		assertFalse( s.isDefaultReadOnly() );
		Container c = ( Container ) s.get( Container.class, cOrig.getId() );
		assertNotSame( cOrig, c );
		expectedInitializedObjects = new HashSet(
				Arrays.asList(
						c,
						c.getNonLazyInfo(),
						c.getNoProxyOwner(),
						c.getProxyOwner(),
						c.getNonLazyOwner(),
						c.getNonLazyJoinDataPoints().iterator().next(),
						c.getNonLazySelectDataPoints().iterator().next()
				)
		);
		expectedReadOnlyObjects = new HashSet();
		List list = ( List ) s.createFilter( c.getLazyDataPoints(), "" )
				.setMaxResults( 1 )
				.list();
		assertEquals( 1, list.size() );
		assertFalse( s.isReadOnly( list.get( 0 ) ) );
		list = ( List ) s.createFilter( c.getNonLazyJoinDataPoints(), "" )
				.setMaxResults( 1 )
				.list();
		assertEquals( 1, list.size() );
		assertFalse( s.isReadOnly( list.get( 0 ) ) );
		list = ( List ) s.createFilter( c.getNonLazySelectDataPoints(), "" )
				.setMaxResults( 1 )
				.list();
		assertEquals( 1, list.size() );
		assertFalse( s.isReadOnly( list.get( 0 ) ) );
		t.commit();
		s.close();
		s = openSession();
		t = s.beginTransaction();
		s.createQuery("delete from DataPoint").executeUpdate();
		s.createQuery("delete from Container").executeUpdate();
		s.createQuery("delete from Info").executeUpdate();
		s.createQuery("delete from Owner").executeUpdate();
		t.commit();
		s.close();
	}
,
>
, <(startLine=28 endLine=63 srcPath=/root/NewExperiment/hibernateFilter/00378/envers/src/test/java/org/hibernate/envers/test/entityNames/oneToManyNotAudited/ReadEntityWithAuditedCollectionTest.java)
    public void initData() {
    	
    	newSessionFactory();

        Person pers1 = new Person("Hernan", 28);
        Person pers2 = new Person("Leandro", 29);
        Person pers3 = new Person("Barba", 32);
        Person pers4 = new Person("Camomo", 15);

        List<Person > owners = new ArrayList<Person>();
        owners.add(pers1);
        owners.add(pers2);
        Car car1 = new Car(5, owners);

        //REV 1 
        getSession().getTransaction().begin();
        getSession().persist(car1);
        getSession().getTransaction().commit();
        id_pers1 = pers1.getId();
        id_car1 = car1.getId();

        owners = new ArrayList<Person>();
        owners.add(pers2);
        owners.add(pers4);
        Car car2 = new Car(27, owners);
        //REV 2
        getSession().getTransaction().begin();
        Person person1 = (Person)getSession().get("Personaje", id_pers1);
        person1.setName("Hernan David");
        person1.setAge(40);
        getSession().persist(car1);
        getSession().persist(car2);
        getSession().getTransaction().commit();
        id_car2 = car2.getId();

    }
,
(startLine=33 endLine=68 srcPath=/root/NewExperiment/hibernateFilter/00378/envers/src/test/java/org/hibernate/envers/test/entityNames/oneToManyAudited/ReadEntityWithAuditedCollectionTest.java)
    public void initData() {
    	
    	newSessionFactory();

        Person pers1 = new Person("Hernan", 28);
        Person pers2 = new Person("Leandro", 29);
        Person pers3 = new Person("Barba", 32);
        Person pers4 = new Person("Camomo", 15);

        List<Person > owners = new ArrayList<Person>();
        owners.add(pers1);
        owners.add(pers2);
        Car car1 = new Car(5, owners);

        //REV 1 
        getSession().getTransaction().begin();
        getSession().persist(car1);
        getSession().getTransaction().commit();
        id_pers1 = pers1.getId();
        id_car1 = car1.getId();

        owners = new ArrayList<Person>();
        owners.add(pers2);
        owners.add(pers4);
        Car car2 = new Car(27, owners);
        //REV 2
        getSession().getTransaction().begin();
        Person person1 = (Person)getSession().get("Personaje", id_pers1);
        person1.setName("Hernan David");
        person1.setAge(40);
        getSession().persist(car1);
        getSession().persist(car2);
        getSession().getTransaction().commit();
        id_car2 = car2.getId();

    }
,
(startLine=33 endLine=70 srcPath=/root/NewExperiment/hibernateFilter/00378/envers/src/test/java/org/hibernate/envers/test/entityNames/manyToManyAudited/ReadEntityWithAuditedManyToManyTest.java)
    public void initData() {
    	
    	newSessionFactory();

        Person pers1 = new Person("Hernan", 28);
        Person pers2 = new Person("Leandro", 29);
        Person pers3 = new Person("Barba", 32);
        Person pers4 = new Person("Camomo", 15);

        //REV 1 
        getSession().getTransaction().begin();
        List<Person > owners = new ArrayList<Person>();
        owners.add(pers1);
        owners.add(pers2);
        owners.add(pers3);
        Car car1 = new Car(5, owners);

        getSession().persist(car1);
        getSession().getTransaction().commit();
        id_pers1 = pers1.getId();
        id_car1 = car1.getId();

        owners = new ArrayList<Person>();
        owners.add(pers2);
        owners.add(pers3);
        owners.add(pers4);
        Car car2 = new Car(27, owners);
        //REV 2
        getSession().getTransaction().begin();
        Person person1 = (Person)getSession().get("Personaje", id_pers1);
        person1.setName("Hernan David");
        person1.setAge(40);
        getSession().persist(car1);
        getSession().persist(car2);
        getSession().getTransaction().commit();
        id_car2 = car2.getId();

    }
,
>
, <(startLine=112 endLine=134 srcPath=/root/NewExperiment/hibernateFilter/00896/hibernate-entitymanager/src/test/java/org/hibernate/jpa/test/lock/QueryLockingTest.java)
	public void testPessimisticForcedIncrementOverall() {
		EntityManager em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable lock = new Lockable( "name" );
		em.persist( lock );
		em.getTransaction().commit();
		em.close();
		Integer initial = lock.getVersion();
		assertNotNull( initial );

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable reread = em.createQuery( "from Lockable", Lockable.class ).setLockMode( LockModeType.PESSIMISTIC_FORCE_INCREMENT ).getSingleResult();
		assertFalse( reread.getVersion().equals( initial ) );
		em.getTransaction().commit();
		em.close();

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		em.remove( em.getReference( Lockable.class, reread.getId() ) );
		em.getTransaction().commit();
		em.close();
	}
,
(startLine=137 endLine=161 srcPath=/root/NewExperiment/hibernateFilter/00896/hibernate-entitymanager/src/test/java/org/hibernate/jpa/test/lock/QueryLockingTest.java)
	public void testPessimisticForcedIncrementSpecific() {
		EntityManager em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable lock = new Lockable( "name" );
		em.persist( lock );
		em.getTransaction().commit();
		em.close();
		Integer initial = lock.getVersion();
		assertNotNull( initial );

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable reread = em.createQuery( "from Lockable l", Lockable.class )
				.setHint( AvailableSettings.ALIAS_SPECIFIC_LOCK_MODE+".l", LockModeType.PESSIMISTIC_FORCE_INCREMENT )
				.getSingleResult();
		assertFalse( reread.getVersion().equals( initial ) );
		em.getTransaction().commit();
		em.close();

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		em.remove( em.getReference( Lockable.class, reread.getId() ) );
		em.getTransaction().commit();
		em.close();
	}
,
(startLine=164 endLine=187 srcPath=/root/NewExperiment/hibernateFilter/00896/hibernate-entitymanager/src/test/java/org/hibernate/jpa/test/lock/QueryLockingTest.java)
	public void testOptimisticForcedIncrementOverall() {
		EntityManager em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable lock = new Lockable( "name" );
		em.persist( lock );
		em.getTransaction().commit();
		em.close();
		Integer initial = lock.getVersion();
		assertNotNull( initial );

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable reread = em.createQuery( "from Lockable", Lockable.class ).setLockMode( LockModeType.OPTIMISTIC_FORCE_INCREMENT ).getSingleResult();
		assertEquals( initial, reread.getVersion() );
		em.getTransaction().commit();
		em.close();
		assertFalse( reread.getVersion().equals( initial ) );

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		em.remove( em.getReference( Lockable.class, reread.getId() ) );
		em.getTransaction().commit();
		em.close();
	}
,
(startLine=190 endLine=215 srcPath=/root/NewExperiment/hibernateFilter/00896/hibernate-entitymanager/src/test/java/org/hibernate/jpa/test/lock/QueryLockingTest.java)
	public void testOptimisticForcedIncrementSpecific() {
		EntityManager em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable lock = new Lockable( "name" );
		em.persist( lock );
		em.getTransaction().commit();
		em.close();
		Integer initial = lock.getVersion();
		assertNotNull( initial );

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable reread = em.createQuery( "from Lockable l", Lockable.class )
				.setHint( AvailableSettings.ALIAS_SPECIFIC_LOCK_MODE+".l", LockModeType.OPTIMISTIC_FORCE_INCREMENT )
				.getSingleResult();
		assertEquals( initial, reread.getVersion() );
		em.getTransaction().commit();
		em.close();
		assertFalse( reread.getVersion().equals( initial ) );

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		em.remove( em.getReference( Lockable.class, reread.getId() ) );
		em.getTransaction().commit();
		em.close();
	}
,
(startLine=218 endLine=244 srcPath=/root/NewExperiment/hibernateFilter/00896/hibernate-entitymanager/src/test/java/org/hibernate/jpa/test/lock/QueryLockingTest.java)
	public void testOptimisticOverall() {
		EntityManager em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable lock = new Lockable( "name" );
		em.persist( lock );
		em.getTransaction().commit();
		em.close();
		Integer initial = lock.getVersion();
		assertNotNull( initial );

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable reread = em.createQuery( "from Lockable", Lockable.class )
				.setLockMode( LockModeType.OPTIMISTIC )
				.getSingleResult();
		assertEquals( initial, reread.getVersion() );
		assertTrue( em.unwrap( SessionImpl.class ).getActionQueue().hasBeforeTransactionActions() );
		em.getTransaction().commit();
		em.close();
		assertEquals( initial, reread.getVersion() );

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		em.remove( em.getReference( Lockable.class, reread.getId() ) );
		em.getTransaction().commit();
		em.close();
	}
,
(startLine=247 endLine=273 srcPath=/root/NewExperiment/hibernateFilter/00896/hibernate-entitymanager/src/test/java/org/hibernate/jpa/test/lock/QueryLockingTest.java)
	public void testOptimisticSpecific() {
		EntityManager em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable lock = new Lockable( "name" );
		em.persist( lock );
		em.getTransaction().commit();
		em.close();
		Integer initial = lock.getVersion();
		assertNotNull( initial );

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		Lockable reread = em.createQuery( "from Lockable l", Lockable.class )
				.setHint( AvailableSettings.ALIAS_SPECIFIC_LOCK_MODE+".l", LockModeType.OPTIMISTIC )
				.getSingleResult();
		assertEquals( initial, reread.getVersion() );
		assertTrue( em.unwrap( SessionImpl.class ).getActionQueue().hasBeforeTransactionActions() );
		em.getTransaction().commit();
		em.close();
		assertEquals( initial, reread.getVersion() );

		em = getOrCreateEntityManager();
		em.getTransaction().begin();
		em.remove( em.getReference( Lockable.class, reread.getId() ) );
		em.getTransaction().commit();
		em.close();
	}
,
>
, <(startLine=61 endLine=74 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/loader/collection/BatchingCollectionInitializer.java)
	throws MappingException {

		if ( maxBatchSize>1 ) {
			int[] batchSizesToCreate = ArrayHelper.getBatchSizes(maxBatchSize);
			Loader[] loadersToCreate = new Loader[ batchSizesToCreate.length ];
			for ( int i=0; i<batchSizesToCreate.length; i++ ) {
				loadersToCreate[i] = new OneToManyLoader(persister, batchSizesToCreate[i], factory, enabledFilters);
			}
			return new BatchingCollectionInitializer(persister, batchSizesToCreate, loadersToCreate);
		}
		else {
			return new OneToManyLoader(persister, factory, enabledFilters);
		}
	}
,
(startLine=81 endLine=94 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/loader/collection/BatchingCollectionInitializer.java)
	throws MappingException {

		if ( maxBatchSize>1 ) {
			int[] batchSizesToCreate = ArrayHelper.getBatchSizes(maxBatchSize);
			Loader[] loadersToCreate = new Loader[ batchSizesToCreate.length ];
			for ( int i=0; i<batchSizesToCreate.length; i++ ) {
				loadersToCreate[i] = new BasicCollectionLoader(persister, batchSizesToCreate[i], factory, enabledFilters);
			}
			return new BatchingCollectionInitializer(persister, batchSizesToCreate, loadersToCreate);
		}
		else {
			return new BasicCollectionLoader(persister, factory, enabledFilters);
		}
	}
,
(startLine=92 endLine=105 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/loader/entity/BatchingEntityLoader.java)
	throws MappingException {

		if ( maxBatchSize>1 ) {
			int[] batchSizesToCreate = ArrayHelper.getBatchSizes(maxBatchSize);
			Loader[] loadersToCreate = new Loader[ batchSizesToCreate.length ];
			for ( int i=0; i<batchSizesToCreate.length; i++ ) {
				loadersToCreate[i] = new EntityLoader(persister, batchSizesToCreate[i], lockMode, factory, enabledFilters);
			}
			return new BatchingEntityLoader(persister, batchSizesToCreate, loadersToCreate);
		}
		else {
			return new EntityLoader(persister, lockMode, factory, enabledFilters);
		}
	}
,
>
, <(startLine=62 endLine=80 srcPath=/root/NewExperiment/hibernateFilter/00075/annotations/src/java/org/hibernate/type/ByteArrayBlobType.java)
			throws HibernateException {
		if ( value == null ) return null;
		if ( value instanceof Byte[] ) {
			Byte[] array = (Byte[]) value;
			int length = array.length;
			Byte[] copy = new Byte[length];
			for ( int index = 0; index < length ; index++ ) {
				copy[index] = Byte.valueOf( array[index].byteValue() );
			}
			return copy;
		}
		else {
			byte[] array = (byte[]) value;
			int length = array.length;
			byte[] copy = new byte[length];
			System.arraycopy( array, 0, copy, 0, length );
			return copy;
		}
	}
,
(startLine=113 endLine=131 srcPath=/root/NewExperiment/hibernateFilter/00075/annotations/src/java/org/hibernate/type/CharacterArrayClobType.java)
	public Object deepCopy(Object value) throws HibernateException {
		if ( value == null ) return null;
		if ( value instanceof Character[] ) {
			Character[] array = (Character[]) value;
			int length = array.length;
			Character[] copy = new Character[length];
			for ( int index = 0; index < length ; index++ ) {
				copy[index] = Character.valueOf( array[index].charValue() );
			}
			return copy;
		}
		else {
			char[] array = (char[]) value;
			int length = array.length;
			char[] copy = new char[length];
			System.arraycopy( array, 0, copy, 0, length );
			return copy;
		}
	}
,
>
, <(startLine=418 endLine=433 srcPath=/root/NewExperiment/hibernateFilter/01476/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/util/Caches.java)
			try {
				if (!it.hasNext()) {
					return "[]";
				}

				StringBuilder sb = new StringBuilder();
				sb.append('[');
				for (; ; ) {
					CacheEntry<K, V> entry = it.next();
					sb.append(selector.apply(entry));
					if (!it.hasNext()) {
						return sb.append(']').toString();
					}
					sb.append(',').append(' ');
				}
			}
,
(startLine=484 endLine=499 srcPath=/root/NewExperiment/hibernateFilter/01476/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/util/Caches.java)
			try {
				if (!it.hasNext()) {
					return "{}";
				}

				StringBuilder sb = new StringBuilder();
				sb.append('{');
				for (; ; ) {
					CacheEntry<K, V> entry = it.next();
					sb.append(entry.getKey()).append('=').append(entry.getValue());
					if (!it.hasNext()) {
						return sb.append('}').toString();
					}
					sb.append(',').append(' ');
				}
			}
,
>
, <(startLine=32 endLine=46 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/cache/QueryCache.java)
	public void initData() {
		// Revision 1
		EntityManager em = getEntityManager();
		em.getTransaction().begin();
		IntTestEntity ite = new IntTestEntity( 10 );
		em.persist( ite );
		id1 = ite.getId();
		em.getTransaction().commit();

		// Revision 2
		em.getTransaction().begin();
		ite = em.find( IntTestEntity.class, id1 );
		ite.setNumber( 20 );
		em.getTransaction().commit();
	}
,
(startLine=32 endLine=44 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/basic/Simple.java)
	public void initData() {
		EntityManager em = getEntityManager();
		em.getTransaction().begin();
		IntTestEntity ite = new IntTestEntity( 10 );
		em.persist( ite );
		id1 = ite.getId();
		em.getTransaction().commit();

		em.getTransaction().begin();
		ite = em.find( IntTestEntity.class, id1 );
		ite.setNumber( 20 );
		em.getTransaction().commit();
	}
,
>
, <(startLine=69 endLine=78 srcPath=/root/NewExperiment/hibernateFilter/00426/envers/src/test/java/org/hibernate/envers/test/integration/naming/VersionsJoinTableRangeTestEntity.java)
	public String toString() {
		StringBuilder output = new StringBuilder();

		output.append("VersionsJoinTableRangeComponentTestEntity {");
		output.append(" id = \"").append(getId()).append("\", ");
		output.append(" genericValue = \"").append(getGenericValue()).append(
				"\", ");
		output.append(" value = \"").append(this.value).append("\"}");
		return output.toString();
	}
,
(startLine=70 endLine=80 srcPath=/root/NewExperiment/hibernateFilter/00426/envers/src/test/java/org/hibernate/envers/test/integration/naming/VersionsJoinTableRangeTestAlternateEntity.java)
	public String toString() {
		StringBuilder output = new StringBuilder();

		output.append("VersionsJoinTableRangeComponentTestEntity {");
		output.append(" id = \"").append(getId()).append("\", ");
		output.append(" genericValue = \"").append(getGenericValue()).append(
				"\", ");
		output.append(" alternateValue = \"").append(this.alternateValue)
				.append("\"}");
		return output.toString();
	}
,
>
, <(startLine=51 endLine=57 srcPath=/root/NewExperiment/hibernateFilter/01675/hibernate-core/src/main/java/org/hibernate/bytecode/enhance/internal/javassist/MethodWriter.java)
		try {
			actualField = target.getField( field );
			log.debugf( "Writing getter method [%s] into [%s] for field [%s]", name, target.getName(), field );
			CtMethod method = CtNewMethod.getter( name, target.getField( field ) );
			target.addMethod( method );
			return method;
		}
,
(startLine=78 endLine=84 srcPath=/root/NewExperiment/hibernateFilter/01675/hibernate-core/src/main/java/org/hibernate/bytecode/enhance/internal/javassist/MethodWriter.java)
		try {
			actualField = target.getField( field );
			log.debugf( "Writing setter method [%s] into [%s] for field [%s]", name, target.getName(), field );
			CtMethod method = CtNewMethod.setter( name, actualField );
			target.addMethod( method );
			return method;
		}
,
>
, <(startLine=65 endLine=114 srcPath=/root/NewExperiment/hibernateFilter/00606/hibernate-core/src/test/java/org/hibernate/test/annotations/naturalid/NaturalIdTest.java)
	public void testNaturalIdCached() {
		saveSomeCitizens();

		Session s = openSession();
		Transaction tx = s.beginTransaction();
		State france = ( State ) s.load( State.class, 2 );
		Criteria criteria = s.createCriteria( Citizen.class );
		criteria.add(
				Restrictions.naturalId().set( "ssn", "1234" ).set(
						"state",
						france
				)
		);
		criteria.setCacheable( true );

		Statistics stats = sessionFactory().getStatistics();
		stats.setStatisticsEnabled( true );
		stats.clear();
		assertEquals(
				"Cache hits should be empty", 0, stats
						.getQueryCacheHitCount()
		);

		// first query
		List results = criteria.list();
		assertEquals( 1, results.size() );
		assertEquals(
				"Cache hits should be empty", 0, stats
						.getQueryCacheHitCount()
		);
		assertEquals(
				"First query should be a miss", 1, stats
						.getQueryCacheMissCount()
		);
		assertEquals(
				"Query result should be added to cache", 1, stats
						.getQueryCachePutCount()
		);

		// query a second time - result should be cached
		criteria.list();
		assertEquals(
				"Cache hits should be empty", 1, stats
						.getQueryCacheHitCount()
		);

		// cleanup
		tx.rollback();
		s.close();
	}
,
(startLine=117 endLine=162 srcPath=/root/NewExperiment/hibernateFilter/00606/hibernate-core/src/test/java/org/hibernate/test/annotations/naturalid/NaturalIdTest.java)
	public void testNaturalIdUncached() {
		saveSomeCitizens();

		Session s = openSession();
		Transaction tx = s.beginTransaction();
		State france = ( State ) s.load( State.class, 2 );
		Criteria criteria = s.createCriteria( Citizen.class );
		criteria.add(
				Restrictions.naturalId().set( "ssn", "1234" ).set(
						"state",
						france
				)
		);
		criteria.setCacheable( false );

		Statistics stats = sessionFactory().getStatistics();
		stats.setStatisticsEnabled( true );
		stats.clear();
		assertEquals(
				"Cache hits should be empty", 0, stats
						.getQueryCacheHitCount()
		);

		// first query
		List results = criteria.list();
		assertEquals( 1, results.size() );
		assertEquals(
				"Cache hits should be empty", 0, stats
						.getQueryCacheHitCount()
		);
		assertEquals(
				"Query result should be added to cache", 0, stats
						.getQueryCachePutCount()
		);

		// query a second time
		criteria.list();
		assertEquals(
				"Cache hits should be empty", 0, stats
						.getQueryCacheHitCount()
		);

		// cleanup
		tx.rollback();
		s.close();
	}
,
>
, <(startLine=437 endLine=445 srcPath=/root/NewExperiment/hibernateFilter/01557/hibernate-core/src/test/java/org/hibernate/test/hql/ASTParserLoadingTest.java)
		{
			// hibernate-only form
			s = openSession();
			s.beginTransaction();
			Long count = (Long) s.createQuery( "select count(*) from Human h where KEY(h.family) = 'son'" ).uniqueResult();
			assertEquals( (Long)1L, count );
			s.getTransaction().commit();
			s.close();
		}
,
(startLine=447 endLine=455 srcPath=/root/NewExperiment/hibernateFilter/01557/hibernate-core/src/test/java/org/hibernate/test/hql/ASTParserLoadingTest.java)
		{
			// jpa form
			s = openSession();
			s.beginTransaction();
			Long count = (Long) s.createQuery( "select count(*) from Human h join h.family f where key(f) = 'son'" ).uniqueResult();
			assertEquals( (Long)1L, count );
			s.getTransaction().commit();
			s.close();
		}
,
(startLine=565 endLine=575 srcPath=/root/NewExperiment/hibernateFilter/01557/hibernate-core/src/test/java/org/hibernate/test/hql/ASTParserLoadingTest.java)
		{
			// hibernate-only form
			s = openSession();
			s.beginTransaction();
			Long count = (Long) s.createQuery( "select count(*) from Human h where VALUE(h.family) = :joe" ).setParameter( "joe", joe ).uniqueResult();
			// ACTUALLY EXACTLY THE SAME AS:
			// select count(*) from Human h where h.family = :joe
			assertEquals( (Long)1L, count );
			s.getTransaction().commit();
			s.close();
		}
,
(startLine=577 endLine=587 srcPath=/root/NewExperiment/hibernateFilter/01557/hibernate-core/src/test/java/org/hibernate/test/hql/ASTParserLoadingTest.java)
		{
			// jpa form
			s = openSession();
			s.beginTransaction();
			Long count = (Long) s.createQuery( "select count(*) from Human h join h.family f where value(f) = :joe" ).setParameter( "joe", joe ).uniqueResult();
			// ACTUALLY EXACTLY THE SAME AS:
			// select count(*) from Human h join h.family f where f = :joe
			assertEquals( (Long)1L, count );
			s.getTransaction().commit();
			s.close();
		}
,
>
, <(startLine=846 endLine=859 srcPath=/root/NewExperiment/hibernateFilter/00486/hibernate-core/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverridenAnnotationReader.java)
		if ( subelements != null ) {
			for ( Element subelement : subelements ) {
				AnnotationDescriptor column = new AnnotationDescriptor( MapKeyJoinColumn.class );
				copyStringAttribute( column, subelement, "name", false );
				copyStringAttribute( column, subelement, "referenced-column-name", false );
				copyBooleanAttribute( column, subelement, "unique" );
				copyBooleanAttribute( column, subelement, "nullable" );
				copyBooleanAttribute( column, subelement, "insertable" );
				copyBooleanAttribute( column, subelement, "updatable" );
				copyStringAttribute( column, subelement, "column-definition", false );
				copyStringAttribute( column, subelement, "table", false );
				joinColumns.add( (MapKeyJoinColumn) AnnotationFactory.create( column ) );
			}
		}
,
(startLine=1547 endLine=1560 srcPath=/root/NewExperiment/hibernateFilter/00486/hibernate-core/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverridenAnnotationReader.java)
		if ( subelements != null ) {
			for ( Element subelement : subelements ) {
				AnnotationDescriptor column = new AnnotationDescriptor( JoinColumn.class );
				copyStringAttribute( column, subelement, "name", false );
				copyStringAttribute( column, subelement, "referenced-column-name", false );
				copyBooleanAttribute( column, subelement, "unique" );
				copyBooleanAttribute( column, subelement, "nullable" );
				copyBooleanAttribute( column, subelement, "insertable" );
				copyBooleanAttribute( column, subelement, "updatable" );
				copyStringAttribute( column, subelement, "column-definition", false );
				copyStringAttribute( column, subelement, "table", false );
				joinColumns.add( (JoinColumn) AnnotationFactory.create( column ) );
			}
		}
,
>
, <(startLine=220 endLine=249 srcPath=/root/NewExperiment/hibernateFilter/01187/hibernate-core/src/test/java/org/hibernate/testing/junit4/BaseCoreFunctionalTestCase.java)
	protected void addMappings(Configuration configuration) {
		String[] mappings = getMappings();
		if ( mappings != null ) {
			for ( String mapping : mappings ) {
				configuration.addResource(
						getBaseForMappings() + mapping,
						getClass().getClassLoader()
				);
			}
		}
		Class<?>[] annotatedClasses = getAnnotatedClasses();
		if ( annotatedClasses != null ) {
			for ( Class<?> annotatedClass : annotatedClasses ) {
				configuration.addAnnotatedClass( annotatedClass );
			}
		}
		String[] annotatedPackages = getAnnotatedPackages();
		if ( annotatedPackages != null ) {
			for ( String annotatedPackage : annotatedPackages ) {
				configuration.addPackage( annotatedPackage );
			}
		}
		String[] xmlFiles = getXmlFiles();
		if ( xmlFiles != null ) {
			for ( String xmlFile : xmlFiles ) {
				InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream( xmlFile );
				configuration.addInputStream( is );
			}
		}
	}
,
(startLine=251 endLine=279 srcPath=/root/NewExperiment/hibernateFilter/01187/hibernate-core/src/test/java/org/hibernate/testing/junit4/BaseCoreFunctionalTestCase.java)
	protected void addMappings(MetadataSources sources) {
		String[] mappings = getMappings();
		if ( mappings != null ) {
			for ( String mapping : mappings ) {
				sources.addResource(
						getBaseForMappings() + mapping
				);
			}
		}
		Class<?>[] annotatedClasses = getAnnotatedClasses();
		if ( annotatedClasses != null ) {
			for ( Class<?> annotatedClass : annotatedClasses ) {
				sources.addAnnotatedClass( annotatedClass );
			}
		}
		String[] annotatedPackages = getAnnotatedPackages();
		if ( annotatedPackages != null ) {
			for ( String annotatedPackage : annotatedPackages ) {
				sources.addPackage( annotatedPackage );
			}
		}
		String[] xmlFiles = getXmlFiles();
		if ( xmlFiles != null ) {
			for ( String xmlFile : xmlFiles ) {
				InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream( xmlFile );
				sources.addInputStream( is );
			}
		}
	}
,
>
, <(startLine=122 endLine=135 srcPath=/root/NewExperiment/hibernateFilter/00482/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/onetomany/BasicSet.java)
    public void testHistoryOfEdId1() {
        SetRefIngEntity ing1 = getEntityManager().find(SetRefIngEntity.class, ing1_id);
        SetRefIngEntity ing2 = getEntityManager().find(SetRefIngEntity.class, ing2_id);

        SetRefEdEntity rev1 = getAuditReader().find(SetRefEdEntity.class, ed1_id, 1);
        SetRefEdEntity rev2 = getAuditReader().find(SetRefEdEntity.class, ed1_id, 2);
        SetRefEdEntity rev3 = getAuditReader().find(SetRefEdEntity.class, ed1_id, 3);
        SetRefEdEntity rev4 = getAuditReader().find(SetRefEdEntity.class, ed1_id, 4);

        assert rev1.getReffering().equals(Collections.EMPTY_SET);
        assert rev2.getReffering().equals(TestTools.makeSet(ing1, ing2));
        assert rev3.getReffering().equals(TestTools.makeSet(ing2));
        assert rev4.getReffering().equals(Collections.EMPTY_SET);
    }
,
(startLine=138 endLine=151 srcPath=/root/NewExperiment/hibernateFilter/00482/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/onetomany/BasicSet.java)
    public void testHistoryOfEdId2() {
        SetRefIngEntity ing1 = getEntityManager().find(SetRefIngEntity.class, ing1_id);
        SetRefIngEntity ing2 = getEntityManager().find(SetRefIngEntity.class, ing2_id);

        SetRefEdEntity rev1 = getAuditReader().find(SetRefEdEntity.class, ed2_id, 1);
        SetRefEdEntity rev2 = getAuditReader().find(SetRefEdEntity.class, ed2_id, 2);
        SetRefEdEntity rev3 = getAuditReader().find(SetRefEdEntity.class, ed2_id, 3);
        SetRefEdEntity rev4 = getAuditReader().find(SetRefEdEntity.class, ed2_id, 4);

        assert rev1.getReffering().equals(Collections.EMPTY_SET);
        assert rev2.getReffering().equals(Collections.EMPTY_SET);
        assert rev3.getReffering().equals(TestTools.makeSet(ing1));
        assert rev4.getReffering().equals(TestTools.makeSet(ing1, ing2));
    }
,
>
, <(startLine=1108 endLine=1135 srcPath=/root/NewExperiment/hibernateFilter/01708/hibernate-core/src/test/java/org/hibernate/test/legacy/FooBarTest.java)
	public void testFetchInitializedCollection() throws Exception {
		Session s = openSession();
		s.beginTransaction();
		Baz baz = new Baz();
		Collection fooBag = new ArrayList();
		fooBag.add( new Foo() );
		fooBag.add( new Foo() );
		baz.setFooBag( fooBag );
		s.save(baz);
		s.flush();
		fooBag = baz.getFooBag();
		s.createQuery( "from Baz baz left join fetch baz.fooBag" ).list();
		assertTrue( fooBag == baz.getFooBag() );
		s.getTransaction().commit();
		s.close();

		s = openSession();
		s.beginTransaction();
		baz = (Baz) s.load( Baz.class, baz.getCode() );
		Object bag = baz.getFooBag();
		assertFalse( Hibernate.isInitialized( bag ) );
		s.createQuery( "from Baz baz left join fetch baz.fooBag" ).list();
		assertTrue( bag==baz.getFooBag() );
		assertTrue( baz.getFooBag().size() == 2 );
		s.delete(baz);
		s.getTransaction().commit();
		s.close();
	}
,
(startLine=1247 endLine=1277 srcPath=/root/NewExperiment/hibernateFilter/01708/hibernate-core/src/test/java/org/hibernate/test/legacy/FooBarTest.java)
	public void testFetchInitializedCollectionDupe() throws Exception {
		Session s = openSession();
		s.beginTransaction();
		Baz baz = new Baz();
		Collection fooBag = new ArrayList();
		fooBag.add( new Foo() );
		fooBag.add( new Foo() );
		baz.setFooBag(fooBag);
		s.save( baz );
		s.flush();
		fooBag = baz.getFooBag();
		s.createQuery( "from Baz baz left join fetch baz.fooBag" ).list();
		assertTrue( Hibernate.isInitialized( fooBag ) );
		assertTrue( fooBag == baz.getFooBag() );
		assertTrue( baz.getFooBag().size() == 2 );
		s.getTransaction().commit();
		s.close();

		s = openSession();
		s.beginTransaction();
		baz = (Baz) s.load( Baz.class, baz.getCode() );
		Object bag = baz.getFooBag();
		assertFalse( Hibernate.isInitialized(bag) );
		s.createQuery( "from Baz baz left join fetch baz.fooBag" ).list();
		assertTrue( Hibernate.isInitialized( bag ) );
		assertTrue( bag==baz.getFooBag() );
		assertTrue( baz.getFooBag().size()==2 );
		s.delete(baz);
		s.getTransaction().commit();
		s.close();
	}
,
>
, <(startLine=976 endLine=994 srcPath=/root/NewExperiment/hibernateFilter/01330/hibernate-core/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverriddenAnnotationReader.java)
	private MapKeyJoinColumn[] getMapKeyJoinColumns(Element element) {
		List<Element> subelements = element != null ? element.elements( "map-key-join-column" ) : null;
		List<MapKeyJoinColumn> joinColumns = new ArrayList<MapKeyJoinColumn>();
		if ( subelements != null ) {
			for ( Element subelement : subelements ) {
				AnnotationDescriptor column = new AnnotationDescriptor( MapKeyJoinColumn.class );
				copyStringAttribute( column, subelement, "name", false );
				copyStringAttribute( column, subelement, "referenced-column-name", false );
				copyBooleanAttribute( column, subelement, "unique" );
				copyBooleanAttribute( column, subelement, "nullable" );
				copyBooleanAttribute( column, subelement, "insertable" );
				copyBooleanAttribute( column, subelement, "updatable" );
				copyStringAttribute( column, subelement, "column-definition", false );
				copyStringAttribute( column, subelement, "table", false );
				joinColumns.add( (MapKeyJoinColumn) AnnotationFactory.create( column ) );
			}
		}
		return joinColumns.toArray( new MapKeyJoinColumn[joinColumns.size()] );
	}
,
(startLine=1692 endLine=1712 srcPath=/root/NewExperiment/hibernateFilter/01330/hibernate-core/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverriddenAnnotationReader.java)
	private JoinColumn[] getJoinColumns(Element element, boolean isInverse) {
		List<Element> subelements = element != null ?
				element.elements( isInverse ? "inverse-join-column" : "join-column" ) :
				null;
		List<JoinColumn> joinColumns = new ArrayList<JoinColumn>();
		if ( subelements != null ) {
			for ( Element subelement : subelements ) {
				AnnotationDescriptor column = new AnnotationDescriptor( JoinColumn.class );
				copyStringAttribute( column, subelement, "name", false );
				copyStringAttribute( column, subelement, "referenced-column-name", false );
				copyBooleanAttribute( column, subelement, "unique" );
				copyBooleanAttribute( column, subelement, "nullable" );
				copyBooleanAttribute( column, subelement, "insertable" );
				copyBooleanAttribute( column, subelement, "updatable" );
				copyStringAttribute( column, subelement, "column-definition", false );
				copyStringAttribute( column, subelement, "table", false );
				joinColumns.add( (JoinColumn) AnnotationFactory.create( column ) );
			}
		}
		return joinColumns.toArray( new JoinColumn[joinColumns.size()] );
	}
,
>
, <(startLine=814 endLine=828 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public <N extends Number> Expression<N> sum(Expression<? extends N> expression1, Expression<? extends N> expression2) {
		if ( expression1 == null || expression2 == null ) {
			throw new IllegalArgumentException( "arguments to sum() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( expression1.getJavaType(), expression2.getJavaType() );

		return new BinaryArithmeticOperation<N>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.ADD,
				expression1,
				expression2
		);
	}
,
(startLine=832 endLine=846 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public <N extends Number> Expression<N> prod(Expression<? extends N> expression1, Expression<? extends N> expression2) {
		if ( expression1 == null || expression2 == null ) {
			throw new IllegalArgumentException( "arguments to prod() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( expression1.getJavaType(), expression2.getJavaType() );

		return new BinaryArithmeticOperation<N>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.MULTIPLY,
				expression1,
				expression2
		);
	}
,
(startLine=850 endLine=864 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public <N extends Number> Expression<N> diff(Expression<? extends N> expression1, Expression<? extends N> expression2) {
		if ( expression1 == null || expression2 == null ) {
			throw new IllegalArgumentException( "arguments to diff() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( expression1.getJavaType(), expression2.getJavaType() );

		return new BinaryArithmeticOperation<N>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.SUBTRACT,
				expression1,
				expression2
		);
	}
,
(startLine=868 endLine=882 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public <N extends Number> Expression<N> sum(Expression<? extends N> expression, N n) {
		if ( expression == null || n == null ) {
			throw new IllegalArgumentException( "arguments to sum() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( expression.getJavaType(), n.getClass() );

		return new BinaryArithmeticOperation<N>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.ADD,
				expression,
				n
		);
	}
,
(startLine=886 endLine=900 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public <N extends Number> Expression<N> prod(Expression<? extends N> expression, N n) {
		if ( expression == null || n == null ) {
			throw new IllegalArgumentException( "arguments to prod() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( expression.getJavaType(), n.getClass() );

		return new BinaryArithmeticOperation<N>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.MULTIPLY,
				expression,
				n
		);
	}
,
(startLine=904 endLine=918 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public <N extends Number> Expression<N> diff(Expression<? extends N> expression, N n) {
		if ( expression == null || n == null ) {
			throw new IllegalArgumentException( "arguments to diff() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( expression.getJavaType(), n.getClass() );

		return new BinaryArithmeticOperation<N>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.SUBTRACT,
				expression,
				n
		);
	}
,
(startLine=922 endLine=936 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public <N extends Number> Expression<N> sum(N n, Expression<? extends N> expression) {
		if ( expression == null || n == null ) {
			throw new IllegalArgumentException( "arguments to sum() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( n.getClass(), expression.getJavaType() );

		return new BinaryArithmeticOperation<N>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.ADD,
				n,
				expression
		);
	}
,
(startLine=940 endLine=954 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public <N extends Number> Expression<N> prod(N n, Expression<? extends N> expression) {
		if ( n == null || expression == null ) {
			throw new IllegalArgumentException( "arguments to prod() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( n.getClass(), expression.getJavaType() );

		return (BinaryArithmeticOperation<N>) new BinaryArithmeticOperation(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.MULTIPLY,
				n,
				expression
		);
	}
,
(startLine=958 endLine=972 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public <N extends Number> Expression<N> diff(N n, Expression<? extends N> expression) {
		if ( n == null || expression == null ) {
			throw new IllegalArgumentException( "arguments to diff() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( n.getClass(), expression.getJavaType() );

		return new BinaryArithmeticOperation<N>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.SUBTRACT,
				n,
				expression
		);
	}
,
(startLine=976 endLine=990 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public Expression<Number> quot(Expression<? extends Number> expression1, Expression<? extends Number> expression2) {
		if ( expression1 == null || expression2 == null ) {
			throw new IllegalArgumentException( "arguments to quot() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( expression1.getJavaType(), expression2.getJavaType(), true );

		return new BinaryArithmeticOperation<Number>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.DIVIDE,
				expression1,
				expression2
		);
	}
,
(startLine=994 endLine=1008 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public Expression<Number> quot(Expression<? extends Number> expression, Number number) {
		if ( expression == null || number == null ) {
			throw new IllegalArgumentException( "arguments to quot() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( expression.getJavaType(), number.getClass(), true );

		return new BinaryArithmeticOperation<Number>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.DIVIDE,
				expression,
				number
		);
	}
,
(startLine=1012 endLine=1026 srcPath=/root/NewExperiment/hibernateFilter/01546/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java)
	public Expression<Number> quot(Number number, Expression<? extends Number> expression) {
		if ( expression == null || number == null ) {
			throw new IllegalArgumentException( "arguments to quot() cannot be null" );
		}

		final Class resultType = BinaryArithmeticOperation.determineResultType( number.getClass(), expression.getJavaType(), true );

		return new BinaryArithmeticOperation<Number>(
				this,
				resultType,
				BinaryArithmeticOperation.Operation.DIVIDE,
				number,
				expression
		);
	}
,
>
, <(startLine=287 endLine=293 srcPath=/root/NewExperiment/hibernateFilter/00189/annotations/src/test/java/org/hibernate/test/annotations/id/sequences/IdTest.java)
	protected Class[] getMappings() {
		return new Class[] { Ball.class, Shoe.class, Store.class,
				Department.class, Dog.class, Computer.class, Home.class,
				Phone.class, Tree.class, FirTree.class, Footballer.class,
				SoundSystem.class, Furniture.class, GoalKeeper.class,
				BreakDance.class, Monkey.class};
	}
,
(startLine=280 endLine=286 srcPath=/root/NewExperiment/hibernateFilter/00189/annotations/src/test/java/org/hibernate/test/annotations/id/IdTest.java)
	protected Class[] getMappings() {
		return new Class[] { Ball.class, Shoe.class, Store.class,
				Department.class, Dog.class, Computer.class, Home.class,
				Phone.class, Tree.class, FirTree.class, Footballer.class,
				SoundSystem.class, Furniture.class, GoalKeeper.class,
				BreakDance.class, Monkey.class};
	}
,
>
, <(startLine=236 endLine=269 srcPath=/root/NewExperiment/hibernateFilter/01805/hibernate-core/src/test/java/org/hibernate/event/internal/MergeContextTest.java)
	public void testMergeToManagedEntityFillFollowedByModifyKeys() {
		MergeContext cache = new MergeContext( session, new DoNothingEntityCopyObserver() );

		Object mergeEntity = new Simple( 1 );
		Object managedEntity = new Simple( 2 );

		cache.put( mergeEntity, managedEntity, true );

		Iterator it = cache.keySet().iterator();
		try {
			it.remove();
			fail( "should have thrown UnsupportedOperationException" );
		}
		catch ( UnsupportedOperationException ex ) {
			// expected
		}

		try {
			cache.keySet().remove( mergeEntity );
			fail( "should have thrown UnsupportedOperationException" );
		}
		catch ( UnsupportedOperationException ex ) {
			// expected
		}

		Object newmanagedEntity = new Simple( 3 );
		try {
			cache.keySet().add( newmanagedEntity );
			fail( "should have thrown UnsupportedOperationException" );
		}
		catch ( UnsupportedOperationException ex ) {
			// expected
		}
	}
,
(startLine=272 endLine=305 srcPath=/root/NewExperiment/hibernateFilter/01805/hibernate-core/src/test/java/org/hibernate/event/internal/MergeContextTest.java)
	public void testMergeToManagedEntityFillFollowedByModifyValues() {
		MergeContext cache = new MergeContext( session, new DoNothingEntityCopyObserver() );

		Object mergeEntity = new Simple( 1 );
		Object managedEntity = new Simple( 2 );

		cache.put( mergeEntity, managedEntity, true );

		Iterator it = cache.values().iterator();
		try {
			it.remove();
			fail( "should have thrown UnsupportedOperationException" );
		}
		catch ( UnsupportedOperationException ex ) {
			// expected
		}

		try {
			cache.values().remove( managedEntity );
			fail( "should have thrown UnsupportedOperationException" );
		}
		catch ( UnsupportedOperationException ex ) {
			// expected
		}

		Object newmanagedEntity = new Simple( 3 );
		try {
			cache.values().add( newmanagedEntity );
			fail( "should have thrown UnsupportedOperationException" );
		}
		catch ( UnsupportedOperationException ex ) {
			// expected
		}
	}
,
>
, <(startLine=1877 endLine=1886 srcPath=/root/NewExperiment/hibernateFilter/00422/testsuite/src/test/java/org/hibernate/test/querycache/AbstractQueryCacheResultTransformerTest.java)
			protected Criteria getCriteria(Session s) throws Exception {
				return s.createCriteria( Student.class, "s" )
				.setProjection(
						Projections.projectionList()
								.add( Property.forName( "s.studentNumber" ).as( "studentNumber" ))
								.add( Property.forName( "s.name" ).as( "name" ))
				)
				.addOrder( Order.asc( "s.studentNumber" ) )
				.setResultTransformer( new AliasToBeanConstructorResultTransformer( getConstructor() ) );
			}
,
(startLine=1950 endLine=1959 srcPath=/root/NewExperiment/hibernateFilter/00422/testsuite/src/test/java/org/hibernate/test/querycache/AbstractQueryCacheResultTransformerTest.java)
			protected Criteria getCriteria(Session s) {
				return s.createCriteria( Student.class, "s" )
				.setProjection(
						Projections.projectionList()
								.add( Property.forName( "s.studentNumber" ).as( "studentNumber" ))
								.add( Property.forName( "s.name" ).as( "name" ) )
				)
				.addOrder( Order.asc( "s.studentNumber" ) )
				.setResultTransformer( Transformers.TO_LIST );
			}
,
(startLine=1983 endLine=1992 srcPath=/root/NewExperiment/hibernateFilter/00422/testsuite/src/test/java/org/hibernate/test/querycache/AbstractQueryCacheResultTransformerTest.java)
			protected Criteria getCriteria(Session s) {
				return s.createCriteria( Student.class, "s" )
				.setProjection(
						Projections.projectionList()
								.add( Property.forName( "s.studentNumber" ).as( "sNumber" ) )
								.add( Property.forName( "s.name" ).as( "sName" ) )
				)
				.addOrder( Order.asc( "s.studentNumber" ) )
				.setResultTransformer( Transformers.ALIAS_TO_ENTITY_MAP );
			}
,
(startLine=2118 endLine=2127 srcPath=/root/NewExperiment/hibernateFilter/00422/testsuite/src/test/java/org/hibernate/test/querycache/AbstractQueryCacheResultTransformerTest.java)
			protected Criteria getCriteria(Session s) {
				return s.createCriteria( Student.class, "s" )
				.setProjection(
						Projections.projectionList()
								.add( Property.forName( "s.studentNumber" ).as( "sNumber" ) )
								.add( Property.forName( "s.name" ).as( "sName" ) )
				)
				.addOrder( Order.asc( "s.studentNumber" ) )
				.setResultTransformer( Transformers.ALIAS_TO_ENTITY_MAP );
			}
,
(startLine=2151 endLine=2160 srcPath=/root/NewExperiment/hibernateFilter/00422/testsuite/src/test/java/org/hibernate/test/querycache/AbstractQueryCacheResultTransformerTest.java)
			protected Criteria getCriteria(Session s) {
				return s.createCriteria( Student.class, "s" )
				.setProjection(
						Projections.projectionList()
								.add( Property.forName( "s.studentNumber" ).as( "studentNumber" ) )
								.add( Property.forName( "s.name" ).as( "name" ) )
				)
				.addOrder( Order.asc( "s.studentNumber" ) )
				.setResultTransformer( new AliasToBeanConstructorResultTransformer( getConstructor() ) );
			}
,
>
, <(startLine=151 endLine=171 srcPath=/root/NewExperiment/hibernateFilter/01744/hibernate-ehcache/src/test/java/org/hibernate/test/cache/ehcache/functional/RefreshUpdatedDataTest.java)
		try {
			s2.beginTransaction();
			ReadWriteCacheableItem readWriteCacheableItem2 = s2.get( ReadWriteCacheableItem.class, readWriteCacheableItem.getId() );
			ReadWriteVersionedCacheableItem readWriteVersionedCacheableItem2 = s2.get( ReadWriteVersionedCacheableItem.class, readWriteVersionedCacheableItem.getId() );
			NonStrictReadWriteCacheableItem nonStrictReadWriteCacheableItem2 = s2.get( NonStrictReadWriteCacheableItem.class, nonStrictReadWriteCacheableItem.getId() );
			NonStrictReadWriteVersionedCacheableItem nonStrictReadWriteVersionedCacheableItem2 = s2.get( NonStrictReadWriteVersionedCacheableItem.class, nonStrictReadWriteVersionedCacheableItem.getId() );

			assertEquals( BEFORE, readWriteCacheableItem2.getName() );
			assertEquals( 2, readWriteCacheableItem2.getTags().size() );
			assertEquals( BEFORE, readWriteVersionedCacheableItem2.getName() );
			assertEquals( 2, readWriteVersionedCacheableItem2.getTags().size() );

			//READ_UNCOMMITTED because there is no locking to prevent collections from being cached in the first Session

			assertEquals( BEFORE, nonStrictReadWriteCacheableItem2.getName() );
			assertEquals( 1, nonStrictReadWriteCacheableItem2.getTags().size());
			assertEquals( BEFORE, nonStrictReadWriteVersionedCacheableItem2.getName() );
			assertEquals( 1, nonStrictReadWriteVersionedCacheableItem2.getTags().size() );

			s2.getTransaction().commit();
		}
,
(startLine=131 endLine=151 srcPath=/root/NewExperiment/hibernateFilter/01744/hibernate-core/src/test/java/org/hibernate/test/cache/RefreshUpdatedDataTest.java)
		try {
			s2.beginTransaction();
			ReadWriteCacheableItem readWriteCacheableItem2 = s2.get( ReadWriteCacheableItem.class, readWriteCacheableItem.getId() );
			ReadWriteVersionedCacheableItem readWriteVersionedCacheableItem2 = s2.get( ReadWriteVersionedCacheableItem.class, readWriteVersionedCacheableItem.getId() );
			NonStrictReadWriteCacheableItem nonStrictReadWriteCacheableItem2 = s2.get( NonStrictReadWriteCacheableItem.class, nonStrictReadWriteCacheableItem.getId() );
			NonStrictReadWriteVersionedCacheableItem nonStrictReadWriteVersionedCacheableItem2 = s2.get( NonStrictReadWriteVersionedCacheableItem.class, nonStrictReadWriteVersionedCacheableItem.getId() );

			assertEquals( BEFORE, readWriteCacheableItem2.getName() );
			assertEquals( 2, readWriteCacheableItem2.getTags().size() );
			assertEquals( BEFORE, readWriteVersionedCacheableItem2.getName() );
			assertEquals( 2, readWriteVersionedCacheableItem2.getTags().size() );

			//READ_UNCOMMITTED because there is no locking to prevent collections from being cached in the first Session

			assertEquals( BEFORE, nonStrictReadWriteCacheableItem2.getName() );
			assertEquals( 1, nonStrictReadWriteCacheableItem2.getTags().size());
			assertEquals( BEFORE, nonStrictReadWriteVersionedCacheableItem2.getName() );
			assertEquals( 1, nonStrictReadWriteVersionedCacheableItem2.getTags().size() );

			s2.getTransaction().commit();
		}
,
(startLine=135 endLine=155 srcPath=/root/NewExperiment/hibernateFilter/01744/hibernate-jcache/src/test/java/org/hibernate/test/cache/jcache/functional/RefreshUpdatedDataTest.java)
		try {
			s2.beginTransaction();
			ReadWriteCacheableItem readWriteCacheableItem2 = s2.get( ReadWriteCacheableItem.class, readWriteCacheableItem.getId() );
			ReadWriteVersionedCacheableItem readWriteVersionedCacheableItem2 = s2.get( ReadWriteVersionedCacheableItem.class, readWriteVersionedCacheableItem.getId() );
			NonStrictReadWriteCacheableItem nonStrictReadWriteCacheableItem2 = s2.get( NonStrictReadWriteCacheableItem.class, nonStrictReadWriteCacheableItem.getId() );
			NonStrictReadWriteVersionedCacheableItem nonStrictReadWriteVersionedCacheableItem2 = s2.get( NonStrictReadWriteVersionedCacheableItem.class, nonStrictReadWriteVersionedCacheableItem.getId() );

			assertEquals( BEFORE, readWriteCacheableItem2.getName() );
			assertEquals( 2, readWriteCacheableItem2.getTags().size() );
			assertEquals( BEFORE, readWriteVersionedCacheableItem2.getName() );
			assertEquals( 2, readWriteVersionedCacheableItem2.getTags().size() );

			//READ_UNCOMMITTED because there is no locking to prevent collections from being cached in the first Session

			assertEquals( BEFORE, nonStrictReadWriteCacheableItem2.getName() );
			assertEquals( 1, nonStrictReadWriteCacheableItem2.getTags().size());
			assertEquals( BEFORE, nonStrictReadWriteVersionedCacheableItem2.getName() );
			assertEquals( 1, nonStrictReadWriteVersionedCacheableItem2.getTags().size() );

			s2.getTransaction().commit();
		}
,
>
, <(startLine=669 endLine=703 srcPath=/root/NewExperiment/hibernateFilter/00252/annotations/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverridenAnnotationReader.java)
			if ( annotation != null ) {
				annotationList.add( annotation );
				annotation = overridesDefaultsInJoinTable( annotation, defaults );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( JoinColumn.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( JoinColumns.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( PrimaryKeyJoinColumn.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( PrimaryKeyJoinColumns.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( MapKey.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( OrderBy.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AttributeOverride.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AttributeOverrides.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AssociationOverride.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AssociationOverrides.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Lob.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Enumerated.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Temporal.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Column.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Columns.class );
				addIfNotNull( annotationList, annotation );
			}
,
(startLine=704 endLine=737 srcPath=/root/NewExperiment/hibernateFilter/00252/annotations/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverridenAnnotationReader.java)
			else if ( isJavaAnnotationPresent( ElementCollection.class ) ) { //JPA2
				annotation = overridesDefaultsInJoinTable( getJavaAnnotation( ElementCollection.class ), defaults );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( JoinColumn.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( JoinColumns.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( PrimaryKeyJoinColumn.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( PrimaryKeyJoinColumns.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( MapKey.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( OrderBy.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AttributeOverride.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AttributeOverrides.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AssociationOverride.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AssociationOverrides.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Lob.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Enumerated.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Temporal.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Column.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Columns.class );
				addIfNotNull( annotationList, annotation );
			}
,
(startLine=738 endLine=771 srcPath=/root/NewExperiment/hibernateFilter/00252/annotations/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverridenAnnotationReader.java)
			else if ( isJavaAnnotationPresent( CollectionOfElements.class ) ) { //legacy Hibernate
				annotation = overridesDefaultsInJoinTable( getJavaAnnotation( CollectionOfElements.class ), defaults );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( JoinColumn.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( JoinColumns.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( PrimaryKeyJoinColumn.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( PrimaryKeyJoinColumns.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( MapKey.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( OrderBy.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AttributeOverride.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AttributeOverrides.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AssociationOverride.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( AssociationOverrides.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Lob.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Enumerated.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Temporal.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Column.class );
				addIfNotNull( annotationList, annotation );
				annotation = getJavaAnnotation( Columns.class );
				addIfNotNull( annotationList, annotation );
			}
,
>
, <(startLine=537 endLine=567 srcPath=/root/NewExperiment/hibernateFilter/00469/hibernate-core/src/main/java/org/hibernate/stat/ConcurrentStatisticsImpl.java)
	public void logSummary() {
        LOG.loggingStatistics();
        LOG.startTime(startTime);
        LOG.sessionsOpened(sessionOpenCount);
        LOG.sessionsClosed(sessionCloseCount);
        LOG.transactions(transactionCount);
        LOG.successfulTransactions(committedTransactionCount);
        LOG.optimisticLockFailures(optimisticFailureCount);
        LOG.flushes(flushCount);
        LOG.connectionsObtained(connectCount);
        LOG.statementsPrepared(prepareStatementCount);
        LOG.statementsClosed(closeStatementCount);
        LOG.secondLevelCachePuts(secondLevelCachePutCount);
        LOG.secondLevelCacheHits(secondLevelCacheHitCount);
        LOG.secondLevelCacheMisses(secondLevelCacheMissCount);
        LOG.entitiesLoaded(entityLoadCount);
        LOG.entitiesUpdated(entityUpdateCount);
        LOG.entitiesInserted(entityInsertCount);
        LOG.entitiesDeleted(entityDeleteCount);
        LOG.entitiesFetched(entityFetchCount);
        LOG.collectionsLoaded(collectionLoadCount);
        LOG.collectionsUpdated(collectionUpdateCount);
        LOG.collectionsRemoved(collectionRemoveCount);
        LOG.collectionsRecreated(collectionRecreateCount);
        LOG.collectionsFetched(collectionFetchCount);
        LOG.queriesExecuted(queryExecutionCount);
        LOG.queryCachePuts(queryCachePutCount);
        LOG.queryCacheHits(queryCacheHitCount);
        LOG.queryCacheMisses(queryCacheMissCount);
        LOG.maxQueryTime(queryExecutionMaxTime);
	}
,
(startLine=493 endLine=523 srcPath=/root/NewExperiment/hibernateFilter/00469/hibernate-core/src/main/java/org/hibernate/stat/StatisticsImpl.java)
	public void logSummary() {
        LOG.loggingStatistics();
        LOG.startTime(startTime);
        LOG.sessionsOpened(sessionOpenCount);
        LOG.sessionsClosed(sessionCloseCount);
        LOG.transactions(transactionCount);
        LOG.successfulTransactions(commitedTransactionCount);
        LOG.optimisticLockFailures(optimisticFailureCount);
        LOG.flushes(flushCount);
        LOG.connectionsObtained(connectCount);
        LOG.statementsPrepared(prepareStatementCount);
        LOG.statementsClosed(closeStatementCount);
        LOG.secondLevelCachePuts(secondLevelCachePutCount);
        LOG.secondLevelCacheHits(secondLevelCacheHitCount);
        LOG.secondLevelCacheMisses(secondLevelCacheMissCount);
        LOG.entitiesLoaded(entityLoadCount);
        LOG.entitiesUpdated(entityUpdateCount);
        LOG.entitiesInserted(entityInsertCount);
        LOG.entitiesDeleted(entityDeleteCount);
        LOG.entitiesFetched(entityFetchCount);
        LOG.collectionsLoaded(collectionLoadCount);
        LOG.collectionsUpdated(collectionUpdateCount);
        LOG.collectionsRemoved(collectionRemoveCount);
        LOG.collectionsRecreated(collectionRecreateCount);
        LOG.collectionsFetched(collectionFetchCount);
        LOG.queriesExecuted(queryExecutionCount);
        LOG.queryCachePuts(queryCachePutCount);
        LOG.queryCacheHits(queryCacheHitCount);
        LOG.queryCacheMisses(queryCacheMissCount);
        LOG.maxQueryTime(queryExecutionMaxTime);
	}
,
>
, <(startLine=156 endLine=171 srcPath=/root/NewExperiment/hibernateFilter/01098/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/manytomany/biowned/BasicBiowned.java)
	public void testHistoryOfO1_1() {
		ListBiowning2Entity o2_1 = getEntityManager().find( ListBiowning2Entity.class, o2_1_id );
		ListBiowning2Entity o2_2 = getEntityManager().find( ListBiowning2Entity.class, o2_2_id );

		ListBiowning1Entity rev1 = getAuditReader().find( ListBiowning1Entity.class, o1_1_id, 1 );
		ListBiowning1Entity rev2 = getAuditReader().find( ListBiowning1Entity.class, o1_1_id, 2 );
		ListBiowning1Entity rev3 = getAuditReader().find( ListBiowning1Entity.class, o1_1_id, 3 );
		ListBiowning1Entity rev4 = getAuditReader().find( ListBiowning1Entity.class, o1_1_id, 4 );
		ListBiowning1Entity rev5 = getAuditReader().find( ListBiowning1Entity.class, o1_1_id, 5 );

		assert TestTools.checkCollection( rev1.getReferences() );
		assert TestTools.checkCollection( rev2.getReferences(), o2_1 );
		assert TestTools.checkCollection( rev3.getReferences(), o2_1, o2_2 );
		assert TestTools.checkCollection( rev4.getReferences() );
		assert TestTools.checkCollection( rev5.getReferences(), o2_2 );
	}
,
(startLine=174 endLine=189 srcPath=/root/NewExperiment/hibernateFilter/01098/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/manytomany/biowned/BasicBiowned.java)
	public void testHistoryOfO1_2() {
		ListBiowning2Entity o2_1 = getEntityManager().find( ListBiowning2Entity.class, o2_1_id );
		ListBiowning2Entity o2_2 = getEntityManager().find( ListBiowning2Entity.class, o2_2_id );

		ListBiowning1Entity rev1 = getAuditReader().find( ListBiowning1Entity.class, o1_2_id, 1 );
		ListBiowning1Entity rev2 = getAuditReader().find( ListBiowning1Entity.class, o1_2_id, 2 );
		ListBiowning1Entity rev3 = getAuditReader().find( ListBiowning1Entity.class, o1_2_id, 3 );
		ListBiowning1Entity rev4 = getAuditReader().find( ListBiowning1Entity.class, o1_2_id, 4 );
		ListBiowning1Entity rev5 = getAuditReader().find( ListBiowning1Entity.class, o1_2_id, 5 );

		assert TestTools.checkCollection( rev1.getReferences() );
		assert TestTools.checkCollection( rev2.getReferences(), o2_2 );
		assert TestTools.checkCollection( rev3.getReferences(), o2_2 );
		assert TestTools.checkCollection( rev4.getReferences(), o2_1, o2_2 );
		assert TestTools.checkCollection( rev5.getReferences(), o2_2 );
	}
,
>
, <(startLine=51 endLine=69 srcPath=/root/NewExperiment/hibernateFilter/00595/hibernate-core/src/test/java/org/hibernate/test/event/collection/AbstractCollectionEventTest.java)
	protected void cleanupTest() {
		ParentWithCollection dummyParent = createParent( "dummyParent" );
		dummyParent.newChildren( createCollection() );
		Child dummyChild = dummyParent.addChild( "dummyChild" );
		Session s = openSession();
		Transaction tx = s.beginTransaction();
		List children = s.createCriteria( dummyChild.getClass() ).list();
		List parents = s.createCriteria( dummyParent.getClass() ).list();
		for ( Iterator it = parents.iterator(); it.hasNext(); ) {
			ParentWithCollection parent = ( ParentWithCollection ) it.next();
			parent.clearChildren();
			s.delete( parent );
		}
		for ( Iterator it = children.iterator(); it.hasNext(); ) {
			s.delete( it.next() );
		}
		tx.commit();
		s.close();
	}
,
(startLine=60 endLine=78 srcPath=/root/NewExperiment/hibernateFilter/00595/hibernate-core/src/test/java/org/hibernate/test/event/collection/BrokenCollectionEventTest.java)
	protected void cleanupTest() {
		ParentWithCollection dummyParent = createParent( "dummyParent" );
		dummyParent.setChildren( createCollection() );
		Child dummyChild = dummyParent.addChild( "dummyChild" );
		Session s = openSession();
		Transaction tx = s.beginTransaction();
		List children = s.createCriteria( dummyChild.getClass() ).list();
		List parents = s.createCriteria( dummyParent.getClass() ).list();
		for ( Iterator it = parents.iterator(); it.hasNext(); ) {
			ParentWithCollection parent = ( ParentWithCollection ) it.next();
			parent.clearChildren();
			s.delete( parent );
		}
		for ( Iterator it = children.iterator(); it.hasNext(); ) {
			s.delete( it.next() );
		}
		tx.commit();
		s.close();
	}
,
>
, <(startLine=98 endLine=105 srcPath=/root/NewExperiment/hibernateFilter/00350/envers/src/test/java/org/hibernate/envers/test/integration/basic/ManyOperationsInTransaction.java)
    public void testHistoryOfId1() {
        BasicTestEntity1 ver1 = new BasicTestEntity1(id1, "x", 1);
        BasicTestEntity1 ver2 = new BasicTestEntity1(id1, "x2", 1);

        assert getAuditReader().find(BasicTestEntity1.class, id1, 1).equals(ver1);
        assert getAuditReader().find(BasicTestEntity1.class, id1, 2).equals(ver2);
        assert getAuditReader().find(BasicTestEntity1.class, id1, 3).equals(ver2);
    }
,
(startLine=82 endLine=90 srcPath=/root/NewExperiment/hibernateFilter/00350/envers/src/test/java/org/hibernate/envers/test/integration/basic/NullProperties.java)
    public void testHistoryOfId1() {
        BasicTestEntity1 ver1 = new BasicTestEntity1(id1, "x", 1);
        BasicTestEntity1 ver2 = new BasicTestEntity1(id1, null, 1);

        assert getAuditReader().find(BasicTestEntity1.class, id1, 1).equals(ver1);
        assert getAuditReader().find(BasicTestEntity1.class, id1, 2).equals(ver1);
        assert getAuditReader().find(BasicTestEntity1.class, id1, 3).equals(ver2);
        assert getAuditReader().find(BasicTestEntity1.class, id1, 4).equals(ver2);
    }
,
>
, <(startLine=716 endLine=726 srcPath=/root/NewExperiment/hibernateFilter/00745/hibernate-entitymanager/src/matrix/java/org/hibernate/ejb/test/lock/LockTest.java)
								try {
									// we should block on the following read
									Query query = em2.createQuery(
											"select L from Lock_ L where L.id < 10000 "
									);
									query.setLockMode( LockModeType.PESSIMISTIC_READ );
									query.setHint( "javax.persistence.query.timeout", 500 ); // 1 sec timeout
									List<Lock> resultList = query.getResultList();
									String name = resultList.get( 0 ).getName(); //  force entity to be read
									log.info( "testQueryTimeout: name read =" + name );
								}
,
(startLine=813 endLine=822 srcPath=/root/NewExperiment/hibernateFilter/00745/hibernate-entitymanager/src/matrix/java/org/hibernate/ejb/test/lock/LockTest.java)
								try {
									// we should block on the following read
									Query query = em2.createQuery(
											"select L from Lock_ L where L.id < 10000 "
									);
									query.setLockMode( LockModeType.PESSIMISTIC_READ );
									List<Lock> resultList = query.getResultList();
									String name = resultList.get( 0 ).getName(); //  force entity to be read
									log.info( "testQueryTimeout: name read =" + name );
								}
,
>
, <(startLine=111 endLine=120 srcPath=/root/NewExperiment/hibernateFilter/00510/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/query/MaximalizePropertyQuery.java)
    public void testMinimizeWithPropertyEq() {
        List result = getAuditReader().createQuery()
                .forRevisionsOfEntity(StrIntTestEntity.class, false, true)
                .addProjection(AuditEntity.revisionNumber())
                .add(AuditEntity.property("number").minimize()
                    .add(AuditEntity.property("str1").eq("a")))
                .getResultList();

        assert Arrays.asList(1).equals(result);
    }
,
(startLine=121 endLine=130 srcPath=/root/NewExperiment/hibernateFilter/00510/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/query/RevisionConstraintQuery.java)
    public void testRevisionsLeWithPropertyQuery() {
        List result = getAuditReader().createQuery()
                .forRevisionsOfEntity(StrIntTestEntity.class, false, true)
                .addProjection(AuditEntity.revisionNumber())
                .add(AuditEntity.revisionNumber().le(3))
                .add(AuditEntity.property("str1").eq("a"))
                .getResultList();

        assert Arrays.asList(1).equals(result);
    }
,
(startLine=133 endLine=142 srcPath=/root/NewExperiment/hibernateFilter/00510/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/query/RevisionConstraintQuery.java)
    public void testRevisionsGtWithPropertyQuery() {
        List result = getAuditReader().createQuery()
                .forRevisionsOfEntity(StrIntTestEntity.class, false, true)
                .addProjection(AuditEntity.revisionNumber())
                .add(AuditEntity.revisionNumber().gt(1))
                .add(AuditEntity.property("number").lt(10))
                .getResultList();

        assert Arrays.asList(3, 4).equals(result);
    }
,
(startLine=162 endLine=171 srcPath=/root/NewExperiment/hibernateFilter/00510/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/query/RevisionConstraintQuery.java)
    public void testRevisionOrderQuery() {
        List result = getAuditReader().createQuery()
                .forRevisionsOfEntity(StrIntTestEntity.class, false, true)
                .addProjection(AuditEntity.revisionNumber())
                .add(AuditEntity.id().eq(id1))
                .addOrder(AuditEntity.revisionNumber().desc())
                .getResultList();

        assert Arrays.asList(4, 3, 2, 1).equals(result);
    }
,
>
, <(startLine=104 endLine=110 srcPath=/root/NewExperiment/hibernateFilter/00096/envers/src/test/java/org/hibernate/envers/test/integration/inheritance/single/inheritedrelation/InheritedBidirectional.java)
    public void testHistoryOfContact() {
        assert getAuditReader().find(Contact.class, pc_id, 1).getAddresses().equals(
                TestTools.makeSet(new Address(a1_id, "a1")));

        assert getAuditReader().find(Contact.class, pc_id, 2).getAddresses().equals(
                TestTools.makeSet(new Address(a1_id, "a1"), new Address(a2_id, "a2")));
    }
,
(startLine=113 endLine=119 srcPath=/root/NewExperiment/hibernateFilter/00096/envers/src/test/java/org/hibernate/envers/test/integration/inheritance/single/inheritedrelation/InheritedBidirectional.java)
    public void testHistoryOfPersonalContact() {
        assert getAuditReader().find(PersonalContact.class, pc_id, 1).getAddresses().equals(
                TestTools.makeSet(new Address(a1_id, "a1")));

        assert getAuditReader().find(PersonalContact.class, pc_id, 2).getAddresses().equals(
                TestTools.makeSet(new Address(a1_id, "a1"), new Address(a2_id, "a2")));
    }
,
>
, <(startLine=216 endLine=231 srcPath=/root/NewExperiment/hibernateFilter/00383/testsuite/src/test/java/org/hibernate/test/annotations/id/sequences/IdTest.java)
	public void testIdInEmbeddableSuperclass() throws Exception {
		Session s;
		Transaction tx;
		s = openSession();
		tx = s.beginTransaction();
		FirTree chrismasTree = new FirTree();
		s.persist( chrismasTree );
		tx.commit();
		s.clear();
		tx = s.beginTransaction();
		chrismasTree = ( FirTree ) s.get( FirTree.class, chrismasTree.getId() );
		assertNotNull( chrismasTree );
		s.delete( chrismasTree );
		tx.commit();
		s.close();
	}
,
(startLine=187 endLine=202 srcPath=/root/NewExperiment/hibernateFilter/00383/testsuite/src/test/java/org/hibernate/test/annotations/id/IdTest.java)
	public void testIdInEmbeddableSuperclass() throws Exception {
		Session s;
		Transaction tx;
		s = openSession();
		tx = s.beginTransaction();
		FirTree chrismasTree = new FirTree();
		s.persist(chrismasTree);
		tx.commit();
		s.clear();
		tx = s.beginTransaction();
		chrismasTree = (FirTree) s.get(FirTree.class, chrismasTree.getId());
		assertNotNull(chrismasTree);
		s.delete(chrismasTree);
		tx.commit();
		s.close();
	}
,
>
, <(startLine=153 endLine=176 srcPath=/root/NewExperiment/hibernateFilter/00542/hibernate-core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java)
		while ( titer.hasNext() ) {
			Table tab = (Table) titer.next();
			KeyValue key = (KeyValue) kiter.next();
			String tabname = tab.getQualifiedName(
					factory.getDialect(),
					factory.getSettings().getDefaultCatalogName(),
					factory.getSettings().getDefaultSchemaName()
			);
			tables.add(tabname);
			String[] keyCols = new String[idColumnSpan];
			String[] keyColReaders = new String[idColumnSpan];
			String[] keyColReaderTemplates = new String[idColumnSpan];
			Iterator citer = key.getColumnIterator();
			for ( int k=0; k<idColumnSpan; k++ ) {
				Column column = (Column) citer.next();
				keyCols[k] = column.getQuotedName( factory.getDialect() );
				keyColReaders[k] = column.getReadExpr( factory.getDialect() );
				keyColReaderTemplates[k] = column.getTemplate( factory.getDialect(), factory.getSqlFunctionRegistry() );
			}
			keyColumns.add(keyCols);
			keyColumnReaders.add(keyColReaders);
			keyColumnReaderTemplates.add(keyColReaderTemplates);
			cascadeDeletes.add( new Boolean( key.isCascadeDeleteEnabled() && factory.getDialect().supportsCascadeDelete() ) );
		}
,
(startLine=182 endLine=213 srcPath=/root/NewExperiment/hibernateFilter/00542/hibernate-core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java)
		while ( joinIter.hasNext() ) {
			Join join = (Join) joinIter.next();
			
			Table tab = join.getTable();
			 
			String tabname = tab.getQualifiedName(
					factory.getDialect(),
					factory.getSettings().getDefaultCatalogName(),
					factory.getSettings().getDefaultSchemaName()
			);
			tables.add(tabname);
			
			KeyValue key = join.getKey();
			int joinIdColumnSpan = 	key.getColumnSpan();		
			
			String[] keyCols = new String[joinIdColumnSpan];
			String[] keyColReaders = new String[joinIdColumnSpan];
			String[] keyColReaderTemplates = new String[joinIdColumnSpan];
						
			Iterator citer = key.getColumnIterator();
			
			for ( int k=0; k<joinIdColumnSpan; k++ ) {
				Column column = (Column) citer.next();
				keyCols[k] = column.getQuotedName( factory.getDialect() );
				keyColReaders[k] = column.getReadExpr( factory.getDialect() );
				keyColReaderTemplates[k] = column.getTemplate( factory.getDialect(), factory.getSqlFunctionRegistry() );
			}
			keyColumns.add(keyCols);
			keyColumnReaders.add(keyColReaders);
			keyColumnReaderTemplates.add(keyColReaderTemplates);
			cascadeDeletes.add( new Boolean( key.isCascadeDeleteEnabled() && factory.getDialect().supportsCascadeDelete() ) );
		}
,
>
, <(startLine=113 endLine=140 srcPath=/root/NewExperiment/hibernateFilter/01858/hibernate-core/src/main/java/org/hibernate/internal/util/xml/BufferedXMLEventReader.java)
	public void mark(int eventLimit) {
		this.eventLimit = eventLimit;

		//Buffering no events now, clear the buffer and buffered reader
		if (this.eventLimit == 0) {
			this.eventBuffer.clear();
			this.bufferReader = null;
		}
		//Buffering limited set of events, lets trim the buffer if needed
		else if (this.eventLimit > 0) {
			//If there is an iterator check its current position and calculate the new iterator start position
			int iteratorIndex = 0;
			if (this.bufferReader != null) {
				final int nextIndex = this.bufferReader.nextIndex();
				iteratorIndex = Math.max(0, nextIndex - (this.eventBuffer.size() - this.eventLimit));
			}

			//Trim the buffer until it is not larger than the limit
			while (this.eventBuffer.size() > this.eventLimit) {
				this.eventBuffer.poll();
			}

			//If there is an iterator re-create it using the newly calculated index
			if (this.bufferReader != null) {
				this.bufferReader = this.eventBuffer.listIterator(iteratorIndex);
			}
		}
	}
,
(startLine=110 endLine=137 srcPath=/root/NewExperiment/hibernateFilter/01858/hibernate-core/src/main/java/org/hibernate/boot/jaxb/internal/stax/BufferedXMLEventReader.java)
	public void mark(int eventLimit) {
		this.eventLimit = eventLimit;

		//Buffering no events now, clear the buffer and buffered reader
		if (this.eventLimit == 0) {
			this.eventBuffer.clear();
			this.bufferReader = null;
		}
		//Buffering limited set of events, lets trim the buffer if needed
		else if (this.eventLimit > 0) {
			//If there is an iterator check its current position and calculate the new iterator start position
			int iteratorIndex = 0;
			if (this.bufferReader != null) {
				final int nextIndex = this.bufferReader.nextIndex();
				iteratorIndex = Math.max( 0, nextIndex - ( this.eventBuffer.size() - this.eventLimit ) );
			}

			//Trim the buffer until it is not larger than the limit
			while (this.eventBuffer.size() > this.eventLimit) {
				this.eventBuffer.poll();
			}

			//If there is an iterator re-create it using the newly calculated index
			if (this.bufferReader != null) {
				this.bufferReader = this.eventBuffer.listIterator(iteratorIndex);
			}
		}
	}
,
>
, <(startLine=60 endLine=82 srcPath=/root/NewExperiment/hibernateFilter/00075/annotations/src/java/org/hibernate/cfg/search/HibernateSearchEventListenerRegister.java)
		{
			boolean present = false;
			PostInsertEventListener[] listeners = eventListeners
					.getPostInsertEventListeners();
			if (listeners != null) {
				for (Object eventListener : listeners) {
					// not isAssignableFrom since the user could subclass
					present = present
							|| searchEventListenerClass == eventListener
									.getClass();
				}
				if (!present) {
					int length = listeners.length + 1;
					PostInsertEventListener[] newListeners = new PostInsertEventListener[length];
					System.arraycopy(listeners, 0, newListeners, 0, length - 1);
					newListeners[length - 1] = (PostInsertEventListener) searchEventListener;
					eventListeners.setPostInsertEventListeners(newListeners);
				}
			} else {
				eventListeners
						.setPostInsertEventListeners(new PostInsertEventListener[] { (PostInsertEventListener) searchEventListener });
			}
		}
,
(startLine=83 endLine=105 srcPath=/root/NewExperiment/hibernateFilter/00075/annotations/src/java/org/hibernate/cfg/search/HibernateSearchEventListenerRegister.java)
		{
			boolean present = false;
			PostUpdateEventListener[] listeners = eventListeners
					.getPostUpdateEventListeners();
			if (listeners != null) {
				for (Object eventListener : listeners) {
					// not isAssignableFrom since the user could subclass
					present = present
							|| searchEventListenerClass == eventListener
									.getClass();
				}
				if (!present) {
					int length = listeners.length + 1;
					PostUpdateEventListener[] newListeners = new PostUpdateEventListener[length];
					System.arraycopy(listeners, 0, newListeners, 0, length - 1);
					newListeners[length - 1] = (PostUpdateEventListener) searchEventListener;
					eventListeners.setPostUpdateEventListeners(newListeners);
				}
			} else {
				eventListeners
						.setPostUpdateEventListeners(new PostUpdateEventListener[] { (PostUpdateEventListener) searchEventListener });
			}
		}
,
(startLine=106 endLine=128 srcPath=/root/NewExperiment/hibernateFilter/00075/annotations/src/java/org/hibernate/cfg/search/HibernateSearchEventListenerRegister.java)
		{
			boolean present = false;
			PostDeleteEventListener[] listeners = eventListeners
					.getPostDeleteEventListeners();
			if (listeners != null) {
				for (Object eventListener : listeners) {
					// not isAssignableFrom since the user could subclass
					present = present
							|| searchEventListenerClass == eventListener
									.getClass();
				}
				if (!present) {
					int length = listeners.length + 1;
					PostDeleteEventListener[] newListeners = new PostDeleteEventListener[length];
					System.arraycopy(listeners, 0, newListeners, 0, length - 1);
					newListeners[length - 1] = (PostDeleteEventListener) searchEventListener;
					eventListeners.setPostDeleteEventListeners(newListeners);
				}
			} else {
				eventListeners
						.setPostDeleteEventListeners(new PostDeleteEventListener[] { (PostDeleteEventListener) searchEventListener });
			}
		}		
,
(startLine=129 endLine=150 srcPath=/root/NewExperiment/hibernateFilter/00075/annotations/src/java/org/hibernate/cfg/search/HibernateSearchEventListenerRegister.java)
		{
			boolean present = false;
			PostCollectionRecreateEventListener[] listeners = eventListeners.getPostCollectionRecreateEventListeners();
			if ( listeners != null ) {
				for (Object eventListener : listeners) {
					//not isAssignableFrom since the user could subclass
					present = present || searchEventListenerClass == eventListener.getClass();
				}
				if ( !present ) {
					int length = listeners.length + 1;
					PostCollectionRecreateEventListener[] newListeners = new PostCollectionRecreateEventListener[length];
					System.arraycopy( listeners, 0, newListeners, 0, length - 1 );
					newListeners[length - 1] = (PostCollectionRecreateEventListener) searchEventListener;
					eventListeners.setPostCollectionRecreateEventListeners( newListeners );
				}
			}
			else {
				eventListeners.setPostCollectionRecreateEventListeners(
						new PostCollectionRecreateEventListener[] { (PostCollectionRecreateEventListener) searchEventListener }
				);
			}
		}
,
(startLine=151 endLine=172 srcPath=/root/NewExperiment/hibernateFilter/00075/annotations/src/java/org/hibernate/cfg/search/HibernateSearchEventListenerRegister.java)
		{
			boolean present = false;
			PostCollectionRemoveEventListener[] listeners = eventListeners.getPostCollectionRemoveEventListeners();
			if ( listeners != null ) {
				for (Object eventListener : listeners) {
					//not isAssignableFrom since the user could subclass
					present = present || searchEventListenerClass == eventListener.getClass();
				}
				if ( !present ) {
					int length = listeners.length + 1;
					PostCollectionRemoveEventListener[] newListeners = new PostCollectionRemoveEventListener[length];
					System.arraycopy( listeners, 0, newListeners, 0, length - 1 );
					newListeners[length - 1] = (PostCollectionRemoveEventListener) searchEventListener;
					eventListeners.setPostCollectionRemoveEventListeners( newListeners );
				}
			}
			else {
				eventListeners.setPostCollectionRemoveEventListeners(
						new PostCollectionRemoveEventListener[] { (PostCollectionRemoveEventListener) searchEventListener }
				);
			}
		}
,
(startLine=173 endLine=194 srcPath=/root/NewExperiment/hibernateFilter/00075/annotations/src/java/org/hibernate/cfg/search/HibernateSearchEventListenerRegister.java)
		{
			boolean present = false;
			PostCollectionUpdateEventListener[] listeners = eventListeners.getPostCollectionUpdateEventListeners();
			if ( listeners != null ) {
				for (Object eventListener : listeners) {
					//not isAssignableFrom since the user could subclass
					present = present || searchEventListenerClass == eventListener.getClass();
				}
				if ( !present ) {
					int length = listeners.length + 1;
					PostCollectionUpdateEventListener[] newListeners = new PostCollectionUpdateEventListener[length];
					System.arraycopy( listeners, 0, newListeners, 0, length - 1 );
					newListeners[length - 1] = (PostCollectionUpdateEventListener) searchEventListener;
					eventListeners.setPostCollectionUpdateEventListeners( newListeners );
				}
			}
			else {
				eventListeners.setPostCollectionUpdateEventListeners(
						new PostCollectionUpdateEventListener[] { (PostCollectionUpdateEventListener) searchEventListener }
				);
			}
		}		
,
>
, <(startLine=50 endLine=59 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/interfaces/components/Component1.java)
	public boolean equals(Object o) {
		if (this == o) return true;
		if (!(o instanceof Component1)) return false;

		Component1 that = (Component1) o;

		if (data != null ? !data.equals(that.data) : that.data != null) return false;

		return true;
	}
,
(startLine=69 endLine=78 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/collection/mapkey/IdMapKeyEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof IdMapKeyEntity)) return false;

        IdMapKeyEntity that = (IdMapKeyEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=70 endLine=79 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/collection/mapkey/ComponentMapKeyEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ComponentMapKeyEntity)) return false;

        ComponentMapKeyEntity that = (ComponentMapKeyEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=70 endLine=79 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/manytomany/ternary/TernaryMapEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TernaryMapEntity)) return false;

        TernaryMapEntity that = (TernaryMapEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=67 endLine=76 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/inheritance/tableperclass/childrelation/ReferencedEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ReferencedEntity)) return false;

        ReferencedEntity that = (ReferencedEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=67 endLine=76 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/inheritance/tableperclass/relation/ReferencedEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ReferencedEntity)) return false;

        ReferencedEntity that = (ReferencedEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=67 endLine=76 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/inheritance/joined/childrelation/ReferencedEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ReferencedEntity)) return false;

        ReferencedEntity that = (ReferencedEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=67 endLine=76 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/inheritance/joined/relation/ReferencedEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ReferencedEntity)) return false;

        ReferencedEntity that = (ReferencedEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=56 endLine=65 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/inheritance/joined/relation/unidirectional/AbstractContainedEntity.java)
	public boolean equals(Object o) {
		if (this == o) return true;
		if (!(o instanceof AbstractContainedEntity)) return false;

		AbstractContainedEntity that = (AbstractContainedEntity) o;

		if (id != null ? !id.equals(that.id) : that.id != null) return false;

		return true;
	}
,
(startLine=68 endLine=77 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/inheritance/single/childrelation/ReferencedEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ReferencedEntity)) return false;

        ReferencedEntity that = (ReferencedEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=61 endLine=70 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/inheritance/single/relation/ReferencedEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ReferencedEntity)) return false;

        ReferencedEntity that = (ReferencedEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=68 endLine=77 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/onetomany/RefEdMapKeyEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof RefEdMapKeyEntity)) return false;

        RefEdMapKeyEntity that = (RefEdMapKeyEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=71 endLine=80 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/onetomany/RefIngMapKeyEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof RefIngMapKeyEntity)) return false;

        RefIngMapKeyEntity that = (RefIngMapKeyEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=68 endLine=77 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/entities/collection/StringListEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StringListEntity)) return false;

        StringListEntity that = (StringListEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=66 endLine=75 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/entities/collection/StringMapEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StringMapEntity)) return false;

        StringMapEntity that = (StringMapEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=66 endLine=75 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/entities/collection/StringSetEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof StringSetEntity)) return false;

        StringSetEntity that = (StringSetEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=86 endLine=95 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/entities/collection/EnumSetEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof EnumSetEntity)) return false;

        EnumSetEntity that = (EnumSetEntity) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
(startLine=72 endLine=82 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/entities/manytomany/unidirectional/M2MIndexedListTargetNotAuditedEntity.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        M2MIndexedListTargetNotAuditedEntity that = (M2MIndexedListTargetNotAuditedEntity) o;

        //noinspection RedundantIfStatement
        if (data != null ? !data.equals(that.data) : that.data != null) return false;

        return true;
    }
,
(startLine=31 endLine=40 srcPath=/root/NewExperiment/hibernateFilter/00503/hibernate-envers/src/test/java/org/hibernate/envers/test/entities/ids/ManyToOneNotAuditedEmbId.java)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ManyToOneNotAuditedEmbId that = (ManyToOneNotAuditedEmbId) o;

        if (id != null ? !id.equals(that.id) : that.id != null) return false;

        return true;
    }
,
>
, <(startLine=169 endLine=181 srcPath=/root/NewExperiment/hibernateFilter/00771/hibernate-core/src/main/java/org/hibernate/type/TypeHelper.java)
			final Map copyCache) {
		Object[] copied = new Object[original.length];
		for ( int i = 0; i < types.length; i++ ) {
			if ( original[i] == LazyPropertyInitializer.UNFETCHED_PROPERTY
				|| original[i] == BackrefPropertyAccessor.UNKNOWN ) {
				copied[i] = target[i];
			}
			else {
				copied[i] = types[i].replace( original[i], target[i], session, owner, copyCache );
			}
		}
		return copied;
	}
,
(startLine=203 endLine=215 srcPath=/root/NewExperiment/hibernateFilter/00771/hibernate-core/src/main/java/org/hibernate/type/TypeHelper.java)
			final ForeignKeyDirection foreignKeyDirection) {
		Object[] copied = new Object[original.length];
		for ( int i = 0; i < types.length; i++ ) {
			if ( original[i] == LazyPropertyInitializer.UNFETCHED_PROPERTY
				|| original[i] == BackrefPropertyAccessor.UNKNOWN ) {
				copied[i] = target[i];
			}
			else {
				copied[i] = types[i].replace( original[i], target[i], session, owner, copyCache, foreignKeyDirection );
			}
		}
		return copied;
	}
,
>
, <(startLine=111 endLine=136 srcPath=/root/NewExperiment/hibernateFilter/00427/core/src/main/java/org/hibernate/engine/ParameterBinder.java)
	        final SessionImplementor session) throws SQLException, HibernateException {
		if ( namedParams != null ) {
			// assumes that types are all of span 1
			Iterator iter = namedParams.entrySet().iterator();
			int result = 0;
			while ( iter.hasNext() ) {
				Map.Entry e = ( Map.Entry ) iter.next();
				String name = ( String ) e.getKey();
				TypedValue typedval = ( TypedValue ) e.getValue();
				int[] locations = source.getNamedParameterLocations( name );
				for ( int i = 0; i < locations.length; i++ ) {
					if ( log.isDebugEnabled() ) {
						log.debug( "bindNamedParameters() " +
								typedval.getValue() + " -> " + name +
								" [" + ( locations[i] + start ) + "]" );
					}
					typedval.getType().nullSafeSet( ps, typedval.getValue(), locations[i] + start, session );
				}
				result += locations.length;
			}
			return result;
		}
		else {
			return 0;
		}
	}
,
(startLine=147 endLine=173 srcPath=/root/NewExperiment/hibernateFilter/00427/core/src/main/java/org/hibernate/engine/query/NativeSQLQueryPlan.java)
			final SessionImplementor session) throws SQLException {
		if ( namedParams != null ) {
			// assumes that types are all of span 1
			Iterator iter = namedParams.entrySet().iterator();
			int result = 0;
			while ( iter.hasNext() ) {
				Map.Entry e = (Map.Entry) iter.next();
				String name = (String) e.getKey();
				TypedValue typedval = (TypedValue) e.getValue();
				int[] locs = getNamedParameterLocs( name );
				for (int i = 0; i < locs.length; i++) {
					if ( log.isDebugEnabled() ) {
						log.debug( "bindNamedParameters() "
								+ typedval.getValue() + " -> " + name + " ["
								+ (locs[i] + start ) + "]" );
					}
					typedval.getType().nullSafeSet( ps, typedval.getValue(),
							locs[i] + start, session );
				}
				result += locs.length;
			}
			return result;
		}
		else {
			return 0;
		}
	}
,
(startLine=1963 endLine=1990 srcPath=/root/NewExperiment/hibernateFilter/00427/core/src/main/java/org/hibernate/loader/Loader.java)
			final SessionImplementor session) throws SQLException, HibernateException {
		if ( namedParams != null ) {
			// assumes that types are all of span 1
			Iterator iter = namedParams.entrySet().iterator();
			int result = 0;
			while ( iter.hasNext() ) {
				Map.Entry e = ( Map.Entry ) iter.next();
				String name = ( String ) e.getKey();
				TypedValue typedval = ( TypedValue ) e.getValue();
				int[] locs = getNamedParameterLocs( name );
				for ( int i = 0; i < locs.length; i++ ) {
					if ( log.isDebugEnabled() ) {
						log.debug(
								"bindNamedParameters() " +
								typedval.getValue() + " -> " + name +
								" [" + ( locs[i] + startIndex ) + "]"
							);
					}
					typedval.getType().nullSafeSet( statement, typedval.getValue(), locs[i] + startIndex, session );
				}
				result += locs.length;
			}
			return result;
		}
		else {
			return 0;
		}
	}
,
>
, <(startLine=81 endLine=92 srcPath=/root/NewExperiment/hibernateFilter/01033/hibernate-core/src/test/java/org/hibernate/test/annotations/id/generationmappings/NewGeneratorMappingsTest.java)
	public void testMinimalSequenceEntity() {
		final EntityPersister persister = sessionFactory().getEntityPersister( MinimalSequenceEntity.class.getName() );
		IdentifierGenerator generator = persister.getIdentifierGenerator();
		assertTrue( SequenceStyleGenerator.class.isInstance( generator ) );
		SequenceStyleGenerator seqGenerator = (SequenceStyleGenerator) generator;
		assertEquals( MinimalSequenceEntity.SEQ_NAME, seqGenerator.getDatabaseStructure().getName() );
		// 1 is the annotation default
		assertEquals( 1, seqGenerator.getDatabaseStructure().getInitialValue() );
		// 50 is the annotation default
		assertEquals( 50, seqGenerator.getDatabaseStructure().getIncrementSize() );
		assertFalse( NoopOptimizer.class.isInstance( seqGenerator.getOptimizer() ) );
	}
,
(startLine=95 endLine=104 srcPath=/root/NewExperiment/hibernateFilter/01033/hibernate-core/src/test/java/org/hibernate/test/annotations/id/generationmappings/NewGeneratorMappingsTest.java)
	public void testCompleteSequenceEntity() {
		final EntityPersister persister = sessionFactory().getEntityPersister( CompleteSequenceEntity.class.getName() );
		IdentifierGenerator generator = persister.getIdentifierGenerator();
		assertTrue( SequenceStyleGenerator.class.isInstance( generator ) );
		SequenceStyleGenerator seqGenerator = (SequenceStyleGenerator) generator;
		assertEquals( "my_catalog.my_schema."+CompleteSequenceEntity.SEQ_NAME, seqGenerator.getDatabaseStructure().getName() );
		assertEquals( 1000, seqGenerator.getDatabaseStructure().getInitialValue() );
		assertEquals( 52, seqGenerator.getDatabaseStructure().getIncrementSize() );
		assertFalse( NoopOptimizer.class.isInstance( seqGenerator.getOptimizer() ) );
	}
,
>
, <(startLine=53 endLine=68 srcPath=/root/NewExperiment/hibernateFilter/01393/hibernate-core/src/main/java/org/hibernate/resource/transaction/backend/jta/internal/JtaTransactionAdapterUserTransactionImpl.java)
	public void commit() {
		try {
			if ( initiator ) {
				initiator = false;
				log.trace( "Calling UserTransaction#commit" );
				userTransaction.commit();
				log.trace( "Called UserTransaction#commit" );
			}
			else {
				log.trace( "Skipping TransactionManager#commit due to not being initiator" );
			}
		}
		catch (Exception e) {
			throw new TransactionException( "JTA UserTransaction#commit failed", e );
		}
	}
,
(startLine=52 endLine=67 srcPath=/root/NewExperiment/hibernateFilter/01393/hibernate-core/src/main/java/org/hibernate/resource/transaction/backend/jta/internal/JtaTransactionAdapterTransactionManagerImpl.java)
	public void commit() {
		try {
			if ( initiator ) {
				initiator = false;
				log.trace( "Calling TransactionManager#commit" );
				transactionManager.commit();
				log.trace( "Called TransactionManager#commit" );
			}
			else {
				log.trace( "Skipping TransactionManager#commit due to not being initiator" );
			}
		}
		catch (Exception e) {
			throw new TransactionException( "JTA TransactionManager#commit failed", e );
		}
	}
,
>
, <(startLine=143 endLine=151 srcPath=/root/NewExperiment/hibernateFilter/01022/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/components/Components.java)
	public void testHistoryOfId1() {
		ComponentTestEntity ver1 = new ComponentTestEntity( id1, new Component1( "a", "b" ), null );
		ComponentTestEntity ver2 = new ComponentTestEntity( id1, new Component1( "a'", "b'" ), null );

		assert getAuditReader().find( ComponentTestEntity.class, id1, 1 ).equals( ver1 );
		assert getAuditReader().find( ComponentTestEntity.class, id1, 2 ).equals( ver2 );
		assert getAuditReader().find( ComponentTestEntity.class, id1, 3 ).equals( ver2 );
		assert getAuditReader().find( ComponentTestEntity.class, id1, 4 ).equals( ver2 );
	}
,
(startLine=165 endLine=173 srcPath=/root/NewExperiment/hibernateFilter/01022/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/components/Components.java)
	public void testHistoryOfId3() {
		ComponentTestEntity ver1 = new ComponentTestEntity( id3, new Component1( "a3", "b3" ), null );
		ComponentTestEntity ver2 = new ComponentTestEntity( id3, new Component1( "a3", "b3'" ), null );

		assert getAuditReader().find( ComponentTestEntity.class, id3, 1 ).equals( ver1 );
		assert getAuditReader().find( ComponentTestEntity.class, id3, 2 ).equals( ver1 );
		assert getAuditReader().find( ComponentTestEntity.class, id3, 3 ).equals( ver2 );
		assert getAuditReader().find( ComponentTestEntity.class, id3, 4 ).equals( ver2 );
	}
,
>
, <(startLine=89 endLine=113 srcPath=/root/NewExperiment/hibernateFilter/00216/core/src/main/java/org/hibernate/dialect/lock/PessimisticWriteSelectLockingStrategy.java)
			try {
				lockable.getIdentifierType().nullSafeSet( st, id, 1, session );
				if ( lockable.isVersioned() ) {
					lockable.getVersionType().nullSafeSet(
							st,
							version,
							lockable.getIdentifierType().getColumnSpan( factory ) + 1,
							session
					);
				}

				ResultSet rs = st.executeQuery();
				try {
					if ( !rs.next() ) {
						if ( factory.getStatistics().isStatisticsEnabled() ) {
							factory.getStatisticsImplementor()
									.optimisticFailure( lockable.getEntityName() );
						}
						throw new StaleObjectStateException( lockable.getEntityName(), id );
					}
				}
				finally {
					rs.close();
				}
			}
,
(startLine=85 endLine=109 srcPath=/root/NewExperiment/hibernateFilter/00216/core/src/main/java/org/hibernate/dialect/lock/SelectLockingStrategy.java)
			try {
				lockable.getIdentifierType().nullSafeSet( st, id, 1, session );
				if ( lockable.isVersioned() ) {
					lockable.getVersionType().nullSafeSet(
							st,
							version,
							lockable.getIdentifierType().getColumnSpan( factory ) + 1,
							session
					);
				}

				ResultSet rs = st.executeQuery();
				try {
					if ( !rs.next() ) {
						if ( factory.getStatistics().isStatisticsEnabled() ) {
							factory.getStatisticsImplementor()
									.optimisticFailure( lockable.getEntityName() );
						}
						throw new StaleObjectStateException( lockable.getEntityName(), id );
					}
				}
				finally {
					rs.close();
				}
			}
,
(startLine=89 endLine=113 srcPath=/root/NewExperiment/hibernateFilter/00216/core/src/main/java/org/hibernate/dialect/lock/PessimisticReadSelectLockingStrategy.java)
			try {
				lockable.getIdentifierType().nullSafeSet( st, id, 1, session );
				if ( lockable.isVersioned() ) {
					lockable.getVersionType().nullSafeSet(
							st,
							version,
							lockable.getIdentifierType().getColumnSpan( factory ) + 1,
							session
					);
				}

				ResultSet rs = st.executeQuery();
				try {
					if ( !rs.next() ) {
						if ( factory.getStatistics().isStatisticsEnabled() ) {
							factory.getStatisticsImplementor()
									.optimisticFailure( lockable.getEntityName() );
						}
						throw new StaleObjectStateException( lockable.getEntityName(), id );
					}
				}
				finally {
					rs.close();
				}
			}
,
>
, <(startLine=1733 endLine=1760 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/loader/Loader.java)
			final SessionImplementor session) throws SQLException, HibernateException {
		if ( namedParams != null ) {
			// assumes that types are all of span 1
			Iterator iter = namedParams.entrySet().iterator();
			int result = 0;
			while ( iter.hasNext() ) {
				Map.Entry e = ( Map.Entry ) iter.next();
				String name = ( String ) e.getKey();
				TypedValue typedval = ( TypedValue ) e.getValue();
				int[] locs = getNamedParameterLocs( name );
				for ( int i = 0; i < locs.length; i++ ) {
					if ( log.isDebugEnabled() ) {
						log.debug(
								"bindNamedParameters() " +
								typedval.getValue() + " -> " + name +
								" [" + ( locs[i] + startIndex ) + "]"
							);
					}
					typedval.getType().nullSafeSet( statement, typedval.getValue(), locs[i] + startIndex, session );
				}
				result += locs.length;
			}
			return result;
		}
		else {
			return 0;
		}
	}
,
(startLine=102 endLine=129 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/engine/query/NativeSQLQueryPlan.java)
			HibernateException {

		if ( namedParams != null ) {
			// assumes that types are all of span 1
			Iterator iter = namedParams.entrySet().iterator();
			int result = 0;
			while ( iter.hasNext() ) {
				Map.Entry e = (Map.Entry) iter.next();
				String name = (String) e.getKey();
				TypedValue typedval = (TypedValue) e.getValue();
				int[] locs = getNamedParameterLocs( name );
				for (int i = 0; i < locs.length; i++) {
					if ( log.isDebugEnabled() ) {
						log.debug( "bindNamedParameters() "
								+ typedval.getValue() + " -> " + name + " ["
								+ (locs[i] + start ) + "]" );
					}
					typedval.getType().nullSafeSet( ps, typedval.getValue(),
							locs[i] + start, session );
				}
				result += locs.length;
			}
			return result;
		}
		else {
			return 0;
		}
	}
,
(startLine=88 endLine=113 srcPath=/root/NewExperiment/hibernateFilter/00002/code/core/src/main/java/org/hibernate/engine/ParameterBinder.java)
	        final SessionImplementor session) throws SQLException, HibernateException {
		if ( namedParams != null ) {
			// assumes that types are all of span 1
			Iterator iter = namedParams.entrySet().iterator();
			int result = 0;
			while ( iter.hasNext() ) {
				Map.Entry e = ( Map.Entry ) iter.next();
				String name = ( String ) e.getKey();
				TypedValue typedval = ( TypedValue ) e.getValue();
				int[] locations = source.getNamedParameterLocations( name );
				for ( int i = 0; i < locations.length; i++ ) {
					if ( log.isDebugEnabled() ) {
						log.debug( "bindNamedParameters() " +
								typedval.getValue() + " -> " + name +
								" [" + ( locations[i] + start ) + "]" );
					}
					typedval.getType().nullSafeSet( ps, typedval.getValue(), locations[i] + start, session );
				}
				result += locations.length;
			}
			return result;
		}
		else {
			return 0;
		}
	}
,
>
, <(startLine=51 endLine=70 srcPath=/root/NewExperiment/hibernateFilter/00343/core/src/main/java/org/hibernate/dialect/FrontBaseDialect.java)
	public FrontBaseDialect() {
		super();

		registerColumnType( Types.BIT, "bit" );
		registerColumnType( Types.BIGINT, "longint" );
		registerColumnType( Types.SMALLINT, "smallint" );
		registerColumnType( Types.TINYINT, "tinyint" );
		registerColumnType( Types.INTEGER, "integer" );
		registerColumnType( Types.CHAR, "char(1)" );
		registerColumnType( Types.VARCHAR, "varchar($l)" );
		registerColumnType( Types.FLOAT, "float" );
		registerColumnType( Types.DOUBLE, "double precision" );
		registerColumnType( Types.DATE, "date" );
		registerColumnType( Types.TIME, "time" );
		registerColumnType( Types.TIMESTAMP, "timestamp" );
		registerColumnType( Types.VARBINARY, "bit varying($l)" );
		registerColumnType( Types.NUMERIC, "numeric($p,$s)" );
		registerColumnType( Types.BLOB, "blob" );
		registerColumnType( Types.CLOB, "clob" );
	}
,
(startLine=42 endLine=62 srcPath=/root/NewExperiment/hibernateFilter/00343/core/src/main/java/org/hibernate/dialect/PointbaseDialect.java)
	public PointbaseDialect() {
		super();
		registerColumnType( Types.BIT, "smallint" ); //no pointbase BIT
		registerColumnType( Types.BIGINT, "bigint" );
		registerColumnType( Types.SMALLINT, "smallint" );
		registerColumnType( Types.TINYINT, "smallint" ); //no pointbase TINYINT
		registerColumnType( Types.INTEGER, "integer" );
		registerColumnType( Types.CHAR, "char(1)" );
		registerColumnType( Types.VARCHAR, "varchar($l)" );
		registerColumnType( Types.FLOAT, "float" );
		registerColumnType( Types.DOUBLE, "double precision" );
		registerColumnType( Types.DATE, "date" );
		registerColumnType( Types.TIME, "time" );
		registerColumnType( Types.TIMESTAMP, "timestamp" );
		//the BLOB type requires a size arguement - this defaults to
		//bytes - no arg defaults to 1 whole byte!
		//other argument mods include K - kilobyte, M - megabyte, G - gigabyte.
		//refer to the PBdevelopers guide for more info.
		registerColumnType( Types.VARBINARY, "blob($l)" );
		registerColumnType( Types.NUMERIC, "numeric($p,$s)" );
	}
,
(startLine=46 endLine=62 srcPath=/root/NewExperiment/hibernateFilter/00343/core/src/main/java/org/hibernate/dialect/ProgressDialect.java)
	public ProgressDialect() {
		super();
		registerColumnType( Types.BIT, "bit" );
		registerColumnType( Types.BIGINT, "numeric" );
		registerColumnType( Types.SMALLINT, "smallint" );
		registerColumnType( Types.TINYINT, "tinyint" );
		registerColumnType( Types.INTEGER, "integer" );
		registerColumnType( Types.CHAR, "character(1)" );
		registerColumnType( Types.VARCHAR, "varchar($l)" );
		registerColumnType( Types.FLOAT, "real" );
		registerColumnType( Types.DOUBLE, "double precision" );
		registerColumnType( Types.DATE, "date" );
		registerColumnType( Types.TIME, "time" );
		registerColumnType( Types.TIMESTAMP, "timestamp" );
		registerColumnType( Types.VARBINARY, "varbinary($l)" );
		registerColumnType( Types.NUMERIC, "numeric($p,$s)" );
	}
,
(startLine=41 endLine=63 srcPath=/root/NewExperiment/hibernateFilter/00343/core/src/main/java/org/hibernate/dialect/JDataStoreDialect.java)
	public JDataStoreDialect() {
		super();

		registerColumnType( Types.BIT, "tinyint" );
		registerColumnType( Types.BIGINT, "bigint" );
		registerColumnType( Types.SMALLINT, "smallint" );
		registerColumnType( Types.TINYINT, "tinyint" );
		registerColumnType( Types.INTEGER, "integer" );
		registerColumnType( Types.CHAR, "char(1)" );
		registerColumnType( Types.VARCHAR, "varchar($l)" );
		registerColumnType( Types.FLOAT, "float" );
		registerColumnType( Types.DOUBLE, "double" );
		registerColumnType( Types.DATE, "date" );
		registerColumnType( Types.TIME, "time" );
		registerColumnType( Types.TIMESTAMP, "timestamp" );
		registerColumnType( Types.VARBINARY, "varbinary($l)" );
		registerColumnType( Types.NUMERIC, "numeric($p, $s)" );

		registerColumnType( Types.BLOB, "varbinary" );
		registerColumnType( Types.CLOB, "varchar" );

		getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );
	}
,
>
, <(startLine=38 endLine=55 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/BatchFetchStrategyHelperTest.java)
	public void testManyToOneDefaultFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "otherEntityDefault" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "otherEntityDefault" );
		assertSame( org.hibernate.FetchMode.JOIN, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		// batch size is ignored with org.hibernate.FetchMode.JOIN
		assertSame( FetchStyle.JOIN, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.IMMEDIATE, fetchTiming );
	}
,
(startLine=58 endLine=75 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/BatchFetchStrategyHelperTest.java)
	public void testManyToOneJoinFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "otherEntityJoin" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "otherEntityJoin" );
		assertSame( org.hibernate.FetchMode.JOIN, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		// batch size is ignored with org.hibernate.FetchMode.JOIN
		assertSame( FetchStyle.JOIN, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.IMMEDIATE, fetchTiming );
	}
,
(startLine=78 endLine=94 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/BatchFetchStrategyHelperTest.java)
	public void testManyToOneSelectFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "otherEntitySelect" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "otherEntitySelect" );
		assertSame( org.hibernate.FetchMode.SELECT, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.BATCH, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.DELAYED, fetchTiming );
	}
,
(startLine=97 endLine=113 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/BatchFetchStrategyHelperTest.java)
	public void testCollectionDefaultFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "colorsDefault" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "colorsDefault" );
		assertSame( org.hibernate.FetchMode.SELECT, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.BATCH, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.DELAYED, fetchTiming );
	}
,
(startLine=116 endLine=133 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/BatchFetchStrategyHelperTest.java)
	public void testCollectionJoinFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "colorsJoin" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "colorsJoin" );
		assertSame( org.hibernate.FetchMode.JOIN, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		// batch size is ignored with org.hibernate.FetchMode.JOIN
		assertSame( FetchStyle.JOIN, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.IMMEDIATE, fetchTiming );
	}
,
(startLine=136 endLine=152 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/BatchFetchStrategyHelperTest.java)
	public void testCollectionSelectFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "colorsSelect" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "colorsSelect" );
		assertSame( org.hibernate.FetchMode.SELECT, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.BATCH, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.DELAYED, fetchTiming );
	}
,
(startLine=155 endLine=172 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/BatchFetchStrategyHelperTest.java)
	public void testCollectionSubselectFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "colorsSubselect" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "colorsSubselect" );
		assertSame( org.hibernate.FetchMode.SELECT, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		// Batch size is ignored with FetchMode.SUBSELECT
		assertSame( FetchStyle.SUBSELECT, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.DELAYED, fetchTiming );
	}
,
(startLine=38 endLine=54 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/FetchStrategyHelperTest.java)
	public void testManyToOneDefaultFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "otherEntityDefault" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "otherEntityDefault" );
		assertSame( org.hibernate.FetchMode.JOIN, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.JOIN, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.IMMEDIATE, fetchTiming );
	}
,
(startLine=57 endLine=73 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/FetchStrategyHelperTest.java)
	public void testManyToOneJoinFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "otherEntityJoin" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "otherEntityJoin" );
		assertSame( org.hibernate.FetchMode.JOIN, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.JOIN, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.IMMEDIATE, fetchTiming );
	}
,
(startLine=76 endLine=92 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/FetchStrategyHelperTest.java)
	public void testManyToOneSelectFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "otherEntitySelect" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "otherEntitySelect" );
		assertSame( org.hibernate.FetchMode.SELECT, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.SELECT, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.DELAYED, fetchTiming );
	}
,
(startLine=95 endLine=111 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/FetchStrategyHelperTest.java)
	public void testCollectionDefaultFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "colorsDefault" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "colorsDefault" );
		assertSame( org.hibernate.FetchMode.SELECT, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.SELECT, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.DELAYED, fetchTiming );
	}
,
(startLine=114 endLine=130 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/FetchStrategyHelperTest.java)
	public void testCollectionJoinFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "colorsJoin" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "colorsJoin" );
		assertSame( org.hibernate.FetchMode.JOIN, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.JOIN, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.IMMEDIATE, fetchTiming );
	}
,
(startLine=133 endLine=149 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/FetchStrategyHelperTest.java)
	public void testCollectionSelectFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "colorsSelect" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "colorsSelect" );
		assertSame( org.hibernate.FetchMode.SELECT, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.SELECT, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.DELAYED, fetchTiming );
	}
,
(startLine=152 endLine=168 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/FetchStrategyHelperTest.java)
	public void testCollectionSubselectFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "colorsSubselect" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "colorsSubselect" );
		assertSame( org.hibernate.FetchMode.SELECT, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.SUBSELECT, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.DELAYED, fetchTiming );
	}
,
(startLine=35 endLine=51 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/NoProxyFetchStrategyHelperTest.java)
	public void testManyToOneDefaultFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "otherEntityDefault" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "otherEntityDefault" );
		assertSame( org.hibernate.FetchMode.JOIN, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.JOIN, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.IMMEDIATE, fetchTiming );
	}
,
(startLine=54 endLine=70 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/NoProxyFetchStrategyHelperTest.java)
	public void testManyToOneJoinFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "otherEntityJoin" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "otherEntityJoin" );
		assertSame( org.hibernate.FetchMode.JOIN, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.JOIN, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		assertSame( FetchTiming.IMMEDIATE, fetchTiming );
	}
,
(startLine=73 endLine=90 srcPath=/root/NewExperiment/hibernateFilter/01573/hibernate-core/src/test/java/org/hibernate/test/fetchstrategyhelper/NoProxyFetchStrategyHelperTest.java)
	public void testManyToOneSelectFetch() {
		final AssociationType associationType = determineAssociationType( AnEntity.class, "otherEntitySelect" );
		final org.hibernate.FetchMode fetchMode = determineFetchMode( AnEntity.class, "otherEntitySelect" );
		assertSame( org.hibernate.FetchMode.SELECT, fetchMode );
		final FetchStyle fetchStyle = FetchStrategyHelper.determineFetchStyleByMetadata(
				fetchMode,
				associationType,
				sessionFactory()
		);
		assertSame( FetchStyle.SELECT, fetchStyle );
		final FetchTiming fetchTiming = FetchStrategyHelper.determineFetchTiming(
				fetchStyle,
				associationType,
				sessionFactory()
		);
		// Proxies are not allowed, so it should be FetchTiming.IMMEDIATE
		assertSame( FetchTiming.IMMEDIATE, fetchTiming );
	}
,
>
, <(startLine=31 endLine=74 srcPath=/root/NewExperiment/hibernateFilter/01373/hibernate-core/src/main/java/org/hibernate/boot/model/source/internal/hbm/PluralAttributeMapKeySourceBasicImpl.java)
			final JaxbHbmMapKeyBasicType jaxbMapKey) {
		super( sourceMappingDocument );
		this.typeSource = new HibernateTypeSourceImpl( jaxbMapKey );
		this.valueSources = RelationalValueSourceHelper.buildValueSources(
				sourceMappingDocument(),
				null,
				new RelationalValueSourceHelper.AbstractColumnsAndFormulasSource() {
					@Override
					public XmlElementMetadata getSourceType() {
						return XmlElementMetadata.MAP_KEY;
					}

					@Override
					public String getSourceName() {
						return null;
					}

					@Override
					public String getFormulaAttribute() {
						return jaxbMapKey.getFormulaAttribute();
					}

					@Override
					public String getColumnAttribute() {
						return jaxbMapKey.getColumnAttribute();
					}

					@Override
					public List getColumnOrFormulaElements() {
						return jaxbMapKey.getColumnOrFormula();
					}

					@Override
					public SizeSource getSizeSource() {
						return Helper.interpretSizeSource(
								jaxbMapKey.getLength(),
								(Integer) null,
								null
						);
					}
				}
		);
		this.xmlNodeName = jaxbMapKey.getNode();
	}
,
(startLine=34 endLine=79 srcPath=/root/NewExperiment/hibernateFilter/01373/hibernate-core/src/main/java/org/hibernate/boot/model/source/internal/hbm/PluralAttributeElementSourceBasicImpl.java)
			final JaxbHbmBasicCollectionElementType jaxbElement) {
		super( sourceMappingDocument );
		this.pluralAttributeSource = pluralAttributeSource;

		this.typeSource = new HibernateTypeSourceImpl( jaxbElement );

		this.valueSources = RelationalValueSourceHelper.buildValueSources(
				sourceMappingDocument(),
				null,
				new RelationalValueSourceHelper.AbstractColumnsAndFormulasSource() {
					@Override
					public XmlElementMetadata getSourceType() {
						return XmlElementMetadata.ELEMENT;
					}

					@Override
					public String getSourceName() {
						return null;
					}

					@Override
					public String getColumnAttribute() {
						return jaxbElement.getColumnAttribute();
					}

					@Override
					public String getFormulaAttribute() {
						return jaxbElement.getFormulaAttribute();
					}

					@Override
					public List getColumnOrFormulaElements() {
						return jaxbElement.getColumnOrFormula();
					}

					@Override
					public SizeSource getSizeSource() {
						return Helper.interpretSizeSource(
								jaxbElement.getLength(),
								jaxbElement.getPrecision(),
								jaxbElement.getScale()
						);
					}
				}
		);
	}
,
>
, <(startLine=42 endLine=51 srcPath=/root/NewExperiment/hibernateFilter/00100/envers/src/main/java/org/hibernate/envers/query/criteria/NullAuditExpression.java)
    public void addToQuery(AuditConfiguration auditCfg, String entityName, QueryBuilder qb, Parameters parameters) {
        String propertyName = propertyNameGetter.get(auditCfg);
        RelationDescription relatedEntity = CriteriaTools.getRelatedEntity(auditCfg, entityName, propertyName);

        if (relatedEntity == null) {
            parameters.addWhereWithParam(propertyName, "=", null);
        } else {
            relatedEntity.getIdMapper().addIdEqualsToQuery(parameters, null, propertyName, true);
        }
    }
,
(startLine=42 endLine=51 srcPath=/root/NewExperiment/hibernateFilter/00100/envers/src/main/java/org/hibernate/envers/query/criteria/NotNullAuditExpression.java)
    public void addToQuery(AuditConfiguration auditCfg, String entityName, QueryBuilder qb, Parameters parameters) {
        String propertyName = propertyNameGetter.get(auditCfg);
        RelationDescription relatedEntity = CriteriaTools.getRelatedEntity(auditCfg, entityName, propertyName);

        if (relatedEntity == null) {
            parameters.addWhereWithParam(propertyName, "<>", null);
        } else {
            relatedEntity.getIdMapper().addIdEqualsToQuery(parameters, null, propertyName, false);
        }
    }
,
>
, <(startLine=376 endLine=387 srcPath=/root/NewExperiment/hibernateFilter/00462/hibernate-core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java)
	private void initAliases(SelectExpression[] selectExpressions) {
		if ( aggregatedSelectExpression == null ) {
			aliases = new String[selectExpressions.length];
			for ( int i=0; i<selectExpressions.length; i++ ) {
				String alias = selectExpressions[i].getAlias();
				aliases[i] = alias==null ? Integer.toString(i) : alias;
			}
		}
		else {
			aliases = aggregatedSelectExpression.getAggregatedAliases();
		}
	}
,
(startLine=86 endLine=94 srcPath=/root/NewExperiment/hibernateFilter/00462/hibernate-core/src/main/java/org/hibernate/hql/ast/tree/ConstructorNode.java)
	private String[] buildAggregatedAliases() {
		SelectExpression[] selectExpressions = collectSelectExpressions();
		String[] aliases = new String[selectExpressions.length] ;
		for ( int i=0; i<selectExpressions.length; i++ ) {
			String alias = selectExpressions[i].getAlias();
			aliases[i] = alias==null ? Integer.toString(i) : alias;
		}
		return aliases;
	}
,
>
, <(startLine=48 endLine=69 srcPath=/root/NewExperiment/hibernateFilter/01043/hibernate-core/src/test/java/org/hibernate/test/eviction/EvictionTest.java)
	public void testNormalUsage() {
		Session session = openSession();
		session.beginTransaction();
		session.save( new IsolatedEvictableEntity( 1 ) );
		session.getTransaction().commit();
		session.close();

		session = openSession();
		session.beginTransaction();
		IsolatedEvictableEntity entity = (IsolatedEvictableEntity) session.get( IsolatedEvictableEntity.class, 1 );
		assertTrue( session.contains( entity ) );
		session.evict( entity );
		assertFalse( session.contains( entity ) );
		session.getTransaction().commit();
		session.close();

		session = openSession();
		session.beginTransaction();
		session.delete( entity );
		session.getTransaction().commit();
		session.close();
	}
,
(startLine=98 endLine=123 srcPath=/root/NewExperiment/hibernateFilter/01043/hibernate-core/src/test/java/org/hibernate/test/eviction/EvictionTest.java)
	public void testEvictingDetachedEntity() {
		Session session = openSession();
		session.beginTransaction();
		session.save( new IsolatedEvictableEntity( 1 ) );
		session.getTransaction().commit();
		session.close();

		session = openSession();
		session.beginTransaction();
		IsolatedEvictableEntity entity = (IsolatedEvictableEntity) session.get( IsolatedEvictableEntity.class, 1 );
		assertTrue( session.contains( entity ) );
		// detach the entity
		session.evict( entity );
		assertFalse( session.contains( entity ) );
		// evict it again the entity
		session.evict( entity );
		assertFalse( session.contains( entity ) );
		session.getTransaction().commit();
		session.close();

		session = openSession();
		session.beginTransaction();
		session.delete( entity );
		session.getTransaction().commit();
		session.close();
	}
,
>
, <(startLine=250 endLine=273 srcPath=/root/NewExperiment/hibernateFilter/00407/testsuite/src/test/java/org/hibernate/test/annotations/embedded/EmbeddedTest.java)
	public void testEmbeddedInSecdondaryTable() throws Exception {
		Session s;
		s = openSession();
		s.getTransaction().begin();
		Book book = new Book();
		book.setIsbn( "1234" );
		book.setName( "HiA Second Edition" );
		Summary summary = new Summary();
		summary.setText( "This is a HiA SE summary" );
		summary.setSize( summary.getText().length() );
		book.setSummary( summary );
		s.persist( book );
		s.getTransaction().commit();

		s.clear();

		Transaction tx = s.beginTransaction();
		Book loadedBook = (Book) s.get( Book.class, book.getIsbn() );
		assertNotNull( loadedBook.getSummary() );
		assertEquals( book.getSummary().getText(), loadedBook.getSummary().getText() );
		s.delete( loadedBook );
		tx.commit();
		s.close();
	}
,
(startLine=275 endLine=298 srcPath=/root/NewExperiment/hibernateFilter/00407/testsuite/src/test/java/org/hibernate/test/annotations/embedded/EmbeddedTest.java)
	public void testParent() throws Exception {
		Session s;
		s = openSession();
		s.getTransaction().begin();
		Book book = new Book();
		book.setIsbn( "1234" );
		book.setName( "HiA Second Edition" );
		Summary summary = new Summary();
		summary.setText( "This is a HiA SE summary" );
		summary.setSize( summary.getText().length() );
		book.setSummary( summary );
		s.persist( book );
		s.getTransaction().commit();

		s.clear();

		Transaction tx = s.beginTransaction();
		Book loadedBook = (Book) s.get( Book.class, book.getIsbn() );
		assertNotNull( loadedBook.getSummary() );
		assertEquals( loadedBook, loadedBook.getSummary().getSummarizedBook() );
		s.delete( loadedBook );
		tx.commit();
		s.close();
	}
,
>
, <(startLine=17 endLine=24 srcPath=/root/NewExperiment/hibernateFilter/00248/envers/src/test/java/org/hibernate/envers/test/integration/interfaces/hbm/allAudited/union/UnionAllAuditedTest.java)
,
(startLine=17 endLine=24 srcPath=/root/NewExperiment/hibernateFilter/00248/envers/src/test/java/org/hibernate/envers/test/integration/interfaces/hbm/allAudited/subclass/SubclassAllAuditedTest.java)
,
(startLine=17 endLine=24 srcPath=/root/NewExperiment/hibernateFilter/00248/envers/src/test/java/org/hibernate/envers/test/integration/interfaces/hbm/allAudited/joined/JoinedAllAuditedTest.java)
,
(startLine=18 endLine=25 srcPath=/root/NewExperiment/hibernateFilter/00248/envers/src/test/java/org/hibernate/envers/test/integration/interfaces/hbm/propertiesAudited2/union/UnionPropertiesAudited2Test.java)
,
(startLine=18 endLine=25 srcPath=/root/NewExperiment/hibernateFilter/00248/envers/src/test/java/org/hibernate/envers/test/integration/interfaces/hbm/propertiesAudited2/subclass/SubclassPropertiesAudited2Test.java)
,
(startLine=18 endLine=25 srcPath=/root/NewExperiment/hibernateFilter/00248/envers/src/test/java/org/hibernate/envers/test/integration/interfaces/hbm/propertiesAudited2/joined/JoinedPropertiesAudited2Test.java)
,
(startLine=18 endLine=25 srcPath=/root/NewExperiment/hibernateFilter/00248/envers/src/test/java/org/hibernate/envers/test/integration/interfaces/hbm/propertiesAudited/union/UnionPropertiesAuditedTest.java)
,
(startLine=18 endLine=25 srcPath=/root/NewExperiment/hibernateFilter/00248/envers/src/test/java/org/hibernate/envers/test/integration/interfaces/hbm/propertiesAudited/subclass/SubclassPropertiesAuditedTest.java)
,
(startLine=18 endLine=25 srcPath=/root/NewExperiment/hibernateFilter/00248/envers/src/test/java/org/hibernate/envers/test/integration/interfaces/hbm/propertiesAudited/joined/JoinedPropertiesAuditedTest.java)
,
>
, <(startLine=1355 endLine=1370 srcPath=/root/NewExperiment/hibernateFilter/00620/hibernate-entitymanager/src/main/java/org/hibernate/ejb/Ejb3Configuration.java)
	public Ejb3Configuration addAnnotatedClass(Class persistentClass) throws MappingException {
		Thread thread = null;
		ClassLoader contextClassLoader = null;
		if (overridenClassLoader != null) {
			thread = Thread.currentThread();
			contextClassLoader = thread.getContextClassLoader();
			thread.setContextClassLoader( overridenClassLoader );
		}
		try {
			cfg.addAnnotatedClass( persistentClass );
			return this;
		}
		finally {
			if (thread != null) thread.setContextClassLoader( contextClassLoader );
		}
	}
,
(startLine=1380 endLine=1395 srcPath=/root/NewExperiment/hibernateFilter/00620/hibernate-entitymanager/src/main/java/org/hibernate/ejb/Ejb3Configuration.java)
	public Ejb3Configuration addPackage(String packageName) throws MappingException {
		Thread thread = null;
		ClassLoader contextClassLoader = null;
		if (overridenClassLoader != null) {
			thread = Thread.currentThread();
			contextClassLoader = thread.getContextClassLoader();
			thread.setContextClassLoader( overridenClassLoader );
		}
		try {
			cfg.addPackage( packageName );
			return this;
		}
		finally {
			if (thread != null) thread.setContextClassLoader( contextClassLoader );
		}
	}
,
(startLine=1397 endLine=1412 srcPath=/root/NewExperiment/hibernateFilter/00620/hibernate-entitymanager/src/main/java/org/hibernate/ejb/Ejb3Configuration.java)
	public Ejb3Configuration addFile(String xmlFile) throws MappingException {
		Thread thread = null;
		ClassLoader contextClassLoader = null;
		if (overridenClassLoader != null) {
			thread = Thread.currentThread();
			contextClassLoader = thread.getContextClassLoader();
			thread.setContextClassLoader( overridenClassLoader );
		}
		try {
			cfg.addFile( xmlFile );
			return this;
		}
		finally {
			if (thread != null) thread.setContextClassLoader( contextClassLoader );
		}
	}
,
(startLine=1414 endLine=1429 srcPath=/root/NewExperiment/hibernateFilter/00620/hibernate-entitymanager/src/main/java/org/hibernate/ejb/Ejb3Configuration.java)
	public Ejb3Configuration addClass(Class persistentClass) throws MappingException {
		Thread thread = null;
		ClassLoader contextClassLoader = null;
		if (overridenClassLoader != null) {
			thread = Thread.currentThread();
			contextClassLoader = thread.getContextClassLoader();
			thread.setContextClassLoader( overridenClassLoader );
		}
		try {
			cfg.addClass( persistentClass );
			return this;
		}
		finally {
			if (thread != null) thread.setContextClassLoader( contextClassLoader );
		}
	}
,
(startLine=1431 endLine=1446 srcPath=/root/NewExperiment/hibernateFilter/00620/hibernate-entitymanager/src/main/java/org/hibernate/ejb/Ejb3Configuration.java)
	public Ejb3Configuration addFile(File xmlFile) throws MappingException {
		Thread thread = null;
		ClassLoader contextClassLoader = null;
		if (overridenClassLoader != null) {
			thread = Thread.currentThread();
			contextClassLoader = thread.getContextClassLoader();
			thread.setContextClassLoader( overridenClassLoader );
		}
		try {
			cfg.addFile( xmlFile );
			return this;
		}
		finally {
			if (thread != null) thread.setContextClassLoader( contextClassLoader );
		}
	}
,
(startLine=1464 endLine=1478 srcPath=/root/NewExperiment/hibernateFilter/00620/hibernate-entitymanager/src/main/java/org/hibernate/ejb/Ejb3Configuration.java)
	public Iterator getClassMappings() {
		Thread thread = null;
		ClassLoader contextClassLoader = null;
		if (overridenClassLoader != null) {
			thread = Thread.currentThread();
			contextClassLoader = thread.getContextClassLoader();
			thread.setContextClassLoader( overridenClassLoader );
		}
		try {
			return cfg.getClassMappings();
		}
		finally {
			if (thread != null) thread.setContextClassLoader( contextClassLoader );
		}
	}
,
(startLine=1555 endLine=1570 srcPath=/root/NewExperiment/hibernateFilter/00620/hibernate-entitymanager/src/main/java/org/hibernate/ejb/Ejb3Configuration.java)
	public Ejb3Configuration addInputStream(InputStream xmlInputStream) throws MappingException {
		Thread thread = null;
		ClassLoader contextClassLoader = null;
		if (overridenClassLoader != null) {
			thread = Thread.currentThread();
			contextClassLoader = thread.getContextClassLoader();
			thread.setContextClassLoader( overridenClassLoader );
		}
		try {
			cfg.addInputStream( xmlInputStream );
			return this;
		}
		finally {
			if (thread != null) thread.setContextClassLoader( contextClassLoader );
		}
	}
,
(startLine=1572 endLine=1587 srcPath=/root/NewExperiment/hibernateFilter/00620/hibernate-entitymanager/src/main/java/org/hibernate/ejb/Ejb3Configuration.java)
	public Ejb3Configuration addResource(String path) throws MappingException {
		Thread thread = null;
		ClassLoader contextClassLoader = null;
		if (overridenClassLoader != null) {
			thread = Thread.currentThread();
			contextClassLoader = thread.getContextClassLoader();
			thread.setContextClassLoader( overridenClassLoader );
		}
		try {
			cfg.addResource( path );
			return this;
		}
		finally {
			if (thread != null) thread.setContextClassLoader( contextClassLoader );
		}
	}
,
>
, <(startLine=1264 endLine=1274 srcPath=/root/NewExperiment/hibernateFilter/01378/hibernate-core/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverriddenAnnotationReader.java)
		for ( Element element : elementsForProperty ) {
			if ( "embedded".equals( element.getName() ) ) {
				AnnotationDescriptor ad = new AnnotationDescriptor( Embedded.class );
				annotationList.add( AnnotationFactory.create( ad ) );
				Annotation annotation = getAttributeOverrides( element, defaults, false );
				addIfNotNull( annotationList, annotation );
				annotation = getAssociationOverrides( element, defaults, false );
				addIfNotNull( annotationList, annotation );
				getAccessType( annotationList, element );
			}
		}
,
(startLine=1410 endLine=1422 srcPath=/root/NewExperiment/hibernateFilter/01378/hibernate-core/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverriddenAnnotationReader.java)
		for ( Element element : elementsForProperty ) {
			if ( "embedded-id".equals( element.getName() ) ) {
				if ( isProcessingId( defaults ) ) {
					Annotation annotation = getAttributeOverrides( element, defaults, false );
					addIfNotNull( annotationList, annotation );
					annotation = getAssociationOverrides( element, defaults, false );
					addIfNotNull( annotationList, annotation );
					AnnotationDescriptor ad = new AnnotationDescriptor( EmbeddedId.class );
					annotationList.add( AnnotationFactory.create( ad ) );
					getAccessType( annotationList, element );
				}
			}
		}
,
>
, <(startLine=598 endLine=624 srcPath=/root/NewExperiment/hibernateFilter/01445/hibernate-core/src/test/java/org/hibernate/test/legacy/SQLFunctionsTest.java)
	public void testSqlFunctionAsAlias() throws Exception {
		String functionName = locateAppropriateDialectFunctionNameForAliasTest();
		if (functionName == null) {
            log.info("Dialect does not list any no-arg functions");
			return;
		}

        log.info("Using function named [" + functionName + "] for 'function as alias' test");
		String query = "select " + functionName + " from Simple as " + functionName + " where " + functionName + ".id = 10";

		Session s = openSession();
		Transaction t = s.beginTransaction();
		Simple simple = new Simple( Long.valueOf(10) );
		simple.setName("Simple 1");
		s.save( simple );
		t.commit();
		s.close();

		s = openSession();
		t = s.beginTransaction();
		List result = s.createQuery( query ).list();
		assertTrue( result.size() == 1 );
		assertTrue(result.get(0) instanceof Simple);
		s.delete( result.get(0) );
		t.commit();
		s.close();
	}
,
(startLine=522 endLine=548 srcPath=/root/NewExperiment/hibernateFilter/01445/hibernate-core/src/test/java/org/hibernate/test/dialect/functional/cache/SQLFunctionsInterSystemsTest.java)
	public void testSqlFunctionAsAlias() throws Exception {
		String functionName = locateAppropriateDialectFunctionNameForAliasTest();
		if (functionName == null) {
            log.info("Dialect does not list any no-arg functions");
			return;
		}

        log.info("Using function named [" + functionName + "] for 'function as alias' test");
		String query = "select " + functionName + " from Simple as " + functionName + " where " + functionName + ".id = 10";

		Session s = openSession();
		Transaction t = s.beginTransaction();
		Simple simple = new Simple( Long.valueOf(10) );
		simple.setName("Simple 1");
		s.save( simple );
		t.commit();
		s.close();

		s = openSession();
		t = s.beginTransaction();
		List result = s.createQuery( query ).list();
		assertTrue( result.size() == 1 );
		assertTrue(result.get(0) instanceof Simple);
		s.delete( result.get(0) );
		t.commit();
		s.close();
	}
,
>
]