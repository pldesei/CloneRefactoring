[<(startLine=123 endLine=135 srcPath=/root/NewExperiment/freecolFilter/00648/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    public CombatOdds calculateCombatOdds(Unit attacker, Unit defender) {
        if (attacker == null || defender == null) {
            return new CombatOdds(CombatOdds.UNKNOWN_ODDS);    
        }
        
        float attackPower = getOffencePower(attacker, defender);
        float defencePower = getDefencePower(attacker, defender);
        if (attackPower == 0.0f && defencePower == 0.0f) {
            return new CombatOdds(CombatOdds.UNKNOWN_ODDS);
        }
        float victory = attackPower / (attackPower + defencePower);
        return new CombatOdds(victory);
    }
,
(startLine=145 endLine=157 srcPath=/root/NewExperiment/freecolFilter/00648/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    public CombatOdds calculateCombatOdds(Colony attacker, Unit defender) {
        if (attacker == null || defender == null) {
            return new CombatOdds(CombatOdds.UNKNOWN_ODDS);
        }

        float attackPower = getOffencePower(attacker, defender);
        float defencePower = getDefencePower(attacker, defender);
        if (attackPower == 0.0f && defencePower == 0.0f) {
            return new CombatOdds(CombatOdds.UNKNOWN_ODDS);
        }
        float victory = attackPower / (attackPower + defencePower);
        return new CombatOdds(victory);
    }
,
>
, <(startLine=290 endLine=332 srcPath=/root/NewExperiment/freecolFilter/00782/src/net/sf/freecol/server/ai/IndianAIPlayer.java)
            if (nearbyColonies.size() > 0) {
                int targetTension = Integer.MIN_VALUE;
                Colony target = null;
                for (int i = 0; i < nearbyColonies.size(); i++) {
                    Colony t = nearbyColonies.get(i);
                    Player to = t.getOwner();
                    if (!getPlayer().hasContacted(to)
                        || !indianSettlement.hasContactedSettlement(to)) {
                        continue;
                    }
                    int tension = 1 + getPlayer().getTension(to).getValue() + indianSettlement.getAlarm(to).getValue();
                    tension = getAIRandom().nextInt(tension);
                    if (tension > targetTension) {
                        targetTension = tension;
                        target = t;
                    }
                }
                Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                AIUnit chosenOne = null;
                while (it2.hasNext()) {
                    chosenOne = (AIUnit) getAIMain().getAIObject(it2.next());
                    if (!(chosenOne.getUnit().getLocation() instanceof Tile)) {
                        chosenOne = null;
                    } else if (chosenOne.getMission() == null
                               || chosenOne.getMission() instanceof UnitWanderHostileMission) {
                        break;
                    }
                }
                if (chosenOne != null && target != null) {
                    // Check that the colony can be reached:
                    PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(), target.getTile());
                    if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                        // Make it less probable that nice players get targeted
                        // for a demand mission:
                        Player tp = target.getOwner();
                        int tension = 1 + getPlayer().getTension(tp).getValue()
                            + indianSettlement.getAlarm(tp).getValue();
                        if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                            chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne, target));
                        }
                    }
                }
            }
,
(startLine=1840 endLine=1884 srcPath=/root/NewExperiment/freecolFilter/00782/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (nearbyColonies.size() > 0) {
                int targetTension = Integer.MIN_VALUE;
                Colony target = null;
                for (int i = 0; i < nearbyColonies.size(); i++) {
                    Colony t = nearbyColonies.get(i);
                    Player to = t.getOwner();
                    if (!getPlayer().hasContacted(to)
                        || !indianSettlement.hasContactedSettlement(to)) {
                        continue;
                    }
                    int tension = 1 + getPlayer().getTension(to).getValue()
                        + indianSettlement.getAlarm(to).getValue();
                    tension = getAIRandom().nextInt(tension);
                    if (tension > targetTension) {
                        targetTension = tension;
                        target = t;
                    }
                }
                if (target != null) {
                    Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                    AIUnit chosenOne = null;
                    while (it2.hasNext()) {
                        chosenOne = (AIUnit) getAIMain().getAIObject(it2.next());
                        if (chosenOne.getUnit().getLocation() instanceof Tile
                            && (chosenOne.getMission() == null
                                || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                            // Check that the colony can be reached:
                            PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                       target.getTile());
                            if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                                // Make it less probable that nice players get targeted
                                // for a demand mission:
                                Player tp = target.getOwner();
                                int tension = 1 + getPlayer().getTension(tp).getValue()
                                    + indianSettlement.getAlarm(tp).getValue();
                                if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                                    chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne,
                                                                                 target));
                                    break;
                                }
                            }
                        }
                    }
                }
            }
,
>
, <(startLine=526 endLine=536 srcPath=/root/NewExperiment/freecolFilter/00011/src/net/sf/freecol/common/model/Unit.java)
        if (isCarrier()) {
            // TODO: Check if there is space for a new Locatable.

            if (locatable instanceof Unit) {
                unitContainer.addUnit((Unit) locatable);
            } else if (locatable instanceof Goods) {
                goodsContainer.addGoods((Goods) locatable);
            } else {
                logger.warning("Tried to add an unrecognized 'Locatable' to a unit.");
            }
        } else {
,
(startLine=547 endLine=555 srcPath=/root/NewExperiment/freecolFilter/00011/src/net/sf/freecol/common/model/Unit.java)
        if (isCarrier()) {
            if (locatable instanceof Unit) {
                unitContainer.removeUnit((Unit) locatable);
            } else if (locatable instanceof Goods) {
                goodsContainer.removeGoods((Goods) locatable);
            } else {
                logger.warning("Tried to remove an unrecognized 'Locatable' from a unit.");
            }
        } else {
,
>
, <(startLine=1508 endLine=1518 srcPath=/root/NewExperiment/freecolFilter/01171/src/net/sf/freecol/common/model/Unit.java)
    public boolean isArmed() {
        if (musketsEq[0] == null) {
            Specification spec = getSpecification();
            musketsEq[0] = spec.getEquipmentType("model.equipment.muskets");
            musketsEq[1] = spec.getEquipmentType("model.equipment.indian.muskets");
        }
        for (EquipmentType et : musketsEq) {
            if (getEquipmentCount(et) > 0) return true;
        }
        return false;
    }
,
(startLine=1525 endLine=1535 srcPath=/root/NewExperiment/freecolFilter/01171/src/net/sf/freecol/common/model/Unit.java)
    public boolean isMounted() {
        if (horsesEq[0] == null) {
            Specification spec = getSpecification();
            horsesEq[0] = spec.getEquipmentType("model.equipment.horses");
            horsesEq[1] = spec.getEquipmentType("model.equipment.indian.horses");
        }
        for (EquipmentType et : horsesEq) {
            if (getEquipmentCount(et) > 0) return true;
        }
        return false;
    }
,
>
, <(startLine=973 endLine=982 srcPath=/root/NewExperiment/freecolFilter/01496/src/net/sf/freecol/client/gui/ImageLibrary.java)
                                                  int width, int height) {
        BufferedImage scaled = new BufferedImage(width, height,
            BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = scaled.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
            RenderingHints.VALUE_INTERPOLATION_BICUBIC);
        g.drawImage(image, 0, 0, width, height, null);
        g.dispose();
        return scaled;
    }
,
(startLine=167 endLine=177 srcPath=/root/NewExperiment/freecolFilter/01496/src/net/sf/freecol/common/resources/ImageResource.java)
        if(wNew != w || hNew != h) {
            BufferedImage scaled = new BufferedImage(wNew, hNew,
                BufferedImage.TYPE_INT_ARGB);
            Graphics2D g = scaled.createGraphics();
            // Bicubic should give best quality for odd scaling factors.
            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BICUBIC);
            g.drawImage(im, 0, 0, wNew, hNew, null);
            g.dispose();
            im = scaled;
        }
,
>
, <(startLine=706 endLine=713 srcPath=/root/NewExperiment/freecolFilter/00609/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    accepted = new ShowConfirmDialogSwingTask(colony.getTile(),
                                                              "indianDemand.food.text", "indianDemand.food.yes",
                                                              "indianDemand.food.no",
                                                              "%nation%", unit.getOwner().getNationAsString(),
                                                              "%colony%", colony.getName(),
                                                              "%amount%", String.valueOf(goods.getAmount())).confirm();
                } else {
,
(startLine=713 endLine=721 srcPath=/root/NewExperiment/freecolFilter/00609/src/net/sf/freecol/client/control/InGameInputHandler.java)
                } else {
                    accepted = new ShowConfirmDialogSwingTask(colony.getTile(),
                                                              "indianDemand.other.text", "indianDemand.other.yes",
                                                              "indianDemand.other.no",
                                                              "%nation%", unit.getOwner().getNationAsString(),
                                                              "%colony%", colony.getName(),
                                                              "%amount%", String.valueOf(goods.getAmount()),
                                                              "%goods%", goods.getName()).confirm();
                }
,
>
, <(startLine=1055 endLine=1081 srcPath=/root/NewExperiment/freecolFilter/01445/src/net/sf/freecol/client/gui/ImageLibrary.java)
            for (int biY = 0; biY < bi.getHeight(); biY++) {
                for (int biX = borderWidth; biX < bi.getWidth() - borderWidth; biX++) {
                    int biXI = bi.getWidth() - biX - 1;
                    for (int d = 1; d <= borderWidth; d++) {
                        // left to right
                        srcRGB = bi.getRGB(biX, biY);
                        srcA = (srcRGB >> 24) & 0xFF;
                        dstRGB = bi.getRGB(biX - d, biY);
                        if (dstRGB != borderColor) {
                            if (srcA > 0) {
                                bi.setRGB(biX, biY, borderColor);
                                bi.setRGB(biX - d, biY, srcRGB);
                            }
                        }
                        // right to left
                        srcRGB = bi.getRGB(biXI, biY);
                        srcA = (srcRGB >> 24) & 0xFF;
                        dstRGB = bi.getRGB(biXI + d, biY);
                        if (dstRGB != borderColor) {
                            if (srcA > 0) {
                                bi.setRGB(biXI, biY, borderColor);
                                bi.setRGB(biXI + d, biY, srcRGB);
                            }
                        }
                    }
                }
            }
,
(startLine=1082 endLine=1108 srcPath=/root/NewExperiment/freecolFilter/01445/src/net/sf/freecol/client/gui/ImageLibrary.java)
            for (int biX = 0; biX < bi.getWidth(); biX++) {
                for (int biY = borderWidth; biY < bi.getHeight() - borderWidth; biY++) {
                    int biYI = bi.getHeight() - biY - 1;
                    for (int d = 1; d <= borderWidth; d++) {
                        // top to bottom
                        srcRGB = bi.getRGB(biX, biY);
                        srcA = (srcRGB >> 24) & 0xFF;
                        dstRGB = bi.getRGB(biX, biY - d);
                        if (dstRGB != borderColor) {
                            if (srcA > 0) {
                                bi.setRGB(biX, biY, borderColor);
                                bi.setRGB(biX, biY - d, srcRGB);
                            }
                        }
                        // bottom to top
                        srcRGB = bi.getRGB(biX, biYI);
                        srcA = (srcRGB >> 24) & 0xFF;
                        dstRGB = bi.getRGB(biX, biYI + d);
                        if (dstRGB != borderColor) {
                            if (srcA > 0) {
                                bi.setRGB(biX, biYI, borderColor);
                                bi.setRGB(biX, biYI + d, srcRGB);
                            }
                        }
                    }
                }
            }
,
>
, <(startLine=149 endLine=165 srcPath=/root/NewExperiment/freecolFilter/00123/src/net/sf/freecol/client/gui/panel/GoodsLabel.java)
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        try {
                switch (Integer.valueOf(command).intValue()) {
                    default:
                        logger.warning("Invalid action");
                }
                setIcon(parent.getImageProvider().getGoodsImageIcon(goods.getType()));
                repaint(0, 0, getWidth(), getHeight());
                
                // TODO: Refresh the gold label when goods have prices.
                //goldLabel.repaint(0, 0, goldLabel.getWidth(), goldLabel.getHeight());
        }
        catch (NumberFormatException e) {
            logger.warning("Invalid action number");
        }
    }
,
(startLine=155 endLine=171 srcPath=/root/NewExperiment/freecolFilter/00123/src/net/sf/freecol/client/gui/panel/MarketLabel.java)
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        try {
                switch (Integer.valueOf(command).intValue()) {
                    default:
                        logger.warning("Invalid action");
                }
                setIcon(parent.getImageProvider().getGoodsImageIcon(type));
                repaint(0, 0, getWidth(), getHeight());
                
                // TODO: Refresh the gold label when goods have prices.
                //goldLabel.repaint(0, 0, goldLabel.getWidth(), goldLabel.getHeight());
        }
        catch (NumberFormatException e) {
            logger.warning("Invalid action number");
        }
    }
,
>
, <(startLine=423 endLine=438 srcPath=/root/NewExperiment/freecolFilter/00364/src/net/sf/freecol/common/model/DifficultyLevel.java)
            if ("purchase-prices".equals(childName)) {
                purchasePriceIncrease = getAttribute(in, "price-increase", 0);
                purchasePricePerUnitType = getAttribute(in, "per-unit-type", false);
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    childName = in.getLocalName();
                    if ("purchase-price".equals(childName)) {
                        String unitTypeId = getAttribute(in, "unit-type", null);
                        int priceIncrease = getAttribute(in, "price-increase", 0);
                        purchasePrices.put(specification.getUnitType(unitTypeId),
                                           new Integer(priceIncrease));
                    } else {
                        logger.finest("Parsing of " + childName + " is not implemented yet");
                    }
                }
                in.nextTag();
            } else if ("training-prices".equals(childName)) {
,
(startLine=438 endLine=453 srcPath=/root/NewExperiment/freecolFilter/00364/src/net/sf/freecol/common/model/DifficultyLevel.java)
            } else if ("training-prices".equals(childName)) {
                trainingPriceIncrease = getAttribute(in, "price-increase", 0);
                trainingPricePerUnitType = getAttribute(in, "per-unit-type", false);
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    childName = in.getLocalName();
                    if ("training-price".equals(childName)) {
                        String unitTypeId = getAttribute(in, "unit-type", null);
                        int priceIncrease = getAttribute(in, "price-increase", 0);
                        trainingPrices.put(specification.getUnitType(unitTypeId),
                                           new Integer(priceIncrease));
                    } else {
                        logger.finest("Parsing of " + childName + " is not implemented yet");
                    }
                    in.nextTag();
                }
            } else {
,
>
, <(startLine=1196 endLine=1242 srcPath=/root/NewExperiment/freecolFilter/01326/test/src/net/sf/freecol/server/control/InGameControllerTest.java)
    public void testSoldierDemotedBySoldier() {
        Game game = ServerTestHelper.startServerGame(getTestMap(plains));
        Map map = game.getMap();
        InGameController igc = ServerTestHelper.getInGameController();

        List<CombatResult> crs;
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");
        igc.changeStance(dutch, Stance.WAR, french, true);

        Tile tile1 = map.getTile(5, 8);
        tile1.setExplored(dutch, true);
        tile1.setExplored(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExplored(dutch, true);
        tile2.setExplored(french, true);
        Unit soldier1 = new ServerUnit(game, tile1, dutch, colonistType, soldierRole);
        Unit soldier2 = new ServerUnit(game, tile2, french, colonistType, soldierRole);

        // Soldier loses and loses muskets
        crs = fakeAttackResult(CombatResult.LOSE, soldier1, soldier2);
        checkCombat("Soldier should lose equipment", crs,
            CombatResult.LOSE, CombatResult.LOSE_EQUIP);
        igc.combat((ServerPlayer) dutch, soldier1, soldier2, crs);

        assertEquals("Soldier should be a colonist",
                     colonistType, soldier1.getType());
        assertEquals("Soldier should still be Dutch",
                     dutch, soldier1.getOwner());
        assertEquals("Soldier should not have moved",
                     tile1, soldier1.getTile());
        assertTrue("Soldier should have lost equipment",
                   soldier1.getEquipment().isEmpty());

        // Soldier loses and is captured
        crs = fakeAttackResult(CombatResult.LOSE, soldier1, soldier2);
        checkCombat("Soldier v soldier", crs,
            CombatResult.LOSE, CombatResult.CAPTURE_UNIT);
        igc.combat((ServerPlayer) dutch, soldier1, soldier2, crs);

        assertEquals("Soldier should be a colonist",
                     colonistType, soldier1.getType());
        assertEquals("Soldier should now be French",
                     french, soldier1.getOwner());
        assertEquals("Soldier should have moved",
                     tile2, soldier1.getTile());
    }
,
(startLine=1435 endLine=1484 srcPath=/root/NewExperiment/freecolFilter/01326/test/src/net/sf/freecol/server/control/InGameControllerTest.java)
    public void testVeteranSoldierDemotedBySoldier() {
        Game game = ServerTestHelper.startServerGame(getTestMap(plains));
        Map map = game.getMap();
        InGameController igc = ServerTestHelper.getInGameController();

        List<CombatResult> crs;
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");
        igc.changeStance(dutch, Stance.WAR, french, true);

        Tile tile1 = map.getTile(5, 8);
        tile1.setExplored(dutch, true);
        tile1.setExplored(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExplored(dutch, true);
        tile2.setExplored(french, true);
        Unit soldier1 = new ServerUnit(game, tile1, dutch, veteranType, soldierRole);
        Unit soldier2 = new ServerUnit(game, tile2, french, colonistType, soldierRole);
        assertEquals("Veterans should become colonists on capture",
                     colonistType, veteranType
                     .getTargetType(ChangeType.CAPTURE, dutch));

        // Soldier loses and loses equipment
        crs = fakeAttackResult(CombatResult.LOSE, soldier1, soldier2);
        checkCombat("Soldier v Soldier", crs,
            CombatResult.LOSE, CombatResult.LOSE_EQUIP);
        igc.combat((ServerPlayer) dutch, soldier1, soldier2, crs);

        assertEquals("Soldier1 should be a Veteran",
                     veteranType, soldier1.getType());
        assertEquals("Soldier1 should be Dutch",
                     dutch, soldier1.getOwner());
        assertEquals("Soldier1 should be on Tile1",
                     tile1, soldier1.getTile());
        assertTrue("Soldier1 should not have equipment",
                   soldier1.getEquipment().isEmpty());

        // Soldier1 loses and is captured
        crs = fakeAttackResult(CombatResult.LOSE, soldier1, soldier2);
        checkCombat("Soldier1 v Soldier2", crs,
            CombatResult.LOSE, CombatResult.CAPTURE_UNIT);
        igc.combat((ServerPlayer) dutch, soldier1, soldier2, crs);

        assertEquals("Soldier1 should be a colonist",
                     colonistType, soldier1.getType());
        assertEquals("Soldier1 should be French",
                     french, soldier1.getOwner());
        assertEquals("Soldier1 should be have moved",
                     tile2, soldier1.getTile());
    }
,
>
, <(startLine=117 endLine=136 srcPath=/root/NewExperiment/freecolFilter/00172/src/net/sf/freecol/common/model/Game.java)
    public Game(FreeColGameObjectListener freeColGameObjectListener, ModelController modelController, XMLStreamReader in, FreeColGameObject[] fcgos) throws XMLStreamException {
        super(null, in);

        setFreeColGameObjectListener(freeColGameObjectListener);
        this.modelController = modelController;
        this.viewOwner = null;

        canGiveID = true;

        for (int i=0; i<fcgos.length; i++) {
            fcgos[i].setGame(this);
            fcgos[i].updateID();

            if (fcgos[i] instanceof Player) {
                players.add((Player) fcgos[i]);
            }
        }

        readFromXML(in);
    }
,
(startLine=153 endLine=172 srcPath=/root/NewExperiment/freecolFilter/00172/src/net/sf/freecol/common/model/Game.java)
     public Game(FreeColGameObjectListener freeColGameObjectListener, ModelController modelController, Element e, FreeColGameObject[] fcgos){
         super(null, e);

         setFreeColGameObjectListener(freeColGameObjectListener);
         this.modelController = modelController;
         this.viewOwner = null;

         canGiveID = true;

         for (int i=0; i<fcgos.length; i++) {
             fcgos[i].setGame(this);
             fcgos[i].updateID();

             if (fcgos[i] instanceof Player) {
                 players.add((Player) fcgos[i]);
             }
         }

         readFromXMLElement(e);
     }
,
>
, <(startLine=258 endLine=272 srcPath=/root/NewExperiment/freecolFilter/00941/src/net/sf/freecol/common/model/SettlementType.java)
    public final RandomRange getPlunderRange(Unit unit) {
        for (RandomRange range : plunder) {
            List<Scope> scopes = range.getScopes();
            if (scopes.isEmpty()) {
                return range;
            } else {
                for (Scope scope : scopes) {
                    if (scope.appliesTo(unit)) {
                        return range;
                    }
                }
            }
        }
        return null;
    }
,
(startLine=290 endLine=304 srcPath=/root/NewExperiment/freecolFilter/00941/src/net/sf/freecol/common/model/SettlementType.java)
    public final RandomRange getGifts(Unit unit) {
        for (RandomRange range : gifts) {
            List<Scope> scopes = range.getScopes();
            if (scopes.isEmpty()) {
                return range;
            } else {
                for (Scope scope : scopes) {
                    if (scope.appliesTo(unit)) {
                        return range;
                    }
                }
            }
        }
        return null;
    }
,
>
, <(startLine=511 endLine=520 srcPath=/root/NewExperiment/freecolFilter/00504/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
    private JLabel createUnitTypeLabel(UnitType unitType, Role role, int count) {
        ImageIcon unitIcon = reportPanel.getLibrary().getUnitImageIcon(unitType, role, count == 0);
        JLabel unitLabel = new JLabel(reportPanel.getLibrary().getScaledImageIcon(unitIcon, 0.66f));
        unitLabel.setText(String.valueOf(count));
        if (count == 0) {
            unitLabel.setForeground(Color.GRAY);
        }
        unitLabel.setToolTipText(Unit.getName(unitType, role));
        return unitLabel;
    }
,
(startLine=164 endLine=173 srcPath=/root/NewExperiment/freecolFilter/00504/src/net/sf/freecol/client/gui/panel/ReportPanel.java)
    public JLabel createUnitTypeLabel(UnitType unitType, Role role, int count) {
        ImageIcon unitIcon = getLibrary().getUnitImageIcon(unitType, role, count == 0);
        JLabel unitLabel = new JLabel(getLibrary().getScaledImageIcon(unitIcon, 0.66f));
        unitLabel.setText(String.valueOf(count));
        if (count == 0) {
            unitLabel.setForeground(Color.GRAY);
        }
        unitLabel.setToolTipText(Unit.getName(unitType, role));
        return unitLabel;
    }
,
>
, <(startLine=911 endLine=922 srcPath=/root/NewExperiment/freecolFilter/00442/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    public Iterator<AIColony> getAIColonyIterator() {
        ArrayList<AIColony> ac = new ArrayList<AIColony>();
        for (Colony colony : getPlayer().getColonies()) {
            AIColony a = (AIColony) getAIMain().getAIObject(colony.getId());
            if (a != null) {
                ac.add(a);
            } else {
                logger.warning("Could not find the AIColony for: " + colony);
            }
        }
        return ac.iterator();
    }
,
(startLine=2022 endLine=2033 srcPath=/root/NewExperiment/freecolFilter/00442/src/net/sf/freecol/server/ai/AIPlayer.java)
    public Iterator<AIColony> getAIColonyIterator() {
        ArrayList<AIColony> ac = new ArrayList<AIColony>();
        for (Colony colony : player.getColonies()) {
            AIColony a = (AIColony) getAIMain().getAIObject(colony.getId());
            if (a != null) {
                ac.add(a);
            } else {
                logger.warning("Could not find the AIColony for: " + colony);
            }
        }
        return ac.iterator();
    }
,
>
, <(startLine=353 endLine=363 srcPath=/root/NewExperiment/freecolFilter/00045/src/net/sf/freecol/common/model/FreeColGameObject.java)
    protected int[][] readFromArrayElement(String tagName, Element arrayElement, int[][] arrayType) {
        int[][] array = new int[Integer.parseInt(arrayElement.getAttribute("xLength"))][Integer.parseInt(arrayElement.getAttribute("yLength"))];
        
        for (int x=0; x<array.length; x++) {
            for (int y=0; y<array[0].length; y++) {
                array[x][y] = Integer.parseInt(arrayElement.getAttribute("x" + Integer.toString(x) + "y" + Integer.toString(y)));
            }
        }
        
        return array;
    }    
,
(startLine=387 endLine=397 srcPath=/root/NewExperiment/freecolFilter/00045/src/net/sf/freecol/common/model/FreeColGameObject.java)
    protected boolean[][] readFromArrayElement(String tagName, Element arrayElement, boolean[][] arrayType) {
        boolean[][] array = new boolean[Integer.parseInt(arrayElement.getAttribute("xLength"))][Integer.parseInt(arrayElement.getAttribute("yLength"))];
        
        for (int x=0; x<array.length; x++) {
            for (int y=0; y<array[0].length; y++) {
                array[x][y] = Boolean.valueOf(arrayElement.getAttribute("x" + Integer.toString(x) + "y" + Integer.toString(y))).booleanValue();
            }
        }
        
        return array;
    }        
,
>
, <(startLine=67 endLine=77 srcPath=/root/NewExperiment/freecolFilter/01396/src/net/sf/freecol/client/gui/option/UnitTypeOptionUI.java)
                            boolean editable) {
        super(gui, option, editable);

        List<UnitType> choices = option.getChoices();
        box.setModel(new DefaultComboBoxModel<UnitType>(choices
                .toArray(new UnitType[choices.size()])));
        box.setSelectedItem(option.getValue());
        box.setRenderer(new ChoiceRenderer());

        initialize();
    }
,
(startLine=53 endLine=63 srcPath=/root/NewExperiment/freecolFilter/01396/src/net/sf/freecol/client/gui/option/StringOptionUI.java)
                          boolean editable) {
        super(gui, option, editable);

        List<String> choices = option.getChoices();
        box.setModel(new DefaultComboBoxModel<String>(choices
                .toArray(new String[choices.size()])));
        box.setSelectedItem(option.getValue());
        box.setRenderer(new FreeColComboBoxRenderer<String>("", true));

        initialize();
    }
,
>
, <(startLine=365 endLine=374 srcPath=/root/NewExperiment/freecolFilter/00878/src/net/sf/freecol/common/networking/DOMMessage.java)
    public static Element getChildElement(Element element, String tagName) {
        NodeList n = element.getChildNodes();
        for (int i = 0; i < n.getLength(); i++) {
            if (n.item(i) instanceof Element && ((Element) n.item(i)).getTagName().equals(tagName)) {
                return (Element) n.item(i);
            }
        }

        return null;
    }
,
(startLine=363 endLine=372 srcPath=/root/NewExperiment/freecolFilter/00878/src/net/sf/freecol/common/networking/Message.java)
    public static Element getChildElement(Element element, String tagName) {
        NodeList n = element.getChildNodes();
        for (int i = 0; i < n.getLength(); i++) {
            if (n.item(i) instanceof Element && ((Element) n.item(i)).getTagName().equals(tagName)) {
                return (Element) n.item(i);
            }
        }

        return null;
    }
,
>
, <(startLine=963 endLine=983 srcPath=/root/NewExperiment/freecolFilter/01473/src/net/sf/freecol/client/gui/ImageLibrary.java)
                                     Color background, Color foreground) {
        Font font = FontLibrary.createFont(FontLibrary.FontType.SIMPLE,
            FontLibrary.FontSize.TINY, Font.BOLD, scalingFactor);
        FontMetrics fm = g.getFontMetrics(font);
        int padding = (int)(6 * scalingFactor);
        BufferedImage bi = new BufferedImage(fm.stringWidth(text) + padding,
            fm.getMaxAscent() + fm.getMaxDescent() + padding,
            BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = bi.createGraphics();
        g2.setFont(font);
        int width = bi.getWidth();
        int height = bi.getHeight();
        g2.setColor(border);
        g2.fillRect(0, 0, width, height);
        g2.setColor(background);
        g2.fillRect(1, 1, width - 2, height - 2);
        g2.setColor(foreground);
        g2.drawString(text, padding/2, fm.getMaxAscent() + padding/2);
        g2.dispose();
        return bi;
    }
,
(startLine=1000 endLine=1024 srcPath=/root/NewExperiment/freecolFilter/01473/src/net/sf/freecol/client/gui/ImageLibrary.java)
                                           Color foreground) {
        Font font = FontLibrary.createFont(FontLibrary.FontType.SIMPLE,
            FontLibrary.FontSize.TINY, Font.BOLD, scalingFactor);
        FontMetrics fm = g.getFontMetrics(font);
        int padding = (int)(6 * scalingFactor);
        BufferedImage bi = new BufferedImage(fm.stringWidth(text) + padding,
            fm.getMaxAscent() + fm.getMaxDescent() + padding,
            BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = bi.createGraphics();
        g2.setFont(font);
        int width = bi.getWidth();
        int height = bi.getHeight();
        g2.setColor(border);
        g2.fillRect(0, 0, width, height);
        g2.setColor(background);
        g2.fillRect(1, 1, width - 2, height - 2);
        if (amount > 0.0 && amount <= 1.0) {
            g2.setColor(fill);
            g2.fillRect(1, 1, width - 2, (int)((height - 2) * amount));
        }
        g2.setColor(foreground);
        g2.drawString(text, padding/2, fm.getMaxAscent() + padding/2);
        g2.dispose();
        return bi;
    }
,
>
, <(startLine=414 endLine=422 srcPath=/root/NewExperiment/freecolFilter/01235/src/net/sf/freecol/server/ai/AIInGameInputHandler.java)
        for (int i = 0; i < nodes.getLength(); i++) {
            try {
                Element reply = handle(connection, (Element) nodes.item(i));
                if (reply != null) results.add(reply);
            } catch (Exception e) {
                logger.log(Level.WARNING, "Caught crash in multiple item " + i
                    + ", continuing.", e);
            }
        }
,
(startLine=570 endLine=579 srcPath=/root/NewExperiment/freecolFilter/01235/src/net/sf/freecol/server/control/InGameInputHandler.java)
                for (int i = 0; i < nodes.getLength(); i++) {
                    try {
                        Element reply = super.handle(connection,
                            (Element) nodes.item(i));
                        if (reply != null) results.add(reply);
                    } catch (Exception e) {
                        logger.log(Level.WARNING, "Crash in multiple, item " + i
                            + ", continuing.", e);
                    }
                }
,
(startLine=1218 endLine=1226 srcPath=/root/NewExperiment/freecolFilter/01235/src/net/sf/freecol/client/control/InGameInputHandler.java)
        for (int i = 0; i < nodes.getLength(); i++) {
            try {
                Element reply = handle(connection, (Element) nodes.item(i));
                if (reply != null) results.add(reply);
            } catch (Exception e) {
                logger.log(Level.WARNING, "Caught crash in multiple item " + i
                    + ", continuing.", e);
            }
        }
,
>
, <(startLine=52 endLine=74 srcPath=/root/NewExperiment/freecolFilter/00227/src/net/sf/freecol/tools/TranslationReport.java)
                } else {
                    String masterValue = master.getProperty(key);
                    int lastIndex = 0;
                    boolean inVariable = false;

                    for (int index = 0; index < masterValue.length() - 1; index++) {
                        char current = masterValue.charAt(index);
                        if (current == '%') {
                            if (inVariable) {
                                String var = masterValue.substring(lastIndex, index + 1);
                                if (value.indexOf(var) == -1) {
                                    missingVariables.add(key);
                                }
                                inVariable = false;
                            } else {
                                lastIndex = index;
                                inVariable = true;
                            }
                        } else if (!Character.isLetterOrDigit(current)) {
                            inVariable = false;
                        }
                    }
                }
,
(startLine=105 endLine=127 srcPath=/root/NewExperiment/freecolFilter/00227/src/net/sf/freecol/tools/TranslationReport.java)
                } else {
                    String propertiesValue = properties.getProperty(key);
                    int lastIndex = 0;
                    boolean inVariable = false;

                    for (int index = 0; index < propertiesValue.length() - 1; index++) {
                        char current = propertiesValue.charAt(index);
                        if (current == '%') {
                            if (inVariable) {
                                String var = propertiesValue.substring(lastIndex, index + 1);
                                if (value.indexOf(var) == -1) {
                                    superfluousVariables.add(key);
                                }
                                inVariable = false;
                            } else {
                                lastIndex = index;
                                inVariable = true;
                            }
                        } else if (!Character.isLetterOrDigit(current)) {
                            inVariable = false;
                        }
                    }
                }
,
>
, <(startLine=3329 endLine=3356 srcPath=/root/NewExperiment/freecolFilter/01396/src/net/sf/freecol/server/control/InGameController.java)
                                        DiplomaticTrade agreement) {
        ChangeSet cs = new ChangeSet();
        DiplomacySession session
            = TransactionSession.lookup(DiplomacySession.class, 
                                        ourUnit, otherUnit);
        if (session == null) {
            session = TransactionSession.lookup(DiplomacySession.class,
                                                otherUnit, ourUnit);
        }
        if (session == null) {
            if (agreement.getStatus() != TradeStatus.PROPOSE_TRADE) {
                return DOMMessage.clientError("Missing session for "
                    + ourUnit.getId() + "," + otherUnit.getId());
            }
            session = new DiplomacySession(ourUnit, otherUnit);
            ourUnit.setMovesLeft(0);
            cs.addPartial(See.only(serverPlayer), ourUnit, "movesLeft");
        }
        ServerPlayer otherPlayer = (ServerPlayer)otherUnit.getOwner();
        if (csDiplomacySession(serverPlayer, otherPlayer,
                agreement, session,
                new DiplomacyMessage(otherUnit, ourUnit, agreement), cs)) {
            cs.add(See.only(serverPlayer), ChangePriority.CHANGE_LATE,
                new DiplomacyMessage(ourUnit, otherUnit, 
                                     session.getAgreement()));
        }
        return cs.build(serverPlayer);
    }
,
(startLine=3369 endLine=3392 srcPath=/root/NewExperiment/freecolFilter/01396/src/net/sf/freecol/server/control/InGameController.java)
                                        DiplomaticTrade agreement) {
        ChangeSet cs = new ChangeSet();
        DiplomacySession session
            = TransactionSession.lookup(DiplomacySession.class,
                                        ourUnit, otherColony);
        if (session == null) {
            if (agreement.getStatus() != TradeStatus.PROPOSE_TRADE) {
                return DOMMessage.clientError("Missing diplomacy session for "
                    + ourUnit.getId() + "," + otherColony.getId());
            }
            session = new DiplomacySession(ourUnit, otherColony);
            ourUnit.setMovesLeft(0);
            cs.addPartial(See.only(serverPlayer), ourUnit, "movesLeft");
        }
        ServerPlayer otherPlayer = (ServerPlayer)otherColony.getOwner();
        if (csDiplomacySession(serverPlayer, otherPlayer,
                agreement, session,
                new DiplomacyMessage(otherColony, ourUnit, agreement), cs)) {
            cs.add(See.only(serverPlayer), ChangePriority.CHANGE_LATE,
                new DiplomacyMessage(ourUnit, otherColony, 
                                     session.getAgreement()));
        }
        return cs.build(serverPlayer);
    }
,
(startLine=3435 endLine=3456 srcPath=/root/NewExperiment/freecolFilter/01396/src/net/sf/freecol/server/control/InGameController.java)
                             Colony otherColony, DiplomaticTrade agreement) {
        ChangeSet cs = new ChangeSet();
        TradeStatus status = agreement.getStatus();
        DiplomacySession session
            = TransactionSession.lookup(DiplomacySession.class,
                                        ourUnit, otherColony);
        if (session == null) {
            if (status != TradeStatus.PROPOSE_TRADE) {
                return DOMMessage.clientError("Mission session for "
                    + ourUnit.getId() + "/" + otherColony.getId());
            }
            session = new DiplomacySession(ourUnit, otherColony);
        }
        ServerPlayer otherPlayer = (ServerPlayer)otherColony.getOwner();
        if (csDiplomacySession(serverPlayer, otherPlayer, agreement, session,
                new DiplomacyMessage(otherColony, ourUnit, agreement), cs)) {
            cs.add(See.only(serverPlayer), ChangePriority.CHANGE_LATE,
                new DiplomacyMessage(ourUnit, otherColony, 
                                     session.getAgreement()));
        }
        return cs.build(serverPlayer);
    }
,
>
, <(startLine=633 endLine=644 srcPath=/root/NewExperiment/freecolFilter/01346/test/src/net/sf/freecol/common/model/TileTest.java)
        for (Tile t : tiles) {
            ColonyTile ct = colony.getColonyTile(t);
            unit.setLocation(ct);
            unit.changeWorkType(lumber);
            int result = base;
            if (t.hasRiver()) result += riverBonus;
            if (t.hasRoad()) result += roadBonus;
            if (t.hasResource()) result += resourceBonus;
            assertEquals("FreeColonist lumber production at tile " + i, result,
                ct.getTotalProductionOf(lumber));
            i++;
        }
,
(startLine=652 endLine=663 srcPath=/root/NewExperiment/freecolFilter/01346/test/src/net/sf/freecol/common/model/TileTest.java)
        for (Tile t : tiles) {
            ColonyTile ct = colony.getColonyTile(t);
            unit.setLocation(ct);
            unit.changeWorkType(lumber);
            int result = base * expertBonus;
            if (t.hasRiver()) result += riverBonus;
            if (t.hasRoad()) result += roadBonus;
            if (t.hasResource()) result += resourceBonus * expertBonus;
            assertEquals("Expert lumber production at tile " + i, result,
                ct.getTotalProductionOf(lumber));
            i++;
        }
,
>
, <(startLine=3709 endLine=3717 srcPath=/root/NewExperiment/freecolFilter/00259/src/net/sf/freecol/common/model/Unit.java)
            if (isArmed()) {
                // dragoon
                setMounted(false, true);
                if (enemyUnit.getType() == BRAVE && !enemyUnit.isMounted() && greatDemote) {
                    addModelMessage(this, "model.unit.braveMounted", new String[][] { { "%nation%",
                            enemyUnit.getOwner().getNationAsString() } }, ModelMessage.FOREIGN_DIPLOMACY);
                    enemyUnit.setMounted(true, true);
                }
            } else {
,
(startLine=3723 endLine=3731 srcPath=/root/NewExperiment/freecolFilter/00259/src/net/sf/freecol/common/model/Unit.java)
        } else if (isArmed()) {
            // soldier
            setArmed(false, true);
            if (enemyUnit.getType() == BRAVE && !enemyUnit.isArmed() && greatDemote) {
                addModelMessage(this, "model.unit.braveArmed", new String[][] { { "%nation%",
                        enemyUnit.getOwner().getNationAsString() } }, ModelMessage.FOREIGN_DIPLOMACY);
                enemyUnit.setArmed(true, true);
            }
        } else {
,
>
, <(startLine=207 endLine=226 srcPath=/root/NewExperiment/freecolFilter/00257/src/net/sf/freecol/common/option/OptionMap.java)
    private static XMLStreamReader createXMLStreamReader(File file) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(file));
        // Automatically detect compression:
        in.mark(10);
        byte[] buf = new byte[5];
        in.read(buf, 0, 5);
        in.reset();
        if (!(new String(buf)).equals("<?xml")) {
            in = new BufferedInputStream(new InflaterInputStream(in));
        }
        XMLInputFactory xif = XMLInputFactory.newInstance();
        try {
            return xif.createXMLStreamReader(in);
        } catch (XMLStreamException e) {
            StringWriter sw = new StringWriter();
            e.printStackTrace(new PrintWriter(sw));
            logger.warning(sw.toString());
            throw new IOException("XMLStreamException.");
        }
    }
,
(startLine=531 endLine=550 srcPath=/root/NewExperiment/freecolFilter/00257/src/net/sf/freecol/server/FreeColServer.java)
    public static XMLStreamReader createXMLStreamReader(File file) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(file));
        // Automatically detect compression:
        in.mark(10);
        byte[] buf = new byte[5];
        in.read(buf, 0, 5);
        in.reset();
        if (!(new String(buf)).equals("<?xml")) {
            in = new BufferedInputStream(new InflaterInputStream(in));
        }
        XMLInputFactory xif = XMLInputFactory.newInstance();
        try {
            return xif.createXMLStreamReader(in);
        } catch (XMLStreamException e) {
            StringWriter sw = new StringWriter();
            e.printStackTrace(new PrintWriter(sw));
            logger.warning(sw.toString());
            throw new IOException("XMLStreamException.");
        }
    }
,
>
, <(startLine=156 endLine=163 srcPath=/root/NewExperiment/freecolFilter/01341/src/net/sf/freecol/client/gui/option/ListOptionUI.java)
            public void actionPerformed(ActionEvent e) {
                if (list.getSelectedIndex() == 0) return;
                final int index = list.getSelectedIndex();
                final Object temp = model.getElementAt(index);
                model.setElementAt(model.getElementAt(index-1), index);
                model.setElementAt(temp, index-1);
                list.setSelectedIndex(index-1);
            }
,
(startLine=166 endLine=173 srcPath=/root/NewExperiment/freecolFilter/01341/src/net/sf/freecol/client/gui/option/ListOptionUI.java)
            public void actionPerformed(ActionEvent e) {
                if (list.getSelectedIndex() == model.getSize() - 1) return;
                final int index = list.getSelectedIndex();
                final Object temp = model.getElementAt(index);
                model.setElementAt(model.getElementAt(index+1), index);
                model.setElementAt(temp, index+1);
                list.setSelectedIndex(index+1);
            }
,
>
, <(startLine=467 endLine=482 srcPath=/root/NewExperiment/freecolFilter/01133/src/net/sf/freecol/common/model/ColonyTile.java)
    public ProductionType getBestProductionType(Unit unit) {
        ProductionType best = null;
        int amount = 0;
        for (ProductionType productionType : getProductionTypes()) {
            if (productionType.getOutputs() != null) {
                for (AbstractGoods output : productionType.getOutputs()) {
                    int newAmount = getPotentialProduction(output.getType(), unit.getType());
                    if (newAmount > amount) {
                        amount = newAmount;
                        best = productionType;
                    }
                }
            }
        }
        return best;
    }
,
(startLine=492 endLine=509 srcPath=/root/NewExperiment/freecolFilter/01133/src/net/sf/freecol/common/model/ColonyTile.java)
    private ProductionType getBestProductionType(GoodsType goodsType) {
        ProductionType best = null;
        int amount = 0;
        for (ProductionType productionType : getProductionTypes()) {
            if (productionType.getOutputs() != null) {
                for (AbstractGoods output : productionType.getOutputs()) {
                    if (output.getType() == goodsType) {
                        int newAmount = output.getAmount();
                        if (newAmount > amount) {
                            amount = newAmount;
                            best = productionType;
                        }
                    }
                }
            }
        }
        return best;
    }
,
>
, <(startLine=493 endLine=510 srcPath=/root/NewExperiment/freecolFilter/00575/src/net/sf/freecol/common/model/FreeColGameObject.java)
                                                                Class<T> returnClass) {
        final String attributeString = in.getAttributeValue(null, attributeName);
        if (attributeString == null) {
            return null;
        } else {
            T returnValue = returnClass.cast(getGame().getFreeColGameObject(attributeString));
            try {
                if (returnValue == null) {
                    Constructor<T> c = returnClass.getConstructor(Game.class, String.class);
                    returnValue = returnClass.cast(c.newInstance(getGame(), attributeString));
                }
                return returnValue;
            } catch(Exception e) {
                logger.warning("Failed to create FreeColGameObject with ID " + attributeString);
                return null;
            }
        }
    }
,
(startLine=522 endLine=542 srcPath=/root/NewExperiment/freecolFilter/00575/src/net/sf/freecol/common/model/FreeColGameObject.java)
    public <T extends FreeColGameObject> T updateFreeColGameObject(XMLStreamReader in, Class<T> returnClass) {
        final String attributeString = in.getAttributeValue(null, ID_ATTRIBUTE);
        if (attributeString == null) {
            return null;
        } else {
            T returnValue = returnClass.cast(getGame().getFreeColGameObject(attributeString));
            try {
                if (returnValue == null) {
                    Constructor<T> c = returnClass.getConstructor(Game.class, XMLStreamReader.class);
                    returnValue = returnClass.cast(c.newInstance(getGame(), in));
                } else {
                    returnValue.readFromXML(in);
                }
                return returnValue;
            } catch(Exception e) {
                logger.warning("Failed to update FreeColGameObject with ID " + attributeString);
                e.printStackTrace();
                return null;
            }
        }
    }
,
>
, <(startLine=253 endLine=264 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/SimpleCombatModel.java)
            if (defender.getTile() != null && defender.getTile().getSettlement() != null) {
                Modifier settlementModifier = getSettlementModifier(attacker, defender.getTile().getSettlement());
                result.add(settlementModifier);
                totalPercentage += settlementModifier.getValue();
                // TODO: is it right? or should it be another ability?
                if (defender.hasAbility("model.ability.bombard") && attacker.getOwner().isIndian()) {
                    // 100% defense bonus against an Indian raid
                    percentage = 100;
                    result.add(new Modifier("modifiers.artilleryAgainstRaid", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
            } else if (defender.getTile() != null) {
,
(startLine=3349 endLine=3360 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/Unit.java)
            if (defender.getTile() != null && defender.getTile().getSettlement() != null) {
                Modifier settlementModifier = getSettlementModifier(attacker, defender.getTile().getSettlement());
                result.add(settlementModifier);
                totalPercentage += settlementModifier.getValue();
                // TODO: is it right? or should it be another ability?
                if (defender.hasAbility("model.ability.bombard") && attacker.getOwner().isIndian()) {
                    // 100% defense bonus against an Indian raid
                    percentage = 100;
                    result.add(new Modifier("modifiers.artilleryAgainstRaid", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
            } else if (defender.getTile() != null) {
,
>
, <(startLine=558 endLine=564 srcPath=/root/NewExperiment/freecolFilter/01424/src/net/sf/freecol/common/i18n/Messages.java)
                    } else {
                        ret = StringTemplate.template("unitFormat.null.nation.role.equip")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId))
                            .add("%role%", nameKey(roleKey))
                            .addStringTemplate("%equipment%", extra);
                    }
,
(startLine=586 endLine=592 srcPath=/root/NewExperiment/freecolFilter/01424/src/net/sf/freecol/common/i18n/Messages.java)
                    } else {
                        ret = StringTemplate.template("unitFormat.name.null.role.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%role%", nameKey(roleKey))
                            .addStringTemplate("%equipment%", extra);
                    }
,
(startLine=601 endLine=607 srcPath=/root/NewExperiment/freecolFilter/01424/src/net/sf/freecol/common/i18n/Messages.java)
                    } else {
                        ret = StringTemplate.template("unitFormat.name.nation.null.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId))
                            .addStringTemplate("%equipment%", extra);
                    }
,
(startLine=609 endLine=615 srcPath=/root/NewExperiment/freecolFilter/01424/src/net/sf/freecol/common/i18n/Messages.java)
                    if (extra == null) {
                        ret = StringTemplate.template("unitFormat.name.nation.role.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId))
                            .add("%role%", nameKey(roleKey));
                    } else {
,
(startLine=615 endLine=622 srcPath=/root/NewExperiment/freecolFilter/01424/src/net/sf/freecol/common/i18n/Messages.java)
                    } else {
                        ret = StringTemplate.template("unitFormat.name.nation.role.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId))
                            .add("%role%", nameKey(roleKey))
                            .addStringTemplate("%equipment%", extra);
                    }
,
>
, <(startLine=125 endLine=146 srcPath=/root/NewExperiment/freecolFilter/01476/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        public ColonyTradeItemPanel(Player source) {
            this.source = source;
            this.colonyBox = new JComboBox<>();
            this.clearButton = Utility.localizedButton("negotiationDialog.clear");
            this.clearButton.addActionListener(this);
            this.clearButton.setActionCommand(CLEAR);
            this.addButton = Utility.localizedButton("negotiationDialog.add");
            this.addButton.addActionListener(this);
            this.addButton.setActionCommand(ADD);
            this.label = Utility.localizedLabel(Messages.getName("model.tradeItem.colony"));
            this.allColonies = source.getColonies();

            setLayout(new MigLayout("wrap 1", "", ""));
            setBorder(Utility.SIMPLE_LINE_BORDER);

            add(this.label);
            add(this.colonyBox);
            add(this.clearButton, "split 2");
            add(this.addButton);

            setSize(getPreferredSize());
        }
,
(startLine=328 endLine=350 srcPath=/root/NewExperiment/freecolFilter/01476/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        public GoodsTradeItemPanel(Player source, List<Goods> allGoods) {
            this.source = source;
            this.goodsBox = new JComboBox<>(new DefaultComboBoxModel<Goods>());
            this.goodsBox.setRenderer(new GoodsBoxRenderer());
            this.clearButton = Utility.localizedButton("negotiationDialog.clear");
            this.clearButton.addActionListener(this);
            this.clearButton.setActionCommand(CLEAR);
            this.addButton = Utility.localizedButton("negotiationDialog.add");
            this.addButton.addActionListener(this);
            this.addButton.setActionCommand(ADD);
            this.label = Utility.localizedLabel(Messages.nameKey("model.tradeItem.goods"));
            this.allGoods = allGoods;

            setLayout(new MigLayout("wrap 1", "", ""));
            setBorder(Utility.SIMPLE_LINE_BORDER);

            add(this.label);
            add(this.goodsBox);
            add(this.clearButton, "split 2");
            add(this.addButton);

            setSize(getPreferredSize());
        }
,
(startLine=577 endLine=596 srcPath=/root/NewExperiment/freecolFilter/01476/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        public StanceTradeItemPanel(Player source, Player target) {
            this.source = source;
            this.target = target;
            this.stanceBox = new JComboBox<>(new DefaultComboBoxModel<Stance>());
            this.stanceBox.setRenderer(new StanceBoxRenderer());
            this.clearButton = Utility.localizedButton("negotiationDialog.clear");
            this.clearButton.addActionListener(this);
            this.clearButton.setActionCommand(CLEAR);
            this.addButton = Utility.localizedButton("negotiationDialog.add");
            this.addButton.addActionListener(this);
            this.addButton.setActionCommand(ADD);

            setBorder(Utility.SIMPLE_LINE_BORDER);
            setLayout(new MigLayout("wrap 1", "", ""));

            add(Utility.localizedLabel(Messages.nameKey("model.tradeItem.stance")));
            add(this.stanceBox);
            add(this.clearButton, "split 2");
            add(this.addButton);
        }
,
(startLine=695 endLine=717 srcPath=/root/NewExperiment/freecolFilter/01476/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        public UnitTradeItemPanel(Player source, List<Unit> allUnits) {
            this.source = source;
            this.unitBox = new JComboBox<>(new DefaultComboBoxModel<Unit>());
            this.unitBox.setRenderer(new UnitBoxRenderer());
            this.clearButton = Utility.localizedButton("negotiationDialog.clear");
            this.clearButton.addActionListener(this);
            this.clearButton.setActionCommand(CLEAR);
            this.addButton = Utility.localizedButton("negotiationDialog.add");
            this.addButton.addActionListener(this);
            this.addButton.setActionCommand(ADD);
            this.label = Utility.localizedLabel(Messages.nameKey("model.tradeItem.unit"));
            this.allUnits = allUnits;

            setLayout(new MigLayout("wrap 1", "", ""));
            setBorder(Utility.SIMPLE_LINE_BORDER);

            add(this.label);
            add(this.unitBox);
            add(this.clearButton, "split 2");
            add(this.addButton);

            setSize(getPreferredSize());
        }
,
>
, <(startLine=101 endLine=116 srcPath=/root/NewExperiment/freecolFilter/01728/src/net/sf/freecol/server/networking/DummyConnection.java)
    public boolean sendMessage(Message message) throws IOException {
        DummyConnection other = getOtherConnection();
        if (other == null) return false;
        if (message == null) return true;
        logMessage(message, true);
        final String tag = message.getType();
        Message reply;
        try {
            reply = other.handle(message);
            assert reply == null;
        } catch (FreeColException fce) {
            logger.log(Level.WARNING, "Dummy sendMessage fail: " + tag, fce);
            return false;
        }
        return true;
    }
,
(startLine=122 endLine=137 srcPath=/root/NewExperiment/freecolFilter/01728/src/net/sf/freecol/server/networking/DummyConnection.java)
    protected Message askMessage(Message message) throws IOException {
        DummyConnection other = getOtherConnection();
        if (other == null) return null;
        if (message == null) return null;
        logMessage(message, true);
        final String tag = message.getType();
        Message response;
        try {
            response = other.handle(message);
        } catch (FreeColException fce) {
            logger.log(Level.WARNING, "Dummy askMessage fail: " + tag, fce);
            return null;
        }
        logMessage(response, false);
        return response;
    }
,
>
, <(startLine=333 endLine=342 srcPath=/root/NewExperiment/freecolFilter/00641/src/net/sf/freecol/server/ai/IndianAIPlayer.java)
                    if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                        // Make it less probable that nice players get targeted
                        // for a demand mission:
                        Player tp = target.getOwner();
                        int tension = 1 + getPlayer().getTension(tp).getValue()
                            + indianSettlement.getAlarm(tp).getValue();
                        if (getRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                            chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne, target));
                        }
                    }
,
(startLine=1834 endLine=1845 srcPath=/root/NewExperiment/freecolFilter/00641/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
                            if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                                // Make it less probable that nice players get targeted
                                // for a demand mission:
                                Player tp = target.getOwner();
                                int tension = 1 + getPlayer().getTension(tp).getValue()
                                    + indianSettlement.getAlarm(tp).getValue();
                                if (getRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                                    chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne,
                                                                                 target));
                                    break;
                                }
                            }
,
>
, <(startLine=166 endLine=177 srcPath=/root/NewExperiment/freecolFilter/00149/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
                            && (goods == null || goods.getType() == Goods.FOOD)) {
                        Element deliverGiftElement = Message.createNewRootElement("deliverGift");
                        deliverGiftElement.setAttribute("unit", getUnit().getID());
                        deliverGiftElement.setAttribute("settlement", target.getID());
                        deliverGiftElement.appendChild(((Goods) getUnit().getGoodsIterator().next()).toXMLElement(null, deliverGiftElement.getOwnerDocument()));
                        
                        try {
                            connection.sendAndWait(deliverGiftElement);
                        } catch (IOException e) {
                            logger.warning("Could not send \"deliverGift\"-message!");
                        }
                    }
,
(startLine=132 endLine=147 srcPath=/root/NewExperiment/freecolFilter/00149/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
                    && getGame().getMap().getNeighbourOrNull(r, getUnit().getTile()) == target.getTile()) { 
                // We have arrived.
                Element deliverGiftElement = Message.createNewRootElement("deliverGift");
                deliverGiftElement.setAttribute("unit", getUnit().getID());
                deliverGiftElement.setAttribute("settlement", target.getID());
                deliverGiftElement.appendChild(((Goods) getUnit().getGoodsIterator().next()).toXMLElement(null, deliverGiftElement.getOwnerDocument()));

                try {
                    connection.sendAndWait(deliverGiftElement);
                } catch (IOException e) {
                    logger.warning("Could not send \"deliverGift\"-message!");
                }
                
                giftDelivered = true;
                getUnit().getOwner().modifyTension(target.getOwner(), 1);
            }
,
>
, <(startLine=56 endLine=87 srcPath=/root/NewExperiment/freecolFilter/00731/src/net/sf/freecol/client/gui/option/StringOptionUI.java)
    public StringOptionUI(final StringOption option, boolean editable) {

        this.option = option;
        this.originalValue = option.getValue();

        String name = option.getName();
        String description = option.getShortDescription();
        String text = (description != null) ? description : name;
        label = new JLabel(name, JLabel.LEFT);
        label.setToolTipText(text);

        List<String> choices = option.getChoices();

        setModel(new DefaultComboBoxModel(choices.toArray(new String[choices.size()])));
        setSelectedItem(option.getValue());
        setRenderer(new ChoiceRenderer());

        setEnabled(editable);
        addActionListener(new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                if (option.isPreviewEnabled()) {
                    String value = (String) getSelectedItem();
                    if (option.getValue().equals(value)) {
                        option.setValue(value);
                    }
                }
            }
        });

        option.addPropertyChangeListener(this);
        setOpaque(false);
    }
,
(startLine=53 endLine=85 srcPath=/root/NewExperiment/freecolFilter/00731/src/net/sf/freecol/client/gui/option/SelectOptionUI.java)
    public SelectOptionUI(final SelectOption option, boolean editable) {

        this.option = option;
        this.originalValue = option.getValue();

        String name = option.getName();
        String description = option.getShortDescription();
        String text = (description != null) ? description : name;
        label = new JLabel(name, JLabel.LEFT);
        label.setToolTipText(text);

        String[] strings = option.getItemValues().values().toArray(new String[0]);

        setModel(new DefaultComboBoxModel(strings));
        if (option.getValue() >= 0 && option.getValue() < strings.length) {
            setSelectedIndex(option.getValue());
        }
        
        setEnabled(editable);
        addActionListener(new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                if (option.isPreviewEnabled()) {
                    int value = getSelectedIndex();
                    if (option.getValue() != value) {
                        option.setValue(value);
                    }
                }
            }
        });

        option.addPropertyChangeListener(this);
        setOpaque(false);
    }
,
>
, <(startLine=481 endLine=488 srcPath=/root/NewExperiment/freecolFilter/01024/src/net/sf/freecol/common/model/ColonyTile.java)
            if (FeatureContainer.applyModifierSet(0f, turn, modifiers) > 0) {
                modifiers.addAll(unit.getModifierSet(goodsType.getId()));
                modifiers.add(getColony().getProductionModifier(goodsType));
                modifiers.addAll(getColony().getModifierSet(goodsType.getId()));
                result = Math.max(1,
                    (int)FeatureContainer.applyModifiers(0f, turn,
                        new ArrayList<Modifier>(modifiers)));
            }
,
(startLine=518 endLine=527 srcPath=/root/NewExperiment/freecolFilter/01024/src/net/sf/freecol/common/model/ColonyTile.java)
            if (FeatureContainer.applyModifierSet(0f, turn, modifiers) > 0) {
                if (unitType != null) {
                    modifiers.addAll(unitType.getModifierSet(goodsType.getId()));
                }
                modifiers.add(getColony().getProductionModifier(goodsType));
                modifiers.addAll(getColony().getModifierSet(goodsType.getId()));
                production = Math.max(1,
                    (int)FeatureContainer.applyModifiers(0f, turn,
                        new ArrayList<Modifier>(modifiers)));
            }
,
>
, <(startLine=343 endLine=352 srcPath=/root/NewExperiment/freecolFilter/01105/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                if (goods.getLocation() == carrier) {
                    path = carrier.findPath(dst);
                    if (path == null) {
                        return "no-deliver for " + carrier + " -> " + dst;
                    } else {
                        this.mode = CargoMode.UNLOAD;
                        this.turns = path.getLastNode().getTotalTurns();
                        this.target = upLoc(path.getLastNode().getLocation());
                    }
                } else {
,
(startLine=352 endLine=361 srcPath=/root/NewExperiment/freecolFilter/01105/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                } else {
                    path = carrier.findPath(goods.getLocation());
                    if (path == null) {
                        return "no-collect for " + carrier + " -> " + dst;
                    } else {
                        this.mode = CargoMode.LOAD;
                        this.turns = path.getLastNode().getTotalTurns();
                        this.target = upLoc(path.getLastNode().getLocation());
                    }
                }
,
>
, <(startLine=245 endLine=265 srcPath=/root/NewExperiment/freecolFilter/00601/src/net/sf/freecol/server/ai/IndianAIPlayer.java)
            if (nearbyColonies.size() > 0) {
                Colony target = nearbyColonies.get(getRandom().nextInt(nearbyColonies.size()));
                Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                AIUnit chosenOne = null;
                while (it2.hasNext()) {
                    chosenOne = (AIUnit) getAIMain().getAIObject(it2.next());
                    if (!(chosenOne.getUnit().getLocation() instanceof Tile)) {
                        chosenOne = null;
                    } else if (chosenOne.getMission() == null
                               || chosenOne.getMission() instanceof UnitWanderHostileMission) {
                        break;
                    }
                }
                if (chosenOne != null) {
                    // Check that the colony can be reached:
                    PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(), target.getTile());
                    if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_BRING_GIFT) {
                        chosenOne.setMission(new IndianBringGiftMission(getAIMain(), chosenOne, target));
                    }
                }
            }
,
(startLine=1733 endLine=1751 srcPath=/root/NewExperiment/freecolFilter/00601/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (nearbyColonies.size() > 0) {
                Colony target = nearbyColonies.get(getRandom().nextInt(nearbyColonies.size()));
                Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                AIUnit chosenOne = null;
                while (it2.hasNext()) {
                    chosenOne = (AIUnit) getAIMain().getAIObject(it2.next());
                    if (chosenOne.getUnit().getLocation() instanceof Tile
                        && (chosenOne.getMission() == null
                            || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                        // Check that the colony can be reached:
                        PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                   target.getTile());
                        if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_BRING_GIFT) {
                            chosenOne.setMission(new IndianBringGiftMission(getAIMain(), chosenOne, target));
                            break;
                        }
                    }
                }
            }
,
>
, <(startLine=339 endLine=361 srcPath=/root/NewExperiment/freecolFilter/00905/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        } else {
            int price = registered.intValue();
            if (price < 0 || price == gold) {
                return price;
            } else if (gold < (price * 9) / 10) {
                logger.warning("Cheating attempt: sending a offer too low");
                sessionRegister.put(goldKey, new Integer(-1));
                return NetworkConstants.NO_TRADE;
            } else {
                int haggling = 1;
                if (sessionRegister.containsKey(hagglingKey)) {
                    haggling = sessionRegister.get(hagglingKey).intValue();
                }
                if (getAIRandom().nextInt(3 + haggling) < 3) {
                    sessionRegister.put(goldKey, new Integer(gold));
                    sessionRegister.put(hagglingKey, new Integer(haggling + 1));
                    return gold;
                } else {
                    sessionRegister.put(goldKey, new Integer(-1));
                    return NetworkConstants.NO_TRADE;
                }
            }
        }
,
(startLine=565 endLine=587 srcPath=/root/NewExperiment/freecolFilter/00905/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        } else {
            int price = registered.intValue();
            if (price < 0 || price == gold) {
                return price;
            } else if (gold < (price * 9) / 10) {
                logger.warning("Cheating attempt: sending a offer too low");
                sessionRegister.put(goldKey, new Integer(-1));
                return NetworkConstants.NO_TRADE;
            } else {
                int haggling = 1;
                if (sessionRegister.containsKey(hagglingKey)) {
                    haggling = sessionRegister.get(hagglingKey).intValue();
                }
                if (getAIRandom().nextInt(3 + haggling) <= 3) {
                    sessionRegister.put(goldKey, new Integer(gold));
                    sessionRegister.put(hagglingKey, new Integer(haggling + 1));
                    return gold;
                } else {
                    sessionRegister.put(goldKey, new Integer(-1));
                    return NetworkConstants.NO_TRADE;
                }
            }
        }
,
>
, <(startLine=2017 endLine=2027 srcPath=/root/NewExperiment/freecolFilter/00334/src/net/sf/freecol/common/model/Player.java)
    public void setFeature(Feature feature) {
        if (feature == null) {
            return;
        }
        Feature oldValue = features.get(feature.getId());
        if (oldValue instanceof Modifier && feature instanceof Modifier) {
            features.put(feature.getId(), Modifier.combine((Modifier) oldValue, (Modifier) feature));
        } else {
            features.put(feature.getId(), feature);
        }
    }
,
(startLine=1888 endLine=1898 srcPath=/root/NewExperiment/freecolFilter/00334/src/net/sf/freecol/common/model/Colony.java)
    public void setFeature(Feature feature) {
        if (feature == null) {
            return;
        }
        Feature oldValue = features.get(feature.getId());
        if (oldValue instanceof Modifier && feature instanceof Modifier) {
            features.put(feature.getId(), Modifier.combine((Modifier) oldValue, (Modifier) feature));
        } else {
            features.put(feature.getId(), feature);
        }
    }
,
(startLine=243 endLine=253 srcPath=/root/NewExperiment/freecolFilter/00334/src/net/sf/freecol/common/model/FoundingFather.java)
    public void setFeature(Feature feature) {
        if (feature == null) {
            return;
        }
        Feature oldValue = features.get(feature.getId());
        if (oldValue instanceof Modifier && feature instanceof Modifier) {
            features.put(feature.getId(), Modifier.combine((Modifier) oldValue, (Modifier) feature));
        } else {
            features.put(feature.getId(), feature);
        }
    }
,
>
, <(startLine=379 endLine=389 srcPath=/root/NewExperiment/freecolFilter/01309/src/net/sf/freecol/server/ai/mission/PioneeringMission.java)
    public void setTarget(Location target) {
        if (target == null
            || target instanceof Colony || target instanceof Tile) {
            boolean retarget = this.target != null && this.target != target;
            this.target = target;
            setTileImprovementPlan((target instanceof Tile)
                ? getBestPlan((Tile)target)
                : null);
            if (retarget) retargetTransportable();
        }
    }
,
(startLine=232 endLine=242 srcPath=/root/NewExperiment/freecolFilter/01309/src/net/sf/freecol/server/ai/mission/BuildColonyMission.java)
    public void setTarget(Location target) {
        if (target == null
            || target instanceof Colony || target instanceof Tile) {
            boolean retarget = this.target != null && this.target != target;
            this.target = target;
            this.colonyValue = (target instanceof Tile)
                ? getAIUnit().getUnit().getOwner().getColonyValue((Tile)target)
                : -1;
            if (retarget) retargetTransportable();
        }
    }
,
>
, <(startLine=596 endLine=609 srcPath=/root/NewExperiment/freecolFilter/00599/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private void sendUpdatedTileToAll(Tile newTile, ServerPlayer serverPlayer) {
        for (ServerPlayer enemyPlayer : getOtherPlayers(serverPlayer)) {
            if (enemyPlayer.canSee(newTile)) {
                Element update = Message.createNewRootElement("update");
                Document doc = update.getOwnerDocument();
                update.appendChild(newTile.toXMLElement(enemyPlayer, doc));
                try {
                    enemyPlayer.getConnection().sendAndWait(update);
                } catch (IOException e) {
                    logger.warning(e.getMessage());
                }
            }
        }
    }
,
(startLine=155 endLine=166 srcPath=/root/NewExperiment/freecolFilter/00599/src/net/sf/freecol/server/control/InGameController.java)
    public void sendUpdateToAll(FreeColGameObject obj, ServerPlayer serverPlayer) {
        for (ServerPlayer enemyPlayer : getOtherPlayers(serverPlayer)) {
            Element update = Message.createNewRootElement("update");
            Document doc = update.getOwnerDocument();
            update.appendChild(obj.toXMLElement(enemyPlayer, doc));
            try {
                enemyPlayer.getConnection().sendAndWait(update);
            } catch (IOException e) {
                logger.warning(e.getMessage());
            }
        }
    }
,
(startLine=175 endLine=188 srcPath=/root/NewExperiment/freecolFilter/00599/src/net/sf/freecol/server/control/InGameController.java)
    public void sendUpdatedTileToAll(Tile newTile, ServerPlayer serverPlayer) {
        for (ServerPlayer enemyPlayer : getOtherPlayers(serverPlayer)) {
            if (enemyPlayer.canSee(newTile)) {
                Element update = Message.createNewRootElement("update");
                Document doc = update.getOwnerDocument();
                update.appendChild(newTile.toXMLElement(enemyPlayer, doc));
                try {
                    enemyPlayer.getConnection().sendAndWait(update);
                } catch (IOException e) {
                    logger.warning(e.getMessage());
                }
            }
        }
    }
,
>
, <(startLine=112 endLine=129 srcPath=/root/NewExperiment/freecolFilter/01373/src/net/sf/freecol/metaserver/NetworkHandler.java)
    private Element register(Connection connection, Element element) {
        String name = element.getAttribute("name");
        String address = connection.getSocket().getInetAddress().getHostAddress();
        int port = Integer.parseInt(element.getAttribute("port"));
        int slotsAvailable = Integer.parseInt(element.getAttribute("slotsAvailable"));
        int currentlyPlaying = Integer.parseInt(element.getAttribute("currentlyPlaying"));
        boolean isGameStarted = Boolean.valueOf(element.getAttribute("isGameStarted")).booleanValue();
        String version = element.getAttribute("version");
        int gameState = Integer.parseInt(element.getAttribute("gameState"));

        try {
            metaRegister.addServer(name, address, port, slotsAvailable, currentlyPlaying, isGameStarted, version, gameState);
        } catch (IOException e) {
            return DOMMessage.createMessage("noRouteToServer");
        }

        return DOMMessage.createMessage("ok");
    }
,
(startLine=139 endLine=154 srcPath=/root/NewExperiment/freecolFilter/01373/src/net/sf/freecol/metaserver/NetworkHandler.java)
    private Element update(Connection connection, Element element) {
        String name = element.getAttribute("name");
        String address = connection.getSocket().getInetAddress().getHostAddress();
        int port = Integer.parseInt(element.getAttribute("port"));
        int slotsAvailable = Integer.parseInt(element.getAttribute("slotsAvailable"));
        int currentlyPlaying = Integer.parseInt(element.getAttribute("currentlyPlaying"));
        boolean isGameStarted = Boolean.valueOf(element.getAttribute("isGameStarted")).booleanValue();
        String version = element.getAttribute("version");
        int gameState = Integer.parseInt(element.getAttribute("gameState"));

        try {
            metaRegister.updateServer(name, address, port, slotsAvailable, currentlyPlaying, isGameStarted, version, gameState);
        } catch (IOException e) {}

        return null;
    }
,
>
, <(startLine=264 endLine=277 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    public Iterator<Wish> getWishIterator() {
        ArrayList<Wish> wishList = new ArrayList<Wish>();
        Iterator<AIColony> ai = getAIColonyIterator();
        while (ai.hasNext()) {
            AIColony ac = ai.next();
            Iterator<Wish> wishIterator = ac.getWishIterator();
            while (wishIterator.hasNext()) {
                Wish w = wishIterator.next();
                wishList.add(w);
            }
        }
        Collections.sort(wishList);
        return wishList.iterator();
    }
,
(startLine=187 endLine=200 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    public Iterator<Wish> getWishIterator() {
        ArrayList<Wish> wishList = new ArrayList<Wish>();
        Iterator<AIColony> ai = getAIColonyIterator();
        while (ai.hasNext()) {
            AIColony ac = ai.next();
            Iterator<Wish> wishIterator = ac.getWishIterator();
            while (wishIterator.hasNext()) {
                Wish w = wishIterator.next();
                wishList.add(w);
            }
        }
        Collections.sort(wishList);
        return wishList.iterator();
    }
,
>
, <(startLine=1223 endLine=1260 srcPath=/root/NewExperiment/freecolFilter/01217/src/net/sf/freecol/server/ai/ColonyPlan.java)
    public static boolean equipUnit(Unit unit, Role role, Colony colony) {
        if (!unit.isPerson()) return false;
        final Specification spec = colony.getSpecification();

        List<EquipmentType> roleEq = unit.getRoleEquipment(role);
        TypeCountMap<EquipmentType> change = new TypeCountMap<EquipmentType>();

        for (EquipmentType et : spec.getEquipmentTypeList()) {
            int oldCount = unit.getEquipmentCount(et);
            int newCount = (roleEq.contains(et)) ? 1 : 0;
            if (newCount > oldCount && !colony.canBuildEquipment(et)) {
                return false;
            }
            if (newCount != oldCount) {
                change.incrementCount(et, newCount - oldCount);
            }
        }
        for (Entry<EquipmentType, Integer> entry
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count < 0) {
                unit.changeEquipment(et, count);
                colony.addEquipmentGoods(et, -count);
            }
        }
        for (Entry<EquipmentType, Integer> entry
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count > 0) {
                unit.changeEquipment(et, count);
                colony.addEquipmentGoods(et, -count);
            }
        }
        unit.setRole(role);
        return true;
    }
,
(startLine=1770 endLine=1806 srcPath=/root/NewExperiment/freecolFilter/01217/src/net/sf/freecol/common/model/Unit.java)
    public boolean equipForRole(Role role, Settlement settlement) {
        if (!isPerson()) return false;
        final Specification spec = getSpecification();
        final List<EquipmentType> roleEq = getRoleEquipment(role);

        TypeCountMap<EquipmentType> change = new TypeCountMap<EquipmentType>();
        for (EquipmentType et : spec.getEquipmentTypeList()) {
            int oldCount = getEquipmentCount(et);
            int newCount = (roleEq.contains(et)) ? 1 : 0;
            if (newCount > oldCount && !settlement.canBuildEquipment(et)) {
                return false;
            }
            if (newCount != oldCount) {
                change.incrementCount(et, newCount - oldCount);
            }
        }
        for (Entry<EquipmentType, Integer> entry
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count < 0) {
                changeEquipment(et, count); // can not fail
                settlement.addEquipmentGoods(et, -count);
            }
        }
        for (Entry<EquipmentType, Integer> entry
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count > 0) {
                changeEquipment(et, count); // should not fail!
                settlement.addEquipmentGoods(et, -count);
            }
        }
        setRole(role);
        return getRole() == role;
    }
,
>
, <(startLine=399 endLine=416 srcPath=/root/NewExperiment/freecolFilter/00692/src/net/sf/freecol/server/ai/NewAIPlayer.java)
    public Iterator<AIUnit> getAIUnitIterator() {
        if (aiUnits.size() == 0) {
            ArrayList<AIUnit> au = new ArrayList<AIUnit>();
            Iterator<Unit> unitsIterator = player.getUnitIterator();
            while (unitsIterator.hasNext()) {
                Unit theUnit = unitsIterator.next();
                AIUnit a = (AIUnit) getAIMain().getAIObject(theUnit.getId());
                if (a != null) {
                    au.add(a);
                } else {
                    logger.warning("Could not find the AIUnit for: " + theUnit + " (" + theUnit.getId() + ") - "
                                   + (getGame().getFreeColGameObject(theUnit.getId()) != null));
                }
            }
            aiUnits = au;
        }
        return aiUnits.iterator();
    }
,
(startLine=1496 endLine=1515 srcPath=/root/NewExperiment/freecolFilter/00692/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    protected Iterator<AIUnit> getAIUnitIterator() {
        logger.info("Override: getAIUnitIterator()!");
        if (myAIUnits.size() == 0) {
            ArrayList<AIUnit> au = new ArrayList<AIUnit>();
            Iterator<Unit> unitsIterator = getPlayer().getUnitIterator();
            while (unitsIterator.hasNext()) {
                Unit theUnit = unitsIterator.next();
                AIUnit a = (AIUnit) getAIMain().getAIObject(theUnit.getId());
                if (a != null && a.getGoal()==null) {
                    //NOTE: Only adds units that currently don't have a goal.
                    au.add(a);
                } else {
                    logger.warning("Could not find the AIUnit for: " + theUnit + " (" + theUnit.getId() + ") - "
                            + (getGame().getFreeColGameObject(theUnit.getId()) != null));
                }
            }
            myAIUnits = au;
        }
        return myAIUnits.iterator();
    }
,
(startLine=120 endLine=137 srcPath=/root/NewExperiment/freecolFilter/00692/src/net/sf/freecol/server/ai/AIPlayer.java)
    protected Iterator<AIUnit> getAIUnitIterator() {
        if (aiUnits.size() == 0) {
            ArrayList<AIUnit> au = new ArrayList<AIUnit>();
            Iterator<Unit> unitsIterator = getPlayer().getUnitIterator();
            while (unitsIterator.hasNext()) {
                Unit theUnit = unitsIterator.next();
                AIUnit a = (AIUnit) getAIMain().getAIObject(theUnit.getId());
                if (a != null) {
                    au.add(a);
                } else {
                    logger.warning("Could not find the AIUnit for: " + theUnit + " (" + theUnit.getId() + ") - "
                            + (getGame().getFreeColGameObject(theUnit.getId()) != null));
                }
            }
            aiUnits = au;
        }
        return aiUnits.iterator();
    }
,
>
, <(startLine=232 endLine=244 srcPath=/root/NewExperiment/freecolFilter/00320/src/net/sf/freecol/server/ai/TileImprovementPlan.java)
    protected void toXMLImpl(XMLStreamWriter out) throws XMLStreamException {
        out.writeStartElement(getXMLElementTagName());

        out.writeAttribute("ID", getId());        
        out.writeAttribute("type", Integer.toString(type.getIndex()));
        out.writeAttribute("value", Integer.toString(value));
        if (pioneer != null) {
            out.writeAttribute("pioneer", pioneer.getId());
        }
        out.writeAttribute("target", target.getId());

        out.writeEndElement();
    }
,
(startLine=124 endLine=138 srcPath=/root/NewExperiment/freecolFilter/00320/src/net/sf/freecol/server/ai/GoodsWish.java)
     protected void toXMLImpl(XMLStreamWriter out) throws XMLStreamException {
         out.writeStartElement(getXMLElementTagName());
         
         out.writeAttribute("ID", getId());
         
         out.writeAttribute("destination", destination.getId());
         if (transportable != null) {
             out.writeAttribute("transportable", transportable.getId());
         }
         out.writeAttribute("value", Integer.toString(value));
         
         out.writeAttribute("goodsType", Integer.toString(goodsType.getIndex()));
         
         out.writeEndElement();
     }
,
(startLine=147 endLine=161 srcPath=/root/NewExperiment/freecolFilter/00320/src/net/sf/freecol/server/ai/WorkerWish.java)
    protected void toXMLImpl(XMLStreamWriter out) throws XMLStreamException {
        out.writeStartElement(getXMLElementTagName());

        out.writeAttribute("ID", getId());
        out.writeAttribute("destination", destination.getId());
        if (transportable != null) {
            out.writeAttribute("transportable", transportable.getId());
        }
        out.writeAttribute("value", Integer.toString(value));

        out.writeAttribute("unitType", Integer.toString(unitType.getIndex()));
        out.writeAttribute("expertNeeded", Boolean.toString(expertNeeded));

        out.writeEndElement();
    }
,
>
, <(startLine=259 endLine=296 srcPath=/root/NewExperiment/freecolFilter/00966/src/net/sf/freecol/common/model/FeatureContainer.java)
    public static float applyModifiers(float number, Turn turn, List<Modifier> modifierSet) {
        if (modifierSet == null || modifierSet.isEmpty()) {
            return number;
        }
        float result = number;
        for (Modifier modifier : modifierSet) {
            float value = modifier.getValue();
            if (value == Modifier.UNKNOWN) {
                return Modifier.UNKNOWN;
            }
            if (modifier.hasIncrement() && turn != null) {
                int diff = turn.getNumber() - modifier.getFirstTurn().getNumber();
                switch(modifier.getIncrementType()) {
                case ADDITIVE:
                    value += modifier.getIncrement() * diff;
                    break;
                case MULTIPLICATIVE:
                    value *= modifier.getIncrement() * diff;
                    break;
                case PERCENTAGE:
                    value += (value * modifier.getIncrement() * diff) / 100;
                    break;
                }
            }
            switch(modifier.getType()) {
            case ADDITIVE:
                result += value;
                break;
            case MULTIPLICATIVE:
                result *= value;
                break;
            case PERCENTAGE:
                result += (result * value) / 100;
                break;
            }
        }
        return result;
    }
,
(startLine=305 endLine=346 srcPath=/root/NewExperiment/freecolFilter/00966/src/net/sf/freecol/common/model/FeatureContainer.java)
    public static float applyModifierSet(float number, Turn turn, Set<Modifier> modifierSet) {
        if (modifierSet == null) {
            return number;
        }
        float additive = 0, percentage = 0, multiplicative = 1;
        for (Modifier modifier : modifierSet) {
            float value = modifier.getValue();
            if (value == Modifier.UNKNOWN) {
                return Modifier.UNKNOWN;
            }
            if (modifier.hasIncrement() && turn != null) {
                int diff = turn.getNumber() - modifier.getFirstTurn().getNumber();
                switch(modifier.getIncrementType()) {
                case ADDITIVE:
                    value += modifier.getIncrement() * diff;
                    break;
                case MULTIPLICATIVE:
                    value *= modifier.getIncrement() * diff;
                    break;
                case PERCENTAGE:
                    value += (value * modifier.getIncrement() * diff) / 100;
                    break;
                }
            }
            switch(modifier.getType()) {
            case ADDITIVE:
                additive += value;
                break;
            case MULTIPLICATIVE:
                multiplicative *= value;
                break;
            case PERCENTAGE:
                percentage += value;
                break;
            }
        }
        float result = number;
        result += additive;
        result *= multiplicative;
        result += (result * percentage) / 100;
        return result;
    }
,
>
, <(startLine=254 endLine=264 srcPath=/root/NewExperiment/freecolFilter/00466/test/src/net/sf/freecol/common/model/UnitTest.java)
        { // Savanna
            assertEquals(7, getWorkLeftForPioneerWork(freeColonist, savannahForest, clear));
            assertEquals(5, getWorkLeftForPioneerWork(freeColonist, savannahForest, road));
            assertEquals(4, getWorkLeftForPioneerWork(freeColonist, savannah, plow));
            assertEquals(2, getWorkLeftForPioneerWork(freeColonist, savannah, road));

            assertEquals(3, getWorkLeftForPioneerWork(hardyPioneer, savannahForest, clear));
            assertEquals(2, getWorkLeftForPioneerWork(hardyPioneer, savannahForest, road));
            assertEquals(1, getWorkLeftForPioneerWork(hardyPioneer, savannah, plow));
            assertEquals(-1, getWorkLeftForPioneerWork(hardyPioneer, savannah, road));
        }
,
(startLine=278 endLine=288 srcPath=/root/NewExperiment/freecolFilter/00466/test/src/net/sf/freecol/common/model/UnitTest.java)
        { // Plains
            assertEquals(5, getWorkLeftForPioneerWork(freeColonist, plainsForest, clear));
            assertEquals(3, getWorkLeftForPioneerWork(freeColonist, plainsForest, road));
            assertEquals(4, getWorkLeftForPioneerWork(freeColonist, plains, plow));
            assertEquals(2, getWorkLeftForPioneerWork(freeColonist, plains, road));

            assertEquals(2, getWorkLeftForPioneerWork(hardyPioneer, plainsForest, clear));
            assertEquals(1, getWorkLeftForPioneerWork(hardyPioneer, plainsForest, road));
            assertEquals(1, getWorkLeftForPioneerWork(hardyPioneer, plains, plow));
            assertEquals(-1, getWorkLeftForPioneerWork(hardyPioneer, plains, road));
        }
,
(startLine=300 endLine=310 srcPath=/root/NewExperiment/freecolFilter/00466/test/src/net/sf/freecol/common/model/UnitTest.java)
        { // Marsh
            assertEquals(7, getWorkLeftForPioneerWork(freeColonist, marshForest, clear));
            assertEquals(5, getWorkLeftForPioneerWork(freeColonist, marshForest, road));
            assertEquals(6, getWorkLeftForPioneerWork(freeColonist, marsh, plow));
            assertEquals(4, getWorkLeftForPioneerWork(freeColonist, marsh, road));

            assertEquals(3, getWorkLeftForPioneerWork(hardyPioneer, marshForest, clear));
            assertEquals(2, getWorkLeftForPioneerWork(hardyPioneer, marshForest, road));
            assertEquals(2, getWorkLeftForPioneerWork(hardyPioneer, marsh, plow));
            assertEquals(1, getWorkLeftForPioneerWork(hardyPioneer, marsh, road));
        }
,
(startLine=312 endLine=322 srcPath=/root/NewExperiment/freecolFilter/00466/test/src/net/sf/freecol/common/model/UnitTest.java)
        { // Desert
            assertEquals(5, getWorkLeftForPioneerWork(freeColonist, desertForest, clear));
            assertEquals(3, getWorkLeftForPioneerWork(freeColonist, desertForest, road));
            assertEquals(4, getWorkLeftForPioneerWork(freeColonist, desert, plow));
            assertEquals(2, getWorkLeftForPioneerWork(freeColonist, desert, road));

            assertEquals(2, getWorkLeftForPioneerWork(hardyPioneer, desertForest, clear));
            assertEquals(1, getWorkLeftForPioneerWork(hardyPioneer, desertForest, road));
            assertEquals(1, getWorkLeftForPioneerWork(hardyPioneer, desert, plow));
            assertEquals(-1, getWorkLeftForPioneerWork(hardyPioneer, desert, road));
        }
,
>
, <(startLine=614 endLine=626 srcPath=/root/NewExperiment/freecolFilter/01023/src/net/sf/freecol/common/model/FreeColObject.java)
    public int getAttribute(XMLStreamReader in, String attributeName, int defaultValue) {
        final String attributeString = in.getAttributeValue(null, attributeName);
        int result = defaultValue;
        if (attributeString != null) {
            try {
                result = Integer.parseInt(attributeString);
            } catch(NumberFormatException e) {
                logger.warning("Attribute '" + attributeName + "' should be an integer, not '"
                               + attributeString + "'.");
            }
        }
        return result;
    }
,
(startLine=660 endLine=672 srcPath=/root/NewExperiment/freecolFilter/01023/src/net/sf/freecol/common/model/FreeColObject.java)
    public float getAttribute(XMLStreamReader in, String attributeName, float defaultValue) {
        final String attributeString = in.getAttributeValue(null, attributeName);
        float result = defaultValue;
        if (attributeString != null) {
            try {
                result = Float.parseFloat(attributeString);
            } catch(NumberFormatException e) {
                logger.warning("Attribute '" + attributeName + "' should be a float, not '"
                               + attributeString + "'.");
            }
        }
        return result;
    }
,
>
, <(startLine=531 endLine=552 srcPath=/root/NewExperiment/freecolFilter/01199/src/net/sf/freecol/common/io/FreeColXMLReader.java)
        } else {
            ret = game.getFreeColGameObject(id, returnClass);
            if (ret == null) {
                try {
                    Constructor<T> c = returnClass.getConstructor(Game.class,
                                                                  String.class);
                    ret = returnClass.cast(c.newInstance(game, id));
                    if (required && ret == null) {
                        throw new XMLStreamException("Constructed null "
                            + returnClass.getName() + " for " + id
                            + ": " + currentTag());
                    }
                } catch (Exception e) {
                    if (required) {
                        throw new XMLStreamException(e.getCause());
                    } else {
                        logger.log(Level.WARNING, "Failed to create FCGO: "
                                   + id, e);
                    }
                }
            }
        }
,
(startLine=632 endLine=653 srcPath=/root/NewExperiment/freecolFilter/01199/src/net/sf/freecol/common/io/FreeColXMLReader.java)
        } else {
            ret = aiMain.getAIObject(id, returnClass);
            if (ret == null) {
                try {
                    Constructor<T> c = returnClass.getConstructor(AIMain.class,
                                                                  String.class);
                    ret = returnClass.cast(c.newInstance(aiMain, id));
                    if (required && ret == null) {
                        throw new XMLStreamException("Constructed null "
                            + returnClass.getName() + " for " + id
                            + ": " + currentTag());
                    }
                } catch (Exception e) {
                    if (required) {
                        throw new XMLStreamException(e.getCause());
                    } else {
                        logger.log(Level.WARNING, "Failed to create AIObject: "
                                   + id, e);
                    }
                }
            }
        }
,
>
, <(startLine=607 endLine=619 srcPath=/root/NewExperiment/freecolFilter/00570/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
    private void fill() {
        Unit unit = getSelectedUnit();
        if (unit != null && unit.isCarrier()) {
            Iterator<Goods> goodsIterator = unit.getGoodsIterator();
            while (goodsIterator.hasNext()) {
                Goods goods = goodsIterator.next();
                if (goods.getAmount() < 100 && colony.getGoodsCount(goods.getType()) > 0) {
                    int amount = Math.min(100 - goods.getAmount(), colony.getGoodsCount(goods.getType()));
                    getController().loadCargo(new Goods(goods.getGame(), colony, goods.getType(), amount), unit);
                }
            }
        }
    }
,
(startLine=82 endLine=98 srcPath=/root/NewExperiment/freecolFilter/00570/src/net/sf/freecol/client/gui/action/LoadAction.java)
    public void actionPerformed(ActionEvent e) {
        Unit unit = getFreeColClient().getGUI().getActiveUnit();
        if (unit != null) {
            Colony colony = unit.getColony();
            if (colony != null) {
                Iterator<Goods> goodsIterator = unit.getGoodsIterator();
                while (goodsIterator.hasNext()) {
                    Goods goods = goodsIterator.next();
                    if (goods.getAmount() < 100 && colony.getGoodsCount(goods.getType()) > 0) {
                        int amount = Math.min(100 - goods.getAmount(), colony.getGoodsCount(goods.getType()));
                        Goods newGoods = new Goods(goods.getGame(), colony, goods.getType(), amount);
                        getFreeColClient().getInGameController().loadCargo(newGoods, unit);
                    }
                }
            }
        }
    }
,
>
, <(startLine=18 endLine=61 srcPath=/root/NewExperiment/freecolFilter/00246/test/src/net/sf/freecol/common/model/UnitTest.java)
    public void testDoAssignedWorkHardyPioneerPlowPlain() {

        Game game = getStandardGame();
        Player dutch = game.getPlayer(Player.DUTCH);
        Map map = getTestMap(Tile.PLAINS);
        game.setMap(map);
        Tile plain = map.getTile(5, 8);
        map.getTile(5, 8).setExploredBy(dutch, true);

        Unit hardyPioneer = new Unit(game, plain, dutch, Unit.HARDY_PIONEER, Unit.ACTIVE, false, false, 100, false);

        // Before
        assertEquals(3, hardyPioneer.getMovesLeft());
        assertEquals(Unit.ACTIVE, hardyPioneer.getState());
        assertEquals(-1, hardyPioneer.getWorkLeft());
        assertEquals(100, hardyPioneer.getNumberOfTools());
        assertEquals(false, plain.isPlowed());

        hardyPioneer.setState(Unit.PLOW);

        assertEquals(0, hardyPioneer.getMovesLeft());
        assertEquals(1, hardyPioneer.getWorkLeft());
        assertEquals(100, hardyPioneer.getNumberOfTools());
        assertEquals(false, plain.isPlowed());

        // Advance 1 turn
        game.newTurn();

        // Pioneer finished work but can only move on next turn
        assertEquals(0, hardyPioneer.getMovesLeft());
        assertEquals(Unit.ACTIVE, hardyPioneer.getState());
        assertEquals(-1, hardyPioneer.getWorkLeft());
        assertEquals(80, hardyPioneer.getNumberOfTools());
        assertEquals(true, plain.isPlowed());

        // Advance last turn
        game.newTurn();

        assertEquals(3, hardyPioneer.getMovesLeft());
        assertEquals(Unit.ACTIVE, hardyPioneer.getState());
        assertEquals(-1, hardyPioneer.getWorkLeft());
        assertEquals(80, hardyPioneer.getNumberOfTools());
        assertEquals(true, plain.isPlowed());
    }
,
(startLine=128 endLine=163 srcPath=/root/NewExperiment/freecolFilter/00246/test/src/net/sf/freecol/common/model/UnitTest.java)
    public void testDoAssignedWorkHardyPioneerBuildRoad() {

        Game game = getStandardGame();
        Player dutch = game.getPlayer(Player.DUTCH);
        Map map = getTestMap(Tile.PLAINS);
        game.setMap(map);
        Tile plain = map.getTile(5, 8);
        map.getTile(5, 8).setExploredBy(dutch, true);

        Unit hardyPioneer = new Unit(game, plain, dutch, Unit.HARDY_PIONEER, Unit.ACTIVE, false, false, 100, false);

        // Before
        assertEquals(3, hardyPioneer.getMovesLeft());
        assertEquals(-1, hardyPioneer.getWorkLeft());
        assertEquals(100, hardyPioneer.getNumberOfTools());
        assertEquals(false, plain.hasRoad());
        assertEquals(Unit.ACTIVE, hardyPioneer.getState());

        // Now do it
        hardyPioneer.setState(Unit.BUILD_ROAD);

        // After
        assertEquals(0, hardyPioneer.getMovesLeft());
        assertEquals(-1, hardyPioneer.getWorkLeft());
        assertEquals(80, hardyPioneer.getNumberOfTools());
        assertEquals(true, plain.hasRoad());
        assertEquals(Unit.ACTIVE, hardyPioneer.getState());

        // Advance 1 turn
        game.newTurn();

        assertEquals(3, hardyPioneer.getMovesLeft());
        assertEquals(Unit.ACTIVE, hardyPioneer.getState());
        assertEquals(-1, hardyPioneer.getWorkLeft());
        assertEquals(80, hardyPioneer.getNumberOfTools());
    }
,
>
, <(startLine=276 endLine=285 srcPath=/root/NewExperiment/freecolFilter/00162/src/net/sf/freecol/server/ai/mission/PioneeringMission.java)
                        && getUnit().checkSetState(tileImprovement.getType())) {
                    Element changeStateElement = Message.createNewRootElement("changeState");
                    changeStateElement.setAttribute("unit", getUnit().getID());
                    changeStateElement.setAttribute("state", Integer.toString(tileImprovement.getType()));
                    try {
                        connection.sendAndWait(changeStateElement);
                    } catch (IOException e) {
                        logger.warning("Could not send message!");
                    }
                }
,
(startLine=161 endLine=170 srcPath=/root/NewExperiment/freecolFilter/00162/src/net/sf/freecol/server/ai/mission/DefendSettlementMission.java)
                    || getUnit().getState() != Unit.FORTIFYING) {
                Element changeStateElement = Message.createNewRootElement("changeState");
                changeStateElement.setAttribute("unit", getUnit().getID());
                changeStateElement.setAttribute("state", Integer.toString(Unit.FORTIFYING));
                try {
                    connection.sendAndWait(changeStateElement);
                } catch (IOException e) {
                    logger.warning("Could not send message!");
                }               
            }
,
>
, <(startLine=318 endLine=331 srcPath=/root/NewExperiment/freecolFilter/00741/src/net/sf/freecol/server/ai/IndianAIPlayer.java)
                if (chosenOne != null && target != null) {
                    // Check that the colony can be reached:
                    PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(), target.getTile());
                    if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                        // Make it less probable that nice players get targeted
                        // for a demand mission:
                        Player tp = target.getOwner();
                        int tension = 1 + getPlayer().getTension(tp).getValue()
                            + indianSettlement.getAlarm(tp).getValue();
                        if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                            chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne, target));
                        }
                    }
                }
,
(startLine=1865 endLine=1881 srcPath=/root/NewExperiment/freecolFilter/00741/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
                                || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                            // Check that the colony can be reached:
                            PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                       target.getTile());
                            if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                                // Make it less probable that nice players get targeted
                                // for a demand mission:
                                Player tp = target.getOwner();
                                int tension = 1 + getPlayer().getTension(tp).getValue()
                                    + indianSettlement.getAlarm(tp).getValue();
                                if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                                    chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne,
                                                                                 target));
                                    break;
                                }
                            }
                        }
,
>
, <(startLine=87 endLine=124 srcPath=/root/NewExperiment/freecolFilter/01153/src/net/sf/freecol/common/networking/BuyGoodsMessage.java)
                          Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit carrier;
        try {
            carrier = player.getOurFreeColGameObject(carrierId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }
        if (!carrier.canCarryGoods()) {
            return DOMMessage.clientError("Not a goods carrier: " + carrierId);
        } else if (!carrier.isInEurope()) {
            return DOMMessage.clientError("Not in Europe: " + carrierId);
        }

        GoodsType type = server.getSpecification().getGoodsType(goodsTypeId);
        if (type == null) {
            return DOMMessage.clientError("Not a goods type: " + goodsTypeId);
        } else if (!player.canTrade(type)) {
            return DOMMessage.clientError("Goods are boycotted: "
                + goodsTypeId);
        }

        int amount;
        try {
            amount = Integer.parseInt(amountString);
        } catch (NumberFormatException e) {
            return DOMMessage.clientError("Bad amount: " + amountString);
        }
        if (amount <= 0) {
            return DOMMessage.clientError("Amount must be positive: "
                + amountString);
        }

        // Try to buy.
        return server.getInGameController()
            .buyGoods(serverPlayer, carrier, type, amount);
    }
,
(startLine=88 endLine=131 srcPath=/root/NewExperiment/freecolFilter/01153/src/net/sf/freecol/common/networking/SellGoodsMessage.java)
                          Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit carrier;
        try {
            carrier = player.getOurFreeColGameObject(carrierId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }
        if (!carrier.canCarryGoods()) {
            return DOMMessage.clientError("Not a goods carrier: " + carrierId);
        } else if (!carrier.isInEurope()) {
            return DOMMessage.clientError("Not in Europe: " + carrierId);
        }

        GoodsType type = server.getSpecification().getGoodsType(goodsTypeId);
        if (type == null) {
            return DOMMessage.clientError("Not a goods type: " + goodsTypeId);
        } else if (!player.canTrade(type)) {
            return DOMMessage.clientError("Goods are boycotted: "
                + goodsTypeId);
        }

        int amount;
        try {
            amount = Integer.parseInt(amountString);
        } catch (NumberFormatException e) {
            return DOMMessage.clientError("Bad amount: " + amountString);
        }
        if (amount <= 0) {
            return DOMMessage.clientError("Amount must be positive: "
                                       + amountString);
        }
        int present = carrier.getGoodsCount(type);
        if (present < amount) {
            return DOMMessage.clientError("Attempt to sell "
                + Integer.toString(amount) + " " + type.getId()
                + " but only " + Integer.toString(present) + " present.");
        }

        // Try to sell.
        return server.getInGameController()
            .sellGoods(serverPlayer, carrier, type, amount);
    }
,
>
, <(startLine=495 endLine=506 srcPath=/root/NewExperiment/freecolFilter/00158/src/net/sf/freecol/server/generator/MapGenerator.java)
    private Position getRandomLandPosition(Map map) {
        int x = random.nextInt(getMapGeneratorOptions().getWidth() - 20) + 10;
        int y = random.nextInt(getMapGeneratorOptions().getHeight() - 20) + 10;
        Position centerPosition = new Position(x, y);
        Iterator it = map.getFloodFillIterator(centerPosition);
        while (it.hasNext()) {
            Position p = (Position) it.next();
            if (map.getTile(p).isLand()) {
                return p;
            }
        }
        return null;    }
,
(startLine=514 endLine=526 srcPath=/root/NewExperiment/freecolFilter/00158/src/net/sf/freecol/server/generator/MapGenerator.java)
    private Position getRandomSettleablePosition(Map map) {
        int x = random.nextInt(getMapGeneratorOptions().getWidth() - 20) + 10;
        int y = random.nextInt(getMapGeneratorOptions().getHeight() - 20) + 10;
        Position centerPosition = new Position(x, y);
        Iterator it = map.getFloodFillIterator(centerPosition);
        while (it.hasNext()) {
            Position p = (Position) it.next();
            if (map.getTile(p).isSettleable()) {
                return p;
            }
        }
        return null;
    }
,
>
, <(startLine=39 endLine=103 srcPath=/root/NewExperiment/freecolFilter/01043/src/net/sf/freecol/client/gui/panel/ParametersDialog.java)
    public ParametersDialog(FreeColClient freeColClient, final GUI gui) {
        super(freeColClient, gui);
        /*
         * TODO: Extend this dialog. It should be possible
         *       to specify the sizes using percentages.
         *
         *       Add a panel containing information about
         *       the scaling (old size, new size etc).
         */        

        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

        JPanel buttons = new JPanel();
        buttons.setOpaque(false);

        final ActionListener al = new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                try {
                    int d = Integer.parseInt(inputD.getText());
                    int m = Integer.parseInt(inputM.getText());
                    if (d <= 0 || m <= 0) {
                        throw new NumberFormatException();
                    }
                    setResponse(new Parameters(d, m));
                } catch (NumberFormatException nfe) {
                    gui.errorMessage("integerAboveZero");
                }
            }
        };
        JButton okButton = new JButton(Messages.message("ok"));
        buttons.add(okButton);

        JButton cancelButton = new JButton(Messages.message("cancel"));
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                setResponse(null);
            }
        });
        buttons.add(cancelButton);
        setCancelComponent(cancelButton);

        okButton.addActionListener(al);
        inputD.addActionListener(al);
        inputM.addActionListener(al);

        JLabel widthLabel = new JLabel(Messages.message("menuBar.tools.determineHighSeas.distToLandFromHighSeas"));
        widthLabel.setLabelFor(inputD);
        JLabel heightLabel = new JLabel(Messages.message("menuBar.tools.determineHighSeas.maxDistanceToEdge"));
        heightLabel.setLabelFor(inputM);

        JPanel widthPanel = new JPanel(new FlowLayout());
        widthPanel.setOpaque(false);
        widthPanel.add(widthLabel);
        widthPanel.add(inputD);
        JPanel heightPanel = new JPanel(new FlowLayout());
        heightPanel.setOpaque(false);
        heightPanel.add(heightLabel);
        heightPanel.add(inputM);

        add(widthPanel);
        add(heightPanel);
        add(buttons);

        setSize(getPreferredSize());
    }
,
(startLine=37 endLine=102 srcPath=/root/NewExperiment/freecolFilter/01043/src/net/sf/freecol/client/gui/panel/ScaleMapSizeDialog.java)
    public ScaleMapSizeDialog(FreeColClient freeColClient, final GUI gui) {
        super(freeColClient, gui);
        oldMap = freeColClient.getGame().getMap();
        /*
         * TODO: Extend this dialog. It should be possible to specify the sizes
         * using percentages.
         * 
         * Add a panel containing information about the scaling (old size, new
         * size etc).
         */

        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

        JPanel buttons = new JPanel();
        buttons.setOpaque(false);

        final ActionListener al = new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                try {
                    int width = Integer.parseInt(inputWidth.getText());
                    int height = Integer.parseInt(inputHeight.getText());
                    if (width <= 0 || height <= 0) {
                        throw new NumberFormatException();
                    }
                    setResponse(new MapSize(width, height));
                } catch (NumberFormatException nfe) {
                    gui.errorMessage("integerAboveZero");
                }
            }
        };
        JButton okButton = new JButton(Messages.message("ok"));
        buttons.add(okButton);

        JButton cancelButton = new JButton(Messages.message("cancel"));
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                setResponse(null);
            }
        });
        buttons.add(cancelButton);
        setCancelComponent(cancelButton);

        okButton.addActionListener(al);
        inputWidth.addActionListener(al);
        inputHeight.addActionListener(al);

        JLabel widthLabel = new JLabel(Messages.message("width"));
        widthLabel.setLabelFor(inputWidth);
        JLabel heightLabel = new JLabel(Messages.message("height"));
        heightLabel.setLabelFor(inputHeight);

        JPanel widthPanel = new JPanel(new FlowLayout());
        widthPanel.setOpaque(false);
        widthPanel.add(widthLabel);
        widthPanel.add(inputWidth);
        JPanel heightPanel = new JPanel(new FlowLayout());
        heightPanel.setOpaque(false);
        heightPanel.add(heightLabel);
        heightPanel.add(inputHeight);

        add(widthPanel);
        add(heightPanel);
        add(buttons);

        setSize(getPreferredSize());
    }
,
>
, <(startLine=299 endLine=315 srcPath=/root/NewExperiment/freecolFilter/00505/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
                if (unit.isOffensiveUnit() && !unit.isNaval()) {
                    UnitType unitType = defaultType;
                    if (unit.getType().getOffence() > 0 ||
                        unit.hasAbility("model.ability.expertSoldier")) {
                        unitType = unit.getType();
                    }
                    switch(unit.getRole()) {
                    case DRAGOON:
                        incrementCount(dragoons, unitType);
                        break;
                    case SOLDIER:
                        incrementCount(soldiers, unitType);
                        break;
                    default:
                        incrementCount(others, unitType);
                    }
                } else {
,
(startLine=243 endLine=259 srcPath=/root/NewExperiment/freecolFilter/00505/src/net/sf/freecol/client/gui/panel/ReportMilitaryPanel.java)
            if (unit.isOffensiveUnit() && !unit.isNaval()) {
                UnitType unitType = defaultType;
                if (unit.getType().getOffence() > 0 ||
                    unit.hasAbility("model.ability.expertSoldier")) {
                    unitType = unit.getType();
                }
                switch(unit.getRole()) {
                case DRAGOON:
                    incrementCount(dragoons, unitType);
                    break;
                case SOLDIER:
                    incrementCount(soldiers, unitType);
                    break;
                default:
                    incrementCount(others, unitType);
                }
            } else {
,
>
, <(startLine=476 endLine=484 srcPath=/root/NewExperiment/freecolFilter/00961/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                if (amount < low) {
                    int turns = -amount / p + 1;
                    c = cAlarm;
                    tip = stpl("report.colony.production.low.description")
                        .addName("%colony%", colony.getName())
                        .add("%goods%", g.getNameKey())
                        .addAmount("%amount%", p)
                        .addAmount("%turns%", turns);
                } else {
,
(startLine=510 endLine=518 srcPath=/root/NewExperiment/freecolFilter/00961/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                && amount + p > colony.getWarehouseCapacity()) {
                c = cAlarm;
                int waste = amount + p - colony.getWarehouseCapacity();
                tip = stpl("report.colony.production.waste.description")
                    .addName("%colony%", colony.getName())
                    .add("%goods%", g.getNameKey())
                    .addAmount("%amount%", p)
                    .addAmount("%waste%", waste);
            } else if (g != foodType && amount > high) {
,
(startLine=518 endLine=526 srcPath=/root/NewExperiment/freecolFilter/00961/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
            } else if (g != foodType && amount > high) {
                int turns = (colony.getWarehouseCapacity() - amount) / p;
                c = cWarn;
                tip = stpl("report.colony.production.high.description")
                    .addName("%colony%", colony.getName())
                    .add("%goods%", g.getNameKey())
                    .addAmount("%amount%", p)
                    .addAmount("%turns%", turns);
            } else {
,
>
, <(startLine=388 endLine=396 srcPath=/root/NewExperiment/freecolFilter/01492/src/net/sf/freecol/server/ai/AIInGameInputHandler.java)
        for (int i = 0; i < nodes.getLength(); i++) {
            try {
                Element reply = handle(connection, (Element) nodes.item(i));
                if (reply != null) results.add(reply);
            } catch (Exception e) {
                logger.log(Level.WARNING, "Caught crash in multiple item " + i
                    + ", continuing.", e);
            }
        }
,
(startLine=930 endLine=938 srcPath=/root/NewExperiment/freecolFilter/01492/src/net/sf/freecol/client/control/InGameInputHandler.java)
        for (int i = 0; i < nodes.getLength(); i++) {
            try {
                Element reply = handle(connection, (Element)nodes.item(i));
                if (reply != null) results.add(reply);
            } catch (Exception e) {
                logger.log(Level.WARNING, "Caught crash in multiple item " + i
                    + ", continuing.", e);
            }
        }
,
>
, <(startLine=1607 endLine=1618 srcPath=/root/NewExperiment/freecolFilter/01469/src/net/sf/freecol/server/model/ServerPlayer.java)
            if (colony == null) {
                for (Modifier modifier : effect.getModifiers()) {
                    if (modifier.getDuration() > 0) {
                        Modifier timedModifier = Modifier
                                .makeTimedModifier(modifier.getId(), modifier, getGame().getTurn());
                        modifier.setModifierIndex(Modifier.DISASTER_PRODUCTION_INDEX);
                        cs.addFeatureChange(this, this, timedModifier, true);
                    } else {
                        cs.addFeatureChange(this, this, modifier, true);
                    }
                }
            } else {
,
(startLine=1695 endLine=1705 srcPath=/root/NewExperiment/freecolFilter/01469/src/net/sf/freecol/server/model/ServerPlayer.java)
                            for (Modifier modifier : effect.getModifiers()) {
                                if (modifier.getDuration() > 0) {
                                    Modifier timedModifier = Modifier
                                            .makeTimedModifier(modifier.getId(), modifier, getGame().getTurn());
                                    timedModifier.setModifierIndex(Modifier.DISASTER_PRODUCTION_INDEX);
                                    cs.addFeatureChange(this, colony, timedModifier, true);
                        } else {
                            cs.addFeatureChange(this, colony, modifier, true);
                        }
                        colonyDirty = true;
                    }       break;
,
>
, <(startLine=163 endLine=172 srcPath=/root/NewExperiment/freecolFilter/01053/src/net/sf/freecol/server/ai/mission/DefendSettlementMission.java)
    public static PathNode findTargetPath(AIUnit aiUnit, boolean deferOK) {
        if (invalidAIUnitReason(aiUnit) != null) return null;
        final Unit unit = aiUnit.getUnit();
        final Tile startTile = unit.getPathStartTile();
        if (startTile == null) return null;

        return unit.search(startTile, getGoalDecider(aiUnit),
                           CostDeciders.avoidSettlementsAndBlockingUnits(),
                           MAX_TURNS, unit.getCarrier());
    }
,
(startLine=199 endLine=209 srcPath=/root/NewExperiment/freecolFilter/01053/src/net/sf/freecol/server/ai/mission/PrivateerMission.java)
                                          boolean deferOK) {
        if (invalidAIUnitReason(aiUnit) != null) return null;
        final Unit unit = aiUnit.getUnit();
        final Tile startTile = unit.getPathStartTile();
        if (startTile == null) return null;

        // Can the privateer legally reach a valid target from where
        // it currently is?
        return unit.search(startTile, getGoalDecider(aiUnit, deferOK),
                           CostDeciders.avoidIllegal(), range, null);
    }
,
(startLine=267 endLine=278 srcPath=/root/NewExperiment/freecolFilter/01053/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMission.java)
    public static PathNode findTargetPath(AIUnit aiUnit, int range) {
        if (invalidAIUnitReason(aiUnit) != null) return null;
        final Unit unit = aiUnit.getUnit();
        final Tile startTile = unit.getPathStartTile();
        if (startTile == null) return null;

        // Can the unit legally reach a valid target from where it
        // currently is?
        return unit.search(startTile, getGoalDecider(aiUnit, false),
                           CostDeciders.avoidIllegal(),
                           range, unit.getCarrier());
    }
,
>
, <(startLine=944 endLine=951 srcPath=/root/NewExperiment/freecolFilter/00136/src/net/sf/freecol/server/ai/AIColony.java)
            } else if (e.getTagName().equals(WorkerWish.getXMLElementTagName() + "WishListElement")) {
                Wish w = (Wish) getAIMain().getAIObject(e.getAttribute("ID"));
                if (w != null) {
                    wishes.add(w);
                } else {
                    logger.warning("Wish with ID: " + e.getAttribute("ID") + " could not be found.");
                }                
            } else if (e.getTagName().equals(GoodsWish.getXMLElementTagName() + "WishListElement")) {
,
(startLine=951 endLine=958 srcPath=/root/NewExperiment/freecolFilter/00136/src/net/sf/freecol/server/ai/AIColony.java)
            } else if (e.getTagName().equals(GoodsWish.getXMLElementTagName() + "WishListElement")) {
                Wish w = (Wish) getAIMain().getAIObject(e.getAttribute("ID"));
                if (w != null) {
                    wishes.add(w);
                } else {
                    logger.warning("Wish with ID: " + e.getAttribute("ID") + " could not be found.");
                }
            } else if (e.getTagName().equals(TileImprovement.getXMLElementTagName() + "ListElement")) {
,
>
, <(startLine=368 endLine=374 srcPath=/root/NewExperiment/freecolFilter/00290/src/net/sf/freecol/client/gui/ImageLibrary.java)
            for (int c = 1; c <= 8; c++) {
                filePath = dataDirectory + path + type.getArtBasic() + "border" + c + "0" + extension;
                tempVector1.add(findImage(filePath, resourceLocator, doLookup));

                filePath = dataDirectory + path + type.getArtBasic() + "border" + c + "1" + extension;
                tempVector2.add(findImage(filePath, resourceLocator, doLookup));
            }
,
(startLine=382 endLine=388 srcPath=/root/NewExperiment/freecolFilter/00290/src/net/sf/freecol/client/gui/ImageLibrary.java)
                for (int c = 1; c <= 8; c++) {
                    filePath = dataDirectory + path + type.getArtCoast() + "border" + c + "0" + extension;
                    tempVector1.add(findImage(filePath, resourceLocator, doLookup));

                    filePath = dataDirectory + path + type.getArtCoast() + "border" + c + "1" + extension;
                    tempVector2.add(findImage(filePath, resourceLocator, doLookup));
                }
,
>
, <(startLine=320 endLine=383 srcPath=/root/NewExperiment/freecolFilter/01040/src/net/sf/freecol/server/ai/mission/ScoutingMission.java)
    public void doMission() {
        final AIUnit aiUnit = getAIUnit();
        final Unit unit = getUnit();
        String reason = invalidReason();
        if (isTargetReason(reason)) {
            if ((target = findTarget(aiUnit)) == null) {
                logger.finest(tag + " could not retarget: " + this);
                return;
            }
        } else if (reason != null) {
            logger.finest(tag + " broken(" + reason + "): " + this);
            return;
        }

        // Go to the target.
        Direction d;
        Unit.MoveType mt = travelToTarget(tag, target);
        switch (mt) {
        case MOVE_ILLEGAL: case MOVE_NO_MOVES: case MOVE_NO_REPAIR:
            return;
        case ATTACK_UNIT:
            // Could be adjacent to the destination but it is
            // temporarily blocked by another unit.  Make a random
            // (directed if possible) move and try again.
            moveRandomly(tag, unit.getTile().getDirection(target.getTile()));
            return;
        case MOVE:
            break;
        case ENTER_INDIAN_SETTLEMENT_WITH_SCOUT:
            if ((d = unit.getTile().getDirection(target.getTile())) == null) {
                throw new IllegalStateException("Unit not next to target "
                    + target + ": " + unit + "/" + unit.getLocation());
            }
            if (!AIMessage.askScoutIndianSettlement(aiUnit, d)) {
                logger.warning(tag + " unexpected failure at " + target
                    + ": " + this);
            }
            if (unit.isDisposed()) {
                logger.finest(tag + " died at target " + target
                    + ": " + this);
                return;
            }
            break;
        default:
            logger.warning(tag + " unexpected move type " + mt + ": " + this);
            return;
        }

        // Retarget on failure or complete, but do not retarget from
        // one colony to another, just drop equipment and invalidate
        // the mission.
        Location completed = target;
        target = findTarget(aiUnit);
        if (completed instanceof Colony && target instanceof Colony) {
            Colony colony = (Colony)completed;
            for (EquipmentType e : new ArrayList<EquipmentType>(unit
                    .getEquipment().keySet())) {
                AIMessage.askEquipUnit(aiUnit, e, -unit.getEquipmentCount(e));
            }
            target = null;
        }
        logger.finest(tag + " completed target " + completed
            + ", retargeting " + target + ": " + this);
    }
,
(startLine=300 endLine=363 srcPath=/root/NewExperiment/freecolFilter/01040/src/net/sf/freecol/server/ai/mission/MissionaryMission.java)
    public void doMission() {
        final AIUnit aiUnit = getAIUnit();
        final Unit unit = getUnit();
        String reason = invalidReason();
        if (isTargetReason(reason)) {
            if ((target = findTarget(aiUnit)) == null) {
                logger.finest(tag + " could not retarget: " + this);
                return;
            }
        } else if (reason != null) {
            logger.finest(tag + " broken(" + reason + "): " + this);
            return;
        }

        // Go to the target.
        Unit.MoveType mt = travelToTarget(tag, target);
        switch (mt) {
        case MOVE_NO_MOVES:
            return;
        case MOVE:
            break;
        case ENTER_INDIAN_SETTLEMENT_WITH_MISSIONARY:
            Direction d = unit.getTile().getDirection(target.getTile());
            if (d == null) {
                throw new IllegalStateException("Unit not next to target "
                    + target + ": " + unit + "/" + unit.getLocation());
            }
            IndianSettlement is = (IndianSettlement)target;
            AIMessage.askEstablishMission(aiUnit, d,
                is.getMissionary() != null);
            if (unit.isDisposed()) {
                logger.finest(tag + " died at target " + target + ": " + this);
                return;
            }
            if (is.getMissionary() == unit) {
                logger.finest(tag + " completed at " + target + ": " + this);
                target = null;
                return;
            }
            logger.finest(tag + " unexpected failure at " + target
                + ": " + this);
            break;
        default:
            logger.warning(tag + " unexpected move type (" + mt
                + ") at " + unit.getLocation() + ": " + this);
            return;
        }

        // Retarget on failure or complete at colony, but do not
        // retarget from one colony to another, just drop equipment
        // and invalidate the mission.
        Location completed = target;
        target = findTarget(aiUnit);
        if (completed instanceof Colony && target instanceof Colony) {
           Colony colony = (Colony)completed;
            for (EquipmentType e : new ArrayList<EquipmentType>(unit
                    .getEquipment().keySet())) {
                AIMessage.askEquipUnit(aiUnit, e, -unit.getEquipmentCount(e));
            }
            target = null;
        }
        logger.finest(tag + " completed target " + completed
            + ", retargeting " + target + ": " + this);
    }
,
>
, <(startLine=513 endLine=525 srcPath=/root/NewExperiment/freecolFilter/00571/src/net/sf/freecol/common/model/Map.java)
                    public int compare(PathNode o, PathNode p) {
                        int i = o.getF() - p.getF();
                        if (i != 0) {
                            return i;
                        } else {
                            i = o.getTile().getX() - p.getTile().getX();
                            if (i != 0) {
                                return i;
                            } else {
                                return o.getTile().getY() - p.getTile().getY();
                            }
                        }
                    }
,
(startLine=882 endLine=894 srcPath=/root/NewExperiment/freecolFilter/00571/src/net/sf/freecol/common/model/Map.java)
                    public int compare(PathNode o, PathNode p) {
                        int i = o.getCost() - p.getCost();
                        if (i != 0) {
                            return i;
                        } else {
                            i = o.getTile().getX() - p.getTile().getX();
                            if (i != 0) {
                                return i;
                            } else {
                                return o.getTile().getY() - p.getTile().getY();
                            }
                        }
                    }
,
>
, <(startLine=146 endLine=164 srcPath=/root/NewExperiment/freecolFilter/00424/src/net/sf/freecol/server/ai/GoodsWish.java)
     protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {        
         setId(in.getAttributeValue(null, "ID"));
         destination = (Location) getAIMain().getFreeColGameObject(in.getAttributeValue(null, "destination"));
         
         final String transportableStr = in.getAttributeValue(null, "transportable");
         if (transportableStr != null) {
             transportable = (Transportable) getAIMain().getAIObject(transportableStr);
             if (transportable == null) {
                 transportable = new AIGoods(getAIMain(), transportableStr);
             }
         } else {
             transportable = null;
         }
         value = Integer.parseInt(in.getAttributeValue(null, "value"));
         
         goodsType = FreeCol.getSpecification().getGoodsType(in.getAttributeValue(null, "goodsType"));
         
         in.nextTag();
     }
,
(startLine=169 endLine=187 srcPath=/root/NewExperiment/freecolFilter/00424/src/net/sf/freecol/server/ai/WorkerWish.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {        
        setId(in.getAttributeValue(null, "ID"));
        destination = (Location) getAIMain().getFreeColGameObject(in.getAttributeValue(null, "destination"));
        
        final String transportableStr = in.getAttributeValue(null, "transportable"); 
        if (transportableStr != null) {
            transportable = (Transportable) getAIMain().getAIObject(transportableStr);
            if (transportable == null) {
                transportable = new AIUnit(getAIMain(), transportableStr);
            }
        } else {
            transportable = null;
        }
        value = Integer.parseInt(in.getAttributeValue(null, "value"));

        unitType = FreeCol.getSpecification().getUnitType(in.getAttributeValue(null, "unitType"));
        expertNeeded = Boolean.valueOf(in.getAttributeValue(null, "expertNeeded")).booleanValue();
        in.nextTag();
    }
,
>
, <(startLine=113 endLine=124 srcPath=/root/NewExperiment/freecolFilter/01262/src/net/sf/freecol/tools/MergeTranslations.java)
        try {
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader); 
            String line = bufferedReader.readLine();
            while (line != null) {
                int index = line.indexOf('=');
                if (index >= 0) {
                    result.put(line.substring(0, index), line.substring(index + 1));
                }
                line = bufferedReader.readLine();
            }
        } catch(Exception e) {
,
(startLine=190 endLine=201 srcPath=/root/NewExperiment/freecolFilter/01262/src/net/sf/freecol/tools/InstallerTranslations.java)
        try {
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String line = bufferedReader.readLine();
            while (line != null) {
                int index = line.indexOf('=');
                if (index >= 0) {
                    result.put(line.substring(0, index), line.substring(index + 1));
                }
                line = bufferedReader.readLine();
            }
        } catch(Exception e) {
,
>
, <(startLine=83 endLine=89 srcPath=/root/NewExperiment/freecolFilter/00417/src/net/sf/freecol/common/option/RangeOption.java)
        } else {
            String[] localized = new String[options.length];
            for (int i = 0; i < options.length; i++) {
                localized[i] = Messages.message(getGroup() + "." + getId() + "." + options[i]);
            }
            this.options = localized;
        }
,
(startLine=94 endLine=100 srcPath=/root/NewExperiment/freecolFilter/00417/src/net/sf/freecol/common/option/SelectOption.java)
        } else {
            String[] localized = new String[options.length];
            for (int i = 0; i < options.length; i++) {
                localized[i] = Messages.message(getGroup() + "." + id + "." + options[i]);
            }        
            this.options = localized;
        }
,
>
, <(startLine=148 endLine=172 srcPath=/root/NewExperiment/freecolFilter/00382/src/net/sf/freecol/client/gui/CanvasMapEditorMouseListener.java)
    public void mouseReleased(MouseEvent e) {
        if (getMap() == null) {
            return;
        }
        try {
            if (gui.getDragPath() != null) {
                // A mouse drag has ended (see CanvasMouseMotionListener).

                PathNode temp = gui.getDragPath();

                gui.stopDrag();

                // Move the unit:
                Unit unit = gui.getActiveUnit();
                canvas.getClient().getInGameController().setDestination(unit, temp.getLastNode().getTile());
                if (canvas.getClient().getGame().getCurrentPlayer() == canvas.getClient().getMyPlayer()) {
                    canvas.getClient().getInGameController().moveToDestination(unit);
                }
            } else if (gui.isDragStarted()) {
                gui.stopDrag();
            }
        } catch (Exception ex) {
            logger.log(Level.WARNING, "Error in mouseReleased!", ex);
        }
    }
,
(startLine=132 endLine=153 srcPath=/root/NewExperiment/freecolFilter/00382/src/net/sf/freecol/client/gui/CanvasMouseListener.java)
    public void mouseReleased(MouseEvent e) {
        try {
            if (gui.getDragPath() != null) {
                // A mouse drag has ended (see CanvasMouseMotionListener).

                PathNode temp = gui.getDragPath();

                gui.stopDrag();

                // Move the unit:
                Unit unit = gui.getActiveUnit();
                canvas.getClient().getInGameController().setDestination(unit, temp.getLastNode().getTile());
                if (canvas.getClient().getGame().getCurrentPlayer() == canvas.getClient().getMyPlayer()) {
                    canvas.getClient().getInGameController().moveToDestination(unit);
                }
            } else if (gui.isDragStarted()) {
                gui.stopDrag();
            }
        } catch (Exception ex) {
            logger.log(Level.WARNING, "Error in mouseReleased!", ex);
        }
    }
,
>
, <(startLine=158 endLine=175 srcPath=/root/NewExperiment/freecolFilter/00490/src/net/sf/freecol/client/gui/panel/TilePanel.java)
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        try {
            switch (Integer.valueOf(command).intValue()) {
            case OK:
                setResponse(new Boolean(true));
                break;
            case COLOPEDIA:
                setResponse(new Boolean(true));
                canvas.showColopediaPanel(ColopediaPanel.PanelType.TERRAIN, tileType);
                break;
            default:
                logger.warning("Invalid Actioncommand: invalid number.");
            }
        } catch (NumberFormatException e) {
            logger.warning("Invalid Actioncommand: not a number.");
        }
    }
,
(startLine=152 endLine=166 srcPath=/root/NewExperiment/freecolFilter/00490/src/net/sf/freecol/client/gui/panel/ErrorPanel.java)
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        try {
            switch (Integer.valueOf(command).intValue()) {
            case OK:
                // parent.closeErrorPanel();
                setResponse(new Boolean(true));
                break;
            default:
                logger.warning("Invalid Actioncommand: invalid number.");
            }
        } catch (NumberFormatException e) {
            logger.warning("Invalid Actioncommand: not a number.");
        }
    }
,
(startLine=192 endLine=210 srcPath=/root/NewExperiment/freecolFilter/00490/src/net/sf/freecol/client/gui/panel/LoadingSavegameDialog.java)
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        try {
            switch (Integer.valueOf(command).intValue()) {
            case OK:
                parent.remove(this);
                setResponse(new Boolean(true));
                break;
            case CANCEL:
                parent.remove(this);
                setResponse(new Boolean(false));
                break;
            default:
                logger.warning("Invalid ActionCommand: invalid number.");
            }
        } catch (NumberFormatException e) {
            logger.warning("Invalid Actioncommand: not a number.");
        }
    }
,
(startLine=157 endLine=170 srcPath=/root/NewExperiment/freecolFilter/00490/src/net/sf/freecol/client/gui/panel/IndianSettlementPanel.java)
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        try {
            switch (Integer.valueOf(command).intValue()) {
            case OK:
                setResponse(new Boolean(true));
                break;
            default:
                logger.warning("Invalid Actioncommand: invalid number.");
            }
        } catch (NumberFormatException e) {
            logger.warning("Invalid Actioncommand: not a number.");
        }
    }
,
(startLine=179 endLine=195 srcPath=/root/NewExperiment/freecolFilter/00490/src/net/sf/freecol/client/gui/panel/MonarchPanel.java)
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        try {
            switch (Integer.valueOf(command).intValue()) {
            case OK:
                setResponse(new Boolean(true));
                break;
            case CANCEL:
                setResponse(new Boolean(false));
                break;
            default:
                logger.warning("Invalid Actioncommand: invalid number.");
            }
        } catch (NumberFormatException e) {
            logger.warning("Invalid Actioncommand: not a number.");
        }
    }
,
(startLine=133 endLine=146 srcPath=/root/NewExperiment/freecolFilter/00490/src/net/sf/freecol/client/gui/panel/AboutPanel.java)
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        try {
            switch (Integer.valueOf(command).intValue()) {
                case CLOSE:
                    parent.remove(this);
                    break;
                default:
                    logger.warning("Invalid Actioncommand: invalid number.");
            }
        } catch (NumberFormatException e) {
            logger.warning("Invalid Actioncommand: not a number.");
        }
    }
,
(startLine=143 endLine=156 srcPath=/root/NewExperiment/freecolFilter/00490/src/net/sf/freecol/client/gui/panel/EventPanel.java)
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        try {
            switch (Integer.valueOf(command).intValue()) {
            case OK:
                setResponse(new Boolean(true));
                break;
            default:
                logger.warning("Invalid Actioncommand: invalid number.");
            }
        } catch (NumberFormatException e) {
            logger.warning("Invalid Actioncommand: not a number.");
        }
    }
,
(startLine=242 endLine=255 srcPath=/root/NewExperiment/freecolFilter/00490/src/net/sf/freecol/client/gui/panel/StatisticsPanel.java)
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        try {
            switch (Integer.valueOf(command).intValue()) {
                case CLOSE:
                    parent.remove(this);
                    break;
                default:
                    logger.warning("Invalid Actioncommand: invalid number.");
            }
        } catch (NumberFormatException e) {
            logger.warning("Invalid Actioncommand: not a number.");
        }
    }
,
>
, <(startLine=72 endLine=81 srcPath=/root/NewExperiment/freecolFilter/00565/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
    public IndianDemandMission(AIMain aiMain, AIUnit aiUnit, Colony target) {
        super(aiMain, aiUnit);

        this.target = target;

        if (!getUnit().getOwner().isIndian() || !getUnit().canCarryGoods()) {
            logger.warning("Only an indian which can carry goods can be given the mission: IndianBringGiftMission");
            throw new IllegalArgumentException("Only an indian which can carry goods can be given the mission: IndianBringGiftMission");
        }
    }
,
(startLine=84 endLine=94 srcPath=/root/NewExperiment/freecolFilter/00565/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
    public IndianBringGiftMission(AIMain aiMain, AIUnit aiUnit, Colony target) {
        super(aiMain, aiUnit);

        this.target = target;
        this.giftDelivered = false;

        if (!getUnit().getOwner().isIndian() || !getUnit().canCarryGoods()) {
            logger.warning("Only an indian which can carry goods can be given the mission: IndianBringGiftMission");
            throw new IllegalArgumentException("Only an indian which can carry goods can be given the mission: IndianBringGiftMission");
        }
    }
,
>
, <(startLine=86 endLine=102 srcPath=/root/NewExperiment/freecolFilter/01589/src/net/sf/freecol/common/networking/SetGoodsLevelsMessage.java)
                          Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);

        Colony colony;
        try {
            colony = player.getOurFreeColGameObject(this.colonyId,
                                                    Colony.class);
        } catch (Exception e) {
            return serverPlayer.clientError(e.getMessage())
                .build(serverPlayer);
        }

        // Proceed to set.
        return server.getInGameController()
            .setGoodsLevels(serverPlayer, colony, this.data)
            .build(serverPlayer);
    }
,
(startLine=80 endLine=96 srcPath=/root/NewExperiment/freecolFilter/01589/src/net/sf/freecol/common/networking/PayForBuildingMessage.java)
                          Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);

        Colony colony;
        try {
            colony = player.getOurFreeColGameObject(this.colonyId,
                                                    Colony.class);
        } catch (Exception e) {
            return serverPlayer.clientError(e.getMessage())
                .build(serverPlayer);
        }

        // Proceed to pay.
        return server.getInGameController()
            .payForBuilding(serverPlayer, colony)
            .build(serverPlayer);
    }
,
>
, <(startLine=3673 endLine=3686 srcPath=/root/NewExperiment/freecolFilter/00203/src/net/sf/freecol/common/model/Unit.java)
		if (enemyUnit.isUndead()) {
			// this unit is captured, don't show old owner's messages to new
			// owner
			Iterator i = getGame().getModelMessageIterator(getOwner());
			while (i.hasNext()) {
				((ModelMessage) i.next()).setBeenDisplayed(true);
			}
			messageID = "model.unit.unitCaptured";
			type = ModelMessage.UNIT_LOST;
			setHitpoints(getInitialHitpoints(enemyUnit.getType()));
			setLocation(enemyUnit.getTile());
			setOwner(enemyUnit.getOwner());
			setType(UNDEAD);
		} else if (getType() == ARTILLERY) {
,
(startLine=3729 endLine=3741 srcPath=/root/NewExperiment/freecolFilter/00203/src/net/sf/freecol/common/model/Unit.java)
			if (enemyUnit.getOwner().isEuropean()) {
				// this unit is captured, don't show old owner's messages to new
				// owner
				Iterator i = getGame().getModelMessageIterator(getOwner());
				while (i.hasNext()) {
					((ModelMessage) i.next()).setBeenDisplayed(true);
				}
				messageID = "model.unit.unitCaptured";
				type = ModelMessage.UNIT_LOST;
				setHitpoints(getInitialHitpoints(enemyUnit.getType()));
				setLocation(enemyUnit.getTile());
				setOwner(enemyUnit.getOwner());
			} else {
,
>
, <(startLine=227 endLine=238 srcPath=/root/NewExperiment/freecolFilter/01758/src/net/sf/freecol/server/control/PreGameController.java)
                                       OptionGroup options) {
        final FreeColServer fcs = getFreeColServer();
        final Game game = fcs.getGame();
        final Specification spec = game.getSpecification();

        if (!spec.mergeGameOptions(options, "server")) {
            return serverPlayer.clientError("Game option merge failed");
        }
        fcs.sendToAll(new UpdateGameOptionsMessage(spec.getGameOptions()),
                                                   serverPlayer);
        return null;
    }
,
(startLine=249 endLine=260 srcPath=/root/NewExperiment/freecolFilter/01758/src/net/sf/freecol/server/control/PreGameController.java)
                                               OptionGroup options) {
        final FreeColServer fcs = getFreeColServer();
        final Game game = fcs.getGame();
        final Specification spec = game.getSpecification();
        
        if (!spec.mergeMapGeneratorOptions(options, "server")) {
            return serverPlayer.clientError("Map option merge failed");
        }
        fcs.sendToAll(new UpdateMapGeneratorOptionsMessage(spec.getMapGeneratorOptions()),
                                                           serverPlayer);
        return null;
    }
,
>
, <(startLine=3444 endLine=3456 srcPath=/root/NewExperiment/freecolFilter/00847/src/net/sf/freecol/client/control/InGameController.java)
                                          Goods goods, int gold) {
        Client client = freeColClient.getClient();
        BuyPropositionMessage message
            = new BuyPropositionMessage(unit, settlement, goods, gold);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return NO_TRADE - 1; // signal failure

        try {
            return Integer.parseInt(reply.getAttribute("gold"));
        } catch (NumberFormatException e) {
            return NO_TRADE - 1;
        }
    }
,
(startLine=3545 endLine=3557 srcPath=/root/NewExperiment/freecolFilter/00847/src/net/sf/freecol/client/control/InGameController.java)
                                         Goods goods, int gold) {
        Client client = freeColClient.getClient();
        SellPropositionMessage message
            = new SellPropositionMessage(unit, settlement, goods, gold);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return NO_TRADE - 1; // Signal failure

        try {
            return Integer.parseInt(reply.getAttribute("gold"));
        } catch (NumberFormatException e) {
            return NO_TRADE - 1;
        }
    }
,
>
, <(startLine=3216 endLine=3261 srcPath=/root/NewExperiment/freecolFilter/00642/src/net/sf/freecol/server/control/InGameController.java)
                                     Goods goods, int amount) {
        if (!isTransactionSessionOpen(unit, settlement)) {
            return Message.clientError("Trying to trade without opening a transaction session");
        }
        java.util.Map<String,Object> session
            = getTransactionSession(unit, settlement);
        if (!(Boolean) session.get("canBuy")) {
            return Message.clientError("Trying to buy in a session where buying is not allowed.");
        }
        // TODO: why are we not just checking the unit capacity?
        if (!(Boolean) session.get("hasSpaceLeft")) {
            return Message.clientError("No space to buy.");
        }
        // Check that this is the agreement that was made
        AIPlayer ai = (AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner());
        int returnGold = ai.buyProposition(unit, settlement, goods, amount);
        if (returnGold != amount) {
            return Message.clientError("This was not the price we agreed upon! Cheater?");
        }
        // Check this is funded.
        if (serverPlayer.getGold() < amount) {
            return Message.clientError("Insufficient gold to buy.");
        }

        // Valid, make the trade.
        List<Object> objects = new ArrayList<Object>();
        moveGoods(goods, unit);
        objects.add(unit);

        Player settlementPlayer = settlement.getOwner();
        settlement.updateWantedGoods();
        settlement.getTile().updateIndianSettlementInformation(serverPlayer);
        settlement.modifyAlarm(serverPlayer, -amount / 50);
        settlementPlayer.modifyGold(amount);
        serverPlayer.modifyGold(-amount);
        objects.add(UpdateType.PRIVATE);
        objects.add(settlement.getTile());
        addPartial(objects, serverPlayer, "gold");
        session.put("actionTaken", true);
        session.put("canBuy", false);
        session.put("hasSpaceLeft", unit.getSpaceLeft() != 0);

        // Others can see the unit capacity.
        sendToOthers(serverPlayer, objects);
        return buildUpdate(serverPlayer, objects);
    }
,
(startLine=3275 endLine=3313 srcPath=/root/NewExperiment/freecolFilter/00642/src/net/sf/freecol/server/control/InGameController.java)
                                    Goods goods, int amount) {
        if (!isTransactionSessionOpen(unit, settlement)) {
            return Message.clientError("Trying to sell without opening a transaction session");
        }
        java.util.Map<String,Object> session
            = getTransactionSession(unit, settlement);
        if (!(Boolean) session.get("canSell")) {
            return Message.clientError("Trying to sell in a session where selling is not allowed.");
        }

        // Check that the gold is the agreed amount
        AIPlayer ai = (AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner());
        int returnGold = ai.sellProposition(unit, settlement, goods, amount);
        if (returnGold != amount) {
            return Message.clientError("This was not the price we agreed upon! Cheater?");
        }

        // Valid, make the trade.
        List<Object> objects = new ArrayList<Object>();
        moveGoods(goods, settlement);
        objects.add(unit);

        Player settlementPlayer = settlement.getOwner();
        settlementPlayer.modifyGold(-amount);
        settlement.modifyAlarm(serverPlayer, -settlement.getPrice(goods) / 500);
        serverPlayer.modifyGold(amount);
        settlement.updateWantedGoods();
        settlement.getTile().updateIndianSettlementInformation(serverPlayer);
        objects.add(UpdateType.PRIVATE);
        objects.add(settlement.getTile());
        addPartial(objects, serverPlayer, "gold");
        session.put("actionTaken", true);
        session.put("canSell", false);
        session.put("hasSpaceLeft", unit.getSpaceLeft() != 0);

        // Others can see the unit capacity.
        sendToOthers(serverPlayer, objects);
        return buildUpdate(serverPlayer, objects);
    }
,
>
, <(startLine=2552 endLine=2603 srcPath=/root/NewExperiment/freecolFilter/00665/src/net/sf/freecol/common/model/Player.java)
    public boolean setStanceAndTension(Player player, Stance newStance) {
        Stance oldStance = getStance(player);

        if (newStance == oldStance) return false;
        setStance(player, newStance);

        int modifier = 0;
        switch (newStance) {
        case UNCONTACTED:
            throw new IllegalStateException("Can not set UNCONTACTED stance");
        case PEACE:
            switch (oldStance) {
            case WAR:
                modifier = Tension.CEASE_FIRE_MODIFIER
                    + Tension.PEACE_TREATY_MODIFIER;
                break;
            case CEASE_FIRE:
                modifier = Tension.PEACE_TREATY_MODIFIER;
                break;
            default:
                break;
            }
            break;
        case CEASE_FIRE:
            if (oldStance == Stance.WAR) {
                modifier = Tension.CEASE_FIRE_MODIFIER;
            }
            break;
        default:
            break;
        }
        modifyTension(player, modifier);

        if (player.getStance(this) != newStance) {
            player.setStance(this, newStance);

            if (newStance == Stance.WAR) {
                switch (oldStance) {
                case UNCONTACTED: case PEACE:
                    modifier = Tension.TENSION_ADD_DECLARE_WAR_FROM_PEACE;
                    break;
                case CEASE_FIRE:
                    modifier = Tension.TENSION_ADD_DECLARE_WAR_FROM_CEASE_FIRE;
                    break;
                default:
                    break;
                }
            }
            player.modifyTension(this, modifier);
        }
        return true;
    }
,
(startLine=2608 endLine=2665 srcPath=/root/NewExperiment/freecolFilter/00665/src/net/sf/freecol/common/model/Player.java)
    public void changeRelationWithPlayer(Player player,Stance newStance){
        Stance oldStance = getStance(player);

        // Sanitation
        if(newStance == oldStance){
            return;
        }

        // Set stance
        setStance(player, newStance);

        // Update tension
        int modifier = 0;
        switch(newStance){
        case UNCONTACTED:
            throw new IllegalStateException("Attempt to set UNCONTACTED stance");
        case PEACE:
            if(oldStance == Stance.WAR){
                modifier = Tension.CEASE_FIRE_MODIFIER + Tension.PEACE_TREATY_MODIFIER;
            }
            if(oldStance == Stance.CEASE_FIRE){
                modifier = Tension.PEACE_TREATY_MODIFIER;
            }
            break;
        case CEASE_FIRE:
            if(oldStance == Stance.WAR){
                modifier = Tension.CEASE_FIRE_MODIFIER;
            }
            break;
        case ALLIANCE:
        case WAR:
            // No tension modifiers.
            break;
        }
        modifyTension(player,modifier);

        if (player.getStance(this) != newStance) {
            getGame().getModelController().setStance(this, player, newStance);
            player.setStance(this, newStance);

            if(newStance == Stance.WAR){
                switch(oldStance){
                case UNCONTACTED:
                case PEACE:
                    modifier = Tension.TENSION_ADD_DECLARE_WAR_FROM_PEACE;
                    break;
                case CEASE_FIRE:
                    modifier = Tension.TENSION_ADD_DECLARE_WAR_FROM_CEASE_FIRE;
                    break;
                case ALLIANCE:
                case WAR:
                    // No tension modifiers.
                    break;
                }
            }
            player.modifyTension(this, modifier);
        }
    }
,
>
, <(startLine=2336 endLine=2346 srcPath=/root/NewExperiment/freecolFilter/01427/src/net/sf/freecol/server/model/ServerPlayer.java)
            if (isAttack) {
                if (attackerTile == null
                    || attackerTile == defenderTile
                    || !attackerTile.isAdjacent(defenderTile)) {
                    logger.warning("Bogus attack from " + attackerTile
                        + " to " + defenderTile
                        + "\n" + FreeColDebugger.stackTraceToString());
                } else {
                    cs.addAttack(vis, attackerUnit, defenderUnit, true);
                }
            }
,
(startLine=2350 endLine=2360 srcPath=/root/NewExperiment/freecolFilter/01427/src/net/sf/freecol/server/model/ServerPlayer.java)
            if (isAttack) {
                if (attackerTile == null
                    || attackerTile == defenderTile
                    || !attackerTile.isAdjacent(defenderTile)) {
                    logger.warning("Bogus attack from " + attackerTile
                        + " to " + defenderTile
                        + "\n" + FreeColDebugger.stackTraceToString());
                } else {
                    cs.addAttack(vis, attackerUnit, defenderUnit, false);
                }
            }
,
>
, <(startLine=750 endLine=768 srcPath=/root/NewExperiment/freecolFilter/00019/src/net/sf/freecol/common/model/Player.java)
                if (t != null && t.getFirstUnit() != null && t.getFirstUnit().getOwner().equals(owner)) {
                    Iterator unitIterator = t.getUnitIterator();
                    while (unitIterator.hasNext()) {
                        Unit u = (Unit) unitIterator.next();

                        Iterator childUnitIterator = u.getUnitIterator();
                        while (childUnitIterator.hasNext()) {
                            Unit childUnit = (Unit) childUnitIterator.next();

                            if ((childUnit.getMovesLeft() > 0) && (childUnit.getState() == Unit.ACTIVE)) {
                                units.add(childUnit);
                            }
                        }

                        if ((u.getMovesLeft() > 0) && (u.getState() == Unit.ACTIVE)) {
                            units.add(u);
                        }
                    }
                }
,
(startLine=553 endLine=571 srcPath=/root/NewExperiment/freecolFilter/00019/src/net/sf/freecol/common/model/Tile.java)
        if (getFirstUnit() != null) {
            Iterator unitIterator = getUnitIterator();
            while (unitIterator.hasNext()) {
                Unit u = (Unit) unitIterator.next();

                Iterator childUnitIterator = u.getUnitIterator();
                while (childUnitIterator.hasNext()) {
                    Unit childUnit = (Unit) childUnitIterator.next();

                    if ((childUnit.getMovesLeft() > 0) && (childUnit.getState() == Unit.ACTIVE)) {
                        return childUnit;
                    }
                }

                if ((u.getMovesLeft() > 0) && (u.getState() == Unit.ACTIVE)) {
                    return u;
                }
            }
        } else {
,
>
, <(startLine=1932 endLine=1988 srcPath=/root/NewExperiment/freecolFilter/01497/src/net/sf/freecol/client/control/InGameController.java)
                                                    Settlement settlement) {
        final Game game = freeColClient.getGame();
        Player player = freeColClient.getMyPlayer();
        Goods goods = null;

        // Get list of goods for sale
        List<Goods> forSale = askServer()
            .getGoodsForSaleInSettlement(game, unit, settlement);
        for (;;) {
            if (forSale.isEmpty()) { // Nothing to sell to the player
                return StringTemplate.template("trade.nothingToSell");
            }

            // Choose goods to buy
            List<ChoiceItem<Goods>> choices = new ArrayList<>();
            for (Goods g : forSale) {
                String label = Messages.message(g.getLabel(true));
                choices.add(new ChoiceItem<>(label, g));
            }
            goods = gui.getChoice(true, unit.getTile(),
                                  Messages.message("buyProposition.text"),
                                  settlement,
                                  "nothing", choices);
            if (goods == null) break; // Trade aborted by the player

            int gold = -1; // Initially ask for a price
            for (;;) {
                gold = askServer().buyProposition(unit, settlement,
                    goods, gold);
                if (gold <= 0) {
                    return tradeFailMessage(gold, settlement, goods);
                }

                // Show dialog for buy proposal
                boolean canBuy = player.checkGold(gold);
                BuyAction act
                    = gui.getBuyChoice(unit, settlement, goods, gold, canBuy);
                if (act == null) break; // User cancelled
                switch (act) {
                case BUY: // Accept price, make purchase
                    if (askServer().buyFromSettlement(unit,
                            settlement, goods, gold)) {
                        updateControls(); // Assume success
                        return null;
                    }
                    return abortTrade;
                case HAGGLE: // Try to negotiate a lower price
                    gold = gold * 9 / 10;
                    break;
                default:
                    logger.warning("showBuyDialog fail: " + act);
                    return null;
                }
            }
        }
        return abortTrade;
    }
,
(startLine=1999 endLine=2048 srcPath=/root/NewExperiment/freecolFilter/01497/src/net/sf/freecol/client/control/InGameController.java)
                                                   Settlement settlement) {
        Goods goods = null;
        for (;;) {
            // Choose goods to sell
            List<ChoiceItem<Goods>> choices = new ArrayList<>();
            for (Goods g : unit.getGoodsList()) {
                String label = Messages.message(g.getLabel(true));
                choices.add(new ChoiceItem<>(label, g));
            }
            goods = gui.getChoice(true, unit.getTile(),
                                  Messages.message("sellProposition.text"),
                                  settlement,
                                  "nothing", choices);
            if (goods == null) break; // Trade aborted by the player

            int gold = -1; // Initially ask for a price
            for (;;) {
                gold = askServer().sellProposition(unit, settlement,
                                                   goods, gold);
                if (gold <= 0) {
                    return tradeFailMessage(gold, settlement, goods);
                }

                // Show dialog for sale proposal
                SellAction act = gui.getSellChoice(unit, settlement,
                                                   goods, gold);
                if (act == null) break; // Cancelled
                switch (act) {
                case SELL: // Accepted price, make the sale
                    if (askServer().sellToSettlement(unit, settlement,
                                                     goods, gold)) {
                        updateControls(); // Assume success
                        return null;
                    }
                    return abortTrade;
                case HAGGLE: // Ask for more money
                    gold = (gold * 11) / 10;
                    break;
                case GIFT: // Decide to make a gift of the goods
                    askServer().deliverGiftToSettlement(unit,
                        settlement, goods);
                    return abortTrade;
                default:
                    logger.warning("showSellDialog fail: " + act);
                    return null;
                }
            }
        }
        return abortTrade;
    }
,
>
, <(startLine=137 endLine=144 srcPath=/root/NewExperiment/freecolFilter/00372/src/net/sf/freecol/client/gui/panel/MarketLabel.java)
    public void setSmall(boolean isSmall) {
        if (isSmall) {
            ImageIcon imageIcon = parent.getGUI().getImageLibrary().getGoodsImageIcon(type);
            setIcon(new ImageIcon(imageIcon.getImage().getScaledInstance(imageIcon.getIconWidth() / 2, imageIcon.getIconHeight() / 2, Image.SCALE_DEFAULT)));
        } else {
            setIcon(parent.getGUI().getImageLibrary().getGoodsImageIcon(type));
        }
    }
,
(startLine=165 endLine=173 srcPath=/root/NewExperiment/freecolFilter/00372/src/net/sf/freecol/client/gui/panel/GoodsLabel.java)
    public void setSmall(boolean isSmall) {
        if (isSmall) {
            ImageIcon imageIcon = parent.getGUI().getImageLibrary().getGoodsImageIcon(goods.getType());
            setIcon(new ImageIcon(imageIcon.getImage().getScaledInstance(imageIcon.getIconWidth() / 2,
                    imageIcon.getIconHeight() / 2, Image.SCALE_DEFAULT)));
        } else {
            setIcon(parent.getGUI().getImageLibrary().getGoodsImageIcon(goods.getType()));
        }
    }
,
>
, <(startLine=349 endLine=366 srcPath=/root/NewExperiment/freecolFilter/00455/src/net/sf/freecol/server/ai/REFAIPlayer.java)
    private boolean isWorkForREF() {
        logger.finest("Entering method isWorkForREF");
        Iterator<Unit> it = getPlayer().getUnitIterator();
        while (it.hasNext()) {
            if (it.next().getTile() != null) {
                return true;
            }
        }
        Iterator<Player> it2 = getGame().getPlayerIterator();
        while (it2.hasNext()) {
            Player p = it2.next();
            if (p.getREFPlayer() == getPlayer() &&
                p.getPlayerType() == PlayerType.REBEL) {
                return true;
            }
        }
        return false;
    }
,
(startLine=473 endLine=490 srcPath=/root/NewExperiment/freecolFilter/00455/src/net/sf/freecol/server/ai/AIPlayer.java)
    private boolean isWorkForREF() {
        logger.finest("Entering method isWorkForREF");
        Iterator<Unit> it = getPlayer().getUnitIterator();
        while (it.hasNext()) {
            if (it.next().getTile() != null) {
                return true;
            }
        }
        Iterator<Player> it2 = getGame().getPlayerIterator();
        while (it2.hasNext()) {
            Player p = it2.next();
            if (p.getREFPlayer() == getPlayer() &&
                p.getPlayerType() == PlayerType.REBEL) {
                return true;
            }
        }
        return false;
    }
,
>
, <(startLine=3330 endLine=3337 srcPath=/root/NewExperiment/freecolFilter/01401/src/net/sf/freecol/client/control/InGameController.java)
                } else {
                    m = new ModelMessage(ModelMessage.MessageType.DEMANDS,
                        "indianDemand.other.text", colony, unit)
                        .addName("%nation%", nation)
                        .addName("%colony%", colony.getName())
                        .addAmount("%amount%", amount)
                        .add("%goods%", type.getNameKey());
                }
,
(startLine=3347 endLine=3354 srcPath=/root/NewExperiment/freecolFilter/01401/src/net/sf/freecol/client/control/InGameController.java)
                } else {
                    m = new ModelMessage(ModelMessage.MessageType.DEMANDS,
                        "indianDemand.other.text", colony, unit)
                        .addName("%nation%", nation)
                        .addName("%colony%", colony.getName())
                        .addAmount("%amount%", amount)
                        .add("%goods%", type.getNameKey());
                }
,
>
, <(startLine=471 endLine=493 srcPath=/root/NewExperiment/freecolFilter/01390/src/net/sf/freecol/client/gui/i18n/Messages.java)
            if (nationId == null) {
                if (roleKey == null) {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.null.null.null.null")
                            .addStringTemplate("%type%", type);
                    } else {
                        ret = StringTemplate.template("unitFormat.null.null.null.equip")
                            .addStringTemplate("%type%", type)
                            .addName("%equipment%", equipment);
                    }
                } else {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.null.null.role.null")
                            .addStringTemplate("%type%", type)
                            .add("%role%", roleKey);
                    } else {
                        ret = StringTemplate.template("unitFormat.null.null.role.equip")
                            .addStringTemplate("%type%", type)
                            .add("%role%", roleKey)
                            .addName("%equipment%", equipment);
                    }
                }
            } else {
,
(startLine=493 endLine=519 srcPath=/root/NewExperiment/freecolFilter/01390/src/net/sf/freecol/client/gui/i18n/Messages.java)
            } else {
                if (roleKey == null) {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.null.nation.null.null")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId);
                    } else {
                        ret = StringTemplate.template("unitFormat.null.nation.null.equip")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .addName("%equipment%", equipment);
                    }
                } else {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.null.nation.role.null")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .add("%role%", roleKey);
                    } else {
                        ret = StringTemplate.template("unitFormat.null.nation.role.equip")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .add("%role%", roleKey)
                            .addName("%equipment%", equipment);
                    }
                }
            }
,
(startLine=521 endLine=547 srcPath=/root/NewExperiment/freecolFilter/01390/src/net/sf/freecol/client/gui/i18n/Messages.java)
            if (nationId == null) {
                if (roleKey == null) {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.name.null.null.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type);
                    } else {
                        ret = StringTemplate.template("unitFormat.name.null.null.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .addName("%equipment%", equipment);
                    }
                } else {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.name.null.role.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%role%", roleKey);
                    } else {
                        ret = StringTemplate.template("unitFormat.name.null.role.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%role%", roleKey)
                            .addName("%equipment%", equipment);
                    }
                }
            } else {
,
(startLine=547 endLine=577 srcPath=/root/NewExperiment/freecolFilter/01390/src/net/sf/freecol/client/gui/i18n/Messages.java)
            } else {
                if (roleKey == null) {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.name.nation.null.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId);
                    } else {
                        ret = StringTemplate.template("unitFormat.name.nation.null.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .addName("%equipment%", equipment);
                    }
                } else {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.name.nation.role.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .add("%role%", roleKey);
                    } else {
                        ret = StringTemplate.template("unitFormat.name.nation.role.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .add("%role%", roleKey)
                            .addName("%equipment%", equipment);
                    }
                }
            }
,
>
, <(startLine=672 endLine=679 srcPath=/root/NewExperiment/freecolFilter/00641/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
        while (it.hasNext()) {
            AIUnit au = it.next();
            if (!au.hasMission()
                    && (au.getUnit().getLocation() instanceof ColonyTile || au.getUnit().getLocation() instanceof Building)) {
                AIColony ac = (AIColony) getAIMain().getAIObject(au.getUnit().getColony());
                au.setMission(new WorkInsideColonyMission(getAIMain(), au, ac));
            }
        }
,
(startLine=159 endLine=166 srcPath=/root/NewExperiment/freecolFilter/00641/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        while (it.hasNext()) {
            AIUnit au = it.next();
            if (!au.hasMission()
                && (au.getUnit().getLocation() instanceof ColonyTile || au.getUnit().getLocation() instanceof Building)) {
                AIColony ac = (AIColony) getAIMain().getAIObject(au.getUnit().getColony());
                au.setMission(new WorkInsideColonyMission(getAIMain(), au, ac));
            }
        }
,
>
, <(startLine=81 endLine=89 srcPath=/root/NewExperiment/freecolFilter/00256/src/net/sf/freecol/common/model/GoldTradeItem.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        setID(in.getAttributeValue(null, "ID"));
        String sourceID = in.getAttributeValue(null, "source");
        setSource((Player) getGame().getFreeColGameObject(sourceID));
        String destinationID = in.getAttributeValue(null, "destination");
        setDestination((Player) getGame().getFreeColGameObject(destinationID));
        this.gold = Integer.parseInt(in.getAttributeValue(null, "gold"));
        in.nextTag();
    }
,
(startLine=82 endLine=91 srcPath=/root/NewExperiment/freecolFilter/00256/src/net/sf/freecol/common/model/StanceTradeItem.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        setID(in.getAttributeValue(null, "ID"));
        String sourceID = in.getAttributeValue(null, "source");
        setSource((Player) getGame().getFreeColGameObject(sourceID));
        String destinationID = in.getAttributeValue(null, "destination");
        setDestination((Player) getGame().getFreeColGameObject(destinationID));
        //super.readFromXMLImpl(in);
        this.stance = Integer.parseInt(in.getAttributeValue(null, "stance"));
        in.nextTag();
    }
,
(startLine=79 endLine=89 srcPath=/root/NewExperiment/freecolFilter/00256/src/net/sf/freecol/common/model/UnitTradeItem.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        setID(in.getAttributeValue(null, "ID"));
        String sourceID = in.getAttributeValue(null, "source");
        setSource((Player) getGame().getFreeColGameObject(sourceID));
        String destinationID = in.getAttributeValue(null, "destination");
        setDestination((Player) getGame().getFreeColGameObject(destinationID));
        //super.readFromXMLImpl(in);
        String unitID = in.getAttributeValue(null, "unit");
        this.unit = (Unit) getGame().getFreeColGameObject(unitID);
        in.nextTag();
    }
,
(startLine=79 endLine=89 srcPath=/root/NewExperiment/freecolFilter/00256/src/net/sf/freecol/common/model/ColonyTradeItem.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        setID(in.getAttributeValue(null, "ID"));
        String sourceID = in.getAttributeValue(null, "source");
        setSource((Player) getGame().getFreeColGameObject(sourceID));
        String destinationID = in.getAttributeValue(null, "destination");
        setDestination((Player) getGame().getFreeColGameObject(destinationID));
        //super.readFromXMLImpl(in);
        String colonyID = in.getAttributeValue(null, "colony");
        this.colony = (Colony) getGame().getFreeColGameObject(colonyID);
        in.nextTag();
    }
,
>
, <(startLine=1349 endLine=1366 srcPath=/root/NewExperiment/freecolFilter/01087/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            public Component add(Component comp, boolean editState) {
                Container oldParent = comp.getParent();
                if (editState) {
                    if (comp instanceof UnitLabel) {
                        if (tryWork(((UnitLabel) comp).getUnit())) {
                            oldParent.remove(comp);
                        } else {
                            return null;
                        }
                    } else {
                        logger.warning("An invalid component was dropped"
                            + " on this ASingleBuildingPanel.");
                        return null;
                    }
                }
                update();
                return null;
            }
,
(startLine=1625 endLine=1644 srcPath=/root/NewExperiment/freecolFilter/01087/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            public Component add(Component comp, boolean editState) {
                Container oldParent = comp.getParent();
                if (editState) {
                    if (comp instanceof UnitLabel) {
                        if (tryWork(((UnitLabel) comp).getUnit())) {
                            oldParent.remove(comp);
                            ((UnitLabel) comp).setSmall(false);
                        } else {
                            return null;
                        }
                    } else {
                        logger.warning("An invalid component was dropped"
                                       + " on this ASingleTilePanel.");
                        return null;
                    }
                }

                update();
                return comp;
            }
,
>
, <(startLine=1450 endLine=1502 srcPath=/root/NewExperiment/freecolFilter/00926/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private void bringGifts() {
        logger.finest("Entering method bringGifts");
        if (!getPlayer().isIndian()) {
            // TODO: European players can also bring gifts! However,
            // this might be folded into a trade mission, since
            // European gifts are just a special case of trading.
            return;
        }
        for (IndianSettlement indianSettlement : getPlayer().getIndianSettlements()) {
            // Do not bring gifts all the time:
            if (getAIRandom().nextInt(10) != 1) {
                continue;
            }
            int alreadyAssignedUnits = 0;
            Iterator<Unit> ownedUnits = indianSettlement.getOwnedUnitsIterator();
            while (ownedUnits.hasNext()) {
                if (getAIUnit(ownedUnits.next()).getMission() instanceof IndianBringGiftMission) {
                    alreadyAssignedUnits++;
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_GIFTS_BEING_DELIVERED) {
                continue;
            }
            // Creates a list of nearby colonies:
            ArrayList<Colony> nearbyColonies = new ArrayList<Colony>();
            for (Tile t: indianSettlement.getTile().getSurroundingTiles(MAX_DISTANCE_TO_BRING_GIFT)) {
                if (t.getColony() != null
                        && IndianBringGiftMission.isValidMission(getPlayer(), t.getColony().getOwner())) {
                    nearbyColonies.add(t.getColony());
                }
            }
            if (nearbyColonies.size() > 0) {
                Colony target = nearbyColonies.get(getAIRandom().nextInt(nearbyColonies.size()));
                Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                AIUnit chosenOne = null;
                while (it2.hasNext()) {
                    chosenOne = getAIUnit(it2.next());
                    if (chosenOne.getUnit().getLocation() instanceof Tile
                        && chosenOne.getUnit().canCarryGoods()
                        && (chosenOne.getMission() == null
                            || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                        // Check that the colony can be reached:
                        PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                   target.getTile());
                        if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_BRING_GIFT) {
                            chosenOne.setMission(new IndianBringGiftMission(getAIMain(), chosenOne, target));
                            break;
                        }
                    }
                }
            }
        }
    }
,
(startLine=659 endLine=705 srcPath=/root/NewExperiment/freecolFilter/00926/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void bringGifts() {
        logger.finest("Entering method bringGifts");
        for (IndianSettlement indianSettlement : getPlayer().getIndianSettlements()) {
            // Do not bring gifts all the time:
            if (getAIRandom().nextInt(10) != 1) {
                continue;
            }
            int alreadyAssignedUnits = 0;
            Iterator<Unit> ownedUnits = indianSettlement.getOwnedUnitsIterator();
            while (ownedUnits.hasNext()) {
                if (getAIUnit(ownedUnits.next()).getMission() instanceof IndianBringGiftMission) {
                    alreadyAssignedUnits++;
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_GIFTS_BEING_DELIVERED) {
                continue;
            }
            // Creates a list of nearby colonies:
            ArrayList<Colony> nearbyColonies = new ArrayList<Colony>();
            for (Tile t: indianSettlement.getTile().getSurroundingTiles(MAX_DISTANCE_TO_BRING_GIFT)) {
                if (t.getColony() != null
                        && IndianBringGiftMission.isValidMission(getPlayer(), t.getColony().getOwner())) {
                    nearbyColonies.add(t.getColony());
                }
            }
            if (nearbyColonies.size() > 0) {
                Colony target = nearbyColonies.get(getAIRandom().nextInt(nearbyColonies.size()));
                Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                AIUnit chosenOne = null;
                while (it2.hasNext()) {
                    chosenOne = getAIUnit(it2.next());
                    if (chosenOne.getUnit().getLocation() instanceof Tile
                        && chosenOne.getUnit().canCarryGoods()
                        && (chosenOne.getMission() == null
                            || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                        // Check that the colony can be reached:
                        PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                   target.getTile());
                        if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_BRING_GIFT) {
                            chosenOne.setMission(new IndianBringGiftMission(getAIMain(), chosenOne, target));
                            break;
                        }
                    }
                }
            }
        }
    }
,
>
, <(startLine=579 endLine=588 srcPath=/root/NewExperiment/freecolFilter/00336/src/net/sf/freecol/common/model/UnitType.java)
            } else if ("required-goods".equals(nodeName)) {
                GoodsType type = goodsTypeByRef.get(in.getAttributeValue(null, "id"));
                int amount = getAttribute(in, "value", 0);
                AbstractGoods requiredGoods = new AbstractGoods(type, amount);
                if (getGoodsRequired() == null) {
                    setGoodsRequired(new ArrayList<AbstractGoods>());
                }
                getGoodsRequired().add(requiredGoods);
                in.nextTag(); // close this element
            } else if ("upgrade".equals(nodeName)) {
,
(startLine=139 endLine=148 srcPath=/root/NewExperiment/freecolFilter/00336/src/net/sf/freecol/common/model/BuildingType.java)
            } else if ("required-goods".equals(childName)) {
                GoodsType type = goodsTypeByRef.get(in.getAttributeValue(null, "id"));
                int amount = getAttribute(in, "value", 0);
                AbstractGoods requiredGoods = new AbstractGoods(type, amount);
                if (getGoodsRequired() == null) {
                    setGoodsRequired(new ArrayList<AbstractGoods>());
                }
                getGoodsRequired().add(requiredGoods);
                in.nextTag(); // close this element
            } else if (Modifier.getXMLElementTagName().equals(childName)) {
,
>
, <(startLine=385 endLine=392 srcPath=/root/NewExperiment/freecolFilter/00264/src/net/sf/freecol/common/model/GoodsContainer.java)
                       oldStoredGoods[typeOfGoods] <= high) {
                addModelMessage(source, "model.building.warehouseFull",
                                new String [][] {{"%goods%", Goods.getName(typeOfGoods)},
                                                 {"%level%", String.valueOf(high)},
                                                 {"%colony%", ((Colony) parent).getName()}},
                                ModelMessage.WAREHOUSE_CAPACITY,
                                new Goods(typeOfGoods));
            } else if (storedGoods[typeOfGoods] < low &&
,
(startLine=393 endLine=400 srcPath=/root/NewExperiment/freecolFilter/00264/src/net/sf/freecol/common/model/GoodsContainer.java)
                       oldStoredGoods[typeOfGoods] >= low) {
                addModelMessage(source, "model.building.warehouseEmpty",
                                new String [][] {{"%goods%", Goods.getName(typeOfGoods)},
                                                 {"%level%", String.valueOf(low)},
                                                 {"%colony%", ((Colony) parent).getName()}},
                                ModelMessage.WAREHOUSE_CAPACITY,
                                new Goods(typeOfGoods));
            }
,
>
, <(startLine=670 endLine=706 srcPath=/root/NewExperiment/freecolFilter/01285/src/net/sf/freecol/client/control/InGameController.java)
        for (Goods goods : unit.getGoodsList()) {
            GoodsType type = goods.getType();
            int index, toLoad;
            if ((toLoad = GoodsContainer.CARGO_SIZE - goods.getAmount()) > 0
                && (index = goodsTypesToLoad.indexOf(type)) >= 0) {
                int present, atStop;
                if (unit.isInEurope()) {
                    present = atStop = Integer.MAX_VALUE;
                } else {
                    present = colony.getGoodsCount(type);
                    atStop = colony.getExportAmount(type);
                }
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (sb != null) {
                            sb.append(" ")
                                .append(getLoadGoodsMessage(unit, type,
                                        cargo.getAmount(), present,
                                        atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {
                    if (sb != null) {
                        sb.append(" ")
                            .append(getLoadGoodsMessage(unit, type,
                                    0, present, 0, toLoad));
                    }
                }
                // Do not try to load this goods type again.  Either
                // it has already succeeded, or it can not ever
                // succeed because there is nothing available.
                goodsTypesToLoad.remove(index);
            }
        }
,
(startLine=709 endLine=737 srcPath=/root/NewExperiment/freecolFilter/01285/src/net/sf/freecol/client/control/InGameController.java)
        for (GoodsType type : goodsTypesToLoad) {
            if (!unit.hasSpaceLeft()) break; // Full
            int toLoad = GoodsContainer.CARGO_SIZE;
            int present, atStop;
            if (unit.isInEurope()) {
                present = atStop = Integer.MAX_VALUE;
            } else {
                present = colony.getGoodsCount(type);
                atStop = colony.getExportAmount(type);
            }
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (sb != null) {
                        sb.append(" ")
                            .append(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present, 
                                    atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {
                if (sb != null) {
                    sb.append(getLoadGoodsMessage(unit, type,
                            0, present, 0, toLoad));
                }
            }
        }
,
>
, <(startLine=4547 endLine=4555 srcPath=/root/NewExperiment/freecolFilter/00266/src/net/sf/freecol/common/model/Unit.java)
            } else {
                out.writeAttribute("visibleGoodsCount", Integer.toString(getGoodsCount()));
                UnitContainer emptyUnitContainer = new UnitContainer(getGame(), this);
                emptyUnitContainer.setFakeID(unitContainer.getID());
                emptyUnitContainer.toXML(out, player, showAll, toSavedGame);
                GoodsContainer emptyGoodsContainer = new GoodsContainer(getGame(), this);
                emptyGoodsContainer.setFakeID(goodsContainer.getID());
                emptyGoodsContainer.toXML(out, player, showAll, toSavedGame);
            }
,
(startLine=1241 endLine=1249 srcPath=/root/NewExperiment/freecolFilter/00266/src/net/sf/freecol/common/model/IndianSettlement.java)
        } else {
            UnitContainer emptyUnitContainer = new UnitContainer(getGame(), this);
            emptyUnitContainer.setFakeID(unitContainer.getID());
            emptyUnitContainer.toXML(out, player, showAll, toSavedGame);

            GoodsContainer emptyGoodsContainer = new GoodsContainer(getGame(), this);
            emptyGoodsContainer.setFakeID(goodsContainer.getID());
            emptyGoodsContainer.toXML(out, player, showAll, toSavedGame);
        }
,
>
, <(startLine=190 endLine=233 srcPath=/root/NewExperiment/freecolFilter/00422/src/net/sf/freecol/common/option/RangeOption.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        final String id = in.getAttributeValue(null, "id");
        final String defaultValue = in.getAttributeValue(null, "defaultValue");
        final String localizedLabels = in.getAttributeValue(null, "localizedLabels");
        final String value = in.getAttributeValue(null, "value");

        if (localizedLabels != null) {
            this.localizedLabels = localizedLabels.equals("true");
        }

        if (id == null && getId().equals("NO_ID")) {
            throw new XMLStreamException("invalid <" + getXMLElementTagName() + "> tag : no id attribute found.");
        }
        if (defaultValue == null && value == null) {
            throw new XMLStreamException("invalid <" + getXMLElementTagName()
                    + "> tag : no value nor default value found.");
        }

        if(getId() == NO_ID) {
            setId(id);
        }
        if (value != null) {
            setValue(Integer.parseInt(value));
            in.nextTag();
        } else {
            setValue(Integer.parseInt(defaultValue));
            while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                if (in.getLocalName() == "rangeValue") {
                    String label = in.getAttributeValue(null, "label");
                    final String rangeValue = in.getAttributeValue(null, "value");
                    if (this.localizedLabels) {
                        label = Messages.message(label);
                    }
                    rangeValues.put(label, Integer.parseInt(rangeValue));
                } else {
                    throw new XMLStreamException("Unknow child \"" + in.getLocalName() + "\" in a \""
                            + getXMLElementTagName() + "\".");
                }
                in.nextTag();
            }

            options = rangeValues.keySet().toArray(new String[] {});
        }
    }
,
(startLine=207 endLine=250 srcPath=/root/NewExperiment/freecolFilter/00422/src/net/sf/freecol/common/option/SelectOption.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        final String id = in.getAttributeValue(null, "id");
        final String defaultValue = in.getAttributeValue(null, "defaultValue");
        final String localizedLabels = in.getAttributeValue(null, "localizedLabels");
        final String value = in.getAttributeValue(null, "value");

        if (localizedLabels != null) {
            this.localizedLabels = localizedLabels.equals("true");
        }

        if (id == null && getId().equals("NO_ID")) {
            throw new XMLStreamException("invalid <" + getXMLElementTagName() + "> tag : no id attribute found.");
        }
        if (defaultValue == null && value == null) {
            throw new XMLStreamException("invalid <" + getXMLElementTagName()
                    + "> tag : no value nor default value found.");
        }

        if(getId() == NO_ID) {
            setId(id);
        }
        if (value != null) {
            setValue(Integer.parseInt(value));
            in.nextTag();
        } else {
            setValue(Integer.parseInt(defaultValue));
            while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                if (in.getLocalName() == "selectValue") {
                    String label = in.getAttributeValue(null, "label");
                    final String selectValue = in.getAttributeValue(null, "value");
                    if (this.localizedLabels) {
                        label = Messages.message(label);
                    }
                    selectValues.put(label, Integer.parseInt(selectValue));
                } else {
                    throw new XMLStreamException("Unknow child \"" + in.getLocalName() + "\" in a \""
                            + getXMLElementTagName() + "\".");
                }
                in.nextTag();
            }

            options = selectValues.keySet().toArray(new String[] {});
        }
    }
,
>
, <(startLine=1259 endLine=1268 srcPath=/root/NewExperiment/freecolFilter/00509/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (u != null) {
                u.setState(UnitState.ACTIVE);
                u.setLocation(colony.getTile());
                AIUnit newDefenderAI = (AIUnit) getAIMain().getAIObject(u);
                if (bestTarget != null) {
                    newDefenderAI.setMission(new UnitSeekAndDestroyMission(getAIMain(), newDefenderAI, bestTarget));
                } else {
                    newDefenderAI.setMission(new UnitWanderHostileMission(getAIMain(), newDefenderAI));
                }
            }
,
(startLine=449 endLine=458 srcPath=/root/NewExperiment/freecolFilter/00509/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            if (u != null) {
                u.setState(UnitState.ACTIVE);
                u.setLocation(colony.getTile());
                AIUnit newDefenderAI = (AIUnit) getAIMain().getAIObject(u);
                if (bestTarget != null) {
                    newDefenderAI.setMission(new UnitSeekAndDestroyMission(getAIMain(), newDefenderAI, bestTarget));
                } else {
                    newDefenderAI.setMission(new UnitWanderHostileMission(getAIMain(), newDefenderAI));
                }
            }
,
>
, <(startLine=112 endLine=123 srcPath=/root/NewExperiment/freecolFilter/01040/src/net/sf/freecol/server/ai/mission/ScoutingMission.java)
    public static Location extractTarget(AIUnit aiUnit, PathNode path) {
        if (path == null) return null;
        final Unit unit = aiUnit.getUnit();
        final Location loc = path.getLastNode().getLocation();
        Settlement settlement;
        return (loc == null) ? null
            : ((settlement = loc.getSettlement()) != null)
            ? ((invalidSettlementReason(aiUnit, settlement) == null)
                ? settlement : null)
            : ((invalidTileReason(aiUnit, loc.getTile()) == null)
                ? loc.getTile() : null);
    }
,
(startLine=107 endLine=117 srcPath=/root/NewExperiment/freecolFilter/01040/src/net/sf/freecol/server/ai/mission/MissionaryMission.java)
    public static Location extractTarget(AIUnit aiUnit, PathNode path) {
        if (path == null) return null;
        final Unit unit = aiUnit.getUnit();
        final Location loc = path.getLastNode().getLocation();
        Settlement settlement;
        return (loc == null) ? null
            : ((settlement = loc.getSettlement()) != null)
            ? ((invalidSettlementReason(aiUnit, settlement) == null)
                ? settlement : null)
            : null;
    }
,
>
, <(startLine=189 endLine=220 srcPath=/root/NewExperiment/freecolFilter/01376/src/net/sf/freecol/client/gui/panel/OptionsDialog.java)
    protected boolean load(File file) {
        boolean ret = false;
        FreeColXMLReader xr = null;
        try {
            xr = new FreeColXMLReader(new FileInputStream(file));
            xr.nextTag();
            // TODO: read into group rather than specification
            OptionGroup group = new OptionGroup(getSpecification());
            group.readFromXML(xr);
            String expect = getOptionGroupId();
            if (!expect.equals(group.getId())) {
                try {
                    group = group.getOptionGroup(expect);
                } catch (Exception e) {
                    logger.log(Level.WARNING, "Options file " + file.getPath()
                        + " does not contain expected group " + expect, e);
                }
            }
            if (group != null) {
                getSpecification().getOptionGroup(expect).setValue(group);
                logger.info("Loaded options from file " + file.getPath());
                reset(group);
                ret = true;
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, "Failed to load OptionGroup "
                + getOptionGroupId() + " from " + file.getName(), e);
        } finally {
            if (xr != null) xr.close();
        }
        return ret;
    }
,
(startLine=428 endLine=457 srcPath=/root/NewExperiment/freecolFilter/01376/src/net/sf/freecol/common/model/Specification.java)
    public OptionGroup loadOptionsFile(String optionId, File file) {
        OptionGroup group = null;
        FreeColXMLReader xr = null;
        try {
            xr = new FreeColXMLReader(new FileInputStream(file));
            xr.nextTag();
            group = new OptionGroup(this);
            group.readFromXML(xr);
            if (!optionId.equals(group.getId())) {
                try {
                    group = group.getOptionGroup(optionId);
                } catch (Exception e) {
                    logger.log(Level.WARNING, "Options file " + file.getPath()
                        + " does not contain expected group " + optionId, e);
                    group = null;
                }
            }
            if (group != null) {
                getOptionGroup(optionId).setValue(group);
                logger.info("Loaded " + optionId + " options from file "
                    + file.getPath());
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, "Failed to load OptionGroup "
                + optionId + " from " + file.getName(), e);
        } finally {
            if (xr != null) xr.close();
        }
        return group;
    }
,
>
, <(startLine=542 endLine=572 srcPath=/root/NewExperiment/freecolFilter/01417/src/net/sf/freecol/client/gui/MapViewer.java)
                    } else if ((orDiffLeft & 1) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp & 1) == 0) {
,
(startLine=634 endLine=664 srcPath=/root/NewExperiment/freecolFilter/01417/src/net/sf/freecol/client/gui/MapViewer.java)
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }
,
(startLine=793 endLine=823 srcPath=/root/NewExperiment/freecolFilter/01417/src/net/sf/freecol/client/gui/MapViewer.java)
                    } else if ((orDiffUp & 1) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {
,
(startLine=823 endLine=853 srcPath=/root/NewExperiment/freecolFilter/01417/src/net/sf/freecol/client/gui/MapViewer.java)
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }
,
>
, <(startLine=1035 endLine=1060 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    public void switchEquipmentWith(Unit unit1, Unit unit2){
        if(!unit1.isColonist() || !unit2.isColonist()){
            throw new IllegalArgumentException("Both units need to be colonists to switch equipment");
        }

        if(unit1.getTile() != unit2.getTile()){
            throw new IllegalStateException("Units can only switch equipment in the same location");
        }

        if(unit1.getSettlement() == null){
            throw new IllegalStateException("Units can only switch equipment in a settlement");
        }

        // TODO: use the TypeCountMap that getEquipment() returns and
        // swap the counts as well.
        List<EquipmentType> equipList1 = new ArrayList<EquipmentType>(unit1.getEquipment().keySet());
        List<EquipmentType> equipList2 = new ArrayList<EquipmentType>(unit2.getEquipment().keySet());
        removeAllEquipment(unit1);
        removeAllEquipment(unit2);
        for(EquipmentType equip : equipList2){
            AIMessage.askEquipUnit(getAIUnit(unit1), equip, 1);
        }
        for(EquipmentType equip : equipList1){
            AIMessage.askEquipUnit(getAIUnit(unit2), equip, 1);
        }
    }
,
(startLine=586 endLine=611 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    public void switchEquipmentWith(Unit unit1, Unit unit2){
        if(!unit1.isColonist() || !unit2.isColonist()){
            throw new IllegalArgumentException("Both units need to be colonists to switch equipment");
        }

        if(unit1.getTile() != unit2.getTile()){
            throw new IllegalStateException("Units can only switch equipment in the same location");
        }

        if(unit1.getSettlement() == null){
            throw new IllegalStateException("Units can only switch equipment in a settlement");
        }

        // TODO: use the TypeCountMap that getEquipment() returns and
        // swap the counts as well.
        List<EquipmentType> equipList1 = new ArrayList<EquipmentType>(unit1.getEquipment().keySet());
        List<EquipmentType> equipList2 = new ArrayList<EquipmentType>(unit2.getEquipment().keySet());
        removeAllEquipment(unit1);
        removeAllEquipment(unit2);
        for(EquipmentType equip : equipList2){
            AIMessage.askEquipUnit(getAIUnit(unit1), equip, 1);
        }
        for(EquipmentType equip : equipList1){
            AIMessage.askEquipUnit(getAIUnit(unit2), equip, 1);
        }
    }
,
>
, <(startLine=742 endLine=756 srcPath=/root/NewExperiment/freecolFilter/00905/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
                for (int i = 0; i < nearbyColonies.size(); i++) {
                    Colony t = nearbyColonies.get(i);
                    Player to = t.getOwner();
                    if (!getPlayer().hasContacted(to)
                        || !indianSettlement.hasContactedSettlement(to)) {
                        continue;
                    }
                    int tension = 1 + getPlayer().getTension(to).getValue()
                        + indianSettlement.getAlarm(to).getValue();
                    tension = getAIRandom().nextInt(tension);
                    if (tension > targetTension) {
                        targetTension = tension;
                        target = t;
                    }
                }
,
(startLine=1547 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00905/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
                for (int i = 0; i < nearbyColonies.size(); i++) {
                    Colony t = nearbyColonies.get(i);
                    Player to = t.getOwner();
                    if (!getPlayer().hasContacted(to)
                        || !indianSettlement.hasContactedSettlement(to)) {
                        continue;
                    }
                    int tension = 1 + getPlayer().getTension(to).getValue()
                        + indianSettlement.getAlarm(to).getValue();
                    tension = getAIRandom().nextInt(tension);
                    if (tension > targetTension) {
                        targetTension = tension;
                        target = t;
                    }
                }
,
>
, <(startLine=122 endLine=129 srcPath=/root/NewExperiment/freecolFilter/00287/src/net/sf/freecol/client/gui/panel/MarketLabel.java)
    public void setSmall(boolean isSmall) {
        if (isSmall) {
            ImageIcon imageIcon = (parent.getImageProvider().getGoodsImageIcon(type.getIndex()));
            setIcon(new ImageIcon(imageIcon.getImage().getScaledInstance(imageIcon.getIconWidth() / 2, imageIcon.getIconHeight() / 2, Image.SCALE_DEFAULT)));
        } else {
            setIcon(parent.getImageProvider().getGoodsImageIcon(type.getIndex()));
        }
    }
,
(startLine=150 endLine=158 srcPath=/root/NewExperiment/freecolFilter/00287/src/net/sf/freecol/client/gui/panel/GoodsLabel.java)
    public void setSmall(boolean isSmall) {
        if (isSmall) {
            ImageIcon imageIcon = (parent.getImageProvider().getGoodsImageIcon(goods.getType().getIndex()));
            setIcon(new ImageIcon(imageIcon.getImage().getScaledInstance(imageIcon.getIconWidth() / 2,
                    imageIcon.getIconHeight() / 2, Image.SCALE_DEFAULT)));
        } else {
            setIcon(parent.getImageProvider().getGoodsImageIcon(goods.getType().getIndex()));
        }
    }
,
>
, <(startLine=311 endLine=325 srcPath=/root/NewExperiment/freecolFilter/00819/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    public FoundingFather selectFoundingFather(List<FoundingFather> foundingFathers) {
        //TODO: improve choice
        int age = getGame().getTurn().getAge();
        FoundingFather bestFather = null;
        int bestWeight = -1;
        for (FoundingFather father : foundingFathers) {
            if (father == null) continue;
            int weight = father.getWeight(age);
            if (weight > bestWeight) {
                bestWeight = weight;
                bestFather = father;
            }
        }
        return bestFather;
    }
,
(startLine=301 endLine=323 srcPath=/root/NewExperiment/freecolFilter/00819/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    public FoundingFather selectFoundingFather(List<FoundingFather> foundingFathers) {
        // TODO: improve choice
        int age = getGame().getTurn().getAge();
        FoundingFather bestFather = null;
        int bestWeight = -1;
        for (FoundingFather father : foundingFathers) {
            if (father == null) continue;
                    
            //For the moment, arbitrarily: always choose the one offering custom houses.
            //Allowing the AI to build CH early alleviates the complexity
            //problem of handling all TransportMissions correctly somewhat.
            if (father.hasAbility("model.ability.buildCustomHouse")) {
                return father;
            }

            int weight = father.getWeight(age);
            if (weight > bestWeight) {
                bestWeight = weight;
                bestFather = father;
            }
        }
        return bestFather;
    }
,
>
, <(startLine=1154 endLine=1167 srcPath=/root/NewExperiment/freecolFilter/00658/src/net/sf/freecol/client/control/InGameInputHandler.java)
        for (int i = 0; i < nodes.getLength(); i++) {
            ModelMessage m = new ModelMessage();
            Element e = (Element) nodes.item(i);
            m.readFromXMLElement(e);

            String owner = e.getAttribute("owner");
            FreeColGameObject fcgo = game.getFreeColGameObjectSafely(owner);
            if (fcgo instanceof Player) {
                ((Player) fcgo).addModelMessage(m);
            } else {
                logger.warning("addMessages with broken owner: "
                               + ((owner == null) ? "(null)" : owner));
            }
        }
,
(startLine=1181 endLine=1195 srcPath=/root/NewExperiment/freecolFilter/00658/src/net/sf/freecol/client/control/InGameInputHandler.java)
        for (int i = 0; i < nodes.getLength(); i++) {
            HistoryEvent h = new HistoryEvent();
            Element e = (Element) nodes.item(i);
            h.readFromXMLElement(e);

            // Use the owner attribute.
            String owner = e.getAttribute("owner");
            FreeColGameObject fcgo = game.getFreeColGameObjectSafely(owner);
            if (fcgo instanceof Player) {
                ((Player) fcgo).getHistory().add(h);
            } else {
                logger.warning("addHistory with broken owner: "
                               + ((owner == null) ? "(null)" : owner));
            }
        }
,
>
, <(startLine=553 endLine=575 srcPath=/root/NewExperiment/freecolFilter/00077/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
    private void buildUnitDetail(int unit) {
        detailPanel.removeAll();
        detailPanel.setLayout(new FlowLayout());

        JLabel name = new JLabel(Unit.getName(unit), JLabel.CENTER);
        name.setFont(((Font) UIManager.get("HeaderFont")).deriveFont(0, 24));
        name.setPreferredSize(new Dimension(detailPanel.getWidth(), 50));
        detailPanel.add(name);

        JTextArea description = new JTextArea();
        description.setBorder(null);
        description.setOpaque(false);
        description.setLineWrap(true);
        description.setEditable(false);
        description.setWrapStyleWord(true);
        description.setFocusable(false);
        //TODO
        description.setText("");
        description.setSize(detailPanel.getWidth(), super.getPreferredSize().height);
        detailPanel.add(description);

        detailPanel.doLayout();
    }
,
(startLine=581 endLine=603 srcPath=/root/NewExperiment/freecolFilter/00077/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
    private void buildGoodsDetail(int goods) {
        detailPanel.removeAll();
        detailPanel.setLayout(new FlowLayout());

        JLabel name = new JLabel(Goods.getName(goods), JLabel.CENTER);
        name.setFont(((Font) UIManager.get("HeaderFont")).deriveFont(0, 24));
        name.setPreferredSize(new Dimension(detailPanel.getWidth(), 50));
        detailPanel.add(name);

        JTextArea description = new JTextArea();
        description.setBorder(null);
        description.setOpaque(false);
        description.setLineWrap(true);
        description.setEditable(false);
        description.setWrapStyleWord(true);
        description.setFocusable(false);
        //TODO
        description.setText("");
        description.setSize(detailPanel.getWidth(), super.getPreferredSize().height);
        detailPanel.add(description);

        detailPanel.doLayout();
    }
,
>
, <(startLine=93 endLine=108 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/model/Modifier.java)
        if (attacker.isNaval()) {
            int goodsCount = attacker.getGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                result.add(new Modifier("modifiers.cargoPenalty", 8 - goodsCount, 8));
                totalNumerator *= 8 - goodsCount;
                totalDenominator *= 8;
            }
            if (attacker.getType() == Unit.PRIVATEER && 
                attacker.getOwner().hasFather(FoundingFather.FRANCIS_DRAKE)) {
                // Drake grants 50% attack bonus
                result.add(new Modifier("modifiers.drake", 3, 2));
                totalNumerator *= 3;
                totalDenominator *= 2;
            }
        } else {
,
(startLine=212 endLine=227 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/model/Modifier.java)
        if (defender.isNaval()) {
            int goodsCount = defender.getGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                result.add(new Modifier("modifiers.cargoPenalty", 8 - goodsCount, 8));
                totalNumerator *= 8 - goodsCount;
                totalDenominator *= 8;
            }
            if (defender.getType() == Unit.PRIVATEER && 
                defender.getOwner().hasFather(FoundingFather.FRANCIS_DRAKE)) {
                // Drake grants 50% attack bonus
                result.add(new Modifier("modifiers.drake", 3, 2));
                totalNumerator *= 3;
                totalDenominator *= 2;
            }
        } else {
,
>
, <(startLine=3113 endLine=3127 srcPath=/root/NewExperiment/freecolFilter/00581/src/net/sf/freecol/client/control/InGameController.java)
        if (askEmbark(unit, carrier, null) && unit.getLocation() == carrier) {
            freeColClient.playSound(SoundEffect.LOAD_CARGO);
            // Update GUI
            carrier.firePropertyChange(Unit.CARGO_CHANGE, null, unit);
            if (oldLocation instanceof Europe) {
                Europe europe = (Europe) oldLocation;
                europe.firePropertyChange(Europe.UNIT_CHANGE,
                                          europe.getUnitCount() + 1,
                                          europe.getUnitCount());
            } else if (oldLocation instanceof Tile) {
                Tile tile = (Tile) oldLocation;
                tile.firePropertyChange(Tile.UNIT_CHANGE, unit, null);
            }
            return true;
        }
,
(startLine=3174 endLine=3189 srcPath=/root/NewExperiment/freecolFilter/00581/src/net/sf/freecol/client/control/InGameController.java)
        if (askDisembark(unit) && unit.getLocation() != carrier) {
            // Update GUI
            carrier.firePropertyChange(Unit.CARGO_CHANGE, unit, null);
            if (checkCashInTreasureTrain(unit)) {
                nextActiveUnit();
            } else if (oldLocation instanceof Europe) {
                Europe europe = (Europe) oldLocation;
                europe.firePropertyChange(Europe.UNIT_CHANGE,
                                          europe.getUnitCount() - 1,
                                          europe.getUnitCount());
            } else if (oldLocation instanceof Tile) {
                Tile tile = (Tile) oldLocation;
                tile.firePropertyChange(Tile.UNIT_CHANGE, null, unit);
            }
            return true;
        }
,
>
, <(startLine=71 endLine=89 srcPath=/root/NewExperiment/freecolFilter/00479/src/net/sf/freecol/client/gui/panel/DumpCargoDialog.java)
    public DumpCargoDialog(Canvas parent) {
        this.parent = parent;

        header = new JLabel("", SwingConstants.CENTER);
        header.setFont(mediumHeaderFont);
        header.setText(Messages.message("dumpGoods"));
        header.setAlignmentX(Component.CENTER_ALIGNMENT);

        okButton = new JButton(Messages.message("ok"));
        okButton.setActionCommand(String.valueOf(OK));
        okButton.addActionListener(this);
        okButton.setAlignmentX(Component.CENTER_ALIGNMENT);

        cancelButton = new JButton("cancel");
        cancelButton.setActionCommand(String.valueOf(CANCEL));
        cancelButton.addActionListener(this);
        cancelButton.setAlignmentX(Component.CENTER_ALIGNMENT);

    }
,
(startLine=67 endLine=87 srcPath=/root/NewExperiment/freecolFilter/00479/src/net/sf/freecol/client/gui/panel/MonarchPanel.java)
    public MonarchPanel(Canvas parent) {
        this.parent = parent;

        header = new JLabel("", SwingConstants.CENTER);
        header.setFont(mediumHeaderFont);
        header.setText(Messages.message("aMessageFromTheCrown"));
        header.setAlignmentX(Component.CENTER_ALIGNMENT);

        imageLabel = new JLabel();

        okButton = new JButton(Messages.message("ok"));
        okButton.setActionCommand(String.valueOf(OK));
        okButton.addActionListener(this);
        okButton.setAlignmentX(Component.CENTER_ALIGNMENT);

        cancelButton = new JButton();
        cancelButton.setActionCommand(String.valueOf(CANCEL));
        cancelButton.addActionListener(this);
        cancelButton.setAlignmentX(Component.CENTER_ALIGNMENT);

    }
,
>
, <(startLine=184 endLine=195 srcPath=/root/NewExperiment/freecolFilter/00879/src/net/sf/freecol/server/ai/NewAIPlayer.java)
    private void createAIUnits() {
        clearAIUnits();
        for (Unit u : player.getUnits()) {
            AIUnit a = getAIUnit(u);
            if (a != null) {
                aiUnits.add(a);
            } else {
                logger.warning("Could not find the AIUnit for: "
                               + u + " (" + u.getId() + ")");
            }
        }
    }
,
(startLine=148 endLine=159 srcPath=/root/NewExperiment/freecolFilter/00879/src/net/sf/freecol/server/ai/AIPlayer.java)
    private void createAIUnits() {
        clearAIUnits();
        for (Unit u : getPlayer().getUnits()) {
            AIUnit a = getAIUnit(u);
            if (a != null) {
                aiUnits.add(a);
            } else {
                logger.warning("Could not find the AIUnit for: "
                               + u + " (" + u.getId() + ")");
            }
        }
    }
,
>
, <(startLine=584 endLine=596 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if (random < convertProbability) {
            Unit missionary = indianSettlement.getMissionary();
            if (missionary != null && missionary.getOwner() == attacker.getOwner() &&
                attacker.getGame().getViewOwner() == null && indianSettlement.getUnitCount() > 1) {
                List<UnitType> converts = FreeCol.getSpecification().getUnitTypesWithAbility("model.ability.convert");
                if (converts.size() > 0) {
                    indianSettlement.getFirstUnit().dispose();
                    random = modelController.getRandom(attacker.getId() + "getConvertType", converts.size());
                    modelController.createUnit(attacker.getId() + "indianConvert", attacker.getLocation(),
                                               attacker.getOwner(), converts.get(random));
                }
            }
        } else if (random >= 100 - burnProbability) {
,
(startLine=4582 endLine=4594 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/Unit.java)
        if (random < convertProbability) {
            Unit missionary = indianSettlement.getMissionary();
            if (missionary != null && missionary.getOwner() == getOwner() &&
                getGame().getViewOwner() == null && indianSettlement.getUnitCount() > 1) {
                List<UnitType> converts = FreeCol.getSpecification().getUnitTypesWithAbility("model.ability.convert");
                if (converts.size() > 0) {
                    indianSettlement.getFirstUnit().dispose();
                    random = modelController.getRandom(getId() + "getConvertType", converts.size());
                    modelController.createUnit(getId() + "indianConvert", getLocation(),
                                               getOwner(), converts.get(random));
                }
            }
        } else if (random >= 100 - burnProbability) {
,
>
, <(startLine=490 endLine=682 srcPath=/root/NewExperiment/freecolFilter/00888/src/net/sf/freecol/client/gui/GUI.java)
            if ((diffUp % 2) == 0) {
                if ((diffLeft % 2) == 0) {
                    diffLeft = diffLeft / 2;
                    done = true;
                } else {
                    // Crosspoint
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }
                }
            } else {
,
(startLine=682 endLine=886 srcPath=/root/NewExperiment/freecolFilter/00888/src/net/sf/freecol/client/gui/GUI.java)
            } else {
                if ((diffLeft % 2) == 0) {
                    // Crosspoint
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp--;
                                }
                            } else {
                                // Lower-Right
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp++;
                                }
                            } else {
                                // Upper-Right
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp++;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }
                } else {
                    if ((focus.getY() % 2) == 0) {
                        if (diffLeft < 0) {
                            diffLeft = diffLeft / 2;
                        } else {
                            diffLeft = (diffLeft / 2) + 1;
                        }
                    } else {
                        if (diffLeft < 0) {
                            diffLeft = (diffLeft / 2) - 1;
                        } else {
                            diffLeft = diffLeft / 2;
                        }
                    }
                    done = true;
                }
            }
,
>
, <(startLine=96 endLine=108 srcPath=/root/NewExperiment/freecolFilter/01722/src/net/sf/freecol/common/networking/MonarchActionMessage.java)
        while (xr.moreTags()) {
            String tag = xr.getLocalName();
            if (StringTemplate.TAG.equals(tag)) {
                if (this.template == null) {
                    this.template = xr.readFreeColObject(game, StringTemplate.class);
                } else {
                    expected(TAG, tag);
                }
            } else {
                expected(StringTemplate.TAG, tag);
            }
            xr.expectTag(tag);
        }
,
(startLine=88 endLine=100 srcPath=/root/NewExperiment/freecolFilter/01722/src/net/sf/freecol/common/networking/DeliverGiftMessage.java)
        while (xr.moreTags()) {
            String tag = xr.getLocalName();
            if (Goods.TAG.equals(tag)) {
                if (this.goods == null) {
                    this.goods = xr.readFreeColObject(game, Goods.class);
                } else {
                    expected(TAG, tag);
                }
            } else {
                expected(Goods.TAG, tag);
            }
            xr.expectTag(tag);
        }
,
(startLine=86 endLine=98 srcPath=/root/NewExperiment/freecolFilter/01722/src/net/sf/freecol/common/networking/SetGoodsLevelsMessage.java)
        while (xr.moreTags()) {
            String tag = xr.getLocalName();
            if (ExportData.TAG.equals(tag)) {
                if (this.data == null) {
                    this.data = xr.readFreeColObject(game, ExportData.class);
                } else {
                    expected(TAG, tag);
                }
            } else {
                expected(ExportData.TAG, tag);
            }
            xr.expectTag(tag);
        }
,
(startLine=101 endLine=113 srcPath=/root/NewExperiment/freecolFilter/01722/src/net/sf/freecol/common/networking/NativeTradeMessage.java)
        while (xr.moreTags()) {
            String tag = xr.getLocalName();
            if (NativeTrade.TAG.equals(tag)) {
                if (this.nt == null) {
                    this.nt = xr.readFreeColObject(game, NativeTrade.class);
                } else {
                    expected(TAG, tag);
                }
            } else {
                expected(NativeTrade.TAG, tag);
            }
            xr.expectTag(tag);
        }
,
(startLine=94 endLine=107 srcPath=/root/NewExperiment/freecolFilter/01722/src/net/sf/freecol/common/networking/LootCargoMessage.java)
        while (xr.moreTags()) {
            String tag = xr.getLocalName();
            if (Goods.TAG.equals(tag)) {
                if (this.goods == null) {
                    Goods g = xr.readFreeColObject(game, Goods.class);
                    if (g != null) this.goods.add(g);
                } else {
                    expected(TAG, tag);
                }
            } else {
                expected(Goods.TAG, tag);
            }
            xr.expectTag(tag);
        }
,
(startLine=132 endLine=143 srcPath=/root/NewExperiment/freecolFilter/01722/src/net/sf/freecol/common/networking/ErrorMessage.java)
        while (xr.moreTags()) {
            String tag = xr.getLocalName();
            if (StringTemplate.TAG.equals(tag)) {
                if (this.template == null) {
                    this.template = xr.readFreeColObject(game, StringTemplate.class);
                } else {
                    expected(TAG, tag);
                }
            } else {
                expected(StringTemplate.TAG, tag);
            }
        }
,
(startLine=81 endLine=93 srcPath=/root/NewExperiment/freecolFilter/01722/src/net/sf/freecol/common/networking/NewTradeRouteMessage.java)
        while (xr.moreTags()) {
            String tag = xr.getLocalName();
            if (TradeRoute.TAG.equals(tag)) {
                if (this.tradeRoute == null) {
                    this.tradeRoute = xr.readFreeColObject(game, TradeRoute.class);
                } else {
                    expected(TAG, tag);
                }
            } else {
                expected(TradeRoute.TAG, tag);
            }
            xr.expectTag(tag);
        }
,
(startLine=97 endLine=109 srcPath=/root/NewExperiment/freecolFilter/01722/src/net/sf/freecol/common/networking/SpySettlementMessage.java)
        while (xr.moreTags()) {
            String tag = xr.getLocalName();
            if (Tile.TAG.equals(tag)) {
                if (this.spyTile == null) {
                    this.spyTile = xr.readFreeColObject(game, Tile.class);
                } else {
                    expected(TAG, tag);
                }
            } else {
                expected(Tile.TAG, tag);
            }
            xr.expectTag(tag);
        }
,
(startLine=99 endLine=111 srcPath=/root/NewExperiment/freecolFilter/01722/src/net/sf/freecol/common/networking/AnimateMoveMessage.java)
        while (xr.moreTags()) {
            String tag = xr.getLocalName();
            if (Unit.TAG.equals(tag)) {
                if (this.unit == null) {
                    this.unit = xr.readFreeColObject(game, Unit.class);
                } else {
                    expected(TAG, tag);
                }
            } else {
                expected(Unit.TAG, tag);
            }
            xr.expectTag(tag);
        }
,
(startLine=86 endLine=98 srcPath=/root/NewExperiment/freecolFilter/01722/src/net/sf/freecol/common/networking/NationSummaryMessage.java)
        while (xr.moreTags()) {
            String tag = xr.getLocalName();
            if (NationSummary.TAG.equals(tag)) {
                if (this.summary == null) {
                    this.summary = xr.readFreeColObject(game, NationSummary.class);
                } else {
                    expected(TAG, tag);
                }
            } else {
                expected(NationSummary.TAG, tag);
            }
            xr.expectTag(tag);
        }
,
>
, <(startLine=234 endLine=250 srcPath=/root/NewExperiment/freecolFilter/00282/src/net/sf/freecol/server/ai/TileImprovement.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        id = in.getAttributeValue(null, "ID");
        type = Integer.parseInt(in.getAttributeValue(null, "type"));
        value = Integer.parseInt(in.getAttributeValue(null, "value"));
        
        final String pioneerStr = in.getAttributeValue(null, "pioneer");
        if (pioneerStr != null) {
            pioneer = (AIUnit) getAIMain().getAIObject(pioneerStr);
            if (pioneer == null) {
                pioneer = new AIUnit(getAIMain(), pioneerStr);
            }
        } else {
            pioneer = null;
        }
        target = (Tile) getAIMain().getFreeColGameObject(in.getAttributeValue(null, "target"));
        in.nextTag();
    }
,
(startLine=235 endLine=251 srcPath=/root/NewExperiment/freecolFilter/00282/src/net/sf/freecol/server/ai/TileImprovementPlan.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        id = in.getAttributeValue(null, "ID");
        type = FreeCol.getSpecification().getTileImprovemenType(Integer.parseInt(in.getAttributeValue(null, "type")));
        value = Integer.parseInt(in.getAttributeValue(null, "value"));
        
        final String pioneerStr = in.getAttributeValue(null, "pioneer");
        if (pioneerStr != null) {
            pioneer = (AIUnit) getAIMain().getAIObject(pioneerStr);
            if (pioneer == null) {
                pioneer = new AIUnit(getAIMain(), pioneerStr);
            }
        } else {
            pioneer = null;
        }
        target = (Tile) getAIMain().getFreeColGameObject(in.getAttributeValue(null, "target"));
        in.nextTag();
    }
,
>
, <(startLine=372 endLine=386 srcPath=/root/NewExperiment/freecolFilter/00001/src/net/sf/freecol/client/gui/panel/EuropePanel.java)
            if (selectedUnit != null) {
                selectedUnit.setSelected(true);
                Unit selUnit = selectedUnit.getUnit();

                Iterator unitIterator = selUnit.getUnitIterator();
                while (unitIterator.hasNext()) {
                    Unit unit = (Unit) unitIterator.next();

                    UnitLabel label = new UnitLabel(unit, parent);
                    label.setTransferHandler(defaultTransferHandler);
                    label.addMouseListener(pressListener);

                    cargoPanel.add(label, false);
                }
            }
,
(startLine=330 endLine=344 srcPath=/root/NewExperiment/freecolFilter/00001/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            if (selectedUnit != null) {
                selectedUnit.setSelected(true);
                Unit selUnit = selectedUnit.getUnit();

                Iterator unitIterator = selUnit.getUnitIterator();
                while (unitIterator.hasNext()) {
                    Unit unit = (Unit) unitIterator.next();

                    UnitLabel label = new UnitLabel(unit, parent);
                    label.setTransferHandler(defaultTransferHandler);
                    label.addMouseListener(pressListener);

                    cargoPanel.add(label, false);
                }
            }
,
>
, <(startLine=405 endLine=412 srcPath=/root/NewExperiment/freecolFilter/00093/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
            if (scale != 1) {
              Image image;
              image = icon.getImage();
              int width = (int) (scale * image.getWidth(this));
              int height = (int) (scale * image.getHeight(this));
              image = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
              icon = new ImageIcon(image);
            }
,
(startLine=182 endLine=189 srcPath=/root/NewExperiment/freecolFilter/00093/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
            if (scale != 1) {
              Image image;
              image = icon.getImage();
              int width = (int) (scale * image.getWidth(this));
              int height = (int) (scale * image.getHeight(this));
              image = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
              icon = new ImageIcon(image);
            }
,
>
, <(startLine=594 endLine=609 srcPath=/root/NewExperiment/freecolFilter/00588/src/net/sf/freecol/client/control/InGameController.java)
    private boolean loadGoods(Goods goods, Colony colony, Unit carrier) {
        if (colony == null) {
            return buyGoods(goods.getType(), goods.getAmount(), carrier);
        }
        GoodsType type = goods.getType();
        GoodsContainer container = colony.getGoodsContainer();
        int oldAmount = container.getGoodsCount(type);
        int newAmount;
        if (askLoadCargo(goods, carrier)
            && (newAmount = container.getGoodsCount(type)) != oldAmount) {
            carrier.firePropertyChange(Unit.CARGO_CHANGE, null, goods);
            colony.firePropertyChange(type.getId(), oldAmount, newAmount);
            return true;
        }
        return false;
    }
,
(startLine=727 endLine=743 srcPath=/root/NewExperiment/freecolFilter/00588/src/net/sf/freecol/client/control/InGameController.java)
    private boolean unloadGoods(Goods goods, Unit carrier, Colony colony) {
        if (colony == null) {
            sellGoods(goods);
            return true; /*FIXME when sellGoods gets encapsulated */
        }
        GoodsType type = goods.getType();
        GoodsContainer container = colony.getGoodsContainer();
        int oldAmount = container.getGoodsCount(type);
        int newAmount;
        if (askUnloadCargo(goods)
            && (newAmount = container.getGoodsCount(type)) != oldAmount) {
            carrier.firePropertyChange(Unit.CARGO_CHANGE, goods, null);
            colony.firePropertyChange(type.getId(), oldAmount, newAmount);
            return true;
        }
        return false;
    }
,
>
, <(startLine=472 endLine=484 srcPath=/root/NewExperiment/freecolFilter/01690/src/net/sf/freecol/common/networking/Connection.java)
    public boolean sendElement(Element element) {
        if (element == null) return true;
        final String tag = element.getTagName();
        try {
            sendInternal(element);
            log(element, true);
            logger.fine("Send: " + tag);
            return true;
        } catch (IOException ioe) {
            logger.log(Level.WARNING, "Send fail: " + tag, ioe);
        }
        return false;
    }
,
(startLine=496 endLine=507 srcPath=/root/NewExperiment/freecolFilter/01690/src/net/sf/freecol/common/networking/Connection.java)
    public boolean sendAndWaitElement(Element element) {
        if (element == null) return true;
        final String tag = element.getTagName();
        try {
            askInternal(element);
            logger.fine("SendAndWait: " + tag);
            return true;
        } catch (IOException ioe) {
            logger.log(Level.WARNING, "SendAndWait fail: " + tag, ioe);
        }
        return false;
    }
,
>
, <(startLine=277 endLine=290 srcPath=/root/NewExperiment/freecolFilter/00321/src/net/sf/freecol/server/generator/TerrainGenerator.java)
        if (chosen == null) {
            int humidity = random.nextInt(7) - 3;   // To get -3 to 3, 0 inclusive
            it = acceptable.iterator();
            while (it.hasNext()) {
                TileType t = it.next();
                if (!t.withinRange(TileType.HUMIDITY, humidity)) {
                    if (acceptable.size() == 1) {
                        chosen = t;
                        break;
                    }
                    it.remove();
                }
            }
        }
,
(startLine=292 endLine=305 srcPath=/root/NewExperiment/freecolFilter/00321/src/net/sf/freecol/server/generator/TerrainGenerator.java)
        if (chosen == null) {
            int temperature = random.nextInt(7) - 3;   // To get -3 to 3, 0 inclusive
            it = acceptable.iterator();
            while (it.hasNext()) {
                TileType t = it.next();
                if (!t.withinRange(TileType.TEMPERATURE, temperature)) {
                    if (acceptable.size() == 1) {
                        chosen = t;
                        break;
                    }
                    it.remove();
                }
            }
        }
,
>
, <(startLine=2119 endLine=2145 srcPath=/root/NewExperiment/freecolFilter/00683/src/net/sf/freecol/server/control/InGameController.java)
                            GoodsType type, int amount) {
        List<Object> objects = new ArrayList<Object>();
        Market market = serverPlayer.getMarket();

        // FIXME: market.buy() should be here in the controller, but
        // there are two cases remaining that are hard to move still.
        //
        // 1. There is a shortcut buying of equipment in Europe in
        // Unit.equipWith().
        // 2. Also for the goods required for a building in
        // Colony.payForBuilding().  This breaks the pattern implemented
        // here as there is no unit involved.
        market.buy(type, amount, serverPlayer);
        unit.getGoodsContainer().addGoods(type, amount);
        objects.add(unit);
        addPartial(objects, serverPlayer, "gold");
        if (market.hasPriceChanged(type)) {
            // This type of goods has changed price, so we will update
            // the market and send a message as well.
            objects.add(market.makePriceChangeMessage(type));
            market.flushPriceChange(type);
        }
        propagateToEuropeanMarkets(type, amount, serverPlayer);

        // Action occurs in Europe, nothing is visible to other players.
        return buildUpdate(serverPlayer, objects);
    }
,
(startLine=2157 endLine=2184 srcPath=/root/NewExperiment/freecolFilter/00683/src/net/sf/freecol/server/control/InGameController.java)
                             GoodsType type, int amount) {
        List<Object> objects = new ArrayList<Object>();
        Market market = serverPlayer.getMarket();

        // FIXME: market.sell() should be in the controller, but the
        // following cases will have to wait.
        //
        // 1. Unit.dumpEquipment() gets called from a few places.
        // 2. Colony.exportGoods() is in the newTurn mess.
        // Its also still in MarketTest, which needs to be moved to
        // ServerPlayerTest where it also is already.
        //
        // Try to sell.
        market.sell(type, amount, serverPlayer);
        unit.getGoodsContainer().addGoods(type, -amount);
        objects.add(unit);
        addPartial(objects, serverPlayer, "gold");
        if (market.hasPriceChanged(type)) {
            // This type of goods has changed price, so update the
            // market and send a message as well.
            objects.add(market.makePriceChangeMessage(type));
            market.flushPriceChange(type);
        }
        propagateToEuropeanMarkets(type, amount, serverPlayer);

        // Action occurs in Europe, nothing is visible to other players.
        return buildUpdate(serverPlayer, objects);
    }
,
>
, <(startLine=122 endLine=139 srcPath=/root/NewExperiment/freecolFilter/01284/src/net/sf/freecol/common/networking/Message.java)
        } catch (ArrayIndexOutOfBoundsException e) {
            // Xerces throws ArrayIndexOutOfBoundsException when it barfs on
            // some FreeCol messages. I'd like to see the messages upon which
            // it barfs
            if (dumpMsgOnError) {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                inputSource.getByteStream().reset();
                while (true) {
                    int i = inputSource.getByteStream().read();
                    if (-1 == i) {
                        break;
                    }
                    baos.write(i);
                }
                logger.severe(baos.toString());
            }
            throw e;
        }
,
(startLine=126 endLine=143 srcPath=/root/NewExperiment/freecolFilter/01284/src/net/sf/freecol/common/networking/DOMMessage.java)
        } catch (ArrayIndexOutOfBoundsException e) {
            // Xerces throws ArrayIndexOutOfBoundsException when it barfs on
            // some FreeCol messages. I'd like to see the messages upon which
            // it barfs
            if (dumpMsgOnError) {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                inputSource.getByteStream().reset();
                while (true) {
                    int i = inputSource.getByteStream().read();
                    if (-1 == i) {
                        break;
                    }
                    baos.write(i);
                }
                logger.severe(baos.toString());
            }
            throw e;
        }
,
>
, <(startLine=1261 endLine=1273 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            public boolean check(Unit u, PathNode pathNode) {
                Tile newTile = pathNode.getTile();
                Unit defender = newTile.getDefendingUnit(unit);
                if (isTargetValidForSeekAndDestroy(unit, defender)) {
                    int value = getUnitSeekAndDestroyMissionValue(unit, pathNode.getTile(), pathNode.getTurns());
                    if (value > bestNewTargetValue) {
                        bestTarget = pathNode;
                        bestNewTargetValue = value;
                        return true;
                    }
                }
                return false;
            }
,
(startLine=2196 endLine=2208 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            public boolean check(Unit u, PathNode pathNode) {
                Tile newTile = pathNode.getTile();
                Unit defender = newTile.getDefendingUnit(unit);
                if (isTargetValidForSeekAndDestroy(unit, defender)) {
                    int value = getUnitSeekAndDestroyMissionValue(unit, pathNode.getTile(), pathNode.getTurns());
                    if (value > bestNewTargetValue) {
                        bestTarget = pathNode;
                        bestNewTargetValue = value;
                        return true;
                    }
                }
                return false;
            }
,
(startLine=603 endLine=615 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
                public boolean check(Unit unit, PathNode pathNode) {
                    Tile newTile = pathNode.getTile();
                    Unit defender = newTile.getDefendingUnit(unit);
                    if (isTargetValidForSeekAndDestroy(unit,defender)) {
                        int value = getUnitSeekAndDestroyMissionValue(unit, pathNode.getTile(), pathNode.getTurns());
                        if (value > bestNewTargetValue) {
                            bestTarget = pathNode;
                            bestNewTargetValue = value;
                            return true;
                        }
                    }
                    return false;
                }
,
>
, <(startLine=221 endLine=256 srcPath=/root/NewExperiment/freecolFilter/00001/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element boardShip(Connection connection, Element boardShipElement) {
        Game game = freeColServer.getGame();
        ServerPlayer player = freeColServer.getPlayer(connection);

        Unit unit = (Unit) game.getFreeColGameObject(boardShipElement.getAttribute("unit"));
        Unit carrier = (Unit) game.getFreeColGameObject(boardShipElement.getAttribute("carrier"));

        Tile oldTile = unit.getTile();

        unit.boardShip(carrier);

        Iterator enemyPlayerIterator = game.getPlayerIterator();
        while (enemyPlayerIterator.hasNext()) {
            ServerPlayer enemyPlayer = (ServerPlayer) enemyPlayerIterator.next();

            if (player.equals(enemyPlayer)) {
                continue;
            }

            try {
                if (enemyPlayer.canSee(oldTile)) {
                    Element removeElement = Message.createNewRootElement("remove");

                    Element removeUnit = removeElement.getOwnerDocument().createElement("removeObject");
                    removeUnit.setAttribute("ID", unit.getID());
                    removeElement.appendChild(removeUnit);

                    enemyPlayer.getConnection().send(removeElement);
                }
            } catch (IOException e) {
                logger.warning("Could not send message to: " + enemyPlayer.getName() + " with connection " + enemyPlayer.getConnection());
            }
        }

        return null;
    }
,
(startLine=286 endLine=319 srcPath=/root/NewExperiment/freecolFilter/00001/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element moveToEurope(Connection connection, Element moveToEuropeElement) {
        Game game = freeColServer.getGame();
        ServerPlayer player = freeColServer.getPlayer(connection);

        Unit unit = (Unit) game.getFreeColGameObject(moveToEuropeElement.getAttribute("unit"));
        
        Tile oldTile = unit.getTile();
        unit.moveToEurope();
        
        Iterator enemyPlayerIterator = game.getPlayerIterator();
        while (enemyPlayerIterator.hasNext()) {
            ServerPlayer enemyPlayer = (ServerPlayer) enemyPlayerIterator.next();

            if (player.equals(enemyPlayer)) {
                continue;
            }

            try {
                if (enemyPlayer.canSee(oldTile)) {
                    Element removeElement = Message.createNewRootElement("remove");

                    Element removeUnit = removeElement.getOwnerDocument().createElement("removeObject");
                    removeUnit.setAttribute("ID", unit.getID());
                    removeElement.appendChild(removeUnit);

                    enemyPlayer.getConnection().send(removeElement);
                }
            } catch (IOException e) {
                logger.warning("Could not send message to: " + enemyPlayer.getName() + " with connection " + enemyPlayer.getConnection());
            }
        }

        return null;
    }
,
>
, <(startLine=119 endLine=141 srcPath=/root/NewExperiment/freecolFilter/00787/src/net/sf/freecol/common/networking/SetTradeRoutesMessage.java)
    public Element handle(FreeColServer server, Connection connection) {
        Game game = server.getGame();
        ServerPlayer serverPlayer = server.getPlayer(connection);
        List<TradeRoute> newRoutes = new ArrayList<TradeRoute>();

        for (TradeRoute tradeRoute : tradeRoutes) {
            if (tradeRoute.getId() == null || !hasPrefix(tradeRoute)) {
                return Message.clientError("Bogus route");
            }
            String id = removePrefix(tradeRoute);
            if (!(game.getFreeColGameObject(id) instanceof TradeRoute)) {
                return Message.clientError("Not a trade route: " + id);
            }
            TradeRoute realRoute = (TradeRoute) game.getFreeColGameObject(id);
            if (tradeRoute.getOwner() != (Player) serverPlayer) {
                return Message.clientError("Not your trade route: " + id);
            }
            realRoute.updateFrom(tradeRoute);
            newRoutes.add(realRoute);
        }
        serverPlayer.setTradeRoutes(newRoutes);
        return null;
    }
,
(startLine=76 endLine=94 srcPath=/root/NewExperiment/freecolFilter/00787/src/net/sf/freecol/common/networking/UpdateTradeRouteMessage.java)
    public Element handle(FreeColServer server, Connection connection) {
        Game game = server.getGame();
        ServerPlayer serverPlayer = server.getPlayer(connection);

        if (tradeRoute == null || tradeRoute.getId() == null
            || !SetTradeRoutesMessage.hasPrefix(tradeRoute)) {
            return Message.clientError("Bogus route");
        }
        String id = SetTradeRoutesMessage.removePrefix(tradeRoute);
        if (!(game.getFreeColGameObject(id) instanceof TradeRoute)) {
            return Message.clientError("Not a trade route: " + id);
        }
        TradeRoute realRoute = (TradeRoute) game.getFreeColGameObject(id);
        if (tradeRoute.getOwner() != (Player) serverPlayer) {
            return Message.clientError("Not your trade route: " + id);
        }
        realRoute.updateFrom(tradeRoute);
        return null;
    }
,
>
, <(startLine=400 endLine=409 srcPath=/root/NewExperiment/freecolFilter/00335/src/net/sf/freecol/server/generator/TerrainGenerator.java)
            for (int x=0; x<maxDistanceToEdge && !map.isLandWithinDistance(x, y, distToLandFromHighSeas); x++) {
                if (map.isValid(x, y)) {
                    map.getTile(x, y).setType(highSeas);
                    if (y < map.getHeight() / 2) {
                        map.getTile(x, y).setRegion(northPacific);
                    } else {
                        map.getTile(x, y).setRegion(southPacific);
                    }
                }
            }
,
(startLine=411 endLine=420 srcPath=/root/NewExperiment/freecolFilter/00335/src/net/sf/freecol/server/generator/TerrainGenerator.java)
            for (int x=1; x<=maxDistanceToEdge && !map.isLandWithinDistance(map.getWidth()-x, y, distToLandFromHighSeas); x++) {
                if (map.isValid(map.getWidth()-x, y)) {
                    map.getTile(map.getWidth()-x, y).setType(highSeas);
                    if (y < map.getHeight() / 2) {
                        map.getTile(x, y).setRegion(northAtlantic);
                    } else {
                        map.getTile(x, y).setRegion(southAtlantic);
                    }
                }
            }
,
>
, <(startLine=469 endLine=576 srcPath=/root/NewExperiment/freecolFilter/00856/src/net/sf/freecol/common/model/Map.java)
        while (!openList.isEmpty()) {
            // Choose the node with the lowest f.
            PathNode currentNode = openListQueue.poll();
            final Tile currentTile = currentNode.getTile();
            openList.remove(currentTile.getId());
            closedList.put(currentTile.getId(), currentNode);

            // Found the goal?
            if (currentTile == end) {
                while (currentNode.previous != null) {
                    currentNode.previous.next = currentNode;
                    currentNode = currentNode.previous;
                }
                return currentNode.next;
            }

            // Reset current unit to that of this node.
            currentUnit = (currentNode.isOnCarrier()) ? carrier : unit;

            // Only check further along a path (i.e. ignore initial
            // node) if it is possible to transit *through* it
            // (isProgress()).
            if (currentNode.previous != null) {
                Tile previousTile = currentNode.previous.getTile();
                if (!currentUnit.getSimpleMoveType(previousTile,
                        currentTile).isProgress()) {
                    continue;
                }
            }

            // Try the tiles in each direction
            for (Direction direction : Direction.values()) {
                final Tile newTile = currentTile.getNeighbourOrNull(direction);
                if (newTile == null) continue;

                // If the new tile is the tile we just visited, skip
                // it. We can use == because PathNode.getTile() and
                // getNeighborOrNull both return references to the
                // actual Tile in tiles[][].
                if (currentNode.previous != null
                    && currentNode.previous.getTile() == newTile) {
                    continue;
                }
                if (closedList.containsKey(newTile.getId())) {
                    continue;
                }

                // Collect the parameters for the current node.
                int cost = currentNode.getCost();
                int movesLeft = currentNode.getMovesLeft();
                int turns = currentNode.getTurns();
                boolean onCarrier = currentNode.isOnCarrier();
                Unit moveUnit;

                // Check for disembarkation on new tile, setting
                // moveUnit to the unit that would actually move.
                if (carrier != null
                    && onCarrier
                    && newTile.isLand()
                    && (newTile.getSettlement() == null
                        || newTile.getSettlement().getOwner() == currentUnit.getOwner())) {
                    moveUnit = unit;
                    movesLeft = unit.getInitialMovesLeft();
                } else {
                    moveUnit = (onCarrier) ? carrier : unit;
                }

                // Update parameters for the new tile.
                int extraCost = costDecider.getCost(moveUnit,
                    currentTile, newTile, movesLeft);
                if (extraCost == CostDecider.ILLEGAL_MOVE) {
                    // Do not let the CostDecider (which may be
                    // conservative) block the final destination if it
                    // is still a legal move.
                    if (newTile == end
                        && moveUnit.getSimpleMoveType(currentTile,
                            newTile).isLegal()) {
                        cost += moveUnit.getInitialMovesLeft();
                        movesLeft = 0;
                    } else {
                        continue;
                    }
                } else {
                    cost += extraCost;
                    movesLeft = costDecider.getMovesLeft();
                    if (costDecider.isNewTurn()) turns++;
                }

                // Is this an improvement?  If not, ignore.
                final int f = cost + newTile.getDistanceTo(end);
                PathNode successor = openList.get(newTile.getId());
                if (successor != null) {
                    if (successor.getF() <= f) {
                        continue;
                    }
                    openList.remove(successor.getTile().getId());
                    openListQueue.remove(successor);
                }

                // Queue new node with updated parameters.
                successor = new PathNode(newTile, cost, f, direction,
                    movesLeft, turns);
                successor.previous = currentNode;
                successor.setOnCarrier(carrier != null && moveUnit == carrier);
                openList.put(newTile.getId(), successor);
                openListQueue.offer(successor);
            }
        }
,
(startLine=819 endLine=918 srcPath=/root/NewExperiment/freecolFilter/00856/src/net/sf/freecol/common/model/Map.java)
        while (!openList.isEmpty()) {
            // Choose the node with the lowest cost.
            final PathNode currentNode = openListQueue.poll();
            final Tile currentTile = currentNode.getTile();
            openList.remove(currentTile.getId());
            closedList.put(currentTile.getId(), currentNode);

            // Reset current unit to that of this node.
            currentUnit = (currentNode.isOnCarrier()) ? carrier : unit;

            // Check for simple success.
            if (gd.check(currentUnit, currentNode) && !gd.hasSubGoals()) {
                break;
            }

            // Stop if reached the turn limit.
            if (currentNode.getTurns() > maxTurns) {
                break;
            }

            // Only check further along a path (i.e. ignore initial
            // node) if it is possible to transit *through* it
            // (isProgress()).
            if (currentUnit != null
                && currentNode.previous != null) {
                Tile previousTile = currentNode.previous.getTile();
                if (!currentUnit.getSimpleMoveType(previousTile,
                        currentTile).isProgress()) {
                    continue;
                }
            }

            // Try the tiles in each direction
            for (Direction direction : Direction.values()) {
                final Tile newTile = currentTile.getNeighbourOrNull(direction);
                if (newTile == null) {
                    continue;
                }

                // If the new tile is the tile we just visited, skip
                // it. We can use == because PathNode.getTile() and
                // getNeighborOrNull both return references to the
                // actual Tile in tiles[][].
                if (currentNode.previous != null
                    && currentNode.previous.getTile() == newTile) {
                    continue;
                }
                if (closedList.containsKey(newTile.getId())) {
                    continue;
                }

                // Collect the parameters for the current node.
                int cost = currentNode.getCost();
                int movesLeft = currentNode.getMovesLeft();
                int turns = currentNode.getTurns();
                boolean onCarrier = currentNode.isOnCarrier();
                Unit moveUnit;

                // Check for disembarkation on new tile, setting
                // moveUnit to the unit that would actually move.
                if (carrier != null
                    && onCarrier
                    && newTile.isLand()
                    && (newTile.getSettlement() == null
                        || newTile.getSettlement().getOwner() == currentUnit.getOwner())) {
                    moveUnit = unit;
                    movesLeft = moveUnit.getInitialMovesLeft();
                } else {
                    moveUnit = (onCarrier) ? carrier : unit;
                }

                // Update parameters for the new tile.
                int extraCost = costDecider.getCost(moveUnit,
                        currentTile, newTile, movesLeft);
                if (extraCost == CostDecider.ILLEGAL_MOVE) continue;
                cost += extraCost;
                movesLeft = costDecider.getMovesLeft();
                if (costDecider.isNewTurn()) {
                    turns++;
                }

                // Is this an improvement?  If not, ignore.
                PathNode successor = openList.get(newTile.getId());
                if (successor != null) {
                    if (successor.getCost() <= cost) {
                        continue;
                    }
                    openList.remove(successor.getTile().getId());
                    openListQueue.remove(successor);
                }

                // Queue new node with updated parameters.
                successor = new PathNode(newTile, cost, cost, direction,
                    movesLeft, turns);
                successor.previous = currentNode;
                successor.setOnCarrier(carrier != null && moveUnit == carrier);
                openList.put(newTile.getId(), successor);
                openListQueue.offer(successor);
            }
        }
,
>
, <(startLine=192 endLine=208 srcPath=/root/NewExperiment/freecolFilter/00528/src/net/sf/freecol/server/ai/NewAIPlayer.java)
    protected void abortInvalidAndOneTimeMissions() {
        logger.finest("Entering method abortInvalidAndOneTimeMissions");
        Iterator<AIUnit> aiUnitsIterator = getAIUnitIterator();
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();
            if (aiUnit.getMission() == null) {
                continue;
            }
            if (!aiUnit.getMission().isValid() || aiUnit.getMission() instanceof UnitWanderHostileMission
                || aiUnit.getMission() instanceof UnitWanderMission
                // || aiUnit.getMission() instanceof DefendSettlementMission
                // || aiUnit.getMission() instanceof UnitSeekAndDestroyMission
                ) {
                aiUnit.setMission(null);
            }
        }
    }
,
(startLine=737 endLine=754 srcPath=/root/NewExperiment/freecolFilter/00528/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    private void abortInvalidAndOneTimeMissions() {
        logger.finest("Entering method abortInvalidAndOneTimeMissions");
        Iterator<AIUnit> aiUnitsIterator = getAIUnitIterator();
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();
            if (aiUnit.getMission() == null) {
                continue;
            }
            if (!aiUnit.getMission().isValid() || aiUnit.getMission() instanceof UnitWanderHostileMission
                    || aiUnit.getMission() instanceof UnitWanderMission
                    || aiUnit.getMission() instanceof IdleAtColonyMission
            // || aiUnit.getMission() instanceof DefendSettlementMission
            // || aiUnit.getMission() instanceof UnitSeekAndDestroyMission
            ) {
                aiUnit.setMission(null);
            }
        }
    }
,
(startLine=853 endLine=870 srcPath=/root/NewExperiment/freecolFilter/00528/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void abortInvalidAndOneTimeMissions() {
        logger.finest("Entering method abortInvalidAndOneTimeMissions");
        Iterator<AIUnit> aiUnitsIterator = getAIUnitIterator();
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();
            if (aiUnit.getMission() == null) {
                continue;
            }
            if (!aiUnit.getMission().isValid() || aiUnit.getMission() instanceof UnitWanderHostileMission
                    || aiUnit.getMission() instanceof UnitWanderMission
                    || aiUnit.getMission() instanceof IdleAtColonyMission
            // || aiUnit.getMission() instanceof DefendSettlementMission
            // || aiUnit.getMission() instanceof UnitSeekAndDestroyMission
            ) {
                aiUnit.setMission(null);
            }
        }
    }
,
>
, <(startLine=438 endLine=451 srcPath=/root/NewExperiment/freecolFilter/00011/src/net/sf/freecol/common/model/Player.java)
            if (t != null && t.getFirstUnit() != null && t.getFirstUnit().getOwner().equals(this)) {
                Iterator unitIterator = t.getUnitIterator();
                while (unitIterator.hasNext()) {
                    Unit u = (Unit) unitIterator.next();

                    Iterator childUnitIterator = u.getUnitIterator();
                    while (childUnitIterator.hasNext()) {
                        Unit childUnit = (Unit) childUnitIterator.next();
                        units.add(childUnit);
                    }

                    units.add(u);
                }
            }
,
(startLine=497 endLine=510 srcPath=/root/NewExperiment/freecolFilter/00011/src/net/sf/freecol/common/model/Player.java)
            if (t != null && t.getFirstUnit() != null && t.getFirstUnit().getOwner().equals(this)) {
                Iterator unitIterator = t.getUnitIterator();
                while (unitIterator.hasNext()) {
                    Unit u = (Unit) unitIterator.next();

                    Iterator childUnitIterator = u.getUnitIterator();
                    while (childUnitIterator.hasNext()) {
                        Unit childUnit = (Unit) childUnitIterator.next();
                        units.add(childUnit);
                    }

                    count += 2;
                }
            } else if (t != null && t.getSettlement() != null && (t.getSettlement() instanceof Colony)) {
,
>
, <(startLine=114 endLine=136 srcPath=/root/NewExperiment/freecolFilter/01200/src/net/sf/freecol/client/gui/ImageLibrary.java)
                             Color background, Color foreground) {
        // Draw it and put it in the cache
        Font font = ResourceManager.getFont("SimpleFont", Font.BOLD,
            (float)Math.rint(12 * getScalingFactor()));
        // hopefully, this is big enough
        BufferedImage bi = new BufferedImage(100, 100,
                                             BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = bi.createGraphics();
        TextLayout label = new TextLayout(text, font, 
                                          g2.getFontRenderContext());
        float padding = 6 * getScalingFactor();
        int width = (int)(label.getBounds().getWidth() + padding);
        int height = (int)(label.getAscent() + label.getDescent() + padding);
        g2.setColor(border);
        g2.fillRect(0, 0, width, height);
        g2.setColor(background);
        g2.fillRect(1, 1, width - 2, height - 2);
        g2.setColor(foreground);
        label.draw(g2, (float)(padding/2 - label.getBounds().getX()),
                   label.getAscent() + padding/2);
        g2.dispose();
        return bi.getSubimage(0, 0, width, height);
    }
,
(startLine=151 endLine=177 srcPath=/root/NewExperiment/freecolFilter/01200/src/net/sf/freecol/client/gui/ImageLibrary.java)
                                   Color foreground) {
        // Draw it and put it in the cache
        Font font = ResourceManager.getFont("SimpleFont", Font.BOLD,
            (float)Math.rint(12 * getScalingFactor()));
        // hopefully, this is big enough
        BufferedImage bi = new BufferedImage(100, 100,
                                             BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = bi.createGraphics();
        TextLayout label = new TextLayout(text, font, 
                                          g2.getFontRenderContext());
        float padding = 6 * getScalingFactor();
        int width = (int)(label.getBounds().getWidth() + padding);
        int height = (int)(label.getAscent() + label.getDescent() + padding);
        g2.setColor(border);
        g2.fillRect(0, 0, width, height);
        g2.setColor(background);
        g2.fillRect(1, 1, width - 2, height - 2);
        if (amount > 0.0 && amount <= 1.0) {
            g2.setColor(fill);
            g2.fillRect(1, 1, width - 2, (int)((height - 2) * amount));
        }
        g2.setColor(foreground);
        label.draw(g2, (float)(padding/2 - label.getBounds().getX()),
                   label.getAscent() + padding/2);
        g2.dispose();
        return bi.getSubimage(0, 0, width, height);
    }
,
>
, <(startLine=51 endLine=74 srcPath=/root/NewExperiment/freecolFilter/00071/src/net/sf/freecol/server/ai/mission/UnitWanderMission.java)
    public void doMission(Connection connection) {
        Tile thisTile = getUnit().getTile();
        Unit unit = getUnit();
        
        while(unit.getMovesLeft() > 0) {
            int direction = (int) (Math.random() * 8);
            int j;
            for (j = 8; j > 0 && ((unit.getGame().getMap().getNeighbourOrNull(direction, thisTile) == null) || (unit.getMoveType(direction) != Unit.MOVE)); j--) {
                direction = (int) (Math.random() * 8);
            }
            if (j == 0) break;
            thisTile = unit.getGame().getMap().getNeighbourOrNull(direction, thisTile);

            Element moveElement = Message.createNewRootElement("move");
            moveElement.setAttribute("unit", unit.getID());
            moveElement.setAttribute("direction", Integer.toString(direction));
            
            try {
                connection.send(moveElement);
            } catch (IOException e) {
                logger.warning("Could not send \"move\"-message!");
            }
        }
    }
,
(startLine=81 endLine=99 srcPath=/root/NewExperiment/freecolFilter/00071/src/net/sf/freecol/server/ai/mission/UnitWanderHostileMission.java)
            if (!hasAttacked) {
                int direction = directions[0];
                int j;
                for (j = 0; j < 8 && (unit.getGame().getMap().getNeighbourOrNull(direction, thisTile) == null || unit.getMoveType(direction) != Unit.MOVE); j++) {
                    direction = directions[j];
                }
                if (j == 8) return; // Not possible to move in any directions.
                thisTile = unit.getGame().getMap().getNeighbourOrNull(direction, thisTile);

                Element element = Message.createNewRootElement("move");
                element.setAttribute("unit", unit.getID());
                element.setAttribute("direction", Integer.toString(direction));

                try {
                    connection.ask(element);
                } catch (IOException e) {
                    logger.warning("Could not send message!");
                }
            }
,
>
, <(startLine=838 endLine=859 srcPath=/root/NewExperiment/freecolFilter/00086/src/net/sf/freecol/server/ai/AIPlayer.java)
                if (needMuskets && ac != null) {
                    // Check and see if we have already made a GoodsWish for here.
                    Iterator wishes = ac.getWishIterator();
                    boolean made = false;
                    while (wishes.hasNext()) {
                        Wish w = (Wish) wishes.next();
                        if (!(w instanceof GoodsWish)) {
                            continue;
                        }
                        GoodsWish gw = (GoodsWish) w;
                        if (gw == null) {
                            continue;
                        }
                        if (gw.getGoodsType() == Goods.MUSKETS) {
                            made = true;
                        }
                    }
                    if (made == false) {
                        //Add a new GoodsWish onto the stack.
                        ac.addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - olddefenders) * 50, Goods.MUSKETS));
                    }
                }
,
(startLine=860 endLine=881 srcPath=/root/NewExperiment/freecolFilter/00086/src/net/sf/freecol/server/ai/AIPlayer.java)
                if (needHorses && ac != null) {
                    // Check and see if we have already made a GoodsWish for here.
                    Iterator wishes = ac.getWishIterator();
                    boolean made = false;
                    while (wishes.hasNext()) {
                        Wish w = (Wish) wishes.next();
                        if (!(w instanceof GoodsWish)) {
                            continue;
                        }
                        GoodsWish gw = (GoodsWish) w;
                        if (gw == null) {
                            continue;
                        }
                        if (gw.getGoodsType() == Goods.HORSES) {
                            made = true;
                        }
                    }
                    if (made == false) {
                        //Add a new GoodsWish onto the stack.
                        ac.addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - defenders) * 50, Goods.HORSES));
                    }
                }
,
>
, <(startLine=123 endLine=130 srcPath=/root/NewExperiment/freecolFilter/01376/test/src/net/sf/freecol/server/generator/MapGeneratorTest.java)
        for (Nation n : spec().getNations()) {
            if (n.isUnknownEnemy()) continue;
            Player p = new ServerPlayer(g, n.getType().getNameKey(), false, n,
                                        null, null);
            p.setAI(!n.getType().isEuropean() || n.getType().isREF());
            g.addPlayer(p);
            players.add(p);
        }
,
(startLine=179 endLine=186 srcPath=/root/NewExperiment/freecolFilter/01376/test/src/net/sf/freecol/server/generator/MapGeneratorTest.java)
        for (Nation n : spec().getNations()) {
            if (n.isUnknownEnemy()) continue;
            Player p = new ServerPlayer(g, n.getType().getNameKey(), false, n,
                                        null, null);
            p.setAI(!n.getType().isEuropean() || n.getType().isREF());
            g.addPlayer(p);
            players.add(p);
        }
,
>
, <(startLine=608 endLine=616 srcPath=/root/NewExperiment/freecolFilter/01439/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
        if (newColonist > 0) {
            b = colourButton(cac, Integer.toString(newColonist),
                null, cGood,
                stpl("report.colony.arriving.description")
                    .addName("%colony%", colony.getName())
                    .addNamed("%unit%", colonistType)
                    .addAmount("%turns%", newColonist));
            reportPanel.add(b);
        } else if (newColonist < 0) {
,
(startLine=616 endLine=623 srcPath=/root/NewExperiment/freecolFilter/01439/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
        } else if (newColonist < 0) {
            b = colourButton(cac, Integer.toString(-newColonist),
                null, (newColonist >= -3) ? cAlarm : cWarn,
                stpl("report.colony.starving.description")
                    .addName("%colony%", colony.getName())
                    .addAmount("%turns%", -newColonist));
            reportPanel.add(b);
        } else {
,
>
, <(startLine=104 endLine=111 srcPath=/root/NewExperiment/freecolFilter/00943/src/net/sf/freecol/client/gui/panel/IndianSettlementPanel.java)
        } else {
            sale = player.getLastSaleString(settlement, wantedGoods[0]);
            add(new JLabel(Messages.message(wantedGoods[0].getNameKey())
                           + ((sale == null) ? "" : " " + sale),
                           gui.getImageLibrary().getImageIcon(wantedGoods[0], false),
                           JLabel.CENTER));
            n--;
        }
,
(startLine=125 endLine=133 srcPath=/root/NewExperiment/freecolFilter/00943/src/net/sf/freecol/client/gui/panel/IndianSettlementPanel.java)
            for (int i = 2; i < wantedGoods.length; i++) {
                if (wantedGoods[i] != null) {
                    sale = player.getLastSaleString(settlement,wantedGoods[i]);
                    add(new JLabel(Messages.message(wantedGoods[i].getNameKey())
                                   + ((sale == null) ? "" : " " + sale),
                                   gui.getImageLibrary().getImageIcon(wantedGoods[i], false),
                                   JLabel.CENTER));
                }
            }
,
>
, <(startLine=315 endLine=326 srcPath=/root/NewExperiment/freecolFilter/01371/src/net/sf/freecol/server/generator/LandGenerator.java)
    private boolean isSingleTile(int x, int y) {
        Position p = new Position(x, y);

        for (Direction direction : Direction.values()) {
            Position n = new Position(p, direction);
            if (n.isValid(width, height) && map[n.getX()][n.getY()]) {
                return false;
            }
        }

        return true;
    }
,
(startLine=287 endLine=297 srcPath=/root/NewExperiment/freecolFilter/01371/src/net/sf/freecol/common/model/LandMap.java)
    private boolean isSingleTile(int x, int y) {
        Position p = new Position(x, y);

        for (Direction direction : Direction.values()) {
            Position n = new Position(p, direction);
            if (n.isValid(width, height) && map[n.getX()][n.getY()]) {
                return false;
            }
        }
        return true;
    }
,
>
, <(startLine=133 endLine=150 srcPath=/root/NewExperiment/freecolFilter/01007/src/net/sf/freecol/server/ai/mission/UnitWanderHostileMission.java)
    public void doMission() {
        final Unit unit = getUnit();
        if (unit == null || unit.isDisposed()) {
            logger.warning(tag + " broken: " + unit);
            return;
        } else if (unit.getTile() == null) {
            logger.warning(tag + " not on the map: " + unit);
            return;
        }

        // Make random moves in a reasonably consistent direction,
        // checking for a target along the way.
        final AIUnit aiUnit = getAIUnit();
        Direction d = Direction.getRandomDirection(tag, getAIRandom());
        while (unit.getMovesLeft() > 0
            && !seekAndAttack(aiUnit)
            && (d = moveRandomly(tag, d)) != null);
    }
,
(startLine=93 endLine=105 srcPath=/root/NewExperiment/freecolFilter/01007/src/net/sf/freecol/server/ai/mission/UnitWanderMission.java)
    public void doMission() {
        final Unit unit = getUnit();
        if (unit == null || unit.isDisposed()) {
            logger.warning(tag + " broken: " + unit);
            return;
        } else if (unit.getTile() == null) {
            logger.warning(tag + " not on the map: " + unit);
            return;
        }

        Direction d = Direction.getRandomDirection(tag, getAIRandom());
        while ((d = moveRandomly(tag, d)) != null);
    }
,
>
, <(startLine=335 endLine=345 srcPath=/root/NewExperiment/freecolFilter/00436/src/net/sf/freecol/common/model/FreeColObject.java)
            try {
                final String value = in.getAttributeValue(null, "x" + Integer.toString(x));
                final T object;
                if (value != null) {
                    Constructor<T> c = type.getConstructor(type);
                    object = c.newInstance(new Object[] {value});
                } else {
                    object = null;
                }
                array[x] = object;
            } catch (InvocationTargetException e) {
,
(startLine=447 endLine=457 srcPath=/root/NewExperiment/freecolFilter/00436/src/net/sf/freecol/common/model/FreeColObject.java)
            try {
                final String value = in.getAttributeValue(null, "x" + Integer.toString(x));
                final T object;
                if (value != null) {
                    Constructor<T> c = type.getConstructor(type);
                    object = c.newInstance(new Object[] {value});
                } else {
                    object = null;
                }
                list.add(object);
            } catch (InvocationTargetException e) {
,
>
, <(startLine=166 endLine=179 srcPath=/root/NewExperiment/freecolFilter/00451/src/net/sf/freecol/client/gui/CanvasMapEditorMouseListener.java)
            if (gui.getGotoPath() != null) {
                // A mouse drag has ended (see CanvasMouseMotionListener).

                PathNode temp = gui.getGotoPath();

                gui.stopGoto();

                // Move the unit:
                Unit unit = gui.getActiveUnit();
                canvas.getClient().getInGameController().setDestination(unit, temp.getLastNode().getTile());
                if (canvas.getClient().getGame().getCurrentPlayer() == canvas.getClient().getMyPlayer()) {
                    canvas.getClient().getInGameController().moveToDestination(unit);
                }
            } else if (gui.isGotoStarted()) {
,
(startLine=124 endLine=135 srcPath=/root/NewExperiment/freecolFilter/00451/src/net/sf/freecol/client/gui/CanvasMouseListener.java)
                if (gui.isGotoStarted()) {
                    PathNode path = gui.getGotoPath();
                    if (path != null) {
                        gui.stopGoto();
                        // Move the unit:
                        Unit unit = gui.getActiveUnit();
                        canvas.getClient().getInGameController().setDestination(unit, path.getLastNode().getTile());
                        if (canvas.getClient().getGame().getCurrentPlayer() == canvas.getClient().getMyPlayer()) {
                            canvas.getClient().getInGameController().moveToDestination(unit);
                        }
                    }
                } else {
,
(startLine=152 endLine=165 srcPath=/root/NewExperiment/freecolFilter/00451/src/net/sf/freecol/client/gui/CanvasMouseListener.java)
            if (gui.getGotoPath() != null) {
                // A mouse drag has ended (see CanvasMouseMotionListener).

                PathNode temp = gui.getGotoPath();

                gui.stopGoto();

                // Move the unit:
                Unit unit = gui.getActiveUnit();
                canvas.getClient().getInGameController().setDestination(unit, temp.getLastNode().getTile());
                if (canvas.getClient().getGame().getCurrentPlayer() == canvas.getClient().getMyPlayer()) {
                    canvas.getClient().getInGameController().moveToDestination(unit);
                }
            } else if (gui.isGotoStarted()) {
,
>
, <(startLine=1264 endLine=1277 srcPath=/root/NewExperiment/freecolFilter/00839/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
        if (newTarget != null) {
            Tile targetTile = newTarget.getLastNode().getTile();
            int value = getUnitSeekAndDestroyMissionValue(unit, targetTile, newTarget.getTotalTurns());
            if (value > bestValue) {
                bestValue = value;
                if (targetTile.getSettlement() != null) {
                    bestTarget = targetTile.getSettlement();
                } else if (getBestTreasureTrain(targetTile) != null) {
                    bestTarget = getBestTreasureTrain(targetTile);
                } else {
                    bestTarget = targetTile.getDefendingUnit(unit);
                }
            }
        }
,
(startLine=2204 endLine=2218 srcPath=/root/NewExperiment/freecolFilter/00839/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (newTarget != null) {
                Tile targetTile = newTarget.getLastNode().getTile();
                int value = getUnitSeekAndDestroyMissionValue(unit,
                        targetTile, newTarget.getTotalTurns());
                if (value > bestValue) {
                    bestValue = value;
                    if (targetTile.getSettlement() != null) {
                        bestTarget = targetTile.getSettlement();
                    } else if (getBestTreasureTrain(targetTile) != null) {
                        bestTarget = getBestTreasureTrain(targetTile);
                    } else {
                        bestTarget = targetTile.getDefendingUnit(unit);
                    }
                }
            }
,
(startLine=588 endLine=601 srcPath=/root/NewExperiment/freecolFilter/00839/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (newTarget != null) {
            Tile targetTile = newTarget.getLastNode().getTile();
            int value = getUnitSeekAndDestroyMissionValue(unit, targetTile, newTarget.getTotalTurns());
            if (value > bestValue) {
                bestValue = value;
                if (targetTile.getSettlement() != null) {
                    bestTarget = targetTile.getSettlement();
                } else if (getBestTreasureTrain(targetTile) != null) {
                    bestTarget = getBestTreasureTrain(targetTile);
                } else {
                    bestTarget = targetTile.getDefendingUnit(unit);
                }
            }
        }
,
>
, <(startLine=577 endLine=589 srcPath=/root/NewExperiment/freecolFilter/00611/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private void sendRemoveUnitToAll(Unit unit, ServerPlayer serverPlayer) {
        Element remove = Message.createNewRootElement("remove");
        unit.addToRemoveElement(remove);
        for (ServerPlayer enemyPlayer : getOtherPlayers(serverPlayer)) {
            if (unit.isVisibleTo(enemyPlayer)) {
                try {
                    enemyPlayer.getConnection().sendAndWait(remove);
                } catch (IOException e) {
                    logger.warning(e.getMessage());
                }
            }
        }
    }
,
(startLine=136 endLine=148 srcPath=/root/NewExperiment/freecolFilter/00611/src/net/sf/freecol/server/control/InGameController.java)
    public void sendRemoveUnitToAll(Unit unit, ServerPlayer serverPlayer) {
        Element remove = Message.createNewRootElement("remove");
        unit.addToRemoveElement(remove);
        for (ServerPlayer enemyPlayer : getOtherPlayers(serverPlayer)) {
            if (unit.isVisibleTo(enemyPlayer)) {
                try {
                    enemyPlayer.getConnection().sendAndWait(remove);
                } catch (IOException e) {
                    logger.warning(e.getMessage());
                }
            }
        }
    }
,
>
, <(startLine=1018 endLine=1025 srcPath=/root/NewExperiment/freecolFilter/01159/src/net/sf/freecol/common/debug/DebugUtils.java)
        for (Unit u : sis.getUnitList()) {
            Mission m = aiMain.getAIUnit(u).getMission();
            sb.append(u + " at " + ((FreeColGameObject)u.getLocation()));
            if (m != null) {
                sb.append(" " + Utils.lastPart(m.getClass().getName(), "."));
            }
            sb.append("\n");
        }            
,
(startLine=1027 endLine=1034 srcPath=/root/NewExperiment/freecolFilter/01159/src/net/sf/freecol/common/debug/DebugUtils.java)
        for (Unit u : sis.getOwnedUnits()) {
            Mission m = aiMain.getAIUnit(u).getMission();
            sb.append(u + " at " + ((FreeColGameObject)u.getLocation()));
            if (m != null) {
                sb.append(" " + Utils.lastPart(m.getClass().getName(), "."));
            }
            sb.append("\n");
        }
,
>
, <(startLine=3172 endLine=3202 srcPath=/root/NewExperiment/freecolFilter/00763/src/net/sf/freecol/client/gui/GUI.java)
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {
,
(startLine=3264 endLine=3294 srcPath=/root/NewExperiment/freecolFilter/00763/src/net/sf/freecol/client/gui/GUI.java)
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }
,
(startLine=3423 endLine=3453 srcPath=/root/NewExperiment/freecolFilter/00763/src/net/sf/freecol/client/gui/GUI.java)
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {
,
(startLine=3453 endLine=3483 srcPath=/root/NewExperiment/freecolFilter/00763/src/net/sf/freecol/client/gui/GUI.java)
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }
,
>
, <(startLine=79 endLine=92 srcPath=/root/NewExperiment/freecolFilter/01191/src/net/sf/freecol/client/gui/panel/ReportMilitaryPanel.java)
    protected void addREFUnits() {
        reportPanel.add(new JLabel(Messages.message(player.getNation().getREFNation().getId() + ".name")),
                        "span, split 2");
        reportPanel.add(new JSeparator(JSeparator.HORIZONTAL), "growx");

        List<AbstractUnit> refUnits = getController().getREFUnits();
        if (refUnits != null) {
            for (AbstractUnit unit : refUnits) {
                if (!unit.getUnitType(getSpecification()).hasAbility(Ability.NAVAL_UNIT)) {
                    reportPanel.add(createUnitTypeLabel(unit), "sg");
                }
            }
        }
    }
,
(startLine=53 endLine=66 srcPath=/root/NewExperiment/freecolFilter/01191/src/net/sf/freecol/client/gui/panel/ReportNavalPanel.java)
    protected void addREFUnits() {
        reportPanel.add(new JLabel(Messages.message(player.getNation().getREFNation().getId() + ".name")),
                        "span, split 2");
        reportPanel.add(new JSeparator(JSeparator.HORIZONTAL), "growx");

        List<AbstractUnit> refUnits = getController().getREFUnits();
        if (refUnits != null) {
            for (AbstractUnit unit : refUnits) {
                if (unit.getUnitType(getSpecification()).hasAbility(Ability.NAVAL_UNIT)) {
                    reportPanel.add(createUnitTypeLabel(unit), "sg");
                }
            }
        }
    }
,
>
, <(startLine=1666 endLine=1723 srcPath=/root/NewExperiment/freecolFilter/00916/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    public int getUnitSeekAndDestroyMissionValue(Unit unit, Tile newTile, int turns) {
        if (!isTargetValidForSeekAndDestroy(unit, newTile)) {
            return Integer.MIN_VALUE;
        }
        Settlement settlement = newTile.getSettlement();
        Unit defender = newTile.getDefendingUnit(unit);
        // Take distance to target into account
        int value = 10020 - turns * 100;

        if (settlement != null) {
            // Do not cheat and look inside the settlement.
            // Just use visible facts about it.
            // TODO: if we are the REF and there is a significant Tory
            // population inside, assume traitors have briefed us.
            if (settlement instanceof Colony) {
                // Favour high population and weak fortifications.
                Colony colony = (Colony) settlement;
                value += 50 * colony.getUnitCount();
                if (colony.hasStockade()) {
                    value -= 1000 * colony.getStockade().getLevel();
                }
            } else if (settlement instanceof IndianSettlement) {
                // Favour the most hostile settlements
                IndianSettlement is = (IndianSettlement) settlement;
                Tension tension = is.getAlarm(unit.getOwner());
                if (tension != null) value += tension.getValue();
            }
        } else if (defender != null) {
            CombatModel combatModel = unit.getGame().getCombatModel();
            float off = combatModel.getOffencePower(unit, defender);
            float def = combatModel.getDefencePower(unit, defender);

            Unit train = getBestTreasureTrain(newTile);
            if (train != null) {
                value += Math.min(train.getTreasureAmount() / 10, 50);
            }

            if (defender.getType().getOffence() > 0) {
                value += 200 - def * 2 - turns * 50;
            }

            value += combatModel.getOffencePower(defender, unit)
                - combatModel.getDefencePower(defender, unit);

            if (!defender.isNaval()
                && defender.hasAbility(Ability.EXPERT_SOLDIER)
                && !defender.isArmed()) {
                value += 10 - def * 2 - turns * 25;
            }
            if (value < 0) value = 0;
        }
        logger.finest("getUnitSeekAndDestroyMissionValue " + unit.getId()
                      + " v " + ((settlement != null) ? settlement.getId()
                                 : (defender != null) ? defender.getId()
                                 : "none")
                      + " = " + value);
        return value;
    }
,
(startLine=795 endLine=847 srcPath=/root/NewExperiment/freecolFilter/00916/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    int getUnitSeekAndDestroyMissionValue(Unit unit, Tile newTile, int turns) {
        if (!isTargetValidForSeekAndDestroy(unit, newTile)) {
            return Integer.MIN_VALUE;
        }
        Settlement settlement = newTile.getSettlement();
        Unit defender = newTile.getDefendingUnit(unit);
        // Take distance to target into account
        int value = 10020 - turns * 100;

        if (settlement != null) {
            // Do not cheat and look inside the settlement.
            // Just use visible facts about it.
            // TODO: if we are the REF and there is a significant Tory
            // population inside, assume traitors have briefed us.
            if (settlement instanceof Colony) {
                // Favour high population and weak fortifications.
                Colony colony = (Colony) settlement;
                value += 50 * colony.getUnitCount();
                if (colony.hasStockade()) {
                    value -= 1000 * colony.getStockade().getLevel();
                }
            } else if (settlement instanceof IndianSettlement) {
                // Favour the most hostile settlements
                IndianSettlement is = (IndianSettlement) settlement;
                Tension tension = is.getAlarm(unit.getOwner());
                if (tension != null) value += tension.getValue();
            }
        } else if (defender != null) {
            CombatModel combatModel = unit.getGame().getCombatModel();
            float off = combatModel.getOffencePower(unit, defender);
            float def = combatModel.getDefencePower(unit, defender);

            if (defender.getType().getOffence() > 0) {
                value += 200 - def * 2 - turns * 50;
            }

            value += combatModel.getOffencePower(defender, unit)
                - combatModel.getDefencePower(defender, unit);

            if (!defender.isNaval()
                && defender.hasAbility(Ability.EXPERT_SOLDIER)
                && !defender.isArmed()) {
                value += 10 - def * 2 - turns * 25;
            }
            if (value < 0) value = 0;
        }
        logger.finest("getUnitSeekAndDestroyMissionValue " + unit.getId()
                      + " v " + ((settlement != null) ? settlement.getId()
                                 : (defender != null) ? defender.getId()
                                 : "none")
                      + " = " + value);
        return value;
    }
,
>
, <(startLine=995 endLine=1022 srcPath=/root/NewExperiment/freecolFilter/01517/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            for (Cargo cargo : curr) {
                CargoResult result = (cargo.getMode().isCollection())
                    ? CargoResult.TCONTINUE
                    : tryCargo(cargo, lb);
                switch (result) {
                case TCONTINUE:
                    cont.add(cargo);
                    break;
                case TRETRY: // will check again below
                    if (cargo.retry()) {
                        cont.add(cargo);
                        break;
                    }
                    // Fall through
                case TFAIL:
                    if (cargo.isCarried()) {
                        cargo.dump();
                        break;
                    }
                    // Fall through
                case TDONE:
                    dropTransportable(cargo.getTransportable());
                    cargo.clear();
                    break;
                case TNEXT: default:
                    throw new IllegalStateException("Can not happen");
                }
            }
,
(startLine=1032 endLine=1056 srcPath=/root/NewExperiment/freecolFilter/01517/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            for (Cargo cargo : tClear()) {
                CargoResult result = (cargo.getMode().isCollection())
                    ? tryCargo(cargo, lb)
                    : CargoResult.TCONTINUE;
                switch (result) {
                case TCONTINUE:
                    cont.add(cargo);
                    break;
                case TNEXT:
                    cont.add(cargo);
                    break;
                case TRETRY:
                    if (cargo.retry()) { // Can not reach the target.
                        next.add(cargo); // Try again next turn.
                        break;
                    }
                    // Fall through
                case TFAIL: case TDONE:
                    dropTransportable(cargo.getTransportable());
                    cargo.clear();
                    break;
                default:
                    throw new IllegalStateException("Can not happen");
                }
            }
,
>
, <(startLine=135 endLine=145 srcPath=/root/NewExperiment/freecolFilter/00097/src/net/sf/freecol/server/ai/mission/WishRealizationMission.java)
    public int getTransportPriority() {
        if (getUnit().getLocation() instanceof Unit) {
            return NORMAL_TRANSPORT_PRIORITY;
        } else if (getUnit().getLocation().getTile() == wish.getDestination().getTile()) {
            return 0;
        } else if (getUnit().getTile() == null || getUnit().findPath(wish.getDestination().getTile()) == null) {
            return NORMAL_TRANSPORT_PRIORITY;
        } else {
            return 0;
        }
    }
,
(startLine=120 endLine=130 srcPath=/root/NewExperiment/freecolFilter/00097/src/net/sf/freecol/server/ai/mission/BuildColonyMission.java)
    public Tile getTransportDestination() {
        if (getUnit().getLocation() instanceof Unit) {
            return target;
        } else if (getUnit().getLocation().getTile() == target) {
            return null;
        } else if (getUnit().getTile() == null || getUnit().findPath(target) == null) {
            return target;
        } else {
            return null;
        }
    }
,
(startLine=139 endLine=149 srcPath=/root/NewExperiment/freecolFilter/00097/src/net/sf/freecol/server/ai/mission/BuildColonyMission.java)
    public int getTransportPriority() {
        if (getUnit().getLocation() instanceof Unit) {
            return NORMAL_TRANSPORT_PRIORITY;
        } else if (getUnit().getLocation().getTile() == target) {
            return 0;
        } else if (getUnit().getTile() == null || getUnit().findPath(target) == null) {
            return NORMAL_TRANSPORT_PRIORITY;
        } else {
            return 0;
        }
    }
,
>
, <(startLine=148 endLine=167 srcPath=/root/NewExperiment/freecolFilter/00184/src/net/sf/freecol/client/control/InGameInputHandler.java)
    public Element update(Element updateElement) {
        Game game = getFreeColClient().getGame();

        NodeList nodeList = updateElement.getChildNodes();
        for (int i=0; i<nodeList.getLength(); i++) {
            Element element = (Element) nodeList.item(i);
            FreeColGameObject fcgo = game.getFreeColGameObject(element.getAttribute("ID"));

            if (fcgo != null) {
                fcgo.readFromXMLElement(element);
            } else {
                logger.warning("Could not find 'FreeColGameObject' with ID: " + element.getAttribute("ID"));
            }
        }

        // TODO: Refresh only the updated tiles:
        getFreeColClient().getCanvas().refresh();

        return null;
    }
,
(startLine=176 endLine=194 srcPath=/root/NewExperiment/freecolFilter/00184/src/net/sf/freecol/client/control/InGameInputHandler.java)
    private Element remove(Element removeElement) {
        Game game = getFreeColClient().getGame();

        NodeList nodeList = removeElement.getChildNodes();
        for (int i=0; i<nodeList.getLength(); i++) {
            Element element = (Element) nodeList.item(i);
            FreeColGameObject fcgo = game.getFreeColGameObject(element.getAttribute("ID"));

            if (fcgo != null) {
                fcgo.dispose();
            } else {
                logger.warning("Could not find 'FreeColGameObject' with ID: " + element.getAttribute("ID"));
            }
        }

        // TODO: Refresh only the updated tiles:
        getFreeColClient().getCanvas().refresh();
        return null;
    }
,
>
, <(startLine=723 endLine=733 srcPath=/root/NewExperiment/freecolFilter/00711/src/net/sf/freecol/server/FreeColServer.java)
                if (xsr.getLocalName().equals("serverObjects")) {
                    // Reads the ServerAdditionObjects:
                    serverObjects = new ArrayList<Object>();
                    while (xsr.nextTag() != XMLStreamConstants.END_ELEMENT) {
                        if (xsr.getLocalName().equals(ServerPlayer.getServerAdditionXMLElementTagName())) {
                            serverObjects.add(new ServerPlayer(xsr));
                        } else {
                            throw new XMLStreamException("Unknown tag: " + xsr.getLocalName());
                        }
                    }
                } else if (xsr.getLocalName().equals(Game.getXMLElementTagName())) {
,
(startLine=173 endLine=183 srcPath=/root/NewExperiment/freecolFilter/00711/src/net/sf/freecol/server/generator/MapGenerator.java)
                if (xsr.getLocalName().equals("serverObjects")) {
                    // Reads the ServerAdditionObjects:
                    serverObjects = new ArrayList<Object>();
                    while (xsr.nextTag() != XMLStreamConstants.END_ELEMENT) {
                        if (xsr.getLocalName().equals(ServerPlayer.getServerAdditionXMLElementTagName())) {
                            serverObjects.add(new ServerPlayer(xsr));
                        } else {
                            throw new XMLStreamException("Unknown tag: " + xsr.getLocalName());
                        }
                    }
                } else if (xsr.getLocalName().equals(Game.getXMLElementTagName())) {
,
>
, <(startLine=419 endLine=437 srcPath=/root/NewExperiment/freecolFilter/01056/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            for (int i = 1; i < transportables.size() && bestSourceDistance > 0; i++) {
                Transportable t1 = transportables.get(i - 1);

                if (isCarrying(t1)){
                    int distToDestination = getDistanceTo(t, t1.getTransportDestination(), true);
                    if (distToDestination == Map.COST_INFINITY) continue;
                    if(distToDestination <= bestSourceDistance) {
                        bestSourceIndex = i;
                        bestSourceDistance = distToDestination;
                    }
                } else{
                    distToSource = getDistanceTo(t, t1.getTransportSource(), true);
                    if (distToSource == Map.COST_INFINITY) continue;
                    if (distToSource <= bestSourceDistance) {
                        bestSourceIndex = i;
                        bestSourceDistance = distToSource;
                    }
                }
            }
,
(startLine=466 endLine=483 srcPath=/root/NewExperiment/freecolFilter/01056/src/net/sf/freecol/server/ai/mission/TransportMission.java)
        for (int i = Math.max(bestSourceIndex, 1); i < transportables.size() && bestDestinationDistance > 0; i++) {
            Transportable t1 = transportables.get(i - 1);
            if (isCarrying(t1)){
                int distToDestination = getDistanceTo(t, t1.getTransportDestination(), false);
                if (distToDestination == Map.COST_INFINITY) continue;
                if(distToDestination <= bestDestinationDistance) {
                    bestDestinationIndex = i;
                    bestDestinationDistance = distToDestination;
                }
            } else{
                int distToSource = getDistanceTo(t, t1.getTransportSource(), false);
                if (distToSource == Map.COST_INFINITY) continue;
                if (distToSource <= bestDestinationDistance) {
                    bestDestinationIndex = i;
                    bestDestinationDistance =  distToSource;
                }
            }
        }
,
>
, <(startLine=340 endLine=372 srcPath=/root/NewExperiment/freecolFilter/00424/src/net/sf/freecol/common/model/FreeColObject.java)
        throws XMLStreamException {
        if (!in.getLocalName().equals(tagName)) {
            in.nextTag();
        }
        
        final int size = Integer.parseInt(in.getAttributeValue(null, ARRAY_SIZE));
        T[] array = (T[]) Array.newInstance(type, size);
        
        for (int x=0; x<array.length; x++) {
            try {
                final String value = in.getAttributeValue(null, "x" + Integer.toString(x));
                final T object;
                if (value != null) {
                    Constructor<T> c = type.getConstructor(type);
                    object = c.newInstance(new Object[] {value});
                } else {
                    object = null;
                }
                array[x] = object;
            } catch (InvocationTargetException e) {
                throw new RuntimeException(e);
            } catch (NoSuchMethodException e) {
                throw new RuntimeException(e);
            } catch (InstantiationException e) {
                throw new RuntimeException(e);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            }
        }
        
        in.nextTag();
        return array;
    }
,
(startLine=454 endLine=484 srcPath=/root/NewExperiment/freecolFilter/00424/src/net/sf/freecol/common/model/FreeColObject.java)
            throws XMLStreamException {
        if (!in.getLocalName().equals(tagName)) {
            in.nextTag();
        }
        final int length = Integer.parseInt(in.getAttributeValue(null, ARRAY_SIZE));
        List<T> list = new ArrayList<T>(length);
        for (int x=0; x<length; x++) {
            try {
                final String value = in.getAttributeValue(null, "x" + Integer.toString(x));
                final T object;
                if (value != null) {
                    Constructor<T> c = type.getConstructor(type);
                    object = c.newInstance(new Object[] {value});
                } else {
                    object = null;
                }
                list.add(object);
            } catch (InvocationTargetException e) {
                throw new RuntimeException(e);
            } catch (NoSuchMethodException e) {
                throw new RuntimeException(e);
            } catch (InstantiationException e) {
                throw new RuntimeException(e);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            }
        }
        
        in.nextTag();
        return list;
    }
,
>
, <(startLine=508 endLine=519 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Specification.java)
        } else if ("model.modifier.autoProduction".equals(Id)) {
            // TODO: remove 0.9.x compatibility code
            try {
                Constructor<T> c = type.getConstructor(String.class, Specification.class);
                T result = c.newInstance(Id, this);
                allTypes.put(Id, result);
                return result;
            } catch(Exception e) {
                logger.warning(e.toString());
                return null;
            }
        } else if (initialized) {
,
(startLine=521 endLine=532 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Specification.java)
        } else {
            // forward declaration of new type
            try {
                Constructor<T> c = type.getConstructor(String.class, Specification.class);
                T result = c.newInstance(Id, this);
                allTypes.put(Id, result);
                return result;
            } catch(Exception e) {
                logger.warning(e.toString());
                return null;
            }
        }
,
>
, <(startLine=1427 endLine=1440 srcPath=/root/NewExperiment/freecolFilter/00245/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element leaveShip(Connection connection, Element leaveShipElement) {
        Game game = getFreeColServer().getGame();
        ServerPlayer player = getFreeColServer().getPlayer(connection);
        Unit unit = (Unit) game.getFreeColGameObject(leaveShipElement.getAttribute("unit"));
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        unit.leaveShip();
        Tile newTile = unit.getTile();
        if (newTile != null) {
            sendUpdatedTileToAll(newTile, player);
        }
        return null;
    }
,
(startLine=1555 endLine=1564 srcPath=/root/NewExperiment/freecolFilter/00245/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element moveToAmerica(Connection connection, Element moveToAmericaElement) {
        Game game = getFreeColServer().getGame();
        ServerPlayer player = getFreeColServer().getPlayer(connection);
        Unit unit = (Unit) game.getFreeColGameObject(moveToAmericaElement.getAttribute("unit"));
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        unit.moveToAmerica();
        return null;
    }
,
(startLine=1831 endLine=1841 srcPath=/root/NewExperiment/freecolFilter/00245/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element putOutsideColony(Connection connection, Element putOutsideColonyElement) {
        Game game = getFreeColServer().getGame();
        ServerPlayer player = getFreeColServer().getPlayer(connection);
        Unit unit = (Unit) game.getFreeColGameObject(putOutsideColonyElement.getAttribute("unit"));
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        unit.putOutsideColony();
        sendUpdatedTileToAll(unit.getTile(), player);
        return null;
    }
,
(startLine=1918 endLine=1930 srcPath=/root/NewExperiment/freecolFilter/00245/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element clearSpeciality(Connection connection, Element clearSpecialityElement) {
        Game game = getFreeColServer().getGame();
        ServerPlayer player = getFreeColServer().getPlayer(connection);
        Unit unit = (Unit) game.getFreeColGameObject(clearSpecialityElement.getAttribute("unit"));
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        unit.clearSpeciality();
        if (unit.getLocation() instanceof Tile) {
            sendUpdatedTileToAll(unit.getTile(), player);
        }
        return null;
    }
,
>
, <(startLine=743 endLine=761 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private void abortInvalidAndOneTimeMissions() {
        for (AIUnit au : getAIUnits()) {
            Mission mission = au.getMission();
            if (mission == null) continue;
            if (!mission.isValid()) {
                logger.finest("Abort invalid mission: " + mission
                              + " for: " + au.getUnit());
                au.setMission(null);
            } else if (mission instanceof UnitWanderHostileMission
                       || mission instanceof UnitWanderMission
                       || mission instanceof IdleAtColonyMission
                       // TODO: Mission.isOneTime()
                       ) {
                logger.finest("Abort one-time mission: " + mission
                              + " for: " + au.getUnit());
                au.setMission(null);
            }
        }
    }
,
(startLine=479 endLine=497 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void abortInvalidAndOneTimeMissions() {
        for (AIUnit au : getAIUnits()) {
            Mission mission = au.getMission();
            if (mission == null) continue;
            if (!mission.isValid()) {
                logger.finest("Abort invalid mission: " + mission
                              + " for: " + au.getUnit());
                au.setMission(null);
            } else if (mission instanceof UnitWanderHostileMission
                       || mission instanceof UnitWanderMission
                       || mission instanceof IdleAtColonyMission
                       // TODO: Mission.isOneTime()
                       ) {
                logger.finest("Abort one-time mission: " + mission
                              + " for: " + au.getUnit());
                au.setMission(null);
            }
        }
    }
,
>
, <(startLine=73 endLine=90 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/common/networking/PayForBuildingMessage.java)
                          Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);
        Game game = server.getGame();

        Colony colony;
        if (game.getFreeColGameObject(colonyId) instanceof Colony) {
            colony = (Colony) game.getFreeColGameObject(colonyId);
        } else {
            return DOMMessage.clientError("Not a colony: " + colonyId);
        }
        if (colony.getOwner() != player) {
            return DOMMessage.clientError("Not your colony: " + colonyId);
        }

        // Proceed to pay.
        return server.getInGameController()
            .payForBuilding(serverPlayer, colony);
    }
,
(startLine=83 endLine=101 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/common/networking/SetGoodsLevelsMessage.java)
                          Connection connection) {
        Game game = player.getGame();
        ServerPlayer serverPlayer = server.getPlayer(connection);

        Colony colony;
        if (game.getFreeColGameObject(colonyId) instanceof Colony) {
            colony = (Colony) game.getFreeColGameObject(colonyId);
        } else {
            return DOMMessage.clientError("Not a colony: " + colonyId);
        }
        if (player != colony.getOwner()) {
            return DOMMessage.clientError("Player does not own colony: "
                + colonyId);
        }

        // Proceed to set.
        return server.getInGameController()
            .setGoodsLevels(serverPlayer, colony, data);
    }
,
>
, <(startLine=1084 endLine=1096 srcPath=/root/NewExperiment/freecolFilter/01066/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            if (t instanceof AIUnit) {
                aiu = (AIUnit)t;
                switch (carrier.getNoAddReason(aiu.getUnit())) {
                case NONE: break;
                case CAPACITY_EXCEEDED: return CargoResult.TCONTINUE;
                default: return CargoResult.TRETRY;
                }
                if (!aiu.joinTransport(carrier, null)) {
                    logger.warning(tag + "failed to load " + aiu
                        + " at " + here + ": " + this);
                    return CargoResult.TFAIL;
                }
            } else if (t instanceof AIGoods) {
,
(startLine=1096 endLine=1108 srcPath=/root/NewExperiment/freecolFilter/01066/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            } else if (t instanceof AIGoods) {
                aig = (AIGoods)t;
                switch (carrier.getNoAddReason(aig.getGoods())) {
                case NONE: break;
                case CAPACITY_EXCEEDED: return CargoResult.TCONTINUE;
                default: return CargoResult.TRETRY;
                }
                if (!aig.joinTransport(carrier, null)) {
                    logger.warning(tag + "failed to load " + aig
                        + " at " + here + ": " + this);
                    return CargoResult.TFAIL;
                }
            } else throw new IllegalStateException("Bogus transportable: "+t);
,
>
, <(startLine=345 endLine=357 srcPath=/root/NewExperiment/freecolFilter/00204/src/net/sf/freecol/common/model/Map.java)
					public int compare(PathNode o, PathNode p) {
						int i = o.getF() - p.getF();
						if (i != 0) {
							return i;
						} else {
							i = o.getTile().getX() - p.getTile().getX();
							if (i != 0) {
								return i;
							} else {
								return o.getTile().getY() - p.getTile().getY();
							}
						}
					}
,
(startLine=657 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00204/src/net/sf/freecol/common/model/Map.java)
					public int compare(PathNode o, PathNode p) {
						int i = o.getCost() - p.getCost();
						if (i != 0) {
							return i;
						} else {
							i = o.getTile().getX() - p.getTile().getX();
							if (i != 0) {
								return i;
							} else {
								return o.getTile().getY() - p.getTile().getY();
							}
						}
					}
,
>
, <(startLine=344 endLine=357 srcPath=/root/NewExperiment/freecolFilter/01757/test/src/net/sf/freecol/common/model/ProductionTypeTest.java)
    public void testGrassland() {
        outputs.put(grain, 3);
        outputs.put(tobacco, 3);
        testProduction(inputs, outputs,
                       grassland.getAvailableProductionTypes(true));

        outputs.put(grain, 3);
        outputs.put(tobacco, 3);
        testProduction(inputs, outputs,
                       grassland.getAvailableProductionTypes(false));

        assertEquals(3, grassland.getPotentialProduction(grain, null));
        assertEquals(3, getGenericPotential(grassland, grain));
    }
,
(startLine=485 endLine=498 srcPath=/root/NewExperiment/freecolFilter/01757/test/src/net/sf/freecol/common/model/ProductionTypeTest.java)
    public void testPrairie() {
        outputs.put(grain, 3);
        outputs.put(cotton, 3);
        testProduction(inputs, outputs,
                       prairie.getAvailableProductionTypes(true));

        outputs.put(grain, 3);
        outputs.put(cotton, 3);
        testProduction(inputs, outputs,
                       prairie.getAvailableProductionTypes(false));

        assertEquals(3, prairie.getPotentialProduction(grain, null));
        assertEquals(3, getGenericPotential(prairie, grain));
    }
,
>
, <(startLine=47 endLine=76 srcPath=/root/NewExperiment/freecolFilter/00444/test/src/net/sf/freecol/common/model/DemotionTest.java)
    public void testColonistDemotedBySoldier() throws Exception {

        Game game = getStandardGame();
        CombatModel combatModel = game.getCombatModel();
        Method method = SimpleCombatModel.class.getDeclaredMethod("loseCombat", Unit.class, Unit.class);
        method.setAccessible(true);
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");
        Map map = getTestMap(plains);
        game.setMap(map);
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);

        Unit colonist = new Unit(game, tile1, dutch, colonistType, UnitState.ACTIVE);
        assertTrue(colonist.hasAbility("model.ability.canBeCaptured"));
        Unit soldier = new Unit(game, tile2, french, colonistType, UnitState.ACTIVE);
        assertTrue(soldier.hasAbility("model.ability.canBeCaptured"));
        soldier.equipWith(muskets, true);
        assertFalse(soldier.hasAbility("model.ability.canBeCaptured"));

        method.invoke(combatModel, colonist, soldier);
        assertEquals(colonistType, colonist.getType());
        assertEquals(french, colonist.getOwner());
        assertEquals(tile2, colonist.getTile());

    }
,
(startLine=272 endLine=301 srcPath=/root/NewExperiment/freecolFilter/00444/test/src/net/sf/freecol/common/model/DemotionTest.java)
    public void testArtilleryDemotedBySoldier() throws Exception {

        Game game = getStandardGame();
        CombatModel combatModel = game.getCombatModel();
        Method method = SimpleCombatModel.class.getDeclaredMethod("loseCombat", Unit.class, Unit.class);
        method.setAccessible(true);
        assertEquals(damagedArtilleryType, artilleryType.getDowngrade(DowngradeType.DEMOTION));
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");
        Map map = getTestMap(plains);
        game.setMap(map);
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);

        Unit artillery = new Unit(game, tile1, dutch, artilleryType, UnitState.ACTIVE);
        Unit soldier = new Unit(game, tile2, french, colonistType, UnitState.ACTIVE);
        soldier.equipWith(muskets, true);

        method.invoke(combatModel, artillery, soldier);
        assertEquals(damagedArtilleryType, artillery.getType());
        assertEquals(dutch, artillery.getOwner());
        assertEquals(tile1, artillery.getTile());

        method.invoke(combatModel, artillery, soldier);
        assertTrue(artillery.isDisposed());
    }
,
>
, <(startLine=73 endLine=86 srcPath=/root/NewExperiment/freecolFilter/01292/src/net/sf/freecol/common/networking/UpdateCurrentStopMessage.java)
    public Element handle(FreeColServer server, Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit unit;
        try {
            unit = serverPlayer.getOurFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }

        // Valid, update.
        return server.getInGameController()
            .updateCurrentStop(serverPlayer, unit);
    }
,
(startLine=76 endLine=89 srcPath=/root/NewExperiment/freecolFilter/01292/src/net/sf/freecol/common/networking/DisbandUnitMessage.java)
                          Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit unit;
        try {
            unit = player.getOurFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }

        // Try to clear.
        return server.getInGameController()
            .disbandUnit(serverPlayer, unit);
    }
,
(startLine=76 endLine=89 srcPath=/root/NewExperiment/freecolFilter/01292/src/net/sf/freecol/common/networking/DisembarkMessage.java)
                          Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit unit;
        try {
            unit = player.getOurFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }

        // Do the disembark.
        return server.getInGameController()
            .disembarkUnit(serverPlayer, unit);
    }
,
(startLine=76 endLine=89 srcPath=/root/NewExperiment/freecolFilter/01292/src/net/sf/freecol/common/networking/ClearSpecialityMessage.java)
                          Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit unit;
        try {
            unit = player.getOurFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }

        // Try to clear.
        return server.getInGameController()
            .clearSpeciality(serverPlayer, unit);
    }
,
>
, <(startLine=107 endLine=124 srcPath=/root/NewExperiment/freecolFilter/01708/test/src/net/sf/freecol/common/model/BaseCostDeciderTest.java)
    public void testInvalidMoveOfLandUnitToAnOceanTile() {
        // For this test we need a different map
        Map map = getCoastTestMap(plainsType);
        game.setMap(map);
        
        Tile unitTile = map.getTile(9, 9);
        assertTrue("Unit tile should be land",unitTile.isLand());
        ServerPlayer french = (ServerPlayer)game.getPlayerByNationId("model.nation.french");
        Unit unit = new ServerUnit(game, unitTile, french, pioneerType);
        
        Tile seaTile = map.getTile(10, 9);
        assertFalse("Tile should be ocean",seaTile.isLand());
        
        // Execute
        CostDecider decider = CostDeciders.avoidSettlements();
        int cost = decider.getCost(unit, unitTile, seaTile, 4);
        assertTrue("Move should be invalid", cost == CostDecider.ILLEGAL_MOVE);
    }
,
(startLine=130 endLine=148 srcPath=/root/NewExperiment/freecolFilter/01708/test/src/net/sf/freecol/common/model/BaseCostDeciderTest.java)
    public void testInvalidMoveOfNavalUnitToALandTile() {
        // For this test we need a different map
        Map map = getCoastTestMap(plainsType);
        game.setMap(map);
        
        Tile unitTile = map.getTile(10, 9);
        assertFalse("Unit tile should be ocean", unitTile.isLand());

        ServerPlayer french = (ServerPlayer)game.getPlayerByNationId("model.nation.french");
        Unit unit = new ServerUnit(game, unitTile, french, galleonType);
        
        Tile landTile = map.getTile(9, 9);
        assertTrue("Tile should be land", landTile.isLand());
        
        // Execute
        final CostDecider decider = CostDeciders.avoidSettlements();
        int cost = decider.getCost(unit, unitTile, landTile, 4);
        assertTrue("Move should be invalid", cost == CostDecider.ILLEGAL_MOVE);
    }
,
>
, <(startLine=660 endLine=670 srcPath=/root/NewExperiment/freecolFilter/01194/src/net/sf/freecol/server/control/ChangeSet.java)
        public String toString() {
            StringBuilder sb = new StringBuilder(32);
            sb.append("[").append(getClass().getName())
                .append(" ").append(see.toString())
                .append(" #").append(getPriority())
                .append(" ").append(unit.getId())
                .append(" ").append(((FreeColGameObject)oldLocation).getId())
                .append(" ").append(newTile.getId())
                .append("]");
            return sb.toString();
        }
,
(startLine=1160 endLine=1170 srcPath=/root/NewExperiment/freecolFilter/01194/src/net/sf/freecol/server/control/ChangeSet.java)
        public String toString() {
            StringBuilder sb = new StringBuilder(32);
            sb.append("[").append(getClass().getName())
                .append(" ").append(see.toString())
                .append(" #").append(getPriority())
                .append(" ").append(first.getId())
                .append(" ").append(stance)
                .append(" ").append(second.getId())
                .append("]");
            return sb.toString();
        }
,
>
, <(startLine=2088 endLine=2096 srcPath=/root/NewExperiment/freecolFilter/01300/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiu : aiUnits) {
            logger.log(Level.FINEST, "doMissions(normal): " + aiu);
            if (aiu.getMission() instanceof TransportMission) continue;
            try {
                aiu.doMission();
            } catch (Exception e) {
                logger.log(Level.WARNING, "doMissions failed for: " + aiu, e);
            }
        }
,
(startLine=2097 endLine=2105 srcPath=/root/NewExperiment/freecolFilter/01300/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiu : aiUnits) {
            logger.log(Level.FINEST, "doMissions(transport): " + aiu);
            if (!(aiu.getMission() instanceof TransportMission)) continue;
            try {
                aiu.doMission();
            } catch (Exception e) {
                logger.log(Level.WARNING, "doMissions failed for: " + aiu, e);
            }
        }
,
>
, <(startLine=112 endLine=134 srcPath=/root/NewExperiment/freecolFilter/00361/src/net/sf/freecol/common/model/EuropeanNationType.java)
            throws XMLStreamException {
        setId(in.getAttributeValue(null, "id"));
        ref = getAttribute(in, "ref", false);

        while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
            String childName = in.getLocalName();
            if ("ability".equals(childName)) {
                String abilityId = in.getAttributeValue(null, "id");
                boolean value = getAttribute(in, "value", true);
                addFeature(new Ability(abilityId, value));
                in.nextTag(); // close this element
            } else if (Modifier.getXMLElementTagName().equals(childName)) {
                Modifier modifier = new Modifier(in); // Modifier close the element
                if (modifier.getSource() == null) {
                    modifier.setSource(this.getId());
                }
                addFeature(modifier);
            } else if ("unit".equals(childName)) {
                AbstractUnit unit = new AbstractUnit(in); // AbstractUnit closes element
                startingUnits.add(unit);
            }
        }
    }
,
(startLine=188 endLine=205 srcPath=/root/NewExperiment/freecolFilter/00361/src/net/sf/freecol/common/model/IndianNationType.java)
        while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
            String childName = in.getLocalName();
            if ("ability".equals(childName)) {
                String abilityId = in.getAttributeValue(null, "id");
                boolean value = getAttribute(in, "value", true);
                addFeature(new Ability(abilityId, value));
                in.nextTag(); // close this element
            } else if (Modifier.getXMLElementTagName().equals(childName)) {
                Modifier modifier = new Modifier(in); // Modifier close the element
                if (modifier.getSource() == null) {
                    modifier.setSource(this.getId());
                }
               addFeature(modifier);
            } else if ("skill".equals(childName)) {
                skills.add(in.getAttributeValue(null, "id"));
                in.nextTag(); // close this element
            }
        }
,
>
, <(startLine=513 endLine=557 srcPath=/root/NewExperiment/freecolFilter/00132/src/net/sf/freecol/server/ai/ColonyPlan.java)
    private int getBestGoodsToProduce(Tile t) {
        if (t.isForested() && t.hasBonus()) {
            if (t.getType() == Tile.GRASSLANDS || t.getType() == Tile.SAVANNAH) {
                return Goods.LUMBER;
            } else {
                return Goods.FURS;
            }
        }
        if (t.getAddition() == Tile.ADD_HILLS) {
            return Goods.ORE;
        }
        if (t.getAddition() == Tile.ADD_MOUNTAINS) {
            if (t.hasBonus()) {
                return Goods.SILVER;
            } else {
                return Goods.ORE;
            }
        }
        if (!t.isLand()) {
            return Goods.FOOD;
        }
        if (t.getType() == Tile.DESERT) {
            if (t.hasBonus()) {
                return Goods.FOOD;
            } else {
                return Goods.ORE;
            }
        }
        switch(t.getType()) {
            case Tile.SWAMP:
            case Tile.PLAINS:
            case Tile.TUNDRA:
            case Tile.MARSH:
                return Goods.FOOD;
            case Tile.PRAIRIE:
                return Goods.COTTON;
            case Tile.GRASSLANDS:
                return Goods.TOBACCO;
            case Tile.SAVANNAH:
                return Goods.SUGAR;
            case Tile.ARCTIC:
            default:
                return Goods.ORE;
        }
    }
,
(startLine=812 endLine=856 srcPath=/root/NewExperiment/freecolFilter/00132/src/net/sf/freecol/server/ai/AIColony.java)
    private int getBestGoodsToProduce(Tile t) {
        if (t.isForested()) {
            if (t.getType() == Tile.GRASSLANDS || t.getType() == Tile.SAVANNAH) {
                return Goods.LUMBER;
            } else {
                return Goods.FURS;
            }
        }
        if (t.getAddition() == Tile.ADD_HILLS) {
            return Goods.ORE;
        }
        if (t.getAddition() == Tile.ADD_MOUNTAINS) {
            if (t.hasBonus()) {
                return Goods.SILVER;
            } else {
                return Goods.ORE;
            }
        }
        if (!t.isLand()) {
            return Goods.FOOD;
        }
        if (t.getType() == Tile.DESERT) {
            if (t.hasBonus()) {
                return Goods.FOOD;
            } else {
                return Goods.ORE;
            }
        }
        switch(t.getType()) {
            case Tile.SWAMP:
            case Tile.PLAINS:
                return Goods.FOOD;
            case Tile.PRAIRIE:
                return Goods.COTTON;
            case Tile.GRASSLANDS:
                return Goods.TOBACCO;
            case Tile.SAVANNAH:
                return Goods.SUGAR;
            case Tile.MARSH:
            case Tile.TUNDRA:
            case Tile.ARCTIC:
            default:
                return Goods.ORE;
        }
    }
,
>
, <(startLine=174 endLine=192 srcPath=/root/NewExperiment/freecolFilter/00895/src/net/sf/freecol/server/ai/WorkerWish.java)
        throws XMLStreamException {
        setId(in.getAttributeValue(null, ID_ATTRIBUTE));
        destination = (Location) getAIMain().getFreeColGameObject(in.getAttributeValue(null, "destination"));

        final String transportableStr = in.getAttributeValue(null, "transportable");
        if (transportableStr != null) {
            transportable = (Transportable) getAIMain().getAIObject(transportableStr);
            if (transportable == null) {
                transportable = new AIUnit(getAIMain(), transportableStr);
            }
        } else {
            transportable = null;
        }
        setValue(Integer.parseInt(in.getAttributeValue(null, "value")));

        unitType = getAIMain().getGame().getSpecification().getUnitType(in.getAttributeValue(null, "unitType"));
        expertNeeded = Boolean.valueOf(in.getAttributeValue(null, "expertNeeded")).booleanValue();
        in.nextTag();
    }
,
(startLine=174 endLine=193 srcPath=/root/NewExperiment/freecolFilter/00895/src/net/sf/freecol/server/ai/GoodsWish.java)
        throws XMLStreamException {
        setId(in.getAttributeValue(null, ID_ATTRIBUTE));
        destination = (Location) getAIMain().getFreeColGameObject(in.getAttributeValue(null, "destination"));

        final String transportableStr = in.getAttributeValue(null, "transportable");
        if (transportableStr != null) {
            transportable = (Transportable) getAIMain().getAIObject(transportableStr);
            if (transportable == null) {
                transportable = new AIGoods(getAIMain(), transportableStr);
            }
        } else {
            transportable = null;
        }
        setValue(Integer.parseInt(in.getAttributeValue(null, "value")));

        goodsType = getAIMain().getGame().getSpecification().getGoodsType(in.getAttributeValue(null, "goodsType"));
        amountRequested = getAttribute(in, "amountRequested",
                                       GoodsContainer.CARGO_SIZE);
        in.nextTag();
    }
,
>
, <(startLine=480 endLine=503 srcPath=/root/NewExperiment/freecolFilter/00843/test/src/net/sf/freecol/common/model/BuildingTest.java)
    public void testPrintingPressBonus() {
        Game game = getGame();
        game.setMap(getTestMap(true));

        Colony colony = getStandardColony(6);
        Unit unit = colony.getRandomUnit();
        Building building = colony.getBuilding(spec().getBuildingType("model.building.townHall"));

        int bellProduction = building.getProduction();
        int expectBellProd = 1;
        assertEquals("Wrong initial bell production",expectBellProd,bellProduction);

        Building printingPress = new ServerBuilding(getGame(), colony, printingPressType);
        colony.addBuilding(printingPress);

        bellProduction = building.getProduction();
        expectBellProd = 1;
        assertEquals("Wrong bell production with printing press",expectBellProd,bellProduction);

        building.add(unit);
        bellProduction = building.getProduction();
        expectBellProd = 6; // 1 initial plus 3 from the colonist + 2 from printing press
        assertEquals("Wrong final bell production",expectBellProd,bellProduction);
    }
,
(startLine=505 endLine=528 srcPath=/root/NewExperiment/freecolFilter/00843/test/src/net/sf/freecol/common/model/BuildingTest.java)
    public void testNewspaperBonus() {
        Game game = getGame();
        game.setMap(getTestMap(true));

        Colony colony = getStandardColony(6);
        Unit unit = colony.getRandomUnit();
        Building building = colony.getBuilding(spec().getBuildingType("model.building.townHall"));

        int bellProduction = building.getProduction();
        int expectBellProd = 1;
        assertEquals("Wrong initial bell production",expectBellProd,bellProduction);

        Building newspaper = new ServerBuilding(getGame(), colony, newspaperType);
        colony.addBuilding(newspaper);

        bellProduction = building.getProduction();
        expectBellProd = 2;
        assertEquals("Wrong bell production with newspaper",expectBellProd,bellProduction);

        building.add(unit);
        bellProduction = building.getProduction();
        expectBellProd = 8; // 1 initial plus 3 from the colonist + 4 from newspaper
        assertEquals("Wrong final bell production",expectBellProd,bellProduction);
    }
,
>
, <(startLine=1055 endLine=1082 srcPath=/root/NewExperiment/freecolFilter/00090/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                } else {
                    int mc = newTile.getMoveCost(currentNode.getTile());
                    if (mc - 2 <= movesLeft) {
                        // Normal move: Using -2 in order to make 1/3 and 2/3 move count as 3/3.
                        movesLeft -= mc;
                        if (movesLeft < 0) {
                            mc += movesLeft;
                            movesLeft = 0;
                        }
                        cost += mc;
                    } else if (movesLeft == unit.getInitialMovesLeft()) {
                        // Entering a terrain with a higher move cost, but no moves have been spent yet.
                        cost += movesLeft;
                        movesLeft = 0;
                    } else {
                        // This move takes an extra turn to complete:
                        turns++;
                        if (mc > unit.getInitialMovesLeft()) {
                            // Entering a terrain with a higher move cost than the initial moves:
                            cost += movesLeft + unit.getInitialMovesLeft();
                            movesLeft = 0;
                        } else {
                            // Normal move:
                            cost += movesLeft + mc;
                            movesLeft = unit.getInitialMovesLeft() - mc;
                        }
                    }
                }
,
(startLine=575 endLine=602 srcPath=/root/NewExperiment/freecolFilter/00090/src/net/sf/freecol/common/model/Map.java)
                } else {
                    int mc = newTile.getMoveCost(currentNode.getTile());
                    if (mc - 2 <= movesLeft) {
                        // Normal move: Using -2 in order to make 1/3 and 2/3 move count as 3/3.
                        movesLeft -= mc;
                        if (movesLeft < 0) {
                            mc += movesLeft;
                            movesLeft = 0;
                        }
                        cost += mc;
                    } else if (movesLeft == unit.getInitialMovesLeft()) {
                        // Entering a terrain with a higher move cost, but no moves have been spent yet.
                        cost += movesLeft;
                        movesLeft = 0;
                    } else {
                        // This move takes an extra turn to complete:
                        turns++;
                        if (mc > unit.getInitialMovesLeft()) {
                            // Entering a terrain with a higher move cost than the initial moves:
                            cost += movesLeft + unit.getInitialMovesLeft();
                            movesLeft = 0;
                        } else {
                            // Normal move:
                            cost += movesLeft + mc;
                            movesLeft = unit.getInitialMovesLeft() - mc;
                        }
                    }
                }
,
>
, <(startLine=457 endLine=486 srcPath=/root/NewExperiment/freecolFilter/01434/src/net/sf/freecol/common/debug/DebugUtils.java)
                                       final Colony colony) {
        final FreeColServer server = freeColClient.getFreeColServer();
        final Game sGame = server.getGame();
        final ServerColony sColony = sGame.getFreeColGameObject(colony.getId(),
            ServerColony.class);
        final GUI gui = freeColClient.getGUI();
        final Game game = freeColClient.getGame();

        List<ChoiceItem<Player>> pcs = new ArrayList<>();
        for (Player p : game.getLiveEuropeanPlayers(colony.getOwner())) {
            String msg = Messages.message(p.getNationName());
            pcs.add(new ChoiceItem<>(msg, p));
        }
        Collections.sort(pcs);
        Player player = gui.getChoice(true, null, "Select owner", null,
                                      "cancel", pcs);
        if (player == null) return;

        ServerPlayer sPlayer = sGame.getFreeColGameObject(player.getId(),
                                                          ServerPlayer.class);
        server.getInGameController().debugChangeOwner(sColony, sPlayer);

        Player myPlayer = freeColClient.getMyPlayer();
        if (gui.getActiveUnit() != null
            && gui.getActiveUnit().getOwner() != myPlayer) {
            freeColClient.getInGameController().nextActiveUnit();
        }
        gui.refresh();
        gui.resetMenuBar();
    }
,
(startLine=497 endLine=529 srcPath=/root/NewExperiment/freecolFilter/01434/src/net/sf/freecol/common/debug/DebugUtils.java)
                                       final Unit unit) {
        final FreeColServer server = freeColClient.getFreeColServer();
        final GUI gui = freeColClient.getGUI();
        final Game game = unit.getGame();

        List<ChoiceItem<Player>> pcs = new ArrayList<>();
        for (Player p : game.getLivePlayers(null)) {
            if (unit.getType().isAvailableTo(p)) {
                String msg = Messages.message(p.getNationName());
                pcs.add(new ChoiceItem<>(msg, p));
            }
        }
        Collections.sort(pcs);
        Player player = gui.getChoice(true, null, "Select owner", null,
                                      "cancel", pcs);
        if (player == null || unit.getOwner() == player) return;

        final Game sGame = server.getGame();
        ServerUnit sUnit = sGame.getFreeColGameObject(unit.getId(), 
                                                      ServerUnit.class);
        ServerPlayer sPlayer = sGame.getFreeColGameObject(player.getId(),
                                                          ServerPlayer.class);
        server.getInGameController().debugChangeOwner(sUnit, sPlayer);

        Player myPlayer = freeColClient.getMyPlayer();
        if (unit.getOwner() == myPlayer) {
            gui.setActiveUnit(unit);
        } else {
            freeColClient.getInGameController().nextActiveUnit();
        }
        gui.refresh();
        gui.resetMenuBar();
    }
,
>
, <(startLine=304 endLine=373 srcPath=/root/NewExperiment/freecolFilter/00418/test/src/net/sf/freecol/common/model/CombatTest.java)
    public void testAttackColonyWithVeteran() {

        Game game = getStandardGame();
        Map map = getTestMap();
        Colony colony = getStandardColony(1, 5, 8);

        SimpleCombatModel combatModel = new SimpleCombatModel(game.getModelController().getPseudoRandom());
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.frenchREF");

        dutch.getFeatureContainer().addAbility(new Ability("model.ability.independenceDeclared"));
        assertTrue(french.isREF());

        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);

        Unit colonist = colony.getUnitIterator().next();
        colonist.setType(colonialType);
        assertEquals(colonialType, colonist.getType());

        Unit defender = new Unit(getGame(), colony.getTile(), dutch, veteranType, UnitState.ACTIVE, horses, muskets);
        Unit attacker = new Unit(getGame(), tile2, french, veteranType, UnitState.ACTIVE, horses, muskets);

        // defender should lose horses
        assertEquals(defender, colony.getTile().getDefendingUnit(attacker));
        combatModel.attack(attacker, defender, victory, 0);
        assertTrue(attacker.isMounted());
        assertTrue(attacker.isArmed());
        assertEquals(veteranType, attacker.getType());
        assertFalse(defender.isMounted());
        assertTrue(defender.isArmed());
        assertEquals(veteranType, defender.getType());

        // attacker should lose horses
        assertEquals(defender, colony.getTile().getDefendingUnit(attacker));
        combatModel.attack(attacker, defender, defeat, 0);
        assertFalse(attacker.isMounted());
        assertTrue(attacker.isArmed());
        assertEquals(veteranType, attacker.getType());
        assertFalse(defender.isMounted());
        assertTrue(defender.isArmed());
        assertEquals(veteranType, defender.getType());

        // defender should lose muskets
        assertEquals(defender, colony.getTile().getDefendingUnit(attacker));
        combatModel.attack(attacker, defender, victory, 0);
        assertFalse(attacker.isMounted());
        assertTrue(attacker.isArmed());
        assertEquals(veteranType, attacker.getType());
        assertFalse(defender.isMounted());
        assertFalse(defender.isArmed());
        assertEquals(veteranType, defender.getType());
        // this should force DONE_SETTLEMENT
        assertFalse(defender.isDefensiveUnit());

        combatModel.captureColony(attacker, colony, 0);
        assertFalse(attacker.isMounted());
        assertTrue(attacker.isArmed());
        assertEquals(veteranType, attacker.getType());
        assertFalse(defender.isMounted());
        assertFalse(defender.isArmed());
        assertEquals(colonistType, defender.getType());
        assertEquals(colony.getTile(), attacker.getTile());
        assertEquals(colony.getTile(), defender.getTile());

        assertEquals(attacker.getOwner(), colony.getOwner());
        assertEquals(colonist.getType(), colonistType);

    }
,
(startLine=375 endLine=440 srcPath=/root/NewExperiment/freecolFilter/00418/test/src/net/sf/freecol/common/model/CombatTest.java)
    public void testAttackColonyWithBrave() {

        Game game = getStandardGame();
        Map map = getTestMap();
        Colony colony = getStandardColony(1, 5, 8);

        SimpleCombatModel combatModel = new SimpleCombatModel(game.getModelController().getPseudoRandom());
        Player dutch = game.getPlayer("model.nation.dutch");
        Player inca = game.getPlayer("model.nation.inca");

        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(inca, true);

        Unit colonist = colony.getUnitIterator().next();
        Unit defender = new Unit(getGame(), colony.getTile(), dutch, veteranType, UnitState.ACTIVE, horses, muskets);
        Unit attacker = new Unit(getGame(), tile2, inca, braveType, UnitState.ACTIVE, horses, muskets);

        // defender should lose horses
        assertEquals(defender, colony.getTile().getDefendingUnit(attacker));
        combatModel.attack(attacker, defender, victory, 0);
        assertEquals(1, colony.getUnitCount());
        assertTrue(attacker.isMounted());
        assertTrue(attacker.isArmed());
        assertEquals(braveType, attacker.getType());
        assertFalse(defender.isMounted());
        assertTrue(defender.isArmed());
        assertEquals(veteranType, defender.getType());
        assertTrue(defender.isDefensiveUnit());

        // attacker should lose horses
        assertEquals(defender, colony.getTile().getDefendingUnit(attacker));
        combatModel.attack(attacker, defender, defeat, 0);
        assertEquals(1, colony.getUnitCount());
        assertFalse(attacker.isMounted());
        assertTrue(attacker.isArmed());
        assertEquals(braveType, attacker.getType());
        assertFalse(defender.isMounted());
        assertTrue(defender.isArmed());
        assertEquals(veteranType, defender.getType());
        assertTrue(defender.isDefensiveUnit());

        // defender should lose muskets
        assertEquals(defender, colony.getTile().getDefendingUnit(attacker));
        combatModel.attack(attacker, defender, victory, 0);
        assertEquals(1, colony.getUnitCount());
        assertFalse(attacker.isMounted());
        assertTrue(attacker.isArmed());
        assertEquals(braveType, attacker.getType());
        assertFalse(defender.isMounted());
        assertFalse(defender.isArmed());
        assertEquals(veteranType, defender.getType());
        // this should force DONE_SETTLEMENT
        assertFalse(defender.isDefensiveUnit());

        // colony should be destroyed
        combatModel.captureColony(attacker, colony, 0);
        assertFalse(attacker.isMounted());
        assertTrue(attacker.isArmed());
        assertEquals(braveType, attacker.getType());
        assertFalse(defender.isDisposed());
        assertTrue(colonist.isDisposed());
        assertTrue(colony.isDisposed());
        assertEquals(colony.getTile(), attacker.getTile());

    }
,
>
, <(startLine=198 endLine=215 srcPath=/root/NewExperiment/freecolFilter/01376/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
        for (final Unit unit : loc.getUnitList()) {
            if (unit.isCarrier() && unit.canCarryGoods()
                && unit.canAdd(goods)) {
                StringTemplate template = StringTemplate.template("loadOnTo")
                    .addStringTemplate("%unit%", unit.getFullLabel(false));
                JMenuItem menuItem = new JMenuItem(Messages.message(template));
                menuItem.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0) {
                                promptForGoods(goods);
                            }
                            igc.loadCargo(goods, unit);
                        }
                    });
                this.add(menuItem);
                added = true;
            }
        }
,
(startLine=224 endLine=241 srcPath=/root/NewExperiment/freecolFilter/01376/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
        for (final Unit unit : europe.getUnitList()) {
            if (unit.isCarrier() && unit.canCarryGoods()
                && unit.canAdd(goods)) {
                StringTemplate template = StringTemplate.template("loadOnTo")
                    .addStringTemplate("%unit%", unit.getFullLabel(false));
                JMenuItem menuItem = new JMenuItem(Messages.message(template));
                menuItem.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0) {
                                promptForGoods(ag);
                            }
                            igc.buyGoods(ag.getType(), ag.getAmount(), unit);
                        }
                    });
                this.add(menuItem);
                added = true;
            }
        }
,
>
, <(startLine=119 endLine=128 srcPath=/root/NewExperiment/freecolFilter/00632/test/src/net/sf/freecol/server/generator/MapGeneratorTest.java)
        for (Nation n : FreeCol.getSpecification().getNations()) {
            Player p;
            if (n.getType().isEuropean() && !n.getType().isREF()){
                p = new Player(g, n.getType().getNameKey(), false, n);
            } else {
                p = new Player(g, n.getType().getNameKey(), false, true, n);
            }
            g.addPlayer(p);
            players.add(p);
        }
,
(startLine=176 endLine=185 srcPath=/root/NewExperiment/freecolFilter/00632/test/src/net/sf/freecol/server/generator/MapGeneratorTest.java)
        for (Nation n : FreeCol.getSpecification().getNations()) {
            Player p;
            if (n.getType().isEuropean() && !n.getType().isREF()){
                p = new Player(g, n.getType().getNameKey(), false, n);
            } else {
                p = new Player(g, n.getType().getNameKey(), false, true, n);
            }
            g.addPlayer(p);
            players.add(p);
        }
,
(startLine=131 endLine=139 srcPath=/root/NewExperiment/freecolFilter/00632/test/src/net/sf/freecol/util/test/FreeColTestCase.java)
        for (Nation n : FreeCol.getSpecification().getNations()) {
            Player p;
            if (n.getType().isEuropean() && !n.getType().isREF()){
                p = new Player(game, n.getRulerNameKey(), false, n);
            } else {
                p = new Player(game, n.getRulerNameKey(), false, true, n);
            }
            game.addPlayer(p);
        }
,
(startLine=59 endLine=68 srcPath=/root/NewExperiment/freecolFilter/00632/test/src/net/sf/freecol/common/model/GameTest.java)
            } else {
                Player p;
                if (n.getType().isEuropean() && !n.getType().isREF()) {
                    p = new Player(game, n.getType().getNameKey(), false, n);
                } else {
                    p = new Player(game, n.getType().getNameKey(), false, true, n);
                }
                game.addPlayer(p);
                players.add(p);
            }
,
>
, <(startLine=269 endLine=280 srcPath=/root/NewExperiment/freecolFilter/00705/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
            while(goodsInAgreement.hasNext()){
                Goods goods = goodsInAgreement.next();
                for(int i=0;i<goodsAvail.size();i++){
                    Goods goodAvail = goodsAvail.get(i);
                    if(goodAvail.getType() == goods.getType() &&
                       goodAvail.getAmount() == goods.getAmount()){
                        // this good is already on the agreement, remove it
                        goodsAvail.remove(i);
                        break;
                    }
                }
            }
,
(startLine=311 endLine=322 srcPath=/root/NewExperiment/freecolFilter/00705/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
            while(goodsInAgreement.hasNext()){
                Goods goods = goodsInAgreement.next();
                for(int i=0;i<goodsAvail.size();i++){
                    Goods goodAvail = goodsAvail.get(i);
                    if(goodAvail.getType() == goods.getType() &&
                       goodAvail.getAmount() == goods.getAmount()){
                        // this good is already on the agreement, remove it
                        goodsAvail.remove(i);
                        break;
                    }
                }
            }
,
>
, <(startLine=474 endLine=486 srcPath=/root/NewExperiment/freecolFilter/00973/src/net/sf/freecol/common/model/ColonyTile.java)
        } else if (workTile.isLand() || getColony().hasAbility(Ability.PRODUCE_IN_WATER)) {
            Set<Modifier> modifiers = workTile.getProductionBonus(goodsType, unit.getType());
            if (FeatureContainer.applyModifierSet(0f, getGame().getTurn(), modifiers) > 0) {
                modifiers.addAll(unit.getModifierSet(goodsType.getId()));
                modifiers.add(getColony().getProductionModifier(goodsType));
                modifiers.addAll(getColony().getModifierSet(goodsType.getId()));
                List<Modifier> modifierList = new ArrayList<Modifier>(modifiers);
                Collections.sort(modifierList);
                return Math.max(1, (int) FeatureContainer.applyModifiers(0, getGame().getTurn(), modifierList));
            } else {
                return 0;
            }
        } else {
,
(startLine=512 endLine=527 srcPath=/root/NewExperiment/freecolFilter/00973/src/net/sf/freecol/common/model/ColonyTile.java)
            || getColony().hasAbility(Ability.PRODUCE_IN_WATER)) {
            Set<Modifier> modifiers = workTile.getProductionBonus(goodsType,
                                                                  unitType);
            if (FeatureContainer.applyModifierSet(0f, getGame().getTurn(),
                    modifiers) > 0) {
                if (unitType != null) {
                    modifiers.addAll(unitType.getModifierSet(goodsType.getId()));
                }
                modifiers.add(getColony().getProductionModifier(goodsType));
                modifiers.addAll(getColony().getModifierSet(goodsType.getId()));
                List<Modifier> modifierList = new ArrayList<Modifier>(modifiers);
                Collections.sort(modifierList);
                production = Math.max((int) FeatureContainer.applyModifiers(0,
                        getGame().getTurn(), modifierList), 1);
            }
        }
,
>
, <(startLine=198 endLine=208 srcPath=/root/NewExperiment/freecolFilter/01414/src/net/sf/freecol/client/gui/panel/DiplomaticTradeDialog.java)
        public void actionPerformed(ActionEvent event) {
            final String command = event.getActionCommand();
            if (ADD.equals(command)) {
                DiplomaticTradeDialog.this.addColonyTradeItem(source,
                    (Colony)colonyBox.getSelectedItem());
            } else if (CLEAR.equals(command)) {
                DiplomaticTradeDialog.this.removeTradeItems(ColonyTradeItem.class);
            } else {
                logger.warning("Bad command: " + command);
            }
        }
,
(startLine=397 endLine=407 srcPath=/root/NewExperiment/freecolFilter/01414/src/net/sf/freecol/client/gui/panel/DiplomaticTradeDialog.java)
        public void actionPerformed(ActionEvent event) {
            final String command = event.getActionCommand();
            if (ADD.equals(command)) {
                DiplomaticTradeDialog.this.addGoodsTradeItem(source,
                    (Goods)goodsBox.getSelectedItem());
            } else if (CLEAR.equals(command)) {
                DiplomaticTradeDialog.this.removeTradeItems(GoodsTradeItem.class);
            } else {
                logger.warning("Bad command: " + command);
            }
        }
,
(startLine=751 endLine=761 srcPath=/root/NewExperiment/freecolFilter/01414/src/net/sf/freecol/client/gui/panel/DiplomaticTradeDialog.java)
        public void actionPerformed(ActionEvent event) {
            final String command = event.getActionCommand();
            if (ADD.equals(command)) {
                DiplomaticTradeDialog.this.addUnitTradeItem(source,
                    (Unit)unitBox.getSelectedItem());
            } else if (CLEAR.equals(command)) {
                DiplomaticTradeDialog.this.removeTradeItems(UnitTradeItem.class);
            } else {
                logger.warning("Bad command: " + command);
            }
        }
,
>
, <(startLine=935 endLine=972 srcPath=/root/NewExperiment/freecolFilter/00159/src/net/sf/freecol/client/gui/panel/EuropePanel.java)
                } else if (comp instanceof GoodsLabel) {
                    Goods g = ((GoodsLabel)comp).getGoods();

                    Unit carrier = getSelectedUnit();
                    int newAmount = g.getAmount();
                    if (carrier.getSpaceLeft() == 0 && carrier.getGoodsContainer().getGoodsCount(g.getType()) % 100 + g.getAmount() > 100) {
                        newAmount = 100 - carrier.getGoodsContainer().getGoodsCount(g.getType()) % 100;
                    } else if (g.getAmount() > 100) {
                        newAmount = 100;
                    }

                    if (newAmount == 0) {
                        return null;
                    }

                    if (g.getAmount() != newAmount) {
                        g.setAmount(g.getAmount() - newAmount);
                        g = new Goods(game, g.getLocation(), g.getType(), newAmount);
                    } else {
                        if (oldParent != null) {
                            oldParent.remove(comp);
                        }
                    }
                    
                    if (!selectedUnit.getUnit().canAdd(g)) {
                        return null;
                    }

                    inGameController.loadCargo(g, selectedUnit.getUnit());

                    // TODO: Make this look prettier :-)
                    UnitLabel t = selectedUnit;
                    selectedUnit = null;
                    setSelectedUnitLabel(t);
                    //reinitialize();

                    return comp;
                } else if (comp instanceof MarketLabel) {
,
(startLine=1347 endLine=1385 srcPath=/root/NewExperiment/freecolFilter/00159/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
                } else if (comp instanceof GoodsLabel) {
                    Goods g = ((GoodsLabel)comp).getGoods();

                    Unit carrier = getSelectedUnit();
                    int newAmount = g.getAmount();
                    if (carrier.getSpaceLeft() == 0 && carrier.getGoodsContainer().getGoodsCount(g.getType()) % 100 + g.getAmount() > 100) {
                        newAmount = 100 - carrier.getGoodsContainer().getGoodsCount(g.getType()) % 100;
                    } else if (g.getAmount() > 100) {
                        newAmount = 100;
                    }

                    if (newAmount == 0) {
                        return null;
                    }

                    if (g.getAmount() != newAmount) {
                        g.setAmount(g.getAmount() - newAmount);
                        g = new Goods(game, g.getLocation(), g.getType(), newAmount);
                    } else {
                        if (oldParent != null) {
                            oldParent.remove(comp);
                        }
                    }

                    if (!selectedUnit.getUnit().canAdd(g)) {
                        if (oldParent != null) {
                            oldParent.add(comp);
                        }
                        return null;
                    }

                    ((GoodsLabel) comp).setSmall(false);
                    inGameController.loadCargo(g, selectedUnit.getUnit());
                    colonyPanel.getWarehousePanel().revalidate();

                    reinitialize();

                    return comp;
                } else {
,
>
, <(startLine=709 endLine=734 srcPath=/root/NewExperiment/freecolFilter/00717/src/net/sf/freecol/server/FreeColServer.java)
                } else if (xsr.getLocalName().equals(Game.getXMLElementTagName())) {
                    // Read the game model:
                    Specification specification = null;
                    if (savegameVersion < 9) {
                        logger.info("Compatibility code: providing fresh specification.");
                        specification = new FreeColTcFile("freecol").getSpecification();
                    }
                    game = new ServerGame(null, getModelController(), xsr, serverObjects
                                          .toArray(new FreeColGameObject[0]), specification);
                    if (savegameVersion < 9) {
                        logger.info("Compatibility code: applying difficulty level.");
                        // Apply the difficulty level
                        if (game.getDifficultyLevel() == null) {
                            logger.fine("Difficulty level is null");
                            DifficultyLevel level = game.getSpecification().getDifficultyLevel("model.difficulty.medium");
                            game.getSpecification().applyDifficultyLevel(level);
                            game.setDifficultyLevel(level);
                        } else {
                            logger.fine("Difficulty level is " + game.getDifficultyLevel().getId());
                            game.getSpecification().applyDifficultyLevel(game.getDifficultyLevel());
                        }
                    }
                    game.setCurrentPlayer(null);
                    gameState = GameState.IN_GAME;
                    integrity = game.checkIntegrity();
                } else if (xsr.getLocalName().equals(AIMain.getXMLElementTagName())) {
,
(startLine=185 endLine=208 srcPath=/root/NewExperiment/freecolFilter/00717/src/net/sf/freecol/server/generator/MapGenerator.java)
                } else if (xsr.getLocalName().equals(Game.getXMLElementTagName())) {
                    // Read the game model:
                    Specification specification = null;
                    if (savegameVersion < 9) {
                        // compatibility code
                        logger.info("Compatibility code: providing fresh specification.");
                        specification = new FreeColTcFile("freecol").getSpecification();
                    }
                    game = new ServerGame(null, null, xsr, serverObjects
                                          .toArray(new FreeColGameObject[serverObjects.size()]), specification);
                    if (savegameVersion < 9) {
                        logger.info("Compatibility code: applying difficulty level.");
                        // Apply the difficulty level
                        if (game.getDifficultyLevel() == null) {
                            logger.fine("Difficulty level is null");
                            game.getSpecification().applyDifficultyLevel("model.difficulty.medium");
                        } else {
                            logger.fine("Difficulty level is " + game.getDifficultyLevel().getId());
                            game.getSpecification().applyDifficultyLevel(game.getDifficultyLevel());
                        }
                    }
                    game.setCurrentPlayer(null);
                    game.checkIntegrity();
                }
,
>
, <(startLine=580 endLine=590 srcPath=/root/NewExperiment/freecolFilter/01154/src/net/sf/freecol/common/model/TileImprovementType.java)
        } else if (DISASTER_TAG.equals(tag)) {
            Disaster disaster = spec.getType(in, ID_ATTRIBUTE_TAG,
                                             Disaster.class, (Disaster)null);
            int probability = getAttribute(in, PROBABILITY_TAG, 100);
            if (disasters == null) {
                disasters = new ArrayList<RandomChoice<Disaster>>();
            }
            disasters.add(new RandomChoice<Disaster>(disaster, probability));
            closeTag(in, DISASTER_TAG);

        } else if (WORKER_TAG.equals(tag)) {
,
(startLine=577 endLine=587 srcPath=/root/NewExperiment/freecolFilter/01154/src/net/sf/freecol/common/model/TileType.java)
        if (DISASTER_TAG.equals(tag)) {
            Disaster disaster = spec.getType(in, ID_ATTRIBUTE_TAG,
                                             Disaster.class, (Disaster)null);
            int probability = getAttribute(in, PROBABILITY_TAG, 100);
            if (disasters == null) {
                disasters = new ArrayList<RandomChoice<Disaster>>();
            }
            disasters.add(new RandomChoice<Disaster>(disaster, probability));
            closeTag(in, DISASTER_TAG);

        } else if (GEN_TAG.equals(tag)) {
,
>
, <(startLine=196 endLine=223 srcPath=/root/NewExperiment/freecolFilter/00074/src/net/sf/freecol/server/ai/mission/Mission.java)
                } else {
                    int mc = currentNode.getTile().getMoveCost(newTile);
                    // Normal move: Using -2 in order to make 1/3 and 2/3 move count as 3/3.
                    if (mc - 2 <= movesLeft) {
                        movesLeft -= mc;
                        if (movesLeft < 0) {
                            mc += movesLeft;
                            movesLeft = 0;
                        }
                        cost += mc;
                    } else if (movesLeft == unit.getInitialMovesLeft()) {
                        // Entering a terrain with a higher move cost, but no moves have been spent yet.
                        cost += movesLeft;
                        movesLeft = 0;
                    } else {
                        // This move takes an extra turn to complete:
                        turns++;
                        if (mc > unit.getInitialMovesLeft()) {
                            // Entering a terrain with a higher move cost than the initial moves:
                            cost += movesLeft + unit.getInitialMovesLeft();
                            movesLeft = 0;
                        } else {
                            // Normal move:
                            cost += movesLeft + mc;
                            movesLeft = unit.getInitialMovesLeft() - mc;
                        }
                    }
                }
,
(startLine=274 endLine=301 srcPath=/root/NewExperiment/freecolFilter/00074/src/net/sf/freecol/common/model/Map.java)
                    } else {
                        int mc = currentNode.getTile().getMoveCost(newTile);
                        // Normal move: Using -2 in order to make 1/3 and 2/3 move count as 3/3.
                        if (mc - 2 <= movesLeft) {
                            movesLeft -= mc;
                            if (movesLeft < 0) {
                                mc += movesLeft;
                                movesLeft = 0;
                            }
                            cost += mc;
                        } else if (movesLeft == unit.getInitialMovesLeft()) {
                            // Entering a terrain with a higher move cost, but no moves have been spent yet.
                            cost += movesLeft;
                            movesLeft = 0;
                        } else {
                            // This move takes an extra turn to complete:
                            turns++;
                            if (mc > unit.getInitialMovesLeft()) {
                                // Entering a terrain with a higher move cost than the initial moves:
                                cost += movesLeft + unit.getInitialMovesLeft();
                                movesLeft = 0;
                            } else {
                                // Normal move:
                                cost += movesLeft + mc;
                                movesLeft = unit.getInitialMovesLeft() - mc;
                            }
                        }
                    }
,
>
, <(startLine=3286 endLine=3293 srcPath=/root/NewExperiment/freecolFilter/00071/src/net/sf/freecol/common/model/Unit.java)
            } else {
                UnitContainer emptyUnitContainer = new UnitContainer(getGame(), this);
                emptyUnitContainer.setID(unitContainer.getID());
                unitElement.appendChild(emptyUnitContainer.toXMLElement(player, document, showAll, toSavedGame));
                GoodsContainer emptyGoodsContainer = new GoodsContainer(getGame(), this);
                emptyGoodsContainer.setID(unitContainer.getID());
                unitElement.appendChild(emptyGoodsContainer.toXMLElement(player, document, showAll, toSavedGame));
            }
,
(startLine=830 endLine=838 srcPath=/root/NewExperiment/freecolFilter/00071/src/net/sf/freecol/common/model/IndianSettlement.java)
        } else {
            UnitContainer emptyUnitContainer = new UnitContainer(getGame(), this);
            emptyUnitContainer.setFakeID(unitContainer.getID());
            indianSettlementElement.appendChild(emptyUnitContainer.toXMLElement(player, document, showAll, toSavedGame));

            GoodsContainer emptyGoodsContainer = new GoodsContainer(getGame(), this);
            emptyGoodsContainer.setFakeID(goodsContainer.getID());
            indianSettlementElement.appendChild(emptyGoodsContainer.toXMLElement(player, document, showAll, toSavedGame));
        }
,
>
, <(startLine=192 endLine=213 srcPath=/root/NewExperiment/freecolFilter/01378/src/net/sf/freecol/client/gui/panel/OptionsDialog.java)
        try {
            xr = new FreeColXMLReader(new FileInputStream(file));
            xr.nextTag();
            // TODO: read into group rather than specification
            OptionGroup group = new OptionGroup(getSpecification());
            group.readFromXML(xr);
            String expect = getOptionGroupId();
            if (!expect.equals(group.getId())) {
                try {
                    group = group.getOptionGroup(expect);
                } catch (Exception e) {
                    logger.log(Level.WARNING, "Options file " + file.getPath()
                        + " does not contain expected group " + expect, e);
                }
            }
            if (group != null) {
                getSpecification().getOptionGroup(expect).setValue(group);
                logger.info("Loaded options from file " + file.getPath());
                reset(group);
                ret = true;
            }
        } catch (Exception e) {
,
(startLine=437 endLine=456 srcPath=/root/NewExperiment/freecolFilter/01378/src/net/sf/freecol/common/model/Specification.java)
        try {
            xr = new FreeColXMLReader(new FileInputStream(file));
            xr.nextTag();
            group = new OptionGroup(this);
            group.readFromXML(xr);
            if (!optionId.equals(group.getId())) {
                try {
                    group = group.getOptionGroup(optionId);
                } catch (Exception e) {
                    logger.log(Level.WARNING, "Options file " + file.getPath()
                        + " does not contain expected group " + optionId, e);
                    group = null;
                }
            }
            if (group != null) {
                getOptionGroup(optionId).setValue(group);
                logger.info("Loaded " + optionId + " options from file "
                    + file.getPath());
            }
        } catch (Exception e) {
,
>
, <(startLine=1917 endLine=1928 srcPath=/root/NewExperiment/freecolFilter/01025/src/net/sf/freecol/client/gui/MapViewer.java)
                if (temp.getTurns() == 0) {
                    g.setColor(Color.GREEN);
                    image = lib.getPathImage(activeUnit);
                    if (activeUnit != null
                            && tile.isExplored()
                            && activeUnit.isNaval()
                            && tile.isLand()
                            && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {
                        image = lib.getPathImage(activeUnit.getFirstUnit());
                    }
                    textColor = Color.BLACK;
                } else {
,
(startLine=1928 endLine=1939 srcPath=/root/NewExperiment/freecolFilter/01025/src/net/sf/freecol/client/gui/MapViewer.java)
                } else {
                    g.setColor(Color.RED);
                    image = lib.getPathNextTurnImage(activeUnit);
                    if (activeUnit != null
                            && tile.isExplored()
                            && activeUnit.isNaval()
                            && tile.isLand()
                            && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {
                        image = lib.getPathNextTurnImage(activeUnit.getFirstUnit());
                    }
                    textColor = Color.WHITE;
                }
,
>
, <(startLine=276 endLine=292 srcPath=/root/NewExperiment/freecolFilter/01371/src/net/sf/freecol/server/generator/LandGenerator.java)
    private void addPolarRegions() {
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < Map.POLAR_HEIGHT; y++) {
                if (map[x][y] == false) {
                    map[x][y] = true;
                    numberOfLandTiles++;
                }
            }
            int limit = height - 1 - Map.POLAR_HEIGHT;
            for (int y = limit; y < height; y++) {
                if (map[x][y] == false) {
                    map[x][y] = true;
                    numberOfLandTiles++;
                }
            }
        }
    }
,
(startLine=251 endLine=267 srcPath=/root/NewExperiment/freecolFilter/01371/src/net/sf/freecol/common/model/LandMap.java)
    private void addPolarRegions() {
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < Map.POLAR_HEIGHT; y++) {
                if (!map[x][y]) {
                    map[x][y] = true;
                    numberOfLandTiles++;
                }
            }
            int limit = height - 1 - Map.POLAR_HEIGHT;
            for (int y = limit; y < height; y++) {
                if (!map[x][y]) {
                    map[x][y] = true;
                    numberOfLandTiles++;
                }
            }
        }
    }
,
>
, <(startLine=104 endLine=113 srcPath=/root/NewExperiment/freecolFilter/01363/src/net/sf/freecol/server/ai/mission/CashInTreasureTrainMission.java)
    public static Location extractTarget(AIUnit aiUnit, PathNode path) {
        if (path == null) return null;
        final Location loc = path.getLastNode().getLocation();
        Colony colony = loc.getColony();
        return (loc instanceof Europe
            && invalidReason(aiUnit, loc) == null) ? loc
            : (colony != null
                && invalidReason(aiUnit, colony) == null) ? colony
            : null;
    }
,
(startLine=133 endLine=141 srcPath=/root/NewExperiment/freecolFilter/01363/src/net/sf/freecol/server/ai/mission/BuildColonyMission.java)
    public static Location extractTarget(AIUnit aiUnit, PathNode path) {
        if (path == null) return null;
        final Location loc = path.getLastNode().getLocation();
        Tile tile = loc.getTile();
        Colony colony = loc.getColony();
        return (invalidReason(aiUnit, tile) == null) ? tile
            : (invalidReason(aiUnit, colony) == null) ? colony
            : null;
    }
,
>
, <(startLine=80 endLine=93 srcPath=/root/NewExperiment/freecolFilter/00914/src/net/sf/freecol/client/gui/panel/ConceptDetailPanel.java)
    public void buildDetail(String id, JPanel panel) {
        if (this.id.equals(id)) {
            return;
        }

        panel.setLayout(new MigLayout("wrap 1"));

        JLabel header = localizedLabel(id + ".name");
        header.setFont(smallHeaderFont);
        panel.add(header, "align center, wrap 20");

        panel.add(getDefaultTextArea(Messages.message(id + ".description"), 40));

    }
,
(startLine=98 endLine=106 srcPath=/root/NewExperiment/freecolFilter/00914/src/net/sf/freecol/client/gui/panel/FatherDetailPanel.java)
        if (getId().equals(id)) {
            panel.setLayout(new MigLayout("wrap 1"));
            JLabel header = localizedLabel(id + ".name");
            header.setFont(smallHeaderFont);
            panel.add(header, "align center, wrap 20");

            panel.add(getDefaultTextArea(Messages.message("colopedia.foundingFather.description"), 40));
            return;
        }
,
>
, <(startLine=179 endLine=191 srcPath=/root/NewExperiment/freecolFilter/01501/test/src/net/sf/freecol/common/model/SerializationTest.java)
        try {
            spec1 = new FreeColTcFile("classic").getSpecification();
            spec1.applyDifficultyLevel("model.difficulty.veryEasy");
            StringWriter sw = new StringWriter();
            FreeColXMLWriter xw = new FreeColXMLWriter(sw,
                FreeColXMLWriter.WriteScope.toSave());

            spec1.toXML(xw);

            xw.close();

            spec2 = new Specification(new ByteArrayInputStream(sw.toString().getBytes()));
        } catch (Exception e) {
,
(startLine=216 endLine=228 srcPath=/root/NewExperiment/freecolFilter/01501/test/src/net/sf/freecol/common/model/SerializationTest.java)
        try {
            spec1 = new FreeColTcFile("classic").getSpecification();
            spec1.applyDifficultyLevel("model.difficulty.veryEasy");
            StringWriter sw = new StringWriter();
            FreeColXMLWriter xw = new FreeColXMLWriter(sw,
                FreeColXMLWriter.WriteScope.toSave());

            spec1.toXML(xw);

            xw.close();

            spec2 = new Specification(new ByteArrayInputStream(sw.toString().getBytes()));
        } catch (Exception e) {
,
>
, <(startLine=1650 endLine=1658 srcPath=/root/NewExperiment/freecolFilter/01270/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private Mission getBuildColonyMission(AIUnit aiUnit) {
        String reason = BuildColonyMission.invalidReason(aiUnit);
        if (reason != null) return null;
        final Unit unit = aiUnit.getUnit();
        Location loc = BuildColonyMission.findTarget(aiUnit, buildingRange,
                                                     unit.isInEurope());
        return (loc == null) ? null
            : new BuildColonyMission(getAIMain(), aiUnit, loc);
    }
,
(startLine=1666 endLine=1674 srcPath=/root/NewExperiment/freecolFilter/01270/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private Mission getCashInTreasureTrainMission(AIUnit aiUnit) {
        String reason = CashInTreasureTrainMission.invalidReason(aiUnit);
        if (reason != null) return null;
        final Unit unit = aiUnit.getUnit();
        Location loc = CashInTreasureTrainMission.findTarget(aiUnit,
            cashInRange, unit.isInEurope());
        return (loc == null) ? null
            : new CashInTreasureTrainMission(getAIMain(), aiUnit, loc);
    }
,
>
, <(startLine=3202 endLine=3220 srcPath=/root/NewExperiment/freecolFilter/00255/src/net/sf/freecol/common/model/Unit.java)
            if (defender != null && defender.getTile() != null && defender.getTile().getSettlement() == null) {

                /**
                 * Ambush bonus in the open = defender's defense bonus, if
                 * defender is REF, or attacker is Brave.
                 */
                if (attacker.getType() == Unit.BRAVE || defender.getOwner().isREF()) {
                    percentage = defender.getTile().defenseBonus();
                    result.add(new Modifier("modifiers.ambushBonus", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }

                // 75% Artillery in the open penalty
                if (attacker.getType() == Unit.ARTILLERY || attacker.getType() == Unit.DAMAGED_ARTILLERY) {
                    percentage = -75;
                    result.add(new Modifier("modifiers.artilleryPenalty", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
            }
,
(startLine=3329 endLine=3344 srcPath=/root/NewExperiment/freecolFilter/00255/src/net/sf/freecol/common/model/Unit.java)
            } else if (defender.getTile() != null) {
                // In the open
                if (attacker.getType() != Unit.BRAVE && !defender.getOwner().isREF()) {
                    // Terrain defensive bonus.
                    percentage = defender.getTile().defenseBonus();
                    result.add(new Modifier("modifiers.terrainBonus", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
                if ((defender.getType() == Unit.ARTILLERY || defender.getType() == Unit.DAMAGED_ARTILLERY)
                        && defender.getState() != Unit.FORTIFIED) {
                    // -75% Artillery in the Open penalty
                    percentage = -75;
                    result.add(new Modifier("modifiers.artilleryPenalty", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
            }
,
>
, <(startLine=612 endLine=622 srcPath=/root/NewExperiment/freecolFilter/01347/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
,
(startLine=631 endLine=641 srcPath=/root/NewExperiment/freecolFilter/01347/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
,
>
, <(startLine=353 endLine=366 srcPath=/root/NewExperiment/freecolFilter/01469/src/net/sf/freecol/server/model/ServerRegion.java)
        if (arctic == null) {
            arctic = new ServerRegion(game,
                "model.region.arctic", RegionType.LAND, null);
            arctic.setPrediscovered(true);
            map.putRegion(arctic);
            for (int x = 0; x < map.getWidth(); x++) {
                for (int y = 0; y < arcticHeight; y++) {
                    if (map.isValid(x, y)) {
                        Tile tile = map.getTile(x, y);
                        if (tile.isLand()) arctic.addTile(tile);
                    }
                }
            }
        }
,
(startLine=369 endLine=382 srcPath=/root/NewExperiment/freecolFilter/01469/src/net/sf/freecol/server/model/ServerRegion.java)
        if (antarctic == null) {
            antarctic = new ServerRegion(game,
                "model.region.antarctic", RegionType.LAND, null);
            antarctic.setPrediscovered(true);
            map.putRegion(antarctic);
            for (int x = 0; x < map.getWidth(); x++) {
                for (int y = antarcticHeight; y < map.getHeight(); y++) {
                    if (map.isValid(x, y)) {
                        Tile tile = map.getTile(x, y);
                        if (tile.isLand()) antarctic.addTile(tile);
                    }
                }
            }
        }
,
>
, <(startLine=564 endLine=572 srcPath=/root/NewExperiment/freecolFilter/00001/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            if (editState) {
                if (comp instanceof UnitLabel) {
                    Unit unit = ((UnitLabel)comp).getUnit();
                    ((UnitLabel) comp).setSmall(false);
                    inGameController.boardShip(unit, selectedUnit.getUnit());
                } else {
                    logger.warning("An invalid component got dropped on this CargoPanel.");
                }
            }
,
(startLine=684 endLine=693 srcPath=/root/NewExperiment/freecolFilter/00001/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
                if (editState) {
                    if (comp instanceof UnitLabel) {
                        Unit unit = ((UnitLabel)comp).getUnit();
                        inGameController.work(unit, colonyTile);

                        ((UnitLabel) comp).setSmall(false);
                    } else {
                        logger.warning("An invalid component got dropped on this CargoPanel.");
                    }
                }
,
>
, <(startLine=149 endLine=157 srcPath=/root/NewExperiment/freecolFilter/00615/src/net/sf/freecol/common/networking/SellPropositionMessage.java)
    public Element toXMLElement() {
        Element result = createNewRootElement(getXMLElementTagName());
        Document doc = result.getOwnerDocument();
        result.setAttribute("unit", unitId);
        result.setAttribute("settlement", settlementId);
        result.setAttribute("gold", Integer.toString(gold));
        result.appendChild(goods.toXMLElement(null, doc));
        return result;
    }
,
(startLine=150 endLine=158 srcPath=/root/NewExperiment/freecolFilter/00615/src/net/sf/freecol/common/networking/BuyPropositionMessage.java)
    public Element toXMLElement() {
        Element result = createNewRootElement(getXMLElementTagName());
        Document doc = result.getOwnerDocument();
        result.setAttribute("unit", unitId);
        result.setAttribute("settlement", settlementId);
        result.setAttribute("gold", Integer.toString(gold));
        result.appendChild(goods.toXMLElement(null, doc));
        return result;
    }
,
>
, <(startLine=382 endLine=404 srcPath=/root/NewExperiment/freecolFilter/01302/test/src/net/sf/freecol/server/model/ServerPlayerTest.java)
    public void testCheckGameOverUnitsGoingToEurope() {
        Game game = ServerTestHelper.startServerGame(getTestMap(spec().getTileType("model.tile.highSeas")));
        Map map = game.getMap();
        InGameController igc = ServerTestHelper.getInGameController();
        ServerPlayer dutch = (ServerPlayer)game.getPlayer("model.nation.dutch");
        dutch.setGold(0);

        Unit galleon = new ServerUnit(game, map.getTile(6, 8), dutch,
                                      galleonType);
        Unit colonist = new ServerUnit(game, galleon, dutch, colonistType);
        assertTrue("Colonist should be aboard the galleon",
                   colonist.getLocation() == galleon);
        assertEquals("Galleon should have a colonist onboard",
                     1, galleon.getUnitCount());
        igc.moveTo(dutch, galleon, dutch.getEurope());

        assertEquals("Should not be game over, units between new world and europe", 0,
                     dutch.checkForDeath());

        game.setTurn(new Turn(1600));
        assertEquals("Should be game over, no new world presence >= 1600", -1,
                     dutch.checkForDeath());
    }
,
(startLine=406 endLine=428 srcPath=/root/NewExperiment/freecolFilter/01302/test/src/net/sf/freecol/server/model/ServerPlayerTest.java)
    public void testCheckGameOverUnitsGoingToNewWorld() {
        Game game = ServerTestHelper.startServerGame(getTestMap());
        Map map = game.getMap();
        InGameController igc = ServerTestHelper.getInGameController();
        ServerPlayer dutch = (ServerPlayer)game.getPlayer("model.nation.dutch");
        dutch.setGold(0);

        Unit galleon = new ServerUnit(game, dutch.getEurope(), dutch,
                                      galleonType);
        Unit colonist = new ServerUnit(game, galleon, dutch, colonistType);
        assertEquals("Colonist should be aboard the galleon", galleon,
                     colonist.getLocation());
        assertEquals("Galleon should have a colonist onboard", 1,
                     galleon.getUnitCount());
        igc.moveTo(dutch, galleon, map);

        assertEquals("Should not be game over, units between new world and europe", 0,
                     dutch.checkForDeath());

        game.setTurn(new Turn(1600));
        assertEquals("Should be game over, no new world presence >= 1600", -1,
                     dutch.checkForDeath());
    }
,
>
, <(startLine=95 endLine=160 srcPath=/root/NewExperiment/freecolFilter/00611/src/net/sf/freecol/common/networking/BuyGoodsMessage.java)
                          Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit carrier;
        try {
            carrier = server.getUnitSafely(carrierId, serverPlayer);
        } catch (Exception e) {
            return Message.clientError(e.getMessage());
        }
        if (!carrier.canCarryGoods()) {
            return Message.clientError("Not a carrier: " + carrierId);
        }
        if (!carrier.isInEurope()) {
            return Message.clientError("Not in Europe: " + carrierId);
        }
        GoodsType type = FreeCol.getSpecification().getGoodsType(goodsTypeId);
        if (type == null) {
            return Message.clientError("Not a goods type: " + goodsTypeId);
        }
        if (amount <= 0) {
            return Message.clientError("Amount must be positive: "
                                       + Integer.toString(amount));
        }

        // FIXME: market.buy() should be in the controller, but there
        // are two cases remaining that are hard to move still.
        //
        // 1. There is a shortcut buying of equipment in Europe in
        // Unit.equipWith().
        // 2. Also for the goods required for a building in
        // Colony.payForBuilding().  This breaks the pattern implemented
        // here as there is no unit involved.
        //
        // Try to buy.
        InGameController igc = server.getInGameController();
        ModelMessage message = null;
        Market market = player.getMarket();
        try {
            market.buy(type, amount, player);
            carrier.getGoodsContainer().addGoods(type, amount);
        } catch (Exception e) {
            return Message.clientError(e.getMessage());
        }
        if (market.hasPriceChanged(type)) {
            // This type of goods has changed price, so we will update
            // the market and send a message as well.
            message = market.makePriceChangeMessage(type);
            market.flushPriceChange(type);
        }
        igc.propagateToEuropeanMarkets(type, amount, serverPlayer);

        // Build reply.
        Element reply = Message.createNewRootElement("multiple");
        Document doc = reply.getOwnerDocument();
        Element update = doc.createElement("update");
        reply.appendChild(update);
        update.appendChild(player.toXMLElementPartial(doc, "gold", "score"));
        update.appendChild(carrier.toXMLElement(player, doc));
        if (message != null) {
            update.appendChild(market.toXMLElement(player, doc));
            Element addMessages = doc.createElement("addMessages");
            reply.appendChild(addMessages);
            addMessages.appendChild(message.toXMLElement(player, doc));
        }
        return reply;
    }
,
(startLine=95 endLine=167 srcPath=/root/NewExperiment/freecolFilter/00611/src/net/sf/freecol/common/networking/SellGoodsMessage.java)
                          Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);
        Game game = server.getGame();

        // Sanity checks.
        Unit carrier;
        try {
            carrier = server.getUnitSafely(carrierId, serverPlayer);
        } catch (Exception e) {
            return Message.clientError(e.getMessage());
        }
        if (!carrier.canCarryGoods()) {
            return Message.clientError("Not a carrier: " + carrierId);
        }
        if (!carrier.isInEurope()) {
            return Message.clientError("Not in Europe: " + carrierId);
        }
        GoodsType type = FreeCol.getSpecification().getGoodsType(goodsTypeId);
        if (type == null) {
            return Message.clientError("Not a goods type: " + goodsTypeId);
        }
        if (amount <= 0) {
            return Message.clientError("Amount must be positive: "
                                       + Integer.toString(amount));
        }
        int present = carrier.getGoodsContainer().getGoodsCount(type);
        if (present < amount) {
            return Message.clientError("Attempt to sell " + Integer.toString(amount)
                                       + " " + type.getId() + " but only "
                                       + Integer.toString(present) + " present.");
        }

        // FIXME: market.sell() should be in the controller, but the
        // following cases will have to wait.
        //
        // 1. Unit.dumpEquipment() gets called from a few places.
        // 2. Colony.exportGoods() is in the newTurn mess.
        // Its also still in MarketTest, which needs to be moved to
        // ServerPlayerTest where it also is already.
        //
        // Try to sell.
        InGameController igc = server.getInGameController();
        ModelMessage message = null;
        Market market = player.getMarket();
        try {
            market.sell(type, amount, player); //FIXME:move to controller
            carrier.getGoodsContainer().addGoods(type, -amount);
        } catch (Exception e) {
            return Message.clientError(e.getMessage());
        }
        if (market.hasPriceChanged(type)) {
            // This type of goods has changed price, so update the
            // market and send a message as well.
            message = market.makePriceChangeMessage(type);
            market.flushPriceChange(type);
        }
        igc.propagateToEuropeanMarkets(type, amount, serverPlayer);

        // Build reply.
        Element reply = Message.createNewRootElement("multiple");
        Document doc = reply.getOwnerDocument();
        Element update = doc.createElement("update");
        reply.appendChild(update);
        update.appendChild(player.toXMLElementPartial(doc, "gold", "score"));
        update.appendChild(carrier.toXMLElement(player, doc));
        if (message != null) {
            update.appendChild(market.toXMLElement(player, doc));
            Element addMessages = doc.createElement("addMessages");
            reply.appendChild(addMessages);
            addMessages.appendChild(message.toXMLElement(player, doc));
        }
        return reply;
    }
,
>
, <(startLine=596 endLine=613 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        } else if (random >= 100 - burnProbability) {
            boolean burn = false;
            List<Settlement> settlements = indianSettlement.getOwner().getSettlements();
            for (Settlement settlement : settlements) {
                IndianSettlement indian = (IndianSettlement) settlement;
                Unit missionary = indian.getMissionary();
                if (missionary != null && missionary.getOwner() == attacker.getOwner()) {
                    burn = true;
                    indian.setMissionary(null);
                }
            }
            if (burn) {
                attacker.addModelMessage(attacker, "model.unit.burnMissions", new String[][] {
                        {"%nation%", attacker.getOwner().getNationAsString()},
                        {"%enemyNation%", indianSettlement.getOwner().getNationAsString()}},
                    ModelMessage.DEFAULT, indianSettlement);
            }
        }
,
(startLine=4594 endLine=4611 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/Unit.java)
        } else if (random >= 100 - burnProbability) {
            boolean burn = false;
            List<Settlement> settlements = indianSettlement.getOwner().getSettlements();
            for (Settlement settlement : settlements) {
                IndianSettlement indian = (IndianSettlement) settlement;
                Unit missionary = indian.getMissionary();
                if (missionary != null && missionary.getOwner() == getOwner()) {
                    burn = true;
                    indian.setMissionary(null);
                }
            }
            if (burn) {
                addModelMessage(this, "model.unit.burnMissions", new String[][] {
                        {"%nation%", getOwner().getNationAsString()},
                        {"%enemyNation%", indianSettlement.getOwner().getNationAsString()}},
                    ModelMessage.DEFAULT, indianSettlement);
            }
        }
,
>
, <(startLine=152 endLine=159 srcPath=/root/NewExperiment/freecolFilter/01445/src/net/sf/freecol/client/gui/option/ListOptionUI.java)
                public void actionPerformed(ActionEvent e) {
                    if (list.getSelectedIndex() == 0) return;
                    final int index = list.getSelectedIndex();
                    final AbstractOption<T> temp = model.getElementAt(index);
                    model.setElementAt(model.getElementAt(index-1), index);
                    model.setElementAt(temp, index-1);
                    list.setSelectedIndex(index-1);
                }
,
(startLine=163 endLine=170 srcPath=/root/NewExperiment/freecolFilter/01445/src/net/sf/freecol/client/gui/option/ListOptionUI.java)
                public void actionPerformed(ActionEvent e) {
                    if (list.getSelectedIndex() == model.getSize() - 1) return;
                    final int index = list.getSelectedIndex();
                    final AbstractOption<T> temp = model.getElementAt(index);
                    model.setElementAt(model.getElementAt(index+1), index);
                    model.setElementAt(temp, index+1);
                    list.setSelectedIndex(index+1);
                }
,
>
, <(startLine=311 endLine=333 srcPath=/root/NewExperiment/freecolFilter/00910/src/net/sf/freecol/server/ai/AIGoods.java)
    protected void toXMLImpl(XMLStreamWriter out) throws XMLStreamException {
        out.writeStartElement(getXMLElementTagName());

        out.writeAttribute(ID_ATTRIBUTE, getId());
        if (destination != null) {
            out.writeAttribute("destination", destination.getId());
        }
        out.writeAttribute("transportPriority", Integer.toString(transportPriority));
        if (transport != null) {
            if (getAIMain().getAIObject(transport.getId()) == null) {
                logger.warning("broken reference to transport");
            } else if (transport.getMission() != null
                    && transport.getMission() instanceof TransportMission
                    && !((TransportMission) transport.getMission()).isOnTransportList(this)) {
                logger.warning("We should not be on the transport list.");
            } else {
                out.writeAttribute("transport", transport.getId());
            }
        }
        goods.toXML(out);

        out.writeEndElement();
    }
,
(startLine=383 endLine=404 srcPath=/root/NewExperiment/freecolFilter/00910/src/net/sf/freecol/server/ai/AIUnit.java)
    protected void toXMLImpl(XMLStreamWriter out) throws XMLStreamException {
        out.writeStartElement(getXMLElementTagName());

        out.writeAttribute(ID_ATTRIBUTE, getId());
        if (transport != null) {
            if (transport.getUnit() == null) {
                logger.warning("transport.getUnit() == null");
            } else if (getAIMain().getAIObject(transport.getId()) == null) {
                logger.warning("broken reference to transport");
            } else if (transport.getMission() != null && transport.getMission() instanceof TransportMission
                    && !((TransportMission) transport.getMission()).isOnTransportList(this)) {
                logger.warning("We should not be on the transport list.");
            } else {
                out.writeAttribute("transport", transport.getUnit().getId());
            }
        }
        if (mission != null) {
            mission.toXML(out);
        }

        out.writeEndElement();
    }
,
>
, <(startLine=150 endLine=162 srcPath=/root/NewExperiment/freecolFilter/01485/src/net/sf/freecol/client/gui/TilePopup.java)
                if (activeUnit.checkSetState(UnitState.ACTIVE)) {
                    ji = Utility.localizedMenuItem("activateUnit");
                    ji.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent event) {
                                if (activeUnit.checkSetState(UnitState.ACTIVE)) {
                                    igc.changeState(activeUnit, Unit.UnitState.ACTIVE);
                                }
                            }
                        });
                    add(ji);
                    hasAnItem = true;
                }
,
(startLine=163 endLine=175 srcPath=/root/NewExperiment/freecolFilter/01485/src/net/sf/freecol/client/gui/TilePopup.java)
                if (activeUnit.checkSetState(UnitState.FORTIFYING)) {
                    ji = Utility.localizedMenuItem("fortify");
                    ji.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent event) {
                                if (activeUnit.checkSetState(UnitState.FORTIFYING)) {
                                    igc.changeState(activeUnit, Unit.UnitState.FORTIFYING);
                                }
                            }
                        });
                    add(ji);
                    hasAnItem = true;
                }
,
(startLine=176 endLine=188 srcPath=/root/NewExperiment/freecolFilter/01485/src/net/sf/freecol/client/gui/TilePopup.java)
                if (activeUnit.checkSetState(UnitState.SKIPPED)) {
                    ji = Utility.localizedMenuItem("skip");
                    ji.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent event) {
                                if (activeUnit.checkSetState(UnitState.SKIPPED)) {
                                    igc.changeState(activeUnit, Unit.UnitState.SKIPPED);
                                }
                            }
                        });
                    add(ji);
                    hasAnItem = true;
                }
,
>
, <(startLine=122 endLine=147 srcPath=/root/NewExperiment/freecolFilter/01311/src/net/sf/freecol/client/gui/panel/DiplomaticTradeDialog.java)
        public ColonyTradeItemPanel(Player source) {
            this.source = source;
            this.colonyBox = new JComboBox();
            this.clearButton
                = new JButton(Messages.message("negotiationDialog.clear"));
            this.clearButton.addActionListener(this);
            this.clearButton.setActionCommand("clear");
            this.addButton
                = new JButton(Messages.message("negotiationDialog.add"));
            this.addButton.addActionListener(this);
            this.addButton.setActionCommand("add");
            this.label = new JLabel(Messages.message("tradeItem.colony"));
            this.allColonies = source.getColonies();

            setLayout(new MigLayout("wrap 1", "", ""));
            setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.BLACK),
                    BorderFactory.createEmptyBorder(5, 5, 5, 5)));

            add(this.label);
            add(this.colonyBox);
            add(this.clearButton, "split 2");
            add(this.addButton);

            setSize(getPreferredSize());
        }
,
(startLine=219 endLine=245 srcPath=/root/NewExperiment/freecolFilter/01311/src/net/sf/freecol/client/gui/panel/DiplomaticTradeDialog.java)
        public GoldTradeItemPanel(Player source, int gold) {
            this.source = source;
            this.spinner = new JSpinner(new SpinnerNumberModel(0, 0, gold, 1));
            this.clearButton
                = new JButton(Messages.message("negotiationDialog.clear"));
            this.clearButton.addActionListener(this);
            this.clearButton.setActionCommand("clear");
            this.addButton
                = new JButton(Messages.message("negotiationDialog.add"));
            this.addButton.addActionListener(this);
            this.addButton.setActionCommand("add");
            // adjust entry size
            ((JSpinner.DefaultEditor)this.spinner.getEditor())
                .getTextField().setColumns(5);

            setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.BLACK),
                    BorderFactory.createEmptyBorder(5, 5, 5, 5)));
            setLayout(new MigLayout("wrap 1", "", ""));

            add(new JLabel(Messages.message("tradeItem.gold")));
            add(this.spinner);
            add(this.clearButton, "split 2");
            add(this.addButton);

            setSize(getPreferredSize());
        }
,
(startLine=307 endLine=333 srcPath=/root/NewExperiment/freecolFilter/01311/src/net/sf/freecol/client/gui/panel/DiplomaticTradeDialog.java)
        public GoodsTradeItemPanel(Player source, List<Goods> allGoods) {
            this.source = source;
            this.goodsBox = new JComboBox(new DefaultComboBoxModel());
            this.goodsBox.setRenderer(new GoodsBoxRenderer());
            this.clearButton
                = new JButton(Messages.message("negotiationDialog.clear"));
            this.clearButton.addActionListener(this);
            this.clearButton.setActionCommand("clear");
            this.addButton
                = new JButton(Messages.message("negotiationDialog.add"));
            this.addButton.addActionListener(this);
            this.addButton.setActionCommand("add");
            this.label = new JLabel(Messages.message("tradeItem.goods"));
            this.allGoods = allGoods;

            setLayout(new MigLayout("wrap 1", "", ""));
            setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.BLACK),
                    BorderFactory.createEmptyBorder(5, 5, 5, 5)));

            add(this.label);
            add(this.goodsBox);
            add(this.clearButton, "split 2");
            add(this.addButton);

            setSize(getPreferredSize());
        }
,
(startLine=540 endLine=563 srcPath=/root/NewExperiment/freecolFilter/01311/src/net/sf/freecol/client/gui/panel/DiplomaticTradeDialog.java)
        public StanceTradeItemPanel(Player source, Player target) {
            this.source = source;
            this.target = target;
            this.stanceBox = new JComboBox(new DefaultComboBoxModel());
            this.stanceBox.setRenderer(new StanceBoxRenderer());
            this.clearButton
                = new JButton(Messages.message("negotiationDialog.clear"));
            this.clearButton.addActionListener(this);
            this.clearButton.setActionCommand("clear");
            this.addButton
                = new JButton(Messages.message("negotiationDialog.add"));
            this.addButton.addActionListener(this);
            this.addButton.setActionCommand("add");

            setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.BLACK),
                    BorderFactory.createEmptyBorder(5, 5, 5, 5)));
            setLayout(new MigLayout("wrap 1", "", ""));

            add(new JLabel(Messages.message("tradeItem.stance")));
            add(this.stanceBox);
            add(this.clearButton, "split 2");
            add(this.addButton);
        }
,
(startLine=645 endLine=671 srcPath=/root/NewExperiment/freecolFilter/01311/src/net/sf/freecol/client/gui/panel/DiplomaticTradeDialog.java)
        public UnitTradeItemPanel(Player source, List<Unit> allUnits) {
            this.source = source;
            this.unitBox = new JComboBox(new DefaultComboBoxModel());
            this.unitBox.setRenderer(new UnitBoxRenderer());
            this.clearButton
                = new JButton(Messages.message("negotiationDialog.clear"));
            this.clearButton.addActionListener(this);
            this.clearButton.setActionCommand("clear");
            this.addButton
                = new JButton(Messages.message("negotiationDialog.add"));
            this.addButton.addActionListener(this);
            this.addButton.setActionCommand("add");
            this.label = new JLabel(Messages.message("tradeItem.unit"));
            this.allUnits = allUnits;

            setLayout(new MigLayout("wrap 1", "", ""));
            setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.BLACK),
                    BorderFactory.createEmptyBorder(5, 5, 5, 5)));

            add(this.label);
            add(this.unitBox);
            add(this.clearButton, "split 2");
            add(this.addButton);

            setSize(getPreferredSize());
        }
,
>
, <(startLine=630 endLine=639 srcPath=/root/NewExperiment/freecolFilter/01356/src/net/sf/freecol/common/model/Colony.java)
                                        Collection<GoodsType> workTypes) {
        LogBuilder lb = new LogBuilder((getOccupationTrace()) ? 64 : 0);
        lb.add(getName(), ".getOccupationFor(", unit, ", ");
        logWorkTypes(workTypes, lb);
        lb.add(")");

        Occupation occupation = getOccupationFor(unit, workTypes, lb);
        lb.log(logger, Level.WARNING);
        return occupation;
    }
,
(startLine=651 endLine=658 srcPath=/root/NewExperiment/freecolFilter/01356/src/net/sf/freecol/common/model/Colony.java)
    private Occupation getOccupationFor(Unit unit, boolean userMode) {
        LogBuilder lb = new LogBuilder((getOccupationTrace()) ? 64 : 0);
        lb.add(getName(), ".getOccupationFor(", unit, ")");

        Occupation occupation = getOccupationFor(unit, userMode, lb);
        lb.log(logger, Level.WARNING);
        return occupation;
    }
,
>
, <(startLine=107 endLine=119 srcPath=/root/NewExperiment/freecolFilter/01755/src/net/sf/freecol/common/networking/MultipleMessage.java)
        throws FreeColException {
        final Connection conn = aiPlayer.getConnection();
        if (conn == null) return;

        if (!this.messages.isEmpty()) {
            for (Message m : this.messages) {
                Message ret = conn.handle(m);
                assert ret == null;
            }
        }

        aiPlayer.multipleHandler();
    }
,
(startLine=126 endLine=137 srcPath=/root/NewExperiment/freecolFilter/01755/src/net/sf/freecol/common/networking/MultipleMessage.java)
        throws FreeColException {
        final Connection conn = freeColClient.askServer().getConnection();
        if (conn == null) return;

        if (!this.messages.isEmpty()) {
            for (Message m : this.messages) {
                Message ret = conn.handle(m);
                assert ret == null;
            }
        }                 
        clientGeneric(freeColClient);
    }
,
>
, <(startLine=99 endLine=121 srcPath=/root/NewExperiment/freecolFilter/00712/src/net/sf/freecol/common/option/BooleanOption.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        final String id = in.getAttributeValue(null, ID_ATTRIBUTE_TAG);
        final String defaultValue = in.getAttributeValue(null, "defaultValue");
        final String value = in.getAttributeValue(null, VALUE_TAG);

        if (id == null && getId().equals("NO_ID")){
            throw new XMLStreamException("invalid <" + getXMLElementTagName() + "> tag : no id attribute found.");
        }
        if (defaultValue == null && value == null) {
            throw new XMLStreamException("invalid <" + getXMLElementTagName() + "> tag : no value nor default value found.");
        }

        if(getId() == NO_ID) {
            setId(id);
        }
        if(value != null) {
            setValue(Boolean.parseBoolean(value));
        } else {
            setValue(Boolean.parseBoolean(defaultValue));
        }
        in.nextTag();

    }
,
(startLine=131 endLine=155 srcPath=/root/NewExperiment/freecolFilter/00712/src/net/sf/freecol/common/option/IntegerOption.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        final String id = in.getAttributeValue(null, ID_ATTRIBUTE_TAG);
        final String defaultValue = in.getAttributeValue(null, "defaultValue");
        final String value = in.getAttributeValue(null, VALUE_TAG);
        
        if (id == null && getId().equals("NO_ID")){
            throw new XMLStreamException("invalid <" + getXMLElementTagName() + "> tag : no id attribute found.");
        }
        if (defaultValue == null && value == null) {
            throw new XMLStreamException("invalid <" + getXMLElementTagName() + "> tag : no value nor default value found.");
        }
 
        if(getId() == NO_ID) {
            setId(id);
        }
        if(value != null) {
            setValue(Integer.parseInt(value));
        } else {
            setValue(Integer.parseInt(defaultValue));
        }
        minimumValue = getAttribute(in, "minimumValue", Integer.MIN_VALUE);
        maximumValue = getAttribute(in, "maximumValue", Integer.MAX_VALUE);

        in.nextTag();
    }
,
>
, <(startLine=824 endLine=832 srcPath=/root/NewExperiment/freecolFilter/01381/src/net/sf/freecol/common/debug/DebugUtils.java)
        if (first != null) {
            lb.add(first.toString(), "\nat ", first.getLocation(), "\n");
            all.remove(first);
            while (player.hasNextActiveUnit()
                && (u = player.getNextActiveUnit()) != first) {
                lb.add(u, "\nat ", u.getLocation(), "\n");
                all.remove(u);
            }
        }
,
(startLine=835 endLine=843 srcPath=/root/NewExperiment/freecolFilter/01381/src/net/sf/freecol/common/debug/DebugUtils.java)
        if (first != null) {
            all.remove(first);
            lb.add(first, "\nat ", first.getLocation(), "\n");
            while (player.hasNextGoingToUnit()
                && (u = player.getNextGoingToUnit()) != first) {
                lb.add(u, "\nat ", u.getLocation(), "\n");
                all.remove(u);
            }
        }
,
>
, <(startLine=476 endLine=526 srcPath=/root/NewExperiment/freecolFilter/01422/src/net/sf/freecol/common/i18n/Messages.java)
        if (name == null) {
            if (nationId == null) {
                if (roleKey == null) {
                    if (extra == null) {
                        ret = StringTemplate.template("unitFormat.null.null.null.null")
                            .addStringTemplate("%type%", type);
                    } else {
                        ret = StringTemplate.template("unitFormat.null.null.null.equip")
                            .addStringTemplate("%type%", type)
                            .addStringTemplate("%equipment%", extra);
                    }
                } else {
                    if (extra == null) {
                        ret = StringTemplate.template("unitFormat.null.null.role.null")
                            .addStringTemplate("%type%", type)
                            .add("%role%", nameKey(roleKey));
                    } else {
                        ret = StringTemplate.template("unitFormat.null.null.role.equip")
                            .addStringTemplate("%type%", type)
                            .add("%role%", nameKey(roleKey))
                            .addStringTemplate("%equipment%", extra);
                    }
                }
            } else {
                if (roleKey == null) {
                    if (extra == null) {
                        ret = StringTemplate.template("unitFormat.null.nation.null.null")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId));
                    } else {
                        ret = StringTemplate.template("unitFormat.null.nation.null.equip")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId))
                            .addStringTemplate("%equipment%", extra);
                    }
                } else {
                    if (extra == null) {
                        ret = StringTemplate.template("unitFormat.null.nation.role.null")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId))
                            .add("%role%", nameKey(roleKey));
                    } else {
                        ret = StringTemplate.template("unitFormat.null.nation.role.equip")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId))
                            .add("%role%", nameKey(roleKey))
                            .addStringTemplate("%equipment%", extra);
                    }
                }
            }
        } else {
,
(startLine=526 endLine=584 srcPath=/root/NewExperiment/freecolFilter/01422/src/net/sf/freecol/common/i18n/Messages.java)
        } else {
            if (nationId == null) {
                if (roleKey == null) {
                    if (extra == null) {
                        ret = StringTemplate.template("unitFormat.name.null.null.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type);
                    } else {
                        ret = StringTemplate.template("unitFormat.name.null.null.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .addStringTemplate("%equipment%", extra);
                    }
                } else {
                    if (extra == null) {
                        ret = StringTemplate.template("unitFormat.name.null.role.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%role%", nameKey(roleKey));
                    } else {
                        ret = StringTemplate.template("unitFormat.name.null.role.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%role%", nameKey(roleKey))
                            .addStringTemplate("%equipment%", extra);
                    }
                }
            } else {
                if (roleKey == null) {
                    if (extra == null) {
                        ret = StringTemplate.template("unitFormat.name.nation.null.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId));
                    } else {
                        ret = StringTemplate.template("unitFormat.name.nation.null.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId))
                            .addStringTemplate("%equipment%", extra);
                    }
                } else {
                    if (extra == null) {
                        ret = StringTemplate.template("unitFormat.name.nation.role.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId))
                            .add("%role%", nameKey(roleKey));
                    } else {
                        ret = StringTemplate.template("unitFormat.name.nation.role.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nameKey(nationId))
                            .add("%role%", nameKey(roleKey))
                            .addStringTemplate("%equipment%", extra);
                    }
                }
            }
        }
,
>
, <(startLine=78 endLine=88 srcPath=/root/NewExperiment/freecolFilter/00127/src/net/sf/freecol/server/ai/mission/BuildColonyMission.java)
    public BuildColonyMission(AIMain aiMain, AIUnit aiUnit, Tile target, int colonyValue) {
        super(aiMain, aiUnit);
        
        this.target = target;
        this.colonyValue = colonyValue;
        
        if (!getUnit().isColonist()) {
            logger.warning("Only colonists can build a new Colony.");
            throw new IllegalArgumentException("Only colonists can build a new Colony.");
        }
    }
,
(startLine=99 endLine=110 srcPath=/root/NewExperiment/freecolFilter/00127/src/net/sf/freecol/server/ai/mission/BuildColonyMission.java)
    public BuildColonyMission(AIMain aiMain, AIUnit aiUnit) {
        super(aiMain, aiUnit);
        
        this.target = null;
        this.colonyValue = -1;
        this.doNotGiveUp = true;
        
        if (!getUnit().isColonist()) {
            logger.warning("Only colonists can build a new Colony.");
            throw new IllegalArgumentException("Only colonists can build a new Colony.");
        }
    }
,
>
, <(startLine=552 endLine=570 srcPath=/root/NewExperiment/freecolFilter/00327/src/net/sf/freecol/client/control/InGameInputHandler.java)
    private Element chooseFoundingFather(Element element) {
        final FoundingFather[] possibleFoundingFathers = new FoundingFather[FoundingFather.TYPE_COUNT];
        for (int i = 0; i < FoundingFather.TYPE_COUNT; i++) {
            String id = element.getAttribute("foundingFather" + Integer.toString(i));
            if ("".equals(id)) {
                possibleFoundingFathers[i] = null;
            } else {
                possibleFoundingFathers[i] = FreeCol.getSpecification().getFoundingFather(id);
            }
        }

        int selected = new ShowSelectFoundingFatherSwingTask(possibleFoundingFathers).select();
        FoundingFather foundingFather = possibleFoundingFathers[selected];

        Element reply = Message.createNewRootElement("chosenFoundingFather");
        reply.setAttribute("foundingFather", foundingFather.getId());
        getFreeColClient().getMyPlayer().setCurrentFather(foundingFather);
        return reply;
    }
,
(startLine=232 endLine=249 srcPath=/root/NewExperiment/freecolFilter/00327/src/net/sf/freecol/server/ai/AIInGameInputHandler.java)
    private Element chooseFoundingFather(DummyConnection connection, Element element) {
        FoundingFather[] possibleFoundingFathers = new FoundingFather[FoundingFather.TYPE_COUNT];
        for (int i = 0; i < FoundingFather.TYPE_COUNT; i++) {
            String id = element.getAttribute("foundingFather" + Integer.toString(i));
            if ("".equals(id)) {
                possibleFoundingFathers[i] = null;
            } else {
                possibleFoundingFathers[i] = FreeCol.getSpecification().getFoundingFather(id);
            }
        }

        FoundingFather foundingFather = getAIPlayer().selectFoundingFather(possibleFoundingFathers);
        Element reply = Message.createNewRootElement("chosenFoundingFather");
        reply.setAttribute("foundingFather", foundingFather.getId());
        serverPlayer.setCurrentFather(foundingFather);

        return reply;
    }
,
>
, <(startLine=228 endLine=241 srcPath=/root/NewExperiment/freecolFilter/00487/src/net/sf/freecol/client/gui/panel/FreeColPanel.java)
    public static JTextArea getDefaultTextArea(String text) {
        JTextArea textArea = new JTextArea(text);
        textArea.setColumns(columns);
        textArea.setOpaque(false);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setFocusable(false);
        textArea.setFont(defaultFont);
        textArea.putClientProperty(com.sun.java.swing.SwingUtilities2.AA_TEXT_PROPERTY_KEY,
                                   Boolean.TRUE);
        // necessary because of resizing
        textArea.setSize(textArea.getPreferredSize());
        return textArea;
    }
,
(startLine=1355 endLine=1365 srcPath=/root/NewExperiment/freecolFilter/00487/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
    public static JTextArea getDefaultTextArea(String text) {
        JTextArea textArea = new JTextArea(text);
        textArea.setOpaque(false);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setFocusable(false);
        textArea.setFont(defaultFont);
        textArea.putClientProperty(com.sun.java.swing.SwingUtilities2.AA_TEXT_PROPERTY_KEY,
                                   Boolean.TRUE);
        return textArea;
    }
,
>
, <(startLine=1032 endLine=1059 srcPath=/root/NewExperiment/freecolFilter/01502/src/net/sf/freecol/common/model/Tile.java)
    public StringTemplate getDetailedLocationLabel() {
        Settlement nearSettlement = null;
        for (Tile tile : getSurroundingTiles(NEAR_RADIUS)) {
            nearSettlement = tile.getSettlement();
            if (nearSettlement != null && nearSettlement.getName() != null) {
                Direction d = Map.getRoughDirection(tile, this);
                StringTemplate t = StringTemplate
                    .template("model.tile.nameLocation");
                if (d == null) {
                    t.addName("%location%", nearSettlement.getName());
                } else {
                    t.addStringTemplate("%location%",
                        getNearLocationLabel(d, nearSettlement.getLocationLabel()));
                }
                if (type == null) {
                    t.add("%name%", "unexplored");
                } else {
                    t.addNamed("%name%", type);
                }
                return t;
            }
        }
        return (region != null && region.getName() != null)
            ? StringTemplate.template("model.tile.nameLocation")
                .addNamed("%name%", type)
                .addNamed("%location%", region)
            : getSimpleLabel();
    }
,
(startLine=1067 endLine=1093 srcPath=/root/NewExperiment/freecolFilter/01502/src/net/sf/freecol/common/model/Tile.java)
    public StringTemplate getDetailedLocationLabelFor(Player player) {
        Settlement nearSettlement = null;
        for (Tile tile : getSurroundingTiles(NEAR_RADIUS)) {
            nearSettlement = tile.getSettlement();
            if (nearSettlement != null
                && nearSettlement.hasContacted(player)) {
                Direction d = Map.getRoughDirection(tile, this);
                StringTemplate t = StringTemplate
                    .template("model.tile.nameLocation")
                        .addStringTemplate("%location%", (d == null)
                            ? nearSettlement.getLocationLabelFor(player)
                            : getNearLocationLabel(d,
                                nearSettlement.getLocationLabelFor(player)));
                if (type == null) {
                    t.add("%name%", "unexplored");
                } else {
                    t.addNamed("%name%", type);
                }
                return t;
            }
        }
        return (region != null && region.getName() != null)
            ? StringTemplate.template("model.tile.nameLocation")
                .addNamed("%name%", type)
                .addStringTemplate("%location%", region.getLabel())
            : getSimpleLabel();
    }
,
>
, <(startLine=3058 endLine=3068 srcPath=/root/NewExperiment/freecolFilter/01384/src/net/sf/freecol/server/model/ServerPlayer.java)
                                     ChangeSet cs) {
        boolean captureRepairing = getSpecification()
            .getBoolean(GameOptions.CAPTURE_UNITS_UNDER_REPAIR);
        List<Unit> units = colony.getTile().getUnitList();
        while (!units.isEmpty()) {
            Unit unit = units.remove(0);
            if (unit.isNaval() && !(captureRepairing && unit.isDamaged())) {
                csDamageShipAttack(attacker, unit, cs);
            }
        }
    }
,
(startLine=3798 endLine=3808 srcPath=/root/NewExperiment/freecolFilter/01384/src/net/sf/freecol/server/model/ServerPlayer.java)
    private void csSinkColonyShips(Unit attacker, Colony colony, ChangeSet cs) {
        boolean captureRepairing = getSpecification()
            .getBoolean(GameOptions.CAPTURE_UNITS_UNDER_REPAIR);
        List<Unit> units = colony.getTile().getUnitList();
        while (!units.isEmpty()) {
            Unit unit = units.remove(0);
            if (unit.isNaval() && !(captureRepairing && unit.isDamaged())) {
                csSinkShipAttack(attacker, unit, cs);
            }
        }
    }
,
>
, <(startLine=1273 endLine=1303 srcPath=/root/NewExperiment/freecolFilter/00563/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element askSkill(Connection connection, Element element) {
        FreeColServer freeColServer = getFreeColServer();
        Map map = getGame().getMap();
        ServerPlayer player = freeColServer.getPlayer(connection);
        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute("unit"));
        Direction direction = Enum.valueOf(Direction.class, element.getAttribute("direction"));
        if (unit == null) {
            throw new IllegalArgumentException("Could not find 'Unit' with specified ID: "
                    + element.getAttribute("unit"));
        }
        if (unit.getMovesLeft() == 0) {
            throw new IllegalArgumentException("Unit has no moves left.");
        }
        if (unit.getTile() == null) {
            throw new IllegalArgumentException("'Unit' not on map: ID: " + element.getAttribute("unit"));
        }
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        IndianSettlement settlement = (IndianSettlement) map.getNeighbourOrNull(direction, unit.getTile())
                .getSettlement();
        
        unit.setMovesLeft(0);
        Element reply = Message.createNewRootElement("provideSkill");
        if (settlement.getLearnableSkill() != null) {
            reply.setAttribute("skill", settlement.getLearnableSkill().getId());
        }
        // Set the Tile.PlayerExploredTile attribute.
        settlement.getTile().updateIndianSettlementSkill(player);
        return reply;
    }
,
(startLine=1742 endLine=1769 srcPath=/root/NewExperiment/freecolFilter/00563/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element armedUnitDemandTribute(Connection connection, Element element) {
        FreeColServer freeColServer = getFreeColServer();
        ServerPlayer player = freeColServer.getPlayer(connection);
        // Get parameters:
        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute("unit"));
        Direction direction = Enum.valueOf(Direction.class, element.getAttribute("direction"));
        // Test the parameters:
        if (unit == null) {
            throw new IllegalArgumentException("Could not find 'Unit' with specified ID: "
                    + element.getAttribute("unit"));
        }
        if (unit.getTile() == null) {
            throw new IllegalArgumentException("'Unit' is not on the map: " + unit.toString());
        }
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        Tile newTile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());
        if (newTile == null) {
            throw new IllegalArgumentException("Could not find tile in direction " + direction + " from unit with ID "
                    + element.getAttribute("unit"));
        }
        unit.setMovesLeft(0);
        IndianSettlement settlement = (IndianSettlement) newTile.getSettlement();
        Element reply = Message.createNewRootElement("armedUnitDemandTributeResult");
        demandTribute(settlement, player, reply);
        return reply;
    }
,
>
, <(startLine=3568 endLine=3624 srcPath=/root/NewExperiment/freecolFilter/01352/src/net/sf/freecol/client/control/InGameController.java)
                                                    Settlement settlement) {
        final Game game = freeColClient.getGame();
        Player player = freeColClient.getMyPlayer();
        Goods goods = null;

        // Get list of goods for sale
        List<Goods> forSale = askServer()
            .getGoodsForSaleInSettlement(game, unit, settlement);
        for (;;) {
            if (forSale.isEmpty()) { // Nothing to sell to the player
                return StringTemplate.template("trade.nothingToSell");
            }

            // Choose goods to buy
            List<ChoiceItem<Goods>> choices
                = new ArrayList<ChoiceItem<Goods>>();
            for (Goods g : forSale) {
                String label = Messages.message(g.getLabel(true));
                choices.add(new ChoiceItem<Goods>(label, g));
            }
            goods = gui.showChoiceDialog(true, unit.getTile(),
                Messages.message("buyProposition.text"), settlement,
                "buyProposition.nothing", choices);
            if (goods == null) break; // Trade aborted by the player

            int gold = -1; // Initially ask for a price
            for (;;) {
                gold = askServer().buyProposition(unit, settlement,
                    goods, gold);
                if (gold <= 0) {
                    return tradeFailMessage(gold, settlement, goods);
                }

                // Show dialog for buy proposal
                boolean canBuy = player.checkGold(gold);
                GUI.BuyAction act
                    = gui.showBuyDialog(unit, settlement, goods, gold, canBuy);
                if (act == null) break; // User cancelled
                switch (act) {
                case BUY: // Accept price, make purchase
                    if (askServer().buyFromSettlement(unit,
                            settlement, goods, gold)) {
                        gui.updateMenuBar(); // Assume success
                        return null;
                    }
                    return abortTrade;
                case HAGGLE: // Try to negotiate a lower price
                    gold = gold * 9 / 10;
                    break;
                default:
                    logger.warning("showBuyDialog fail: " + act);
                    return null;
                }
            }
        }
        return abortTrade;
    }
,
(startLine=3635 endLine=3684 srcPath=/root/NewExperiment/freecolFilter/01352/src/net/sf/freecol/client/control/InGameController.java)
                                                   Settlement settlement) {
        Goods goods = null;
        for (;;) {
            // Choose goods to sell
            List<ChoiceItem<Goods>> choices
                = new ArrayList<ChoiceItem<Goods>>();
            for (Goods g : unit.getGoodsList()) {
                String label = Messages.message(g.getLabel(true));
                choices.add(new ChoiceItem<Goods>(label, g));
            }
            goods = gui.showChoiceDialog(true, unit.getTile(),
                Messages.message("sellProposition.text"), settlement,
                "sellProposition.nothing", choices);
            if (goods == null) break; // Trade aborted by the player

            int gold = -1; // Initially ask for a price
            for (;;) {
                gold = askServer().sellProposition(unit, settlement,
                    goods, gold);
                if (gold <= 0) {
                    return tradeFailMessage(gold, settlement, goods);
                }

                // Show dialog for sale proposal
                GUI.SellAction act
                    = gui.showSellDialog(unit, settlement, goods, gold);
                if (act == null) break; // Cancelled
                switch (act) {
                case SELL: // Accepted price, make the sale
                    if (askServer().sellToSettlement(unit,
                            settlement, goods, gold)) {
                        gui.updateMenuBar(); // Assume success
                        return null;
                    }
                    return abortTrade;
                case HAGGLE: // Ask for more money
                    gold = (gold * 11) / 10;
                    break;
                case GIFT: // Decide to make a gift of the goods
                    askServer().deliverGiftToSettlement(unit,
                        settlement, goods);
                    return abortTrade;
                default:
                    logger.warning("showSellDialog fail: " + act);
                    return null;
                }
            }
        }
        return abortTrade;
    }
,
>
, <(startLine=438 endLine=447 srcPath=/root/NewExperiment/freecolFilter/00273/src/net/sf/freecol/common/model/Market.java)
                if (oldPrices[goodsType] > dataForGoodType[goodsType].costToBuy) {
                    addModelMessage(owner.getEurope(), "model.market.priceDecrease",
                                    new String[][] {
                                        {"%europe%", owner.getEurope().getName()},
                                        {"%goods%", Goods.getName(goodsType)},
                                        {"%buy%", String.valueOf(dataForGoodType[goodsType].costToBuy)},
                                        {"%sell%", String.valueOf(dataForGoodType[goodsType].paidForSale)}},
                                    ModelMessage.MARKET_PRICES,
                                    new Goods(goodsType));
                } else if (oldPrices[goodsType] < dataForGoodType[goodsType].costToBuy) {
,
(startLine=447 endLine=456 srcPath=/root/NewExperiment/freecolFilter/00273/src/net/sf/freecol/common/model/Market.java)
                } else if (oldPrices[goodsType] < dataForGoodType[goodsType].costToBuy) {
                    addModelMessage(owner.getEurope(), "model.market.priceIncrease",
                                    new String[][] {
                                        {"%europe%", owner.getEurope().getName()},
                                        {"%goods%", Goods.getName(goodsType)},
                                        {"%buy%", String.valueOf(dataForGoodType[goodsType].costToBuy)},
                                        {"%sell%", String.valueOf(dataForGoodType[goodsType].paidForSale)}},
                                    ModelMessage.MARKET_PRICES,
                                    new Goods(goodsType));
                }
,
>
, <(startLine=182 endLine=192 srcPath=/root/NewExperiment/freecolFilter/00128/src/net/sf/freecol/client/control/PreGameController.java)
        } catch (SAXException sxe) {
            // Error generated during parsing
            Exception  x = sxe;
            if (sxe.getException() != null) {
                x = sxe.getException();
            }
            StringWriter sw = new StringWriter();
            x.printStackTrace(new PrintWriter(sw));
            logger.warning(sw.toString());
            throw new IOException("SAXException while creating Message.");
        } catch (NullPointerException e) {
,
(startLine=501 endLine=511 srcPath=/root/NewExperiment/freecolFilter/00128/src/net/sf/freecol/server/FreeColServer.java)
        } catch (SAXException sxe) {
            // Error generated during parsing
            Exception  x = sxe;
            if (sxe.getException() != null) {
                x = sxe.getException();
            }
            StringWriter sw = new StringWriter();
            x.printStackTrace(new PrintWriter(sw));
            logger.warning(sw.toString());
            throw new IOException("SAXException while creating Message.");
        }
,
>
, <(startLine=810 endLine=824 srcPath=/root/NewExperiment/freecolFilter/01158/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
                if(unit.getUnitList() != null){
                    for(final Unit innerUnit : unit.getUnitList()){
                        unitIcon = imageLibrary.getUnitImageIcon(innerUnit, 0.5);
                        menuTitle = new String(Messages.message(innerUnit.getLabel()) + " Cargo On " + Messages.message(unit.getLabel()));
                        subMenu = new JMenuItem(menuTitle, unitIcon);
                        subMenu.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                unitMenu.createUnitMenu(new UnitLabel(freeColClient, innerUnit, getGUI()));
                                unitMenu.show(getGUI().getCanvas(), 0, 0);
                            }
                        });
                        unitNumber++;
                        colonyUnitsMenu.add(subMenu);
                    }
                }
,
(startLine=825 endLine=838 srcPath=/root/NewExperiment/freecolFilter/01158/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            }else if(!unit.isOnCarrier()){
                unitIcon = imageLibrary.getUnitImageIcon(unit, 0.5);
                String menuTitle = new String(Messages.message(unit.getLabel()) +
                        " " + Messages.message("outsideOfColony.name"));
                subMenu = new JMenuItem(menuTitle, unitIcon);
                subMenu.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        unitMenu.createUnitMenu(new UnitLabel(freeColClient, unit, getGUI()));
                        unitMenu.show(getGUI().getCanvas(), 0, 0);
                        }
                });
                unitNumber++;
                colonyUnitsMenu.add(subMenu);
            }
,
>
, <(startLine=258 endLine=289 srcPath=/root/NewExperiment/freecolFilter/00070/src/net/sf/freecol/common/model/Unit.java)
    public void trade(Settlement settlement, Goods goods, int gold) {
        if (getTile().getDistanceTo(settlement.getTile()) > 1) {
            logger.warning("Unit not adjacent to settlement!");
            throw new IllegalStateException("Unit not adjacent to settlement!");
        }
        if (goods.getLocation() != this) {
            logger.warning("Goods not onboard this unit!");
            throw new IllegalStateException("Goods not onboard this unit!");
        }
        if (getMovesLeft() <= 0) {
            logger.warning("No more moves!");
            throw new IllegalStateException("No more moves left!");
        }

        goods.setLocation(settlement);

        /*
         Value already tested. This test is needed because the opponent's
         amount of gold is hidden for the client:
        */
        if (settlement.getOwner().getGold() - gold >= 0) {
            settlement.getOwner().modifyGold(-gold);
        }

        setMovesLeft(0);
        getOwner().modifyGold(gold);

        if (settlement instanceof IndianSettlement) {
            int value = ((IndianSettlement) settlement).getPrice(goods) / 1000;
            settlement.getOwner().modifyTension(getOwner(), -value);
        }
    }
,
(startLine=295 endLine=316 srcPath=/root/NewExperiment/freecolFilter/00070/src/net/sf/freecol/common/model/Unit.java)
    public void deliverGift(Settlement settlement, Goods goods) {
        if (getTile().getDistanceTo(settlement.getTile()) > 1) {
            logger.warning("Unit not adjacent to settlement!");
            throw new IllegalStateException("Unit not adjacent to settlement!");
        }
        if (goods.getLocation() != this) {
            logger.warning("Goods not onboard this unit!");
            throw new IllegalStateException("Goods not onboard this unit!");
        }
        if (getMovesLeft() <= 0) {
            logger.warning("No more moves left!");
            throw new IllegalStateException("No more moves left!");
        }

        goods.setLocation(settlement);
        setMovesLeft(0);

        if (settlement instanceof IndianSettlement) {
            int value = ((IndianSettlement) settlement).getPrice(goods) / 100;
            settlement.getOwner().modifyTension(getOwner(), -value);
        }
    }
,
>
, <(startLine=1192 endLine=1204 srcPath=/root/NewExperiment/freecolFilter/00782/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            public boolean check(Unit u, PathNode pathNode) {
                Tile t = pathNode.getTile();
                if (t.getColony() != null && t.getColony().getOwner() == u.getOwner()) {
                    int value = getDefendColonyMissionValue(unit, t.getColony(), pathNode.getTurns());
                    if (value > 0 && value > bestValue) {
                        bestValue = value;
                        best = pathNode;
                    }
                    return true;
                } else {
                    return false;
                }
            }
,
(startLine=2126 endLine=2138 srcPath=/root/NewExperiment/freecolFilter/00782/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            public boolean check(Unit u, PathNode pathNode) {
                Tile t = pathNode.getTile();
                if (t.getColony() != null && t.getColony().getOwner() == u.getOwner()) {
                    int value = getDefendColonyMissionValue(unit, t.getColony(), pathNode.getTurns());
                    if (value > 0 && value > bestValue) {
                        bestValue = value;
                        best = pathNode;
                    }
                    return true;
                } else {
                    return false;
                }
            }
,
(startLine=557 endLine=569 srcPath=/root/NewExperiment/freecolFilter/00782/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
                public boolean check(Unit u, PathNode pathNode) {
                    Tile t = pathNode.getTile();
                    if (t.getColony() != null && t.getColony().getOwner() == u.getOwner()) {
                        int value = getDefendColonyMissionValue(u, t.getColony(), pathNode.getTurns());
                        if (value > 0 && value > bestValue) {
                            bestValue = value;
                            best = pathNode;
                        }
                        return true;
                    } else {
                        return false;
                    }
                }
,
>
, <(startLine=875 endLine=884 srcPath=/root/NewExperiment/freecolFilter/00473/src/net/sf/freecol/client/control/InGameInputHandler.java)
            for (int i = 0; i < unitList.getLength(); i++) {
                Element unitElement = (Element) unitList.item(i);
                Unit newUnit = (Unit) getGame().getFreeColGameObject(unitElement.getAttribute("ID"));
                if (newUnit == null) {
                    newUnit = new Unit(getGame(), unitElement);
                } else {
                    newUnit.readFromXMLElement(unitElement);
                }
                player.getEurope().add(newUnit);
            }
,
(startLine=1183 endLine=1192 srcPath=/root/NewExperiment/freecolFilter/00473/src/net/sf/freecol/client/control/InGameInputHandler.java)
                    for (int i = 0; i < unitList.getLength(); i++) {
                        Element unitElement = (Element) unitList.item(i);
                        newUnit = (Unit) getGame().getFreeColGameObject(unitElement.getAttribute("ID"));
                        if (newUnit == null) {
                            newUnit = new Unit(getGame(), unitElement);
                        } else {
                            newUnit.readFromXMLElement(unitElement);
                        }
                        player.getEurope().add(newUnit);
                    }
,
>
, <(startLine=1512 endLine=1521 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/client/gui/GUI.java)
                                      final Unit unit) {
        if (canvas == null) return;
        canvas.showNameNewLandDialog(key, defaultName, unit,
            new DialogHandler<String>() {
                public void handle(String name) {
                    if (name == null || name.length() == 0) name = defaultName;
                    igc().nameNewLand(unit, name);
                }
            });
    }
,
(startLine=1526 endLine=1535 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/client/gui/GUI.java)
                                        final Region region) {
        if (canvas == null) return;
        canvas.showNameNewRegionDialog(template, defaultName, unit, 
            new DialogHandler<String>() {
                public void handle(String name) {
                    if (name == null || name.length() == 0) name = defaultName;
                    igc().nameNewRegion(tile, unit, region, name);
                }
            });
    }
,
>
, <(startLine=949 endLine=966 srcPath=/root/NewExperiment/freecolFilter/00450/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
    public void setSelectedUnitLabel(UnitLabel unitLabel) {
        if (selectedUnit != unitLabel) {
            if (selectedUnit != null) {
                selectedUnit.setSelected(false);
            }
            selectedUnit = unitLabel;
            if (unitLabel == null) {
                cargoPanel.setCarrier(null);
            } else {
                cargoPanel.setCarrier(unitLabel.getUnit());
                unitLabel.setSelected(true);
            }
            updateCargoLabel();
            //updateCarrierButtons();
            cargoPanel.revalidate();
            refresh();
        }
    }
,
(startLine=529 endLine=549 srcPath=/root/NewExperiment/freecolFilter/00450/src/net/sf/freecol/client/gui/panel/EuropePanel.java)
    public void setSelectedUnitLabel(UnitLabel unitLabel) {
        if (selectedUnit == unitLabel) {
            // No need to change anything
            return;
        }
        if (selectedUnit != null) {
            selectedUnit.setSelected(false);
        }
        selectedUnit = unitLabel;
        if (unitLabel == null) {
            cargoPanel.setCarrier(null);
        } else {
            cargoPanel.setCarrier(unitLabel.getUnit());
            unitLabel.setSelected(true);
        }

        updateCargoPanel();

        cargoPanel.revalidate();
        refresh();
    }
,
>
, <(startLine=1091 endLine=1099 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/client/gui/Canvas.java)
        for (int i = 0; i < messages.length; i++) {
            String id = messages[i].getId();
            try {
                texts[i] = Messages.message(messages[i]);
            } catch (MissingResourceException e) {
                logger.warning("could not find message with id: " + id + ".");
            }
            images[i] = gui.getImageLibrary().getImageIcon(freeColClient.getGame().getMessageDisplay(messages[i]), false);
        }
,
(startLine=1507 endLine=1516 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/client/gui/Canvas.java)
        for (int i = 0; i < messages.size(); i++) {
            try {
                messageText[i] = Messages.message(messages.get(i));
            } catch (MissingResourceException e) {
                logger.warning("could not find message with id: "
                    + messages.get(i).getId() + ".");
            }
            messageIcon[i] = gui.getImageLibrary().getImageIcon(game
                .getMessageDisplay(messages.get(i)), false);
        }
,
>
, <(startLine=707 endLine=715 srcPath=/root/NewExperiment/freecolFilter/00838/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    accepted = new ShowConfirmDialogSwingTask(colony.getTile(),
                                                              StringTemplate.template("indianDemand.food.text")
                                                              .addName("%nation%", nation)
                                                              .addName("%colony%", colony.getName())
                                                              .addAmount("%amount%", goods.getAmount()),
                                                              "indianDemand.food.yes", "indianDemand.food.no")
                        .confirm();
                } else {
,
(startLine=715 endLine=724 srcPath=/root/NewExperiment/freecolFilter/00838/src/net/sf/freecol/client/control/InGameInputHandler.java)
                } else {
                    accepted = new ShowConfirmDialogSwingTask(colony.getTile(),
                                                              StringTemplate.template("indianDemand.other.text")
                                                              .addName("%nation%", nation)
                                                              .addName("%colony%", colony.getName())
                                                              .addAmount("%amount%", goods.getAmount())
                                                              .addName("%goods%", goods),
                                                              "indianDemand.other.yes", "indianDemand.other.no")
                        .confirm();
                }
,
>
, <(startLine=110 endLine=121 srcPath=/root/NewExperiment/freecolFilter/01349/src/net/sf/freecol/client/gui/i18n/NumberRules.java)
    public static void load(InputStream in) {
        FreeColXMLReader xr = null;
        try {
            xr = new FreeColXMLReader(in);
            readFromXML(xr);
        } catch (Exception e) {
            logger.log(Level.WARNING, "Load parse", e);
            throw new RuntimeException("Error parsing number rules.", e);
        } finally {
            if (xr != null) xr.close();
        }
    }
,
(startLine=376 endLine=389 srcPath=/root/NewExperiment/freecolFilter/01349/src/net/sf/freecol/common/model/Specification.java)
    private void load(InputStream in) {
        FreeColXMLReader xr = null;
        try {
            xr = new FreeColXMLReader(in);
            xr.nextTag();
            load(xr);
        } catch (Exception e) {
            logger.log(Level.WARNING, "Load stream exception", e);
            throw new RuntimeException("Error parsing specification: "
                                       + e.getMessage());
        } finally {
            if (xr != null) xr.close();
        }
    }
,
>
, <(startLine=1222 endLine=1248 srcPath=/root/NewExperiment/freecolFilter/01497/src/net/sf/freecol/client/gui/ImageLibrary.java)
        for (int biY = 0; biY < height; biY++) {
            for (int biX = borderWidth; biX < width - borderWidth; biX++) {
                int biXI = width - biX - 1;
                for (int d = 1; d <= borderWidth; d++) {
                    // left to right
                    srcRGB = bi.getRGB(biX, biY);
                    srcA = (srcRGB >> 24) & 0xFF;
                    dstRGB = bi.getRGB(biX - d, biY);
                    if (dstRGB != borderColor) {
                        if (srcA > 0) {
                            bi.setRGB(biX, biY, borderColor);
                            bi.setRGB(biX - d, biY, srcRGB);
                        }
                    }
                    // right to left
                    srcRGB = bi.getRGB(biXI, biY);
                    srcA = (srcRGB >> 24) & 0xFF;
                    dstRGB = bi.getRGB(biXI + d, biY);
                    if (dstRGB != borderColor) {
                        if (srcA > 0) {
                            bi.setRGB(biXI, biY, borderColor);
                            bi.setRGB(biXI + d, biY, srcRGB);
                        }
                    }
                }
            }
        }
,
(startLine=1249 endLine=1275 srcPath=/root/NewExperiment/freecolFilter/01497/src/net/sf/freecol/client/gui/ImageLibrary.java)
        for (int biX = 0; biX < width; biX++) {
            for (int biY = borderWidth; biY < height - borderWidth; biY++) {
                int biYI = height - biY - 1;
                for (int d = 1; d <= borderWidth; d++) {
                    // top to bottom
                    srcRGB = bi.getRGB(biX, biY);
                    srcA = (srcRGB >> 24) & 0xFF;
                    dstRGB = bi.getRGB(biX, biY - d);
                    if (dstRGB != borderColor) {
                        if (srcA > 0) {
                            bi.setRGB(biX, biY, borderColor);
                            bi.setRGB(biX, biY - d, srcRGB);
                        }
                    }
                    // bottom to top
                    srcRGB = bi.getRGB(biX, biYI);
                    srcA = (srcRGB >> 24) & 0xFF;
                    dstRGB = bi.getRGB(biX, biYI + d);
                    if (dstRGB != borderColor) {
                        if (srcA > 0) {
                            bi.setRGB(biX, biYI, borderColor);
                            bi.setRGB(biX, biYI + d, srcRGB);
                        }
                    }
                }
            }
        }
,
>
, <(startLine=887 endLine=900 srcPath=/root/NewExperiment/freecolFilter/00821/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
                change = true;
            } catch (IllegalStateException e) { // Catch illegal transitions
,
(startLine=905 endLine=920 srcPath=/root/NewExperiment/freecolFilter/00821/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                if (!change) {
                    cs.addStance(See.perhaps(), otherPlayer, stance, this);
                    logger.finest("Stance change " + otherPlayer.getName()
                                  + " " + old.toString()
                                  + " -> " + stance.toString()
                                  + " wrt " + getName());
                }
                change = true;
            } catch (IllegalStateException e) { // Catch illegal transitions
,
>
, <(startLine=1846 endLine=1870 srcPath=/root/NewExperiment/freecolFilter/01381/src/net/sf/freecol/server/control/InGameController.java)
        } else if (destination instanceof Map) {
            if (!highSeas.getDestinations().contains(destination)) {
                return DOMMessage.clientError("HighSeas does not connect to: "
                    + destination.getId());
            } else if (unit.getLocation() == highSeas) {
                if (current != destination && (current == null
                        || current.getTile() == null
                        || current.getTile().getMap() != destination)) {
                    // Changed direction
                    unit.setWorkLeft(unit.getSailTurns()
                        - unit.getWorkLeft() + 1);
                }
                unit.setDestination(destination);
                cs.add(See.only(serverPlayer), highSeas);
            } else if (unit.getLocation() instanceof Europe) {
                Europe europe = (Europe) unit.getLocation();
                unit.setWorkLeft(unit.getSailTurns());
                unit.setDestination(destination);
                unit.setMovesLeft(0);
                unit.setLocation(highSeas);//-vis: safe!map
                cs.add(See.only(serverPlayer), europe, highSeas);
            } else {
                invalid = true;
            }
        } else if (destination instanceof Settlement) {
,
(startLine=1870 endLine=1890 srcPath=/root/NewExperiment/freecolFilter/01381/src/net/sf/freecol/server/control/InGameController.java)
        } else if (destination instanceof Settlement) {
            Tile tile = destination.getTile();
            if (!highSeas.getDestinations().contains(tile.getMap())) {
                return DOMMessage.clientError("HighSeas does not connect to: "
                    + destination.getId());
            } else if (unit.getLocation() == highSeas) {
                // Direction is somewhat moot, so just reset.
                unit.setWorkLeft(unit.getSailTurns());
                unit.setDestination(destination);
                cs.add(See.only(serverPlayer), highSeas);
            } else if (unit.getLocation() instanceof Europe) {
                Europe europe = (Europe) unit.getLocation();
                unit.setWorkLeft(unit.getSailTurns());
                unit.setDestination(destination);
                unit.setMovesLeft(0);
                unit.setLocation(highSeas);//-vis: safe!map
                cs.add(See.only(serverPlayer), europe, highSeas);
            } else {
                invalid = true;
            }
        } else {
,
>
, <(startLine=313 endLine=329 srcPath=/root/NewExperiment/freecolFilter/00858/src/net/sf/freecol/server/ai/NewAIPlayer.java)
    protected void doMissions() {
        logger.finest("Entering method doMissions");
        Iterator<AIUnit> aiUnitsIterator = getAIUnitIterator();
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();
            if (aiUnit.hasMission() && aiUnit.getMission().isValid()
                && !(aiUnit.getUnit().isOnCarrier())) {
                try {
                    aiUnit.doMission(getConnection());
                } catch (Exception e) {
                    StringWriter sw = new StringWriter();
                    e.printStackTrace(new PrintWriter(sw));
                    logger.warning(sw.toString());
                }
            }
        }
    }
,
(startLine=980 endLine=996 srcPath=/root/NewExperiment/freecolFilter/00858/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    private void doMissions() {
        logger.finest("Entering method doMissions");
        Iterator<AIUnit> aiUnitsIterator = getAIUnitIterator();
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();
            if (aiUnit.hasMission() && aiUnit.getMission().isValid()
                    && !(aiUnit.getUnit().isOnCarrier())) {
                try {
                    aiUnit.doMission(getConnection());
                } catch (Exception e) {
                    StringWriter sw = new StringWriter();
                    e.printStackTrace(new PrintWriter(sw));
                    logger.warning(sw.toString());
                }
            }
        }
    }
,
>
, <(startLine=103 endLine=118 srcPath=/root/NewExperiment/freecolFilter/01581/src/net/sf/freecol/client/gui/panel/ReportNavalPanel.java)
    protected void addOwnUnits() {
        final Specification spec = getSpecification();
        final Player player = getMyPlayer();

        reportPanel.add(Utility.localizedLabel(player.getForcesLabel()),
            "newline, span, split 2");
        reportPanel.add(new JSeparator(JSeparator.HORIZONTAL), "growx");

        for (UnitType unitType : getSpecification().getUnitTypeList()) {
            if (!reportable(unitType)) continue;
            AbstractUnit au = new AbstractUnit(unitType,
                                               Specification.DEFAULT_ROLE_ID,
                                               getCount("naval", unitType));
            reportPanel.add(createUnitTypeLabel(au), "sg");
        }
    }
,
(startLine=51 endLine=66 srcPath=/root/NewExperiment/freecolFilter/01581/src/net/sf/freecol/client/gui/panel/ReportCargoPanel.java)
    protected void addOwnUnits() {
        final Player player = getMyPlayer();
        reportPanel.add(Utility.localizedLabel(player.getForcesLabel()),
            "newline, span, split 2");
        reportPanel.add(new JSeparator(JSeparator.HORIZONTAL), "growx");
        
        for (UnitType unitType : getSpecification().getUnitTypeList()) {
            if (unitType.isAvailableTo(player)
                && (unitType.canCarryUnits() || unitType.canCarryGoods())) {
                AbstractUnit unit = new AbstractUnit(unitType,
                    Specification.DEFAULT_ROLE_ID,
                    getCount("carriers", unitType));
                reportPanel.add(createUnitTypeLabel(unit), "sg");
            }
        }
    }
,
>
, <(startLine=812 endLine=846 srcPath=/root/NewExperiment/freecolFilter/00824/src/net/sf/freecol/client/control/InGameController.java)
                                             int atStop, int toLoad) {
        Player player = unit.getOwner();
        Location loc = unit.getLocation();
        String route = unit.getTradeRoute().getName();
        ModelMessage m;

        if (toLoad < atStop) {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                                 "traderoute.loadImportLimited", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%location%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .add("%goods%", type.getNameKey())
                .addName("%more%", Integer.toString(atStop - toLoad));
        } else if (present > atStop && toLoad > atStop) {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                                 "traderoute.loadExportLimited", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%location%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .add("%goods%", type.getNameKey())
                .addName("%more%", Integer.toString(present - atStop));
        } else {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                                 "traderoute.load", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%location%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .add("%goods%", type.getNameKey());
        }
        return m;
    }
,
(startLine=978 endLine=1012 srcPath=/root/NewExperiment/freecolFilter/00824/src/net/sf/freecol/client/control/InGameController.java)
                                               int present, int toUnload) {
        Player player = unit.getOwner();
        Location loc = unit.getLocation();
        String route = unit.getTradeRoute().getName();
        ModelMessage m;

        if (present == toUnload) {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                                 "traderoute.unload", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%location%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .add("%goods%", type.getNameKey());
        } else if (toUnload > atStop) {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                                 "traderoute.overflow", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%colony%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .addName("%overflow%", Integer.toString(toUnload - atStop))
                .add("%goods%", type.getNameKey());
        } else {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                                 "traderoute.nounload", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%location%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .addName("%overflow%", Integer.toString(present - atStop))
                .add("%goods%", type.getNameKey());
        }
        return m;
    }
,
>
, <(startLine=926 endLine=957 srcPath=/root/NewExperiment/freecolFilter/00442/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    private void evade(Unit defender, Colony attackerColony, Unit attackerUnit) {
        String nation = defender.getOwner().getNationAsString();

        if (attackerColony != null) {
            attackerColony.addModelMessage(attackerColony,
                                           ModelMessage.MessageType.COMBAT_RESULT,
                                           "model.unit.shipEvadedBombardment",
                                           "%colony%", attackerColony.getName(),
                                           "%unit%", defender.getName(),
                                           "%nation%", nation);
            defender.addModelMessage(defender,
                                     ModelMessage.MessageType.COMBAT_RESULT, 
                                     "model.unit.shipEvadedBombardment",
                                     "%colony%", attackerColony.getName(),
                                     "%unit%", defender.getName(),
                                     "%nation%", nation);
        } else if (attackerUnit != null) {
            String attackerNation = attackerUnit.getOwner().getNationAsString();
            attackerUnit.addModelMessage(attackerUnit,
                                         ModelMessage.MessageType.COMBAT_RESULT,
                                         "model.unit.enemyShipEvaded",
                                         "%unit%", attackerUnit.getName(),
                                         "%enemyUnit%", defender.getName(),
                                         "%enemyNation%", nation);
            defender.addModelMessage(defender,
                                     ModelMessage.MessageType.COMBAT_RESULT,
                                     "model.unit.shipEvaded",
                                     "%unit%", defender.getName(),
                                     "%enemyUnit%", attackerUnit.getName(),
                                     "%enemyNation%", attackerNation);
        }
    }
,
(startLine=1019 endLine=1051 srcPath=/root/NewExperiment/freecolFilter/00442/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    private void sinkShip(Unit sinkingShip, Colony attackerColony, Unit attackerUnit) {
        String nation = sinkingShip.getOwner().getNationAsString();

        if (attackerColony != null) {
            attackerColony.addModelMessage(attackerColony,
                                           ModelMessage.MessageType.COMBAT_RESULT,
                                           "model.unit.sinkShipByBombardment",
                                           "%colony%", attackerColony.getName(),
                                           "%unit%", sinkingShip.getName(),
                                           "%nation%", nation);
            sinkingShip.addModelMessage(sinkingShip,
                                        ModelMessage.MessageType.COMBAT_RESULT,
                                        "model.unit.sinkShipByBombardment",
                                        "%colony%", attackerColony.getName(),
                                        "%unit%", sinkingShip.getName(),
                                        "%nation%", nation);
        } else if (attackerUnit != null) {
            String attackerNation = attackerUnit.getOwner().getNationAsString();
            attackerUnit.addModelMessage(attackerUnit,
                                         ModelMessage.MessageType.COMBAT_RESULT,
                                         "model.unit.enemyShipSunk",
                                         "%unit%", attackerUnit.getName(),
                                         "%enemyUnit%", sinkingShip.getName(),
                                         "%enemyNation%", nation);
            sinkingShip.addModelMessage(sinkingShip,
                                        ModelMessage.MessageType.COMBAT_RESULT,
                                        "model.unit.shipSunk",
                                        "%unit%", sinkingShip.getName(),
                                        "%enemyUnit%", attackerUnit.getName(),
                                        "%enemyNation%", attackerNation);
        }
        sinkingShip.dispose();
    }
,
>
, <(startLine=224 endLine=239 srcPath=/root/NewExperiment/freecolFilter/00888/src/net/sf/freecol/common/networking/Message.java)
    public static void createError(XMLStreamWriter out, String messageID, String message) {
        try {
            out.writeStartElement("error");

            if (messageID != null && !messageID.equals("")) {
                out.writeAttribute("messageID", messageID);
            }

            if (message != null && !message.equals("")) {
                out.writeAttribute("message", message);
            }
            out.writeEndElement();
        } catch (XMLStreamException e) {
            logger.warning("Could not send error message.");
        }
    }
,
(startLine=226 endLine=241 srcPath=/root/NewExperiment/freecolFilter/00888/src/net/sf/freecol/common/networking/DOMMessage.java)
    public static void createError(XMLStreamWriter out, String messageID, String message) {
        try {
            out.writeStartElement("error");

            if (messageID != null && !messageID.equals("")) {
                out.writeAttribute("messageID", messageID);
            }

            if (message != null && !message.equals("")) {
                out.writeAttribute("message", message);
            }
            out.writeEndElement();
        } catch (XMLStreamException e) {
            logger.warning("Could not send error message.");
        }
    }
,
>
, <(startLine=167 endLine=180 srcPath=/root/NewExperiment/freecolFilter/00203/src/net/sf/freecol/client/gui/TilePopup.java)
    private void addUnit(Unit unit, boolean enabled, boolean indent) {
        String text = (indent ? "    " : "") + unit.toString() + " ( " + unit.getOccupationIndicator() + " )";
        JMenuItem menuItem = new JMenuItem(text);
        menuItem.setActionCommand(Unit.getXMLElementTagName() + unit.getID());
        menuItem.addActionListener(this);
        if (indent) {
            menuItem.setFont(menuItem.getFont().deriveFont(Font.ITALIC));
        }
        if (!enabled) {
            menuItem.setEnabled(false);
        }
        add(menuItem);
        hasAnItem = true;
    }
,
(startLine=189 endLine=202 srcPath=/root/NewExperiment/freecolFilter/00203/src/net/sf/freecol/client/gui/TilePopup.java)
    private void addGoods(Goods goods, boolean enabled, boolean indent) {
        String text = (indent ? "    " : "") + goods.toString();
        JMenuItem menuItem = new JMenuItem(text);
        menuItem.setActionCommand(Goods.getXMLElementTagName());
        menuItem.addActionListener(this);
        if (indent) {
            menuItem.setFont(menuItem.getFont().deriveFont(Font.ITALIC));
        }
        if (!enabled) {
            menuItem.setEnabled(false);
        }
        add(menuItem);
        hasAnItem = true;
    }
,
>
, <(startLine=1984 endLine=2022 srcPath=/root/NewExperiment/freecolFilter/00662/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    boolean isTargetValidForSeekAndDestroy(Unit attacker, Unit defender) {
        if (defender == null) { // Sanitation
            return false;
        }
    	
        // A naval unit cannot attack a land unit and vice-versa
        if (attacker.isNaval() != defender.isNaval()) {
            return false;
        }

        if (attacker.isNaval()) { // Naval units can only fight at sea
            if (attacker.getTile() == null || attacker.getTile().isLand()
                || defender.getTile() == null || defender.getTile().isLand()) {
                return false;
            }
        }

        Player attackerPlayer = attacker.getOwner();
        Player defenderPlayer = defender.getOwner();
        if (attackerPlayer == defenderPlayer) { // Cannot attack own units
            return false;
        }

        boolean atWar = attackerPlayer.atWarWith(defenderPlayer);
        if (attackerPlayer.isEuropean()) {
            // If european, do not attack if not at war
            if (!atWar) {
                return false;
            }
        } else if (attackerPlayer.isIndian()) {
            // If indian, do not attack if not at war and not displeased
            // If displeased, it may do some attacks even if not at war
            if (!atWar && attackerPlayer.getTension(defenderPlayer)
                .getLevel().compareTo(Tension.Level.CONTENT) <= 0) {
                return false;
            }
        }
        return true;
    }
,
(startLine=354 endLine=402 srcPath=/root/NewExperiment/freecolFilter/00662/src/net/sf/freecol/server/ai/NewAIPlayer.java)
    boolean isTargetValidForSeekAndDestroy(Unit attacker, Unit defender){    	
    	// Sanitation
    	if(defender == null){
            return false;
    	}
    	
    	// Needs to check if the unit is in a settlement -> attacker.getTile() == null
    	boolean attackerInLand = true;
    	if(attacker.getTile() != null)
            attackerInLand = attacker.getTile().isLand();
    	
    	boolean defenderInLand = true;
    	if(defender.getTile() != null)
            defenderInLand = defender.getTile().isLand();
    		
    	// a naval unit cannot target a unit on land and vice-versa
        if(attackerInLand != defenderInLand){
            return false;
        }

        // a naval unit cannot target a land unit and vice-versa
        if(attacker.isNaval() != defender.isNaval()){
            return false;
        }

    	Player attackerPlayer = attacker.getOwner();
    	Player defenderPlayer = defender.getOwner();

        // cannot target own units
        if(attackerPlayer == defenderPlayer){
            return false;
        }

        boolean notAtWar = !attackerPlayer.atWarWith(defenderPlayer);
        // if european, can only attack units whose owners are at war
        if(attackerPlayer.isEuropean() && notAtWar){
            return false;
        }

        // if indian, cannot attack if not at war or displeased
        if(attackerPlayer.isIndian()){
            boolean inFriendlyMood = attackerPlayer.getTension(defenderPlayer).getLevel().compareTo(Tension.Level.CONTENT) >= 0;
        	
            if(notAtWar && inFriendlyMood)
            	return false;
        }

        return true;
    }
,
>
, <(startLine=293 endLine=305 srcPath=/root/NewExperiment/freecolFilter/00077/src/net/sf/freecol/common/networking/Message.java)
        for (int x=0; x<array.length; x++) {
            for (int y=0; y<array[0].length; y++) {
                if (data != null) {
                    if (data.charAt(x*array[0].length+y) == '1') {
                        array[x][y] = true;
                    } else {
                        array[x][y] = false;
                    }
                } else { // Old type of storing booleans:
                    array[x][y] = Boolean.valueOf(arrayElement.getAttribute("x" + Integer.toString(x) + "y" + Integer.toString(y))).booleanValue();
                }
            }
        }
,
(startLine=453 endLine=465 srcPath=/root/NewExperiment/freecolFilter/00077/src/net/sf/freecol/common/model/FreeColGameObject.java)
        for (int x=0; x<array.length; x++) {
            for (int y=0; y<array[0].length; y++) {
                if (data != null) {
                    if (data.charAt(x*array[0].length+y) == '1') {
                        array[x][y] = true;
                    } else {
                        array[x][y] = false;
                    }
                } else { // Old type of storing booleans:
                    array[x][y] = Boolean.valueOf(arrayElement.getAttribute("x" + Integer.toString(x) + "y" + Integer.toString(y))).booleanValue();
                }
            }
        }
,
>
, <(startLine=317 endLine=341 srcPath=/root/NewExperiment/freecolFilter/00458/src/net/sf/freecol/server/ai/REFAIPlayer.java)
    private void checkForREFDefeat() {
        logger.finest("Entering method checkForREFDefeat");

        List<Player> dominions = getDominionsAtWar();

        // Return if independence should not be granted:

        if (dominions.isEmpty()) {
            return;
        }

        if (!getPlayer().getSettlements().isEmpty()) {
            return;
        }

        if (hasManOfWar() && getNumberOfKingUnits() > 6) {
            return;
        }

        for (Player p : dominions) {
            Element giveIndependenceElement = Message.createNewRootElement("giveIndependence");
            giveIndependenceElement.setAttribute("player", p.getId());
            sendAndWaitSafely(giveIndependenceElement);
        }
    }
,
(startLine=284 endLine=311 srcPath=/root/NewExperiment/freecolFilter/00458/src/net/sf/freecol/server/ai/AIPlayer.java)
    private void checkForREFDefeat() {
        logger.finest("Entering method checkForREFDefeat");
        if (!getPlayer().isREF()) {
            return;
        }
        
        List<Player> dominions = getDominionsAtWar();
        
        // Return if independence should not be granted:
        
        if (dominions.isEmpty()) {
            return;
        }
        
        if (!getPlayer().getSettlements().isEmpty()) {
            return;
        }
        
        if (hasManOfWar() && getNumberOfKingLandUnits() > 6) {
            return;
        }
        
        for (Player p : dominions) {
            Element giveIndependenceElement = Message.createNewRootElement("giveIndependence");
            giveIndependenceElement.setAttribute("player", p.getId());
            sendAndWaitSafely(giveIndependenceElement);
        }
    }
,
>
, <(startLine=2017 endLine=2087 srcPath=/root/NewExperiment/freecolFilter/01235/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    public boolean acceptDiplomaticTrade(DiplomaticTrade agreement) {
        boolean validOffer = true;
        Stance stance = null;
        int value = 0;
        Iterator<TradeItem> itemIterator = agreement.iterator();
        while (itemIterator.hasNext()) {
            TradeItem item = itemIterator.next();
            if (item instanceof GoldTradeItem) {
                int gold = ((GoldTradeItem) item).getGold();
                if (item.getSource() == getPlayer()) {
                    value -= gold;
                } else {
                    value += gold;
                }
            } else if (item instanceof StanceTradeItem) {
                // TODO: evaluate whether we want this stance change
                stance = ((StanceTradeItem) item).getStance();
                switch (stance) {
                    case UNCONTACTED:
                        validOffer = false; //never accept invalid stance change
                        break;
                    case WAR: // always accept war without cost
                        break;
                    case CEASE_FIRE:
                        value -= 500;
                        break;
                    case PEACE:
                        if (!agreement.getSender()
                            .hasAbility(Ability.ALWAYS_OFFERED_PEACE)) {
                            // TODO: introduce some kind of counter in
                            // order to avoid Benjamin Franklin exploit
                            value -= 1000;
                        }
                        break;
                    case ALLIANCE:
                        value -= 2000;
                        break;
                    }

            } else if (item instanceof ColonyTradeItem) {
                // TODO: evaluate whether we might wish to give up a colony
                if (item.getSource() == getPlayer()) {
                    validOffer = false;
                    break;
                } else {
                    value += 1000;
                }
            } else if (item instanceof UnitTradeItem) {
                // TODO: evaluate whether we might wish to give up a unit
                if (item.getSource() == getPlayer()) {
                    validOffer = false;
                    break;
                } else {
                    value += 100;
                }
            } else if (item instanceof GoodsTradeItem) {
                Goods goods = ((GoodsTradeItem) item).getGoods();
                if (item.getSource() == getPlayer()) {
                    value -= getPlayer().getMarket().getBidPrice(goods.getType(), goods.getAmount());
                } else {
                    value += getPlayer().getMarket().getSalePrice(goods.getType(), goods.getAmount());
                }
            }
        }
        if (validOffer) {
            logger.info("Trade value is " + value + ", accept if >=0");
        } else {
            logger.info("Trade offer is considered invalid!");
        }
        return (value>=0)&&validOffer;
    }
,
(startLine=750 endLine=823 srcPath=/root/NewExperiment/freecolFilter/01235/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    public boolean acceptDiplomaticTrade(DiplomaticTrade agreement) {
        boolean validOffer = true;
        Stance stance = null;
        int value = 0;
        Iterator<TradeItem> itemIterator = agreement.iterator();
        while (itemIterator.hasNext()) {
            TradeItem item = itemIterator.next();
            if (item instanceof GoldTradeItem) {
                int gold = ((GoldTradeItem) item).getGold();
                if (item.getSource() == getPlayer()) {
                    value -= gold;
                } else {
                    value += gold;
                }
            } else if (item instanceof StanceTradeItem) {
                // TODO: evaluate whether we want this stance change
                stance = ((StanceTradeItem) item).getStance();
                switch (stance) {
                    case UNCONTACTED:
                        // Invalid, never accept.
                        validOffer = false;
                        break;
                    case WAR: // Always accept war without cost.
                        break;
                    case CEASE_FIRE:
                        value -= 500;
                        break;
                    case PEACE:
                        if (!agreement.getSender()
                            .hasAbility(Ability.ALWAYS_OFFERED_PEACE)) {
                            // TODO: introduce some kind of counter in
                            // order to avoid Benjamin Franklin exploit.
                            value -= 1000;
                        }
                        break;
                    case ALLIANCE:
                        value -= 2000;
                        break;
                    }

            } else if (item instanceof ColonyTradeItem) {
                // TODO: evaluate whether we might wish to give up a colony
                if (item.getSource() == getPlayer()) {
                    validOffer = false;
                    break;
                } else {
                    value += 1000;
                }
            } else if (item instanceof UnitTradeItem) {
                // TODO: evaluate whether we might wish to give up a unit
                if (item.getSource() == getPlayer()) {
                    validOffer = false;
                    break;
                } else {
                    value += 100;
                }
            } else if (item instanceof GoodsTradeItem) {
                Goods goods = ((GoodsTradeItem) item).getGoods();
                if (item.getSource() == getPlayer()) {
                    value -= getPlayer().getMarket()
                        .getBidPrice(goods.getType(), goods.getAmount());
                } else {
                    value += getPlayer().getMarket()
                        .getSalePrice(goods.getType(), goods.getAmount());
                }
            }
        }
        if (validOffer) {
            logger.info("Trade value is " + value + ", accept if >=0");
        } else {
            logger.info("Trade offer is considered invalid!");
        }
        return (value >= 0) && validOffer;
    }
,
>
, <(startLine=302 endLine=347 srcPath=/root/NewExperiment/freecolFilter/00757/src/net/sf/freecol/server/ai/NewAIPlayer.java)
    int getUnitSeekAndDestroyMissionValue(Unit unit, Tile newTile, int turns) {
        logger.finest("Entering method getUnitSeekAndDestroyMissionValue");

        Unit defender = newTile.getDefendingUnit(unit);

        if(!isTargetValidForSeekAndDestroy(unit, defender)){
            return Integer.MIN_VALUE;
        }

        int value = 10020;
        CombatModel combatModel = unit.getGame().getCombatModel();

        if (getBestTreasureTrain(newTile) != null) {
            value += Math.min(getBestTreasureTrain(newTile).getTreasureAmount() / 10, 50);
        }
        if (defender.getType().getOffence() > 0 &&
            newTile.getSettlement() == null) {
            value += 200 - combatModel.getDefencePower(unit, defender) * 2 - turns * 50;
        }

        value += combatModel.getOffencePower(defender, unit) -
            combatModel.getDefencePower(defender, unit);
        value -= turns * 10;

        if (!defender.isNaval()) {
            if (defender.hasAbility("model.ability.expertSoldier")
                && !defender.isArmed()) {
                value += 10 - combatModel.getDefencePower(unit, defender) * 2 - turns * 25;
            }
            if (newTile.getSettlement() != null) {
                value += 300;
                Iterator<Unit> dp = newTile.getUnitIterator();
                while (dp.hasNext()) {
                    Unit u = dp.next();
                    if (u.isDefensiveUnit()) {
                        if (combatModel.getDefencePower(unit, u) > combatModel.getOffencePower(unit, u)) {
                            value -= 100 * (combatModel.getDefencePower(unit, u) - combatModel.getOffencePower(unit, u));
                        } else {
                            value -= combatModel.getDefencePower(unit, u);
                        }
                    }
                }
            }
        }
        return Math.max(0, value);
    }
,
(startLine=1047 endLine=1092 srcPath=/root/NewExperiment/freecolFilter/00757/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    int getUnitSeekAndDestroyMissionValue(Unit unit, Tile newTile, int turns) {
        logger.finest("Entering method getUnitSeekAndDestroyMissionValue");
        
        Unit defender = newTile.getDefendingUnit(unit);
        
        if(!isTargetValidForSeekAndDestroy(unit, defender)){
        	return Integer.MIN_VALUE;
        }
        
        int value = 10020;
        CombatModel combatModel = unit.getGame().getCombatModel();
        
        if (getBestTreasureTrain(newTile) != null) {
        	value += Math.min(getBestTreasureTrain(newTile).getTreasureAmount() / 10, 50);
        }
        if (defender.getType().getOffence() > 0 &&
        		newTile.getSettlement() == null) {
        	value += 200 - combatModel.getDefencePower(unit, defender) * 2 - turns * 50;
        }
            
        value += combatModel.getOffencePower(defender, unit) -
              combatModel.getDefencePower(defender, unit);
        value -= turns * 10;
 
        if (!defender.isNaval()) {
        	if (defender.hasAbility("model.ability.expertSoldier")
                    && !defender.isArmed()) {
                value += 10 - combatModel.getDefencePower(unit, defender) * 2 - turns * 25;
            }
            if (newTile.getSettlement() != null) {
                value += 300;
                Iterator<Unit> dp = newTile.getUnitIterator();
                while (dp.hasNext()) {
                    Unit u = dp.next();
                    if (u.isDefensiveUnit()) {
                        if (combatModel.getDefencePower(unit, u) > combatModel.getOffencePower(unit, u)) {
                            value -= 100 * (combatModel.getDefencePower(unit, u) - combatModel.getOffencePower(unit, u));
                        } else {
                            value -= combatModel.getDefencePower(unit, u);
                        }
                    }
                }
            }
        }   
        return Math.max(0, value);
    }
,
(startLine=1967 endLine=2014 srcPath=/root/NewExperiment/freecolFilter/00757/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    int getUnitSeekAndDestroyMissionValue(Unit unit, Tile newTile, int turns) {
        logger.finest("Entering method getUnitSeekAndDestroyMissionValue");

        Unit defender = newTile.getDefendingUnit(unit);

        if(!isTargetValidForSeekAndDestroy(unit, defender)){
        	return Integer.MIN_VALUE;
        }

        int value = 10020;
        CombatModel combatModel = unit.getGame().getCombatModel();

        if (getBestTreasureTrain(newTile) != null) {
        	value += Math.min(getBestTreasureTrain(newTile).getTreasureAmount() / 10, 50);
        }
        if (defender.getType().getOffence() > 0 &&
        		newTile.getSettlement() == null) {
        	value += 200 - combatModel.getDefencePower(unit, defender) * 2 - turns * 50;
        }

        value += combatModel.getOffencePower(defender, unit) -
              combatModel.getDefencePower(defender, unit);
        
        // Take distance to target into account
        value -= turns * 100;

        if (!defender.isNaval()) {
        	if (defender.hasAbility("model.ability.expertSoldier")
                    && !defender.isArmed()) {
                value += 10 - combatModel.getDefencePower(unit, defender) * 2 - turns * 25;
            }
            if (newTile.getSettlement() != null) {
                value += 300;
                Iterator<Unit> dp = newTile.getUnitIterator();
                while (dp.hasNext()) {
                    Unit u = dp.next();
                    if (u.isDefensiveUnit()) {
                        if (combatModel.getDefencePower(unit, u) > combatModel.getOffencePower(unit, u)) {
                            value -= 100 * (combatModel.getDefencePower(unit, u) - combatModel.getOffencePower(unit, u));
                        } else {
                            value -= combatModel.getDefencePower(unit, u);
                        }
                    }
                }
            }
        }
        return Math.max(0, value);
    }
,
>
, <(startLine=2038 endLine=2064 srcPath=/root/NewExperiment/freecolFilter/01429/src/net/sf/freecol/common/model/Tile.java)
    public StringTemplate getLocationLabel() {
        if (settlement != null) return settlement.getLocationLabel();

        Settlement nearSettlement = null;
        for (Tile tile : getSurroundingTiles(NEAR_RADIUS)) {
            nearSettlement = tile.getSettlement();
            if (nearSettlement != null
                && nearSettlement.getName() != null) {
                String name = nearSettlement.getName();
                Direction d = Map.getRoughDirection(tile, this);
                StringTemplate l = StringTemplate.template("nearLocation")
                    .add("%direction%", d.getNameKey())
                    .addName("%location%", name);
                return StringTemplate.template("nameLocation")
                    .add("%name%", ((type == null) ? "unexplored"
                            : type.getNameKey()))
                    .addStringTemplate("%location%", l);
            }
        }
        if (region != null && region.getName() != null) {
            return StringTemplate.template("nameLocation")
                .add("%name%", type.getNameKey())
                .add("%location%", region.getNameKey());
        } else {
            return StringTemplate.key(type.getNameKey());
        }
    }
,
(startLine=2069 endLine=2095 srcPath=/root/NewExperiment/freecolFilter/01429/src/net/sf/freecol/common/model/Tile.java)
    public StringTemplate getLocationLabelFor(Player player) {
        if (settlement != null) return settlement.getLocationLabelFor(player);

        Settlement nearSettlement = null;
        for (Tile tile : getSurroundingTiles(NEAR_RADIUS)) {
            nearSettlement = tile.getSettlement();
            if (nearSettlement != null) {
                StringTemplate name
                    = nearSettlement.getLocationLabelFor(player);
                Direction d = Map.getRoughDirection(tile, this);
                StringTemplate l = StringTemplate.template("nearLocation")
                    .add("%direction%", d.getNameKey())
                    .addStringTemplate("%location%", name);
                return StringTemplate.template("nameLocation")
                    .add("%name%", ((type == null) ? "unexplored"
                            : type.getNameKey()))
                    .addStringTemplate("%location%", l);
            }
        }
        if (region != null && region.getName() != null) {
            return StringTemplate.template("nameLocation")
                .add("%name%", type.getNameKey())
                .addStringTemplate("%location%", region.getLabel());
        } else {
            return StringTemplate.key(type.getNameKey());
        }
    }
,
>
, <(startLine=96 endLine=141 srcPath=/root/NewExperiment/freecolFilter/01308/src/net/sf/freecol/common/networking/Message.java)
    private Message(InputSource inputSource) throws SAXException, IOException {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        Document tempDocument = null;
        boolean dumpMsgOnError
            = FreeColDebugger.isInDebugMode(FreeColDebugger.DebugMode.COMMS);
        if (dumpMsgOnError) {
            /*
             * inputSource.setByteStream( new
             * ReplayableInputStream(inputSource.getByteStream()) );
             * 
             */
            inputSource.setByteStream(new BufferedInputStream(inputSource.getByteStream()));

            inputSource.getByteStream().mark(1000000);
        }

        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            tempDocument = builder.parse(inputSource);
        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            logger.log(Level.WARNING, "Parser error", pce);
        } catch (SAXException se) {
            throw se;
        } catch (IOException ie) {
            throw ie;
        } catch (ArrayIndexOutOfBoundsException e) {
            // Xerces throws ArrayIndexOutOfBoundsException when it barfs on
            // some FreeCol messages. I'd like to see the messages upon which
            // it barfs
            if (dumpMsgOnError) {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                inputSource.getByteStream().reset();
                while (true) {
                    int i = inputSource.getByteStream().read();
                    if (-1 == i) {
                        break;
                    }
                    baos.write(i);
                }
                logger.severe(baos.toString());
            }
            throw e;
        }
        document = tempDocument;
    }
,
(startLine=102 endLine=146 srcPath=/root/NewExperiment/freecolFilter/01308/src/net/sf/freecol/common/networking/DOMMessage.java)
        throws SAXException, IOException {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        Document tempDocument = null;
        boolean dumpMsgOnError = true;
        if (dumpMsgOnError) {
            /*
             * inputSource.setByteStream( new
             * ReplayableInputStream(inputSource.getByteStream()) );
             */
            inputSource.setByteStream(new BufferedInputStream(inputSource.getByteStream()));

            inputSource.getByteStream().mark(1000000);
        }

        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            tempDocument = builder.parse(inputSource);
        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            logger.log(Level.WARNING, "Parser error", pce);
        } catch (SAXException se) {
            throw se;
        } catch (IOException ie) {
            throw ie;
        } catch (ArrayIndexOutOfBoundsException e) {
            // Xerces throws ArrayIndexOutOfBoundsException when it barfs on
            // some FreeCol messages. I'd like to see the messages upon which
            // it barfs
            if (dumpMsgOnError) {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                inputSource.getByteStream().reset();
                while (true) {
                    int i = inputSource.getByteStream().read();
                    if (-1 == i) {
                        break;
                    }
                    baos.write(i);
                }
                logger.severe(baos.toString());
            }
            throw e;
        }

        document = tempDocument;
    }
,
>
, <(startLine=1050 endLine=1067 srcPath=/root/NewExperiment/freecolFilter/00079/src/net/sf/freecol/common/model/Player.java)
        while (tileIterator.hasNext()) {
            Tile t = map.getTile((Map.Position) tileIterator.next());

            if (t != null && t.getFirstUnit() != null && t.getFirstUnit().getOwner().equals(this)) {
                Iterator unitIterator = t.getUnitIterator();
                while (unitIterator.hasNext()) {
                    Unit u = (Unit) unitIterator.next();

                    Iterator childUnitIterator = u.getUnitIterator();
                    while (childUnitIterator.hasNext()) {
                        Unit childUnit = (Unit) childUnitIterator.next();
                        units.add(childUnit);
                    }

                    units.add(u);
                }
            }
        }
,
(startLine=1756 endLine=1777 srcPath=/root/NewExperiment/freecolFilter/00079/src/net/sf/freecol/common/model/Player.java)
            while (tileIterator.hasNext()) {
                Tile t = map.getTile((Map.Position) tileIterator.next());

                if (t != null && t.getFirstUnit() != null && t.getFirstUnit().getOwner().equals(owner)) {
                    Iterator unitIterator = t.getUnitIterator();
                    while (unitIterator.hasNext()) {
                        Unit u = (Unit) unitIterator.next();

                        Iterator childUnitIterator = u.getUnitIterator();
                        while (childUnitIterator.hasNext()) {
                            Unit childUnit = (Unit) childUnitIterator.next();

                            if (isActive(childUnit)) {
                                units.add(childUnit);
                            }
                        }
                        if (isActive(u)) {
                            units.add(u);
                        }
                    }
                }
            } 
,
>
, <(startLine=181 endLine=198 srcPath=/root/NewExperiment/freecolFilter/00486/src/net/sf/freecol/client/control/InGameController.java)
                public void run() {
                    try {
                    
                        freeColClient.getFreeColServer().saveGame(file, freeColClient.getMyPlayer().getName());
                        SwingUtilities.invokeLater(new Runnable() {
                                public void run() {
                                    canvas.closeStatusPanel();
                                    canvas.requestFocusInWindow();
                                }
                            });
                    } catch (IOException e) {
                        SwingUtilities.invokeLater(new Runnable() {
                                public void run() {
                                    canvas.errorMessage("couldNotSaveGame");
                                }
                            });
                    }
                }
,
(startLine=202 endLine=218 srcPath=/root/NewExperiment/freecolFilter/00486/src/net/sf/freecol/client/control/MapEditorController.java)
            public void run() {
                try {
                    freeColClient.getFreeColServer().saveGame(file, "mapEditor");
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            canvas.closeStatusPanel();
                            canvas.requestFocusInWindow();
                        }
                    });
                } catch (IOException e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            canvas.errorMessage("couldNotSaveGame");
                        }
                    });
                }
            }
,
>
, <(startLine=545 endLine=567 srcPath=/root/NewExperiment/freecolFilter/00773/src/net/sf/freecol/server/ai/NewAIPlayer.java)
        } else {
            int price = registered.intValue();
            if (price < 0 || price == gold) {
                return price;
            } else if (gold < (price * 9) / 10) {
                logger.warning("Cheating attempt: sending a offer too low");
                sessionRegister.put(goldKey, new Integer(-1));
                return NetworkConstants.NO_TRADE;
            } else {
                int haggling = 1;
                if (sessionRegister.containsKey(hagglingKey)) {
                    haggling = sessionRegister.get(hagglingKey).intValue();
                }
                if (getAIRandom().nextInt(3 + haggling) <= 3) {
                    sessionRegister.put(goldKey, new Integer(gold));
                    sessionRegister.put(hagglingKey, new Integer(haggling + 1));
                    return gold;
                } else {
                    sessionRegister.put(goldKey, new Integer(-1));
                    return NetworkConstants.NO_TRADE;
                }
            }
        }
,
(startLine=536 endLine=558 srcPath=/root/NewExperiment/freecolFilter/00773/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
        } else {
            int price = registered.intValue();
            if (price < 0 || price == gold) {
                return price;
            } else if (gold < (price * 9) / 10) {
                logger.warning("Cheating attempt: sending a offer too low");
                sessionRegister.put(goldKey, new Integer(-1));
                return NetworkConstants.NO_TRADE;
            } else {
                int haggling = 1;
                if (sessionRegister.containsKey(hagglingKey)) {
                    haggling = sessionRegister.get(hagglingKey).intValue();
                }
                if (getAIRandom().nextInt(3 + haggling) <= 3) {
                    sessionRegister.put(goldKey, new Integer(gold));
                    sessionRegister.put(hagglingKey, new Integer(haggling + 1));
                    return gold;
                } else {
                    sessionRegister.put(goldKey, new Integer(-1));
                    return NetworkConstants.NO_TRADE;
                }
            }
        }
,
>
, <(startLine=87 endLine=110 srcPath=/root/NewExperiment/freecolFilter/01600/src/net/sf/freecol/common/networking/MoveToMessage.java)
                          Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);
        final Game game = player.getGame();

        Unit unit;
        try {
            unit = player.getOurFreeColGameObject(this.unitId, Unit.class);
        } catch (Exception e) {
            return serverPlayer.clientError(e.getMessage())
                .build(serverPlayer);
        }

        Location destination = game.findFreeColLocation(this.destinationId);
        if (destination == null) {
            return serverPlayer.clientError("Not a location: "
                + this.destinationId)
                .build(serverPlayer);
        }

        // Proceed to move.
        return server.getInGameController()
            .moveTo(serverPlayer, unit, destination)
            .build(serverPlayer);
    }
,
(startLine=84 endLine=105 srcPath=/root/NewExperiment/freecolFilter/01600/src/net/sf/freecol/common/networking/SetDestinationMessage.java)
    public Element handle(FreeColServer server, Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);
        final Game game = serverPlayer.getGame();

        Unit unit;
        try {
            unit = serverPlayer.getOurFreeColGameObject(this.unitId,
                                                        Unit.class);
        } catch (Exception e) {
            return serverPlayer.clientError(e.getMessage())
                .build(serverPlayer);
        }

        // destination == null is OK.
        Location destination = (this.destinationId == null) ? null
            : game.findFreeColLocation(this.destinationId);

        // Set destination
        return server.getInGameController()
            .setDestination(serverPlayer, unit, destination)
            .build(serverPlayer);
    }
,
>
, <(startLine=274 endLine=321 srcPath=/root/NewExperiment/freecolFilter/00546/src/net/sf/freecol/client/control/MapEditorController.java)
            public void run() {
                FreeColServer freeColServer = null;
                try {                    
                    freeColServer = new FreeColServer(new FreeColSavegameFile(theFile), false, false, 0, "MapEditor");
                    freeColClient.setFreeColServer(freeColServer);
                    freeColClient.setGame(freeColServer.getGame());
                    SwingUtilities.invokeLater( new Runnable() {
                        public void run() {               
                            canvas.closeStatusPanel();
                            freeColClient.getGUI().setFocus(1, 1);
                            freeColClient.getActionManager().update();
                            canvas.refresh();
                        }
                    } );                    
                } catch (NoRouteToServerException e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            freeColClient.getCanvas().closeMainPanel();
                            freeColClient.getCanvas().showMainPanel();
                        }
                    });
                    SwingUtilities.invokeLater( new ErrorJob("server.noRouteToServer") );
                } catch (FileNotFoundException e) {                    
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            freeColClient.getCanvas().closeMainPanel();
                            freeColClient.getCanvas().showMainPanel();
                        }
                    });
                    SwingUtilities.invokeLater( new ErrorJob("fileNotFound") );
                } catch (IOException e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            freeColClient.getCanvas().closeMainPanel();
                            freeColClient.getCanvas().showMainPanel();
                        }
                    });
                    SwingUtilities.invokeLater( new ErrorJob("server.couldNotStart") );
                } catch (FreeColException e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            freeColClient.getCanvas().closeMainPanel();
                            freeColClient.getCanvas().showMainPanel();
                        }
                    });
                    SwingUtilities.invokeLater( new ErrorJob(e.getMessage()) );                    
                }
            }
,
(startLine=435 endLine=483 srcPath=/root/NewExperiment/freecolFilter/00546/src/net/sf/freecol/client/control/ConnectController.java)
            public void run() {
                FreeColServer freeColServer = null;
                try {
                    final FreeColSavegameFile savegame = new FreeColSavegameFile(theFile);
                    freeColServer = new FreeColServer(savegame, publicServer, singleplayer, port, name);
                    freeColClient.setFreeColServer(freeColServer);
                    final String username = freeColServer.getOwner();
                    freeColClient.setSingleplayer(singleplayer);
                    SwingUtilities.invokeLater( new Runnable() {
                        public void run() {
                            ResourceManager.setScenarioMapping(savegame.getResourceMapping());
                            login(username, "127.0.0.1", FreeCol.getDefaultPort());
                            canvas.closeStatusPanel();
                        }
                    } );                    
                } catch (NoRouteToServerException e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            freeColClient.getCanvas().closeMainPanel();
                            freeColClient.getCanvas().showMainPanel();
                        }
                    });
                    SwingUtilities.invokeLater( new ErrorJob("server.noRouteToServer") );
                } catch (FileNotFoundException e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            freeColClient.getCanvas().closeMainPanel();
                            freeColClient.getCanvas().showMainPanel();
                        }
                    });
                    SwingUtilities.invokeLater( new ErrorJob("fileNotFound") );
                } catch (IOException e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            freeColClient.getCanvas().closeMainPanel();
                            freeColClient.getCanvas().showMainPanel();
                        }
                    });
                    SwingUtilities.invokeLater( new ErrorJob("server.couldNotStart") );
                } catch (FreeColException e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            freeColClient.getCanvas().closeMainPanel();
                            freeColClient.getCanvas().showMainPanel();
                        }
                    });
                    SwingUtilities.invokeLater( new ErrorJob(e.getMessage()) );                    
                }
            }
,
>
, <(startLine=161 endLine=172 srcPath=/root/NewExperiment/freecolFilter/00295/src/net/sf/freecol/common/model/IndianNationType.java)
                public void invokeOn(Node node) {
                    if ("ability".equals(node.getNodeName())) {
                        String abilityId = Xml.attribute(node, "id");
                        boolean value = Xml.booleanAttribute(node, "value");
                        setAbility(abilityId, value);
                    } else if (Modifier.getXMLElementTagName().equals(node.getNodeName())) {
                        Modifier modifier = new Modifier((Element) node);
                        setModifier(modifier.getId(), modifier);
                    } else if ("skill".equals(node.getNodeName())) {
                        skills.add(Xml.attribute(node, "id"));
                    }
                }
,
(startLine=130 endLine=143 srcPath=/root/NewExperiment/freecolFilter/00295/src/net/sf/freecol/common/model/BuildingType.java)
            public void invokeOn(Node node) {
                String childName = node.getNodeName();

                if ("ability".equals(childName)) {
                    String abilityId = Xml.attribute(node, "id");
                    boolean value = Xml.booleanAttribute(node, "value");
                    setAbility(abilityId, value);
                } else if ("required-population".equals(childName)) {
                    populationRequired = Xml.intAttribute(node, "value");
                } else if (Modifier.getXMLElementTagName().equals(childName)) {
                    Modifier modifier = new Modifier((Element) node);
                    setModifier(modifier.getId(), modifier);
                }
              }
,
>
, <(startLine=232 endLine=258 srcPath=/root/NewExperiment/freecolFilter/01180/src/net/sf/freecol/common/model/PlayerExploredTile.java)
    public int checkIntegrity(boolean fix) {
        int result = 1;
        if (tileItems != null) {
            for (TileItem ti : new ArrayList<TileItem>(tileItems)) {
                int integ = ti.checkIntegrity(fix);
                if (fix) {
                    // @compat 0.10.5
                    // Somewhere around 0.10.5 there were maps with LCRs
                    // that reference the wrong tile.
                    if (ti.getTile() != tile) {
                        logger.warning("Fixing improvement tile at: " + tile
                                       + " / " + ti.getId());
                        ti.setLocation(tile);
                        integ = Math.min(integ, 0);
                    }
                    // end @compat
                    if (integ < 0) {
                        logger.warning("Removing broken improvement at: "
                                       + tile);
                        tileItems.remove(ti);
                    }
                }
                result = Math.min(result, integ);
            }
        }
        return result;
    }
,
(startLine=536 endLine=561 srcPath=/root/NewExperiment/freecolFilter/01180/src/net/sf/freecol/common/model/TileItemContainer.java)
    public int checkIntegrity(boolean fix) {
        int result = 1;
        for (TileItem ti : new ArrayList<TileItem>(tileItems)) {
            int integ = ti.checkIntegrity(fix);
            if (fix) {
                // @compat 0.10.5
                // Somewhere around 0.10.5 there were maps with LCRs
                // that reference the wrong tile.
                if (ti.getTile() != tile) {
                    logger.warning("Fixing improvement tile at: " + tile
                                   + " / " + ti.getId());
                    ti.setLocation(tile);
                    integ = Math.min(integ, 0);
                }
                // end @compat
                if (integ < 0) {
                    logger.warning("Removing broken improvement at: " + tile
                                   + " / " + ti.getId());
                    tileItems.remove(ti);
                    integ = 0;
                }
            }
            result = Math.min(result, integ);
        }
        return result;
    }
,
>
, <(startLine=1675 endLine=1693 srcPath=/root/NewExperiment/freecolFilter/00913/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (settlement != null) {
            // Do not cheat and look inside the settlement.
            // Just use visible facts about it.
            // TODO: if we are the REF and there is a significant Tory
            // population inside, assume traitors have briefed us.
            if (settlement instanceof Colony) {
                // Favour high population and weak fortifications.
                Colony colony = (Colony) settlement;
                value += 50 * colony.getUnitCount();
                if (colony.hasStockade()) {
                    value -= 1000 * colony.getStockade().getLevel();
                }
            } else if (settlement instanceof IndianSettlement) {
                // Favour the most hostile settlements
                IndianSettlement is = (IndianSettlement) settlement;
                Tension tension = is.getAlarm(unit.getOwner());
                if (tension != null) value += tension.getValue();
            }
        } else if (defender != null) {
,
(startLine=804 endLine=822 srcPath=/root/NewExperiment/freecolFilter/00913/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        if (settlement != null) {
            // Do not cheat and look inside the settlement.
            // Just use visible facts about it.
            // TODO: if we are the REF and there is a significant Tory
            // population inside, assume traitors have briefed us.
            if (settlement instanceof Colony) {
                // Favour high population and weak fortifications.
                Colony colony = (Colony) settlement;
                value += 50 * colony.getUnitCount();
                if (colony.hasStockade()) {
                    value -= 1000 * colony.getStockade().getLevel();
                }
            } else if (settlement instanceof IndianSettlement) {
                // Favour the most hostile settlements
                IndianSettlement is = (IndianSettlement) settlement;
                Tension tension = is.getAlarm(unit.getOwner());
                if (tension != null) value += tension.getValue();
            }
        } else if (defender != null) {
,
>
, <(startLine=381 endLine=394 srcPath=/root/NewExperiment/freecolFilter/00854/src/net/sf/freecol/server/ai/NewAIPlayer.java)
            if (newTile.getSettlement() != null) {
                value += 300;
                Iterator<Unit> dp = newTile.getUnitIterator();
                while (dp.hasNext()) {
                    Unit u = dp.next();
                    if (u.isDefensiveUnit()) {
                        if (combatModel.getDefencePower(unit, u) > combatModel.getOffencePower(unit, u)) {
                            value -= 100 * (combatModel.getDefencePower(unit, u) - combatModel.getOffencePower(unit, u));
                        } else {
                            value -= combatModel.getDefencePower(unit, u);
                        }
                    }
                }
            }
,
(startLine=1064 endLine=1077 srcPath=/root/NewExperiment/freecolFilter/00854/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            if (newTile.getSettlement() != null) {
                value += 300;
                Iterator<Unit> dp = newTile.getUnitIterator();
                while (dp.hasNext()) {
                    Unit u = dp.next();
                    if (u.isDefensiveUnit()) {
                        if (combatModel.getDefencePower(unit, u) > combatModel.getOffencePower(unit, u)) {
                            value -= 100 * (combatModel.getDefencePower(unit, u) - combatModel.getOffencePower(unit, u));
                        } else {
                            value -= combatModel.getDefencePower(unit, u);
                        }
                    }
                }
            }
,
>
, <(startLine=1072 endLine=1098 srcPath=/root/NewExperiment/freecolFilter/00499/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
                } else {
                    int thisThreat = 0;
                    if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MAJOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat += 2;
                            }
                        }
                    } else if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MINOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat++;
                            }
                        }
                    }
                    threat += thisThreat;
                    if (thisThreat > worstThreat) {
                        if (t.getSettlement() != null) {
                            bestTarget = t.getSettlement();
                        } else {
                            bestTarget = t.getFirstUnit();
                        }
                        worstThreat = thisThreat;
                    }
                }
,
(startLine=262 endLine=288 srcPath=/root/NewExperiment/freecolFilter/00499/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
                } else {
                    int thisThreat = 0;
                    if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MAJOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat += 2;
                            }
                        }
                    } else if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MINOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat++;
                            }
                        }
                    }
                    threat += thisThreat;
                    if (thisThreat > worstThreat) {
                        if (t.getSettlement() != null) {
                            bestTarget = t.getSettlement();
                        } else {
                            bestTarget = t.getFirstUnit();
                        }
                        worstThreat = thisThreat;
                    }
                }
,
>
, <(startLine=1356 endLine=1369 srcPath=/root/NewExperiment/freecolFilter/00763/src/net/sf/freecol/server/control/InGameController.java)
            try {
                int modifier = old.getTensionModifier(stance);
                player.setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           player.modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), player, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + player.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
,
(startLine=1374 endLine=1387 srcPath=/root/NewExperiment/freecolFilter/00763/src/net/sf/freecol/server/control/InGameController.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(player, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) player),
                           otherPlayer.modifyTension(player, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, player);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + player.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
,
>
, <(startLine=295 endLine=314 srcPath=/root/NewExperiment/freecolFilter/00493/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    public Iterator<Wish> getWishIterator() {
        ArrayList<Wish> wishList = new ArrayList<Wish>();
        Iterator<AIColony> ai = getAIColonyIterator();
        while (ai.hasNext()) {
            AIColony ac = ai.next();
            Iterator<Wish> wishIterator = ac.getWishIterator();
            while (wishIterator.hasNext()) {
                Wish w = wishIterator.next();
                wishList.add(w);
            }
        }
        Collections.sort(wishList, new Comparator<Wish>() {
            public int compare(Wish o1, Wish o2) {
                Integer a = o1.getValue();
                Integer b = o2.getValue();
                return b.compareTo(a);
            }
        });
        return wishList.iterator();
    }
,
(startLine=303 endLine=322 srcPath=/root/NewExperiment/freecolFilter/00493/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    public Iterator<Wish> getWishIterator() {
        ArrayList<Wish> wishList = new ArrayList<Wish>();
        Iterator<AIColony> ai = getAIColonyIterator();
        while (ai.hasNext()) {
            AIColony ac = ai.next();
            Iterator<Wish> wishIterator = ac.getWishIterator();
            while (wishIterator.hasNext()) {
                Wish w = wishIterator.next();
                wishList.add(w);
            }
        }
        Collections.sort(wishList, new Comparator<Wish>() {
            public int compare(Wish o1, Wish o2) {
                Integer a = o1.getValue();
                Integer b = o2.getValue();
                return b.compareTo(a);
            }
        });
        return wishList.iterator();
    }
,
(startLine=924 endLine=943 srcPath=/root/NewExperiment/freecolFilter/00493/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    public Iterator<Wish> getWishIterator() {
        ArrayList<Wish> wishList = new ArrayList<Wish>();
        Iterator<AIColony> ai = getAIColonyIterator();
        while (ai.hasNext()) {
            AIColony ac = ai.next();
            Iterator<Wish> wishIterator = ac.getWishIterator();
            while (wishIterator.hasNext()) {
                Wish w = wishIterator.next();
                wishList.add(w);
            }
        }
        Collections.sort(wishList, new Comparator<Wish>() {
                public int compare(Wish o1, Wish o2) {
                    Integer a = o1.getValue();
                    Integer b = o2.getValue();
                    return b.compareTo(a);
                }
            });
        return wishList.iterator();
    }
,
>
, <(startLine=174 endLine=186 srcPath=/root/NewExperiment/freecolFilter/01371/src/net/sf/freecol/server/generator/LandGenerator.java)
            do {
                x = (Utils.randomInt(logger, "ClassicW", random, width-preferredDistanceToEdge*4)) + preferredDistanceToEdge*2;
                y = (Utils.randomInt(logger, "ClassicH", random, height-preferredDistanceToEdge*4)) + preferredDistanceToEdge*2;
                failCounter++;
                //if landmass% is set to high, this loop may fail to find a free tile.
                //decrease necessary minimum over time, so that this process
                //will eventually come to an end.
                if (failCounter>100) {
                    failCounter=0;
                    minimumNumberOfTiles--;
                    break;
                }
            } while (map[x][y]);
,
(startLine=224 endLine=240 srcPath=/root/NewExperiment/freecolFilter/01371/src/net/sf/freecol/common/model/LandMap.java)
            do {
                x = (Utils.randomInt(logger, "ClassicW", random,
                        width - preferredDistanceToEdge * 4))
                    + preferredDistanceToEdge * 2;
                y = (Utils.randomInt(logger, "ClassicH", random,
                        height - preferredDistanceToEdge * 4))
                    + preferredDistanceToEdge * 2;
                failCounter++;
                // If landmass% is set too high, this loop may fail to
                // find a free tile.  Decrease necessary minimum over
                // time, so that this process will eventually succeed.
                if (failCounter > 100) {
                    failCounter = 0;
                    minimumNumberOfTiles--;
                    break;
                }
            } while (map[x][y]);
,
>
, <(startLine=52 endLine=63 srcPath=/root/NewExperiment/freecolFilter/00342/test/src/net/sf/freecol/common/model/ModifierTest.java)
    public void testCombineAdditiveModifiers() {

        Modifier modifier1 = new Modifier("test", 3, Modifier.ADDITIVE);
        Modifier modifier2 = new Modifier("test", 4, Modifier.ADDITIVE);
        Modifier modifier = Modifier.combine(null, modifier1, modifier2);
        assertTrue(modifier.getType() == Modifier.ADDITIVE);
        assertTrue(modifier.applyTo(1) == 1 + 3 + 4);
        assertTrue(modifier.getModifiers().size() == 2);
        assertTrue(modifier.getModifiers().get(0) == modifier1);
        assertTrue(modifier.getModifiers().get(1) == modifier2);

    }
,
(startLine=77 endLine=88 srcPath=/root/NewExperiment/freecolFilter/00342/test/src/net/sf/freecol/common/model/ModifierTest.java)
    public void testCombinePercentageModifiers() {

        Modifier modifier1 = new Modifier("test", 3, Modifier.PERCENTAGE);
        Modifier modifier2 = new Modifier("test", 4, Modifier.PERCENTAGE);
        Modifier modifier = Modifier.combine(modifier1, modifier2, null);
        assertTrue(modifier.getType() == Modifier.PERCENTAGE);
        assertTrue(modifier.applyTo(100) == 107f);
        assertTrue(modifier.getModifiers().size() == 2);
        assertTrue(modifier.getModifiers().get(0) == modifier1);
        assertTrue(modifier.getModifiers().get(1) == modifier2);

    }
,
>
, <(startLine=72 endLine=93 srcPath=/root/NewExperiment/freecolFilter/01685/src/net/sf/freecol/common/networking/MoveToMessage.java)
                                   ServerPlayer serverPlayer) {
        final Game game = serverPlayer.getGame();
        final String unitId = getStringAttribute(UNIT_TAG);
        final String destinationId = getStringAttribute(DESTINATION_TAG);

        Unit unit;
        try {
            unit = serverPlayer.getOurFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return serverPlayer.clientError(e.getMessage());
        }

        Location destination = game.findFreeColLocation(destinationId);
        if (destination == null) {
            return serverPlayer.clientError("Not a location: "
                + destinationId);
        }

        // Proceed to move.
        return freeColServer.getInGameController()
            .moveTo(serverPlayer, unit, destination);
    }
,
(startLine=70 endLine=89 srcPath=/root/NewExperiment/freecolFilter/01685/src/net/sf/freecol/common/networking/SetDestinationMessage.java)
                                   ServerPlayer serverPlayer) {
        final Game game = freeColServer.getGame();
        final String unitId = getStringAttribute(UNIT_TAG);
        final String destinationId = getStringAttribute(DESTINATION_TAG);

        Unit unit;
        try {
            unit = serverPlayer.getOurFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return serverPlayer.clientError(e.getMessage());
        }

        // destination == null is OK.
        Location destination = (destinationId == null) ? null
            : game.findFreeColLocation(destinationId);

        // Set destination
        return freeColServer.getInGameController()
            .setDestination(serverPlayer, unit, destination);
    }
,
>
, <(startLine=518 endLine=541 srcPath=/root/NewExperiment/freecolFilter/00476/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    public int tradeProposition(Unit unit, Settlement settlement, Goods goods, int gold) {
        logger.finest("Entering method tradeProposition");
        if (settlement instanceof Colony) {
            Colony colony = (Colony) settlement;
            Player otherPlayer = unit.getOwner();
            // the client should have prevented this
            if (getPlayer().getStance(otherPlayer) == Stance.WAR) {
                return NetworkConstants.NO_TRADE;
            }
            // don't pay for more than fits in the warehouse
            int amount = colony.getWarehouseCapacity() - colony.getGoodsCount(goods.getType());
            amount = Math.min(amount, goods.getAmount());
            // get a good price
            Tension.Level tensionLevel = getPlayer().getTension(otherPlayer).getLevel();
            int percentage = (9 - tensionLevel.ordinal()) * 10;
            // what we could get for the goods in Europe (minus taxes)
            int netProfits = ((100 - getPlayer().getTax()) * getPlayer().getMarket().getSalePrice(goods.getType(), amount)) / 100;
            int price = (netProfits * percentage) / 100;
            return price;
        } else {
            logger.warning("ColonialAIPlayer shouldn't have indian settlement!");
            return NetworkConstants.NO_TRADE;
        }
    }
,
(startLine=602 endLine=619 srcPath=/root/NewExperiment/freecolFilter/00476/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
        } else if (settlement instanceof Colony) {
            Colony colony = (Colony) settlement;
            Player otherPlayer = unit.getOwner();
            // the client should have prevented this
            if (getPlayer().getStance(otherPlayer) == Stance.WAR) {
                return NetworkConstants.NO_TRADE;
            }
            // don't pay for more than fits in the warehouse
            int amount = colony.getWarehouseCapacity() - colony.getGoodsCount(goods.getType());
            amount = Math.min(amount, goods.getAmount());
            // get a good price
            Tension.Level tensionLevel = getPlayer().getTension(otherPlayer).getLevel();
            int percentage = (9 - tensionLevel.ordinal()) * 10;
            // what we could get for the goods in Europe (minus taxes)
            int netProfits = ((100 - getPlayer().getTax()) * getPlayer().getMarket().getSalePrice(goods.getType(), amount)) / 100;
            int price = (netProfits * percentage) / 100;
            return price;
        } else {
,
(startLine=865 endLine=883 srcPath=/root/NewExperiment/freecolFilter/00476/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    public int tradeProposition(Unit unit, Settlement settlement, Goods goods, int gold) {
        logger.finest("Entering method tradeProposition");
        Colony colony = (Colony) settlement;
        Player otherPlayer = unit.getOwner();
        // the client should have prevented this
        if (getPlayer().getStance(otherPlayer) == Stance.WAR) {
            return NetworkConstants.NO_TRADE;
        }
        // don't pay for more than fits in the warehouse
        int amount = colony.getWarehouseCapacity() - colony.getGoodsCount(goods.getType());
        amount = Math.min(amount, goods.getAmount());
        // get a good price
        Tension.Level tensionLevel = getPlayer().getTension(otherPlayer).getLevel();
        int percentage = (9 - tensionLevel.ordinal()) * 10;
        // what we could get for the goods in Europe (minus taxes)
        int netProfits = ((100 - getPlayer().getTax()) * getPlayer().getMarket().getSalePrice(goods.getType(), amount)) / 100;
        int price = (netProfits * percentage) / 100;
        return price;
    }
,
>
, <(startLine=470 endLine=520 srcPath=/root/NewExperiment/freecolFilter/01395/src/net/sf/freecol/client/gui/i18n/Messages.java)
        if (name == null) {
            if (nationId == null) {
                if (roleKey == null) {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.null.null.null.null")
                            .addStringTemplate("%type%", type);
                    } else {
                        ret = StringTemplate.template("unitFormat.null.null.null.equip")
                            .addStringTemplate("%type%", type)
                            .addName("%equipment%", equipment);
                    }
                } else {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.null.null.role.null")
                            .addStringTemplate("%type%", type)
                            .add("%role%", roleKey);
                    } else {
                        ret = StringTemplate.template("unitFormat.null.null.role.equip")
                            .addStringTemplate("%type%", type)
                            .add("%role%", roleKey)
                            .addName("%equipment%", equipment);
                    }
                }
            } else {
                if (roleKey == null) {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.null.nation.null.null")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId);
                    } else {
                        ret = StringTemplate.template("unitFormat.null.nation.null.equip")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .addName("%equipment%", equipment);
                    }
                } else {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.null.nation.role.null")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .add("%role%", roleKey);
                    } else {
                        ret = StringTemplate.template("unitFormat.null.nation.role.equip")
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .add("%role%", roleKey)
                            .addName("%equipment%", equipment);
                    }
                }
            }
        } else {
,
(startLine=520 endLine=578 srcPath=/root/NewExperiment/freecolFilter/01395/src/net/sf/freecol/client/gui/i18n/Messages.java)
        } else {
            if (nationId == null) {
                if (roleKey == null) {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.name.null.null.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type);
                    } else {
                        ret = StringTemplate.template("unitFormat.name.null.null.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .addName("%equipment%", equipment);
                    }
                } else {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.name.null.role.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%role%", roleKey);
                    } else {
                        ret = StringTemplate.template("unitFormat.name.null.role.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%role%", roleKey)
                            .addName("%equipment%", equipment);
                    }
                }
            } else {
                if (roleKey == null) {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.name.nation.null.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId);
                    } else {
                        ret = StringTemplate.template("unitFormat.name.nation.null.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .addName("%equipment%", equipment);
                    }
                } else {
                    if (equipment == null) {
                        ret = StringTemplate.template("unitFormat.name.nation.role.null")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .add("%role%", roleKey);
                    } else {
                        ret = StringTemplate.template("unitFormat.name.nation.role.equip")
                            .addName("%name%", name)
                            .addStringTemplate("%type%", type)
                            .add("%nation%", nationId)
                            .add("%role%", roleKey)
                            .addName("%equipment%", equipment);
                    }
                }
            }
        }
,
>
, <(startLine=3883 endLine=3891 srcPath=/root/NewExperiment/freecolFilter/01338/src/net/sf/freecol/common/model/Unit.java)
            if (horses && muskets) {
                if (owner.isIndian()) {
                    role = spec.getRole("model.role.nativeDragoon");
                } else if (owner.isREF() && hasAbility(Ability.REF_UNIT)) {
                    role = spec.getRole("model.role.cavalry");
                } else {
                    role = spec.getRole("model.role.dragoon");
                }
            } else if (horses) {
,
(startLine=3899 endLine=3907 srcPath=/root/NewExperiment/freecolFilter/01338/src/net/sf/freecol/common/model/Unit.java)
            } else if (muskets) {
                if (owner.isIndian()) {
                    role = spec.getRole("model.role.armedBrave");
                } else if (owner.isREF() && hasAbility(Ability.REF_UNIT)) {
                    role = spec.getRole("model.role.infantry");
                } else {
                    role = spec.getRole("model.role.soldier");
                }
            }
,
>
, <(startLine=2617 endLine=2627 srcPath=/root/NewExperiment/freecolFilter/00204/src/net/sf/freecol/client/control/InGameController.java)
		if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
			Element unitElement = (Element) reply.getChildNodes().item(0);
			Unit unit = (Unit) game.getFreeColGameObject(unitElement
					.getAttribute("ID"));
			if (unit == null) {
				unit = new Unit(game, unitElement);
			} else {
				unit.readFromXMLElement(unitElement);
			}
			europe.train(unit);
		} else {
,
(startLine=2702 endLine=2713 srcPath=/root/NewExperiment/freecolFilter/00204/src/net/sf/freecol/client/control/InGameController.java)
		if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
			Element unitElement = (Element) reply.getChildNodes().item(0);
			Unit unit = (Unit) game.getFreeColGameObject(unitElement
					.getAttribute("ID"));
			if (unit == null) {
				unit = new Unit(game, unitElement);
			} else {
				unit.readFromXMLElement(unitElement);
			}
			europe.recruit(slot, unit, Integer.parseInt(reply
					.getAttribute("newRecruitable")));
		} else {
,
>
, <(startLine=1938 endLine=1947 srcPath=/root/NewExperiment/freecolFilter/00361/src/net/sf/freecol/client/gui/GUI.java)
            } else {
                g.drawString(tileName.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);
                g.drawString(tileName.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);
                /* Takes to much resources:
                BufferedImage stringImage = createStringImage(g, tileName.substring(0, b), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - (stringImage.getHeight()) - 5, null);
                stringImage = createStringImage(g, tileName.substring(b+1), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - 5, null);
                */
            }
,
(startLine=1960 endLine=1969 srcPath=/root/NewExperiment/freecolFilter/00361/src/net/sf/freecol/client/gui/GUI.java)
            } else {
                g.drawString(tileOwner.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);
                g.drawString(tileOwner.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);
                /* Takes to much resources:
                BufferedImage stringImage = createStringImage(g, tileOwner.substring(0, b), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - (stringImage.getHeight()) - 5, null);
                stringImage = createStringImage(g, tileOwner.substring(b+1), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - 5, null);
                */
            }
,
(startLine=1982 endLine=1991 srcPath=/root/NewExperiment/freecolFilter/00361/src/net/sf/freecol/client/gui/GUI.java)
            } else {
                g.drawString(regionString.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);
                g.drawString(regionString.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);
                /* Takes to much resources:
                BufferedImage stringImage = createStringImage(g, tileOwner.substring(0, b), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - (stringImage.getHeight()) - 5, null);
                stringImage = createStringImage(g, tileOwner.substring(b+1), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - 5, null);
                */
            }
,
>
, <(startLine=681 endLine=692 srcPath=/root/NewExperiment/freecolFilter/01015/src/net/sf/freecol/common/model/Map.java)
                                     CostDecider costDecider) {
        if (unit == null) {
            throw new IllegalArgumentException("unit must not be null.");
        }
        if (start == null) {
            throw new IllegalArgumentException("start must not be null.");
        }

        PathNode path = search(unit, start, europeGoalDecider, costDecider,
                               INFINITY, null, null);
        return (path == null) ? null : path.next;
    }
,
(startLine=737 endLine=748 srcPath=/root/NewExperiment/freecolFilter/01015/src/net/sf/freecol/common/model/Map.java)
                           final int maxTurns, final Unit carrier) {
        if (unit == null) {
            throw new IllegalArgumentException("unit must not be null.");
        }
        if (start == null) {
            throw new IllegalArgumentException("start must not be null.");
        }

        PathNode path = search(unit, start, goalDecider, costDecider,
                               maxTurns, carrier, null);
        return (path == null) ? null : path.next;
    }
,
>
, <(startLine=704 endLine=709 srcPath=/root/NewExperiment/freecolFilter/00003/src/net/sf/freecol/client/gui/GUI.java)
                if (settlement instanceof Colony) {
                    int type = lib.getSettlementGraphicsType(settlement);

                    // Draw image of colony in center of the tile.
                    g.drawImage(lib.getColonyImage(type), x + (lib.getTerrainImageWidth(tile.getType()) - lib.getColonyImageWidth(type)) / 2, y + (lib.getTerrainImageHeight(tile.getType()) - lib.getColonyImageHeight(type)) / 2, null);
                } else if (settlement instanceof IndianSettlement) {
,
(startLine=709 endLine=714 srcPath=/root/NewExperiment/freecolFilter/00003/src/net/sf/freecol/client/gui/GUI.java)
                } else if (settlement instanceof IndianSettlement) {
                    int type = lib.getSettlementGraphicsType(settlement);

                    // Draw image of indian settlement in center of the tile.
                    g.drawImage(lib.getIndianSettlementImage(type), x + (lib.getTerrainImageWidth(tile.getType()) - lib.getIndianSettlementImageWidth(type)) / 2, y + (lib.getTerrainImageHeight(tile.getType()) - lib.getIndianSettlementImageHeight(type)) / 2, null);
                } else {
,
>
, <(startLine=30 endLine=46 srcPath=/root/NewExperiment/freecolFilter/00271/test/src/net/sf/freecol/common/model/GoodsTest.java)
    public void testSetOwner() {

        try {
            Map map = getTestMap(Tile.PLAINS);

            Unit wagon = new Unit(getGame(), map.getTile(9, 10), getGame().getPlayer(Player.DUTCH), Unit.WAGON_TRAIN,
                    Unit.ACTIVE);

            Goods g = new Goods(getGame(), wagon, Goods.COTTON, 75);

            g.setOwner(getGame().getCurrentPlayer());

            fail("Should not allow setOwner");
        } catch (UnsupportedOperationException e) {
            // Okay to throw exception.
        }
    }
,
(startLine=48 endLine=60 srcPath=/root/NewExperiment/freecolFilter/00271/test/src/net/sf/freecol/common/model/GoodsTest.java)
    public void testToString() {

        Messages.setMessageBundle(Locale.ENGLISH);

        Map map = getTestMap(Tile.PLAINS);

        Unit wagon = new Unit(getGame(), map.getTile(9, 10), getGame().getPlayer(Player.DUTCH), Unit.WAGON_TRAIN,
                Unit.ACTIVE);

        Goods g = new Goods(getGame(), wagon, Goods.COTTON, 75);

        assertEquals("75 Cotton", g.toString());
    }
,
>
, <(startLine=266 endLine=275 srcPath=/root/NewExperiment/freecolFilter/01487/src/net/sf/freecol/common/util/CollectionUtils.java)
        mapEntriesByKey(Map<K, V> map) {
        List<Entry<K,V>> result = new ArrayList<>();
        result.addAll(map.entrySet());
        Collections.sort(result, new Comparator<Entry<K,V>>() {
                public int compare(Entry<K,V> e1, Entry<K,V> e2) {
                    return e1.getKey().compareTo(e2.getKey());
                }
            });
        return result;
    }
,
(startLine=285 endLine=294 srcPath=/root/NewExperiment/freecolFilter/01487/src/net/sf/freecol/common/util/CollectionUtils.java)
        mapEntriesByKey(Map<K, V> map, final Comparator<K> c) {
        List<Entry<K,V>> result = new ArrayList<>();
        result.addAll(map.entrySet());
        Collections.sort(result, new Comparator<Entry<K,V>>() {
                public int compare(Entry<K,V> e1, Entry<K,V> e2) {
                    return c.compare(e1.getKey(), e2.getKey());
                }
            });
        return result;
    }
,
(startLine=303 endLine=312 srcPath=/root/NewExperiment/freecolFilter/01487/src/net/sf/freecol/common/util/CollectionUtils.java)
        mapEntriesByValue(Map<K, V> map) {
        List<Entry<K,V>> result = new ArrayList<>();
        result.addAll(map.entrySet());
        Collections.sort(result, new Comparator<Entry<K,V>>() {
                public int compare(Entry<K,V> e1, Entry<K,V> e2) {
                    return e1.getValue().compareTo(e2.getValue());
                }
            });
        return result;
    }
,
(startLine=322 endLine=331 srcPath=/root/NewExperiment/freecolFilter/01487/src/net/sf/freecol/common/util/CollectionUtils.java)
        mapEntriesByValue(Map<K, V> map, final Comparator<V> c) {
        List<Entry<K,V>> result = new ArrayList<>();
        result.addAll(map.entrySet());
        Collections.sort(result, new Comparator<Entry<K,V>>() {
                public int compare(Entry<K,V> e1, Entry<K,V> e2) {
                    return c.compare(e1.getValue(), e2.getValue());
                }
            });
        return result;
    }
,
>
, <(startLine=274 endLine=293 srcPath=/root/NewExperiment/freecolFilter/00662/test/src/net/sf/freecol/common/model/MapTest.java)
    public void testNoPathAvailableDueToCampInTheWay() {
        Game game = getStandardGame();
        Map map = getSingleLandPathMap(game);
        game.setMap(map);
        
        // set obstructing indian camp
        Tile settlementTile = map.getTile(2,10);
        FreeColTestCase.IndianSettlementBuilder builder = new FreeColTestCase.IndianSettlementBuilder(game);
        IndianSettlement settlement = builder.settlementTile(settlementTile).build();

        // set unit
        Player dutchPlayer = game.getPlayer("model.nation.dutch");
        Tile unitTile = map.getTile(1, 11);
        Tile destinationTile = map.getTile(3,7);
        Unit colonist = new Unit(game, unitTile, dutchPlayer, colonistType, UnitState.ACTIVE);
        colonist.setDestination(destinationTile);
        
        PathNode path = map.findPath(colonist, colonist.getTile(), destinationTile);
        assertNull("No path should be available",path);
    }
,
(startLine=352 endLine=371 srcPath=/root/NewExperiment/freecolFilter/00662/test/src/net/sf/freecol/common/model/MapTest.java)
    public void testNoPathAvailableDueToUnitInTheWay() {
        Game game = getStandardGame();
        Map map = getSingleLandPathMap(game);
        game.setMap(map);
        
        // set obstructing unit
        Tile unitObstructionTile = map.getTile(2,10);
        Player frenchPlayer = game.getPlayer("model.nation.french");
        new Unit(game, unitObstructionTile, frenchPlayer, colonistType, UnitState.ACTIVE);
        
        // set unit
        Player dutchPlayer = game.getPlayer("model.nation.dutch");
        Tile unitTile = map.getTile(1, 11);
        Tile destinationTile = map.getTile(3,7);
        Unit colonist = new Unit(game, unitTile, dutchPlayer, colonistType, UnitState.ACTIVE);
        colonist.setDestination(destinationTile);
        
        PathNode path = map.findPath(colonist, colonist.getTile(), destinationTile, CostDeciders.avoidSettlementsAndBlockingUnits());
        assertNull("No path should be available",path);
    }
,
(startLine=373 endLine=392 srcPath=/root/NewExperiment/freecolFilter/00662/test/src/net/sf/freecol/common/model/MapTest.java)
    public void testShortestPathObstructed() {        
        Game game = getStandardGame();
        Map map = getShortLongPathMap(getGame());
        game.setMap(map);

        // set obstructing indian camp
        Tile settlementTile = map.getTile(2, 10);
        FreeColTestCase.IndianSettlementBuilder builder = new FreeColTestCase.IndianSettlementBuilder(game);
        builder.settlementTile(settlementTile).build();

        // set unit
        Player dutchPlayer = game.getPlayer("model.nation.dutch");
        Tile unitTile = map.getTile(1, 11);
        Unit colonist = new Unit(game, unitTile, dutchPlayer, colonistType, UnitState.ACTIVE);
        Tile destinationTile = map.getTile(3,7);
        colonist.setDestination(destinationTile);
        
        PathNode path = map.findPath(colonist, colonist.getTile(), destinationTile);
        assertNotNull("A path should be available",path);
    }
,
>
, <(startLine=1098 endLine=1113 srcPath=/root/NewExperiment/freecolFilter/00470/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            while (ui.hasNext()) {
                Unit u = (ui.next());
                if (u.isOffensiveUnit()) {
                    continue; // don't bother dealing with current
                    // soldiers at the moment
                }
                if (u.getLocation() != colony.getTile()) {
                    // If we are not on the tile we are in the colony.
                    inColonyCount++;
                }
                if (u.hasAbility("model.ability.expertSoldier")) {
                    recruits.add(u);
                } else if (u.hasAbility("model.ability.canBeEquipped")) {
                    others.add(u);
                }
            }
,
(startLine=303 endLine=318 srcPath=/root/NewExperiment/freecolFilter/00470/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            while (ui.hasNext()) {
                Unit u = (ui.next());
                if (u.isOffensiveUnit()) {
                    continue; // don't bother dealing with current
                    // soldiers at the moment
                }
                if (u.getLocation() != colony.getTile()) {
                    // If we are not on the tile we are in the colony.
                    inColonyCount++;
                }
                if (u.hasAbility("model.ability.expertSoldier")) {
                    recruits.add(u);
                } else if (u.hasAbility("model.ability.canBeEquipped")) {
                    others.add(u);
                }
            }
,
>
, <(startLine=574 endLine=580 srcPath=/root/NewExperiment/freecolFilter/00747/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (price > getGold()) {
            throw new IllegalStateException("Player " + getName()
                + " tried to buy " + Integer.toString(amount)
                + " " + type.toString()
                + " for " + Integer.toString(price)
                + " but has " + Integer.toString(getGold()) + " gold.");
        }
,
(startLine=285 endLine=291 srcPath=/root/NewExperiment/freecolFilter/00747/src/net/sf/freecol/common/model/Market.java)
        if (price > player.getGold()) {
            throw new IllegalStateException("Player " + player.getName()
                + " tried to buy " + Integer.toString(amount)
                + " " + goodsType.toString()
                + " for " + Integer.toString(price)
                + " but has " + Integer.toString(player.getGold()) + " gold.");
        }
,
>
, <(startLine=198 endLine=218 srcPath=/root/NewExperiment/freecolFilter/00444/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        while (ci.hasNext()) {
            AIColony c = ci.next();
            ArrayList<Tile> oldWorkTiles = new ArrayList<Tile>();
            for (ColonyTile colonyTile : c.getColony().getColonyTiles()) {
                if (colonyTile.getUnit() != null) {
                    oldWorkTiles.add(colonyTile.getWorkTile());
                }
            }

            c.rearrangeWorkers(getConnection());

            ArrayList<Tile> tilesToUpdate = new ArrayList<Tile>();
            for (ColonyTile colonyTile : c.getColony().getColonyTiles()) {
                boolean isOccupied = colonyTile.getUnit() != null;
                boolean wasOccupied = oldWorkTiles.remove(colonyTile.getWorkTile());
                if (isOccupied != wasOccupied) {
                    tilesToUpdate.add(colonyTile.getWorkTile());
                }
            }
            sendUpdatedTilesToAll(tilesToUpdate);
        }
,
(startLine=590 endLine=610 srcPath=/root/NewExperiment/freecolFilter/00444/src/net/sf/freecol/server/ai/AIPlayer.java)
        while (ci.hasNext()) {
            AIColony c = ci.next();
            ArrayList<Tile> oldWorkTiles = new ArrayList<Tile>();
            for (ColonyTile colonyTile : c.getColony().getColonyTiles()) {
                if (colonyTile.getUnit() != null) {
                    oldWorkTiles.add(colonyTile.getWorkTile());
                }
            }

            c.rearrangeWorkers(getConnection());
            
            ArrayList<Tile> tilesToUpdate = new ArrayList<Tile>();
            for (ColonyTile colonyTile : c.getColony().getColonyTiles()) {
                boolean isOccupied = colonyTile.getUnit() != null;
                boolean wasOccupied = oldWorkTiles.remove(colonyTile.getWorkTile());
                if (isOccupied != wasOccupied) {
                    tilesToUpdate.add(colonyTile.getWorkTile());
                }
            }
            sendUpdatedTilesToAll(tilesToUpdate);
        }
,
>
, <(startLine=1443 endLine=1449 srcPath=/root/NewExperiment/freecolFilter/00583/src/net/sf/freecol/common/model/Map.java)
     public static Position getAdjacent(Position position, Direction direction) {
         int x = position.x + ((position.y & 1) != 0 ?
                               direction.getOddDX() : direction.getEvenDX());
         int y = position.y + ((position.y & 1) != 0 ?
                               direction.getOddDY() : direction.getEvenDY());
         return new Position(x, y);
     }
,
(startLine=1459 endLine=1465 srcPath=/root/NewExperiment/freecolFilter/00583/src/net/sf/freecol/common/model/Map.java)
      public Tile getAdjacentTile(Position position, Direction direction) {
          int x = position.x + ((position.y & 1) != 0 ?
                                direction.getOddDX() : direction.getEvenDX());
          int y = position.y + ((position.y & 1) != 0 ?
                                direction.getOddDY() : direction.getEvenDY());
          return this.getTile(x, y);
      }
,
>
, <(startLine=102 endLine=137 srcPath=/root/NewExperiment/freecolFilter/00918/src/net/sf/freecol/server/networking/Server.java)
    public void run() {
        // This method's entire body is synchronized to shutdownLock.
        // The reason why this is done is to prevent the shutdown
        // method from finishing before this thread is finished
        // working.  We have to do this because the
        // ServerSocket::close method keeps the server alive for
        // several milliseconds EVEN AFTER THE CLOSE METHOD IS
        // FINISHED. And because of this a new server can't be created
        // on the same port as this server right after closing this
        // server.
        //
        // Now that the shutdown method 'hangs' until the entire
        // server thread is finished you can be certain that the
        // ServerSocket is REALLY closed after execution of shutdown.
        synchronized (shutdownLock) {
            while (running) {
                Socket clientSocket = null;
                try {
                    clientSocket = serverSocket.accept();

                    logger.info("Got client connection from "
                                + clientSocket.getInetAddress().toString());
                    //Connection connection =
                        new Connection(clientSocket, freeColServer.getUserConnectionHandler(),
                                       FreeCol.SERVER_THREAD);
                    //connections.put(clientSocket, connection);
                } catch (IOException e) {
                    if (running) {
                        StringWriter sw = new StringWriter();
                        e.printStackTrace(new PrintWriter(sw));
                        logger.warning(sw.toString());
                    }
                }
            }
        }
    }
,
(startLine=135 endLine=150 srcPath=/root/NewExperiment/freecolFilter/00918/src/net/sf/freecol/metaserver/MetaServer.java)
    public void run() {
        while (running) {
            Socket clientSocket = null;
            try {
                clientSocket = serverSocket.accept();
                logger.info("Got client connection from " + clientSocket.getInetAddress().toString());
                Connection connection = new Connection(clientSocket, getNetworkHandler(), FreeCol.METASERVER_THREAD);
                connections.put(clientSocket, connection);
            } catch (IOException e) {
                StringWriter sw = new StringWriter();
                e.printStackTrace(new PrintWriter(sw));

                logger.warning(sw.toString());
            }
        }
    }
,
>
, <(startLine=183 endLine=197 srcPath=/root/NewExperiment/freecolFilter/00108/src/net/sf/freecol/server/ai/mission/PioneeringMission.java)
    public Tile getTransportDestination() {
    	updateTileImprovement();
    	if (tileImprovement == null) {
    		return null;
    	}
        if (getUnit().getLocation() instanceof Unit) {
            return tileImprovement.getTarget();
        } else if (getUnit().getTile() == tileImprovement.getTarget()) {
            return null;
        } else if (getUnit().getTile() == null || getUnit().findPath(tileImprovement.getTarget()) == null) {
            return tileImprovement.getTarget();
        } else {
            return null;
        }
    }
,
(startLine=205 endLine=219 srcPath=/root/NewExperiment/freecolFilter/00108/src/net/sf/freecol/server/ai/mission/PioneeringMission.java)
    public int getTransportPriority() {
    	updateTileImprovement();
    	if (tileImprovement == null) {
    		return 0;
    	}    	
        if (getUnit().getLocation() instanceof Unit) {
            return NORMAL_TRANSPORT_PRIORITY;
        } else if (getUnit().getLocation().getTile() == tileImprovement.getTarget()) {
            return 0;
        } else if (getUnit().getTile() == null || getUnit().findPath(tileImprovement.getTarget()) == null) {
            return NORMAL_TRANSPORT_PRIORITY;
        } else {
            return 0;
        }
    }
,
>
, <(startLine=52 endLine=64 srcPath=/root/NewExperiment/freecolFilter/00716/test/src/net/sf/freecol/client/gui/FontTest.java)
    public void testLogicalSerif() {

        try {
            Font font = new Font("Serif", Font.PLAIN, 1);
            assertNotNull(font);
            for (Map.Entry<Character, String> entry : specialCharacters.entrySet()) {
                assertTrue(font.getName() + " can not display " + entry.getValue(),
                           font.canDisplay(entry.getKey()));
            }
        } catch(Exception e) {
            fail(e.toString());
        }
    }
,
(startLine=69 endLine=76 srcPath=/root/NewExperiment/freecolFilter/00716/test/src/net/sf/freecol/client/gui/FontTest.java)
        try {
            Font font = Font.createFont(Font.TRUETYPE_FONT, liberationSerif);
            assertNotNull(font);
            for (Map.Entry<Character, String> entry : specialCharacters.entrySet()) {
                assertTrue(font.getName() + " can not display " + entry.getValue(),
                           font.canDisplay(entry.getKey()));
            }
        } catch(Exception e) {
,
>
, <(startLine=115 endLine=127 srcPath=/root/NewExperiment/freecolFilter/00015/src/net/sf/freecol/common/model/Colony.java)
        while (i.hasNext()) {
            WorkLocation w = (WorkLocation) i.next();
            if (w instanceof Building) {
                Iterator unitIterator = w.getUnitIterator();
                while (unitIterator.hasNext()) {
                    Unit unit = (Unit)unitIterator.next();
                    units.add(unit);
                }
            } else if (w instanceof ColonyTile) {
                Unit unit = ((ColonyTile)w).getUnit();
                if (unit != null) units.add(unit);
            }
        }
,
(startLine=381 endLine=421 srcPath=/root/NewExperiment/freecolFilter/00015/src/net/sf/freecol/common/model/Colony.java)
    public Unit getDefendingUnit(Unit attacker) {
        Iterator i = getWorkLocationIterator();
        //ArrayList units = new ArrayList();
        while (i.hasNext()) {
            WorkLocation w = (WorkLocation) i.next();
            if (w instanceof Building) {
                Iterator unitIterator = w.getUnitIterator();
                while (unitIterator.hasNext()) {
                    Unit unit = (Unit)unitIterator.next();
                    //units.add(unit);
                    return unit;
                }
            } else if (w instanceof ColonyTile) {
                Unit unit = ((ColonyTile)w).getUnit();
                //if (unit != null) units.add(unit);
                return unit;
            }
        }

        return null;
        /* This is not neccessary: soldiers are outside colony (on the tile):
        Iterator unitIterator = units.iterator();

        Unit defender = null;
        if (unitIterator.hasNext()) {
            defender = (Unit) unitIterator.next();
        } else {
            return null;
        }

        while (unitIterator.hasNext()) {
            Unit nextUnit = (Unit) unitIterator.next();

            if (nextUnit.getDefensePower(attacker) > defender.getDefensePower(attacker)) {
                defender = nextUnit;
            }
        }

        return defender;
        */
    }
,
>
, <(startLine=38 endLine=57 srcPath=/root/NewExperiment/freecolFilter/00333/test/src/net/sf/freecol/common/model/NationTypeTest.java)
	public void testisRef() {

		Specification s = FreeCol.getSpecification();

		assertTrue(s.getNationType("model.nationType.trade").isEuropean());
		assertTrue(s.getNationType("model.nationType.default").isEuropean());
		assertTrue(s.getNationType("model.nationType.ref").isEuropean());
		assertTrue(s.getNationType("model.nationType.cooperation").isEuropean());
		assertTrue(s.getNationType("model.nationType.immigration").isEuropean());
		assertTrue(s.getNationType("model.nationType.conquest").isEuropean());

		assertFalse(s.getNationType("model.nationType.apache").isEuropean());
		assertFalse(s.getNationType("model.nationType.sioux").isEuropean());
		assertFalse(s.getNationType("model.nationType.tupi").isEuropean());
		assertFalse(s.getNationType("model.nationType.arawak").isEuropean());
		assertFalse(s.getNationType("model.nationType.cherokee").isEuropean());
		assertFalse(s.getNationType("model.nationType.iroquois").isEuropean());
		assertFalse(s.getNationType("model.nationType.inca").isEuropean());
		assertFalse(s.getNationType("model.nationType.aztec").isEuropean());
	}
,
(startLine=59 endLine=77 srcPath=/root/NewExperiment/freecolFilter/00333/test/src/net/sf/freecol/common/model/NationTypeTest.java)
	public void testIsREF() {
		Specification s = FreeCol.getSpecification();

		assertFalse(s.getNationType("model.nationType.trade").isREF());
		assertFalse(s.getNationType("model.nationType.default").isREF());
		assertTrue(s.getNationType("model.nationType.ref").isREF());
		assertFalse(s.getNationType("model.nationType.cooperation").isREF());
		assertFalse(s.getNationType("model.nationType.immigration").isREF());
		assertFalse(s.getNationType("model.nationType.conquest").isREF());

		assertFalse(s.getNationType("model.nationType.apache").isREF());
		assertFalse(s.getNationType("model.nationType.sioux").isREF());
		assertFalse(s.getNationType("model.nationType.tupi").isREF());
		assertFalse(s.getNationType("model.nationType.arawak").isREF());
		assertFalse(s.getNationType("model.nationType.cherokee").isREF());
		assertFalse(s.getNationType("model.nationType.iroquois").isREF());
		assertFalse(s.getNationType("model.nationType.inca").isREF());
		assertFalse(s.getNationType("model.nationType.aztec").isREF());
	}
,
>
, <(startLine=2984 endLine=2995 srcPath=/root/NewExperiment/freecolFilter/00632/src/net/sf/freecol/common/model/Unit.java)
    public void buildColony(Colony colony) {
        if (!canBuildColony()) {
            throw new IllegalStateException("Unit " + toString() + " can not build colony on "
                                            + getTile().toString() + "!");
        }
        if (!getTile().getPosition().equals(colony.getTile().getPosition())) {
            throw new IllegalStateException("A Unit can only build a colony if on the same tile as the colony");
        }

        colony.placeSettlement();
        joinColony(colony);
    }
,
(startLine=3002 endLine=3013 srcPath=/root/NewExperiment/freecolFilter/00632/src/net/sf/freecol/common/model/Unit.java)
    public void buildIndianSettlement(IndianSettlement indianSettlement) {
        if (!canBuildColony()) {
            throw new IllegalStateException("Unit " + toString() + " can not build settlement on "
                                            + getTile().toString() + "!");
        }
        if (!getTile().getPosition().equals(indianSettlement.getTile().getPosition())) {
            throw new IllegalStateException("A Unit can only build a settlement if on the same tile as the settlement");
        }

        indianSettlement.placeSettlement();
        joinIndianSettlement(indianSettlement);
    }
,
>
, <(startLine=108 endLine=192 srcPath=/root/NewExperiment/freecolFilter/00666/src/net/sf/freecol/client/gui/action/ScaleMapAction.java)
    private MapSize showMapSizeDialog() {
        /*
         * TODO: Extend this dialog. It should be possible
         *       to specify the sizes using percentages.
         *       
         *       Add a panel containing information about
         *       the scaling (old size, new size etc).
         */
        final int COLUMNS = 5;

        final Game game = freeColClient.getGame();
        final Map oldMap = game.getMap();
        
        final Canvas canvas = getFreeColClient().getCanvas();
        final String okText = Messages.message("ok");
        final String cancelText = Messages.message("cancel");
        final String widthText = Messages.message("width");
        final String heightText = Messages.message("height");
        
        final JTextField inputWidth = new JTextField(Integer.toString(oldMap.getWidth()), COLUMNS);
        final JTextField inputHeight = new JTextField(Integer.toString(oldMap.getHeight()), COLUMNS);

        final FreeColDialog<MapSize> inputDialog = new FreeColDialog<MapSize>(canvas) {
            public void requestFocus() {
                inputWidth.requestFocus();
            }
        };

        inputDialog.setLayout(new BoxLayout(inputDialog, BoxLayout.Y_AXIS));

        JPanel buttons = new JPanel();
        buttons.setOpaque(false);

        final ActionListener al = new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                try {
                    int width = Integer.parseInt(inputWidth.getText());
                    int height = Integer.parseInt(inputHeight.getText());
                    if (width <= 0 || height <= 0) {
                        throw new NumberFormatException();
                    }
                    inputDialog.setResponse(new MapSize(width, height));
                } catch (NumberFormatException nfe) {
                    canvas.errorMessage("integerAboveZero");
                }
            }
        };
        JButton okButton = new JButton(okText);
        buttons.add(okButton);
        
        JButton cancelButton = new JButton(cancelText);
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                inputDialog.setResponse(null);
            }
        });
        buttons.add(cancelButton);
        inputDialog.setCancelComponent(cancelButton);
        
        okButton.addActionListener(al);
        inputWidth.addActionListener(al);
        inputHeight.addActionListener(al);
        
        JLabel widthLabel = new JLabel(widthText);
        widthLabel.setLabelFor(inputWidth);
        JLabel heightLabel = new JLabel(heightText);
        heightLabel.setLabelFor(inputHeight);
        
        JPanel widthPanel = new JPanel(new FlowLayout());
        widthPanel.setOpaque(false);
        widthPanel.add(widthLabel);
        widthPanel.add(inputWidth);
        JPanel heightPanel = new JPanel(new FlowLayout());
        heightPanel.setOpaque(false);
        heightPanel.add(heightLabel);
        heightPanel.add(inputHeight);       
        
        inputDialog.add(widthPanel);
        inputDialog.add(heightPanel);
        inputDialog.add(buttons);

        inputDialog.setSize(inputDialog.getPreferredSize());

        return canvas.showFreeColDialog(inputDialog);
    }
,
(startLine=104 endLine=187 srcPath=/root/NewExperiment/freecolFilter/00666/src/net/sf/freecol/client/gui/action/DetermineHighSeasAction.java)
    private Parameters showParametersDialog() {
        /*
         * TODO: Extend this dialog. It should be possible
         *       to specify the sizes using percentages.
         *       
         *       Add a panel containing information about
         *       the scaling (old size, new size etc).
         */
        final int COLUMNS = 5;
        final int DEFAULT_distToLandFromHighSeas = 4;
        final int DEFAULT_maxDistanceToEdge = 12;
        
        final Canvas canvas = getFreeColClient().getCanvas();
        final String okText = Messages.message("ok");
        final String cancelText = Messages.message("cancel");
        final String dText = Messages.message("menuBar.tools.determineHighSeas.distToLandFromHighSeas");
        final String mText = Messages.message("menuBar.tools.determineHighSeas.maxDistanceToEdge");
        
        final JTextField inputD = new JTextField(Integer.toString(DEFAULT_distToLandFromHighSeas), COLUMNS);
        final JTextField inputM = new JTextField(Integer.toString(DEFAULT_maxDistanceToEdge), COLUMNS);

        final FreeColDialog<Parameters> inputDialog = new FreeColDialog<Parameters>(canvas)  {
            public void requestFocus() {
                inputD.requestFocus();
            }
        };

        inputDialog.setLayout(new BoxLayout(inputDialog, BoxLayout.Y_AXIS));

        JPanel buttons = new JPanel();
        buttons.setOpaque(false);

        final ActionListener al = new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                try {
                    int d = Integer.parseInt(inputD.getText());
                    int m = Integer.parseInt(inputM.getText());
                    if (d <= 0 || m <= 0) {
                        throw new NumberFormatException();
                    }
                    inputDialog.setResponse(new Parameters(d, m));
                } catch (NumberFormatException nfe) {
                    canvas.errorMessage("integerAboveZero");
                }
            }
        };
        JButton okButton = new JButton(okText);
        buttons.add(okButton);
        
        JButton cancelButton = new JButton(cancelText);
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                inputDialog.setResponse(null);
            }
        });
        buttons.add(cancelButton);
        inputDialog.setCancelComponent(cancelButton);
        
        okButton.addActionListener(al);
        inputD.addActionListener(al);
        inputM.addActionListener(al);
        
        JLabel widthLabel = new JLabel(dText);
        widthLabel.setLabelFor(inputD);
        JLabel heightLabel = new JLabel(mText);
        heightLabel.setLabelFor(inputM);
        
        JPanel widthPanel = new JPanel(new FlowLayout());
        widthPanel.setOpaque(false);
        widthPanel.add(widthLabel);
        widthPanel.add(inputD);
        JPanel heightPanel = new JPanel(new FlowLayout());
        heightPanel.setOpaque(false);
        heightPanel.add(heightLabel);
        heightPanel.add(inputM);       
        
        inputDialog.add(widthPanel);
        inputDialog.add(heightPanel);
        inputDialog.add(buttons);

        inputDialog.setSize(inputDialog.getPreferredSize());

        return canvas.showFreeColDialog(inputDialog);
    }
,
>
, <(startLine=72 endLine=86 srcPath=/root/NewExperiment/freecolFilter/01007/src/net/sf/freecol/common/networking/DisbandUnitMessage.java)
                          Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);
        Game game = server.getGame();

        Unit unit;
        try {
            unit = player.getFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }

        // Try to clear.
        return server.getInGameController()
            .disbandUnit(serverPlayer, unit);
    }
,
(startLine=71 endLine=85 srcPath=/root/NewExperiment/freecolFilter/01007/src/net/sf/freecol/common/networking/DisembarkMessage.java)
                          Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);
        Game game = server.getGame();

        Unit unit;
        try {
            unit = player.getFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }

        // Do the disembark.
        return server.getInGameController()
            .disembarkUnit(serverPlayer, unit);
    }
,
(startLine=72 endLine=86 srcPath=/root/NewExperiment/freecolFilter/01007/src/net/sf/freecol/common/networking/ClearSpecialityMessage.java)
                          Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);
        Game game = server.getGame();

        Unit unit;
        try {
            unit = player.getFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }

        // Try to clear.
        return server.getInGameController()
            .clearSpeciality(serverPlayer, unit);
    }
,
(startLine=68 endLine=82 srcPath=/root/NewExperiment/freecolFilter/01007/src/net/sf/freecol/common/networking/UpdateCurrentStopMessage.java)
    public Element handle(FreeColServer server, Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);
        Game game = server.getGame();

        Unit unit;
        try {
            unit = serverPlayer.getFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }

        // Valid, update.
        return server.getInGameController()
            .updateCurrentStop(serverPlayer, unit);
    }
,
>
, <(startLine=611 endLine=620 srcPath=/root/NewExperiment/freecolFilter/00990/src/net/sf/freecol/common/model/Specification.java)
    public AbstractOption getOption(String Id) throws IllegalArgumentException {
        if (Id == null) {
            throw new IllegalArgumentException("Trying to retrieve AbstractOption" + " with ID 'null'.");
        } else if (!allOptions.containsKey(Id)) {
            throw new IllegalArgumentException("Trying to retrieve AbstractOption" + " with ID '" + Id
                    + "' returned 'null'.");
        } else {
            return allOptions.get(Id);
        }
    }
,
(startLine=629 endLine=638 srcPath=/root/NewExperiment/freecolFilter/00990/src/net/sf/freecol/common/model/Specification.java)
    public OptionGroup getOptionGroup(String Id) throws IllegalArgumentException {
        if (Id == null) {
            throw new IllegalArgumentException("Trying to retrieve OptionGroup" + " with ID 'null'.");
        } else if (!allOptionGroups.containsKey(Id)) {
            throw new IllegalArgumentException("Trying to retrieve OptionGroup" + " with ID '" + Id
                    + "' returned 'null'.");
        } else {
            return allOptionGroups.get(Id);
        }
    }
,
>
, <(startLine=78 endLine=101 srcPath=/root/NewExperiment/freecolFilter/01547/src/net/sf/freecol/common/networking/PutOutsideColonyMessage.java)
                          Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit unit;
        try {
            unit = player.getOurFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return serverPlayer.clientError(e.getMessage())
                .build(serverPlayer);
        }
        if (!unit.hasTile()) {
            return serverPlayer.clientError("Unit is not on the map: " + unitId)
                .build(serverPlayer);
        } else if (unit.getColony() == null) {
            return serverPlayer.clientError("Unit is not in a colony: "
                + unitId)
                .build(serverPlayer);
        }

        // Proceed to put outside.
        return server.getInGameController()
            .putOutsideColony(serverPlayer, unit)
            .build(serverPlayer);
    }
,
(startLine=85 endLine=110 srcPath=/root/NewExperiment/freecolFilter/01547/src/net/sf/freecol/common/networking/ChangeWorkTypeMessage.java)
                          Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit unit;
        try {
            unit = player.getOurFreeColGameObject(unitId, Unit.class);
        } catch (Exception e) {
            return serverPlayer.clientError(e.getMessage())
                .build(serverPlayer);
        }
        if (!unit.hasTile()) {
            return serverPlayer.clientError("Unit is not on the map: " + unitId)
                .build(serverPlayer);
        }

        GoodsType type = server.getSpecification().getGoodsType(workTypeId);
        if (type == null) {
            return serverPlayer.clientError("Not a goods type: " + workTypeId)
                .build(serverPlayer);
        }

        // Proceed to changeWorkType.
        return server.getInGameController()
            .changeWorkType(serverPlayer, unit, type)
            .build(serverPlayer);
    }
,
>
, <(startLine=537 endLine=548 srcPath=/root/NewExperiment/freecolFilter/00480/src/net/sf/freecol/server/generator/MapGenerator.java)
        for (int i = 0; i < unitCount; i++) {
            UnitType unitType = FreeCol.getSpecification().getUnitType("model.unit.brave");
            Unit unit = new Unit(map.getGame(), settlement, player, unitType, UnitState.ACTIVE,
                                 unitType.getDefaultEquipment());
            unit.setIndianSettlement(settlement);

            if (i == 0) {
                unit.setLocation(tile);
            } else {
                unit.setLocation(settlement);
            }
        }
,
(startLine=100 endLine=110 srcPath=/root/NewExperiment/freecolFilter/00480/test/src/net/sf/freecol/server/ai/TensionTest.java)
        for (int i = 0; i < unitCount; i++) {
            UnitType unitType = FreeCol.getSpecification().getUnitType("model.unit.brave");
            Unit unit = new Unit(game, settlement, indian, unitType, UnitState.ACTIVE,
                                 unitType.getDefaultEquipment());
            unit.setIndianSettlement(settlement);
            if (i == 0) {
                unit.setLocation(tile);
            } else {
                unit.setLocation(settlement);
            }
        }
,
>
, <(startLine=232 endLine=244 srcPath=/root/NewExperiment/freecolFilter/01086/src/net/sf/freecol/common/option/StringOption.java)
    public String toString() {
        String result = "";
        if (choices != null) {
            for (String choice : choices) {
                result += ", " + choice;
            }
            if (result.length() > 0) {
                result = result.substring(2);
            }
        }
        return getXMLElementTagName() + " [value=" + value
            + ", choices=[" + result + "]]";
    }
,
(startLine=195 endLine=207 srcPath=/root/NewExperiment/freecolFilter/01086/src/net/sf/freecol/common/option/ModOption.java)
    public String toString() {
        String result = "";
        if (choices != null) {
            for (FreeColModFile choice : choices) {
                result += ", " + choice.getId();
            }
            if (result.length() > 0) {
                result = result.substring(2);
            }
        }
        return getXMLElementTagName() + " [value=" + value
            + ", choices=[" + result + "]]";
    }
,
>
, <(startLine=107 endLine=120 srcPath=/root/NewExperiment/freecolFilter/01685/src/net/sf/freecol/server/networking/DummyConnection.java)
    public boolean sendAndWaitElement(Element request) {
        if (!isAlive()) return false;
        if (request == null) return true;
        final String tag = request.getTagName();
        try {
            Element reply = getOtherConnection().handleElement(request);
            log(request, true);
            log(reply, false);
            return true;
        } catch (FreeColException fce) {
            logger.log(Level.WARNING, "Dummy send-handler fail: " + tag, fce);
        }
        return false;
    }
,
(startLine=132 endLine=145 srcPath=/root/NewExperiment/freecolFilter/01685/src/net/sf/freecol/server/networking/DummyConnection.java)
    public Element askElement(Element request) throws IOException {
        if (!isAlive() || request == null) return null;
        final String tag = request.getTagName();
        Element reply;
        try {
            log(request, true);
            reply = getOtherConnection().handleElement(request);
            log(reply, false);            
        } catch (FreeColException fce) {
            logger.log(Level.WARNING, "Dummy-ask handler fail: " + tag, fce);
            reply = null;
        }
        return reply;
    }
,
>
, <(startLine=1024 endLine=1065 srcPath=/root/NewExperiment/freecolFilter/00883/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (Tile t: is.getTile().getSurroundingTiles(2)) {
            // Do not check ocean tiles
            // Indians do not have naval power
            if(!t.isLand()){
                continue;
            }

            // No units on tile
            if (t.getUnitCount() == 0) {
                continue;
            }

            Player enemy = t.getFirstUnit().getOwner();

            // Own units on tile
            if (enemy == getPlayer()) {
                defenders++;
                continue;
            }

            if (!getPlayer().hasContacted(enemy)) continue;
            int value = getPlayer().getTension(enemy).getValue();
            int threatModifier = 0;
            int unitThreat = 0;
            if (value >= Tension.TENSION_ADD_MAJOR) {
                threatModifier = 2;
                unitThreat = t.getUnitCount() * 2;
            } else if (value >= Tension.TENSION_ADD_MINOR) {
                threatModifier = 1;
                unitThreat = t.getUnitCount();
            }

            threat += threatModifier;
            if (unitThreat > worstThreat) {
                if (t.getSettlement() != null) {
                    bestTarget = t.getSettlement();
                } else {
                    bestTarget = t.getFirstUnit();
                }
                worstThreat = unitThreat;
            }
        }
,
(startLine=464 endLine=505 srcPath=/root/NewExperiment/freecolFilter/00883/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        for (Tile t: is.getTile().getSurroundingTiles(2)) {
            // Do not check ocean tiles
            // Indians do not have naval power
            if(!t.isLand()){
                continue;
            }

            // No units on tile
            if (t.getUnitCount() == 0) {
                continue;
            }

            Player enemy = t.getFirstUnit().getOwner();

            // Own units on tile
            if (enemy == getPlayer()) {
                defenders++;
                continue;
            }

            if (!getPlayer().hasContacted(enemy)) continue;
            int value = getPlayer().getTension(enemy).getValue();
            int threatModifier = 0;
            int unitThreat = 0;
            if (value >= Tension.TENSION_ADD_MAJOR) {
                threatModifier = 2;
                unitThreat = t.getUnitCount() * 2;
            } else if (value >= Tension.TENSION_ADD_MINOR) {
                threatModifier = 1;
                unitThreat = t.getUnitCount();
            }

            threat += threatModifier;
            if (unitThreat > worstThreat) {
                if (t.getSettlement() != null) {
                    bestTarget = t.getSettlement();
                } else {
                    bestTarget = t.getFirstUnit();
                }
                worstThreat = unitThreat;
            }
        }
,
>
, <(startLine=1507 endLine=1583 srcPath=/root/NewExperiment/freecolFilter/00924/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private void demandTribute() {
        logger.finest("Entering method demandTribute");
        if (!getPlayer().isIndian()) {
            // TODO: European players can also demand tribute!
            return;
        }
        for (IndianSettlement indianSettlement : getPlayer().getIndianSettlements()) {
            // Do not demand goods all the time:
            if (getAIRandom().nextInt(10) != 1) {
                continue;
            }
            int alreadyAssignedUnits = 0;
            Iterator<Unit> ownedUnits = indianSettlement.getOwnedUnitsIterator();
            while (ownedUnits.hasNext()) {
                if (getAIUnit(ownedUnits.next()).getMission() instanceof IndianDemandMission) {
                    alreadyAssignedUnits++;
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_DEMANDS) {
                continue;
            }
            // Creates a list of nearby colonies:
            ArrayList<Colony> nearbyColonies = new ArrayList<Colony>();

            for (Tile t: indianSettlement.getTile().getSurroundingTiles(MAX_DISTANCE_TO_MAKE_DEMANDS)) {
                if (t.getColony() != null) {
                    nearbyColonies.add(t. getColony());
                }
            }
            if (nearbyColonies.size() > 0) {
                int targetTension = Integer.MIN_VALUE;
                Colony target = null;
                for (int i = 0; i < nearbyColonies.size(); i++) {
                    Colony t = nearbyColonies.get(i);
                    Player to = t.getOwner();
                    if (!getPlayer().hasContacted(to)
                        || !indianSettlement.hasContactedSettlement(to)) {
                        continue;
                    }
                    int tension = 1 + getPlayer().getTension(to).getValue()
                        + indianSettlement.getAlarm(to).getValue();
                    tension = getAIRandom().nextInt(tension);
                    if (tension > targetTension) {
                        targetTension = tension;
                        target = t;
                    }
                }
                if (target != null) {
                    Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                    AIUnit chosenOne = null;
                    while (it2.hasNext()) {
                        chosenOne = getAIUnit(it2.next());
                        if (chosenOne.getUnit().getLocation() instanceof Tile
                            && chosenOne.getUnit().canCarryGoods()
                            && (chosenOne.getMission() == null
                                || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                            // Check that the colony can be reached:
                            PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                       target.getTile());
                            if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                                // Make it less probable that nice players get targeted
                                // for a demand mission:
                                Player tp = target.getOwner();
                                int tension = 1 + getPlayer().getTension(tp).getValue()
                                    + indianSettlement.getAlarm(tp).getValue();
                                if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                                    chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne,
                                                                                 target));
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
,
(startLine=710 endLine=782 srcPath=/root/NewExperiment/freecolFilter/00924/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void demandTribute() {
        logger.finest("Entering method demandTribute");
        for (IndianSettlement indianSettlement : getPlayer().getIndianSettlements()) {
            // Do not demand goods all the time:
            if (getAIRandom().nextInt(10) != 1) {
                continue;
            }
            int alreadyAssignedUnits = 0;
            Iterator<Unit> ownedUnits = indianSettlement.getOwnedUnitsIterator();
            while (ownedUnits.hasNext()) {
                if (getAIUnit(ownedUnits.next()).getMission() instanceof IndianDemandMission) {
                    alreadyAssignedUnits++;
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_DEMANDS) {
                continue;
            }
            // Creates a list of nearby colonies:
            ArrayList<Colony> nearbyColonies = new ArrayList<Colony>();

            for (Tile t: indianSettlement.getTile().getSurroundingTiles(MAX_DISTANCE_TO_MAKE_DEMANDS)) {
                if (t.getColony() != null) {
                    nearbyColonies.add(t. getColony());
                }
            }
            if (nearbyColonies.size() > 0) {
                int targetTension = Integer.MIN_VALUE;
                Colony target = null;
                for (int i = 0; i < nearbyColonies.size(); i++) {
                    Colony t = nearbyColonies.get(i);
                    Player to = t.getOwner();
                    if (!getPlayer().hasContacted(to)
                        || !indianSettlement.hasContactedSettlement(to)) {
                        continue;
                    }
                    int tension = 1 + getPlayer().getTension(to).getValue()
                        + indianSettlement.getAlarm(to).getValue();
                    tension = getAIRandom().nextInt(tension);
                    if (tension > targetTension) {
                        targetTension = tension;
                        target = t;
                    }
                }
                if (target != null) {
                    Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                    AIUnit chosenOne = null;
                    while (it2.hasNext()) {
                        chosenOne = getAIUnit(it2.next());
                        if (chosenOne.getUnit().getLocation() instanceof Tile
                            && chosenOne.getUnit().canCarryGoods()
                            && (chosenOne.getMission() == null
                                || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                            // Check that the colony can be reached:
                            PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                       target.getTile());
                            if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                                // Make it less probable that nice players get targeted
                                // for a demand mission:
                                Player tp = target.getOwner();
                                int tension = 1 + getPlayer().getTension(tp).getValue()
                                    + indianSettlement.getAlarm(tp).getValue();
                                if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                                    chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne,
                                                                                 target));
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
,
>
, <(startLine=241 endLine=255 srcPath=/root/NewExperiment/freecolFilter/01371/src/net/sf/freecol/server/generator/LandGenerator.java)
            if (!newland[p.getX()][p.getY()]) {
                newland[p.getX()][p.getY()] = true;
                size++;

                //add all valid neighbour positions to list
                for (Direction direction : Direction.longSides) {
                    Position n = new Position(p, direction);
                    if (n.isValid(width, height)
                        && isSingleTile(n.getX(), n.getY())
                        && n.getX() > preferredDistanceToEdge
                        && n.getX() < width-preferredDistanceToEdge) {
                        l.add(n);
                    }
                }
            }
,
(startLine=425 endLine=438 srcPath=/root/NewExperiment/freecolFilter/01371/src/net/sf/freecol/common/model/LandMap.java)
            if (!newLand[p.getX()][p.getY()]) {
                newLand[p.getX()][p.getY()] = true;
                size++;

                for (Direction direction : Direction.longSides) {
                    Position n = new Position(p, direction);
                    if (n.isValid(width, height)
                        && isSingleTile(n.getX(), n.getY())
                        && n.getX() > preferredDistanceToEdge
                        && n.getX() < width-preferredDistanceToEdge) {
                        l.add(n);
                    }
                }
            }
,
>
, <(startLine=702 endLine=710 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            if (u.getLocation() instanceof WorkLocation) {
                AIColony ac = getAIColony(u.getColony());
                if (ac == null) {
                    logger.warning("No AIColony for unit: " + u
                                   + " at: " + u.getLocation());
                    continue;
                }
                au.setMission(new WorkInsideColonyMission(getAIMain(), au, ac));
            }
,
(startLine=438 endLine=446 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            if (u.getLocation() instanceof WorkLocation) {
                AIColony ac = getAIColony(u.getColony());
                if (ac == null) {
                    logger.warning("No AIColony for unit: " + u
                                   + " at: " + u.getLocation());
                    continue;
                }
                au.setMission(new WorkInsideColonyMission(getAIMain(), au, ac));
            }
,
>
, <(startLine=2266 endLine=2328 srcPath=/root/NewExperiment/freecolFilter/00172/src/net/sf/freecol/client/gui/GUI.java)
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {
,
(startLine=2358 endLine=2420 srcPath=/root/NewExperiment/freecolFilter/00172/src/net/sf/freecol/client/gui/GUI.java)
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {
,
(startLine=2455 endLine=2517 srcPath=/root/NewExperiment/freecolFilter/00172/src/net/sf/freecol/client/gui/GUI.java)
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {
,
(startLine=2517 endLine=2579 srcPath=/root/NewExperiment/freecolFilter/00172/src/net/sf/freecol/client/gui/GUI.java)
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp--;
                                }
                            } else {
                                // Lower-Right
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp++;
                                }
                            } else {
                                // Upper-Right
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp++;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {
,
>
, <(startLine=549 endLine=555 srcPath=/root/NewExperiment/freecolFilter/00713/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
    private void buildFatherItem(FoundingFather foundingFather, DefaultMutableTreeNode parent) {
        String name = Messages.message(foundingFather.getNameKey());
        ImageIcon icon = new ImageIcon(ResourceManager.getImage("model.goods.bells.image", 0.75f));
        DefaultMutableTreeNode item =
            new DefaultMutableTreeNode(new ColopediaTreeItem(foundingFather, name, icon));
        parent.add(item);
    }
,
(startLine=577 endLine=584 srcPath=/root/NewExperiment/freecolFilter/00713/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
    private void buildNationTypeItem(NationType nationType, DefaultMutableTreeNode parent) {
        String name = Messages.message(nationType.getNameKey());
        //ImageIcon icon = getLibrary().getCoatOfArmsImageIcon(nation);
        ImageIcon icon = new ImageIcon(ResourceManager.getImage("model.goods.bells.image", 0.75f));
        DefaultMutableTreeNode item =
            new DefaultMutableTreeNode(new ColopediaTreeItem(nationType, name, icon));
        parent.add(item);
    }
,
>
, <(startLine=107 endLine=127 srcPath=/root/NewExperiment/freecolFilter/00058/src/net/sf/freecol/server/FreeColServer.java)
    public FreeColServer(boolean singleplayer, int port) throws IOException {
        this.singleplayer = singleplayer;

        modelController = new ServerModelController(this);

        game = new Game(modelController);

        userConnectionHandler = new UserConnectionHandler(this);
        preGameController = new PreGameController(this);
        preGameInputHandler = new PreGameInputHandler(this);
        inGameInputHandler = new InGameInputHandler(this);
        inGameController = new InGameController(this);

        try {
            server = new Server(this, port);
            server.start();
        } catch (IOException e) {
            logger.warning("Exception while starting server: " + e);
            throw e;
        }
    }
,
(startLine=143 endLine=161 srcPath=/root/NewExperiment/freecolFilter/00058/src/net/sf/freecol/server/FreeColServer.java)
    public FreeColServer(File file, int port) throws IOException {
        modelController = new ServerModelController(this);

        userConnectionHandler = new UserConnectionHandler(this);
        preGameController = new PreGameController(this);
        preGameInputHandler = new PreGameInputHandler(this);
        inGameInputHandler = new InGameInputHandler(this);
        inGameController = new InGameController(this);

        try {
            server = new Server(this, port);
            server.start();
        } catch (IOException e) {
            logger.warning("Exception while starting server: " + e);
            throw e;
        }
        
        owner = loadGame(file);
    }    
,
>
, <(startLine=498 endLine=509 srcPath=/root/NewExperiment/freecolFilter/00073/src/net/sf/freecol/common/model/Player.java)
            while (unitIterator.hasNext()) {
                Unit unit = (Unit) unitIterator.next();

                Map.Position position = unit.getTile().getPosition();
                canSeeTiles[position.getX()][position.getY()] = true;

                Iterator positionIterator = map.getCircleIterator(position, true, unit.getLineOfSight());
                while (positionIterator.hasNext()) {
                    Map.Position p = (Map.Position) positionIterator.next();
                    canSeeTiles[p.getX()][p.getY()] = true;
                }
            }
,
(startLine=512 endLine=523 srcPath=/root/NewExperiment/freecolFilter/00073/src/net/sf/freecol/common/model/Player.java)
            while (colonyIterator.hasNext()) {
                Colony colony = (Colony) colonyIterator.next();
                
                Map.Position position = colony.getTile().getPosition();
                canSeeTiles[position.getX()][position.getY()] = true;

                Iterator positionIterator = map.getCircleIterator(position, true, colony.getLineOfSight());
                while (positionIterator.hasNext()) {
                    Map.Position p = (Map.Position) positionIterator.next();
                    canSeeTiles[p.getX()][p.getY()] = true;
                }
            }
,
>
, <(startLine=136 endLine=151 srcPath=/root/NewExperiment/freecolFilter/00418/src/net/sf/freecol/common/model/Ability.java)
        while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
            String childName = in.getLocalName();
            if ("scope".equals(childName)) {
                Scope scope = new Scope(in);
                if (getScopes() == null) {
                    setScopes(new ArrayList<Scope>());
                }
                getScopes().add(scope);
            } else {
                logger.finest("Parsing of " + childName + " is not implemented yet");
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT ||
                       !in.getLocalName().equals(childName)) {
                    in.nextTag();
                }
            }
        }        
,
(startLine=280 endLine=295 srcPath=/root/NewExperiment/freecolFilter/00418/src/net/sf/freecol/common/model/Modifier.java)
        while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
            String childName = in.getLocalName();
            if ("scope".equals(childName)) {
                Scope scope = new Scope(in);
                if (getScopes() == null) {
                    setScopes(new ArrayList<Scope>());
                }
                getScopes().add(scope);
            } else {
                logger.finest("Parsing of " + childName + " is not implemented yet");
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT ||
                       !in.getLocalName().equals(childName)) {
                    in.nextTag();
                }
            }
        }        
,
>
, <(startLine=75 endLine=99 srcPath=/root/NewExperiment/freecolFilter/00452/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    public void startWorking() {
        logger.fine("Entering AI code for: " + getPlayer().getNationAsString());
        sessionRegister.clear();
        clearAIUnits();
        cheat();
        determineStances();
        rearrangeWorkersInColonies();
        abortInvalidAndOneTimeMissions();
        ensureCorrectMissions();
        giveNavalMissions();
        secureSettlements();
        giveNormalMissions();
        createAIGoodsInColonies();
        createTransportLists();
        doMissions();
        rearrangeWorkersInColonies();
        abortInvalidMissions();
        // Some of the mission might have been invalidated by a another mission.
        giveNormalMissions();
        doMissions();
        rearrangeWorkersInColonies();
        abortInvalidMissions();
        ensureCorrectMissions();
        clearAIUnits();
    }
,
(startLine=74 endLine=101 srcPath=/root/NewExperiment/freecolFilter/00452/src/net/sf/freecol/server/ai/REFAIPlayer.java)
    public void startWorking() {
        logger.fine("Entering AI code for: " + getPlayer().getNationAsString());
        sessionRegister.clear();
        clearAIUnits();
        checkForREFDefeat();
        if (!isWorkForREF()) {
            return;
        }
        determineStances();
        rearrangeWorkersInColonies();
        abortInvalidAndOneTimeMissions();
        ensureCorrectMissions();
        giveNavalMissions();
        secureSettlements();
        giveNormalMissions();
        createAIGoodsInColonies();
        createTransportLists();
        doMissions();
        rearrangeWorkersInColonies();
        abortInvalidMissions();
        // Some of the mission might have been invalidated by a another mission.
        giveNormalMissions();
        doMissions();
        rearrangeWorkersInColonies();
        abortInvalidMissions();
        ensureCorrectMissions();
        clearAIUnits();
    }
,
>
, <(startLine=66 endLine=76 srcPath=/root/NewExperiment/freecolFilter/01525/test/src/net/sf/freecol/common/model/ModifierTest.java)
    public void testCombineAdditiveModifiers() {
        Modifier modifier1 = new Modifier("test", 3,
                                          ModifierType.ADDITIVE);
        Modifier modifier2 = new Modifier("test", 4,
                                          ModifierType.ADDITIVE);
        Set<Modifier> modifierSet = new HashSet<Modifier>();
        modifierSet.add(modifier1);
        modifierSet.add(modifier2);
        assertEquals(1 + 3 + 4f,
            FeatureContainer.applyModifiers(1, null, modifierSet));
    }
,
(startLine=78 endLine=88 srcPath=/root/NewExperiment/freecolFilter/01525/test/src/net/sf/freecol/common/model/ModifierTest.java)
    public void testCombineMultiplicativeModifiers() {
        Modifier modifier1 = new Modifier("test", 3,
                                          ModifierType.MULTIPLICATIVE);
        Modifier modifier2 = new Modifier("test", 4,
                                          ModifierType.MULTIPLICATIVE);
        Set<Modifier> modifierSet = new HashSet<Modifier>();
        modifierSet.add(modifier1);
        modifierSet.add(modifier2);
        assertEquals(2 * 3 * 4f,
            FeatureContainer.applyModifiers(2, null, modifierSet));
    }
,
>
, <(startLine=594 endLine=605 srcPath=/root/NewExperiment/freecolFilter/00291/src/net/sf/freecol/common/model/UnitType.java)
                    } else if ("production-bonus".equals(nodeName)) {
                        String goodsID = Xml.attribute(node, "goods-type");
                        if (goodsTypeByRef.containsKey(goodsID)) {
                            if (Xml.hasAttribute(node, "bonus")) {
                                int bonus = Xml.intAttribute(node, "bonus");
                                prodBonuses.put(goodsID, bonus);
                            } else if (Xml.hasAttribute(node, "factor")) {
                                float factor = Xml.floatAttribute(node, "factor");
                                prodFactors.put(goodsID, factor);
                            }
                        }
                    }
,
(startLine=146 endLine=157 srcPath=/root/NewExperiment/freecolFilter/00291/src/net/sf/freecol/common/model/BuildingType.java)
                } else if ("production-bonus".equals(childName)) {
                    GoodsType goodsType = goodsTypeByRef.get(Xml.attribute(node, "goods-type"));
                    if (goodsType != null) {
                        if (Xml.hasAttribute(node, "bonus")) {
                            int bonus = Xml.intAttribute(node, "bonus");
                            prodBonuses.put(goodsType, bonus);
                        } else if (Xml.hasAttribute(node, "factor")) {
                            float factor = Xml.floatAttribute(node, "factor");
                            prodFactors.put(goodsType, factor);
                        }
                    }
                }
,
>
, <(startLine=1929 endLine=2121 srcPath=/root/NewExperiment/freecolFilter/00120/src/net/sf/freecol/client/gui/GUI.java)
            if ((diffUp % 2) == 0) {
                if ((diffLeft % 2) == 0) {
                    diffLeft = diffLeft / 2;
                    done = true;
                } else {
                    // Crosspoint
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }
                }
            } else {
,
(startLine=2121 endLine=2325 srcPath=/root/NewExperiment/freecolFilter/00120/src/net/sf/freecol/client/gui/GUI.java)
            } else {
                if ((diffLeft % 2) == 0) {
                    // Crosspoint
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp--;
                                }
                            } else {
                                // Lower-Right
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp++;
                                }
                            } else {
                                // Upper-Right
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp++;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }
                } else {
                    if ((focus.getY() % 2) == 0) {
                        if (diffLeft < 0) {
                            diffLeft = diffLeft / 2;
                        } else {
                            diffLeft = (diffLeft / 2) + 1;
                        }
                    } else {
                        if (diffLeft < 0) {
                            diffLeft = (diffLeft / 2) - 1;
                        } else {
                            diffLeft = diffLeft / 2;
                        }
                    }
                    done = true;
                }
            }
,
>
, <(startLine=143 endLine=151 srcPath=/root/NewExperiment/freecolFilter/00928/src/net/sf/freecol/tools/TranslationReport.java)
            if (missingVariables.size() > 0) {
                System.out.println("** Total of " + missingVariables.size() + " properties with missing variables:\n");
                for (String key : sort(missingVariables)) {
                    System.out.println("* CORRECT: " + key + "=" + master.getProperty(key));
                    System.out.println("INCORRECT: " + key + "=" + properties.getProperty(key));
                }
                lstat.missingVariables = missingVariables.size();
                System.out.println("");
            } else {
,
(startLine=199 endLine=208 srcPath=/root/NewExperiment/freecolFilter/00928/src/net/sf/freecol/tools/TranslationReport.java)
            if (superfluousVariables.size() > 0) {
                System.out.println("** Total of " + superfluousVariables.size() +
                                   " properties with superfluous variables:\n");
                for (String key : sort(superfluousVariables)) {
                    System.out.println("* CORRECT: " + key + "=" + master.getProperty(key));
                    System.out.println("INCORRECT: " + key + "=" + properties.getProperty(key));
                }
                lstat.superfluousVariables = superfluousVariables.size();
                System.out.println("");
            } else {
,
>
, <(startLine=427 endLine=439 srcPath=/root/NewExperiment/freecolFilter/00669/src/net/sf/freecol/common/model/FreeColGameObject.java)
        } else {
            T returnValue = returnClass.cast(getGame().getFreeColGameObject(attributeString));
            try {
                if (returnValue == null) {
                    Constructor<T> c = returnClass.getConstructor(Game.class, String.class);
                    returnValue = returnClass.cast(c.newInstance(getGame(), attributeString));
                }
                return returnValue;
            } catch(Exception e) {
                logger.warning("Failed to create FreeColGameObject with ID " + attributeString);
                return null;
            }
        }
,
(startLine=456 endLine=471 srcPath=/root/NewExperiment/freecolFilter/00669/src/net/sf/freecol/common/model/FreeColGameObject.java)
        } else {
            T returnValue = returnClass.cast(getGame().getFreeColGameObject(attributeString));
            try {
                if (returnValue == null) {
                    Constructor<T> c = returnClass.getConstructor(Game.class, XMLStreamReader.class);
                    returnValue = returnClass.cast(c.newInstance(getGame(), in));
                } else {
                    returnValue.readFromXML(in);
                }
                return returnValue;
            } catch(Exception e) {
                logger.warning("Failed to update FreeColGameObject with ID " + attributeString);
                e.printStackTrace();
                return null;
            }
        }
,
>
, <(startLine=114 endLine=122 srcPath=/root/NewExperiment/freecolFilter/01103/src/net/sf/freecol/client/gui/panel/WorkProductionPanel.java)
        for (Modifier modifier : modifiers) {
            JLabel[] mLabels = getModifierLabels(modifier, unitType, turn);
            for (int i = 0; i < mLabels.length; i++) {
                if (mLabels[i] != null) {
                    if (i == 0) add(mLabels[i],"newline"); else add(mLabels[i]);
                }
            }
            result = modifier.applyTo(result, turn);
        }
,
(startLine=141 endLine=152 srcPath=/root/NewExperiment/freecolFilter/01103/src/net/sf/freecol/client/gui/panel/WorkProductionPanel.java)
        for (Modifier modifier : moreModifiers) {
            JLabel[] mLabels = getModifierLabels(modifier, null, turn);
            for (int i = 0; i < mLabels.length; i++) {
                if (mLabels[i] != null) {
                    if (i == 0) {
                        add(mLabels[i], "newline");
                    } else {
                        add(mLabels[i]);
                    }
                }
            }
        }
,
(startLine=161 endLine=173 srcPath=/root/NewExperiment/freecolFilter/01103/src/net/sf/freecol/client/gui/panel/BuildingToolTip.java)
            for (Modifier m : modifiers) {
                JLabel[] mLabels = FreeColPanel.getModifierLabels(m, null,
                                                                  game.getTurn());
                for (int i = 0; i < mLabels.length; i++) {
                    if (mLabels[i] != null) {
                        if (i == 0) {
                            add(mLabels[i],"newline");
                        } else {
                            add(mLabels[i]);
                        }
                    }
                }
            }
,
>
, <(startLine=67 endLine=78 srcPath=/root/NewExperiment/freecolFilter/00886/src/net/sf/freecol/common/util/Introspector.java)
        throws IllegalArgumentException {
        String methodName = "get" + field.substring(0, 1).toUpperCase()
            + field.substring(1);

        try {
            return theClass.getMethod(methodName);
        } catch (Exception e) {
            throw new IllegalArgumentException(theClass.getName()
                                               + "." + methodName
                                               + ": " + e.toString());
        }
    }
,
(startLine=89 endLine=100 srcPath=/root/NewExperiment/freecolFilter/00886/src/net/sf/freecol/common/util/Introspector.java)
        throws IllegalArgumentException {
        String methodName = "set" + field.substring(0, 1).toUpperCase()
            + field.substring(1);

        try {
            return theClass.getMethod(methodName, argType);
        } catch (Exception e) {
            throw new IllegalArgumentException(theClass.getName()
                                               + "." + methodName
                                               + ": " + e.toString());
        }
    }
,
>
, <(startLine=600 endLine=608 srcPath=/root/NewExperiment/freecolFilter/01118/src/net/sf/freecol/server/generator/TerrainGenerator.java)
        for (int y = midy-1; y >= 0; y--) {
            if (pNP == null && !map.getTile(0, y).isLand()) {
                pNP = new Position(0, y);
            }
            if (pNA == null && !map.getTile(maxx-1, y).isLand()) {
                pNA = new Position(maxx-1, y);
            }
            if (pNP != null && pNA != null) break;
        }
,
(startLine=609 endLine=617 srcPath=/root/NewExperiment/freecolFilter/01118/src/net/sf/freecol/server/generator/TerrainGenerator.java)
        for (int y = midy; y < maxy; y++) {
            if (pSP == null && !map.getTile(0, y).isLand()) {
                pSP = new Position(0, y);
            }
            if (pSA == null && !map.getTile(maxx-1, y).isLand()) {
                pSA = new Position(maxx-1, y);
            }
            if (pSP != null && pSA != null) break;
        }
,
>
, <(startLine=705 endLine=718 srcPath=/root/NewExperiment/freecolFilter/01299/src/net/sf/freecol/server/generator/TerrainGenerator.java)
        if (arctic == null) {
            arctic = new ServerRegion(game,
                "model.region.arctic", RegionType.LAND, null);
            arctic.setPrediscovered(true);
            map.putRegion(arctic);
            for (int x = 0; x < map.getWidth(); x++) {
                for (int y = 0; y < arcticHeight; y++) {
                    if (map.isValid(x, y)) {
                        Tile tile = map.getTile(x, y);
                        if (tile.isLand()) arctic.addTile(tile);
                    }
                }
            }
        }
,
(startLine=721 endLine=734 srcPath=/root/NewExperiment/freecolFilter/01299/src/net/sf/freecol/server/generator/TerrainGenerator.java)
        if (antarctic == null) {
            antarctic = new ServerRegion(game,
                "model.region.antarctic", RegionType.LAND, null);
            antarctic.setPrediscovered(true);
            map.putRegion(antarctic);
            for (int x = 0; x < map.getWidth(); x++) {
                for (int y = antarcticHeight; y < map.getHeight(); y++) {
                    if (map.isValid(x, y)) {
                        Tile tile = map.getTile(x, y);
                        if (tile.isLand()) antarctic.addTile(tile);
                    }
                }
            }
        }
,
>
, <(startLine=146 endLine=177 srcPath=/root/NewExperiment/freecolFilter/01657/src/net/sf/freecol/common/resources/FAFile.java)
        while (line != null && !line.startsWith("[Chars]")) {
            String name = line;
            if ((line = in.readLine()) == null) break;
            st = new StringTokenizer(line);
            int width = Integer.parseInt(st.nextToken());
            int height = Integer.parseInt(st.nextToken());
            int numberOfPoints = Integer.parseInt(st.nextToken());
            int[] xs = new int[numberOfPoints];
            int[] ys = new int[numberOfPoints];

            if ((line = in.readLine()) == null) break;
            st = new StringTokenizer(line);
            for (int i=0; i<numberOfPoints; i++) {
                xs[i] = Integer.parseInt(st.nextToken());               
            }

            if ((line = in.readLine()) == null) break;
            st = new StringTokenizer(line);         
            for (int i=0; i<numberOfPoints; i++) {
                ys[i] = Integer.parseInt(st.nextToken());               
            }   

            FAName newLetter = new FAName();
            newLetter.width = width;
            newLetter.height = height;
            newLetter.points = new Point[numberOfPoints];
            for (int i=0; i<numberOfPoints; i++) {
                newLetter.points[i] = new Point(xs[i], ys[i]);                
            }                       
            letters.put(name, newLetter);
            line = in.readLine();
        }
,
(startLine=180 endLine=208 srcPath=/root/NewExperiment/freecolFilter/01657/src/net/sf/freecol/common/resources/FAFile.java)
        while (line != null) {
            st = new StringTokenizer(line.substring(1));
            char letter = line.charAt(0);
            int advance = Integer.parseInt(st.nextToken());
            int numberOfPoints = Integer.parseInt(st.nextToken());
            int[] xs = new int[numberOfPoints];
            int[] ys = new int[numberOfPoints];

            if ((line = in.readLine()) == null) break;
            st = new StringTokenizer(line);
            for (int i = 0; i < numberOfPoints; i++) {
                xs[i] = Integer.parseInt(st.nextToken());               
            }

            if ((line = in.readLine()) == null) break;
            st = new StringTokenizer(line);         
            for (int i = 0; i < numberOfPoints; i++) {
                ys[i] = Integer.parseInt(st.nextToken());               
            }   

            FALetter newLetter = new FALetter();
            newLetter.advance = advance;
            newLetter.points = new Point[numberOfPoints];
            for (int i = 0; i < numberOfPoints; i++) {
                newLetter.points[i] = new Point(xs[i], ys[i]);                
            }           
            letters.put(letter, newLetter);
            line = in.readLine();
        }
,
>
, <(startLine=387 endLine=398 srcPath=/root/NewExperiment/freecolFilter/01350/src/net/sf/freecol/client/control/InGameInputHandler.java)
    private Element addPlayer(Element element) {
        final Game game = getGame();
        Element playerElement = (Element)element
            .getElementsByTagName(Player.getXMLElementTagName()).item(0);
        String id = FreeColObject.readId(playerElement);
        if (game.getFreeColGameObject(id, Player.class) == null) {
            game.addPlayer(new Player(game, playerElement));
        } else {
            game.getFreeColGameObject(id).readFromXMLElement(playerElement);
        }
        return null;
    }
,
(startLine=119 endLine=134 srcPath=/root/NewExperiment/freecolFilter/01350/src/net/sf/freecol/client/control/PreGameInputHandler.java)
    private Element addPlayer(Element element) {
        Game game = getFreeColClient().getGame();

        Element playerElement = (Element)element
            .getElementsByTagName(Player.getXMLElementTagName()).item(0);
        String id = FreeColObject.readId(playerElement);
        FreeColGameObject fcgo = game.getFreeColGameObject(id);
        if (fcgo == null) {
            game.addPlayer(new Player(game, playerElement));
        } else {
            fcgo.readFromXMLElement(playerElement);
        }
        getGUI().refreshPlayersTable();

        return null;
    }
,
>
, <(startLine=435 endLine=464 srcPath=/root/NewExperiment/freecolFilter/00361/src/net/sf/freecol/common/model/TileItemContainer.java)
    public TileImprovement addRiver(int magnitude) {
        if (magnitude == TileImprovement.NO_RIVER) {
            return null;
        }
        if (hasRiver()) {
            // Already have a river here, see if magnitude is correct, return existing river.
            if (river.getMagnitude() != magnitude) {
                setRiverMagnitude(magnitude);
            }
            return river;
        }
        // Get the list of ImprovementTypes
        List<TileImprovementType> tiTypeList = FreeCol.getSpecification().getTileImprovementTypeList();
        // Get the first river that matches or is below
        for (TileImprovementType tiType : tiTypeList) {
            if ("model.improvement.River".equals(tiType.getId()) &&
                tiType.getMagnitude() <= magnitude) {
                TileImprovement river = new TileImprovement(getGame(), tile, tiType);
                this.river = river;
                if (this.tile.getType().canHaveRiver()) {
                    // only update surrounding tiles for terrain tiles
                    // river mouth on ocean/lake tiles are treated separately
                    adjustNeighbourRiverStyle(TileImprovement.NO_RIVER);
                }
                return (TileImprovement) addTileItem(river);
            }
        }
        // Don't have any river ImprovementTypes? Throw exception
        throw new RuntimeException("No TileImprovementType with TypeId == river");
    }
,
(startLine=483 endLine=518 srcPath=/root/NewExperiment/freecolFilter/00361/src/net/sf/freecol/common/model/TileItemContainer.java)
    public void setRiverMagnitude(int magnitude) {
        if (!hasRiver() && magnitude > TileImprovement.NO_RIVER) {
            // No river at the moment, create a new one
            addRiver(magnitude);
            return;
        }
        if (river.getMagnitude() == magnitude) {
            return;
        }
        if (magnitude == TileImprovement.NO_RIVER) {
            // Remove river
            removeRiver();
            return;
        }
        int oldMagnitude = river.getMagnitude();
        // Get the list of ImprovementTypes
        List<TileImprovementType> tiTypeList = FreeCol.getSpecification().getTileImprovementTypeList();
        // Check if there is another river type defined for this magnitude
        for (TileImprovementType tiType : tiTypeList) {
            if ("model.improvement.River".equals(tiType.getId()) && 
                tiType.getMagnitude() <= magnitude) {
                if (tiType != river.getType()) {
                    // Has a different river type for this magnitude
                    TileImprovement r = new TileImprovement(getGame(), tile, tiType);
                    this.river = r;
                } else {
                    // Same river type, adjust magnitude
                    river.setMagnitude(magnitude);
                }
                adjustNeighbourRiverStyle(oldMagnitude);
                return;
            }
        }
        // Don't have any river ImprovementTypes? Throw exception
        throw new RuntimeException("No TileImprovementType with TypeId == river");
    }
,
>
, <(startLine=192 endLine=207 srcPath=/root/NewExperiment/freecolFilter/00551/src/net/sf/freecol/client/gui/FreeColMenuBar.java)
    protected JCheckBoxMenuItem getCheckBoxMenuItem(String actionID) {

        JCheckBoxMenuItem rtn = null;
        FreeColAction action = am.getFreeColAction(actionID);

        if (action != null) {
            rtn = new JCheckBoxMenuItem();
            rtn.setAction(action);
            rtn.setOpaque(false);

            rtn.setSelected(((SelectableAction) am.getFreeColAction(actionID)).isSelected());
        } else
            logger.finest("Could not create menu item. [" + actionID + "] not found.");

        return rtn;
    }
,
(startLine=218 endLine=233 srcPath=/root/NewExperiment/freecolFilter/00551/src/net/sf/freecol/client/gui/FreeColMenuBar.java)
                                                          ButtonGroup group) {
        JRadioButtonMenuItem rtn = null;
        FreeColAction action = am.getFreeColAction(actionID);

        if (action != null) {
            rtn = new JRadioButtonMenuItem();
            rtn.setAction(action);
            rtn.setOpaque(false);

            rtn.setSelected(((SelectableAction) am.getFreeColAction(actionID)).isSelected());
            group.add(rtn);
        } else {
            logger.finest("Could not create menu item. [" + actionID + "] not found.");
        }
        return rtn;
    }
,
>
, <(startLine=430 endLine=441 srcPath=/root/NewExperiment/freecolFilter/01638/src/net/sf/freecol/common/model/NativeTrade.java)
        if (SETTLEMENT_TO_UNIT_TAG.equals(tag)) {
            while (xr.moreTags()) {
                tag = xr.getLocalName();
                if (NativeTradeItem.getTagName().equals(tag)) {
                    NativeTradeItem nti = new NativeTradeItem(game, xr);
                    if (nti != null) this.settlementToUnit.add(nti);
                } else {
                    logger.warning("SettlementToUnit-item expected, not: " + tag);
                }
            }

        } else if (UNIT_TO_SETTLEMENT_TAG.equals(tag)) {
,
(startLine=441 endLine=452 srcPath=/root/NewExperiment/freecolFilter/01638/src/net/sf/freecol/common/model/NativeTrade.java)
        } else if (UNIT_TO_SETTLEMENT_TAG.equals(tag)) {
            while (xr.moreTags()) {
                tag = xr.getLocalName();
                if (NativeTradeItem.getTagName().equals(tag)) {
                    NativeTradeItem nti = new NativeTradeItem(game, xr);
                    if (nti != null) this.unitToSettlement.add(nti);
                } else {
                    logger.warning("UnitToSettlement-item expected, not: " + tag);
                }
            }

        } else if (NativeTradeItem.getTagName().equals(tag)) {
,
>
, <(startLine=2013 endLine=2070 srcPath=/root/NewExperiment/freecolFilter/01157/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        while (itemIterator.hasNext()) {
            TradeItem item = itemIterator.next();
            if (item instanceof GoldTradeItem) {
                int gold = ((GoldTradeItem) item).getGold();
                if (item.getSource() == getPlayer()) {
                    value -= gold;
                } else {
                    value += gold;
                }
            } else if (item instanceof StanceTradeItem) {
                // TODO: evaluate whether we want this stance change
                stance = ((StanceTradeItem) item).getStance();
                switch (stance) {
                    case UNCONTACTED:
                        validOffer = false; //never accept invalid stance change
                        break;
                    case WAR: // always accept war without cost
                        break;
                    case CEASE_FIRE:
                        value -= 500;
                        break;
                    case PEACE:
                        if (!agreement.getSender().hasAbility("model.ability.alwaysOfferedPeace")) {
                            // TODO: introduce some kind of counter in order to avoid
                            // Benjamin Franklin exploit
                            value -= 1000;
                        }
                        break;
                    case ALLIANCE:
                        value -= 2000;
                        break;
                    }

            } else if (item instanceof ColonyTradeItem) {
                // TODO: evaluate whether we might wish to give up a colony
                if (item.getSource() == getPlayer()) {
                    validOffer = false;
                    break;
                } else {
                    value += 1000;
                }
            } else if (item instanceof UnitTradeItem) {
                // TODO: evaluate whether we might wish to give up a unit
                if (item.getSource() == getPlayer()) {
                    validOffer = false;
                    break;
                } else {
                    value += 100;
                }
            } else if (item instanceof GoodsTradeItem) {
                Goods goods = ((GoodsTradeItem) item).getGoods();
                if (item.getSource() == getPlayer()) {
                    value -= getPlayer().getMarket().getBidPrice(goods.getType(), goods.getAmount());
                } else {
                    value += getPlayer().getMarket().getSalePrice(goods.getType(), goods.getAmount());
                }
            }
        }
,
(startLine=726 endLine=787 srcPath=/root/NewExperiment/freecolFilter/01157/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        while (itemIterator.hasNext()) {
            TradeItem item = itemIterator.next();
            if (item instanceof GoldTradeItem) {
                int gold = ((GoldTradeItem) item).getGold();
                if (item.getSource() == getPlayer()) {
                    value -= gold;
                } else {
                    value += gold;
                }
            } else if (item instanceof StanceTradeItem) {
                // TODO: evaluate whether we want this stance change
                stance = ((StanceTradeItem) item).getStance();
                switch (stance) {
                    case UNCONTACTED:
                        // Invalid, never accept.
                        validOffer = false;
                        break;
                    case WAR: // Always accept war without cost.
                        break;
                    case CEASE_FIRE:
                        value -= 500;
                        break;
                    case PEACE:
                        if (!agreement.getSender()
                            .hasAbility("model.ability.alwaysOfferedPeace")) {
                            // TODO: introduce some kind of counter in
                            // order to avoid Benjamin Franklin exploit.
                            value -= 1000;
                        }
                        break;
                    case ALLIANCE:
                        value -= 2000;
                        break;
                    }

            } else if (item instanceof ColonyTradeItem) {
                // TODO: evaluate whether we might wish to give up a colony
                if (item.getSource() == getPlayer()) {
                    validOffer = false;
                    break;
                } else {
                    value += 1000;
                }
            } else if (item instanceof UnitTradeItem) {
                // TODO: evaluate whether we might wish to give up a unit
                if (item.getSource() == getPlayer()) {
                    validOffer = false;
                    break;
                } else {
                    value += 100;
                }
            } else if (item instanceof GoodsTradeItem) {
                Goods goods = ((GoodsTradeItem) item).getGoods();
                if (item.getSource() == getPlayer()) {
                    value -= getPlayer().getMarket()
                        .getBidPrice(goods.getType(), goods.getAmount());
                } else {
                    value += getPlayer().getMarket()
                        .getSalePrice(goods.getType(), goods.getAmount());
                }
            }
        }
,
>
, <(startLine=263 endLine=273 srcPath=/root/NewExperiment/freecolFilter/00493/src/net/sf/freecol/client/gui/panel/DragListener.java)
        if (tempUnit.getWorkTile() != null) {
            JMenuItem menuItem = new JMenuItem(Messages.message("showProduction"));
            menuItem.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent event) {
                        Canvas canvas = unitLabel.getCanvas();
                        canvas.showSubPanel(new ColonyTileProductionPanel(canvas, tempUnit.getWorkTile(), tempUnit.getWorkType()));
                    }
                });
            menu.add(menuItem);
            separatorNeeded = true;
        } else if (tempUnit.getWorkLocation() != null) {
,
(startLine=273 endLine=283 srcPath=/root/NewExperiment/freecolFilter/00493/src/net/sf/freecol/client/gui/panel/DragListener.java)
        } else if (tempUnit.getWorkLocation() != null) {
            JMenuItem menuItem = new JMenuItem(Messages.message("showProductivity"));
            menuItem.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent event) {
                        Canvas canvas = unitLabel.getCanvas();
                        canvas.showSubPanel(new BuildingProductionPanel(canvas, tempUnit));
                    }
                });
            menu.add(menuItem);
            separatorNeeded = true;
        }
,
>
, <(startLine=238 endLine=250 srcPath=/root/NewExperiment/freecolFilter/00038/src/net/sf/freecol/common/model/ColonyTile.java)
        if (!(isColonyCenterTile())) {
            int amount = getUnit().getFarmedPotential(getUnit().getWorkType(), workTile);

            if (!workTile.isLand() && !colony.getBuilding(Building.DOCK).isBuilt()) {
                amount = 0;
            }

            if (amount > 0) {
                amount += colony.getProductionBonus();
                if (amount < 1) amount = 1;
                colony.addGoods(getUnit().getWorkType(), amount);
            }
        } else {
,
(startLine=277 endLine=294 srcPath=/root/NewExperiment/freecolFilter/00038/src/net/sf/freecol/common/model/ColonyTile.java)
        if (!(isColonyCenterTile())) {
            if (getUnit().getWorkType() != goodsType) {
                return 0;
            }

            int amount = getUnit().getFarmedPotential(getUnit().getWorkType(), workTile);

            if (!workTile.isLand() && !colony.getBuilding(Building.DOCK).isBuilt()) {
                amount = 0;
            }

            if (amount > 0) {
                amount += colony.getProductionBonus();
                return amount;
            }

            return 0;
        } else {
,
>
, <(startLine=264 endLine=275 srcPath=/root/NewExperiment/freecolFilter/01311/src/net/sf/freecol/common/model/Monarch.java)
        if (!player.hasAbility(Ability.IGNORE_EUROPEAN_WARS)) {
            for (Player enemy : getGame().getLiveEuropeanPlayers()) {
                if (enemy.isREF()) continue;
                switch (player.getStance(enemy)) {
                case PEACE: case CEASE_FIRE:
                    if (!enemy.hasAbility(Ability.IGNORE_EUROPEAN_WARS)) {
                        enemies.add(enemy);
                    }
                    break;
                }
            }
        }
,
(startLine=287 endLine=298 srcPath=/root/NewExperiment/freecolFilter/01311/src/net/sf/freecol/common/model/Monarch.java)
        if (!player.hasAbility(Ability.IGNORE_EUROPEAN_WARS)) {
            for (Player enemy : getGame().getLiveEuropeanPlayers()) {
                if (enemy.isREF()) continue;
                switch (player.getStance(enemy)) {
                case WAR: case CEASE_FIRE:
                    if (!enemy.hasAbility(Ability.IGNORE_EUROPEAN_WARS)) {
                        friends.add(enemy);
                    }
                    break;
                }
            }
        }
,
>
, <(startLine=1102 endLine=1117 srcPath=/root/NewExperiment/freecolFilter/00092/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                } else {
                    // TODO: Better method for finding the node on the closed list:
                    for (i=0; i<closedList.size(); i++) {
                        if (((PathNode) closedList.get(i)).getTile() == newTile) {
                            successor = (PathNode) closedList.get(i);
                            break;
                        }
                    }
                    if (successor != null) {
                        if (successor.getF() <= f) {
                            continue;
                        } else {
                            closedList.remove(i);
                        }
                    }
                }
,
(startLine=459 endLine=474 srcPath=/root/NewExperiment/freecolFilter/00092/src/net/sf/freecol/common/model/Map.java)
                } else {
                    // TODO: Better method for finding the node on the closed list:
                    for (i=0; i<closedList.size(); i++) {
                        if (((PathNode) closedList.get(i)).getTile() == newTile) {
                            successor = (PathNode) closedList.get(i);
                            break;
                        }
                    }
                    if (successor != null) {
                        if (successor.getF() <= f) {
                            continue;
                        } else {
                            closedList.remove(i);
                        }
                    }
                }
,
(startLine=622 endLine=637 srcPath=/root/NewExperiment/freecolFilter/00092/src/net/sf/freecol/common/model/Map.java)
                } else {
                    // TODO: Better method for finding the node on the closed list:
                    for (i=0; i<closedList.size(); i++) {
                        if (((PathNode) closedList.get(i)).getTile() == newTile) {
                            successor = (PathNode) closedList.get(i);
                            break;
                        }
                    }
                    if (successor != null) {
                        if (successor.getF() <= f) {
                            continue;
                        } else {
                            closedList.remove(i);
                        }
                    }
                }
,
>
, <(startLine=597 endLine=615 srcPath=/root/NewExperiment/freecolFilter/00830/src/net/sf/freecol/client/gui/panel/DragListener.java)
            if (canvas.getClient().getMyPlayer().canTrade(goods)) {
                JMenuItem unload = new JMenuItem(Messages.message("unload"));
                unload.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            inGameController.unloadCargo(goods, false);
                            if (parentPanel instanceof CargoPanel) {
                                CargoPanel cargoPanel = (CargoPanel) parentPanel;
                                cargoPanel.initialize();
                                /*
                                  if (cargoPanel.getParentPanel() instanceof ColonyPanel) {
                                  ((ColonyPanel) cargoPanel.getParentPanel()).updateWarehouse();
                                  }
                                */
                            }
                            parentPanel.revalidate();
                        }
                    });
                menu.add(unload);
            } else {
,
(startLine=617 endLine=630 srcPath=/root/NewExperiment/freecolFilter/00830/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    && ((Unit)goods.getLocation()).isInEurope()) {
                    JMenuItem pay = new JMenuItem(Messages.message("boycottedGoods.payArrears"));
                    pay.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                inGameController.payArrears(goods);
                                if (parentPanel instanceof CargoPanel) {
                                    CargoPanel cargoPanel = (CargoPanel) parentPanel;
                                    cargoPanel.initialize();
                                }
                                parentPanel.revalidate();
                            }
                        });
                    menu.add(pay);
                }
,
>
, <(startLine=2919 endLine=2959 srcPath=/root/NewExperiment/freecolFilter/00479/src/net/sf/freecol/client/control/InGameController.java)
    public void assignTeacher(Unit student, Unit teacher) {
        Player player = freeColClient.getMyPlayer();

        if (freeColClient.getGame().getCurrentPlayer() != player) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        if (!student.canBeStudent(teacher)) {
            throw new IllegalStateException("Unit can not be student!");
        }
        if (!teacher.getColony().canTrain(teacher)) {
            throw new IllegalStateException("Unit can not be teacher!");
        }
        if (student.getOwner() != player) {
            throw new IllegalStateException("Student is not your unit!");
        }
        if (teacher.getOwner() != player) {
            throw new IllegalStateException("Teacher is not your unit!");
        }
        if (student.getColony() != teacher.getColony()) {
            throw new IllegalStateException("Student and teacher are not in the same colony!");
        }
        if (!(student.getLocation() instanceof WorkLocation)) {
            throw new IllegalStateException("Student is not in a WorkLocation!");
        }

        Element assignTeacherElement = Message.createNewRootElement("assignTeacher");
        assignTeacherElement.setAttribute("student", student.getId());
        assignTeacherElement.setAttribute("teacher", teacher.getId());

        if (student.getTeacher() != null) {
            student.getTeacher().setStudent(null);
        }
        student.setTeacher(teacher);
        if (teacher.getStudent() != null) {
            teacher.getStudent().setTeacher(null);
        }
        teacher.setStudent(student);

        freeColClient.getClient().sendAndWait(assignTeacherElement);
    }
,
(startLine=2335 endLine=2368 srcPath=/root/NewExperiment/freecolFilter/00479/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element assignTeacher(Connection connection, Element workElement) {
        ServerPlayer player = getFreeColServer().getPlayer(connection);
        Unit student = (Unit) getGame().getFreeColGameObject(workElement.getAttribute("student"));
        Unit teacher = (Unit) getGame().getFreeColGameObject(workElement.getAttribute("teacher"));

        if (!student.canBeStudent(teacher)) {
            throw new IllegalStateException("Unit can not be student!");
        }
        if (!teacher.getColony().canTrain(teacher)) {
            throw new IllegalStateException("Unit can not be teacher!");
        }
        if (student.getOwner() != player) {
            throw new IllegalStateException("Student is not your unit!");
        }
        if (teacher.getOwner() != player) {
            throw new IllegalStateException("Teacher is not your unit!");
        }
        if (student.getColony() != teacher.getColony()) {
            throw new IllegalStateException("Student and teacher are not in the same colony!");
        }
        if (!(student.getLocation() instanceof WorkLocation)) {
            throw new IllegalStateException("Student is not in a WorkLocation!");
        }
        // No reason to send an update to other players: this is always hidden.
        if (student.getTeacher() != null) {
            student.getTeacher().setStudent(null);
        }
        student.setTeacher(teacher);
        if (teacher.getStudent() != null) {
            teacher.getStudent().setTeacher(null);
        }
        teacher.setStudent(student);
        return null;
    }
,
>
, <(startLine=622 endLine=635 srcPath=/root/NewExperiment/freecolFilter/01049/src/net/sf/freecol/client/gui/i18n/Messages.java)
    public static String getLabel(UnitType someType, Unit.Role someRole, int count) {
        String key = someRole.toString().toLowerCase();
        if (someRole == Unit.Role.DEFAULT) {
            key = "name";
        }
        String messageID = someType.getId() +  "." + key;
        if (containsKey(messageID)) {
            return message(messageID);
        } else {
            return message(StringTemplate.template("model.unit." + key + ".name")
                           .addAmount("%number%", count)
                           .addName("%unit%", someType));
        }
    }
,
(startLine=644 endLine=656 srcPath=/root/NewExperiment/freecolFilter/01049/src/net/sf/freecol/client/gui/i18n/Messages.java)
    public static String getLabel(AbstractUnit unit) {
        String key = unit.getRole().toString().toLowerCase();
        if (unit.getRole() == Unit.Role.DEFAULT) {
            key = "name";
        }
        String messageID = unit.getId() +  "." + key;
        if (containsKey(messageID)) {
            return message(messageID);
        } else {
            return message(StringTemplate.template("model.unit." + key + ".name")
                           .addName("%unit%", unit));
        }
    }
,
>
, <(startLine=88 endLine=124 srcPath=/root/NewExperiment/freecolFilter/01430/src/net/sf/freecol/common/networking/LoadGoodsMessage.java)
                          Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit carrier;
        try {
            carrier = player.getOurFreeColGameObject(carrierId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }
        if (!carrier.canCarryGoods()) {
            return DOMMessage.clientError("Not a goods carrier: " + carrierId);
        } else if (carrier.getTradeLocation() == null) {
            return DOMMessage.clientError("Not at a trade location: " + carrierId);
        }

        GoodsType type = server.getSpecification().getGoodsType(goodsTypeId);
        if (type == null) {
            return DOMMessage.clientError("Not a goods type: " + goodsTypeId);
        }

        int amount;
        try {
            amount = Integer.parseInt(amountString);
        } catch (NumberFormatException e) {
            return DOMMessage.clientError("Bad amount: " + amountString);
        }
        if (amount <= 0) {
            return DOMMessage.clientError("Amount must be positive: "
                + amountString);
        } else if (amount > carrier.getLoadableAmount(type)) {
            return DOMMessage.clientError("Too much goods:  " + amountString);
        }

        // Load the goods
        return server.getInGameController()
            .loadGoods(serverPlayer, type, amount, carrier);
    }
,
(startLine=88 endLine=126 srcPath=/root/NewExperiment/freecolFilter/01430/src/net/sf/freecol/common/networking/UnloadGoodsMessage.java)
                          Connection connection) {
        final ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit carrier;
        try {
            carrier = player.getOurFreeColGameObject(carrierId, Unit.class);
        } catch (Exception e) {
            return DOMMessage.clientError(e.getMessage());
        }
        if (!carrier.canCarryGoods()) {
            return DOMMessage.clientError("Not a goods carrier: " + carrierId);
        }
        // Do not check location, carriers can dump goods anywhere

        GoodsType type = server.getSpecification().getGoodsType(goodsTypeId);
        if (type == null) {
            return DOMMessage.clientError("Not a goods type: " + goodsTypeId);
        }

        int amount;
        try {
            amount = Integer.parseInt(amountString);
        } catch (NumberFormatException e) {
            return DOMMessage.clientError("Bad amount: " + amountString);
        }
        if (amount <= 0) {
            return DOMMessage.clientError("Amount must be positive: "
                                       + amountString);
        }
        int present = carrier.getGoodsCount(type);
        if (present < amount) {
            return DOMMessage.clientError("Attempt to unload " + amount
                + " " + type.getId() + " but only " + present + " present.");
        }

        // Try to unload.
        return server.getInGameController()
            .unloadGoods(serverPlayer, type, amount, carrier);
    }
,
>
, <(startLine=171 endLine=212 srcPath=/root/NewExperiment/freecolFilter/00864/src/net/sf/freecol/client/gui/panel/ReportNavalPanel.java)
    private void handleLocation(String location, boolean makeButton) {
        List<Unit> unitList = locations.get(location);
        
        // Do not show locations without units
        if (unitList == null) {
        	return;
        }
        
        JComponent component;
        if (makeButton) {
            JButton button = FreeColPanel.getLinkButton(location, null, location);
            button.addActionListener(this);
            component = button;
        } else {
            component = new JLabel(location);
        }
        reportPanel.add(component, "newline, span, split 2");
        reportPanel.add(new JSeparator(JSeparator.HORIZONTAL), "growx");

        Collections.sort(unitList, ReportPanel.getUnitTypeComparator());
        for (Unit unit : unitList) {
        	UnitLabel unitLabel = new UnitLabel(unit, getCanvas(), true);
        	if (unit.getDestination() != null) {
              String destination = Messages.message(unit.getDestination().getLocationNameFor(getMyPlayer()));
              unitLabel.setToolTipText("<html>" + unitLabel.getToolTipText() + "<br>"
                                       + Messages.message(StringTemplate.template("goingTo")
                                                          .addName("%location%", destination))
                                       + "</html>");
        	}
        	// this is necessary because UnitLabel deselects carriers
        	unitLabel.setSelected(true);
        	reportPanel.add(unitLabel, "newline, sg");
        	for (Goods goods : unit.getGoodsList()) {
        		GoodsLabel goodsLabel = new GoodsLabel(goods, getCanvas());
        		reportPanel.add(goodsLabel);
        	}
        	for (Unit unitLoaded : unit.getUnitList()) {
        		UnitLabel unitLoadedLabel = new UnitLabel(unitLoaded, getCanvas(), true);
        		reportPanel.add(unitLoadedLabel);
        	}
        }
    }
,
(startLine=165 endLine=204 srcPath=/root/NewExperiment/freecolFilter/00864/src/net/sf/freecol/client/gui/panel/ReportCargoPanel.java)
    private void handleLocation(String location, boolean makeButton) {
        List<Unit> unitList = locations.get(location);
        JComponent component;
        if (makeButton) {
            JButton button = FreeColPanel.getLinkButton(location, null, location);
            button.addActionListener(this);
            component = button;
        } else {
            component = new JLabel(location);
        }
        reportPanel.add(component, "newline, span, split 2");
        reportPanel.add(new JSeparator(JSeparator.HORIZONTAL), "growx");

        if (unitList == null) {
            reportPanel.add(new JLabel(Messages.message("none")), "sg");
        } else {
            Collections.sort(unitList, ReportPanel.getUnitTypeComparator());
            for (Unit unit : unitList) {
                UnitLabel unitLabel = new UnitLabel(unit, getCanvas(), true);
                if (unit.getDestination() != null) {
                    String destination = Messages.message(unit.getDestination().getLocationNameFor(getMyPlayer()));
                    unitLabel.setToolTipText("<html>" + unitLabel.getToolTipText() + "<br>" +
                                             Messages.message(StringTemplate.template("goingTo")
                                                              .addName("%location%", destination))
                                             + "</html>");
                }
                // this is necessary because UnitLabel deselects carriers
                unitLabel.setSelected(true);
                reportPanel.add(unitLabel, "newline, sg");
                for (Goods goods : unit.getGoodsList()) {
                    GoodsLabel goodsLabel = new GoodsLabel(goods, getCanvas());
                    reportPanel.add(goodsLabel);
                }
                for (Unit unitLoaded : unit.getUnitList()) {
                    UnitLabel unitLoadedLabel = new UnitLabel(unitLoaded, getCanvas(), true);
                    reportPanel.add(unitLoadedLabel);
                }
            }
        }
    }
,
>
, <(startLine=1342 endLine=1377 srcPath=/root/NewExperiment/freecolFilter/00671/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            while (ui.hasNext() && recruitCount > 0) {
                Unit u = (ui.next());
                if (!u.isArmed() && u.canBeEquippedWith(muskets)) {
                    recruitCount--;
                    Element equipUnitElement = Message.createNewRootElement("equipUnit");
                    equipUnitElement.setAttribute("unit", u.getId());
                    equipUnitElement.setAttribute("type", muskets.getId());
                    equipUnitElement.setAttribute("amount", "1");
                    u.equipWith(muskets);
                    sendAndWaitSafely(equipUnitElement);
                    Element putOutsideColonyElement = Message.createNewRootElement("putOutsideColony");
                    putOutsideColonyElement.setAttribute("unit", u.getId());
                    u.putOutsideColony();
                    sendAndWaitSafely(putOutsideColonyElement);
                    // Check if the unit can fortify before sending the order
                    if (u.checkSetState(UnitState.FORTIFYING)) {
                        Element changeStateElement = Message.createNewRootElement("changeState");
                        changeStateElement.setAttribute("unit", u.getId());
                        changeStateElement.setAttribute("state", UnitState.FORTIFYING.toString());
                        sendAndWaitSafely(changeStateElement);
                    }
                    olddefenders++;
                    if (!u.isMounted() && u.canBeEquippedWith(horses)) {
                        equipUnitElement = Message.createNewRootElement("equipUnit");
                        equipUnitElement.setAttribute("unit", u.getId());
                        equipUnitElement.setAttribute("type", horses.getId());
                        equipUnitElement.setAttribute("amount", "1");
                        sendAndWaitSafely(equipUnitElement);
                    } else {
                        needHorses = true;
                    }
                } else {
                    needMuskets = true;
                    break;
                }
            }
,
(startLine=336 endLine=371 srcPath=/root/NewExperiment/freecolFilter/00671/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            while (ui.hasNext() && recruitCount > 0) {
                Unit u = (ui.next());
                if (!u.isArmed() && u.canBeEquippedWith(muskets)) {
                    recruitCount--;
                    Element equipUnitElement = Message.createNewRootElement("equipUnit");
                    equipUnitElement.setAttribute("unit", u.getId());
                    equipUnitElement.setAttribute("type", muskets.getId());
                    equipUnitElement.setAttribute("amount", "1");
                    u.equipWith(muskets);
                    sendAndWaitSafely(equipUnitElement);
                    Element putOutsideColonyElement = Message.createNewRootElement("putOutsideColony");
                    putOutsideColonyElement.setAttribute("unit", u.getId());
                    u.putOutsideColony();
                    sendAndWaitSafely(putOutsideColonyElement);
                    // Check if the unit can fortify before sending the order
                    if (u.checkSetState(UnitState.FORTIFYING)) {
                        Element changeStateElement = Message.createNewRootElement("changeState");
                        changeStateElement.setAttribute("unit", u.getId());
                        changeStateElement.setAttribute("state", UnitState.FORTIFYING.toString());
                        sendAndWaitSafely(changeStateElement);
                    }
                    olddefenders++;
                    if (!u.isMounted() && u.canBeEquippedWith(horses)) {
                        equipUnitElement = Message.createNewRootElement("equipUnit");
                        equipUnitElement.setAttribute("unit", u.getId());
                        equipUnitElement.setAttribute("type", horses.getId());
                        equipUnitElement.setAttribute("amount", "1");
                        sendAndWaitSafely(equipUnitElement);
                    } else {
                        needHorses = true;
                    }
                } else {
                    needMuskets = true;
                    break;
                }
            }
,
>
, <(startLine=148 endLine=159 srcPath=/root/NewExperiment/freecolFilter/00761/src/net/sf/freecol/client/gui/panel/BuildingPanel.java)
    public void addPropertyChangeListeners() {
        building.addPropertyChangeListener(this);
        Colony colony = building.getColony();
        GoodsType type = building.getGoodsInputType();
        if (type != null) {
            colony.addPropertyChangeListener(type.getId(), this);
        }
        type = building.getGoodsOutputType();
        if (type != null) {
            colony.addPropertyChangeListener(type.getId(), this);
        }
    }
,
(startLine=161 endLine=172 srcPath=/root/NewExperiment/freecolFilter/00761/src/net/sf/freecol/client/gui/panel/BuildingPanel.java)
    public void removePropertyChangeListeners() {
        building.removePropertyChangeListener(this);
        Colony colony = building.getColony();
        GoodsType type = building.getGoodsInputType();
        if (type != null) {
            colony.removePropertyChangeListener(type.getId(), this);
        }
        type = building.getGoodsOutputType();
        if (type != null) {
            colony.removePropertyChangeListener(type.getId(), this);
        }
    }
,
>
, <(startLine=33 endLine=43 srcPath=/root/NewExperiment/freecolFilter/00086/src/net/sf/freecol/client/gui/panel/ReportForeignAffairPanel.java)
    public void initialize() {
        Player player = parent.getClient().getMyPlayer();
        Iterator opponents = parent.getClient().getFreeColServer().getGame().getEuropeanPlayers().iterator();
        // Display Panel
        reportPanel.removeAll();
        reportPanel.setLayout(new GridLayout(4, 1));
        while (opponents.hasNext()) {
            buildForeignAffairLabel(player, (Player) opponents.next());
        }
        reportPanel.doLayout();
    }
,
(startLine=31 endLine=41 srcPath=/root/NewExperiment/freecolFilter/00086/src/net/sf/freecol/client/gui/panel/ReportIndianPanel.java)
    public void initialize() {
        Player player = parent.getClient().getMyPlayer();
        Iterator opponents = parent.getClient().getFreeColServer().getGame().getPlayers().iterator();
        // Display Panel
        reportPanel.removeAll();
        reportPanel.setLayout(new GridLayout(8, 1));
        while (opponents.hasNext()) {
            buildIndianAdvisorLabel(player, (Player) opponents.next());
        }
        reportPanel.doLayout();
    }
,
>
, <(startLine=483 endLine=493 srcPath=/root/NewExperiment/freecolFilter/01359/src/net/sf/freecol/server/ai/mission/PioneeringMission.java)
    public void setTarget(Location target) {
        if (target == null
            || target instanceof Colony || target instanceof Tile) {
            boolean retarget = this.target != null && this.target != target;
            this.target = target;
            setTileImprovementPlan((target instanceof Tile)
                ? getBestPlan((Tile)target)
                : null);
            if (retarget) retargetTransportable();
        }
    }
,
(startLine=334 endLine=344 srcPath=/root/NewExperiment/freecolFilter/01359/src/net/sf/freecol/server/ai/mission/BuildColonyMission.java)
    public void setTarget(Location target) {
        if (target == null
            || target instanceof Colony || target instanceof Tile) {
            boolean retarget = this.target != null && this.target != target;
            this.target = target;
            this.colonyValue = (target instanceof Tile)
                ? getColonyValue((Tile)target)
                : -1;
            if (retarget) retargetTransportable();
        }
    }
,
>
, <(startLine=140 endLine=171 srcPath=/root/NewExperiment/freecolFilter/00670/src/net/sf/freecol/client/gui/FAFile.java)
        while (line != null && !line.startsWith("[Chars]")) {
            String name = line;
            st = new StringTokenizer(in.readLine());
            int width = Integer.parseInt(st.nextToken());
            int height = Integer.parseInt(st.nextToken());
            int numberOfPoints = Integer.parseInt(st.nextToken());
            int[] xs = new int[numberOfPoints];
            int[] ys = new int[numberOfPoints];

            line = in.readLine();
            st = new StringTokenizer(line);
            for (int i=0; i<numberOfPoints; i++) {
                xs[i] = Integer.parseInt(st.nextToken());               
            }

            line = in.readLine();
            st = new StringTokenizer(line);         
            for (int i=0; i<numberOfPoints; i++) {
                ys[i] = Integer.parseInt(st.nextToken());               
            }   

            FAName newLetter = new FAName();
            newLetter.name = name;
            newLetter.width = width;
            newLetter.height = height;
            newLetter.points = new Point[numberOfPoints];
            for (int i=0; i<numberOfPoints; i++) {
                newLetter.points[i] = new Point(xs[i], ys[i]);                
            }                       
            letters.put(name, newLetter);
            line = in.readLine();
        }
,
(startLine=174 endLine=202 srcPath=/root/NewExperiment/freecolFilter/00670/src/net/sf/freecol/client/gui/FAFile.java)
        while (line != null) {
            st = new StringTokenizer(line.substring(1));
            char letter = line.charAt(0);
            int advance = Integer.parseInt(st.nextToken());
            int numberOfPoints = Integer.parseInt(st.nextToken());
            int[] xs = new int[numberOfPoints];
            int[] ys = new int[numberOfPoints];
            line = in.readLine();
            st = new StringTokenizer(line);
            for (int i=0; i<numberOfPoints; i++) {
                xs[i] = Integer.parseInt(st.nextToken());               
            }

            line = in.readLine();
            st = new StringTokenizer(line);         
            for (int i=0; i<numberOfPoints; i++) {
                ys[i] = Integer.parseInt(st.nextToken());               
            }   

            FALetter newLetter = new FALetter();
            newLetter.letter = letter;
            newLetter.advance = advance;
            newLetter.points = new Point[numberOfPoints];
            for (int i=0; i<numberOfPoints; i++) {
                newLetter.points[i] = new Point(xs[i], ys[i]);                
            }           
            letters.put(new Character(letter), newLetter);
            line = in.readLine();
        }
,
>
, <(startLine=584 endLine=591 srcPath=/root/NewExperiment/freecolFilter/01454/src/net/sf/freecol/common/model/Region.java)
    public String toString() {
        StringBuilder sb = new StringBuilder(32);
        sb.append("[").append(getId())
            .append(" ").append((name == null) ? "(null)" : name)
            .append(" ").append(nameKey).append(" ").append(type)
            .append("]");
        return sb.toString();
    }
,
(startLine=485 endLine=493 srcPath=/root/NewExperiment/freecolFilter/01454/src/net/sf/freecol/server/model/ServerRegion.java)
    public String toString() {
        StringBuilder sb = new StringBuilder(32);
        sb.append("[").append(getId())
            .append(" ").append((name == null) ? "(null)" : name)
            .append(" ").append(nameKey).append(" ").append(type)
            .append(" ").append(size).append(" ").append(bounds)
            .append("]");
        return sb.toString();
    }
,
>
, <(startLine=355 endLine=372 srcPath=/root/NewExperiment/freecolFilter/00644/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
        } else {
            int averageIncome = 0;
            int numberOfGoods = 0;
            List<GoodsType> goodsTypes = FreeCol.getSpecification().getGoodsTypeList();
            for (GoodsType type : goodsTypes) {
                if (type.isStorable()) {
                    averageIncome += getPlayer().getIncomeAfterTaxes(type);
                    numberOfGoods++;
                }
            }
            averageIncome = averageIncome / numberOfGoods;
            if (getPlayer().getIncomeAfterTaxes(toBeDestroyed.getType()) > averageIncome) {
                // this is a more valuable type of goods
                return false;
            } else {
                return true;
            }
        }
,
(startLine=376 endLine=393 srcPath=/root/NewExperiment/freecolFilter/00644/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
        } else {
            int averageIncome = 0;
            int numberOfGoods = 0;
            List<GoodsType> goodsTypes = FreeCol.getSpecification().getGoodsTypeList();
            for (GoodsType type : goodsTypes) {
                if (type.isStorable()) {
                    averageIncome += getPlayer().getIncomeAfterTaxes(type);
                    numberOfGoods++;
                }
            }
            averageIncome = averageIncome / numberOfGoods;
            if (getPlayer().getIncomeAfterTaxes(toBeDestroyed.getType()) > averageIncome) {
                // this is a more valuable type of goods
                return false;
            } else {
                return true;
            }
        }
,
>
, <(startLine=663 endLine=673 srcPath=/root/NewExperiment/freecolFilter/01550/src/net/sf/freecol/client/gui/panel/Flag.java)
            } else {
                x = HEIGHT / 2;
                y = WIDTH;
                if (small) {
                    x -= BEND_Y;
                    y -= 2 * BEND_X;
                }
                double h = y / 2;
                double c = Math.sqrt(h * h + x * x);
                r = x * y / (y + 2 * c);
            }
,
(startLine=674 endLine=685 srcPath=/root/NewExperiment/freecolFilter/01550/src/net/sf/freecol/client/gui/panel/Flag.java)
        } else {
            // union shape is bend
            x = WIDTH;
            y = HEIGHT;
            if (small) {
                x -= BEND_X;
                y -= BEND_Y;
            }
            double c = Math.sqrt(x * x + y * y);
            double A = x * y / 2;
            r = 2 * A / (x + y + c);
        }
,
>
, <(startLine=1010 endLine=1045 srcPath=/root/NewExperiment/freecolFilter/00744/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    int getDefendColonyMissionValue(Unit u, Colony colony, int turns) {
        logger.finest("Entering method getDefendColonyMissionValue");
        
        // Sanitation
        if(colony == null)
        	return Integer.MIN_VALUE;
        
        // Temporary helper method for: giveMilitaryMission
        int value = 10025 - turns;
        int numberOfDefendingUnits = 0;

        Iterator<AIUnit> aui = getAIUnitIterator();
        while (aui.hasNext()) {
            Mission m = aui.next().getMission();
            if (m != null && m instanceof DefendSettlementMission) {
                if (((DefendSettlementMission) m).getSettlement() == colony) {
                	//TODO: this decrease seems too little
                	value -= 6; 
                    numberOfDefendingUnits++;
                }
            }
        }
        if (u.getOwner().isREF()) {
            value -= 19;
            if (numberOfDefendingUnits > 0) {
                return 0;
            }
        }
        //TODO: Does not take into consideration the various levels of
        //fortification, only if has one or not
        if (colony.getStockade() != null &&
            numberOfDefendingUnits > colony.getStockade().getLevel() + 1) {
            return Math.max(0, value - 9000);
        }
        return value;
    }
,
(startLine=1926 endLine=1965 srcPath=/root/NewExperiment/freecolFilter/00744/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    int getDefendColonyMissionValue(Unit u, Colony colony, int turns) {
        logger.finest("Entering method getDefendColonyMissionValue");

        // Sanitation
        if(colony == null)
        	return Integer.MIN_VALUE;

        // Temporary helper method for: giveMilitaryMission
        int value = 10025 - turns;
        int numberOfDefendingUnits = 0;
        /*
         * Iterator ui = colony.getTile().getUnitIterator(); while
         * (ui.hasNext()) { Unit tu = (Unit) ui.next(); if
         * (tu.isDefensiveUnit()) { value -= 6; numberOfDefendingUnits++; } }
         */
        Iterator<AIUnit> aui = getAIUnitIterator();
        while (aui.hasNext()) {
            Mission m = aui.next().getMission();
            if (m != null && m instanceof DefendSettlementMission) {
                if (((DefendSettlementMission) m).getSettlement() == colony) {
                	//TODO: this decrease seems too little
                	value -= 6;
                    numberOfDefendingUnits++;
                }
            }
        }
        if (u.getOwner().isREF()) {
            value -= 19;
            if (numberOfDefendingUnits > 0) {
                return 0;
            }
        }
        //TODO: Does not take into consideration the various levels of
        //fortification, only if has one or not
        if (colony.getStockade() != null &&
            numberOfDefendingUnits > colony.getStockade().getLevel() + 1) {
            return Math.max(0, value - 9000);
        }
        return value;
    }
,
(startLine=457 endLine=496 srcPath=/root/NewExperiment/freecolFilter/00744/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    int getDefendColonyMissionValue(Unit u, Colony colony, int turns) {
        logger.finest("Entering method getDefendColonyMissionValue");

        // Sanitation
        if(colony == null)
            return Integer.MIN_VALUE;

        // Temporary helper method for: giveMilitaryMission
        int value = 10025 - turns;
        int numberOfDefendingUnits = 0;
        /*
         * Iterator ui = colony.getTile().getUnitIterator(); while
         * (ui.hasNext()) { Unit tu = (Unit) ui.next(); if
         * (tu.isDefensiveUnit()) { value -= 6; numberOfDefendingUnits++; } }
         */
        Iterator<AIUnit> aui = getAIUnitIterator();
        while (aui.hasNext()) {
            Mission m = aui.next().getMission();
            if (m != null && m instanceof DefendSettlementMission) {
                if (((DefendSettlementMission) m).getSettlement() == colony) {
                    //TODO: this decrease seems too little
                    value -= 6;
                    numberOfDefendingUnits++;
                }
            }
        }
        if (u.getOwner().isREF()) {
            value -= 19;
            if (numberOfDefendingUnits > 0) {
                return 0;
            }
        }
        //TODO: Does not take into consideration the various levels of
        //fortification, only if has one or not
        if (colony.getStockade() != null &&
            numberOfDefendingUnits > colony.getStockade().getLevel() + 1) {
            return Math.max(0, value - 9000);
        }
        return value;
    }
,
>
, <(startLine=27 endLine=34 srcPath=/root/NewExperiment/freecolFilter/00762/test/src/net/sf/freecol/client/AllTests.java)
    public static Test suite() {
        TestSuite suite = new TestSuite("Test for net.sf.freecol.client");
        //$JUnit-BEGIN$
        suite.addTest(net.sf.freecol.client.control.AllTests.suite());
        suite.addTest(net.sf.freecol.client.gui.AllTests.suite());
        //$JUnit-END$
        return suite;
    }
,
(startLine=27 endLine=34 srcPath=/root/NewExperiment/freecolFilter/00762/test/src/net/sf/freecol/common/AllTests.java)
	public static Test suite() {
		TestSuite suite = new TestSuite("Test for net.sf.freecol.common");
		//$JUnit-BEGIN$
		suite.addTest(net.sf.freecol.common.option.AllTests.suite());
		suite.addTest(net.sf.freecol.common.model.AllTests.suite());
		//$JUnit-END$
		return suite;
	}
,
>
, <(startLine=2674 endLine=2684 srcPath=/root/NewExperiment/freecolFilter/01085/src/net/sf/freecol/common/model/Unit.java)
    public boolean isArmed() {
        if (musketsEq[0] == null) {
            Specification spec = getSpecification();
            musketsEq[0] = spec.getEquipmentType("model.equipment.muskets");
            musketsEq[1] = spec.getEquipmentType("model.equipment.indian.muskets");
        }
        for (EquipmentType et : musketsEq) {
            if (getEquipmentCount(et) > 0) return true;
        }
        return false;
    }
,
(startLine=2691 endLine=2701 srcPath=/root/NewExperiment/freecolFilter/01085/src/net/sf/freecol/common/model/Unit.java)
    public boolean isMounted() {
        if (horsesEq[0] == null) {
            Specification spec = getSpecification();
            horsesEq[0] = spec.getEquipmentType("model.equipment.horses");
            horsesEq[1] = spec.getEquipmentType("model.equipment.indian.horses");
        }
        for (EquipmentType et : horsesEq) {
            if (getEquipmentCount(et) > 0) return true;
        }
        return false;
    }
,
>
, <(startLine=101 endLine=117 srcPath=/root/NewExperiment/freecolFilter/00945/src/net/sf/freecol/tools/TranslationReport.java)
                    for (int index = 0; index < masterValue.length() - 1; index++) {
                        char current = masterValue.charAt(index);
                        if (current == '%') {
                            if (inVariable) {
                                String var = masterValue.substring(lastIndex, index + 1);
                                if (value.indexOf(var) == -1) {
                                    missingVariables.add(key);
                                }
                                inVariable = false;
                            } else {
                                lastIndex = index;
                                inVariable = true;
                            }
                        } else if (!Character.isLetterOrDigit(current)) {
                            inVariable = false;
                        }
                    }
,
(startLine=168 endLine=184 srcPath=/root/NewExperiment/freecolFilter/00945/src/net/sf/freecol/tools/TranslationReport.java)
                    for (int index = 0; index < propertiesValue.length() - 1; index++) {
                        char current = propertiesValue.charAt(index);
                        if (current == '%') {
                            if (inVariable) {
                                String var = propertiesValue.substring(lastIndex, index + 1);
                                if (value.indexOf(var) == -1) {
                                    superfluousVariables.add(key);
                                }
                                inVariable = false;
                            } else {
                                lastIndex = index;
                                inVariable = true;
                            }
                        } else if (!Character.isLetterOrDigit(current)) {
                            inVariable = false;
                        }
                    }
,
>
, <(startLine=551 endLine=563 srcPath=/root/NewExperiment/freecolFilter/01240/src/net/sf/freecol/common/io/FreeColXMLReader.java)
        boolean required) throws XMLStreamException {

        T ret = getAttribute(game, attributeName, returnClass, (T)null);
        if (ret == (T)null) {
            if (required) {
                throw new XMLStreamException("Missing " + attributeName
                    + " for " + returnClass.getName() + ": " + currentTag());
            } else {
                ret = defaultValue;
            }
        }
        return ret;
    }
,
(startLine=704 endLine=716 srcPath=/root/NewExperiment/freecolFilter/01240/src/net/sf/freecol/common/io/FreeColXMLReader.java)
        boolean required) throws XMLStreamException {

        T ret = getAttribute(aiMain, attributeName, returnClass, (T)null);
        if (ret == (T)null) {
            if (required) {
                throw new XMLStreamException("Missing " + attributeName
                    + " for " + returnClass.getName() + ": " + currentTag());
            } else {
                ret = defaultValue;
            }
        }
        return ret;
    }
,
>
, <(startLine=540 endLine=605 srcPath=/root/NewExperiment/freecolFilter/00883/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    public int sellProposition(Unit unit, Settlement settlement, Goods goods, int gold) {
        logger.finest("Entering method sellProposition");
        Player seller = unit.getOwner();
        if (settlement instanceof IndianSettlement) {
            String goldKey = "tradeGold#" + goods.getType().getId() + "#" + goods.getAmount() + "#" + unit.getId();
            String hagglingKey = "tradeHaggling#" + unit.getId();
            int price;
            if (sessionRegister.containsKey(goldKey)) {
                price = sessionRegister.get(goldKey).intValue();
                if (price <= 0) {
                    return price;
                }
            } else {
                price = ((IndianSettlement) settlement).getPriceToBuy(goods) - getPlayer().getTension(seller).getValue();
                Unit missionary = ((IndianSettlement) settlement).getMissionary(seller);
                if (missionary != null && getSpecification()
                    .getBoolean("model.option.enhancedMissionaries")) {
                    // 10% bonus for missionary, 20% if expert
                    int bonus = (missionary.hasAbility("model.ability.expertMissionary")) ? 12
                        : 11;
                    price = (price * bonus) / 10;
                }
                if (price <= 0) return 0;
                sessionRegister.put(goldKey, new Integer(price));
            }
            if (gold < 0 || price == gold) {
                return price;
            } else if (gold > (price * 11) / 10) {
                logger.warning("Cheating attempt: haggling with a request too high");
                sessionRegister.put(goldKey, new Integer(-1));
                return NetworkConstants.NO_TRADE;
            } else {
                int haggling = 1;
                if (sessionRegister.containsKey(hagglingKey)) {
                    haggling = sessionRegister.get(hagglingKey).intValue();
                }
                if (getAIRandom().nextInt(3 + haggling) <= 3) {
                    sessionRegister.put(goldKey, new Integer(gold));
                    sessionRegister.put(hagglingKey, new Integer(haggling + 1));
                    return gold;
                } else {
                    sessionRegister.put(goldKey, new Integer(-1));
                    return NetworkConstants.NO_TRADE;
                }
            }
        } else if (settlement instanceof Colony) {
            Colony colony = (Colony) settlement;
            Player otherPlayer = unit.getOwner();
            // the client should have prevented this
            if (getPlayer().atWarWith(otherPlayer)) {
                return NetworkConstants.NO_TRADE;
            }
            // don't pay for more than fits in the warehouse
            int amount = colony.getWarehouseCapacity() - colony.getGoodsCount(goods.getType());
            amount = Math.min(amount, goods.getAmount());
            // get a good price
            Tension.Level tensionLevel = getPlayer().getTension(otherPlayer).getLevel();
            int percentage = (9 - tensionLevel.ordinal()) * 10;
            // what we could get for the goods in Europe (minus taxes)
            int netProfits = ((100 - getPlayer().getTax()) * getPlayer().getMarket().getSalePrice(goods.getType(), amount)) / 100;
            int price = (netProfits * percentage) / 100;
            return price;
        } else {
            throw new IllegalArgumentException("Unknown type of settlement.");
        }
    }
,
(startLine=307 endLine=372 srcPath=/root/NewExperiment/freecolFilter/00883/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    public int sellProposition(Unit unit, Settlement settlement, Goods goods, int gold) {
        logger.finest("Entering method sellProposition");
        Player seller = unit.getOwner();
        if (settlement instanceof IndianSettlement) {
            String goldKey = "tradeGold#" + goods.getType().getId() + "#" + goods.getAmount() + "#" + unit.getId();
            String hagglingKey = "tradeHaggling#" + unit.getId();
            int price;
            if (sessionRegister.containsKey(goldKey)) {
                price = sessionRegister.get(goldKey).intValue();
                if (price <= 0) {
                    return price;
                }
            } else {
                price = ((IndianSettlement) settlement).getPriceToBuy(goods) - getPlayer().getTension(seller).getValue();
                Unit missionary = ((IndianSettlement) settlement).getMissionary(seller);
                if (missionary != null && getSpecification()
                    .getBoolean("model.option.enhancedMissionaries")) {
                    // 10% bonus for missionary, 20% if expert
                    int bonus = (missionary.hasAbility("model.ability.expertMissionary")) ? 12
                        : 11;
                    price = (price * bonus) / 10;
                }
                if (price <= 0) return 0;
                sessionRegister.put(goldKey, new Integer(price));
            }
            if (gold < 0 || price == gold) {
                return price;
            } else if (gold > (price * 11) / 10) {
                logger.warning("Cheating attempt: haggling with a request too high");
                sessionRegister.put(goldKey, new Integer(-1));
                return NetworkConstants.NO_TRADE;
            } else {
                int haggling = 1;
                if (sessionRegister.containsKey(hagglingKey)) {
                    haggling = sessionRegister.get(hagglingKey).intValue();
                }
                if (getAIRandom().nextInt(3 + haggling) <= 3) {
                    sessionRegister.put(goldKey, new Integer(gold));
                    sessionRegister.put(hagglingKey, new Integer(haggling + 1));
                    return gold;
                } else {
                    sessionRegister.put(goldKey, new Integer(-1));
                    return NetworkConstants.NO_TRADE;
                }
            }
        } else if (settlement instanceof Colony) {
            Colony colony = (Colony) settlement;
            Player otherPlayer = unit.getOwner();
            // the client should have prevented this
            if (getPlayer().atWarWith(otherPlayer)) {
                return NetworkConstants.NO_TRADE;
            }
            // don't pay for more than fits in the warehouse
            int amount = colony.getWarehouseCapacity() - colony.getGoodsCount(goods.getType());
            amount = Math.min(amount, goods.getAmount());
            // get a good price
            Tension.Level tensionLevel = getPlayer().getTension(otherPlayer).getLevel();
            int percentage = (9 - tensionLevel.ordinal()) * 10;
            // what we could get for the goods in Europe (minus taxes)
            int netProfits = ((100 - getPlayer().getTax()) * getPlayer().getMarket().getSalePrice(goods.getType(), amount)) / 100;
            int price = (netProfits * percentage) / 100;
            return price;
        } else {
            throw new IllegalArgumentException("Unknown type of settlement.");
        }
    }
,
>
, <(startLine=215 endLine=228 srcPath=/root/NewExperiment/freecolFilter/00376/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if (attacker.isNaval()) {
            int goodsCount = attacker.getGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                // TODO: shouldn't this be -cargo/capacity?
                result.add(new Modifier("model.modifier.offence",
                                        "modifiers.cargoPenalty",
                                        -12.5f * goodsCount,
                                        Modifier.Type.PERCENTAGE));
            }
            if (attacker.hasAbility("model.ability.piracy")) {
                result.addAll(attacker.getModifierSet("model.modifier.piracyBonus"));
            }
        } else {
,
(startLine=337 endLine=350 srcPath=/root/NewExperiment/freecolFilter/00376/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if (defender.isNaval()) {
            int goodsCount = defender.getVisibleGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                // TODO: shouldn't this be -cargo/capacity?
                result.add(new Modifier("model.modifier.defence", 
                                        "modifiers.cargoPenalty",
                                        -12.5f * goodsCount,
                                        Modifier.Type.PERCENTAGE));
            }
            if (defender.hasAbility("model.ability.piracy")) {
                result.addAll(defender.getModifierSet("model.modifier.piracyBonus"));
            }
        } else {
,
>
, <(startLine=218 endLine=238 srcPath=/root/NewExperiment/freecolFilter/01046/test/src/net/sf/freecol/common/model/MapTest.java)
        { // Even case
            Iterator<Position> i = map.getAdjacentIterator(map.getTile(4, 8).getPosition());

            List<Position> shouldBe = new ArrayList<Position>();
            shouldBe.add(new Position(4, 6));
            shouldBe.add(new Position(4, 10));
            shouldBe.add(new Position(3, 8));
            shouldBe.add(new Position(5, 8));

            shouldBe.add(new Position(4, 7));
            shouldBe.add(new Position(4, 9));
            shouldBe.add(new Position(3, 7));
            shouldBe.add(new Position(3, 9));

            for (int j = 0; j < 8; j++) {
                assertTrue(i.hasNext());
                Position p = i.next();
                assertTrue("" + p.getX() + ", " + p.getY(), shouldBe.contains(p));
            }
            assertFalse(i.hasNext());
        }
,
(startLine=239 endLine=260 srcPath=/root/NewExperiment/freecolFilter/01046/test/src/net/sf/freecol/common/model/MapTest.java)
        { // Even case 2

            Iterator<Position> i = map.getAdjacentIterator(map.getTile(5, 8).getPosition());

            List<Position> shouldBe = new ArrayList<Position>();
            shouldBe.add(new Position(5, 6));
            shouldBe.add(new Position(5, 10));
            shouldBe.add(new Position(4, 8));
            shouldBe.add(new Position(6, 8));

            shouldBe.add(new Position(4, 7));
            shouldBe.add(new Position(5, 7));
            shouldBe.add(new Position(4, 9));
            shouldBe.add(new Position(5, 9));

            for (int j = 0; j < 8; j++) {
                assertTrue(i.hasNext());
                Position p = i.next();
                assertTrue("" + p.getX() + ", " + p.getY(), shouldBe.contains(p));
            }
            assertFalse(i.hasNext());
        }
,
(startLine=261 endLine=280 srcPath=/root/NewExperiment/freecolFilter/01046/test/src/net/sf/freecol/common/model/MapTest.java)
        { // Odd case
            Iterator<Position> i = map.getAdjacentIterator(map.getTile(4, 7).getPosition());
            List<Position> shouldBe = new ArrayList<Position>();
            shouldBe.add(new Position(4, 5));
            shouldBe.add(new Position(4, 9));
            shouldBe.add(new Position(3, 7));
            shouldBe.add(new Position(5, 7));

            shouldBe.add(new Position(4, 6));
            shouldBe.add(new Position(5, 6));
            shouldBe.add(new Position(4, 8));
            shouldBe.add(new Position(5, 8));

            for (int j = 0; j < 8; j++) {
                assertTrue(i.hasNext());
                Position p = i.next();
                assertTrue("" + p.getX() + ", " + p.getY(), shouldBe.contains(p));
            }
            assertFalse(i.hasNext());
        }
,
>
, <(startLine=81 endLine=113 srcPath=/root/NewExperiment/freecolFilter/00661/test/src/net/sf/freecol/common/model/DemotionTest.java)
    public void testSoldierDemotedBySoldier() throws Exception {

        Game game = getStandardGame();
        CombatModel combatModel = game.getCombatModel();
        Method method = SimpleCombatModel.class.getDeclaredMethod("loseCombat", Unit.class, Unit.class);
        method.setAccessible(true);
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");
        Map map = getTestMap(plains);
        game.setMap(map);
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);

        Unit soldier1 = new Unit(game, tile1, dutch, colonistType, UnitState.ACTIVE);
        soldier1.equipWith(muskets, true);
        Unit soldier2 = new Unit(game, tile2, french, colonistType, UnitState.ACTIVE);
        soldier2.equipWith(muskets, true);

        method.invoke(combatModel, soldier1, soldier2);
        assertEquals(colonistType, soldier1.getType());
        assertEquals(dutch, soldier1.getOwner());
        assertEquals(tile1, soldier1.getTile());
        assertTrue(soldier1.getEquipment().isEmpty());

        method.invoke(combatModel, soldier1, soldier2);
        assertEquals(colonistType, soldier1.getType());
        assertEquals(french, soldier1.getOwner());
        assertEquals(tile2, soldier1.getTile());
    }
,
(startLine=249 endLine=283 srcPath=/root/NewExperiment/freecolFilter/00661/test/src/net/sf/freecol/common/model/DemotionTest.java)
    public void testVeteranSoldierDemotedBySoldier() throws Exception {

        Game game = getStandardGame();
        CombatModel combatModel = game.getCombatModel();
        Method method = SimpleCombatModel.class.getDeclaredMethod("loseCombat", Unit.class, Unit.class);
        method.setAccessible(true);
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");
        Map map = getTestMap(plains);
        game.setMap(map);
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);

        assertEquals(colonistType, veteranType.getUnitTypeChange(ChangeType.CAPTURE, dutch));

        Unit soldier1 = new Unit(game, tile1, dutch, veteranType, UnitState.ACTIVE);
        soldier1.equipWith(muskets, true);
        Unit soldier2 = new Unit(game, tile2, french, colonistType, UnitState.ACTIVE);
        soldier2.equipWith(muskets, true);

        method.invoke(combatModel, soldier1, soldier2);
        assertEquals(veteranType, soldier1.getType());
        assertEquals(dutch, soldier1.getOwner());
        assertEquals(tile1, soldier1.getTile());
        assertTrue(soldier1.getEquipment().isEmpty());

        method.invoke(combatModel, soldier1, soldier2);
        assertEquals(colonistType, soldier1.getType());
        assertEquals(french, soldier1.getOwner());
        assertEquals(tile2, soldier1.getTile());
    }
,
>
, <(startLine=469 endLine=478 srcPath=/root/NewExperiment/freecolFilter/00430/src/net/sf/freecol/common/model/GoodsContainer.java)
	    if (in.getLocalName().equals(STORED_GOODS_TAG)) {
		while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
		    if (in.getLocalName().equals(Goods.getXMLElementTagName())) {
			GoodsType goodsType = Specification.getSpecification().getGoodsType(in.getAttributeValue(null, "type"));
			Integer amount = new Integer(in.getAttributeValue(null, "amount"));
			storedGoods.put(goodsType, amount);
		    }
                    in.nextTag();
		}
	    } else if (in.getLocalName().equals(OLD_STORED_GOODS_TAG)) {
,
(startLine=478 endLine=487 srcPath=/root/NewExperiment/freecolFilter/00430/src/net/sf/freecol/common/model/GoodsContainer.java)
	    } else if (in.getLocalName().equals(OLD_STORED_GOODS_TAG)) {
		while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
		    if (in.getLocalName().equals(Goods.getXMLElementTagName())) {
			GoodsType goodsType = Specification.getSpecification().getGoodsType(in.getAttributeValue(null, "type"));
			Integer amount = new Integer(in.getAttributeValue(null, "amount"));
			oldStoredGoods.put(goodsType, amount);
		    }
                    in.nextTag();
		}
	    }
,
>
, <(startLine=1155 endLine=1168 srcPath=/root/NewExperiment/freecolFilter/00100/src/net/sf/freecol/common/model/Player.java)
            if (t != null && t.getFirstUnit() != null && t.getFirstUnit().getOwner().equals(this)) {
                Iterator unitIterator = t.getUnitIterator();
                while (unitIterator.hasNext()) {
                    Unit u = (Unit) unitIterator.next();

                    Iterator childUnitIterator = u.getUnitIterator();
                    while (childUnitIterator.hasNext()) {
                        Unit childUnit = (Unit) childUnitIterator.next();
                        units.add(childUnit);
                    }

                    units.add(u);
                }
            }
,
(startLine=2156 endLine=2173 srcPath=/root/NewExperiment/freecolFilter/00100/src/net/sf/freecol/common/model/Player.java)
                if (t != null && t.getFirstUnit() != null && t.getFirstUnit().getOwner().equals(owner)) {
                    Iterator unitIterator = t.getUnitIterator();
                    while (unitIterator.hasNext()) {
                        Unit u = (Unit) unitIterator.next();

                        Iterator childUnitIterator = u.getUnitIterator();
                        while (childUnitIterator.hasNext()) {
                            Unit childUnit = (Unit) childUnitIterator.next();

                            if (isActive(childUnit)) {
                                units.add(childUnit);
                            }
                        }
                        if (isActive(u)) {
                            units.add(u);
                        }
                    }
                }
,
>
, <(startLine=296 endLine=316 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    public Modifier getSettlementModifier(Unit attacker, Settlement settlement) {

        if (settlement instanceof Colony) {
            // Colony defensive bonus.
            Colony colony = (Colony) settlement;
            Building stockade = colony.getStockade();
            if (stockade == null) {
                // 50% colony bonus
                return new Modifier("modifiers.inColony", 50, Modifier.PERCENTAGE);
            } else {
                String modifier = stockade.getType().getId();
                modifier = "modifiers." + modifier.substring(modifier.lastIndexOf(".") + 1);
                return new Modifier(modifier, colony.getDefenseBonus(), Modifier.PERCENTAGE);
            }
        } else if (settlement instanceof IndianSettlement) {
            // Indian settlement defensive bonus.
            return new Modifier("modifiers.inSettlement", 50, Modifier.PERCENTAGE);
        } else {
            return new Modifier(null, 0, Modifier.PERCENTAGE);
        }
    }
,
(startLine=3392 endLine=3412 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/Unit.java)
    public static Modifier getSettlementModifier(Unit attacker, Settlement settlement) {

        if (settlement instanceof Colony) {
            // Colony defensive bonus.
            Colony colony = (Colony) settlement;
            Building stockade = colony.getStockade();
            if (stockade == null) {
                // 50% colony bonus
                return new Modifier("modifiers.inColony", 50, Modifier.PERCENTAGE);
            } else {
                String modifier = stockade.getType().getId();
                modifier = "modifiers." + modifier.substring(modifier.lastIndexOf(".") + 1);
                return new Modifier(modifier, colony.getDefenseBonus(), Modifier.PERCENTAGE);
            }
        } else if (settlement instanceof IndianSettlement) {
            // Indian settlement defensive bonus.
            return new Modifier("modifiers.inSettlement", 50, Modifier.PERCENTAGE);
        } else {
            return new Modifier(null, 0, Modifier.PERCENTAGE);
        }
    }
,
>
, <(startLine=585 endLine=602 srcPath=/root/NewExperiment/freecolFilter/00883/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        } else if (settlement instanceof Colony) {
            Colony colony = (Colony) settlement;
            Player otherPlayer = unit.getOwner();
            // the client should have prevented this
            if (getPlayer().atWarWith(otherPlayer)) {
                return NetworkConstants.NO_TRADE;
            }
            // don't pay for more than fits in the warehouse
            int amount = colony.getWarehouseCapacity() - colony.getGoodsCount(goods.getType());
            amount = Math.min(amount, goods.getAmount());
            // get a good price
            Tension.Level tensionLevel = getPlayer().getTension(otherPlayer).getLevel();
            int percentage = (9 - tensionLevel.ordinal()) * 10;
            // what we could get for the goods in Europe (minus taxes)
            int netProfits = ((100 - getPlayer().getTax()) * getPlayer().getMarket().getSalePrice(goods.getType(), amount)) / 100;
            int price = (netProfits * percentage) / 100;
            return price;
        } else {
,
(startLine=352 endLine=369 srcPath=/root/NewExperiment/freecolFilter/00883/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        } else if (settlement instanceof Colony) {
            Colony colony = (Colony) settlement;
            Player otherPlayer = unit.getOwner();
            // the client should have prevented this
            if (getPlayer().atWarWith(otherPlayer)) {
                return NetworkConstants.NO_TRADE;
            }
            // don't pay for more than fits in the warehouse
            int amount = colony.getWarehouseCapacity() - colony.getGoodsCount(goods.getType());
            amount = Math.min(amount, goods.getAmount());
            // get a good price
            Tension.Level tensionLevel = getPlayer().getTension(otherPlayer).getLevel();
            int percentage = (9 - tensionLevel.ordinal()) * 10;
            // what we could get for the goods in Europe (minus taxes)
            int netProfits = ((100 - getPlayer().getTax()) * getPlayer().getMarket().getSalePrice(goods.getType(), amount)) / 100;
            int price = (netProfits * percentage) / 100;
            return price;
        } else {
,
>
, <(startLine=303 endLine=314 srcPath=/root/NewExperiment/freecolFilter/00462/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        	while(goodsInAgreement.hasNext()){
        		Goods goods = goodsInAgreement.next();
        		for(int i=0;i<goodsAvail.size();i++){
        			Goods goodAvail = goodsAvail.get(i);
        			if(goodAvail.getType() == goods.getType() &&
        			    goodAvail.getAmount() == goods.getAmount()){
        					// this good is already on the agreement, remove it
        					goodsAvail.remove(i);
        					break;
        			}
        		}
        	}
,
(startLine=345 endLine=356 srcPath=/root/NewExperiment/freecolFilter/00462/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        	while(goodsInAgreement.hasNext()){
        		Goods goods = goodsInAgreement.next();
        		for(int i=0;i<goodsAvail.size();i++){
        			Goods goodAvail = goodsAvail.get(i);
        			if(goodAvail.getType() == goods.getType() &&
        			    goodAvail.getAmount() == goods.getAmount()){
        					// this good is already on the agreement, remove it
        					goodsAvail.remove(i);
        					break;
        			}
        		}
        	}
,
>
, <(startLine=1546 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00263/src/net/sf/freecol/client/gui/GUI.java)
        if (displayNumbers) {
            Color textColor = (production < 0) ? Color.RED : Color.WHITE;
            String number = Integer.toString(production);
            if (production >= 0 && drawPlus) {
                number = "+"+ number;
            }
            if (maxProduction > production) {
                number = number + "/" + String.valueOf(maxProduction);
            }
            BufferedImage stringImage = createStringImage(
                    g, number, textColor, width, 12);
            int textOffset = leftOffset + (coverage-stringImage.getWidth())/2;
            textOffset = (textOffset >= 0) ? textOffset : 0;
            g.drawImage(stringImage, textOffset,
                    goodsIcon.getIconHeight()/2 - stringImage.getHeight()/2, null);
        }
,
(startLine=274 endLine=287 srcPath=/root/NewExperiment/freecolFilter/00263/src/net/sf/freecol/client/gui/panel/ProductionLabel.java)
        if (production > maxIcons) {
            String number = Integer.toString(production);
            if (production >= 0 && drawPlus) {
                number = "+"+ number;
            }
            if (maxProduction > production) {
                number = number + "/" + String.valueOf(maxProduction);
            }
            BufferedImage stringImage = parent.getGUI().createStringImage(this, number, getForeground(), getWidth(), 12);
            int textOffset = leftOffset + (coverage-stringImage.getWidth())/2;
            textOffset = (textOffset >= 0) ? textOffset : 0;
            g.drawImage(stringImage, textOffset,
                    goodsIcon.getIconHeight()/2 - stringImage.getHeight()/2, null);
        }
,
>
, <(startLine=625 endLine=637 srcPath=/root/NewExperiment/freecolFilter/01254/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (sb != null) {
                            sb.append(" ")
                                .append(getLoadGoodsMessage(unit, type,
                                        cargo.getAmount(), present,
                                        atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {
,
(startLine=662 endLine=674 srcPath=/root/NewExperiment/freecolFilter/01254/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (sb != null) {
                        sb.append(" ")
                            .append(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present, 
                                    atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {
,
>
, <(startLine=450 endLine=460 srcPath=/root/NewExperiment/freecolFilter/00393/src/net/sf/freecol/common/model/DifficultyLevel.java)
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    childName = in.getLocalName();
                    if ("purchase-price".equals(childName)) {
                        String unitTypeId = getAttribute(in, "unit-type", null);
                        int priceIncrease = getAttribute(in, "price-increase", 0);
                        purchasePrices.put(specification.getUnitType(unitTypeId),
                                           new Integer(priceIncrease));
                    } else {
                        logger.finest("Parsing of " + childName + " is not implemented yet");
                    }
                }
,
(startLine=465 endLine=476 srcPath=/root/NewExperiment/freecolFilter/00393/src/net/sf/freecol/common/model/DifficultyLevel.java)
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    childName = in.getLocalName();
                    if ("training-price".equals(childName)) {
                        String unitTypeId = getAttribute(in, "unit-type", null);
                        int priceIncrease = getAttribute(in, "price-increase", 0);
                        trainingPrices.put(specification.getUnitType(unitTypeId),
                                           new Integer(priceIncrease));
                    } else {
                        logger.finest("Parsing of " + childName + " is not implemented yet");
                    }
                    in.nextTag();
                }
,
>
, <(startLine=382 endLine=407 srcPath=/root/NewExperiment/freecolFilter/00572/src/net/sf/freecol/client/gui/panel/ProductionLabel.java)
    public int getPreferredWidth() {

        if (goodsIcon == null || production == 0) {
            return 0;
        }

        int drawImageCount = Math.min(Math.abs(production), maxIcons);

        int iconWidth = goodsIcon.getIconWidth();
        int pixelsPerIcon = iconWidth / 2;
        if (pixelsPerIcon - iconWidth < 0) {
            pixelsPerIcon = (compressedWidth - iconWidth) / drawImageCount;
        }
        int maxSpacing = iconWidth;

        /* TODO Tune this: all icons are the same width, but many
         * do not take up the whole width, eg. bells
         */
        boolean iconsTooFarApart = pixelsPerIcon > maxSpacing;
        if (iconsTooFarApart) {
            pixelsPerIcon = maxSpacing;
        }

        return pixelsPerIcon * (drawImageCount - 1) + iconWidth;

    }
,
(startLine=415 endLine=440 srcPath=/root/NewExperiment/freecolFilter/00572/src/net/sf/freecol/client/gui/panel/ProductionMultiplesLabel.java)
    public int getPreferredWidth() {

        if (goodsIcon == null || totalProduction == 0) {
            return 0;
        }

        int drawImageCount = Math.min(Math.abs(totalProduction), maxIcons);

        int iconWidth = getMaximumIconWidth();
        int pixelsPerIcon = iconWidth / 2;
        if (pixelsPerIcon - iconWidth < 0) {
            pixelsPerIcon = (compressedWidth - iconWidth) / drawImageCount;
        }
        int maxSpacing = iconWidth;

        /* TODO Tune this: all icons are the same width, but many
         * do not take up the whole width, eg. bells
         */
        boolean iconsTooFarApart = pixelsPerIcon > maxSpacing;
        if (iconsTooFarApart) {
            pixelsPerIcon = maxSpacing;
        }

        return pixelsPerIcon * (drawImageCount - 1) + iconWidth;

    }
,
>
, <(startLine=220 endLine=229 srcPath=/root/NewExperiment/freecolFilter/00518/src/net/sf/freecol/common/networking/DiplomaticTradeMessage.java)
    private boolean isValidAcceptance(DiplomaticTradeMessage response) {
        return response != null
            && response.unitId.equals(unitId)
            && response.directionString.equals(directionString)
            && response.agreement != null
            && response.agreement.getGame() == agreement.getGame()
            && response.agreement.getSender() == agreement.getSender()
            && response.agreement.getRecipient() == agreement.getRecipient()
            && response.status == TradeStatus.ACCEPT_TRADE;
    }
,
(startLine=243 endLine=252 srcPath=/root/NewExperiment/freecolFilter/00518/src/net/sf/freecol/common/networking/DiplomaticTradeMessage.java)
    private boolean isValidCounterProposal(DiplomaticTradeMessage response) {
        return response != null
            && response.unitId.equals(unitId)
            && response.directionString.equals(directionString)
            && response.agreement != null
            && response.agreement.getGame() == agreement.getGame()
            && response.agreement.getSender() == agreement.getSender()
            && response.agreement.getRecipient() == agreement.getRecipient()
            && response.status == TradeStatus.PROPOSE_TRADE;
    }
,
>
, <(startLine=90 endLine=105 srcPath=/root/NewExperiment/freecolFilter/01506/src/net/sf/freecol/common/model/ProductionInfo.java)
    public List<AbstractGoods> getProductionDeficit() {
        if (this.maximumProduction.isEmpty()) {
            return WorkLocation.EMPTY_LIST;
        }
        List<AbstractGoods> result = new ArrayList<>();
        for (AbstractGoods ag : this.production) {
            AbstractGoods agMax = AbstractGoods.findByType(ag.getType(),
                this.maximumProduction);
            if (agMax == null) continue;
            int amount = agMax.getAmount() - ag.getAmount();
            if (amount != 0) {
                result.add(new AbstractGoods(ag.getType(), amount));
            }
        }
        return result;
    }
,
(startLine=113 endLine=128 srcPath=/root/NewExperiment/freecolFilter/01506/src/net/sf/freecol/common/model/ProductionInfo.java)
    public List<AbstractGoods> getConsumptionDeficit() {
        if (this.maximumConsumption.isEmpty()) {
            return WorkLocation.EMPTY_LIST;
        }
        List<AbstractGoods> result = new ArrayList<>();
        for (AbstractGoods ag : this.consumption) {
            AbstractGoods agMax = AbstractGoods.findByType(ag.getType(),
                this.maximumConsumption);
            if (agMax == null) continue;
            int amount = agMax.getAmount() - ag.getAmount();
            if (amount != 0) {
                result.add(new AbstractGoods(ag.getType(), amount));
            }
        }
        return result;
    }
,
>
, <(startLine=587 endLine=595 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/SimpleCombatModel.java)
                attacker.getGame().getViewOwner() == null && indianSettlement.getUnitCount() > 1) {
                List<UnitType> converts = FreeCol.getSpecification().getUnitTypesWithAbility("model.ability.convert");
                if (converts.size() > 0) {
                    indianSettlement.getFirstUnit().dispose();
                    random = modelController.getRandom(attacker.getId() + "getConvertType", converts.size());
                    modelController.createUnit(attacker.getId() + "indianConvert", attacker.getLocation(),
                                               attacker.getOwner(), converts.get(random));
                }
            }
,
(startLine=4585 endLine=4593 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/Unit.java)
                getGame().getViewOwner() == null && indianSettlement.getUnitCount() > 1) {
                List<UnitType> converts = FreeCol.getSpecification().getUnitTypesWithAbility("model.ability.convert");
                if (converts.size() > 0) {
                    indianSettlement.getFirstUnit().dispose();
                    random = modelController.getRandom(getId() + "getConvertType", converts.size());
                    modelController.createUnit(getId() + "indianConvert", getLocation(),
                                               getOwner(), converts.get(random));
                }
            }
,
>
, <(startLine=52 endLine=64 srcPath=/root/NewExperiment/freecolFilter/00709/test/src/net/sf/freecol/client/gui/FontTest.java)
    public void testLogicalSerif() {

        try {
            Font font = new Font("Serif", Font.PLAIN, 1);
            assertNotNull(font);
            for (Map.Entry<Character, String> entry : specialCharacters.entrySet()) {
                assertTrue(font.getName() + " can not display " + entry.getValue(),
                           font.canDisplay(entry.getKey()));
            }
        } catch(Exception e) {
            fail(e.toString());
        }
    }
,
(startLine=69 endLine=76 srcPath=/root/NewExperiment/freecolFilter/00709/test/src/net/sf/freecol/client/gui/FontTest.java)
        try {
            Font font = Font.createFont(Font.TRUETYPE_FONT, liberationSerif);
            assertNotNull(font);
            for (Map.Entry<Character, String> entry : specialCharacters.entrySet()) {
                assertTrue(font.getName() + " can not display " + entry.getValue(),
                           font.canDisplay(entry.getKey()));
            }
        } catch(Exception e) {
,
>
, <(startLine=617 endLine=642 srcPath=/root/NewExperiment/freecolFilter/00599/test/src/net/sf/freecol/common/model/CombatTest.java)
    public void testPioneerDiesNotLosesEquipment() {
    	Game game = getStandardGame();
        CombatModel combatModel = game.getCombatModel();
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");
        Map map = getTestMap();
        game.setMap(map);
        
        Tile tile1 = map.getTile(5, 8);       
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);

        Unit pioneer = new Unit(game, tile1, dutch, colonistType, UnitState.ACTIVE);
        Unit soldier = new Unit(game, tile2, french, veteranType, UnitState.ACTIVE);

        soldier.equipWith(muskets, true);
        soldier.equipWith(horses, true);
        soldier.setMovesLeft(1);
        pioneer.equipWith(tools, true);

        combatModel.attack(soldier, pioneer, victory, 0, null);
        assertTrue("Pioneer should be dead", pioneer.isDisposed());
    }
,
(startLine=644 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00599/test/src/net/sf/freecol/common/model/CombatTest.java)
    public void testScoutDiesNotLosesEquipment() {
        Game game = getStandardGame();
        CombatModel combatModel = game.getCombatModel();
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");
        Map map = getTestMap();
        game.setMap(map);
        
        Tile tile1 = map.getTile(5, 8);       
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);

        Unit scout = new Unit(game, tile1, dutch, colonistType, UnitState.ACTIVE);
        Unit soldier = new Unit(game, tile2, french, veteranType, UnitState.ACTIVE);

        soldier.equipWith(muskets, true);
        soldier.equipWith(horses, true);
        scout.setMovesLeft(1);
        scout.equipWith(horses, true);

        combatModel.attack(soldier, scout, victory, 0, null);
        assertTrue("Scout should be dead", scout.isDisposed());
    }
,
(startLine=219 endLine=243 srcPath=/root/NewExperiment/freecolFilter/00599/test/src/net/sf/freecol/common/model/DemotionTest.java)
    public void testScoutDemotedBySoldier() throws Exception {

        Game game = getStandardGame();
        CombatModel combatModel = game.getCombatModel();
        Method method = SimpleCombatModel.class.getDeclaredMethod("loseCombat", Unit.class, Unit.class);
        method.setAccessible(true);
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");
        Map map = getTestMap(plains);
        game.setMap(map);
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);

        Unit scout = new Unit(game, tile1, dutch, colonistType, UnitState.ACTIVE);
        scout.equipWith(horses, true);
        Unit soldier = new Unit(game, tile2, french, colonistType, UnitState.ACTIVE);
        soldier.equipWith(muskets, true);

        method.invoke(combatModel, scout, soldier);
        scout.isDisposed();
    }
,
>
, <(startLine=296 endLine=308 srcPath=/root/NewExperiment/freecolFilter/01210/src/net/sf/freecol/common/option/UnitTypeOption.java)
    protected void readChild(FreeColXMLReader xr) throws XMLStreamException {
        final Specification spec = getSpecification();
        final String tag = xr.getLocalName();

        if (CHOICE_TAG.equals(tag)) {
            choices.add(xr.getType(spec, VALUE_TAG,
                                   UnitType.class, (UnitType)null));
            xr.closeTag(CHOICE_TAG);

        } else {
            super.readChild(xr);
        }
    }
,
(startLine=262 endLine=275 srcPath=/root/NewExperiment/freecolFilter/01210/src/net/sf/freecol/common/model/TradeRouteStop.java)
    protected void readChild(FreeColXMLReader xr) throws XMLStreamException {
        final Specification spec = getSpecification();
        final String tag = xr.getLocalName();

        if (CARGO_TAG.equals(tag)) {
            cargo.add(xr.getType(spec, ID_ATTRIBUTE_TAG,
                                 GoodsType.class, (GoodsType)null));

            xr.closeTag(CARGO_TAG);

        } else {
            super.readChild(xr);
        }
    }
,
>
, <(startLine=635 endLine=648 srcPath=/root/NewExperiment/freecolFilter/01330/src/net/sf/freecol/common/model/Colony.java)
                                        Collection<GoodsType> workTypes) {
        StringBuffer sb = null;
        if (getOccupationTrace()) {
            sb = new StringBuffer(128);
            sb.append(getName()).append(".getOccupationFor(").append(unit)
                .append(", ");
            logWorkTypes(sb, workTypes);
            sb.append(")");
        }

        Occupation occupation = getOccupationFor(unit, workTypes, sb);
        if (sb != null) logger.warning(sb.toString());
        return occupation;
    }
,
(startLine=660 endLine=671 srcPath=/root/NewExperiment/freecolFilter/01330/src/net/sf/freecol/common/model/Colony.java)
    private Occupation getOccupationFor(Unit unit, boolean userMode) {
        StringBuffer sb = null;
        if (getOccupationTrace()) {
            sb = new StringBuffer(128);
            sb.append(getName()).append(".getOccupationFor(").append(unit)
                .append(")");
        }

        Occupation occupation = getOccupationFor(unit, userMode, sb);
        if (sb != null) logger.warning(sb.toString());
        return occupation;
    }
,
>
, <(startLine=432 endLine=440 srcPath=/root/NewExperiment/freecolFilter/01539/src/net/sf/freecol/common/networking/ServerAPI.java)
                              Goods goods, int gold) {
        Element reply = askExpecting(new BuyPropositionMessage(unit, settlement,
                                                               goods, gold),
            BuyPropositionMessage.getTagName(), null);
        return (reply == null
            || !BuyPropositionMessage.getTagName().equals(reply.getTagName()))
            ? NetworkConstants.NO_TRADE
            : new BuyPropositionMessage(unit.getGame(), reply).getGold();
    }
,
(startLine=1150 endLine=1158 srcPath=/root/NewExperiment/freecolFilter/01539/src/net/sf/freecol/common/networking/ServerAPI.java)
                               Goods goods, int gold) {
        Element reply = askExpecting(new SellPropositionMessage(unit,
                settlement, goods, gold),
            SellPropositionMessage.getTagName(), null);
        return (reply == null
            || !SellPropositionMessage.getTagName().equals(reply.getTagName()))
            ? NetworkConstants.NO_TRADE
            : new SellPropositionMessage(unit.getGame(), reply).getGold();
    }
,
>
, <(startLine=1388 endLine=1400 srcPath=/root/NewExperiment/freecolFilter/00541/src/net/sf/freecol/client/control/InGameController.java)
    public void buyLand(Tile tile) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }

        BuyLandMessage message = new BuyLandMessage(tile);
        Client client = freeColClient.getClient();
        client.sendAndWait(message.toXMLElement());

        freeColClient.getMyPlayer().buyLand(tile);
        freeColClient.getCanvas().updateGoldLabel();
    }
,
(startLine=1408 endLine=1419 srcPath=/root/NewExperiment/freecolFilter/00541/src/net/sf/freecol/client/control/InGameController.java)
    public void stealLand(Tile tile, Colony colony) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }

        StealLandMessage message = new StealLandMessage(tile, colony);
        Client client = freeColClient.getClient();
        client.sendAndWait(message.toXMLElement());

        tile.takeOwnership(freeColClient.getMyPlayer(), colony);
    }
,
>
, <(startLine=660 endLine=687 srcPath=/root/NewExperiment/freecolFilter/01056/src/net/sf/freecol/client/gui/TilePopup.java)
    private void debugAddGoodsToUnit(final Game serverGame, Unit unit) {
        Specification spec = serverGame.getSpecification();
        List<ChoiceItem<GoodsType>> gtl
            = new ArrayList<ChoiceItem<GoodsType>>();
        for (GoodsType t : spec.getGoodsTypeList()) {
            if (t.isFoodType() && t != spec.getPrimaryFoodType()) continue;
            gtl.add(new ChoiceItem<GoodsType>(Messages.message(t.toString() + ".name"),
                                              t));
        }
        GoodsType goodsType = gui.showChoiceDialog(null, "Select Goods Type", "Cancel", gtl);
        if (goodsType == null) return;
        String amount = gui.showInputDialog(null,
            StringTemplate.name("Select Goods Amount"), "20",
            "ok", "cancel", true);
        if (amount == null) return;
        int a;
        try {
            a = Integer.parseInt(amount);
        } catch (NumberFormatException nfe) {
            return;
        }
        GoodsType sGoodsType = spec.getGoodsType(goodsType.getId());
        GoodsContainer ugc = unit.getGoodsContainer();
        GoodsContainer sgc = serverGame.getFreeColGameObject(ugc.getId(),
                                                             GoodsContainer.class);
        ugc.setAmount(goodsType, a);
        sgc.setAmount(sGoodsType, a);
    }
,
(startLine=468 endLine=501 srcPath=/root/NewExperiment/freecolFilter/01056/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
    private void debugSetGoods(Colony colony) {
        Specification spec = getSpecification();
        List<ChoiceItem<GoodsType>> gtl
            = new ArrayList<ChoiceItem<GoodsType>>();
        for (GoodsType t : spec.getGoodsTypeList()) {
            if (t.isFoodType() && t != spec.getPrimaryFoodType()) continue;
            gtl.add(new ChoiceItem<GoodsType>(Messages.message(t.toString() + ".name"),
                                              t));
        }
        GoodsType goodsType = getGUI().showChoiceDialog(null, "Select Goods Type",
                                                      "Cancel", gtl);
        if (goodsType == null) return;
        String amount = getGUI().showInputDialog(null,
                StringTemplate.name("Select Goods Amount"),
                Integer.toString(colony.getGoodsCount(goodsType)),
                "ok", "cancel", true);
        if (amount == null) return;
        int a;
        try {
            a = Integer.parseInt(amount);
        } catch (NumberFormatException nfe) {
            return;
        }
        GoodsType sGoodsType = getFreeColClient().getFreeColServer()
            .getSpecification().getGoodsType(goodsType.getId());
        GoodsContainer cgc = colony.getGoodsContainer();
        GoodsContainer sgc = getFreeColClient().getFreeColServer()
            .getGame().getFreeColGameObject(cgc.getId(), GoodsContainer.class);
        cgc.setAmount(goodsType, a);
        sgc.setAmount(sGoodsType, a);
        updateConstructionPanel();
        updateProductionPanel();
        updateWarehousePanel();
    }
,
>
, <(startLine=512 endLine=528 srcPath=/root/NewExperiment/freecolFilter/00005/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            public Component add(Component comp, boolean editState) {
                Component c;

                if (editState) {
                    if (comp instanceof UnitLabel) {
                        Unit unit = ((UnitLabel) comp).getUnit();
                        inGameController.work(unit, building);
                    } else {
                        logger.warning("An invalid component got dropped on this BuildingsPanel.");
                    }
                }

                ((UnitLabel) comp).setSmall(true);
                c = ((JPanel) getComponent(1)).add(comp);
                refresh();
                return c;
            }
,
(startLine=559 endLine=575 srcPath=/root/NewExperiment/freecolFilter/00005/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
        public Component add(Component comp, boolean editState) {
            if (editState) {
                if (comp instanceof UnitLabel) {
                    UnitLabel unitLabel = ((UnitLabel) comp);
                    Unit unit = unitLabel.getUnit();
                    inGameController.putOutsideColony(unit);
                } else {
                    logger.warning("An invalid component got dropped on this ColonistsPanel.");
                }
            }

            ((UnitLabel) comp).setSmall(false);
            updateCargoLabel();
            Component c = add(comp);
            refresh();
            return c;
        }
,
>
, <(startLine=1451 endLine=1470 srcPath=/root/NewExperiment/freecolFilter/00884/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            if (nearbyColonies.size() > 0) {
                Colony target = nearbyColonies.get(getAIRandom().nextInt(nearbyColonies.size()));
                Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                AIUnit chosenOne = null;
                while (it2.hasNext()) {
                    chosenOne = getAIUnit(it2.next());
                    if (chosenOne.getUnit().getLocation() instanceof Tile
                        && chosenOne.getUnit().canCarryGoods()
                        && (chosenOne.getMission() == null
                            || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                        // Check that the colony can be reached:
                        PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                   target.getTile());
                        if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_BRING_GIFT) {
                            chosenOne.setMission(new IndianBringGiftMission(getAIMain(), chosenOne, target));
                            break;
                        }
                    }
                }
            }
,
(startLine=613 endLine=632 srcPath=/root/NewExperiment/freecolFilter/00884/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            if (nearbyColonies.size() > 0) {
                Colony target = nearbyColonies.get(getAIRandom().nextInt(nearbyColonies.size()));
                Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                AIUnit chosenOne = null;
                while (it2.hasNext()) {
                    chosenOne = getAIUnit(it2.next());
                    if (chosenOne.getUnit().getLocation() instanceof Tile
                        && chosenOne.getUnit().canCarryGoods()
                        && (chosenOne.getMission() == null
                            || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                        // Check that the colony can be reached:
                        PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                   target.getTile());
                        if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_BRING_GIFT) {
                            chosenOne.setMission(new IndianBringGiftMission(getAIMain(), chosenOne, target));
                            break;
                        }
                    }
                }
            }
,
>
, <(startLine=126 endLine=133 srcPath=/root/NewExperiment/freecolFilter/01731/src/net/sf/freecol/common/networking/WrapperMessage.java)
    public String pretty() {
        StringBuilder sb = new StringBuilder(64);
        sb.append('[');
        pretty(sb, getType(), getStringAttributes(), null);
        if (this.message != null) sb.append(' ').append(this.message.pretty());
        sb.append(']');
        return sb.toString();
    }
,
(startLine=173 endLine=180 srcPath=/root/NewExperiment/freecolFilter/01731/src/net/sf/freecol/common/networking/MultipleMessage.java)
    public String pretty() {
        StringBuilder sb = new StringBuilder(64);
        sb.append('[');
        pretty(sb, getType(), getStringAttributes(), null);
        for (Message m : this.messages) sb.append(' ').append(m.pretty());
        sb.append(']');
        return sb.toString();
    }
,
>
, <(startLine=72 endLine=89 srcPath=/root/NewExperiment/freecolFilter/00748/test/src/net/sf/freecol/server/model/ServerBuildingTest.java)
                                       SchoolLevel level) {
        BuildingType schoolType = null;
        switch (level) {
        case SCHOOLHOUSE:
            schoolType = spec().getBuildingType("model.building.schoolhouse");
            break;
        case COLLEGE:
            schoolType = spec().getBuildingType("model.building.college");
            break;
        case UNIVERSITY:
            schoolType = spec().getBuildingType("model.building.university");
            break;
        default:
            fail("Setup error, cannot setup school");
        }
        colony.addBuilding(new ServerBuilding(game, colony, schoolType));
        return colony.getBuilding(schoolType);
    }
,
(startLine=49 endLine=66 srcPath=/root/NewExperiment/freecolFilter/00748/test/src/net/sf/freecol/common/model/SchoolTest.java)
    private Building addSchoolToColony(Game game, Colony colony, SchoolLevel level){
        BuildingType schoolType = null;;
        switch(level){
        case SCHOOLHOUSE:
                schoolType = spec().getBuildingType("model.building.schoolhouse");
                break;
        case COLLEGE:
                schoolType = spec().getBuildingType("model.building.college");
                break;
        case UNIVERSITY:
                schoolType = spec().getBuildingType("model.building.university");
                break;
        default:
                fail("Setup error, cannot setup school");
        }
        colony.addBuilding(new ServerBuilding(game, colony, schoolType));
        return colony.getBuilding(schoolType);
    }
,
>
, <(startLine=446 endLine=455 srcPath=/root/NewExperiment/freecolFilter/00135/src/net/sf/freecol/common/model/FreeColGameObject.java)
    protected Element toArrayElement(String tagName, int[] array, Document document) {
        Element arrayElement = document.createElement(tagName);
        arrayElement.setAttribute("xLength", Integer.toString(array.length));

        for (int x=0; x < array.length; x++) {
            arrayElement.setAttribute("x" + Integer.toString(x), Integer.toString(array[x]));
        }
        
        return arrayElement;
    }
,
(startLine=561 endLine=570 srcPath=/root/NewExperiment/freecolFilter/00135/src/net/sf/freecol/common/model/FreeColGameObject.java)
    protected Element toArrayElement(String tagName, String[] array, Document document) {
        Element arrayElement = document.createElement(tagName);
        arrayElement.setAttribute("xLength", Integer.toString(array.length));

        for (int x=0; x < array.length; x++) {
            arrayElement.setAttribute("x" + Integer.toString(x), array[x]);
        }
        
        return arrayElement;
    }
,
>
, <(startLine=1745 endLine=1759 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private void doMissions() {
        logger.finest("Entering method doMissions");
        Iterator<AIUnit> aiUnitsIterator = getAIUnitIterator();
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();
            if (aiUnit.hasMission() && aiUnit.getMission().isValid()
                    && !(aiUnit.getUnit().isOnCarrier())) {
                try {
                    aiUnit.doMission(getConnection());
                } catch (Exception e) {
                    logger.log(Level.WARNING, "doMissions failed", e);
                }
            }
        }
    }
,
(startLine=903 endLine=917 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void doMissions() {
        logger.finest("Entering method doMissions");
        Iterator<AIUnit> aiUnitsIterator = getAIUnitIterator();
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();
            if (aiUnit.hasMission() && aiUnit.getMission().isValid()
                    && !(aiUnit.getUnit().isOnCarrier())) {
                try {
                    aiUnit.doMission(getConnection());
                } catch (Exception e) {
                    logger.log(Level.WARNING, "doMissions failed", e);
                }
            }
        }
    }
,
>
, <(startLine=272 endLine=289 srcPath=/root/NewExperiment/freecolFilter/01157/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
    private static String invalidColonyReason(AIUnit aiUnit, Colony colony) {
        String reason = invalidTargetReason(colony);
        if (reason != null) return reason;
        final Unit unit = aiUnit.getUnit();
        final Player owner = unit.getOwner();
        Player targetPlayer = colony.getOwner();
        switch (owner.getStance(targetPlayer)) {
        case UNCONTACTED: case PEACE: case ALLIANCE:
            return "bad-stance";
        case WAR: case CEASE_FIRE:
            Tension tension = unit.getIndianSettlement()
                .getAlarm(targetPlayer);
            if (tension != null && tension.getLevel()
                .compareTo(Tension.Level.CONTENT) <= 0) return "happy";
            break;
        }
        return null;
    }
,
(startLine=167 endLine=183 srcPath=/root/NewExperiment/freecolFilter/01157/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
    private static String invalidColonyReason(AIUnit aiUnit, Colony colony) {
        String reason = invalidTargetReason(colony);
        if (reason != null) return reason;
        final Unit unit = aiUnit.getUnit();
        final Player owner = unit.getOwner();
        Player targetPlayer = colony.getOwner();
        switch (owner.getStance(targetPlayer)) {
        case UNCONTACTED: case WAR: case CEASE_FIRE:
            return "bad-stance";
        case PEACE: case ALLIANCE:
            Tension tension = unit.getIndianSettlement()
                .getAlarm(targetPlayer);
            if (tension != null && tension.getLevel()
                .compareTo(Tension.Level.HAPPY) > 0) return "unhappy";
        }
        return null;
    }
,
>
, <(startLine=489 endLine=583 srcPath=/root/NewExperiment/freecolFilter/01201/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void bringGifts() {
        final Player player = getPlayer();
        final Map map = getGame().getMap();
        final CostDecider cd = CostDeciders.numberOfLegalTiles();
        final int giftProbability = getGame().getSpecification()
            .getInteger("model.option.giftProbability");

        for (IndianSettlement is : player.getIndianSettlements()) {
            // Do not bring gifts all the time.
            if (Utils.randomInt(logger, is.getName() + " bring gifts",
                    getAIRandom(), 100) >= giftProbability) continue;

            // Check if the settlement has anything to give.
            Goods gift = is.getRandomGift(getAIRandom());
            if (gift == null) continue;

            // Check if there are available units, and if there are already
            // enough missions in operation.
            List<Unit> availableUnits = new ArrayList<Unit>();
            int alreadyAssignedUnits = 0;
            for (Unit ou : is.getOwnedUnits()) {
                AIUnit aiu = getAIUnit(ou);
                if (aiu == null) {
                    continue;
                } else if (aiu.getMission() instanceof IndianBringGiftMission) {
                    alreadyAssignedUnits++;
                } else if (Mission.invalidNewMissionReason(aiu) == null) {
                    availableUnits.add(ou);
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_GIFTS_BEING_DELIVERED) {
                logger.finest(is.getName() + " has " + alreadyAssignedUnits
                    + " already.");
                continue;
            } else if (availableUnits.isEmpty()) {
                logger.finest(is.getName() + " has no gift units.");
                continue;
            }
            // Pick a random available capable unit.
            Unit unit = null;
            AIUnit aiUnit = null;
            Tile home = is.getTile();
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose gift unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianBringGiftMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), home, null, cd) != null) {
                    unit = u;
                }
            }
            if (unit == null) {
                logger.finest(is.getName() + " has no suitable gift units.");
                continue;
            }

            // Collect nearby colonies.  Filter out ones which are uncontacted,
            // unreachable or otherwise unsuitable.  Score the rest on alarm
            // and distance.
            List<RandomChoice<Colony>> nearbyColonies
                = new ArrayList<RandomChoice<Colony>>();
            for (Tile t : home.getSurroundingTiles(MAX_DISTANCE_TO_BRING_GIFTS)) {
                Colony c = t.getColony();
                PathNode path;
                if (c == null
                    || !is.hasContacted(c.getOwner())
                    || IndianBringGiftMission.invalidReason(aiUnit, c) != null
                    || (path = unit.findPath(home, c.getTile(),
                                             null, cd)) == null) continue;
                int alarm = Math.max(1, is.getAlarm(c.getOwner()).getValue());
                nearbyColonies.add(new RandomChoice<Colony>(c,
                        1000000 / alarm / path.getTotalTurns()));
            }
        
            // If there are any suitable colonies, pick a random one
            // to send a gift to.
            if (nearbyColonies.isEmpty()) {
                logger.finest(is.getName() + " has no nearby gift colonies.");
                continue;
            }
            Colony target = RandomChoice.getWeightedRandom(logger,
                "Choose gift colony", nearbyColonies, getAIRandom());
            if (target == null) {
                throw new IllegalStateException("No gift target!?!");
            }

            // Send the unit.
            logger.finest("Assigning gift " + gift + " from " + is.getName()
                + " to " + target.getName() + ": " + unit);
            aiUnit.setMission(new IndianBringGiftMission(getAIMain(),
                              aiUnit, target));
        }
    }
,
(startLine=588 endLine=679 srcPath=/root/NewExperiment/freecolFilter/01201/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void demandTribute() {
        final Map map = getGame().getMap();
        final Player player = getPlayer();
        final CostDecider cd = CostDeciders.numberOfLegalTiles();
        final int demandProbability = getGame().getSpecification()
            .getInteger("model.option.demandProbability");

        for (IndianSettlement is : player.getIndianSettlements()) {
            // Do not demand tribute all of the time.
            if (Utils.randomInt(logger, is.getName() + " demand tribute",
                    getAIRandom(), 100) >= demandProbability) continue;

            // Check if there are available units, and if there are already
            // enough missions in operation.
            List<Unit> availableUnits = new ArrayList<Unit>();
            int alreadyAssignedUnits = 0;
            for (Unit ou : is.getOwnedUnits()) {
                AIUnit aiu = getAIUnit(ou);
                if (Mission.invalidNewMissionReason(aiu) == null) {
                    if (aiu.getMission() instanceof IndianDemandMission) {
                        alreadyAssignedUnits++;
                    } else {
                        availableUnits.add(ou);
                    }
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_DEMANDS) {
                logger.finest(is.getName() + " has " + alreadyAssignedUnits
                    + " already.");
                continue;
            } else if (availableUnits.isEmpty()) {
                logger.finest(is.getName() + " has no demand units.");
                continue;
            }
            // Pick a random available capable unit.
            Tile home = is.getTile();
            Unit unit = null;
            AIUnit aiUnit = null;
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose demand unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianDemandMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), home, null, cd) != null) {
                    unit = u;
                }
            }
            if (unit == null) {
                logger.finest(is.getName() + " has no suitable demand units.");
                continue;
            }

            // Collect nearby colonies.  Filter out ones which are unreachable
            // or with which the settlement is on adequate terms.
            List<RandomChoice<Colony>> nearbyColonies
                = new ArrayList<RandomChoice<Colony>>();
            for (Tile t : home.getSurroundingTiles(MAX_DISTANCE_TO_MAKE_DEMANDS)) {
                Colony c = t.getColony();
                PathNode path;
                if (c == null
                    || !is.hasContacted(c.getOwner())
                    || IndianDemandMission.invalidReason(aiUnit, c) != null
                    || (path = unit.findPath(home, c.getTile(),
                                             null, cd)) == null) continue;
                int alarm = is.getAlarm(c.getOwner()).getValue();
                int defence = c.getUnitCount() + ((c.getStockade() == null) ? 1
                    : (c.getStockade().getLevel() * 10));
                nearbyColonies.add(new RandomChoice<Colony>(c,
                        alarm * (1000000 / defence / path.getTotalTurns())));
            }
            // If there are any suitable colonies, pick one to demand from.
            // Sometimes a random one, sometimes the weakest, sometimes the
            // most annoying.
            if (nearbyColonies.isEmpty()) {
                logger.finest(is.getName() + " has no nearby demand colonies.");
                continue;
            }
            Colony target = RandomChoice.getWeightedRandom(logger,
                "Choose demand colony", nearbyColonies, getAIRandom());
            if (target == null) {
                throw new IllegalStateException("No demand target!?!");
            }

            // Send the unit.
            logger.finest("Assigning demand from " + is.getName()
                + " to " + target.getName() + ": " + unit);
            aiUnit.setMission(new IndianDemandMission(getAIMain(),
                              aiUnit, target));
        }
    }
,
>
, <(startLine=184 endLine=286 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    public List<Modifier> getDefensiveModifiers(Unit attacker, Unit defender) {

        ArrayList<Modifier> result = new ArrayList<Modifier>();
        if (defender == null) {
            return result;
        }

        float addend, percentage;
        float totalAddend = defender.getType().getDefence();
        float totalPercentage = 100;

        result.add(new Modifier("modifiers.baseDefense", totalAddend, Modifier.ADDITIVE));

        if (defender.isNaval()) {
            int goodsCount = defender.getVisibleGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                // TODO: shouldn't this be -cargo/capacity?
                percentage =  -12.5f * goodsCount;
                result.add(new Modifier("modifiers.cargoPenalty", percentage, Modifier.PERCENTAGE));
                totalPercentage += percentage;
            }
            if (defender.hasAbility("model.ability.piracy")) {
                Modifier piracyBonus = defender.getModifier("model.modifier.piracyBonus");
                if (piracyBonus != null) {
                    // Drake grants 50% power bonus (in colonization gives for attack and defense)
                    result.add(piracyBonus);
                    totalPercentage += piracyBonus.getValue();
                }
            }
        } else {
            // Paul Revere makes an unarmed colonist in a settlement pick up
            // a stock-piled musket if attacked, so the bonus should be applied
            // for unarmed colonists inside colonies where there are muskets
            // available.
            if (defender.isArmed()) {
                addend = 1;
                result.add(new Modifier("modifiers.armed", addend, Modifier.ADDITIVE));
                totalAddend += addend;
            } else if (defender.getOwner().hasAbility("model.ability.automaticDefense") && defender.isColonist()
                       && defender.getLocation() instanceof WorkLocation) {
                Colony colony = ((WorkLocation) defender.getLocation()).getColony();
                if (colony.getGoodsCount(Goods.MUSKETS) >= 50) {
                    addend = 1;
                    result.add(new Modifier("modifiers.paulRevere", addend, Modifier.ADDITIVE));
                    totalAddend += addend;
                }
            }

            if (defender.isMounted()) {
                addend = 1;
                result.add(new Modifier("modifiers.mounted", addend, Modifier.ADDITIVE));
                totalAddend += addend;
            }

            // 50% veteran bonus
            Modifier veteranModifier = defender.getModifier("model.modifier.veteranBonus");
            if (veteranModifier != null) {
                result.add(veteranModifier);
                totalPercentage += veteranModifier.getValue();
            }

            // 50% fortify bonus
            if (defender.getState() == UnitState.FORTIFIED) {
                percentage = 50;
                result.add(new Modifier("modifiers.fortified", percentage, Modifier.PERCENTAGE));
                totalPercentage += percentage;
            }

            if (defender.getTile() != null && defender.getTile().getSettlement() != null) {
                Modifier settlementModifier = getSettlementModifier(attacker, defender.getTile().getSettlement());
                result.add(settlementModifier);
                totalPercentage += settlementModifier.getValue();
                // TODO: is it right? or should it be another ability?
                if (defender.hasAbility("model.ability.bombard") && attacker.getOwner().isIndian()) {
                    // 100% defense bonus against an Indian raid
                    percentage = 100;
                    result.add(new Modifier("modifiers.artilleryAgainstRaid", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
            } else if (defender.getTile() != null) {
                // In the open
                if (!(attacker.hasAbility("model.ability.ambushBonus") ||
                      defender.hasAbility("model.ability.ambushPenalty"))) {
                    // Terrain defensive bonus.
                    percentage = defender.getTile().defenseBonus();
                    result.add(new Modifier("modifiers.terrainBonus", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
                // TODO: is it right? or should it be another ability?
                if (defender.hasAbility("model.ability.bombard") && defender.getState() != UnitState.FORTIFIED) {
                    // -75% Artillery in the Open penalty
                    percentage = -75;
                    result.add(new Modifier("modifiers.artilleryPenalty", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
            }

        }
        float defensivePower = (totalAddend * totalPercentage) / 100;
        result.add(new Modifier("modifiers.finalResult", defensivePower, Modifier.ADDITIVE));
        return result;
    }
,
(startLine=3280 endLine=3382 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/Unit.java)
    public static ArrayList<Modifier> getDefensiveModifiers(Unit attacker, Unit defender) {

        ArrayList<Modifier> result = new ArrayList<Modifier>();
        if (defender == null) {
            return result;
        }

        float addend, percentage;
        float totalAddend = defender.unitType.getDefence();
        float totalPercentage = 100;

        result.add(new Modifier("modifiers.baseDefense", totalAddend, Modifier.ADDITIVE));

        if (defender.isNaval()) {
            int goodsCount = defender.getVisibleGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                // TODO: shouldn't this be -cargo/capacity?
                percentage =  -12.5f * goodsCount;
                result.add(new Modifier("modifiers.cargoPenalty", percentage, Modifier.PERCENTAGE));
                totalPercentage += percentage;
            }
            if (defender.hasAbility("model.ability.piracy")) {
                Modifier piracyBonus = defender.getModifier("model.modifier.piracyBonus");
                if (piracyBonus != null) {
                    // Drake grants 50% power bonus (in colonization gives for attack and defense)
                    result.add(piracyBonus);
                    totalPercentage += piracyBonus.getValue();
                }
            }
        } else {
            // Paul Revere makes an unarmed colonist in a settlement pick up
            // a stock-piled musket if attacked, so the bonus should be applied
            // for unarmed colonists inside colonies where there are muskets
            // available.
            if (defender.isArmed()) {
                addend = 1;
                result.add(new Modifier("modifiers.armed", addend, Modifier.ADDITIVE));
                totalAddend += addend;
            } else if (defender.getOwner().hasAbility("model.ability.automaticDefense") && defender.isColonist()
                       && defender.getLocation() instanceof WorkLocation) {
                Colony colony = ((WorkLocation) defender.getLocation()).getColony();
                if (colony.getGoodsCount(Goods.MUSKETS) >= 50) {
                    addend = 1;
                    result.add(new Modifier("modifiers.paulRevere", addend, Modifier.ADDITIVE));
                    totalAddend += addend;
                }
            }

            if (defender.isMounted()) {
                addend = 1;
                result.add(new Modifier("modifiers.mounted", addend, Modifier.ADDITIVE));
                totalAddend += addend;
            }

            // 50% veteran bonus
            Modifier veteranModifier = defender.getModifier("model.modifier.veteranBonus");
            if (veteranModifier != null) {
                result.add(veteranModifier);
                totalPercentage += veteranModifier.getValue();
            }

            // 50% fortify bonus
            if (defender.getState() == UnitState.FORTIFIED) {
                percentage = 50;
                result.add(new Modifier("modifiers.fortified", percentage, Modifier.PERCENTAGE));
                totalPercentage += percentage;
            }

            if (defender.getTile() != null && defender.getTile().getSettlement() != null) {
                Modifier settlementModifier = getSettlementModifier(attacker, defender.getTile().getSettlement());
                result.add(settlementModifier);
                totalPercentage += settlementModifier.getValue();
                // TODO: is it right? or should it be another ability?
                if (defender.hasAbility("model.ability.bombard") && attacker.getOwner().isIndian()) {
                    // 100% defense bonus against an Indian raid
                    percentage = 100;
                    result.add(new Modifier("modifiers.artilleryAgainstRaid", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
            } else if (defender.getTile() != null) {
                // In the open
                if (!(attacker.hasAbility("model.ability.ambushBonus") ||
                      defender.hasAbility("model.ability.ambushPenalty"))) {
                    // Terrain defensive bonus.
                    percentage = defender.getTile().defenseBonus();
                    result.add(new Modifier("modifiers.terrainBonus", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
                // TODO: is it right? or should it be another ability?
                if (defender.hasAbility("model.ability.bombard") && defender.getState() != UnitState.FORTIFIED) {
                    // -75% Artillery in the Open penalty
                    percentage = -75;
                    result.add(new Modifier("modifiers.artilleryPenalty", percentage, Modifier.PERCENTAGE));
                    totalPercentage += percentage;
                }
            }

        }
        float defensivePower = (totalAddend * totalPercentage) / 100;
        result.add(new Modifier("modifiers.finalResult", defensivePower, Modifier.ADDITIVE));
        return result;
    }
,
>
, <(startLine=90 endLine=106 srcPath=/root/NewExperiment/freecolFilter/00510/test/src/net/sf/freecol/common/model/MarketTest.java)
    public int sellUntilPriceDrop(Game game, Player player, GoodsType type){

        int result = 0;
                
        Market market = player.getMarket();

        int price = market.getSalePrice(type, 1);
                
        if (price == 0)
            throw new IllegalArgumentException("Price is already 0 for selling " + type);
                
        while (price == market.getSalePrice(type, 1)){
            market.sell(type, 10, player);
            result++;
        }
        return result;
    }
,
(startLine=112 endLine=128 srcPath=/root/NewExperiment/freecolFilter/00510/test/src/net/sf/freecol/common/model/MarketTest.java)
    public int buyUntilPriceRise(Game game, Player player, GoodsType type) {

        int result = 0;

        Market market = player.getMarket();

        int price = market.getBidPrice(type, 1);

        if (price == 20)
            throw new IllegalArgumentException("Price is already 20 for buying " + type);

        while (price == market.getBidPrice(type, 1)) {
            market.buy(type, 10, player);
            result++;
        }
        return result;
    }
,
>
, <(startLine=658 endLine=682 srcPath=/root/NewExperiment/freecolFilter/01511/test/src/net/sf/freecol/common/model/ProductionTypeTest.java)
    public void testToolsProduction() {
        testProduction(inputs, outputs,
                       blacksmithHouse.getAvailableProductionTypes(true));

        inputs.put(ore, 3);
        outputs.put(tools, 3);
        testProduction(inputs, outputs,
                       blacksmithHouse.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       blacksmithShop.getAvailableProductionTypes(true));

        inputs.put(ore, 6);
        outputs.put(tools, 6);
        testProduction(inputs, outputs,
                       blacksmithShop.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       ironWorks.getAvailableProductionTypes(true));

        inputs.put(ore, 6);
        outputs.put(tools, 9);
        testProduction(inputs, outputs,
                       ironWorks.getAvailableProductionTypes(false));
    }
,
(startLine=684 endLine=708 srcPath=/root/NewExperiment/freecolFilter/01511/test/src/net/sf/freecol/common/model/ProductionTypeTest.java)
    public void testCigarProduction() {
        testProduction(inputs, outputs,
                       tobacconistHouse.getAvailableProductionTypes(true));

        inputs.put(tobacco, 3);
        outputs.put(cigars, 3);
        testProduction(inputs, outputs,
                       tobacconistHouse.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       tobacconistShop.getAvailableProductionTypes(true));

        inputs.put(tobacco, 6);
        outputs.put(cigars, 6);
        testProduction(inputs, outputs,
                       tobacconistShop.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       cigarFactory.getAvailableProductionTypes(true));

        inputs.put(tobacco, 6);
        outputs.put(cigars, 9);
        testProduction(inputs, outputs,
                       cigarFactory.getAvailableProductionTypes(false));
    }
,
(startLine=710 endLine=734 srcPath=/root/NewExperiment/freecolFilter/01511/test/src/net/sf/freecol/common/model/ProductionTypeTest.java)
    public void testClothProduction() {
        testProduction(inputs, outputs,
                       weaverHouse.getAvailableProductionTypes(true));

        inputs.put(cotton, 3);
        outputs.put(cloth, 3);
        testProduction(inputs, outputs,
                       weaverHouse.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       weaverShop.getAvailableProductionTypes(true));

        inputs.put(cotton, 6);
        outputs.put(cloth, 6);
        testProduction(inputs, outputs,
                       weaverShop.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       textileMill.getAvailableProductionTypes(true));

        inputs.put(cotton, 6);
        outputs.put(cloth, 9);
        testProduction(inputs, outputs,
                       textileMill.getAvailableProductionTypes(false));
    }
,
(startLine=736 endLine=760 srcPath=/root/NewExperiment/freecolFilter/01511/test/src/net/sf/freecol/common/model/ProductionTypeTest.java)
    public void testRumProduction() {
        testProduction(inputs, outputs,
                       distillerHouse.getAvailableProductionTypes(true));

        inputs.put(sugar, 3);
        outputs.put(rum, 3);
        testProduction(inputs, outputs,
                       distillerHouse.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       rumDistillery.getAvailableProductionTypes(true));

        inputs.put(sugar, 6);
        outputs.put(rum, 6);
        testProduction(inputs, outputs,
                       rumDistillery.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       rumFactory.getAvailableProductionTypes(true));

        inputs.put(sugar, 6);
        outputs.put(rum, 9);
        testProduction(inputs, outputs,
                       rumFactory.getAvailableProductionTypes(false));
    }
,
(startLine=762 endLine=786 srcPath=/root/NewExperiment/freecolFilter/01511/test/src/net/sf/freecol/common/model/ProductionTypeTest.java)
    public void testCoatProduction() {
        testProduction(inputs, outputs,
                       furTraderHouse.getAvailableProductionTypes(true));

        inputs.put(furs, 3);
        outputs.put(coats, 3);
        testProduction(inputs, outputs,
                       furTraderHouse.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       furTradingPost.getAvailableProductionTypes(true));

        inputs.put(furs, 6);
        outputs.put(coats, 6);
        testProduction(inputs, outputs,
                       furTradingPost.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       furFactory.getAvailableProductionTypes(true));

        inputs.put(furs, 6);
        outputs.put(coats, 9);
        testProduction(inputs, outputs,
                       furFactory.getAvailableProductionTypes(false));
    }
,
(startLine=788 endLine=812 srcPath=/root/NewExperiment/freecolFilter/01511/test/src/net/sf/freecol/common/model/ProductionTypeTest.java)
    public void testMusketProduction() {
        testProduction(inputs, outputs,
                       armory.getAvailableProductionTypes(true));

        inputs.put(tools, 3);
        outputs.put(muskets, 3);
        testProduction(inputs, outputs,
                       armory.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       magazine.getAvailableProductionTypes(true));

        inputs.put(tools, 6);
        outputs.put(muskets, 6);
        testProduction(inputs, outputs,
                       magazine.getAvailableProductionTypes(false));

        testProduction(inputs, outputs,
                       arsenal.getAvailableProductionTypes(true));

        inputs.put(tools, 9);
        outputs.put(muskets, 9);
        testProduction(inputs, outputs,
                       arsenal.getAvailableProductionTypes(false));
    }
,
>
, <(startLine=184 endLine=192 srcPath=/root/NewExperiment/freecolFilter/00466/src/net/sf/freecol/server/ai/AIPlayer.java)
        try {
            if (logger.isLoggable(Level.FINER)) {
                logger.finer("AI player (" + this + ") sending " + element.getTagName() + "...");
            }
            getConnection().sendAndWait(element);
            if (logger.isLoggable(Level.FINER)) {
                logger.finer("Sent and waited, returning.");
            }
        } catch (IOException e) {
,
(startLine=217 endLine=225 srcPath=/root/NewExperiment/freecolFilter/00466/src/net/sf/freecol/server/ai/NewAIPlayer.java)
        try {
            if (logger.isLoggable(Level.FINER)) {
                logger.finer("AI player (" + this + ") sending " + element.getTagName() + "...");
            }
            getConnection().sendAndWait(element);
            if (logger.isLoggable(Level.FINER)) {
                logger.finer("Sent and waited, returning.");
            }
        } catch (IOException e) {
,
>
, <(startLine=671 endLine=678 srcPath=/root/NewExperiment/freecolFilter/01300/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
            if (left <= 0) {
                b = colourButton(cac, Integer.toString(0),
                    lib.getUnitImageIcon(u.getType(), Role.DEFAULT_ID,
                        true, 0.333), cAlarm,
                    stpl("report.colony.making.noteach.description")
                        .addName("%colony%", colony.getName())
                        .addStringTemplate("%teacher%", Messages.getLabelTemplate(u)));
            } else {
,
(startLine=678 endLine=686 srcPath=/root/NewExperiment/freecolFilter/01300/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
            } else {
                b = colourButton(cac, Integer.toString(left),
                    lib.getUnitImageIcon(u.getType(), Role.DEFAULT_ID,
                        true, 0.333), Color.BLACK,
                    stpl("report.colony.making.educating.description")
                        .addName("%colony%", colony.getName())
                        .addStringTemplate("%teacher%", Messages.getLabelTemplate(u))
                        .addAmount("%turns%", left));
            }
,
>
, <(startLine=746 endLine=755 srcPath=/root/NewExperiment/freecolFilter/00284/src/net/sf/freecol/common/model/FreeColGameObject.java)
    protected static void  toArrayElement(String tagName, int[] array, XMLStreamWriter out) throws XMLStreamException {
        out.writeStartElement(tagName);
        
        out.writeAttribute("xLength", Integer.toString(array.length));
        for (int x=0; x < array.length; x++) {
            out.writeAttribute("x" + Integer.toString(x), Integer.toString(array[x]));
        }
        
        out.writeEndElement();
    }
,
(startLine=171 endLine=180 srcPath=/root/NewExperiment/freecolFilter/00284/src/net/sf/freecol/common/model/PersistentObject.java)
    protected void  toArrayElement(String tagName, int[] array, XMLStreamWriter out) throws XMLStreamException {
        out.writeStartElement(tagName);
        
        out.writeAttribute("xLength", Integer.toString(array.length));
        for (int x=0; x < array.length; x++) {
            out.writeAttribute("x" + Integer.toString(x), Integer.toString(array[x]));
        }
        
        out.writeEndElement();
    }
,
>
, <(startLine=157 endLine=174 srcPath=/root/NewExperiment/freecolFilter/01726/src/net/sf/freecol/common/networking/AnimateAttackMessage.java)
    private Unit getAttacker(Game game) {
        final String att = getStringAttribute(ATTACKER_TAG);
        Unit unit = game.getFreeColGameObject(att, Unit.class);
        if (unit == null) {
            if ((unit = getChild(0, Unit.class)) == null) {
                logger.warning("Attack animation missing attacker: " + att);
            } else {
                unit.intern();
                if (!unit.getId().equals(att)) { // actually on carrier
                    unit = unit.getCarriedUnitById(att);
                    if (unit == null) {
                        logger.warning("Attack animation missing carried attacker: " + att);
                    }
                }
            }
        }
        return unit;
    }
,
(startLine=181 endLine=198 srcPath=/root/NewExperiment/freecolFilter/01726/src/net/sf/freecol/common/networking/AnimateAttackMessage.java)
    private Unit getDefender(Game game) {
        final String def = getStringAttribute(DEFENDER_TAG);
        Unit unit = game.getFreeColGameObject(def, Unit.class);
        if (unit == null) {
            if ((unit = getChild(1, Unit.class)) == null) {
                logger.warning("Attack animation missing defender: " + def);
            } else {
                unit.intern();
                if (!unit.getId().equals(def)) { // actually on carrier
                    unit = unit.getCarriedUnitById(def);
                    if (unit == null) {
                        logger.warning("Attack animation missing carried defender: " + def);
                    }
                }
            }
        }
        return unit;
    }
,
>
, <(startLine=882 endLine=896 srcPath=/root/NewExperiment/freecolFilter/01020/src/net/sf/freecol/common/model/Unit.java)
    public Set<Modifier> getModifierSet(String id) {
        Set<Modifier> result = new HashSet<Modifier>();
        Turn turn = getGame().getTurn();
        // UnitType modifiers always apply
        result.addAll(unitType.getModifierSet(id));
        // the player's modifiers may not apply
        result.addAll(getOwner().getModifierSet(id, unitType, turn));
        // EquipmentType modifiers always apply
        for (EquipmentType equipmentType : equipment.keySet()) {
            result.addAll(equipmentType.getModifierSet(id));
            // player modifiers may also apply to equipment (unused)
            result.addAll(getOwner().getModifierSet(id, equipmentType, turn));
        }
        return result;
    }
,
(startLine=906 endLine=916 srcPath=/root/NewExperiment/freecolFilter/01020/src/net/sf/freecol/common/model/Unit.java)
    public Set<Modifier> getModifierSet(String id, Ownable ownable) {
        Set<Modifier> result = new HashSet<Modifier>();
        Turn turn = getGame().getTurn();
        NationType nationType = ownable.getOwner().getNationType();
        result.addAll(unitType.getModifierSet(id, nationType, turn));
        result.addAll(getOwner().getModifierSet(id, nationType, turn));
        for (EquipmentType equipmentType : equipment.keySet()) {
            result.addAll(equipmentType.getModifierSet(id, nationType, turn));
        }
        return result;
    }
,
>
, <(startLine=269 endLine=282 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/common/model/FeatureContainer.java)
            if (modifier.hasIncrement() && turn != null) {
                int diff = turn.getNumber() - modifier.getFirstTurn().getNumber();
                switch(modifier.getIncrementType()) {
                case ADDITIVE:
                    value += modifier.getIncrement() * diff;
                    break;
                case MULTIPLICATIVE:
                    value *= modifier.getIncrement() * diff;
                    break;
                case PERCENTAGE:
                    value += (value * modifier.getIncrement() * diff) / 100;
                    break;
                }
            }
,
(startLine=315 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/common/model/FeatureContainer.java)
            if (modifier.hasIncrement() && turn != null) {
                int diff = turn.getNumber() - modifier.getFirstTurn().getNumber();
                switch(modifier.getIncrementType()) {
                case ADDITIVE:
                    value += modifier.getIncrement() * diff;
                    break;
                case MULTIPLICATIVE:
                    value *= modifier.getIncrement() * diff;
                    break;
                case PERCENTAGE:
                    value += (value * modifier.getIncrement() * diff) / 100;
                    break;
                }
            }
,
>
, <(startLine=1030 endLine=1046 srcPath=/root/NewExperiment/freecolFilter/01499/src/net/sf/freecol/client/control/InGameInputHandler.java)
    private Element setCurrentPlayer(Element element) {
        final Player player
            = getGame().getFreeColGameObject(element.getAttribute("player"),
                                             Player.class);
        if (player == null) {
            logger.warning("Invalid player for setCurrentPlayer");
            return null;
        }

        getFreeColClient().invokeLater(new Runnable() {
                @Override
                public void run() {
                    igc().setCurrentPlayer(player);
                }
            });
        return null;
    }
,
(startLine=1055 endLine=1070 srcPath=/root/NewExperiment/freecolFilter/01499/src/net/sf/freecol/client/control/InGameInputHandler.java)
    private Element setDead(Element element) {
        final Player player = getGame()
            .getFreeColGameObject(element.getAttribute("player"),Player.class);
        if (player == null) {
            logger.warning("Invalid player for setDead");
            return null;
        }

        getFreeColClient().invokeLater(new Runnable() {
                @Override
                public void run() {
                    igc().setDead(player);
                }
            });
        return null;
    }
,
>
, <(startLine=965 endLine=973 srcPath=/root/NewExperiment/freecolFilter/01408/src/net/sf/freecol/client/control/InGameController.java)
            if (interactive || clearDestination) {
                gui.playSound("sound.event.illegalMove");
                StringTemplate nation = getNationAt(unit.getTile(), direction);
                gui.showInformationMessage(unit,
                    StringTemplate.template("move.noAccessGoods")
                    .addStringTemplate("%nation%", nation)
                    .addStringTemplate("%unit%",
                        unit.getLabel(Unit.UnitLabelType.NATIONAL)));
            }
,
(startLine=983 endLine=991 srcPath=/root/NewExperiment/freecolFilter/01408/src/net/sf/freecol/client/control/InGameController.java)
            if (interactive || clearDestination) {
                gui.playSound("sound.event.illegalMove");
                StringTemplate nation = getNationAt(unit.getTile(), direction);
                gui.showInformationMessage(unit,
                    StringTemplate.template("move.noAccessMissionBan")
                    .addStringTemplate("%unit%",
                        unit.getLabel(Unit.UnitLabelType.NATIONAL))
                    .addStringTemplate("%nation%", nation));
            }
,
(startLine=994 endLine=1002 srcPath=/root/NewExperiment/freecolFilter/01408/src/net/sf/freecol/client/control/InGameController.java)
            if (interactive || clearDestination) {
                gui.playSound("sound.event.illegalMove");
                StringTemplate nation = getNationAt(unit.getTile(), direction);
                gui.showInformationMessage(unit,
                    StringTemplate.template("move.noAccessSettlement")
                    .addStringTemplate("%unit%",
                        unit.getLabel(Unit.UnitLabelType.NATIONAL))
                    .addStringTemplate("%nation%", nation));
            }
,
>
, <(startLine=238 endLine=254 srcPath=/root/NewExperiment/freecolFilter/01190/src/net/sf/freecol/common/model/PlayerExploredTile.java)
                if (fix) {
                    // @compat 0.10.5
                    // Somewhere around 0.10.5 there were maps with LCRs
                    // that reference the wrong tile.
                    if (ti.getTile() != tile) {
                        logger.warning("Fixing improvement tile at: " + tile
                                       + " / " + ti.getId());
                        ti.setLocation(tile);
                        integ = Math.min(integ, 0);
                    }
                    // end @compat
                    if (integ < 0) {
                        logger.warning("Removing broken improvement at: "
                                       + tile);
                        tileItems.remove(ti);
                    }
                }
,
(startLine=540 endLine=557 srcPath=/root/NewExperiment/freecolFilter/01190/src/net/sf/freecol/common/model/TileItemContainer.java)
            if (fix) {
                // @compat 0.10.5
                // Somewhere around 0.10.5 there were maps with LCRs
                // that reference the wrong tile.
                if (ti.getTile() != tile) {
                    logger.warning("Fixing improvement tile at: " + tile
                                   + " / " + ti.getId());
                    ti.setLocation(tile);
                    integ = Math.min(integ, 0);
                }
                // end @compat
                if (integ < 0) {
                    logger.warning("Removing broken improvement at: " + tile
                                   + " / " + ti.getId());
                    tileItems.remove(ti);
                    integ = 0;
                }
            }
,
>
, <(startLine=447 endLine=457 srcPath=/root/NewExperiment/freecolFilter/00305/src/net/sf/freecol/client/gui/ImageLibrary.java)
    private Vector<ImageIcon> scaleImages(Vector<ImageIcon> list, float f) {
        Vector<ImageIcon> output = new Vector<ImageIcon>();
        for (ImageIcon im : list) {
            if (im != null) {
                output.add(new ImageIcon(im.getImage().getScaledInstance(Math.round(im.getIconWidth() * f), Math.round(im.getIconHeight() * f), Image.SCALE_SMOOTH)));
            } else {
                output.add(null);
            }
        }
        return output;
    }
,
(startLine=461 endLine=471 srcPath=/root/NewExperiment/freecolFilter/00305/src/net/sf/freecol/client/gui/ImageLibrary.java)
        for (Vector<ImageIcon> v : list) {
            Vector<ImageIcon> outputV = new Vector<ImageIcon>();
            output.add(outputV);
            for (ImageIcon im : v) {
                if (im != null) {
                    outputV.add(new ImageIcon(im.getImage().getScaledInstance(Math.round(im.getIconWidth() * f), Math.round(im.getIconHeight() * f), Image.SCALE_SMOOTH)));
                } else {
                    outputV.add(null);
                }
            }
        }
,
>
, <(startLine=376 endLine=384 srcPath=/root/NewExperiment/freecolFilter/01595/src/net/sf/freecol/common/networking/ServerAPI.java)
                              Goods goods, int gold) {
        Element reply = askExpecting(unit.getGame(),
            new BuyPropositionMessage(unit, settlement, goods, gold),
            BuyPropositionMessage.getTagName());
        return (reply == null
            || !BuyPropositionMessage.getTagName().equals(reply.getTagName()))
            ? Constants.NO_TRADE
            : new BuyPropositionMessage(unit.getGame(), reply).getGold();
    }
,
(startLine=1108 endLine=1116 srcPath=/root/NewExperiment/freecolFilter/01595/src/net/sf/freecol/common/networking/ServerAPI.java)
                               Goods goods, int gold) {
        Element reply = askExpecting(unit.getGame(),
            new SellPropositionMessage(unit, settlement, goods, gold),
            SellPropositionMessage.getTagName());
        return (reply == null
            || !SellPropositionMessage.getTagName().equals(reply.getTagName()))
            ? Constants.NO_TRADE
            : new SellPropositionMessage(unit.getGame(), reply).getGold();
    }
,
>
, <(startLine=2254 endLine=2267 srcPath=/root/NewExperiment/freecolFilter/01345/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiu : aiUnits) {
            final Unit unit = aiu.getUnit();
            final Mission old = aiu.getMission();
            if (unit == null || unit.isDisposed()
                || old instanceof TransportMission) continue;
            lb.add("\n  ", unit, " ");
            try {
                Mission mission = aiu.doMission(lb);
                if (mission != old) aiu.changeMission(mission, lb);
            } catch (Exception e) {
                logger.log(Level.WARNING, "doMissions failed for: " + aiu, e);
            }
            if (unit.getMovesLeft() > 0) result.add(aiu);
        }
,
(startLine=2269 endLine=2282 srcPath=/root/NewExperiment/freecolFilter/01345/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiu : aiUnits) {
            final Unit unit = aiu.getUnit();
            final Mission old = aiu.getMission();
            if (unit == null || unit.isDisposed()
                || !(old instanceof TransportMission)) continue;
            lb.add("\n  ", unit, " ");
            try {
                Mission mission = aiu.doMission(lb);
                if (mission != old) aiu.changeMission(mission, lb);
            } catch (Exception e) {
                logger.log(Level.WARNING, "doMissions failed for: " + aiu, e);
            }
            if (!unit.isDisposed() && unit.getMovesLeft() > 0) result.add(aiu);
        }
,
(startLine=476 endLine=488 srcPath=/root/NewExperiment/freecolFilter/01345/src/net/sf/freecol/server/ai/AIPlayer.java)
        for (AIUnit aiu : aiUnits) {
            final Unit unit = aiu.getUnit();
            if (unit == null || unit.isDisposed()) continue;
            lb.add("\n  ", unit, " ");
            try {
                Mission old = aiu.getMission();
                Mission mission = aiu.doMission(lb);
                if (mission != old) aiu.changeMission(mission, lb);
            } catch (Exception e) {
                logger.log(Level.WARNING, "doMissions failed for: " + aiu, e);
            }
            if (!unit.isDisposed() && unit.getMovesLeft() > 0) result.add(aiu);
        }
,
>
, <(startLine=742 endLine=758 srcPath=/root/NewExperiment/freecolFilter/01035/src/net/sf/freecol/common/model/Map.java)
    private GoalDecider getLocationGoalDecider(final Location target) {
        return new GoalDecider() {
            private PathNode best = null;

            public PathNode getGoal() { return best; }
            public boolean hasSubGoals() { return false; }
            public boolean check(Unit u, PathNode path) {
                if (path.getLocation() == target) {
                    if (best == null || path.getCost() < best.getCost()) {
                        best = path;
                    }
                    return true;
                }
                return false;
            }
        };
    }
,
(startLine=765 endLine=782 srcPath=/root/NewExperiment/freecolFilter/01035/src/net/sf/freecol/common/model/Map.java)
    private GoalDecider getHighSeasGoalDecider() {
        return new GoalDecider() {
            private PathNode best = null;

            public PathNode getGoal() { return best; }
            public boolean hasSubGoals() { return false; }
            public boolean check(Unit u, PathNode path) {
                if (path.getTile() != null
                    && path.getTile().isDirectlyHighSeasConnected()) {
                    if (best == null || path.getCost() < best.getCost()) {
                        best = path;
                    }
                    return true;
                }
                return false;
            }
        };
    }
,
>
, <(startLine=190 endLine=221 srcPath=/root/NewExperiment/freecolFilter/00115/src/net/sf/freecol/server/networking/Server.java)
    public void shutdown() {
        running = false;

        try {
            serverSocket.close();
        } catch (IOException e) {
            logger.warning("Could not close the server socket!");
        }

        synchronized (shutdownLock) {
            // Nothing to do here... just waiting for the server thread to finish.
            // For more info see the run() method
        }

        Iterator connectionsIterator = connections.values().iterator();
        while (connectionsIterator.hasNext()) {
            Connection c = (Connection) connectionsIterator.next();

            try {
                if (c != null) {
                    //c.reallyClose();
                    c.close();
                }
            } catch (IOException e) {
                logger.warning("Could not close the connection.");
            }
        }
        
        freeColServer.removeFromMetaServer();
        
        logger.info("Server shutdown.");
    }
,
(startLine=170 endLine=194 srcPath=/root/NewExperiment/freecolFilter/00115/src/net/sf/freecol/metaserver/MetaServer.java)
    public void shutdown() {
        running = false;

        try {
            serverSocket.close();
        } catch (IOException e) {
            logger.warning("Could not close the server socket!");
        }

        Iterator connectionsIterator = connections.values().iterator();
        while (connectionsIterator.hasNext()) {
            Connection c = (Connection) connectionsIterator.next();

            try {
                if (c != null) {
                    //c.reallyClose();
                    c.close();
                }
            } catch (IOException e) {
                logger.warning("Could not close the connection.");
            }
        }
        
        logger.info("Server shutdown.");
    }
,
>
, <(startLine=192 endLine=219 srcPath=/root/NewExperiment/freecolFilter/00660/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    protected void rearrangeWorkersInColonies() {
        logger.finest("Entering method rearrangeWorkersInColonies");
        if (!getPlayer().isEuropean()) {
            return;
        }
        Iterator<AIColony> ci = getAIColonyIterator();
        while (ci.hasNext()) {
            AIColony c = ci.next();
            ArrayList<Tile> oldWorkTiles = new ArrayList<Tile>();
            for (ColonyTile colonyTile : c.getColony().getColonyTiles()) {
                if (colonyTile.getUnit() != null) {
                    oldWorkTiles.add(colonyTile.getWorkTile());
                }
            }

            c.rearrangeWorkers(getConnection());

            ArrayList<Tile> tilesToUpdate = new ArrayList<Tile>();
            for (ColonyTile colonyTile : c.getColony().getColonyTiles()) {
                boolean isOccupied = colonyTile.getUnit() != null;
                boolean wasOccupied = oldWorkTiles.remove(colonyTile.getWorkTile());
                if (isOccupied != wasOccupied) {
                    tilesToUpdate.add(colonyTile.getWorkTile());
                }
            }
            sendUpdatedTilesToAll(tilesToUpdate);
        }
    }
,
(startLine=799 endLine=823 srcPath=/root/NewExperiment/freecolFilter/00660/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    private void rearrangeWorkersInColonies() {
        logger.finest("Entering method rearrangeWorkersInColonies");
        Iterator<AIColony> ci = getAIColonyIterator();
        while (ci.hasNext()) {
            AIColony c = ci.next();
            ArrayList<Tile> oldWorkTiles = new ArrayList<Tile>();
            for (ColonyTile colonyTile : c.getColony().getColonyTiles()) {
                if (colonyTile.getUnit() != null) {
                    oldWorkTiles.add(colonyTile.getWorkTile());
                }
            }

            c.rearrangeWorkers(getConnection());
            
            ArrayList<Tile> tilesToUpdate = new ArrayList<Tile>();
            for (ColonyTile colonyTile : c.getColony().getColonyTiles()) {
                boolean isOccupied = colonyTile.getUnit() != null;
                boolean wasOccupied = oldWorkTiles.remove(colonyTile.getWorkTile());
                if (isOccupied != wasOccupied) {
                    tilesToUpdate.add(colonyTile.getWorkTile());
                }
            }
            sendUpdatedTilesToAll(tilesToUpdate);
        }
    }
,
(startLine=937 endLine=965 srcPath=/root/NewExperiment/freecolFilter/00660/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void rearrangeWorkersInColonies() {
        logger.finest("Entering method rearrangeWorkersInColonies");
        if (!getPlayer().isEuropean()) {
            return;
        }
        Iterator<AIColony> ci = getAIColonyIterator();
        while (ci.hasNext()) {
            AIColony c = ci.next();
            if (c.getColony().getOwner() != getPlayer()) continue;
            ArrayList<Tile> oldWorkTiles = new ArrayList<Tile>();
            for (ColonyTile colonyTile : c.getColony().getColonyTiles()) {
                if (colonyTile.getUnit() != null) {
                    oldWorkTiles.add(colonyTile.getWorkTile());
                }
            }

            c.rearrangeWorkers(getConnection());

            ArrayList<Tile> tilesToUpdate = new ArrayList<Tile>();
            for (ColonyTile colonyTile : c.getColony().getColonyTiles()) {
                boolean isOccupied = colonyTile.getUnit() != null;
                boolean wasOccupied = oldWorkTiles.remove(colonyTile.getWorkTile());
                if (isOccupied != wasOccupied) {
                    tilesToUpdate.add(colonyTile.getWorkTile());
                }
            }
            sendUpdatedTilesToAll(tilesToUpdate);
        }
    }
,
>
, <(startLine=370 endLine=382 srcPath=/root/NewExperiment/freecolFilter/00242/src/net/sf/freecol/common/model/Map.java)
                    public int compare(PathNode o, PathNode p) {
                        int i = o.getF() - p.getF();
                        if (i != 0) {
                            return i;
                        } else {
                            i = o.getTile().getX() - p.getTile().getX();
                            if (i != 0) {
                                return i;
                            } else {
                                return o.getTile().getY() - p.getTile().getY();
                            }
                        }
                    }
,
(startLine=704 endLine=716 srcPath=/root/NewExperiment/freecolFilter/00242/src/net/sf/freecol/common/model/Map.java)
                    public int compare(PathNode o, PathNode p) {
                        int i = o.getCost() - p.getCost();
                        if (i != 0) {
                            return i;
                        } else {
                            i = o.getTile().getX() - p.getTile().getX();
                            if (i != 0) {
                                return i;
                            } else {
                                return o.getTile().getY() - p.getTile().getY();
                            }
                        }
                    }
,
>
, <(startLine=28 endLine=42 srcPath=/root/NewExperiment/freecolFilter/01086/test/src/net/sf/freecol/common/model/TileImprovementTest.java)
    public void testRiverNoExtras() {

        TileImprovementStyle style = TileImprovementStyle.getInstance("0102");
        assertEquals("0102", style.getString());
        assertEquals("0101", style.getMask());
        assertFalse(style.isConnectedTo(Direction.N));
        assertFalse(style.isConnectedTo(Direction.NE));
        assertFalse(style.isConnectedTo(Direction.E));
        assertTrue(style.isConnectedTo(Direction.SE));
        assertFalse(style.isConnectedTo(Direction.S));
        assertFalse(style.isConnectedTo(Direction.SW));
        assertFalse(style.isConnectedTo(Direction.W));
        assertTrue(style.isConnectedTo(Direction.NW));

    }
,
(startLine=44 endLine=59 srcPath=/root/NewExperiment/freecolFilter/01086/test/src/net/sf/freecol/common/model/TileImprovementTest.java)
    public void testRiverWithExtras() {

        // has three characters of additional style information
        TileImprovementStyle style = TileImprovementStyle.getInstance("7170_&?");
        assertEquals("7170_&?", style.getString());
        assertEquals("1110", style.getMask());
        assertFalse(style.isConnectedTo(Direction.N));
        assertTrue(style.isConnectedTo(Direction.NE));
        assertFalse(style.isConnectedTo(Direction.E));
        assertTrue(style.isConnectedTo(Direction.SE));
        assertFalse(style.isConnectedTo(Direction.S));
        assertTrue(style.isConnectedTo(Direction.SW));
        assertFalse(style.isConnectedTo(Direction.W));
        assertFalse(style.isConnectedTo(Direction.NW));

    }
,
(startLine=61 endLine=76 srcPath=/root/NewExperiment/freecolFilter/01086/test/src/net/sf/freecol/common/model/TileImprovementTest.java)
    public void testAllFrills() {

        // has three characters of additional style information
        TileImprovementStyle style = TileImprovementStyle.getInstance("7170110X_&?");
        assertEquals("7170110X_&?", style.getString());
        assertEquals("11101101", style.getMask());
        assertTrue(style.isConnectedTo(Direction.N));
        assertTrue(style.isConnectedTo(Direction.NE));
        assertTrue(style.isConnectedTo(Direction.E));
        assertFalse(style.isConnectedTo(Direction.SE));
        assertTrue(style.isConnectedTo(Direction.S));
        assertTrue(style.isConnectedTo(Direction.SW));
        assertFalse(style.isConnectedTo(Direction.W));
        assertTrue(style.isConnectedTo(Direction.NW));

    }
,
>
, <(startLine=82 endLine=116 srcPath=/root/NewExperiment/freecolFilter/00642/src/net/sf/freecol/client/gui/CanvasMouseMotionListener.java)
    public void mouseMoved(MouseEvent e) {
      
    	if (e.getComponent().isEnabled() && 
   			canvas.getClient().getClientOptions().getBoolean(ClientOptions.AUTO_SCROLL)) {
				auto_scroll(e.getX(), e.getY());
        } else if (scrollThread != null) {
            scrollThread.stopScrolling();
            scrollThread = null;
        }

        if (gui.isGotoStarted()) {
            if (gui.getActiveUnit() == null) {
                gui.stopGoto();
            }
            
            Map.Position p = gui.convertToMapCoordinates(e.getX(), e.getY());

            if (p == null || !map.isValid(p)) {
                return;
            }
        
            Tile tile = map.getTile(p);
            if (tile != null) {
                if (lastTile != tile) {
                    lastTile = tile;
                    if (gui.getActiveUnit().getTile() != tile) {
                        PathNode dragPath = gui.getActiveUnit().findPath(tile);
                        gui.setGotoPath(dragPath);
                    } else {
                        gui.setGotoPath(null);
                    }
                } 
            }
        }
    }
,
(startLine=123 endLine=164 srcPath=/root/NewExperiment/freecolFilter/00642/src/net/sf/freecol/client/gui/CanvasMouseMotionListener.java)
    public void mouseDragged(MouseEvent e) {
        Map.Position p = gui.convertToMapCoordinates(e.getX(), e.getY());

        if (e.getComponent().isEnabled() &&
			 canvas.getClient().getClientOptions().getBoolean(ClientOptions.MAP_SCROLL_ON_DRAG)) {
				drag_scroll(e.getX(), e.getY());
        } else if (scrollThread != null) {
            scrollThread.stopScrolling();
            scrollThread = null;
        }

        if (p == null || !map.isValid(p)) {
            return;
        }

        Tile tile = map.getTile(p);
        if (tile != null && 
            (e.getModifiers() & MouseEvent.BUTTON1_MASK) == MouseEvent.BUTTON1_MASK) {
            // only perform the goto for the left mouse button
            if (gui.isGotoStarted()) {
                if (gui.getActiveUnit() == null) {
                    gui.stopGoto();
                } else { 
                    if (lastTile != tile) {
                        lastTile = tile;
                        if (gui.getActiveUnit().getTile() != tile) {
                            PathNode dragPath = gui.getActiveUnit().findPath(tile);
                            // ONLY FOR DEBUGGING: PathNode dragPath =
                            // map.findPath(gui.getActiveUnit(),
                            // gui.getActiveUnit().getTile(), tile, (Unit)
                            // gui.getActiveUnit().getLocation());
                            gui.setGotoPath(dragPath);
                        } else {
                            gui.setGotoPath(null);
                        }
                    }
                }
            } else {
                gui.startGoto();
            }
        }
    }
,
>
, <(startLine=503 endLine=517 srcPath=/root/NewExperiment/freecolFilter/00452/src/net/sf/freecol/server/ai/AIPlayer.java)
                if (stance != null && tension != null) {
                    if (p.getREFPlayer() == getPlayer() && p.getPlayerType() == PlayerType.REBEL) {
                        tension.modify(1000);
                    }
                    if (stance != Stance.WAR &&
                        tension.getLevel() == Tension.Level.HATEFUL) {
                        getPlayer().changeRelationWithPlayer(p, Stance.WAR);
                    } else if (stance == Stance.WAR
                               && tension.getLevel().compareTo(Tension.Level.CONTENT) <= 0) {
                        getPlayer().changeRelationWithPlayer(p, Stance.CEASE_FIRE);
                    } else if (stance == Stance.CEASE_FIRE
                               && tension.getLevel().compareTo(Tension.Level.HAPPY) <= 0) {
                        getPlayer().changeRelationWithPlayer(p, Stance.PEACE);
                    }
                }
,
(startLine=156 endLine=170 srcPath=/root/NewExperiment/freecolFilter/00452/src/net/sf/freecol/server/ai/NewAIPlayer.java)
                if (stance != null && tension != null) {
                    if (p.getREFPlayer() == getPlayer() && p.getPlayerType() == PlayerType.REBEL) {
                        tension.modify(1000);
                    }
                    if (stance != Stance.WAR &&
                        tension.getLevel() == Tension.Level.HATEFUL) {
                        getPlayer().changeRelationWithPlayer(p, Stance.WAR);
                    } else if (stance == Stance.WAR
                               && tension.getLevel().compareTo(Tension.Level.CONTENT) <= 0) {
                        getPlayer().changeRelationWithPlayer(p, Stance.CEASE_FIRE);
                    } else if (stance == Stance.CEASE_FIRE
                               && tension.getLevel().compareTo(Tension.Level.HAPPY) <= 0) {
                        getPlayer().changeRelationWithPlayer(p, Stance.PEACE);
                    }
                }
,
>
, <(startLine=214 endLine=232 srcPath=/root/NewExperiment/freecolFilter/00424/src/net/sf/freecol/common/option/RangeOption.java)
        } else {
            setValue(Integer.parseInt(defaultValue));
            while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                if (in.getLocalName() == "rangeValue") {
                    String label = in.getAttributeValue(null, "label");
                    final String rangeValue = in.getAttributeValue(null, "value");
                    if (this.localizedLabels) {
                        label = Messages.message(label);
                    }
                    rangeValues.put(label, Integer.parseInt(rangeValue));
                } else {
                    throw new XMLStreamException("Unknow child \"" + in.getLocalName() + "\" in a \""
                            + getXMLElementTagName() + "\".");
                }
                in.nextTag();
            }

            options = rangeValues.keySet().toArray(new String[] {});
        }
,
(startLine=231 endLine=249 srcPath=/root/NewExperiment/freecolFilter/00424/src/net/sf/freecol/common/option/SelectOption.java)
        } else {
            setValue(Integer.parseInt(defaultValue));
            while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                if (in.getLocalName() == "selectValue") {
                    String label = in.getAttributeValue(null, "label");
                    final String selectValue = in.getAttributeValue(null, "value");
                    if (this.localizedLabels) {
                        label = Messages.message(label);
                    }
                    selectValues.put(label, Integer.parseInt(selectValue));
                } else {
                    throw new XMLStreamException("Unknow child \"" + in.getLocalName() + "\" in a \""
                            + getXMLElementTagName() + "\".");
                }
                in.nextTag();
            }

            options = selectValues.keySet().toArray(new String[] {});
        }
,
>
, <(startLine=242 endLine=256 srcPath=/root/NewExperiment/freecolFilter/00238/src/net/sf/freecol/client/gui/panel/ReportTurnPanel.java)
        if (data != null) {
            for (int i = 0; i < data.length; i++) {
                if (data[i] == null || data[i].length != 2) {
                    logger.warning("Data has a wrong format for message: " + message);
                } else if (data[i][0] == null || data[i][1] == null) {
                    logger.warning("Data in model message is 'null': " + message + ", " + data[i][0] + ", "
                            + data[i][1]);
                } else if (data[i][0].equals("%colony%")) {
                    colonyName = data[i][1];
                    continue;
                } else {
                    text = text.replaceAll(data[i][0], data[i][1]);
                }
            }
        }
,
(startLine=95 endLine=113 srcPath=/root/NewExperiment/freecolFilter/00238/src/net/sf/freecol/client/gui/i18n/Messages.java)
    public static String message(String messageId, String[][] data) {

        String message = Messages.message(messageId);

        if (data != null) {
            for (int i = 0; i < data.length; i++) {
                if (data[i] == null || data[i].length != 2) {
                    logger.warning("Data has a wrong format for message: " + message);
                } else if (data[i][0] == null || data[i][1] == null) {
                    logger.warning("Data in model message is 'null': " + message + ", " + data[i][0] + ", "
                            + data[i][1]);
                } else {
                    message = message.replaceAll(data[i][0], data[i][1]);
                }
            }
        }

        return message;
    }
,
>
, <(startLine=1826 endLine=1838 srcPath=/root/NewExperiment/freecolFilter/00731/src/net/sf/freecol/server/control/InGameController.java)
                                                FreeColGameObject o2) {
            java.util.Map<String, TransactionSession> base
                = transactionSessions.get(o1.getId());
            if (base == null) {
                base = new HashMap<String, TransactionSession>();
                transactionSessions.put(o1.getId(), base);
            } else {
                if (base.containsKey(o2.getId())) base.remove(o2.getId());
            }
            TransactionSession session = new TransactionSession();
            base.put(o2.getId(), session);
            return session;
        }
,
(startLine=1849 endLine=1862 srcPath=/root/NewExperiment/freecolFilter/00731/src/net/sf/freecol/server/control/InGameController.java)
                                              FreeColGameObject o2) {
            java.util.Map<String, TransactionSession> base
                = transactionSessions.get(o1.getId());
            if (base == null) {
                base = new HashMap<String, TransactionSession>();
                transactionSessions.put(o1.getId(), base);
            }
            TransactionSession session = base.get(o2.getId());
            if (session == null) {
                session = new TransactionSession();
                base.put(o2.getId(), session);
            }
            return session;
        }
,
>
, <(startLine=681 endLine=688 srcPath=/root/NewExperiment/freecolFilter/00590/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
            if (production.size() > 1) {
                detailPanel.add(getGoodsButton(goods.getType(), goods.getAmount()),
                                "span, split " + production.size());
                for (int index = 1; index < production.size(); index++) {
                    goods = production.get(index);
                    detailPanel.add(getGoodsButton(goods.getType(), goods.getAmount()));
                }
            } else {
,
(startLine=870 endLine=877 srcPath=/root/NewExperiment/freecolFilter/00590/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
            if (type.getGoodsRequired().size() > 1) {
                detailPanel.add(getGoodsButton(goods.getType(), goods.getAmount()),
                                "span, split " + type.getGoodsRequired().size());
                for (int index = 1; index < type.getGoodsRequired().size(); index++) {
                    goods = type.getGoodsRequired().get(index);
                    detailPanel.add(getGoodsButton(goods.getType(), goods.getAmount()));
                }
            } else {
,
>
, <(startLine=1720 endLine=1763 srcPath=/root/NewExperiment/freecolFilter/00190/src/net/sf/freecol/common/model/Unit.java)
    public void setArmed(boolean b, boolean isCombat) {
        if (isCombat) {
            armed = b; // No questions asked.
            return;
        }

        setMovesLeft(0);

        if (b) {
            if (isPioneer()) {
                setNumberOfTools(0);
            }

            if (isMissionary()) {
                setMissionary(false);
            }
        }

        if ((b) && (!armed)) {
            if (getGoodsDumpLocation() != null) {
                if (getGoodsDumpLocation().getGoodsCount(Goods.MUSKETS) < 50) {
                    return;
                }

                getGoodsDumpLocation().removeGoods(Goods.MUSKETS, 50);
                armed = true;
            } else if (isInEurope()) {
                getGame().getMarket().buy(Goods.MUSKETS, 50, getOwner());
                armed = true;
            } else {
                logger.warning("Attempting to arm a soldier outside of a colony or Europe!");
            }
        } else if ((!b) && (armed)) {
            armed = false;

            if (getGoodsDumpLocation() != null) {
                getGoodsDumpLocation().addGoods(Goods.MUSKETS, 50);
            } else if (isInEurope()) {
                getGame().getMarket().sell(Goods.MUSKETS, 50, getOwner());
            } else {
                throw new IllegalStateException();
            }
        }
    }
,
(startLine=1787 endLine=1828 srcPath=/root/NewExperiment/freecolFilter/00190/src/net/sf/freecol/common/model/Unit.java)
    public void setMounted(boolean b, boolean isCombat) {
        if (isCombat) {
            mounted = b; // No questions asked.
            return;
        }

        setMovesLeft(0);

        if (b) {
            if (isPioneer()) {
                setNumberOfTools(0);
            }

            if (isMissionary()) {
                setMissionary(false);
            }
        }

        if ((b) && (!mounted)) {
            if (getGoodsDumpLocation() != null) {
                if (getGoodsDumpLocation().getGoodsCount(Goods.HORSES) < 50) {
                    throw new IllegalStateException();
                }

                getGoodsDumpLocation().removeGoods(Goods.HORSES, 50);
                mounted = true;
            } else if (isInEurope()) {
                getGame().getMarket().buy(Goods.HORSES, 50, getOwner());
                mounted = true;
            } else {
                logger.warning("Attempting to mount a colonist outside of a colony or Europe!");
            }
        } else if ((!b) && (mounted)) {
            mounted = false;

            if (getGoodsDumpLocation() != null) {
                getGoodsDumpLocation().addGoods(Goods.HORSES, 50);
            } else if (isInEurope()) {
                getGame().getMarket().sell(Goods.HORSES, 50, getOwner());
            }
        }
    }
,
>
, <(startLine=3092 endLine=3107 srcPath=/root/NewExperiment/freecolFilter/00234/src/net/sf/freecol/common/model/Unit.java)
        if (attacker.isNaval()) {
            int goodsCount = attacker.getGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                factor = .125f * (8 - goodsCount);
                result.add(Modifier.createMultiplicativeModifier("modifiers.cargoPenalty", factor));
                totalFactor *= factor;
            }
            if (attacker.getType() == Unit.PRIVATEER && 
                attacker.getOwner().hasFather(FoundingFather.FRANCIS_DRAKE)) {
                // Drake grants 50% attack bonus
                factor = 1.5f;
                result.add(Modifier.createMultiplicativeModifier("modifiers.drake", factor));
                totalFactor *= factor;
            }
        } else {
,
(startLine=3223 endLine=3238 srcPath=/root/NewExperiment/freecolFilter/00234/src/net/sf/freecol/common/model/Unit.java)
        if (defender.isNaval()) {
            int goodsCount = defender.getGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                factor = (8 - goodsCount) * .125f;
                result.add(Modifier.createMultiplicativeModifier("modifiers.cargoPenalty", factor));
                totalFactor *= factor;
            }
            if (defender.getType() == Unit.PRIVATEER && 
                defender.getOwner().hasFather(FoundingFather.FRANCIS_DRAKE)) {
                // Drake grants 50% attack bonus
                factor = 1.5f;
                result.add(Modifier.createMultiplicativeModifier("modifiers.drake", factor));
                totalFactor *= factor;
            }
        } else {
,
>
, <(startLine=508 endLine=517 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askUpdateCurrentStop(Unit unit) {
        Client client = freeColClient.getClient();
        UpdateCurrentStopMessage message = new UpdateCurrentStopMessage(unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=624 endLine=633 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askLoadCargo(Goods goods, Unit carrier) {
        Client client = freeColClient.getClient();
        LoadCargoMessage message = new LoadCargoMessage(goods, carrier);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=765 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askUnloadCargo(Goods goods) {
        Client client = freeColClient.getClient();
        UnloadCargoMessage message = new UnloadCargoMessage(goods);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1097 endLine=1107 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askDeclare(String nation, String country) {
        Client client = freeColClient.getClient();
        DeclareIndependenceMessage message
            = new DeclareIndependenceMessage(nation, country);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1176 endLine=1185 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askRename(FreeColGameObject object, String name) {
        RenameMessage message = new RenameMessage(object, name);
        Client client = freeColClient.getClient();
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1379 endLine=1388 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askBuildColony(String name, Unit unit) {
        Client client = freeColClient.getClient();
        BuildColonyMessage message = new BuildColonyMessage(name, unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1397 endLine=1406 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askJoinColony(Unit unit, Colony colony) {
        Client client = freeColClient.getClient();
        JoinColonyMessage message = new JoinColonyMessage(colony, unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1443 endLine=1452 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askAbandonColony(Colony colony) {
        AbandonColonyMessage message = new AbandonColonyMessage(colony);
        Client client = freeColClient.getClient();
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1482 endLine=1492 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askSetDestination(Unit unit, Location destination) {
        SetDestinationMessage message
            = new SetDestinationMessage(unit, destination);
        Client client = freeColClient.getClient();
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1518 endLine=1527 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askEmigrate(int slot) {
        Client client = freeColClient.getClient();
        EmigrateUnitMessage message = new EmigrateUnitMessage(slot);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1840 endLine=1849 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private Element askMove(Unit unit, Direction direction) {
        Client client = freeColClient.getClient();
        MoveMessage message = new MoveMessage(unit, direction);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return null;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return reply;
    }
,
(startLine=1860 endLine=1870 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
                                   boolean accept) {
        Client client = freeColClient.getClient();
        NewLandNameMessage message = new NewLandNameMessage(name,
                                                            welcomer, accept);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1879 endLine=1889 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askNewRegionName(String name, Unit unit) {
        Client client = freeColClient.getClient();
        NewRegionNameMessage message
            = new NewRegionNameMessage(name, unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1958 endLine=1967 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askMoveToAmerica(Unit unit) {
        Client client = freeColClient.getClient();
        MoveToAmericaMessage message = new MoveToAmericaMessage(unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=1998 endLine=2007 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askMoveToEurope(Unit unit) {
        Client client = freeColClient.getClient();
        MoveToEuropeMessage message = new MoveToEuropeMessage(unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=2092 endLine=2102 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askDemandTribute(Unit unit, Direction direction) {
        Client client = freeColClient.getClient();
        DemandTributeMessage message
            = new DemandTributeMessage(unit, direction);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=2212 endLine=2221 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private String askAttack(Unit unit, Direction direction) {
        Client client = freeColClient.getClient();
        AttackMessage message = new AttackMessage(unit, direction);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return null;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return reply.getAttribute("loot");
    }
,
(startLine=2247 endLine=2256 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private void askLoot(Unit winner, Unit loser, List<Goods> goods) {
        Client client = freeColClient.getClient();
        LootCargoMessage message = new LootCargoMessage(winner, loser.getId(),
                                                        goods);
        Element reply = askExpecting(client, message.toXMLElement(), null);

        if (reply == null) return;
        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
    }
,
(startLine=2405 endLine=2414 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askSkill(Unit unit, Direction direction) {
        Client client = freeColClient.getClient();
        AskSkillMessage message = new AskSkillMessage(unit, direction);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=2423 endLine=2432 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askLearnSkill(Unit unit, Direction direction) {
        Client client = freeColClient.getClient();
        LearnSkillMessage message = new LearnSkillMessage(unit, direction);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=2506 endLine=2516 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private String askScoutSpeak(Unit unit, Direction direction) {
        Client client = freeColClient.getClient();
        ScoutIndianSettlementMessage message
            = new ScoutIndianSettlementMessage(unit, direction);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return null;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return reply.getAttribute("result");
    }
,
(startLine=2601 endLine=2611 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
                                  boolean denounce) {
        Client client = freeColClient.getClient();
        MissionaryMessage message
            = new MissionaryMessage(unit, direction, denounce);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=2930 endLine=2940 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askCloseTransactionSession(Unit unit, Settlement settlement) {
        Client client = freeColClient.getClient();
        CloseTransactionMessage message
            = new CloseTransactionMessage(unit, settlement);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3062 endLine=3071 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
                                         Goods goods, int gold) {
        Client client = freeColClient.getClient();
        BuyMessage message = new BuyMessage(unit, settlement, goods, gold);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3163 endLine=3172 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
                                        Goods goods, int gold) {
        Client client = freeColClient.getClient();
        SellMessage message = new SellMessage(unit, settlement, goods, gold);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3199 endLine=3209 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
                                               Goods goods) {
        Client client = freeColClient.getClient();
        DeliverGiftMessage message
            = new DeliverGiftMessage(unit, settlement, goods);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3274 endLine=3283 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askClaimLand(Tile tile, Colony colony, int price) {
        Client client = freeColClient.getClient();
        ClaimLandMessage message = new ClaimLandMessage(tile, colony, price);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3337 endLine=3347 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askCashInTreasureTrain(Unit unit) {
        Client client = freeColClient.getClient();
        CashInTreasureTrainMessage message
            = new CashInTreasureTrainMessage(unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3410 endLine=3419 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askEmbark(Unit unit, Unit carrier, Direction direction) {
        Client client = freeColClient.getClient();
        EmbarkMessage message = new EmbarkMessage(unit, carrier, direction);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3465 endLine=3474 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askDisembark(Unit unit) {
        Client client = freeColClient.getClient();
        DisembarkMessage message = new DisembarkMessage(unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3676 endLine=3685 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askBuyGoods(Unit carrier, GoodsType type, int amount) {
        Client client = freeColClient.getClient();
        BuyGoodsMessage message = new BuyGoodsMessage(carrier, type, amount);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3755 endLine=3764 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askSellGoods(Goods goods, Unit carrier) {
        Client client = freeColClient.getClient();
        SellGoodsMessage message = new SellGoodsMessage(goods, carrier);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3813 endLine=3822 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askClearSpeciality(Unit unit) {
        Client client = freeColClient.getClient();
        ClearSpecialityMessage message = new ClearSpecialityMessage(unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3857 endLine=3866 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askDisbandUnit(Unit unit) {
        Client client = freeColClient.getClient();
        DisbandUnitMessage message = new DisbandUnitMessage(unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3906 endLine=3915 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askSetGoodsLevels(Colony colony, ExportData data) {
        Client client = freeColClient.getClient();
        SetGoodsLevelsMessage message = new SetGoodsLevelsMessage(colony, data);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=3973 endLine=3982 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askEquipUnit(Unit unit, EquipmentType type, int amount) {
        Client client = freeColClient.getClient();
        EquipUnitMessage message = new EquipUnitMessage(unit, type, amount);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=4028 endLine=4037 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askWork(Unit unit, WorkLocation workLocation) {
        Client client = freeColClient.getClient();
        WorkMessage message = new WorkMessage(unit, workLocation);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=4076 endLine=4085 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askPutOutsideColony(Unit unit) {
        Client client = freeColClient.getClient();
        PutOutsideColonyMessage message = new PutOutsideColonyMessage(unit);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=4122 endLine=4132 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askChangeWorkType(Unit unit, GoodsType workType) {
        Client client = freeColClient.getClient();
        ChangeWorkTypeMessage message = new ChangeWorkTypeMessage(unit,
                                                                  workType);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=4173 endLine=4183 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
                                                 TileImprovementType type) {
        Client client = freeColClient.getClient();
        ChangeWorkImprovementTypeMessage message
            = new ChangeWorkImprovementTypeMessage(unit, type);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=4237 endLine=4246 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askChangeState(Unit unit, UnitState state) {
        Client client = freeColClient.getClient();
        ChangeStateMessage message = new ChangeStateMessage(unit, state);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=4287 endLine=4297 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askAssignTeacher(Unit student, Unit teacher) {
        Client client = freeColClient.getClient();
        AssignTeacherMessage message
            = new AssignTeacherMessage(student, teacher);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=4323 endLine=4333 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
                                     List<BuildableType> buildQueue) {
        Client client = freeColClient.getClient();
        SetBuildQueueMessage message = new SetBuildQueueMessage(colony,
                                                                buildQueue);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=4425 endLine=4434 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askTrainUnitInEurope(UnitType type) {
        Client client = freeColClient.getClient();
        TrainUnitInEuropeMessage message = new TrainUnitInEuropeMessage(type);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=4475 endLine=4484 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askPayForBuilding(Colony colony) {
        Client client = freeColClient.getClient();
        PayForBuildingMessage message = new PayForBuildingMessage(colony);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
(startLine=4612 endLine=4621 srcPath=/root/NewExperiment/freecolFilter/00776/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askPayArrears(GoodsType type) {
        Client client = freeColClient.getClient();
        PayArrearsMessage message = new PayArrearsMessage(type);
        Element reply = askExpecting(client, message.toXMLElement(), null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
>
, <(startLine=689 endLine=734 srcPath=/root/NewExperiment/freecolFilter/00568/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    private void determineStances() {
        logger.finest("Entering method determineStances");
        Player player = getPlayer();
        for (Player p : getGame().getPlayers()) {
            if(p == player){
                continue;
            }
            
            Stance stance = player.getStance(p);
            Tension tension = player.getTension(p);
            // not contacted yet
            if (stance == Stance.UNCONTACTED || tension == null) {
                continue;
            }

            // REF is always at war with rebel player
            if (p.getREFPlayer() == player && p.getPlayerType() == PlayerType.REBEL) {
                tension.modify(1000);
                if(stance != Stance.WAR){
                    player.changeRelationWithPlayer(p, Stance.WAR);
                }
                continue;
            }
            
            // Ready to go to war
            if (stance != Stance.WAR 
                    && tension.getLevel() == Tension.Level.HATEFUL) {
                player.changeRelationWithPlayer(p, Stance.WAR);
                continue;
            }
            
            // Ready to back down
            if (stance == Stance.WAR
                    && tension.getLevel().compareTo(Tension.Level.CONTENT) <= 0) {
                player.changeRelationWithPlayer(p, Stance.CEASE_FIRE);
                continue;
            }
            
            // all friends now
            if (stance == Stance.CEASE_FIRE
                    && tension.getLevel().compareTo(Tension.Level.HAPPY) <= 0) {
                player.changeRelationWithPlayer(p, Stance.PEACE);
                continue;
            }
        }
    }
,
(startLine=800 endLine=845 srcPath=/root/NewExperiment/freecolFilter/00568/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void determineStances() {
        logger.finest("Entering method determineStances");
        Player player = getPlayer();
        for (Player p : getGame().getPlayers()) {
            if(p == player){
                continue;
            }

            Stance stance = player.getStance(p);
            Tension tension = player.getTension(p);
            // not contacted yet
            if (stance == Stance.UNCONTACTED || tension == null) {
                continue;
            }

            // REF is always at war with rebel player
            if (p.getREFPlayer() == player && p.getPlayerType() == PlayerType.REBEL) {
                tension.modify(1000);
                if(stance != Stance.WAR){
                    player.changeRelationWithPlayer(p, Stance.WAR);
                }
                continue;
            }

            // Ready to go to war
            if (stance != Stance.WAR
                    && tension.getLevel() == Tension.Level.HATEFUL) {
                player.changeRelationWithPlayer(p, Stance.WAR);
                continue;
            }

            // Ready to back down
            if (stance == Stance.WAR
                    && tension.getLevel().compareTo(Tension.Level.CONTENT) <= 0) {
                player.changeRelationWithPlayer(p, Stance.CEASE_FIRE);
                continue;
            }

            // all friends now
            if (stance == Stance.CEASE_FIRE
                    && tension.getLevel().compareTo(Tension.Level.HAPPY) <= 0) {
                player.changeRelationWithPlayer(p, Stance.PEACE);
                continue;
            }
        }
    }
,
>
, <(startLine=249 endLine=270 srcPath=/root/NewExperiment/freecolFilter/00554/src/net/sf/freecol/server/ai/AIGoods.java)
    public void setTransport(AIUnit transport) {
        AIUnit oldTransport = this.transport;
        this.transport = transport;
        
        if (oldTransport != null) {
            // Remove from old carrier:
            if (oldTransport.getMission() != null
                    && oldTransport.getMission() instanceof TransportMission) {
                TransportMission tm = (TransportMission) oldTransport.getMission();
                if (tm.isOnTransportList(this)) {
                    tm.removeFromTransportList(this);
                }
            }
        }
            
        if (transport != null
                && transport.getMission() instanceof TransportMission
                && !((TransportMission) transport.getMission()).isOnTransportList(this)) {
            // Add to new carrier:
            ((TransportMission) transport.getMission()).addToTransportList(this);
        }
    }
,
(startLine=265 endLine=284 srcPath=/root/NewExperiment/freecolFilter/00554/src/net/sf/freecol/server/ai/AIUnit.java)
    public void setTransport(AIUnit transport) {
        AIUnit oldTransport = this.transport;
        this.transport = transport;

        if (oldTransport != null) {
            // Remove from old carrier:
            if (oldTransport.getMission() != null && oldTransport.getMission() instanceof TransportMission) {
                TransportMission tm = (TransportMission) oldTransport.getMission();
                if (tm.isOnTransportList(this)) {
                    tm.removeFromTransportList(this);
                }
            }
        }

        if (transport != null && transport.getMission() instanceof TransportMission
                && !((TransportMission) transport.getMission()).isOnTransportList(this)) {
            // Add to new carrier:
            ((TransportMission) transport.getMission()).addToTransportList(this);
        }
    }
,
>
, <(startLine=403 endLine=416 srcPath=/root/NewExperiment/freecolFilter/00072/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
        if (unitIcon >= 0) {
            ImageIcon icon = library.getUnitImageIcon(unitIcon);
            if (scale != 1) {
              Image image;
              image = icon.getImage();
              int width = (int) (scale * image.getWidth(this));
              int height = (int) (scale * image.getHeight(this));
              image = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
              icon = new ImageIcon(image);
            }
            button = new JButton(name, icon);
            button.setVerticalAlignment(JButton.TOP);
            button.setVerticalTextPosition(JButton.TOP);
        }
,
(startLine=174 endLine=187 srcPath=/root/NewExperiment/freecolFilter/00072/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitIcon >= 0) {
            ImageIcon icon = library.getUnitImageIcon(unitIcon);
            if (scale != 1) {
              Image image;
              image = icon.getImage();
              int width = (int) (scale * image.getWidth(this));
              int height = (int) (scale * image.getHeight(this));
              image = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
              icon = new ImageIcon(image);
            }
            label = new JLabel(labour, icon, JLabel.LEFT);
            label.setVerticalAlignment(JLabel.TOP);
            label.setVerticalTextPosition(JLabel.TOP);
        }
,
>
, <(startLine=130 endLine=137 srcPath=/root/NewExperiment/freecolFilter/01130/src/net/sf/freecol/client/gui/panel/TerrainDetailPanel.java)
            if (production.size() > 1) {
                panel.add(getGoodsButton(goods.getType(), goods.getAmount()),
                                "span, split " + production.size());
                for (int index = 1; index < production.size(); index++) {
                    goods = production.get(index);
                    panel.add(getGoodsButton(goods.getType(), goods.getAmount()));
                }
            } else {
,
(startLine=230 endLine=237 srcPath=/root/NewExperiment/freecolFilter/01130/src/net/sf/freecol/client/gui/panel/UnitDetailPanel.java)
            if (required.size() > 1) {
                panel.add(getGoodsButton(goods.getType(), goods.getAmount()),
                                "span, split " + required.size());
                for (int index = 1; index < required.size(); index++) {
                    goods = required.get(index);
                    panel.add(getGoodsButton(goods.getType(), goods.getAmount()));
                }
            } else {
,
(startLine=175 endLine=183 srcPath=/root/NewExperiment/freecolFilter/01130/src/net/sf/freecol/client/gui/panel/BuildingDetailPanel.java)
            if (required.size() > 1) {
                panel.add(getGoodsButton(goodsRequired.getType(), goodsRequired.getAmount()),
                                "span, split " + required.size());

                for (int index = 1; index < required.size(); index++) {
                    goodsRequired = required.get(index);
                    panel.add(getGoodsButton(goodsRequired.getType(), goodsRequired.getAmount()));
                }
            } else {
,
>
, <(startLine=143 endLine=159 srcPath=/root/NewExperiment/freecolFilter/00375/src/net/sf/freecol/client/gui/panel/PurchaseDialog.java)
    public void initialize() {
        Player player = freeColClient.getMyPlayer();
        if ((freeColClient.getGame() != null) && (player != null)) {
            for(int i=0; i < prices.size(); i++) {
                JButton button = buttons.get(i);
                UnitType unitType = FreeCol.getSpecification().getUnitType(button.getActionCommand());
                
                int price = player.getEurope().getUnitPrice(unitType);
                prices.get(i).setText(Integer.toString(price));
                if (price > player.getGold()) {
                    button.setEnabled(false);
                } else {
                    button.setEnabled(true);
                }
            }
        }
    }
,
(startLine=160 endLine=171 srcPath=/root/NewExperiment/freecolFilter/00375/src/net/sf/freecol/client/gui/panel/TrainDialog.java)
        for (int index = 0; index < numberOfTypes; index++) {
            JButton button = buttons.get(index);
            UnitType unitType = FreeCol.getSpecification().getUnitType(button.getActionCommand());
            
            int price = player.getEurope().getUnitPrice(unitType);
            prices.get(index).setText(String.valueOf(price));
            if (price > player.getGold()) {
                button.setEnabled(false);
            } else {
                button.setEnabled(true);
            }
        }
,
>
, <(startLine=855 endLine=874 srcPath=/root/NewExperiment/freecolFilter/00862/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
            if (buildingTypes.size() > 0) {
                detailPanel.add(localizedLabel("colopedia.goods.buildings"), "newline 20");
                if (allTypes) {
                    JButton button = getLinkButton(Messages.message("colopedia.goods.allBuildings"),
                                                   null, PanelType.BUILDINGS.toString());
                    button.addActionListener(this);
                    detailPanel.add(button, "span");
                } else {
                    int count = 0;
                    for (BuildingType building : buildingTypes) {
                        JButton label = getButton(building);
                        if (count > 0 && count % 3 == 0) {
                            detailPanel.add(label, "skip");
                        } else {
                            detailPanel.add(label);
                        }
                        count++;
                    }
                }
            }
,
(startLine=900 endLine=919 srcPath=/root/NewExperiment/freecolFilter/00862/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
            if (unitTypes.size() > 0) {
                detailPanel.add(localizedLabel("colopedia.goods.units"), "newline 20");
                if (allTypes) {
                    JButton button = getLinkButton(Messages.message("colopedia.goods.allUnits"),
                                                   null, PanelType.UNITS.toString());
                    button.addActionListener(this);
                    detailPanel.add(button, "span");
                } else {
                    int count = 0;
                    for (UnitType unit : unitTypes) {
                        JButton label = getButton(unit);
                        if (count > 0 && count % 3 == 0) {
                            detailPanel.add(label, "skip");
                        } else {
                            detailPanel.add(label);
                        }
                        count++;
                    }
                }
            }
,
>
, <(startLine=2358 endLine=2398 srcPath=/root/NewExperiment/freecolFilter/00901/src/net/sf/freecol/server/model/ServerPlayer.java)
    private void csCaptureUnit(Unit winner, Unit loser, ChangeSet cs) {
        ServerPlayer loserPlayer = (ServerPlayer) loser.getOwner();
        StringTemplate loserNation = loserPlayer.getNationName();
        StringTemplate loserLocation = loser.getLocation()
            .getLocationNameFor(loserPlayer);
        StringTemplate oldName = loser.getLabel();
        String messageId = loser.getType().getId() + ".captured";
        ServerPlayer winnerPlayer = (ServerPlayer) winner.getOwner();
        StringTemplate winnerNation = winnerPlayer.getNationName();
        StringTemplate winnerLocation = winner.getLocation()
            .getLocationNameFor(winnerPlayer);

        // Capture the unit
        UnitType type = loser.getTypeChange((winnerPlayer.isUndead())
                                            ? ChangeType.UNDEAD
                                            : ChangeType.CAPTURE, winnerPlayer);
        loser.setOwner(winnerPlayer);
        if (type != null) loser.setType(type);
        loser.setLocation(winner.getTile());
        loser.setState(Unit.UnitState.ACTIVE);

        // Winner message post-capture when it owns the loser
        cs.addMessage(See.only(winnerPlayer),
                      new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                                       messageId, loser)
                      .setDefaultId("model.unit.unitCaptured")
                      .addStringTemplate("%nation%", loserNation)
                      .addStringTemplate("%unit%", oldName)
                      .addStringTemplate("%enemyNation%", winnerNation)
                      .addStringTemplate("%enemyUnit%", winner.getLabel())
                      .addStringTemplate("%location%", winnerLocation));
        cs.addMessage(See.only(loserPlayer),
                      new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                                       messageId, loser.getTile())
                      .setDefaultId("model.unit.unitCaptured")
                      .addStringTemplate("%nation%", loserNation)
                      .addStringTemplate("%unit%", oldName)
                      .addStringTemplate("%enemyNation%", winnerNation)
                      .addStringTemplate("%enemyUnit%", winner.getLabel())
                      .addStringTemplate("%location%", loserLocation));
    }
,
(startLine=2516 endLine=2556 srcPath=/root/NewExperiment/freecolFilter/00901/src/net/sf/freecol/server/model/ServerPlayer.java)
    private void csDemoteUnit(Unit winner, Unit loser, ChangeSet cs) {
        ServerPlayer loserPlayer = (ServerPlayer) loser.getOwner();
        StringTemplate loserNation = loser.getApparentOwnerName();
        StringTemplate loserLocation = loser.getLocation()
            .getLocationNameFor(loserPlayer);
        StringTemplate oldName = loser.getLabel();
        String messageId = loser.getType().getId() + ".demoted";
        ServerPlayer winnerPlayer = (ServerPlayer) winner.getOwner();
        StringTemplate winnerNation = winner.getApparentOwnerName();
        StringTemplate winnerLocation = winner.getLocation()
            .getLocationNameFor(winnerPlayer);

        UnitType type = loser.getTypeChange(ChangeType.DEMOTION, loserPlayer);
        if (type == null || type == loser.getType()) {
            logger.warning("Demotion failed, type="
                + ((type == null) ? "null" : "same type: " + type));
            return;
        }
        loser.setType(type);

        cs.addMessage(See.only(winnerPlayer),
            new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                messageId, winner)
            .setDefaultId("model.unit.unitDemoted")
            .addStringTemplate("%nation%", loserNation)
            .addStringTemplate("%oldName%", oldName)
            .addStringTemplate("%unit%", loser.getLabel())
            .addStringTemplate("%enemyNation%", winnerPlayer.getNationName())
            .addStringTemplate("%enemyUnit%", winner.getLabel())
            .addStringTemplate("%location%", winnerLocation));
        cs.addMessage(See.only(loserPlayer),
            new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                messageId, loser)
            .setDefaultId("model.unit.unitDemoted")
            .addStringTemplate("%nation%", loserPlayer.getNationName())
            .addStringTemplate("%oldName%", oldName)
            .addStringTemplate("%unit%", loser.getLabel())
            .addStringTemplate("%enemyNation%", winnerNation)
            .addStringTemplate("%enemyUnit%", winner.getLabel())
            .addStringTemplate("%location%", loserLocation));
    }
,
(startLine=2885 endLine=2932 srcPath=/root/NewExperiment/freecolFilter/00901/src/net/sf/freecol/server/model/ServerPlayer.java)
    private void csLoseEquip(Unit winner, Unit loser, ChangeSet cs) {
        ServerPlayer loserPlayer = (ServerPlayer) loser.getOwner();
        StringTemplate loserNation = loserPlayer.getNationName();
        StringTemplate loserLocation = loser.getLocation()
            .getLocationNameFor(loserPlayer);
        StringTemplate oldName = loser.getLabel();
        ServerPlayer winnerPlayer = (ServerPlayer) winner.getOwner();
        StringTemplate winnerNation = winner.getApparentOwnerName();
        StringTemplate winnerLocation = winner.getLocation()
            .getLocationNameFor(winnerPlayer);
        EquipmentType equip
            = loser.getBestCombatEquipmentType(loser.getEquipment());

        // Remove the equipment, accounting for possible loss of
        // mobility due to horses going away.
        loser.changeEquipment(equip, -1);
        loser.setMovesLeft(Math.min(loser.getMovesLeft(),
                                    loser.getInitialMovesLeft()));

        String messageId;
        if (loser.getEquipment().isEmpty()) {
            messageId = "model.unit.unitDemotedToUnarmed";
            loser.setState(Unit.UnitState.ACTIVE);
        } else {
            messageId = loser.getType().getId() + ".demoted";
        }

        cs.addMessage(See.only(winnerPlayer),
            new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                messageId, winner)
            .setDefaultId("model.unit.unitDemoted")
            .addStringTemplate("%nation%", loserNation)
            .addStringTemplate("%oldName%", oldName)
            .addStringTemplate("%unit%", loser.getLabel())
            .addStringTemplate("%enemyNation%", winnerPlayer.getNationName())
            .addStringTemplate("%enemyUnit%", winner.getLabel())
            .addStringTemplate("%location%", winnerLocation));
        cs.addMessage(See.only(loserPlayer),
            new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                messageId, loser)
            .setDefaultId("model.unit.unitDemoted")
            .addStringTemplate("%nation%", loserNation)
            .addStringTemplate("%oldName%", oldName)
            .addStringTemplate("%unit%", loser.getLabel())
            .addStringTemplate("%enemyNation%", winnerNation)
            .addStringTemplate("%enemyUnit%", winner.getLabel())
            .addStringTemplate("%location%", loserLocation));
    }
,
>
, <(startLine=535 endLine=543 srcPath=/root/NewExperiment/freecolFilter/01503/src/net/sf/freecol/server/ai/REFAIPlayer.java)
    protected Stance determineStance(Player other) {
        final Player player = getPlayer();
        // The REF is always at war with its own rebels.
        return (other.getREFPlayer() == player)
            ? ((other.isRebel()) ? Stance.WAR : Stance.PEACE)
            : (other.atWarWith(player)) ? Stance.WAR
            : (!player.getRebels().isEmpty()) ? Stance.PEACE // Focus!
            : super.determineStance(other);
    }
,
(startLine=2282 endLine=2294 srcPath=/root/NewExperiment/freecolFilter/01503/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    protected Stance determineStance(Player other) {
        final Player player = getPlayer();
        return (other.isREF())
            ? ((player.getREFPlayer() == other) 
                // At war with our REF if rebel, otherwise at peace.
                ? ((player.isRebel()) ? Stance.WAR : Stance.PEACE)
                // Do not mess with other player's REF unless they conquer
                // their rebellious colonies.
                : ((!other.getRebels().isEmpty()) ? Stance.PEACE
                    : super.determineStance(other)))
            // Use normal stance determination for non-REF nations.
            : super.determineStance(other);
    }
,
>
, <(startLine=1413 endLine=1436 srcPath=/root/NewExperiment/freecolFilter/00517/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            for (int i = 0; i < vacantTransports.size(); i++) {
                TransportMission tm = (TransportMission) vacantTransports.get(i);
                if (t.getTransportSource().getTile() == tm.getUnit().getLocation().getTile()) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = 0;
                        break;
                    } else {
                        continue;
                    }
                }
                PathNode path = tm.getPath(t);
                if (path != null && path.getTotalTurns() <= bestTransportTurns) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0
                            && (path.getTotalTurns() < bestTransportTurns || transportSpace > bestTransportSpace)) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = path.getTotalTurns();
                    }
                }
            }
,
(startLine=2036 endLine=2059 srcPath=/root/NewExperiment/freecolFilter/00517/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            for (int i = 0; i < vacantTransports.size(); i++) {
                TransportMission tm = (TransportMission) vacantTransports.get(i);
                if (t.getTransportSource().getTile() == tm.getUnit().getLocation().getTile()) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = 0;
                        break;
                    } else {
                        continue;
                    }
                }
                PathNode path = tm.getPath(t);
                if (path != null && path.getTotalTurns() <= bestTransportTurns) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0
                            && (path.getTotalTurns() < bestTransportTurns || transportSpace > bestTransportSpace)) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = path.getTotalTurns();
                    }
                }
            }
,
(startLine=810 endLine=833 srcPath=/root/NewExperiment/freecolFilter/00517/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (int i = 0; i < vacantTransports.size(); i++) {
                TransportMission tm = (TransportMission) vacantTransports.get(i);
                if (t.getTransportSource().getTile() == tm.getUnit().getLocation().getTile()) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = 0;
                        break;
                    } else {
                        continue;
                    }
                }
                PathNode path = tm.getPath(t);
                if (path != null && path.getTotalTurns() <= bestTransportTurns) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0
                        && (path.getTotalTurns() < bestTransportTurns || transportSpace > bestTransportSpace)) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = path.getTotalTurns();
                    }
                }
            }
,
>
, <(startLine=532 endLine=540 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if (random < buildingList.size()) {
            Building building = buildingList.get(random);
            colony.addModelMessage(colony, "model.unit.buildingDamaged",
                                   new String[][] {
                                       {"%building%", building.getName()}, {"%colony%", colonyName},
                                       {"%enemyNation%", nation}, {"%enemyUnit%", unitName}},
                                   ModelMessage.DEFAULT, colony);
            building.damage();
        } else if (random < buildingList.size() + goodsList.size()) {
,
(startLine=4532 endLine=4540 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/Unit.java)
        if (random < buildingList.size()) {
            Building building = buildingList.get(random);
            colony.addModelMessage(colony, "model.unit.buildingDamaged",
                                   new String[][] {
                                       {"%building%", building.getName()}, {"%colony%", colonyName},
                                       {"%enemyNation%", nation}, {"%enemyUnit%", unitName}},
                                   ModelMessage.DEFAULT, colony);
            building.damage();
        } else if (random < buildingList.size() + goodsList.size()) {
,
>
, <(startLine=194 endLine=207 srcPath=/root/NewExperiment/freecolFilter/00261/src/net/sf/freecol/common/model/PersistentObject.java)
    protected int[] readFromArrayElement(String tagName, XMLStreamReader in, int[] arrayType) throws XMLStreamException {
        if (!in.getLocalName().equals(tagName)) {
            in.nextTag();
        }
        
        int[] array = new int[Integer.parseInt(in.getAttributeValue(null, "xLength"))];
        
        for (int x=0; x<array.length; x++) {
            array[x] = Integer.parseInt(in.getAttributeValue(null, "x" + Integer.toString(x)));
        }
        
        in.nextTag();
        return array;
    }
,
(startLine=769 endLine=782 srcPath=/root/NewExperiment/freecolFilter/00261/src/net/sf/freecol/common/model/FreeColGameObject.java)
    protected static int[] readFromArrayElement(String tagName, XMLStreamReader in, int[] arrayType) throws XMLStreamException {
        if (!in.getLocalName().equals(tagName)) {
            in.nextTag();
        }
        
        int[] array = new int[Integer.parseInt(in.getAttributeValue(null, "xLength"))];
        
        for (int x=0; x<array.length; x++) {
            array[x] = Integer.parseInt(in.getAttributeValue(null, "x" + Integer.toString(x)));
        }
        
        in.nextTag();
        return array;
    }
,
(startLine=891 endLine=902 srcPath=/root/NewExperiment/freecolFilter/00261/src/net/sf/freecol/common/model/FreeColGameObject.java)
    protected String[] readFromArrayElement(String tagName, XMLStreamReader in, String[] arrayType) throws XMLStreamException {
        if (!in.getLocalName().equals(tagName)) {
            in.nextTag();
        }
        String[] array = new String[Integer.parseInt(in.getAttributeValue(null, "xLength"))];        
        for (int x=0; x<array.length; x++) {
            array[x] = in.getAttributeValue(null, "x" + Integer.toString(x));
        }
        
        in.nextTag();
        return array;
    }
,
>
, <(startLine=345 endLine=354 srcPath=/root/NewExperiment/freecolFilter/00800/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
        throws XMLStreamException {
        String unitString = in.getAttributeValue(null, "unit");
        setAIUnit((AIUnit) getAIMain().getAIObject(unitString));
        String targetString = in.getAttributeValue(null, "target");
        target = (targetString == null) ? null
            : (Colony) getGame().getFreeColGameObject(targetString);
        String completedString = in.getAttributeValue(null, "completed");
        completed = Boolean.valueOf(completedString).booleanValue();
        in.nextTag();
    }
,
(startLine=260 endLine=272 srcPath=/root/NewExperiment/freecolFilter/00800/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
        throws XMLStreamException {
        String unitString = in.getAttributeValue(null, "unit");
        setAIUnit((AIUnit) getAIMain().getAIObject(unitString));
        String targetString = in.getAttributeValue(null, "target");
        target = (targetString == null) ? null
            : (Colony) getGame().getFreeColGameObject(targetString);
        String completedString = in.getAttributeValue(null, "completed");
        if (completedString == null) { // Remove compatibility code post 0.10.0
            completedString = in.getAttributeValue(null, "giftDelivered");
        }
        completed = Boolean.valueOf(completedString).booleanValue();
        in.nextTag();
    }
,
>
, <(startLine=596 endLine=604 srcPath=/root/NewExperiment/freecolFilter/00291/src/net/sf/freecol/common/model/UnitType.java)
                        if (goodsTypeByRef.containsKey(goodsID)) {
                            if (Xml.hasAttribute(node, "bonus")) {
                                int bonus = Xml.intAttribute(node, "bonus");
                                prodBonuses.put(goodsID, bonus);
                            } else if (Xml.hasAttribute(node, "factor")) {
                                float factor = Xml.floatAttribute(node, "factor");
                                prodFactors.put(goodsID, factor);
                            }
                        }
,
(startLine=148 endLine=156 srcPath=/root/NewExperiment/freecolFilter/00291/src/net/sf/freecol/common/model/BuildingType.java)
                    if (goodsType != null) {
                        if (Xml.hasAttribute(node, "bonus")) {
                            int bonus = Xml.intAttribute(node, "bonus");
                            prodBonuses.put(goodsType, bonus);
                        } else if (Xml.hasAttribute(node, "factor")) {
                            float factor = Xml.floatAttribute(node, "factor");
                            prodFactors.put(goodsType, factor);
                        }
                    }
,
>
, <(startLine=1657 endLine=1670 srcPath=/root/NewExperiment/freecolFilter/01362/src/net/sf/freecol/common/model/Specification.java)
                                          String... abilities) {
        List<T> result = new ArrayList<T>();
        for (FreeColGameObjectType type : allTypes.values()) {
            if (resultType.isInstance(type)) {
                for (String ability : abilities) {
                    if (type.hasAbility(ability)) {
                        result.add(resultType.cast(type));
                        break;
                    }
                }
            }
        }
        return result;
    }
,
(startLine=1681 endLine=1692 srcPath=/root/NewExperiment/freecolFilter/01362/src/net/sf/freecol/common/model/Specification.java)
                                             String... abilities) {
        List<T> result = new ArrayList<T>();
        type: for (FreeColGameObjectType type : allTypes.values()) {
            if (resultType.isInstance(type)) {
                for (String ability : abilities) {
                    if (type.hasAbility(ability)) continue type;
                }
                result.add(resultType.cast(type));
            }
        }
        return result;
    }
,
>
, <(startLine=80 endLine=91 srcPath=/root/NewExperiment/freecolFilter/01156/test/src/net/sf/freecol/common/model/PlayerTest.java)
    public void testEuropeanPlayer(Player player) {
        assertTrue(player.canBuildColonies());
        assertTrue(player.canHaveFoundingFathers());
        assertTrue(player.canMoveToEurope());
        assertTrue(player.canRecruitUnits());
        assertEquals(player.getPlayerType(), Player.PlayerType.COLONIAL);
        assertFalse(player.isDead());
        assertTrue(player.isEuropean());
        assertFalse(player.isIndian());
        assertFalse(player.isREF());
        assertEquals(2, player.getMaximumFoodConsumption());
    }
,
(startLine=93 endLine=104 srcPath=/root/NewExperiment/freecolFilter/01156/test/src/net/sf/freecol/common/model/PlayerTest.java)
    public void testIndianPlayer(Player player) {
        assertFalse(player.canBuildColonies());
        assertFalse(player.canHaveFoundingFathers());
        assertFalse(player.canMoveToEurope());
        assertFalse(player.canRecruitUnits());
        assertEquals(player.getPlayerType(), Player.PlayerType.NATIVE);
        assertFalse(player.isDead());
        assertFalse(player.isEuropean());
        assertTrue(player.isIndian());
        assertFalse(player.isREF());
        assertEquals(2, player.getMaximumFoodConsumption());
    }
,
(startLine=106 endLine=117 srcPath=/root/NewExperiment/freecolFilter/01156/test/src/net/sf/freecol/common/model/PlayerTest.java)
    public void testRoyalPlayer(Player player) {
        assertFalse(player.canBuildColonies());
        assertFalse(player.canHaveFoundingFathers());
        assertTrue(player.canMoveToEurope());
        assertFalse(player.canRecruitUnits());
        assertEquals(player.getPlayerType(), Player.PlayerType.ROYAL);
        assertFalse(player.isDead());
        assertTrue(player.isEuropean());
        assertFalse(player.isIndian());
        assertTrue(player.isREF());
        assertEquals(2, player.getMaximumFoodConsumption());
    }
,
>
, <(startLine=510 endLine=519 srcPath=/root/NewExperiment/freecolFilter/01013/src/net/sf/freecol/server/ai/mission/PioneeringMission.java)
    public static String invalidReason(AIUnit aiUnit, Location loc) {
        String reason;
        return ((reason = invalidAIUnitReason(aiUnit)) != null) ? reason
            : ((reason = invalidPioneeringReason(aiUnit)) != null) ? reason
            : (loc instanceof Colony)
            ? invalidPioneeringColonyReason(aiUnit, (Colony)loc)
            : (loc instanceof Tile)
            ? invalidPioneeringTileReason(aiUnit, (Tile)loc)
            : Mission.TARGETINVALID;
    }
,
(startLine=289 endLine=298 srcPath=/root/NewExperiment/freecolFilter/01013/src/net/sf/freecol/server/ai/mission/ScoutingMission.java)
    public static String invalidReason(AIUnit aiUnit, Location loc) {
        String reason;
        return ((reason = invalidAIUnitReason(aiUnit)) != null) ? reason
            : ((reason = invalidScoutingReason(aiUnit)) != null) ? reason
            : (loc instanceof Tile)
            ? invalidTileReason(aiUnit, (Tile)loc)
            : (loc instanceof IndianSettlement)
            ? invalidSettlementReason(aiUnit, (IndianSettlement)loc)
            : Mission.TARGETINVALID;
    }
,
>
, <(startLine=133 endLine=150 srcPath=/root/NewExperiment/freecolFilter/00404/src/net/sf/freecol/client/gui/CanvasMouseListener.java)
        try {
            if (gui.getDragPath() != null) {
                // A mouse drag has ended (see CanvasMouseMotionListener).

                PathNode temp = gui.getDragPath();

                gui.stopDrag();

                // Move the unit:
                Unit unit = gui.getActiveUnit();
                canvas.getClient().getInGameController().setDestination(unit, temp.getLastNode().getTile());
                if (canvas.getClient().getGame().getCurrentPlayer() == canvas.getClient().getMyPlayer()) {
                    canvas.getClient().getInGameController().moveToDestination(unit);
                }
            } else if (gui.isDragStarted()) {
                gui.stopDrag();
            }
        } catch (Exception ex) {
,
(startLine=163 endLine=180 srcPath=/root/NewExperiment/freecolFilter/00404/src/net/sf/freecol/client/gui/CanvasMapEditorMouseListener.java)
        try {
            if (gui.getDragPath() != null) {
                // A mouse drag has ended (see CanvasMouseMotionListener).

                PathNode temp = gui.getDragPath();

                gui.stopDrag();

                // Move the unit:
                Unit unit = gui.getActiveUnit();
                canvas.getClient().getInGameController().setDestination(unit, temp.getLastNode().getTile());
                if (canvas.getClient().getGame().getCurrentPlayer() == canvas.getClient().getMyPlayer()) {
                    canvas.getClient().getInGameController().moveToDestination(unit);
                }
            } else if (gui.isDragStarted()) {
                gui.stopDrag();
            }
        } catch (Exception ex) {
,
>
, <(startLine=643 endLine=654 srcPath=/root/NewExperiment/freecolFilter/00753/src/net/sf/freecol/client/gui/panel/TradeRouteInputDialog.java)
            public void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g;
                Composite oldComposite = g2d.getComposite();
                Color oldColor = g2d.getColor();
                g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.1f));
                g2d.setColor(Color.BLACK);
                g2d.fillRect(0, 0, getWidth(), getHeight());
                g2d.setComposite(oldComposite);
                g2d.setColor(oldColor);

                super.paintComponent(g);
            }
,
(startLine=880 endLine=891 srcPath=/root/NewExperiment/freecolFilter/00753/src/net/sf/freecol/client/gui/panel/BuildQueuePanel.java)
        public void paintComponent(Graphics g) {
            Graphics2D g2d = (Graphics2D) g;
            Composite oldComposite = g2d.getComposite();
            Color oldColor = g2d.getColor();
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.1f));
            g2d.setColor(Color.BLACK);
            g2d.fillRect(0, 0, getWidth(), getHeight());
            g2d.setComposite(oldComposite);
            g2d.setColor(oldColor);

            super.paintComponent(g);
        }
,
(startLine=84 endLine=95 srcPath=/root/NewExperiment/freecolFilter/00753/src/net/sf/freecol/client/gui/plaf/FreeColComboBoxRenderer.java)
        public void paintComponent(Graphics g) {
            Graphics2D g2d = (Graphics2D) g;
            Composite oldComposite = g2d.getComposite();
            Color oldColor = g2d.getColor();
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.1f));
            g2d.setColor(Color.BLACK);
            g2d.fillRect(0, 0, getWidth(), getHeight());
            g2d.setComposite(oldComposite);
            g2d.setColor(oldColor);
            
            super.paintComponent(g);
        }
,
(startLine=78 endLine=91 srcPath=/root/NewExperiment/freecolFilter/00753/src/net/sf/freecol/client/gui/plaf/FreeColButtonUI.java)
    protected void paintButtonPressed(Graphics g, AbstractButton c) {
        if (c.isContentAreaFilled()) {
            Graphics2D g2d = (Graphics2D) g;
            Dimension size = c.getSize();
            Composite oldComposite = g2d.getComposite();
            Color oldColor = g2d.getColor();
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.1f));
            g2d.setColor(Color.BLACK);
            g2d.fillRect(0, 0, size.width, size.height);
            g2d.setComposite(oldComposite);
            g2d.setColor(oldColor);

        }
    }
,
>
, <(startLine=3073 endLine=3086 srcPath=/root/NewExperiment/freecolFilter/01274/src/net/sf/freecol/server/control/InGameController.java)
        if (settlement != null) {
            otherPlayer = (ServerPlayer)settlement.getOwner();
            session = TransactionSession.lookup(DiplomacySession.class,
                                                unit, settlement);
            if (session == null) {
                if (status == TradeStatus.PROPOSE_TRADE) {
                    session = new DiplomacySession(unit, settlement);
                } else {
                    return DOMMessage.clientError("Diplomacy session not found: "
                        + unit.getId() + "/" + settlement.getId());
                }
            }
            tile = settlement.getTile();
        } else if (otherPlayer != null) {
,
(startLine=3086 endLine=3099 srcPath=/root/NewExperiment/freecolFilter/01274/src/net/sf/freecol/server/control/InGameController.java)
        } else if (otherPlayer != null) {
            otherPlayer = (ServerPlayer)otherUnit.getOwner();
            session = TransactionSession.lookup(DiplomacySession.class,
                                                unit, otherUnit);
            if (session == null) {
                if (status == TradeStatus.PROPOSE_TRADE) {
                    session = new DiplomacySession(unit, otherUnit);
                } else {
                    return DOMMessage.clientError("Diplomacy session not found: "
                        + unit.getId() + "/" + otherUnit.getId());
                }
            }
            tile = otherUnit.getTile();
        } else {
,
>
, <(startLine=384 endLine=398 srcPath=/root/NewExperiment/freecolFilter/01482/src/net/sf/freecol/server/ai/AIInGameInputHandler.java)
    public Element multiple(Connection connection, Element element) {
        NodeList nodes = element.getChildNodes();
        List<Element> results = new ArrayList<>();

        for (int i = 0; i < nodes.getLength(); i++) {
            try {
                Element reply = handle(connection, (Element) nodes.item(i));
                if (reply != null) results.add(reply);
            } catch (Exception e) {
                logger.log(Level.WARNING, "Caught crash in multiple item " + i
                    + ", continuing.", e);
            }
        }
        return DOMMessage.collapseElements(results);
    }
,
(startLine=923 endLine=937 srcPath=/root/NewExperiment/freecolFilter/01482/src/net/sf/freecol/client/control/InGameInputHandler.java)
    private Element multiple(Connection connection, Element element) {
        NodeList nodes = element.getChildNodes();
        List<Element> results = new ArrayList<>();

        for (int i = 0; i < nodes.getLength(); i++) {
            try {
                Element reply = handle(connection, (Element)nodes.item(i));
                if (reply != null) results.add(reply);
            } catch (Exception e) {
                logger.log(Level.WARNING, "Caught crash in multiple item " + i
                    + ", continuing.", e);
            }
        }
        return DOMMessage.collapseElements(results);
    }
,
>
, <(startLine=62 endLine=93 srcPath=/root/NewExperiment/freecolFilter/00020/src/net/sf/freecol/client/control/InGameInputHandler.java)
    public synchronized Element handle(Connection connection, Element element) {
        Element reply = null;

        if (element != null) {

            String type = element.getTagName();

            if (type.equals("update")) {
                reply = update(element);
            } else if (type.equals("remove")) {
                reply = remove(element);
            } else if (type.equals("opponentMove")) {
                reply = opponentMove(element);
            } else if (type.equals("opponentAttack")) {
                reply = opponentAttack(element);
            } else if (type.equals("setCurrentPlayer")) {
                reply = setCurrentPlayer(element);
            } else if (type.equals("emigrateUnitInEuropeConfirmed")) {
                reply = emigrateUnitInEuropeConfirmed(element);
            } else if (type.equals("newTurn")) {
                reply = newTurn(element);
            } else if (type.equals("setDead")) {
                reply = setDead(element);
            } else if (type.equals("error")) {
                reply = error(element);
            } else {
                logger.warning("Message is of unsupported type \"" + type + "\".");
            }
        }

        return reply;
    }
,
(startLine=59 endLine=90 srcPath=/root/NewExperiment/freecolFilter/00020/src/net/sf/freecol/client/control/PreGameInputHandler.java)
    public Element handle(Connection connection, Element element) {
        Element reply = null;

        if (element != null) {

            String type = element.getTagName();

            if (type.equals("addPlayer")) {
                reply = addPlayer(element);
            } else if (type.equals("removePlayer")) {
                reply = removePlayer(element);
            } else if (type.equals("chat")) {
                reply = chat(element);
            } else if (type.equals("playerReady")) {
                reply = playerReady(element);
            } else if (type.equals("updateNation")) {
                reply = updateNation(element);
            } else if (type.equals("updateColor")) {
                reply = updateColor(element);
            } else if (type.equals("updateGame")) {
                reply = updateGame(element);
            } else if (type.equals("startGame")) {
                reply = startGame(element);
            } else if (type.equals("error")) {
                reply = error(element);
            } else {
                logger.warning("Message is of unsupported type \"" + type + "\".");
            }
        }

        return reply;
    }
,
>
, <(startLine=169 endLine=176 srcPath=/root/NewExperiment/freecolFilter/00470/src/net/sf/freecol/common/resources/ImageResource.java)
    private Image convertToGrayscale(Image image) {
        int width = image.getWidth(null);
        int height = image.getHeight(null);
        ColorConvertOp filter = new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_GRAY), null);
        BufferedImage srcImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        srcImage.createGraphics().drawImage(image, 0, 0, null);
        return filter.filter(srcImage, null);
    }
,
(startLine=739 endLine=747 srcPath=/root/NewExperiment/freecolFilter/00470/src/net/sf/freecol/client/gui/ImageLibrary.java)
    private ImageIcon convertToGrayscale(Image image) {
        int width = image.getWidth(null);
        int height = image.getHeight(null);

        ColorConvertOp filter = new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_GRAY), null);
        BufferedImage srcImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        srcImage.createGraphics().drawImage(image, 0, 0, null);
        return new ImageIcon(filter.filter(srcImage, null));
    }
,
>
, <(startLine=519 endLine=555 srcPath=/root/NewExperiment/freecolFilter/00281/src/net/sf/freecol/common/model/TileItemContainer.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {
        setID(in.getAttributeValue(null, "ID"));

        tile = (Tile) getGame().getFreeColGameObject(in.getAttributeValue(null, "tile"));
        if (tile == null) {
            tile = new Tile(getGame(), in.getAttributeValue(null, "tile"));
        }

        improvements.clear();

        while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
            if (in.getLocalName().equals(Resource.getXMLElementTagName())) {
                resource = (Resource) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
                if (resource != null) {
                    resource.readFromXML(in);
                } else {
                    resource = new Resource(getGame(), tile, in);
                }
            } else if (in.getLocalName().equals(TileImprovement.getXMLElementTagName())) {
                TileImprovement ti = (TileImprovement) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
                if (ti != null) {
                    ti.readFromXML(in);
                    if (!improvements.contains(ti)) {
                        improvements.add(ti);
                    }
                } else {
                    ti = new TileImprovement(getGame(), tile, in);
                    improvements.add(ti);
                }
                if (ti.isRoad()) {
                    road = ti;
                } else if (ti.isRiver()) {
                    river = ti;
                }
            }
        }
    }
,
(startLine=2626 endLine=2659 srcPath=/root/NewExperiment/freecolFilter/00281/src/net/sf/freecol/common/model/Tile.java)
            while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                if (in.getLocalName().equals("missionary")) {
                    in.nextTag();
                    missionary = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
                    if (missionary == null) {
                        missionary = new Unit(getGame(), in);
                    } else {
                        missionary.readFromXML(in);
                    }
                } else if (in.getLocalName().equals(Resource.getXMLElementTagName())) {
                    resource = (Resource) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
                    if (resource != null) {
                        resource.readFromXML(in);
                    } else {
                        resource = new Resource(getGame(), tile, in);
                    }
                } else if (in.getLocalName().equals(TileImprovement.getXMLElementTagName())) {
                    TileImprovement ti = (TileImprovement) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
                    if (ti != null) {
                        ti.readFromXML(in);
                        if (!improvements.contains(ti)) {
                            improvements.add(ti);
                        }
                    } else {
                        ti = new TileImprovement(getGame(), tile, in);
                        improvements.add(ti);
                    }
                    if (ti.isRoad()) {
                        road = ti;
                    } else if (ti.isRiver()) {
                        river = ti;
                    }
                }
            }
,
>
, <(startLine=31 endLine=48 srcPath=/root/NewExperiment/freecolFilter/00289/test/src/net/sf/freecol/common/model/PlayerTest.java)
    public void testIsEuropeanNoREF() {
        assertEquals(true, Player.isEuropeanNoREF(Player.DUTCH));
        assertEquals(true, Player.isEuropeanNoREF(Player.ENGLISH));
        assertEquals(true, Player.isEuropeanNoREF(Player.FRENCH));
        assertEquals(true, Player.isEuropeanNoREF(Player.SPANISH));
        assertEquals(false, Player.isEuropeanNoREF(Player.INCA));
        assertEquals(false, Player.isEuropeanNoREF(Player.AZTEC));
        assertEquals(false, Player.isEuropeanNoREF(Player.ARAWAK));
        assertEquals(false, Player.isEuropeanNoREF(Player.CHEROKEE));
        assertEquals(false, Player.isEuropeanNoREF(Player.IROQUOIS));
        assertEquals(false, Player.isEuropeanNoREF(Player.SIOUX));
        assertEquals(false, Player.isEuropeanNoREF(Player.APACHE));
        assertEquals(false, Player.isEuropeanNoREF(Player.TUPI));
        assertEquals(false, Player.isEuropeanNoREF(Player.REF_DUTCH));
        assertEquals(false, Player.isEuropeanNoREF(Player.REF_ENGLISH));
        assertEquals(false, Player.isEuropeanNoREF(Player.REF_FRENCH));
        assertEquals(false, Player.isEuropeanNoREF(Player.REF_SPANISH));
    }
,
(startLine=50 endLine=67 srcPath=/root/NewExperiment/freecolFilter/00289/test/src/net/sf/freecol/common/model/PlayerTest.java)
    public void testIsREF() {
        assertEquals(false, Player.isREF(Player.DUTCH));
        assertEquals(false, Player.isREF(Player.ENGLISH));
        assertEquals(false, Player.isREF(Player.FRENCH));
        assertEquals(false, Player.isREF(Player.SPANISH));
        assertEquals(false, Player.isREF(Player.INCA));
        assertEquals(false, Player.isREF(Player.AZTEC));
        assertEquals(false, Player.isREF(Player.ARAWAK));
        assertEquals(false, Player.isREF(Player.CHEROKEE));
        assertEquals(false, Player.isREF(Player.IROQUOIS));
        assertEquals(false, Player.isREF(Player.SIOUX));
        assertEquals(false, Player.isREF(Player.APACHE));
        assertEquals(false, Player.isREF(Player.TUPI));
        assertEquals(true, Player.isREF(Player.REF_DUTCH));
        assertEquals(true, Player.isREF(Player.REF_ENGLISH));
        assertEquals(true, Player.isREF(Player.REF_FRENCH));
        assertEquals(true, Player.isREF(Player.REF_SPANISH));
    }
,
>
, <(startLine=1126 endLine=1139 srcPath=/root/NewExperiment/freecolFilter/00099/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element unloadCargo(Connection connection, Element unloadCargoElement) {
        Game game = getFreeColServer().getGame();
        ServerPlayer player = getFreeColServer().getPlayer(connection);

        Goods goods = new Goods(game, (Element) unloadCargoElement.getChildNodes().item(0));

        if (goods.getLocation() instanceof Unit && ((Unit) goods.getLocation()).getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }

        goods.unload();

        return null;
    }
,
(startLine=1175 endLine=1188 srcPath=/root/NewExperiment/freecolFilter/00099/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element sellGoods(Connection connection, Element sellGoodsElement) {
        Game game = getFreeColServer().getGame();
        ServerPlayer player = getFreeColServer().getPlayer(connection);

        Goods goods = new Goods(game, (Element) sellGoodsElement.getChildNodes().item(0));

        if (goods.getLocation() instanceof Unit && ((Unit) goods.getLocation()).getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }

        game.getMarket().sell(goods, player);

        return null;
    }
,
>
, <(startLine=141 endLine=153 srcPath=/root/NewExperiment/freecolFilter/00088/src/net/sf/freecol/common/model/Goods.java)
    public static int getRawMaterial(int goodsType) {
        switch (goodsType) {
            case HORSES: return FOOD;
            case RUM: return SUGAR;
            case CIGARS: return TOBACCO;
            case CLOTH: return COTTON;
            case COATS: return FURS;
            case TOOLS: return ORE;
            case MUSKETS: return TOOLS;
            case HAMMERS: return LUMBER;
            default: return -1;
        }
    }
,
(startLine=164 endLine=176 srcPath=/root/NewExperiment/freecolFilter/00088/src/net/sf/freecol/common/model/Goods.java)
    public static int getManufactoredGoods(int rawMaterialGoodsType) {
        switch (rawMaterialGoodsType) {
            case FOOD: return HORSES;
            case SUGAR: return RUM;
            case TOBACCO: return CIGARS;
            case COTTON: return CLOTH;
            case FURS: return COATS;
            case ORE: return TOOLS;
            case TOOLS: return MUSKETS;
            case LUMBER: return HAMMERS;
            default: return -1;
        }
    }
,
>
, <(startLine=463 endLine=478 srcPath=/root/NewExperiment/freecolFilter/01170/src/net/sf/freecol/common/model/Building.java)
    public boolean remove(final Locatable locatable) {
        if (!(locatable instanceof Unit)) {
            throw new IllegalStateException("Not a unit: " + locatable);
        }
        Unit unit = (Unit) locatable;
        if (!contains(unit)) return true;

        if (super.remove(unit)) {
            unit.setState(Unit.UnitState.ACTIVE);
            unit.setMovesLeft(0);

            getColony().invalidateCache();
            return true;
        }
        return false;
    }
,
(startLine=285 endLine=300 srcPath=/root/NewExperiment/freecolFilter/01170/src/net/sf/freecol/common/model/ColonyTile.java)
    public boolean remove(final Locatable locatable) {
        if (!(locatable instanceof Unit)) {
            throw new IllegalStateException("Not a unit: " + locatable);
        }
        Unit unit = (Unit) locatable;
        if (!contains(unit)) return true;

        if (super.remove(unit)) {
            unit.setState(Unit.UnitState.ACTIVE);
            unit.setMovesLeft(0);

            getColony().invalidateCache();
            return true;
        }
        return false;
    }
,
>
, <(startLine=371 endLine=386 srcPath=/root/NewExperiment/freecolFilter/00316/src/net/sf/freecol/common/model/PersistentObject.java)
    protected int[][] readFromArrayElement(String tagName, XMLStreamReader in, int[][] arrayType) throws XMLStreamException {
        if (!in.getLocalName().equals(tagName)) {
            in.nextTag();
        }
        
        int[][] array = new int[Integer.parseInt(in.getAttributeValue(null, "xLength"))][Integer.parseInt(in.getAttributeValue(null, "yLength"))];
        
        for (int x=0; x<array.length; x++) {
            for (int y=0; y<array[0].length; y++) {
                array[x][y] = Integer.parseInt(in.getAttributeValue(null, "x" + Integer.toString(x) + "y" + Integer.toString(y)));
            }
        }
        
        in.nextTag();
        return array;
    }
,
(startLine=542 endLine=558 srcPath=/root/NewExperiment/freecolFilter/00316/src/net/sf/freecol/common/model/PersistentObject.java)
        throws XMLStreamException {
        if (!in.getLocalName().equals(tagName)) {
            in.nextTag();
        }
        
        String[][] array = new String[Integer.parseInt(in.getAttributeValue(null, "xLength"))]
            [Integer.parseInt(in.getAttributeValue(null, "yLength"))];
        
        for (int x=0; x<array.length; x++) {
            for (int y=0; y<array[0].length; y++) {
                array[x][y] = in.getAttributeValue(null, "x" + Integer.toString(x) + "y" + Integer.toString(y));
            }
        }
        
        in.nextTag();
        return array;
    }
,
>
, <(startLine=1636 endLine=1647 srcPath=/root/NewExperiment/freecolFilter/00549/src/net/sf/freecol/client/control/InGameController.java)
                                           Goods goods, int gold) {
        BuyPropositionMessage message = new BuyPropositionMessage(unit, settlement, goods, gold);
        Element reply = askExpecting(freeColClient.getClient(),
                                     message.toXMLElement(),
                                     message.getXMLElementTagName());
        if (reply == null) {
            gold = NO_TRADE - 1; // signal failure
        } else {
            gold = new BuyPropositionMessage(freeColClient.getGame(), reply).getGold();
        }
        return gold;
    }
,
(startLine=1745 endLine=1756 srcPath=/root/NewExperiment/freecolFilter/00549/src/net/sf/freecol/client/control/InGameController.java)
                                          Goods goods, int gold) {
        SellPropositionMessage message = new SellPropositionMessage(unit, settlement, goods, gold);
        Element reply = askExpecting(freeColClient.getClient(),
                                     message.toXMLElement(),
                                     message.getXMLElementTagName());
        if (reply == null) {
            gold = NO_TRADE - 1;
        } else {
            gold = new SellPropositionMessage(freeColClient.getGame(), reply).getGold();
        }
        return gold;
    }
,
>
, <(startLine=238 endLine=250 srcPath=/root/NewExperiment/freecolFilter/00590/src/net/sf/freecol/client/gui/panel/BuildQueuePanel.java)
                for (Entry<String, Boolean> entry : requiredAbilities.entrySet()) {
                    if (colony.hasAbility(entry.getKey()) != entry.getValue()
                        && featureContainer.hasAbility(entry.getKey()) != entry.getValue()) {
                        if (FreeCol.getSpecification()
                            .getTypesProviding(entry.getKey(), entry.getValue()).isEmpty()) {
                            // no type provides the required ability
                            unbuildableTypes.add(unitType);
                            continue loop;
                        } else {
                            locked = true;
                        }
                    }
                }
,
(startLine=289 endLine=301 srcPath=/root/NewExperiment/freecolFilter/00590/src/net/sf/freecol/client/gui/panel/BuildQueuePanel.java)
                for (Entry<String, Boolean> entry : requiredAbilities.entrySet()) {
                    if (colony.hasAbility(entry.getKey()) != entry.getValue()
                        && featureContainer.hasAbility(entry.getKey()) != entry.getValue()) {
                        if (FreeCol.getSpecification()
                            .getTypesProviding(entry.getKey(), entry.getValue()).isEmpty()) {
                            // no type provides the required ability
                            unbuildableTypes.add(buildingType);
                            continue loop;
                        } else {
                            locked = true;
                        }
                    }
                }
,
>
, <(startLine=344 endLine=352 srcPath=/root/NewExperiment/freecolFilter/01673/src/net/sf/freecol/common/model/MarketData.java)
            if (newPrice > costToBuy + diff) {
                amountPrice -= newPrice - (costToBuy + diff);
                amountInMarket = Math.round(goodsType.getInitialAmount()
                    * (initialPrice / amountPrice));
                logger.info("Clamped price rise for " + getId()
                    + " from " + newPrice
                    + " to " + (costToBuy + diff));
                newPrice = costToBuy + diff;
            } else if (newPrice < costToBuy - diff) {
,
(startLine=352 endLine=360 srcPath=/root/NewExperiment/freecolFilter/01673/src/net/sf/freecol/common/model/MarketData.java)
            } else if (newPrice < costToBuy - diff) {
                amountPrice += (costToBuy - diff) - newPrice;
                amountInMarket = Math.round(goodsType.getInitialAmount()
                    * (initialPrice / amountPrice));
                logger.info("Clamped price fall for " + getId()
                    + " from " + newPrice
                    + " to " + (costToBuy - diff));
                newPrice = costToBuy - diff;
            }
,
>
, <(startLine=403 endLine=414 srcPath=/root/NewExperiment/freecolFilter/01107/src/net/sf/freecol/server/ai/AIMain.java)
        while (iter.hasNext()) {
            AIObject obj = iter.next();
            String className = obj.getClass().getSimpleName();
            if (objStats.containsKey(className)) {
                Long count = objStats.get(className);
                count++;
                objStats.put(className, count);
            } else {
                Long count = new Long(1);
                objStats.put(className, count);
            }
        }
,
(startLine=951 endLine=963 srcPath=/root/NewExperiment/freecolFilter/01107/src/net/sf/freecol/common/model/Game.java)
        while (iter.hasNext()) {
            FreeColGameObject obj = iter.next();
            String className = obj.getClass().getSimpleName();
            if (objStats.containsKey(className)) {
                Long count = objStats.get(className);
                count++;
                objStats.put(className, count);
            } else {
                Long count = new Long(1);
                objStats.put(className, count);
            }
            if (obj.isDisposed()) disposed++;
        }
,
>
, <(startLine=413 endLine=422 srcPath=/root/NewExperiment/freecolFilter/00640/src/net/sf/freecol/server/ai/NewAIPlayer.java)
            while (unitsIterator.hasNext()) {
                Unit theUnit = unitsIterator.next();
                AIUnit a = (AIUnit) getAIMain().getAIObject(theUnit.getId());
                if (a != null) {
                    au.add(a);
                } else {
                    logger.warning("Could not find the AIUnit for: " + theUnit + " (" + theUnit.getId() + ") - "
                                   + (getGame().getFreeColGameObject(theUnit.getId()) != null));
                }
            }
,
(startLine=1543 endLine=1553 srcPath=/root/NewExperiment/freecolFilter/00640/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            while (unitsIterator.hasNext()) {
                Unit theUnit = unitsIterator.next();
                AIUnit a = (AIUnit) getAIMain().getAIObject(theUnit.getId());
                if (a != null && a.getGoal()==null) {
                    //NOTE: Only adds units that currently don't have a goal.
                    au.add(a);
                } else {
                    logger.warning("Could not find the AIUnit for: " + theUnit + " (" + theUnit.getId() + ") - "
                            + (getGame().getFreeColGameObject(theUnit.getId()) != null));
                }
            }
,
(startLine=124 endLine=133 srcPath=/root/NewExperiment/freecolFilter/00640/src/net/sf/freecol/server/ai/AIPlayer.java)
            while (unitsIterator.hasNext()) {
                Unit theUnit = unitsIterator.next();
                AIUnit a = (AIUnit) getAIMain().getAIObject(theUnit.getId());
                if (a != null) {
                    au.add(a);
                } else {
                    logger.warning("Could not find the AIUnit for: " + theUnit + " (" + theUnit.getId() + ") - "
                            + (getGame().getFreeColGameObject(theUnit.getId()) != null));
                }
            }
,
>
, <(startLine=463 endLine=481 srcPath=/root/NewExperiment/freecolFilter/00573/src/net/sf/freecol/client/gui/panel/EuropePanel.java)
    private void unload() {
        Unit unit = getSelectedUnit();
        if (unit != null && unit.isCarrier()) {
            Iterator<Goods> goodsIterator = unit.getGoodsIterator();
            while (goodsIterator.hasNext()) {
                Goods goods = goodsIterator.next();
                if (getMyPlayer().canTrade(goods)) {
                    getController().sellGoods(goods);
                } else {
                    getController().payArrears(goods);
                }
            }
            Iterator<Unit> unitIterator = unit.getUnitIterator();
            while (unitIterator.hasNext()) {
                Unit newUnit = unitIterator.next();
                getController().leaveShip(newUnit);
            }
        }
    }
,
(startLine=586 endLine=602 srcPath=/root/NewExperiment/freecolFilter/00573/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
    private void unload() {
        Unit unit = getSelectedUnit();
        if (unit != null && unit.isCarrier()) {
            Iterator<Goods> goodsIterator = unit.getGoodsIterator();
            while (goodsIterator.hasNext()) {
                Goods goods = goodsIterator.next();
                getController().unloadCargo(goods);
            }
            Iterator<Unit> unitIterator = unit.getUnitIterator();
            while (unitIterator.hasNext()) {
                Unit newUnit = unitIterator.next();
                getController().leaveShip(newUnit);
            }
        }
        unloadButton.setEnabled(false);
        fillButton.setEnabled(false);
    }
,
>
, <(startLine=693 endLine=712 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private void ensureCorrectMissions() {
        logger.finest("Entering method ensureCorrectMissions");
        if (getPlayer().isIndian()) return;

        for (AIUnit au : getAIUnits()) {
            if (au.hasMission()) continue;

            // TODO: Find out why this happens, or even if it still does.
            Unit u = au.getUnit();
            if (u.getLocation() instanceof WorkLocation) {
                AIColony ac = getAIColony(u.getColony());
                if (ac == null) {
                    logger.warning("No AIColony for unit: " + u
                                   + " at: " + u.getLocation());
                    continue;
                }
                au.setMission(new WorkInsideColonyMission(getAIMain(), au, ac));
            }
        }
    }
,
(startLine=429 endLine=448 srcPath=/root/NewExperiment/freecolFilter/00882/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void ensureCorrectMissions() {
        logger.finest("Entering method ensureCorrectMissions");
        if (getPlayer().isIndian()) return;

        for (AIUnit au : getAIUnits()) {
            if (au.hasMission()) continue;

            // TODO: Find out why this happens, or even if it still does.
            Unit u = au.getUnit();
            if (u.getLocation() instanceof WorkLocation) {
                AIColony ac = getAIColony(u.getColony());
                if (ac == null) {
                    logger.warning("No AIColony for unit: " + u
                                   + " at: " + u.getLocation());
                    continue;
                }
                au.setMission(new WorkInsideColonyMission(getAIMain(), au, ac));
            }
        }
    }
,
>
, <(startLine=345 endLine=357 srcPath=/root/NewExperiment/freecolFilter/00316/src/net/sf/freecol/common/model/PersistentObject.java)
    protected void toArrayElement(String tagName, int[][] array, XMLStreamWriter out) throws XMLStreamException {
        out.writeStartElement(tagName);
        
        out.writeAttribute("xLength", Integer.toString(array.length));
        out.writeAttribute("yLength", Integer.toString(array[0].length));
        for (int x=0; x < array.length; x++) {
            for (int y=0; y < array[0].length; y++) {
                out.writeAttribute("x" + Integer.toString(x) + "y" + Integer.toString(y), Integer.toString(array[x][y]));
            }
        }
        
        out.writeEndElement();
    }
,
(startLine=515 endLine=527 srcPath=/root/NewExperiment/freecolFilter/00316/src/net/sf/freecol/common/model/PersistentObject.java)
    protected void toArrayElement(String tagName, String[][] array, XMLStreamWriter out) throws XMLStreamException {
        out.writeStartElement(tagName);
        
        out.writeAttribute("xLength", Integer.toString(array.length));
        out.writeAttribute("yLength", Integer.toString(array[0].length));
        for (int x=0; x < array.length; x++) {
            for (int y=0; y < array[0].length; y++) {
                out.writeAttribute("x" + Integer.toString(x) + "y" + Integer.toString(y), array[x][y]);
            }
        }
        
        out.writeEndElement();
    }
,
>
, <(startLine=236 endLine=251 srcPath=/root/NewExperiment/freecolFilter/00595/src/net/sf/freecol/client/gui/panel/BuildQueuePanel.java)
            } else {
                Map<String, Boolean> requiredAbilities = unitType.getAbilitiesRequired();
                for (Entry<String, Boolean> entry : requiredAbilities.entrySet()) {
                    if (colony.hasAbility(entry.getKey()) != entry.getValue()
                        && featureContainer.hasAbility(entry.getKey()) != entry.getValue()) {
                        if (FreeCol.getSpecification()
                            .getTypesProviding(entry.getKey(), entry.getValue()).isEmpty()) {
                            // no type provides the required ability
                            unbuildableTypes.add(unitType);
                            continue loop;
                        } else {
                            locked = true;
                        }
                    }
                }
            }
,
(startLine=285 endLine=300 srcPath=/root/NewExperiment/freecolFilter/00595/src/net/sf/freecol/client/gui/panel/BuildQueuePanel.java)
            } else {
                Map<String, Boolean> requiredAbilities = buildingType.getAbilitiesRequired();
                for (Entry<String, Boolean> entry : requiredAbilities.entrySet()) {
                    if (colony.hasAbility(entry.getKey()) != entry.getValue()
                        && featureContainer.hasAbility(entry.getKey()) != entry.getValue()) {
                        if (FreeCol.getSpecification()
                            .getTypesProviding(entry.getKey(), entry.getValue()).isEmpty()) {
                            // no type provides the required ability
                            unbuildableTypes.add(buildingType);
                            continue loop;
                        } else {
                            locked = true;
                        }
                    }
                }
            }
,
>
, <(startLine=1577 endLine=1588 srcPath=/root/NewExperiment/freecolFilter/00891/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
                            if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                                // Make it less probable that nice players get targeted
                                // for a demand mission:
                                Player tp = target.getOwner();
                                int tension = 1 + getPlayer().getTension(tp).getValue()
                                    + indianSettlement.getAlarm(tp).getValue();
                                if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                                    chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne,
                                                                                 target));
                                    break;
                                }
                            }
,
(startLine=694 endLine=705 srcPath=/root/NewExperiment/freecolFilter/00891/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
                            if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                                // Make it less probable that nice players get targeted
                                // for a demand mission:
                                Player tp = target.getOwner();
                                int tension = 1 + getPlayer().getTension(tp).getValue()
                                    + indianSettlement.getAlarm(tp).getValue();
                                if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                                    chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne,
                                                                                 target));
                                    break;
                                }
                            }
,
>
, <(startLine=429 endLine=440 srcPath=/root/NewExperiment/freecolFilter/00005/src/net/sf/freecol/client/gui/panel/EuropePanel.java)
    private void updateCargoLabel() {
        if (selectedUnit != null) {
            try {
                cargoLabel.setText("Cargo (" + selectedUnit.getUnit().getName() + ") space left: " + selectedUnit.getUnit().getSpaceLeft());
            } catch (FreeColException e) {
                e.printStackTrace();
                cargoLabel.setText("Cargo");
            }
        } else {
            cargoLabel.setText("<html><strike>Cargo</strike></html>");
        }
    }
,
(startLine=294 endLine=307 srcPath=/root/NewExperiment/freecolFilter/00005/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
    private void updateCargoLabel() {
        if (selectedUnit != null) {
            try {
                cargoLabel.setText("Cargo (" + selectedUnit.getUnit().getName() + ") space left: " + selectedUnit.getUnit().getSpaceLeft());
            }
            catch (FreeColException e) {
                e.printStackTrace();
                cargoLabel.setText("Cargo");
            }
        }
        else {
            cargoLabel.setText("<html><strike>Cargo</strike></html>");
        }
    }
,
>
, <(startLine=156 endLine=164 srcPath=/root/NewExperiment/freecolFilter/00230/src/net/sf/freecol/client/control/InGameInputHandler.java)
        for (int i = 0; i < nodeList.getLength(); i++) {
            Element element = (Element) nodeList.item(i);
            FreeColGameObject fcgo = game.getFreeColGameObjectSafely(element.getAttribute("ID"));
            if (fcgo != null) {
                fcgo.readFromXMLElement(element);
            } else {
                logger.warning("Could not find 'FreeColGameObject' with ID: " + element.getAttribute("ID"));
            }
        }
,
(startLine=179 endLine=188 srcPath=/root/NewExperiment/freecolFilter/00230/src/net/sf/freecol/client/control/InGameInputHandler.java)
        for (int i = 0; i < nodeList.getLength(); i++) {
            Element element = (Element) nodeList.item(i);
            FreeColGameObject fcgo = game.getFreeColGameObject(element.getAttribute("ID"));

            if (fcgo != null) {
                fcgo.dispose();
            } else {
                logger.warning("Could not find 'FreeColGameObject' with ID: " + element.getAttribute("ID"));
            }
        }
,
>
, <(startLine=1426 endLine=1447 srcPath=/root/NewExperiment/freecolFilter/00617/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (needMuskets && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == musketType) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac
                            .addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - olddefenders) * 50,
                                    musketType));
                }
            }
,
(startLine=1448 endLine=1467 srcPath=/root/NewExperiment/freecolFilter/00617/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (needHorses && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == horsesType) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac.addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - defenders) * 50, horsesType));
                }
            }
,
(startLine=385 endLine=405 srcPath=/root/NewExperiment/freecolFilter/00617/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            if (needMuskets && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == musketType) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac.addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - olddefenders) * 50,
                                                  musketType));
                }
            }
,
(startLine=406 endLine=425 srcPath=/root/NewExperiment/freecolFilter/00617/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            if (needHorses && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == horsesType) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac.addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - defenders) * 50, horsesType));
                }
            }
,
>
, <(startLine=206 endLine=218 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/NewAIPlayer.java)
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();
            if (aiUnit.hasMission() && aiUnit.getMission().isValid()
                && !(aiUnit.getUnit().isOnCarrier())) {
                try {
                    aiUnit.doMission(getConnection());
                } catch (Exception e) {
                    StringWriter sw = new StringWriter();
                    e.printStackTrace(new PrintWriter(sw));
                    logger.warning(sw.toString());
                }
            }
        }
,
(startLine=983 endLine=995 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();
            if (aiUnit.hasMission() && aiUnit.getMission().isValid()
                    && !(aiUnit.getUnit().isOnCarrier())) {
                try {
                    aiUnit.doMission(getConnection());
                } catch (Exception e) {
                    StringWriter sw = new StringWriter();
                    e.printStackTrace(new PrintWriter(sw));
                    logger.warning(sw.toString());
                }
            }
        }
,
(startLine=1868 endLine=1880 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();
            if (aiUnit.hasMission() && aiUnit.getMission().isValid()
                    && !(aiUnit.getUnit().isOnCarrier())) {
                try {
                    aiUnit.doMission(getConnection());
                } catch (Exception e) {
                    StringWriter sw = new StringWriter();
                    e.printStackTrace(new PrintWriter(sw));
                    logger.warning(sw.toString());
                }
            }
        }
,
>
, <(startLine=52 endLine=89 srcPath=/root/NewExperiment/freecolFilter/00042/src/net/sf/freecol/client/control/InGameInputHandler.java)
    public synchronized Element handle(Connection connection, Element element) {
        Element reply = null;

        if (element != null) {

            String type = element.getTagName();

            if (type.equals("update")) {
                reply = update(element);
            } else if (type.equals("remove")) {
                reply = remove(element);
            } else if (type.equals("opponentMove")) {
                reply = opponentMove(element);
            } else if (type.equals("opponentAttack")) {
                reply = opponentAttack(element);
            } else if (type.equals("setCurrentPlayer")) {
                reply = setCurrentPlayer(element);
            } else if (type.equals("newTurn")) {
                reply = newTurn(element);
            } else if (type.equals("setDead")) {
                reply = setDead(element);
            } else if (type.equals("gameEnded")) {
                reply = gameEnded(element);
            } else if (type.equals("chat")) {
                reply = chat(element);
            } else if (type.equals("disconnect")) {
                reply = disconnect(element);
            } else if (type.equals("error")) {
                reply = error(element);
            } else if (type.equals("chooseFoundingFather")) {
                reply = chooseFoundingFather(element);
            } else {
                logger.warning("Message is of unsupported type \"" + type + "\".");
            }
        }

        return reply;
    }
,
(startLine=43 endLine=78 srcPath=/root/NewExperiment/freecolFilter/00042/src/net/sf/freecol/client/control/PreGameInputHandler.java)
    public synchronized Element handle(Connection connection, Element element) {
        Element reply = null;

        if (element != null) {

            String type = element.getTagName();

            if (type.equals("addPlayer")) {
                reply = addPlayer(element);
            } else if (type.equals("removePlayer")) {
                reply = removePlayer(element);
            } else if (type.equals("chat")) {
                reply = chat(element);
            } else if (type.equals("playerReady")) {
                reply = playerReady(element);
            } else if (type.equals("updateNation")) {
                reply = updateNation(element);
            } else if (type.equals("updateColor")) {
                reply = updateColor(element);
            } else if (type.equals("updateGame")) {
                reply = updateGame(element);
            } else if (type.equals("startGame")) {
                reply = startGame(element);
            } else if (type.equals("logout")) {
                reply = logout(element);
            } else if (type.equals("disconnect")) {
                reply = disconnect(element);
            } else if (type.equals("error")) {
                reply = error(element);
            } else {
                logger.warning("Message is of unsupported type \"" + type + "\".");
            }
        }

        return reply;
    }
,
>
, <(startLine=156 endLine=182 srcPath=/root/NewExperiment/freecolFilter/00310/src/net/sf/freecol/common/option/LanguageOption.java)
     protected String getStringValue() {
         if (value == 0) {
             return AUTO;
         }
         File i18nDirectory = new File(FreeCol.getDataDirectory(), Messages.STRINGS_DIRECTORY);
         File[] files = i18nDirectory.listFiles();
         int i = 1;
         for (File file : files) {
             if (file.getName() == null) {
                 continue;
             }
             if (file.getName().startsWith("FreeColMessages_")) {
                 try {
                     final String languageID = file.getName().substring(16, file.getName().indexOf("."));
                     if (value == i) {
                         return languageID;
                     }
                     i++;
                 } catch (Exception e) {
                     logger.log(Level.WARNING, "Exception in getLanguageNames()", e);
                     i++;
                     continue;
                 }
             }
         }
         return AUTO;
     }
,
(startLine=190 endLine=215 srcPath=/root/NewExperiment/freecolFilter/00310/src/net/sf/freecol/common/option/LanguageOption.java)
     protected void setValue(String stringValue) {
         if (stringValue.equals(AUTO)) {
             value = 0;
         }
         File i18nDirectory = new File(FreeCol.getDataDirectory(), Messages.STRINGS_DIRECTORY);
         File[] files = i18nDirectory.listFiles();
         int i = 1;
         for (File file : files) {
             if (file.getName() == null) {
                 continue;
             }
             if (file.getName().startsWith("FreeColMessages_")) {
                 try {
                     final String languageID = file.getName().substring(16, file.getName().indexOf("."));
                     if (languageID.equals(stringValue)) {
                         value = i;
                     }
                     i++;
                 } catch (Exception e) {
                     logger.log(Level.WARNING, "Exception in getLanguageNames()", e);
                     i++;
                     continue;
                 }
             }
         }
     }
,
>
, <(startLine=1626 endLine=1640 srcPath=/root/NewExperiment/freecolFilter/01341/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (Player p : getGame().getLivePlayers(player)) {
            Stance newStance = determineStance(p);
            if (newStance != player.getStance(p)) {
                if (newStance == Stance.WAR && peaceHolds(p)) {
                    ; // Peace treaty holds for now
                } else {
                    getAIMain().getFreeColServer().getInGameController()
                        .changeStance(player, newStance, p, true);
                    if (sb != null) {
                        sb.append(" ").append(p.getNation().getSuffix())
                            .append("->").append(newStance).append(", ");
                    }
                }
            }
        }
,
(startLine=193 endLine=203 srcPath=/root/NewExperiment/freecolFilter/01341/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        for (Player p : getGame().getLivePlayers(player)) {
            Stance newStance = determineStance(p);
            if (newStance != player.getStance(p)) {
                getAIMain().getFreeColServer().getInGameController()
                    .changeStance(player, newStance, p, true);
                if (sb != null) {
                    sb.append(" ").append(p.getNation().getSuffix())
                        .append("->").append(newStance).append(", ");
                }
            }
        }
,
>
, <(startLine=131 endLine=147 srcPath=/root/NewExperiment/freecolFilter/01735/src/net/sf/freecol/common/networking/UpdateMapGeneratorOptionsMessage.java)
                                   ServerPlayer serverPlayer) {
        if (serverPlayer == null || !serverPlayer.isAdmin()) {
            return serverPlayer.clientError("Not an admin: " + serverPlayer);
        }
        if (freeColServer.getServerState() != FreeColServer.ServerState.PRE_GAME) {
            return serverPlayer.clientError("Can not change map generator options, "
                + "server state = " + freeColServer.getServerState());
        }
        final Specification spec = freeColServer.getGame().getSpecification();
        final OptionGroup mapOptions = getMapGeneratorOptions();
        if (mapOptions == null) {
            return serverPlayer.clientError("No map generator options to merge");
        }

        return pgc(freeColServer)
            .updateMapGeneratorOptions(serverPlayer, mapOptions);
    }
,
(startLine=131 endLine=148 srcPath=/root/NewExperiment/freecolFilter/01735/src/net/sf/freecol/common/networking/UpdateGameOptionsMessage.java)
                                   ServerPlayer serverPlayer) {
        if (serverPlayer == null || !serverPlayer.isAdmin()) {
            return serverPlayer.clientError("Not an admin: " + serverPlayer);
        }
        if (freeColServer.getServerState() != FreeColServer.ServerState.PRE_GAME) {
            return serverPlayer.clientError("Can not change game options, "
                + "server state = " + freeColServer.getServerState());
        }

        final Specification spec = freeColServer.getGame().getSpecification();
        final OptionGroup gameOptions = getGameOptions();
        if (gameOptions == null) {
            return serverPlayer.clientError("No game options to merge");
        }

        return pgc(freeColServer)
            .updateGameOptions(serverPlayer, gameOptions);
    }
,
>
, <(startLine=226 endLine=238 srcPath=/root/NewExperiment/freecolFilter/01671/src/net/sf/freecol/tools/FlagTest.java)
    private void setColors() {
        flag.setUnionColor(unionColor.getColor());
        flag.setStarColor(starColor.getColor());
        flag.setDecorationColor(decorationColor.getColor());
        List<Color> colors = new ArrayList<>();
        for (ColorButton button : backgroundColors) {
            Color color = button.getColor();
            if (color != null) {
                colors.add(color);
            }
            flag.setBackgroundColors(colors);
        }
    }
,
(startLine=367 endLine=379 srcPath=/root/NewExperiment/freecolFilter/01671/src/net/sf/freecol/client/gui/dialog/ConfirmDeclarationDialog.java)
    private void setColors() {
        this.flag.setUnionColor(this.unionColor.getColor());
        this.flag.setStarColor(this.starColor.getColor());
        this.flag.setDecorationColor(this.decorationColor.getColor());
        List<Color> colors = new ArrayList<>();
        for (ColorButton button : this.backgroundColors) {
            Color color = button.getColor();
            if (color != null) {
                colors.add(color);
            }
            this.flag.setBackgroundColors(colors);
        }
    }
,
>
, <(startLine=172 endLine=187 srcPath=/root/NewExperiment/freecolFilter/00251/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        public ColonyTradeItemPanel(NegotiationDialog parent, Player source) {
            this.player = source;
            this.negotiationDialog = parent;
            addButton = new JButton(Messages.message("negotiationDialog.add"));
            addButton.addActionListener(this);
            addButton.setActionCommand("add");
            colonyBox = new JComboBox();
            updateColonyBox();

            setLayout(new HIGLayout(new int[] {0}, new int[] {0, 0, 0}));
            add(new JLabel(Messages.message("negotiationDialog.colony")),
                higConst.rc(1, 1));
            add(colonyBox, higConst.rc(2, 1));
            add(addButton, higConst.rc(3, 1));
            
        }
,
(startLine=273 endLine=285 srcPath=/root/NewExperiment/freecolFilter/00251/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        public GoldTradeItemPanel(NegotiationDialog parent, Player source) {
            this.player = source;
            this.negotiationDialog = parent;
            addButton = new JButton(Messages.message("negotiationDialog.add"));
            addButton.addActionListener(this);
            addButton.setActionCommand("add");
            spinner= new JSpinner(new SpinnerNumberModel(0, 0, player.getGold(), 1));
            setLayout(new HIGLayout(new int[] {0}, new int[] {0, 0, 0}));
            add(new JLabel(Messages.message("negotiationDialog.colony")),
                higConst.rc(1, 1));
            add(spinner, higConst.rc(2, 1));
            add(addButton, higConst.rc(3, 1));
        }
,
>
, <(startLine=46 endLine=58 srcPath=/root/NewExperiment/freecolFilter/00425/src/net/sf/freecol/common/util/RandomChoice.java)
    public static <T> T getWeightedRandom(PseudoRandom pseudoRandom, Collection<RandomChoice<T>> input) {
        if (input == null || input.isEmpty()) {
            return null;
        } else if (input.size() == 1) {
            return input.iterator().next().getObject();
        } else {
            int total = 0;
            for (RandomChoice choice : input) {
                total += choice.getProbability();
            }
            return select(input, pseudoRandom.nextInt(total));
        }
    }
,
(startLine=60 endLine=72 srcPath=/root/NewExperiment/freecolFilter/00425/src/net/sf/freecol/common/util/RandomChoice.java)
    public static <T> T getWeightedRandom(Random random, Collection<RandomChoice<T>> input) {
        if (input == null || input.isEmpty()) {
            return null;
        } else if (input.size() == 1) {
            return input.iterator().next().getObject();
        } else {
            int total = 0;
            for (RandomChoice choice : input) {
                total += choice.getProbability();
            }
            return select(input, random.nextInt(total));
        }
    }
,
>
, <(startLine=393 endLine=400 srcPath=/root/NewExperiment/freecolFilter/00153/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
    private void buildTerrainButton(String name, int terrain) {
        ImageIcon icon = new ImageIcon(library.getTerrainImage(terrain, 0, 0));
        JButton button = new JButton(name, icon);
        button.setHorizontalAlignment(SwingConstants.LEFT);
        button.setActionCommand(String.valueOf(terrain));
        button.addActionListener(this);
        listPanel.add(button);
    }
,
(startLine=402 endLine=409 srcPath=/root/NewExperiment/freecolFilter/00153/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
    private void buildTerrainButton(int terrain) {
        ImageIcon icon = new ImageIcon(library.getTerrainImage(terrain, 0, 0));
        JButton button = new JButton(FreeCol.specification.tileType(terrain).name, icon);
        button.setHorizontalAlignment(SwingConstants.LEFT);
        button.setActionCommand(String.valueOf(terrain));
        button.addActionListener(this);
        listPanel.add(button);
    }
,
>
, <(startLine=1939 endLine=1971 srcPath=/root/NewExperiment/freecolFilter/00148/src/net/sf/freecol/client/control/InGameController.java)
    public void trainUnitInEurope(int unitType) {
        Client client = freeColClient.getClient();
        Canvas canvas = freeColClient.getCanvas();
        Game game = freeColClient.getGame();
        Player myPlayer = freeColClient.getMyPlayer();
        Europe europe = myPlayer.getEurope();

        if (unitType != Unit.ARTILLERY && myPlayer.getGold() < Unit.getPrice(unitType) ||
                myPlayer.getGold() < europe.getArtilleryPrice()) {
            canvas.errorMessage("notEnoughGold");
            return;
        }

        Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
        trainUnitInEuropeElement.setAttribute("unitType", Integer.toString(unitType));

        Element reply = client.ask(trainUnitInEuropeElement);
        if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
            Element unitElement = (Element) reply.getChildNodes().item(0);
            Unit unit = (Unit) game.getFreeColGameObject(unitElement.getAttribute("ID"));
            if (unit == null) {
                unit = new Unit(game, unitElement);
            } else {
                unit.readFromXMLElement(unitElement);
            }
            europe.train(unit);
        } else {
            logger.warning("Could not train unit in europe.");
            return;
        }

        freeColClient.getCanvas().updateGoldLabel();
    }
,
(startLine=2006 endLine=2037 srcPath=/root/NewExperiment/freecolFilter/00148/src/net/sf/freecol/client/control/InGameController.java)
    public void recruitUnitInEurope(int slot) {
        Client client = freeColClient.getClient();
        Canvas canvas = freeColClient.getCanvas();
        Game game = freeColClient.getGame();
        Player myPlayer = freeColClient.getMyPlayer();
        Europe europe = myPlayer.getEurope();

        if (myPlayer.getGold() < myPlayer.getRecruitPrice()) {
            canvas.errorMessage("notEnoughGold");
            return;
        }

        Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
        recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(slot));

        Element reply = client.ask(recruitUnitInEuropeElement);
        if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
            Element unitElement = (Element) reply.getChildNodes().item(0);
            Unit unit = (Unit) game.getFreeColGameObject(unitElement.getAttribute("ID"));
            if (unit == null) {
                unit = new Unit(game, unitElement);
            } else {
                unit.readFromXMLElement(unitElement);
            }
            europe.recruit(slot, unit, Integer.parseInt(reply.getAttribute("newRecruitable")));
        } else {
            logger.warning("Could not recruit the specified unit in europe.");
            return;
        }
        
        freeColClient.getCanvas().updateGoldLabel();
    }
,
>
, <(startLine=380 endLine=400 srcPath=/root/NewExperiment/freecolFilter/00664/test/src/net/sf/freecol/server/model/ServerPlayerTest.java)
    public void testCheckGameOverUnitsGoingToEurope() {
        Game game = startSPT();
        Map map = getTestMap(spec().getTileType("model.tile.highSeas"));
        game.setMap(map);

        ServerPlayer dutch = (ServerPlayer) game.getPlayer("model.nation.dutch");

        UnitType galleonType = spec().getUnitType("model.unit.galleon");
        Unit galleon = new Unit(game,map.getTile(6, 8) , dutch, galleonType, UnitState.ACTIVE);
        Unit colonist = new Unit(game, galleon, dutch, colonistType, UnitState.SENTRY);
        assertTrue("Colonist should be aboard the galleon",colonist.getLocation() == galleon);
        assertEquals("Galleon should have a colonist onboard",1,galleon.getUnitCount());
        galleon.moveToEurope();

        assertFalse("Should not be game over, units between new world and europe",
                    dutch.checkForDeath());

        game.setTurn(new Turn(1600));
        assertTrue("Should be game over, no new world presence after 1600",
                   dutch.checkForDeath());
    }
,
(startLine=402 endLine=421 srcPath=/root/NewExperiment/freecolFilter/00664/test/src/net/sf/freecol/server/model/ServerPlayerTest.java)
    public void testCheckGameOverUnitsGoingToNewWorld() {
        Game game = startSPT();
        Map map = getTestMap();
        game.setMap(map);

        ServerPlayer dutch = (ServerPlayer) game.getPlayer("model.nation.dutch");

        Unit galleon = new Unit(game,dutch.getEurope() , dutch, galleonType, UnitState.ACTIVE);
        Unit colonist = new Unit(game, galleon, dutch, colonistType, UnitState.SENTRY);
        assertTrue("Colonist should be aboard the galleon",colonist.getLocation() == galleon);
        assertEquals("Galleon should have a colonist onboard",1,galleon.getUnitCount());
        galleon.moveToAmerica();

        assertFalse("Should not be game over, units between new world and europe",
                    dutch.checkForDeath());

        game.setTurn(new Turn(1600));
        assertTrue("Should be game over, no new world presence after 1600",
                   dutch.checkForDeath());
    }
,
>
, <(startLine=100 endLine=113 srcPath=/root/NewExperiment/freecolFilter/00148/src/net/sf/freecol/metaserver/NetworkHandler.java)
    private Element register(Connection connection, Element element) {
        String name = element.getAttribute("name");
        String address = connection.getSocket().getInetAddress().getHostAddress();
        int port = Integer.parseInt(element.getAttribute("port"));
        int slotsAvailable = Integer.parseInt(element.getAttribute("slotsAvailable"));
        int currentlyPlaying = Integer.parseInt(element.getAttribute("currentlyPlaying"));
        boolean isGameStarted = Boolean.valueOf(element.getAttribute("isGameStarted")).booleanValue();
        String version = element.getAttribute("version");
        int gameState = Integer.parseInt(element.getAttribute("gameState"));

        metaRegister.addServer(name, address, port, slotsAvailable, currentlyPlaying, isGameStarted, version, gameState);

        return null;
    }
,
(startLine=123 endLine=136 srcPath=/root/NewExperiment/freecolFilter/00148/src/net/sf/freecol/metaserver/NetworkHandler.java)
    private Element update(Connection connection, Element element) {
        String name = element.getAttribute("name");
        String address = connection.getSocket().getInetAddress().getHostAddress();
        int port = Integer.parseInt(element.getAttribute("port"));
        int slotsAvailable = Integer.parseInt(element.getAttribute("slotsAvailable"));
        int currentlyPlaying = Integer.parseInt(element.getAttribute("currentlyPlaying"));
        boolean isGameStarted = Boolean.valueOf(element.getAttribute("isGameStarted")).booleanValue();
        String version = element.getAttribute("version");
        int gameState = Integer.parseInt(element.getAttribute("gameState"));

        metaRegister.updateServer(name, address, port, slotsAvailable, currentlyPlaying, isGameStarted, version, gameState);

        return null;
    }
,
>
, <(startLine=1306 endLine=1443 srcPath=/root/NewExperiment/freecolFilter/00752/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    private void createTransportLists() {
        logger.finest("Entering method createTransportLists");

        ArrayList<Transportable> transportables = new ArrayList<Transportable>();

        // Add units to transport
        Iterator<AIUnit> aui = getAIUnitIterator();
        while (aui.hasNext()) {
            AIUnit au = aui.next();
            // naval units do not need transports
            if(au.getUnit().isNaval()){
                continue;
            }
            if (au.getTransportDestination() != null && au.getTransport() == null) {
                transportables.add(au);
            }
        }

        // Add goods to transport
        Iterator<AIColony> aci = getAIColonyIterator();
        while (aci.hasNext()) {
            AIColony ac = aci.next();
            Iterator<AIGoods> agi = ac.getAIGoodsIterator();
            while (agi.hasNext()) {
                AIGoods ag = agi.next();
                if (ag.getTransportDestination() != null && ag.getTransport() == null) {
                    transportables.add(ag);
                }
            }
        }

        // save further processing
        if(transportables.isEmpty()){
            return;
        }
        
        // Update the priority
        for (Transportable t : transportables){
            t.increaseTransportPriority();
        }

        // get available transports
        ArrayList<Mission> vacantTransports = new ArrayList<Mission>();
        Iterator<AIUnit> iter = getAIUnitIterator();
        while (iter.hasNext()) {
            AIUnit au = iter.next();
            if (au.hasMission() && au.getMission() instanceof TransportMission
                    && !(au.getUnit().getLocation() instanceof Europe)) {
                vacantTransports.add(au.getMission());
            }
        }
        
        // save further processing
        // we must only do this verification after the priority update
        if(vacantTransports.isEmpty()){
            return;
        }
        
        // order the list by priority
        Collections.sort(transportables, new Comparator<Transportable>() {
            public int compare(Transportable o1, Transportable o2) {
                if (o1 == o2) {
                    return 0;
                }
                int result = o2.getTransportPriority() - o1.getTransportPriority();
                if (result == 0) {
                    result = o1.getId().compareTo(o2.getId());
                }
                return result;
            }
        });

        // Since we are manipulating the contents of the list, we need to have a clone list
        //to iterate through
        // If a good is already in a carrier, just add it the transport list
        // Note however that it may not be possible to complete such transport
        //in which case, the carrier should dump the transportable in the nearest colony
        ArrayList<Transportable> iteratingList = new ArrayList<Transportable>(transportables);
        for(Transportable t : iteratingList){
            Location transportableLoc = t.getTransportLocatable().getLocation();
            boolean isTransportableAlreadyOnCarrier = transportableLoc instanceof Unit;
            if (isTransportableAlreadyOnCarrier) {
                AIUnit carrierAI = (AIUnit) getAIMain().getAIObject((Unit) transportableLoc);
                Mission m = carrierAI.getMission();
                if (m instanceof TransportMission) {
                    ((TransportMission) m).addToTransportList(t);
                }
                transportables.remove(t);
            }
        }

        while (transportables.size() > 0) {
            Transportable t = transportables.get(0);
            TransportMission bestTransport = null;
            int bestTransportSpace = 0;
            int bestTransportTurns = Integer.MAX_VALUE;
            for (int i = 0; i < vacantTransports.size(); i++) {
                TransportMission tm = (TransportMission) vacantTransports.get(i);
                if (t.getTransportSource().getTile() == tm.getUnit().getLocation().getTile()) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = 0;
                        break;
                    } else {
                        continue;
                    }
                }
                PathNode path = tm.getPath(t);
                if (path != null && path.getTotalTurns() <= bestTransportTurns) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0
                            && (path.getTotalTurns() < bestTransportTurns || transportSpace > bestTransportSpace)) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = path.getTotalTurns();
                    }
                }
            }
            if (bestTransport == null) {
                // No more transports available:
                break;
            }
            bestTransport.addToTransportList(t);
            transportables.remove(t);
            vacantTransports.remove(bestTransport);
            bestTransportSpace--;
            for (int i = 0; i < transportables.size() && bestTransportSpace > 0; i++) {
                Transportable t2 = transportables.get(0);
                if (t2.getTransportLocatable().getLocation() == t.getTransportLocatable().getLocation()) {
                    bestTransport.addToTransportList(t2);
                    transportables.remove(t2);
                    bestTransportSpace--;
                }
            }
        }
    }
,
(startLine=2241 endLine=2380 srcPath=/root/NewExperiment/freecolFilter/00752/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void createTransportLists() {
        logger.finest("Entering method createTransportLists");
        if (!getPlayer().isEuropean()) {
            return;
        }
        ArrayList<Transportable> transportables = new ArrayList<Transportable>();

        // Add units to transport
        Iterator<AIUnit> aui = getAIUnitIterator();
        while (aui.hasNext()) {
            AIUnit au = aui.next();
            // naval units do not need transports
            if(au.getUnit().isNaval()){
                continue;
            }
            if (au.getTransportDestination() != null && au.getTransport() == null) {
                transportables.add(au);
            }
        }

        // Add goods to transport
        Iterator<AIColony> aci = getAIColonyIterator();
        while (aci.hasNext()) {
            AIColony ac = aci.next();
            Iterator<AIGoods> agi = ac.getAIGoodsIterator();
            while (agi.hasNext()) {
                AIGoods ag = agi.next();
                if (ag.getTransportDestination() != null && ag.getTransport() == null) {
                    transportables.add(ag);
                }
            }
        }

        // save further processing
        if(transportables.isEmpty()){
            return;
        }

        // Update the priority
        for (Transportable t : transportables){
            t.increaseTransportPriority();
        }

        // get available transports
        ArrayList<Mission> vacantTransports = new ArrayList<Mission>();
        Iterator<AIUnit> iter = getAIUnitIterator();
        while (iter.hasNext()) {
            AIUnit au = iter.next();
            if (au.hasMission() && au.getMission() instanceof TransportMission
                    && !(au.getUnit().getLocation() instanceof Europe)) {
                vacantTransports.add(au.getMission());
            }
        }

        // save further processing
        // we must only do this verification after the priority update
        if(vacantTransports.isEmpty()){
            return;
        }

        // order the list by priority
        Collections.sort(transportables, new Comparator<Transportable>() {
            public int compare(Transportable o1, Transportable o2) {
                if (o1 == o2) {
                    return 0;
                }
                int result = o2.getTransportPriority() - o1.getTransportPriority();
                if (result == 0) {
                    result = o1.getId().compareTo(o2.getId());
                }
                return result;
            }
        });

        // Since we are manipulating the contents of the list, we need to have a clone list
        //to iterate through
        // If a good is already in a carrier, just add it the transport list
        // Note however that it may not be possible to complete such transport
        //in which case, the carrier should dump the transportable in the nearest colony
        ArrayList<Transportable> iteratingList = new ArrayList<Transportable>(transportables);
        for(Transportable t : iteratingList){
            Location transportableLoc = t.getTransportLocatable().getLocation();
            boolean isTransportableAlreadyOnCarrier = transportableLoc instanceof Unit;
            if (isTransportableAlreadyOnCarrier) {
                AIUnit carrierAI = (AIUnit) getAIMain().getAIObject((Unit) transportableLoc);
                Mission m = carrierAI.getMission();
                if (m instanceof TransportMission) {
                    ((TransportMission) m).addToTransportList(t);
                }
                transportables.remove(t);
            }
        }

        while (transportables.size() > 0) {
            Transportable t = transportables.get(0);
            TransportMission bestTransport = null;
            int bestTransportSpace = 0;
            int bestTransportTurns = Integer.MAX_VALUE;
            for (int i = 0; i < vacantTransports.size(); i++) {
                TransportMission tm = (TransportMission) vacantTransports.get(i);
                if (t.getTransportSource().getTile() == tm.getUnit().getLocation().getTile()) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = 0;
                        break;
                    } else {
                        continue;
                    }
                }
                PathNode path = tm.getPath(t);
                if (path != null && path.getTotalTurns() <= bestTransportTurns) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0
                            && (path.getTotalTurns() < bestTransportTurns || transportSpace > bestTransportSpace)) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = path.getTotalTurns();
                    }
                }
            }
            if (bestTransport == null) {
                // No more transports available:
                break;
            }
            bestTransport.addToTransportList(t);
            transportables.remove(t);
            vacantTransports.remove(bestTransport);
            bestTransportSpace--;
            for (int i = 0; i < transportables.size() && bestTransportSpace > 0; i++) {
                Transportable t2 = transportables.get(0);
                if (t2.getTransportLocatable().getLocation() == t.getTransportLocatable().getLocation()) {
                    bestTransport.addToTransportList(t2);
                    transportables.remove(t2);
                    bestTransportSpace--;
                }
            }
        }
    }
,
(startLine=722 endLine=838 srcPath=/root/NewExperiment/freecolFilter/00752/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    protected void createTransportLists() {
        logger.finest("Entering method createTransportLists");
        if (!getPlayer().isEuropean()) {
            return;
        }
        ArrayList<Transportable> transportables = new ArrayList<Transportable>();

        // Add units
        Iterator<AIUnit> aui = getAIUnitIterator();
        while (aui.hasNext()) {
            AIUnit au = aui.next();
            // naval units do not need transports
            if(au.getUnit().isNaval()){
                continue;
            }
            if (au.getTransportDestination() != null && au.getTransport() == null) {
                transportables.add(au);
            }
        }

        // Add goods
        Iterator<AIColony> aci = getAIColonyIterator();
        while (aci.hasNext()) {
            AIColony ac = aci.next();
            Iterator<AIGoods> agi = ac.getAIGoodsIterator();
            while (agi.hasNext()) {
                AIGoods ag = agi.next();
                if (ag.getTransportDestination() != null && ag.getTransport() == null) {
                    transportables.add(ag);
                }
            }
        }

        Collections.sort(transportables, new Comparator<Transportable>() {
                public int compare(Transportable o1, Transportable o2) {
                    if (o1 == o2) {
                        return 0;
                    }
                    int result = o2.getTransportPriority() - o1.getTransportPriority();
                    if (result == 0) {
                        result = o1.getId().compareTo(o2.getId());
                    }
                    return result;
                }
            });

        ArrayList<Mission> vacantTransports = new ArrayList<Mission>();
        Iterator<AIUnit> iter = getAIUnitIterator();
        while (iter.hasNext()) {
            AIUnit au = iter.next();
            if (au.hasMission() && au.getMission() instanceof TransportMission
                && !(au.getUnit().getLocation() instanceof Europe)) {
                vacantTransports.add(au.getMission());
            }
        }

        Iterator<Transportable> ti = transportables.iterator();
        while (ti.hasNext()) {
            Transportable t = ti.next();
            t.increaseTransportPriority();
            if (t.getTransportLocatable().getLocation() instanceof Unit) {
                Mission m = ((AIUnit) getAIMain().getAIObject(
                                                              (FreeColGameObject) t.getTransportLocatable().getLocation())).getMission();
                if (m instanceof TransportMission) {
                    ((TransportMission) m).addToTransportList(t);
                }
                ti.remove();
            }
        }

        while (transportables.size() > 0) {
            Transportable t = transportables.get(0);
            TransportMission bestTransport = null;
            int bestTransportSpace = 0;
            int bestTransportTurns = Integer.MAX_VALUE;
            for (int i = 0; i < vacantTransports.size(); i++) {
                TransportMission tm = (TransportMission) vacantTransports.get(i);
                if (t.getTransportSource().getTile() == tm.getUnit().getLocation().getTile()) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = 0;
                        break;
                    } else {
                        continue;
                    }
                }
                PathNode path = tm.getPath(t);
                if (path != null && path.getTotalTurns() <= bestTransportTurns) {
                    int transportSpace = tm.getAvailableSpace(t);
                    if (transportSpace > 0
                        && (path.getTotalTurns() < bestTransportTurns || transportSpace > bestTransportSpace)) {
                        bestTransport = tm;
                        bestTransportSpace = transportSpace;
                        bestTransportTurns = path.getTotalTurns();
                    }
                }
            }
            if (bestTransport == null) {
                // No more transports available:
                break;
            }
            bestTransport.addToTransportList(t);
            transportables.remove(t);
            vacantTransports.remove(bestTransport);
            bestTransportSpace--;
            for (int i = 0; i < transportables.size() && bestTransportSpace > 0; i++) {
                Transportable t2 = transportables.get(0);
                if (t2.getTransportLocatable().getLocation() == t.getTransportLocatable().getLocation()) {
                    bestTransport.addToTransportList(t2);
                    transportables.remove(t2);
                    bestTransportSpace--;
                }
            }
        }
    }
,
>
, <(startLine=1810 endLine=1859 srcPath=/root/NewExperiment/freecolFilter/00883/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    public boolean isTargetValidForSeekAndDestroy(Unit attacker, Tile tile) {
        Player attackerPlayer = attacker.getOwner();

        // Insist the attacker exists.
        if (attacker == null) return false;

        // Determine the defending player.
        Settlement settlement = tile.getSettlement();
        Unit defender = tile.getDefendingUnit(attacker);
        Player defenderPlayer = (settlement != null) ? settlement.getOwner()
            : (defender != null) ? defender.getOwner()
            : null;

        // Insist there be a defending player.
        if (defenderPlayer == null) return false;

        // Can not attack our own units.
        if (attackerPlayer == defenderPlayer) return false;

        // If European, do not attack if not at war.
        // If native, do not attack if not at war and at least content.
        // Otherwise some attacks are allowed even if not at war.
        boolean atWar = attackerPlayer.atWarWith(defenderPlayer);
        if (attackerPlayer.isEuropean()) {
            if (!atWar) return false;
        } else if (attackerPlayer.isIndian()) {
            if (!atWar && attackerPlayer.getTension(defenderPlayer)
                .getLevel().compareTo(Tension.Level.CONTENT) <= 0) {
                return false;
            }
        }

        // A naval unit can never attack a land unit or settlement,
        // but a land unit *can* attack a naval unit if it is on land.
        // Otherwise naval units can only fight at sea, land units
        // only on land.
        if (attacker.isNaval()) {
            if (settlement != null
                || !defender.isNaval() || defender.getTile().isLand()) {
                return false;
            }
        } else {
            if (defender != null && !defender.getTile().isLand()) {
                return false;
            }
        }

        // Otherwise, attack.
        return true;
    }
,
(startLine=806 endLine=855 srcPath=/root/NewExperiment/freecolFilter/00883/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    public boolean isTargetValidForSeekAndDestroy(Unit attacker, Tile tile) {
        Player attackerPlayer = attacker.getOwner();

        // Insist the attacker exists.
        if (attacker == null) return false;

        // Determine the defending player.
        Settlement settlement = tile.getSettlement();
        Unit defender = tile.getDefendingUnit(attacker);
        Player defenderPlayer = (settlement != null) ? settlement.getOwner()
            : (defender != null) ? defender.getOwner()
            : null;

        // Insist there be a defending player.
        if (defenderPlayer == null) return false;

        // Can not attack our own units.
        if (attackerPlayer == defenderPlayer) return false;

        // If European, do not attack if not at war.
        // If native, do not attack if not at war and at least content.
        // Otherwise some attacks are allowed even if not at war.
        boolean atWar = attackerPlayer.atWarWith(defenderPlayer);
        if (attackerPlayer.isEuropean()) {
            if (!atWar) return false;
        } else if (attackerPlayer.isIndian()) {
            if (!atWar && attackerPlayer.getTension(defenderPlayer)
                .getLevel().compareTo(Tension.Level.CONTENT) <= 0) {
                return false;
            }
        }

        // A naval unit can never attack a land unit or settlement,
        // but a land unit *can* attack a naval unit if it is on land.
        // Otherwise naval units can only fight at sea, land units
        // only on land.
        if (attacker.isNaval()) {
            if (settlement != null
                || !defender.isNaval() || defender.getTile().isLand()) {
                return false;
            }
        } else {
            if (defender != null && !defender.getTile().isLand()) {
                return false;
            }
        }

        // Otherwise, attack.
        return true;
    }
,
>
, <(startLine=299 endLine=320 srcPath=/root/NewExperiment/freecolFilter/00548/test/src/net/sf/freecol/common/model/PlayerTest.java)
    public void testCheckGameOverUnitsGoingToEurope() {
        Game game = getStandardGame();
        
        Map map = getTestMap(spec().getTileType("model.tile.highSeas"));
        game.setMap(map);
        
        Player dutch = game.getPlayer("model.nation.dutch");
        
        
        UnitType freeColonist = spec().getUnitType("model.unit.freeColonist");
        UnitType galleonType = spec().getUnitType("model.unit.galleon");
        Unit galleon = new Unit(game,map.getTile(6, 8) , dutch, galleonType, UnitState.ACTIVE);
        Unit colonist = new Unit(game, galleon, dutch, freeColonist, UnitState.SENTRY);
        assertTrue("Colonist should be aboard the galleon",colonist.getLocation() == galleon);
        assertEquals("Galleon should have a colonist onboard",1,galleon.getUnitCount());
        galleon.moveToEurope();
        
        assertFalse("Should not be game over, units between new world and europe",Player.checkForDeath(dutch));
        
        game.setTurn(new Turn(1600));
        assertTrue("Should be game over, no new world presence after 1600",Player.checkForDeath(dutch));
    }
,
(startLine=322 endLine=342 srcPath=/root/NewExperiment/freecolFilter/00548/test/src/net/sf/freecol/common/model/PlayerTest.java)
    public void testCheckGameOverUnitsGoingToNewWorld() {
        Game game = getStandardGame();
        Map map = getTestMap();
        game.setMap(map);
        
        Player dutch = game.getPlayer("model.nation.dutch");
        
        
        UnitType freeColonist = spec().getUnitType("model.unit.freeColonist");
        UnitType galleonType = spec().getUnitType("model.unit.galleon");
        Unit galleon = new Unit(game,dutch.getEurope() , dutch, galleonType, UnitState.ACTIVE);
        Unit colonist = new Unit(game, galleon, dutch, freeColonist, UnitState.SENTRY);
        assertTrue("Colonist should be aboard the galleon",colonist.getLocation() == galleon);
        assertEquals("Galleon should have a colonist onboard",1,galleon.getUnitCount());
        galleon.moveToAmerica();

        assertFalse("Should not be game over, units between new world and europe",Player.checkForDeath(dutch));
        
        game.setTurn(new Turn(1600));
        assertTrue("Should be game over, no new world presence after 1600",Player.checkForDeath(dutch));
    }
,
>
, <(startLine=997 endLine=1025 srcPath=/root/NewExperiment/freecolFilter/01263/test/src/net/sf/freecol/server/control/InGameControllerTest.java)
    public void testPioneerDiesNotLosesEquipment() {
        Game game = ServerTestHelper.startServerGame(getTestMap());
        Map map = game.getMap();
        InGameController igc = ServerTestHelper.getInGameController();

        List<CombatResult> crs;
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");

        Tile tile1 = map.getTile(5, 8);
        tile1.setExplored(dutch, true);
        tile1.setExplored(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExplored(dutch, true);
        tile2.setExplored(french, true);
        Unit pioneer = new ServerUnit(game, tile1, dutch, colonistType, pioneerRole);
        Unit soldier = new ServerUnit(game, tile2, french, veteranType, dragoonRole);
        soldier.setMovesLeft(1);

        // Soldier wins and kills the pioneer
        crs = fakeAttackResult(CombatResult.WIN, soldier, pioneer);
        assertTrue("Soldier v Pioneer failed", crs.size() == 2
                   && crs.get(0) == CombatResult.WIN
                   && crs.get(1) == CombatResult.SLAUGHTER_UNIT);
        igc.combat((ServerPlayer) french, soldier, pioneer, crs);

        assertTrue("Pioneer should be dead",
                   pioneer.isDisposed());
    }
,
(startLine=1027 endLine=1055 srcPath=/root/NewExperiment/freecolFilter/01263/test/src/net/sf/freecol/server/control/InGameControllerTest.java)
    public void testScoutDiesNotLosesEquipment() {
        Game game = ServerTestHelper.startServerGame(getTestMap());
        Map map = game.getMap();
        InGameController igc = ServerTestHelper.getInGameController();

        List<CombatResult> crs;
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");

        Tile tile1 = map.getTile(5, 8);
        tile1.setExplored(dutch, true);
        tile1.setExplored(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExplored(dutch, true);
        tile2.setExplored(french, true);
        Unit scout = new ServerUnit(game, tile1, dutch, colonistType, scoutRole);
        Unit soldier = new ServerUnit(game, tile2, french, veteranType, dragoonRole);
        scout.setMovesLeft(1);

        // Soldier wins and kills the scout
        crs = fakeAttackResult(CombatResult.WIN, soldier, scout);
        assertTrue("Soldier v scout failed", crs.size() == 2
                   && crs.get(0) == CombatResult.WIN
                   && crs.get(1) == CombatResult.SLAUGHTER_UNIT);
        igc.combat((ServerPlayer) french, soldier, scout, crs);

        assertTrue("Scout should be dead",
                   scout.isDisposed());
    }
,
(startLine=1430 endLine=1456 srcPath=/root/NewExperiment/freecolFilter/01263/test/src/net/sf/freecol/server/control/InGameControllerTest.java)
    public void testScoutDemotedBySoldier() {
        Game game = ServerTestHelper.startServerGame(getTestMap(plains));
        Map map = game.getMap();
        InGameController igc = ServerTestHelper.getInGameController();

        List<CombatResult> crs;
        Player dutch = game.getPlayer("model.nation.dutch");
        Player french = game.getPlayer("model.nation.french");
        Tile tile1 = map.getTile(5, 8);
        tile1.setExplored(dutch, true);
        tile1.setExplored(french, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExplored(dutch, true);
        tile2.setExplored(french, true);
        Unit scout = new ServerUnit(game, tile1, dutch, colonistType, scoutRole);
        Unit soldier = new ServerUnit(game, tile2, french, colonistType, scoutRole);

        // Scout loses and is slaughtered
        crs = fakeAttackResult(CombatResult.LOSE, scout, soldier);
        assertTrue("Scout v Soldier failed", crs.size() == 2
                   && crs.get(0) == CombatResult.LOSE
                   && crs.get(1) == CombatResult.SLAUGHTER_UNIT);
        igc.combat((ServerPlayer) dutch, scout, soldier, crs);

        assertTrue("Scout should be disposed",
                   scout.isDisposed());
    }
,
>
, <(startLine=94 endLine=109 srcPath=/root/NewExperiment/freecolFilter/01452/src/net/sf/freecol/client/gui/panel/ReportMilitaryPanel.java)
    protected void addREFUnits() {
        final Specification spec = getSpecification();
        final Nation refNation = getMyPlayer().getNation().getREFNation();

        reportPanel.add(Utility.localizedLabel(refNation), "span, split 2");
        reportPanel.add(new JSeparator(JSeparator.HORIZONTAL), "growx");

        List<AbstractUnit> refUnits = igc().getREFUnits();
        if (refUnits != null) {
            for (AbstractUnit au : refUnits) {
                if (!au.getType(spec).isNaval()) {
                    reportPanel.add(createUnitTypeLabel(au), "sg");
                }
            }
        }
    }
,
(startLine=81 endLine=97 srcPath=/root/NewExperiment/freecolFilter/01452/src/net/sf/freecol/client/gui/panel/ReportNavalPanel.java)
    protected void addREFUnits() {
        final Specification spec = getSpecification();
        final Nation refNation = getMyPlayer().getNation().getREFNation();

        reportPanel.add(new JLabel(Messages.getName(refNation)),
                        "span, split 2");
        reportPanel.add(new JSeparator(JSeparator.HORIZONTAL), "growx");

        List<AbstractUnit> refUnits = igc().getREFUnits();
        if (refUnits != null) {
            for (AbstractUnit au : refUnits) {
                if (au.getType(spec).isNaval()) {
                    reportPanel.add(createUnitTypeLabel(au), "sg");
                }
            }
        }
    }
,
>
, <(startLine=329 endLine=351 srcPath=/root/NewExperiment/freecolFilter/00454/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            if (getRandom().nextInt(40) == 21) {
                int total = 0;
                ArrayList<UnitType> navalUnits = new ArrayList<UnitType>();
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasAbility("model.ability.navalUnit") && unitType.hasPrice()) {
                        navalUnits.add(unitType);
                        total += europe.getUnitPrice(unitType);
                    }
                }

                UnitType unitToPurchase = null;
                int random = getRandom().nextInt(total);
                total = 0;
                for (UnitType unitType : navalUnits) {
                    total += unitType.getPrice();
                    if (random < total) {
                        unitToPurchase = unitType;
                        break;
                    }
                }
                getPlayer().modifyGold(europe.getUnitPrice(unitToPurchase));
                this.trainAIUnitInEurope(unitToPurchase);
            }
,
(startLine=421 endLine=443 srcPath=/root/NewExperiment/freecolFilter/00454/src/net/sf/freecol/server/ai/AIPlayer.java)
            if (getRandom().nextInt(40) == 21) {
                int total = 0;
                ArrayList<UnitType> navalUnits = new ArrayList<UnitType>();
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasAbility("model.ability.navalUnit") && unitType.hasPrice()) {
                        navalUnits.add(unitType);
                        total += europe.getUnitPrice(unitType);
                    }
                }
                
                UnitType unitToPurchase = null;
                int random = getRandom().nextInt(total);
                total = 0;
                for (UnitType unitType : navalUnits) {
                    total += unitType.getPrice();
                    if (random < total) {
                        unitToPurchase = unitType;
                        break;
                    }
                }
                player.modifyGold(europe.getUnitPrice(unitToPurchase));
                this.trainAIUnitInEurope(unitToPurchase);
            }
,
>
, <(startLine=128 endLine=140 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/common/model/Europe.java)
    protected int priceGoods(List<AbstractGoods> goods) {
        Player player = getOwner();
        Market market = player.getMarket();
        int price = 0;
        for (AbstractGoods ag : goods) {
            if (ag.getAmount() <= 0) continue;
            GoodsType goodsType = ag.getType();
            // Refuse to trade in boycotted goods
            if (!player.canTrade(goodsType)) return -1;
            price += market.getBidPrice(goodsType, ag.getAmount());
        }
        return price;
    }
,
(startLine=347 endLine=358 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/common/model/Europe.java)
    public int priceRoleEquipment(Role role, int roleCount) {
        Player player = getOwner();
        Market market = player.getMarket();
        int price = 0;
        for (AbstractGoods ag : role.getRequiredGoods(roleCount)) {
            GoodsType goodsType = ag.getType();
            // Refuse to trade in boycotted goods
            if (!player.canTrade(goodsType)) return -1;
            price += market.getBidPrice(goodsType, ag.getAmount());
        }
        return price;
    }
,
>
, <(startLine=4865 endLine=4910 srcPath=/root/NewExperiment/freecolFilter/00715/src/net/sf/freecol/server/control/InGameController.java)
                                     Goods goods, int amount) {
        settlement.makeContactSettlement(serverPlayer);
        if (!isTransactionSessionOpen(unit, settlement)) {
            return Message.clientError("Trying to buy without opening a transaction session");
        }
        java.util.Map<String,Object> session
            = getTransactionSession(unit, settlement);
        if (!(Boolean) session.get("canBuy")) {
            return Message.clientError("Trying to buy in a session where buying is not allowed.");
        }
        if (unit.getSpaceLeft() <= 0) {
            return Message.clientError("Unit is full, unable to buy.");
        }
        // Check that this is the agreement that was made
        AIPlayer ai = (AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner());
        int returnGold = ai.buyProposition(unit, settlement, goods, amount);
        if (returnGold != amount) {
            return Message.clientError("This was not the price we agreed upon! Cheater?");
        }
        // Check this is funded.
        if (serverPlayer.getGold() < amount) {
            return Message.clientError("Insufficient gold to buy.");
        }

        ChangeSet cs = new ChangeSet();

        // Valid, make the trade.
        moveGoods(goods, unit);
        cs.add(See.perhaps(), unit);

        Player settlementPlayer = settlement.getOwner();
        settlement.updateWantedGoods();
        settlement.getTile().updateIndianSettlementInformation(serverPlayer);
        cs.add(See.only(serverPlayer),
            settlement.modifyAlarm(serverPlayer, -amount / 50));
        settlementPlayer.modifyGold(amount);
        serverPlayer.modifyGold(-amount);
        cs.add(See.only(serverPlayer), settlement);
        cs.addPartial(See.only(serverPlayer), serverPlayer, "gold");
        session.put("actionTaken", true);
        session.put("canBuy", false);

        // Others can see the unit capacity.
        sendToOthers(serverPlayer, cs);
        return cs.build(serverPlayer);
    }
,
(startLine=4924 endLine=4963 srcPath=/root/NewExperiment/freecolFilter/00715/src/net/sf/freecol/server/control/InGameController.java)
                                    Goods goods, int amount) {
        settlement.makeContactSettlement(serverPlayer);
        if (!isTransactionSessionOpen(unit, settlement)) {
            return Message.clientError("Trying to sell without opening a transaction session");
        }
        java.util.Map<String,Object> session
            = getTransactionSession(unit, settlement);
        if (!(Boolean) session.get("canSell")) {
            return Message.clientError("Trying to sell in a session where selling is not allowed.");
        }

        // Check that the gold is the agreed amount
        AIPlayer ai = (AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner());
        int returnGold = ai.sellProposition(unit, settlement, goods, amount);
        if (returnGold != amount) {
            return Message.clientError("This was not the price we agreed upon! Cheater?");
        }

        ChangeSet cs = new ChangeSet();

        // Valid, make the trade.
        moveGoods(goods, settlement);
        cs.add(See.perhaps(), unit);

        Player settlementPlayer = settlement.getOwner();
        settlementPlayer.modifyGold(-amount);
        cs.add(See.only(serverPlayer), settlement.modifyAlarm(serverPlayer,
                -settlement.getPrice(goods) / 500));
        serverPlayer.modifyGold(amount);
        settlement.updateWantedGoods();
        settlement.getTile().updateIndianSettlementInformation(serverPlayer);
        cs.add(See.only(serverPlayer), settlement);
        cs.addPartial(See.only(serverPlayer), serverPlayer, "gold");
        session.put("actionTaken", true);
        session.put("canSell", false);

        // Others can see the unit capacity.
        sendToOthers(serverPlayer, cs);
        return cs.build(serverPlayer);
    }
,
>
, <(startLine=371 endLine=380 srcPath=/root/NewExperiment/freecolFilter/00444/src/net/sf/freecol/common/model/FreeColObject.java)
        throws XMLStreamException {
        out.writeStartElement(tagName);
        
        out.writeAttribute(ARRAY_SIZE, Integer.toString(array.length));
        for (int x=0; x < array.length; x++) {
            out.writeAttribute("x" + Integer.toString(x), array[x].toString());
        }
        
        out.writeEndElement();
    }
,
(startLine=393 endLine=402 srcPath=/root/NewExperiment/freecolFilter/00444/src/net/sf/freecol/common/model/FreeColObject.java)
        throws XMLStreamException {
        out.writeStartElement(tagName);
        
        out.writeAttribute(ARRAY_SIZE, Integer.toString(array.length));
        for (int x=0; x < array.length; x++) {
            out.writeAttribute("x" + Integer.toString(x), Integer.toString(array[x]));
        }
        
        out.writeEndElement();
    }
,
(startLine=415 endLine=424 srcPath=/root/NewExperiment/freecolFilter/00444/src/net/sf/freecol/common/model/FreeColObject.java)
        throws XMLStreamException {
        out.writeStartElement(tagName);
        
        out.writeAttribute(ARRAY_SIZE, Integer.toString(array.size()));
        for (int x=0; x < array.size(); x++) {
            out.writeAttribute("x" + Integer.toString(x), array.get(x).toString());
        }
        
        out.writeEndElement();
    }
,
>
, <(startLine=3224 endLine=3236 srcPath=/root/NewExperiment/freecolFilter/00166/src/net/sf/freecol/common/model/Unit.java)
        if (enemyUnit.isUndead()) {
            // this unit is captured, don't show old owner's messages to new owner
            Iterator i = getGame().getModelMessageIterator(getOwner());
            while (i.hasNext()) {
                ((ModelMessage) i.next()).setBeenDisplayed(true);
            }
            messageID = "model.unit.unitCaptured";
            type = ModelMessage.UNIT_LOST;
            setHitpoints(getInitialHitpoints(enemyUnit.getType()));
            setLocation(enemyUnit.getTile());
            setOwner(enemyUnit.getOwner());
            setType(UNDEAD);
        } else if (getType() == ARTILLERY) {
,
(startLine=3278 endLine=3289 srcPath=/root/NewExperiment/freecolFilter/00166/src/net/sf/freecol/common/model/Unit.java)
            if (enemyUnit.getOwner().isEuropean()) {
                // this unit is captured, don't show old owner's messages to new owner
                Iterator i = getGame().getModelMessageIterator(getOwner());
                while (i.hasNext()) {
                    ((ModelMessage) i.next()).setBeenDisplayed(true);
                }
                messageID = "model.unit.unitCaptured";
                type = ModelMessage.UNIT_LOST;
                setHitpoints(getInitialHitpoints(enemyUnit.getType()));
                setLocation(enemyUnit.getTile());
                setOwner(enemyUnit.getOwner());
            } else {
,
>
, <(startLine=1253 endLine=1263 srcPath=/root/NewExperiment/freecolFilter/00301/src/net/sf/freecol/common/model/Colony.java)
    private int getNextHammersForBuilding() {
        if (getCurrentlyBuilding() >= Colony.BUILDING_UNIT_ADDITION) {
            int unitTypeIndex = getCurrentlyBuilding() - BUILDING_UNIT_ADDITION;
            UnitType unitType = FreeCol.getSpecification().getUnitType(unitTypeIndex);
            return Unit.getNextHammers(unitType);
        } else if (currentlyBuilding != -1) {
            return getBuilding(currentlyBuilding).getNextHammers();
        } else {
            return -1;
        }
    }
,
(startLine=1265 endLine=1275 srcPath=/root/NewExperiment/freecolFilter/00301/src/net/sf/freecol/common/model/Colony.java)
    private int getNextToolsForBuilding() {
        if (getCurrentlyBuilding() >= Colony.BUILDING_UNIT_ADDITION) {
            int unitTypeIndex = getCurrentlyBuilding() - BUILDING_UNIT_ADDITION;
            UnitType unitType = FreeCol.getSpecification().getUnitType(unitTypeIndex);
            return Unit.getNextTools(unitType);
        } else if (currentlyBuilding != -1) {
            return getBuilding(currentlyBuilding).getNextTools();
        } else {
            return -1;
        }
    }
,
>
, <(startLine=529 endLine=554 srcPath=/root/NewExperiment/freecolFilter/01050/test/src/net/sf/freecol/server/model/ServerBuildingTest.java)
    public void testTeachPettyCriminals() {
        spec().getBooleanOption(GameOptions.ALLOW_STUDENT_SELECTION)
            .setValue(false);
        Game game = ServerTestHelper.startServerGame(getTestMap(true));

        Colony colony = getSchoolColony(4, SchoolLevel.UNIVERSITY);
        Building university = colony.getBuilding(universityType);
        Iterator<Unit> units = colony.getUnitIterator();

        Unit criminal = units.next();
        criminal.setType(pettyCriminalType);
        criminal.setLocation(colony.getBuilding(townHallType));

        Unit teacher = units.next();
        teacher.setType(expertOreMinerType);

        teacher.setLocation(university);
        assertEquals(teacher.getNeededTurnsOfTraining(), 4);
        assertTrue(criminal.canBeStudent(teacher));
        assertEquals(criminal, teacher.getStudent());

        // PETTY_CRIMINALS become INDENTURED_SERVANTS
        trainForTurns(colony, teacher.getNeededTurnsOfTraining());
        assertEquals(0, getUnitList(colony, pettyCriminalType).size());
        assertEquals(indenturedServantType, criminal.getType());
    }
,
(startLine=560 endLine=583 srcPath=/root/NewExperiment/freecolFilter/01050/test/src/net/sf/freecol/server/model/ServerBuildingTest.java)
    public void testTeachPettyCriminalsByMaster() {
        spec().getBooleanOption(GameOptions.ALLOW_STUDENT_SELECTION)
            .setValue(false);
        Game game = ServerTestHelper.startServerGame(getTestMap(true));

        Colony colony = getSchoolColony(4, SchoolLevel.UNIVERSITY);
        Building university = colony.getBuilding(universityType);
        Iterator<Unit> units = colony.getUnitIterator();

        Unit criminal = units.next();
        criminal.setType(pettyCriminalType);
        criminal.setLocation(colony.getBuilding(townHallType));

        Unit teacher = units.next();
        teacher.setType(masterBlacksmithType);

        teacher.setLocation(university);
        assertEquals(teacher.getNeededTurnsOfTraining(), 4);
        assertEquals(criminal, teacher.getStudent());

        trainForTurns(colony, teacher.getNeededTurnsOfTraining());
        assertEquals(0, getUnitList(colony, pettyCriminalType).size());
        assertEquals(indenturedServantType, criminal.getType());
    }
,
(startLine=588 endLine=611 srcPath=/root/NewExperiment/freecolFilter/01050/test/src/net/sf/freecol/server/model/ServerBuildingTest.java)
    public void testTeachIndenturedServants() {
        spec().getBooleanOption(GameOptions.ALLOW_STUDENT_SELECTION)
            .setValue(false);
        Game game = ServerTestHelper.startServerGame(getTestMap(true));

        Colony colony = getSchoolColony(4, SchoolLevel.UNIVERSITY);
        Building university = colony.getBuilding(universityType);
        Iterator<Unit> units = colony.getUnitIterator();

        Unit indenturedServant = units.next();
        indenturedServant.setType(indenturedServantType);

        Unit teacher = units.next();
        teacher.setType(masterBlacksmithType);

        teacher.setLocation(university);
        assertEquals(teacher.getNeededTurnsOfTraining(), 4);
        assertEquals(indenturedServant, teacher.getStudent());

        // Train to become free colonist
        trainForTurns(colony, teacher.getNeededTurnsOfTraining());
        assertEquals(0, getUnitList(colony, indenturedServantType).size());
        assertEquals(freeColonistType, indenturedServant.getType());
    }
,
>
, <(startLine=692 endLine=701 srcPath=/root/NewExperiment/freecolFilter/00150/src/net/sf/freecol/client/control/InGameInputHandler.java)
            for (int i = 0; i < unitList.getLength(); i++) {
                Element unitElement = (Element) unitList.item(i);
                Unit newUnit = (Unit) game.getFreeColGameObject(unitElement.getAttribute("ID"));
                if (newUnit == null) {
                    newUnit = new Unit(game, unitElement);
                } else {
                    newUnit.readFromXMLElement(unitElement);
                }                
                player.getEurope().add(newUnit);
            }
,
(startLine=909 endLine=918 srcPath=/root/NewExperiment/freecolFilter/00150/src/net/sf/freecol/client/control/InGameInputHandler.java)
            for (int i = 0; i < unitList.getLength(); i++) {
                Element unitElement = (Element) unitList.item(i);
                newUnit = (Unit) game.getFreeColGameObject(unitElement.getAttribute("ID"));
                if (newUnit == null) {
                    newUnit = new Unit(game, unitElement);
                } else {
                    newUnit.readFromXMLElement(unitElement);
                }
                player.getEurope().add(newUnit);
            }
,
>
, <(startLine=294 endLine=306 srcPath=/root/NewExperiment/freecolFilter/01367/src/net/sf/freecol/common/io/FreeColXMLReader.java)
    public float getAttribute(String attributeName, float defaultValue) {
        final String attrib = getParent().getAttributeValue(null,
                                                            attributeName);
        float result = defaultValue;
        if (attrib != null) {
            try {
                result = Float.parseFloat(attrib);
            } catch (NumberFormatException e) {
                logger.warning(attributeName + " is not a float: " + attrib);
            }
        }
        return result;
    }
,
(startLine=315 endLine=327 srcPath=/root/NewExperiment/freecolFilter/01367/src/net/sf/freecol/common/io/FreeColXMLReader.java)
    public int getAttribute(String attributeName, int defaultValue) {
        final String attrib = getParent().getAttributeValue(null,
                                                            attributeName);
        int result = defaultValue;
        if (attrib != null) {
            try {
                result = Integer.decode(attrib);
            } catch (NumberFormatException e) {
                logger.warning(attributeName + " is not an integer: " + attrib);
            }
        }
        return result;
    }
,
(startLine=336 endLine=348 srcPath=/root/NewExperiment/freecolFilter/01367/src/net/sf/freecol/common/io/FreeColXMLReader.java)
    public long getAttribute(String attributeName, long defaultValue) {
        final String attrib = getParent().getAttributeValue(null,
                                                            attributeName);
        long result = defaultValue;
        if (attrib != null) {
            try {
                result = Long.decode(attrib);
            } catch (NumberFormatException e) {
                logger.warning(attributeName + " is not a long: " + attrib);
            }
        }
        return result;
    }
,
>
, <(startLine=117 endLine=128 srcPath=/root/NewExperiment/freecolFilter/00018/src/net/sf/freecol/server/model/ServerPlayer.java)
            while (unitIterator.hasNext()) {
                Unit unit = (Unit) unitIterator.next();

                Map.Position position = unit.getTile().getPosition();
                exploredTiles[position.getX()][position.getY()] = true;

                Iterator positionIterator = map.getCircleIterator(position, true, unit.getLineOfSight());
                while (positionIterator.hasNext()) {
                    Map.Position p = (Map.Position) positionIterator.next();
                    exploredTiles[p.getX()][p.getY()] = true;
                }
            }
,
(startLine=147 endLine=158 srcPath=/root/NewExperiment/freecolFilter/00018/src/net/sf/freecol/server/model/ServerPlayer.java)
            while (unitIterator.hasNext()) {
                Unit unit = (Unit) unitIterator.next();

                Map.Position position = unit.getTile().getPosition();
                canSeeTiles[position.getX()][position.getY()] = true;

                Iterator positionIterator = map.getCircleIterator(position, true, unit.getLineOfSight());
                while (positionIterator.hasNext()) {
                    Map.Position p = (Map.Position) positionIterator.next();
                    canSeeTiles[p.getX()][p.getY()] = true;
                }
            }
,
>
, <(startLine=202 endLine=267 srcPath=/root/NewExperiment/freecolFilter/01371/src/net/sf/freecol/server/generator/LandGenerator.java)
    private void addLandmass(int minsize, int maxsize, int x, int y) {
        int size = 0;
        boolean[][] newland = new boolean[width][height];

        //pick a starting position that is sea without neighbouring land
        if (x<0 || y<0) {
            do {
                x = Utils.randomInt(logger, "LandW", random, 
                                    width-preferredDistanceToEdge*2)
                    + preferredDistanceToEdge;
                y = Utils.randomInt(logger, "LandH", random,
                                    height-preferredDistanceToEdge*2)
                    + preferredDistanceToEdge;
            } while (map[x][y] || !isSingleTile(x,y));
        }

        newland[x][y] = true;
        size++;

        //add all valid neighbour positions to list
        List<Position>l = new ArrayList<Position>();
        Position p = new Position(x, y);
        for (Direction direction : Direction.longSides) {
            Position n = new Position(p, direction);
            if (n.isValid(width, height)
                && isSingleTile(n.getX(), n.getY())
                && n.getX() > preferredDistanceToEdge
                && n.getX() < width-preferredDistanceToEdge) {
                l.add(n);
            }
        }

        //get a random position from the list,
        //set it to land,
        //add its valid neighbours to the list
        while (size < maxsize && !l.isEmpty()) {
            int i = Utils.randomInt(logger, "Lsiz", random, l.size());
            p = l.remove(i);

            if (!newland[p.getX()][p.getY()]) {
                newland[p.getX()][p.getY()] = true;
                size++;

                //add all valid neighbour positions to list
                for (Direction direction : Direction.longSides) {
                    Position n = new Position(p, direction);
                    if (n.isValid(width, height)
                        && isSingleTile(n.getX(), n.getY())
                        && n.getX() > preferredDistanceToEdge
                        && n.getX() < width-preferredDistanceToEdge) {
                        l.add(n);
                    }
                }
            }
        }

        //add generated island to map
        for (x=0; x<width; x++) {
            for (y=0; y<height; y++) {
                if (newland[x][y] == true) {
                    map[x][y] = true;
                    numberOfLandTiles++;
                }
            }
        }
    }
,
(startLine=384 endLine=453 srcPath=/root/NewExperiment/freecolFilter/01371/src/net/sf/freecol/common/model/LandMap.java)
                            int preferredDistanceToEdge, Random random) {
        int size = 0;
        boolean[][] newLand = new boolean[width][height];

        // Pick a starting position that is sea without neighbouring land.
        if (x < 0 || y < 0) {
            do {
                x = Utils.randomInt(logger, "LandW", random, 
                                    width - preferredDistanceToEdge * 2)
                    + preferredDistanceToEdge;
                y = Utils.randomInt(logger, "LandH", random,
                                    height - preferredDistanceToEdge * 2)
                    + preferredDistanceToEdge;
            } while (map[x][y] || !isSingleTile(x, y));
        }

        newLand[x][y] = true;
        size++;

        // Add all valid neighbour positions to list
        List<Position> l = new ArrayList<Position>();
        Position p = new Position(x, y);
        for (Direction direction : Direction.longSides) {
            Position n = new Position(p, direction);
            if (n.isValid(width, height)
                && isSingleTile(n.getX(), n.getY())
                && n.getX() > preferredDistanceToEdge
                && n.getX() < width-preferredDistanceToEdge) {
                l.add(n);
            }
        }

        // Get a random position from the list,
        // set it to land,
        // add its valid neighbours to the list
        int enough = minSize + Utils.randomInt(logger, "LandSize", random,
                                               maxSize - minSize + 1);
        while (size < enough && !l.isEmpty()) {
            int i = Utils.randomInt(logger, "Lsiz", random, l.size());
            p = l.remove(i);

            if (!newLand[p.getX()][p.getY()]) {
                newLand[p.getX()][p.getY()] = true;
                size++;

                for (Direction direction : Direction.longSides) {
                    Position n = new Position(p, direction);
                    if (n.isValid(width, height)
                        && isSingleTile(n.getX(), n.getY())
                        && n.getX() > preferredDistanceToEdge
                        && n.getX() < width-preferredDistanceToEdge) {
                        l.add(n);
                    }
                }
            }
        }

        // Add generated land to map if sufficiently large
        if (size >= minSize) {
            for (x = 0; x < width; x++) {
                for (y = 0; y < height; y++) {
                    if (newLand[x][y] == true) {
                        map[x][y] = true;
                        numberOfLandTiles++;
                    }
                }
            }
        }
        return (size >= minSize) ? size : 0;
    }
,
>
, <(startLine=1481 endLine=1494 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/common/model/Player.java)
            if (t != null && t.getFirstUnit() != null && t.getFirstUnit().getOwner().equals(this)) {
                Iterator unitIterator = t.getUnitIterator();
                while (unitIterator.hasNext()) {
                    Unit u = (Unit) unitIterator.next();

                    Iterator childUnitIterator = u.getUnitIterator();
                    while (childUnitIterator.hasNext()) {
                        Unit childUnit = (Unit) childUnitIterator.next();
                        units.add(childUnit);
                    }

                    units.add(u);
                }
            }
,
(startLine=1504 endLine=1515 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/common/model/Player.java)
        if (getEurope() != null) {
            Iterator unitIterator = getEurope().getUnitIterator();
            while (unitIterator.hasNext()) {
                Unit u = (Unit) unitIterator.next();
                Iterator childUnitIterator = u.getUnitIterator();
                while (childUnitIterator.hasNext()) {
                    Unit childUnit = (Unit) childUnitIterator.next();
                    units.add(childUnit);
                }                
                units.add(u);
            }
        }
,
>
, <(startLine=697 endLine=709 srcPath=/root/NewExperiment/freecolFilter/00895/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
            if (!schools.isEmpty()) {
                detailPanel.add(localizedLabel("colopedia.unit.school"), "newline");
                int count = 0;
                for (BuildingType school : schools) {
                    JButton label = getButton(school);
                    if (count > 0 && count % 3 == 0) {
                        detailPanel.add(label, "skip");
                    } else {
                        detailPanel.add(label);
                    }
                    count++;
                }
            }
,
(startLine=719 endLine=731 srcPath=/root/NewExperiment/freecolFilter/00895/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
            if (!nations.isEmpty()) {
                detailPanel.add(localizedLabel("colopedia.unit.natives"), "newline");
                int count = 0;
                for (IndianNationType nation : nations) {
                    JButton label = getButton(nation);
                    if (count > 0 && count % 3 == 0) {
                        detailPanel.add(label, "skip");
                    } else {
                        detailPanel.add(label);
                    }
                    count++;
                }
            }
,
>
, <(startLine=377 endLine=418 srcPath=/root/NewExperiment/freecolFilter/01451/src/net/sf/freecol/client/gui/ImageLibrary.java)
    public Image getSmallObjectImage(FreeColObject display) {
        try {
            Image image;
            if (display instanceof Goods)
                display = ((Goods)display).getType();

            final float scale = 2f/3f;
            final float combinedScale = scalingFactor * scale;
            if (display instanceof GoodsType) {
                GoodsType goodsType = (GoodsType)display;
                image = getImage(goodsType, combinedScale);
            } else if (display instanceof Unit) {
                Unit unit = (Unit)display;
                image = getUnitImage(unit, combinedScale);
            } else if (display instanceof UnitType) {
                UnitType unitType = (UnitType)display;
                image = getUnitImage(unitType, combinedScale);
            } else if (display instanceof Settlement) {
                Settlement settlement = (Settlement)display;
                image = getSettlementImage(settlement, combinedScale);
            } else if (display instanceof LostCityRumour) {
                image = getMiscImage(ImageLibrary.LOST_CITY_RUMOUR,
                    combinedScale);
            } else if (display instanceof Player) {
                image = getImage(((Player)display).getNation(),
                    combinedScale);
            } else {
                logger.warning("could not find image of unknown type for "
                    + display);
                return null;
            }

            if (image == null) {
                logger.warning("could not find image for " + display);
                return null;
            }
            return image;
        } catch (Exception e) {
            logger.log(Level.WARNING, "could not find image", e);
            return null;
        }
    }
,
(startLine=427 endLine=463 srcPath=/root/NewExperiment/freecolFilter/01451/src/net/sf/freecol/client/gui/ImageLibrary.java)
    public Image getObjectImage(FreeColObject display) {
        try {
            Image image;
            if (display instanceof Goods)
                display = ((Goods)display).getType();

            if (display instanceof GoodsType) {
                GoodsType goodsType = (GoodsType)display;
                image = getImage(goodsType);
            } else if (display instanceof Unit) {
                Unit unit = (Unit)display;
                image = getUnitImage(unit);
            } else if (display instanceof UnitType) {
                UnitType unitType = (UnitType)display;
                image = getUnitImage(unitType);
            } else if (display instanceof Settlement) {
                Settlement settlement = (Settlement)display;
                image = getSettlementImage(settlement);
            } else if (display instanceof LostCityRumour) {
                image = getMiscImage(ImageLibrary.LOST_CITY_RUMOUR);
            } else if (display instanceof Player) {
                image = getImage(((Player)display).getNation());
            } else {
                logger.warning("could not find image of unknown type for " + display);
                return null;
            }

            if (image == null) {
                logger.warning("could not find image for " + display);
                return null;
            }
            return image;
        } catch (Exception e) {
            logger.log(Level.WARNING, "could not find image", e);
            return null;
        }
    }
,
>
, <(startLine=469 endLine=482 srcPath=/root/NewExperiment/freecolFilter/01230/src/net/sf/freecol/server/generator/SimpleMapGenerator.java)
                    >= (2 * radius + 1) * (2 * radius + 1) / 2) {
                    String name = (territory.region == null) ? "default region"
                        : territory.region.getNameKey();
                    logger.fine("Placing the " + territory.player
                                + " capital in region: " + name
                                + " at tile: " + tile);
                    settlements.add(placeIndianSettlement(territory.player,
                                                          true, tile, map));
                    territory.numberOfSettlements--;
                    territory.tile = tile;
                    settlementTiles.remove(tile);
                    settlementsPlaced++;
                    break;
                }
,
(startLine=507 endLine=521 srcPath=/root/NewExperiment/freecolFilter/01230/src/net/sf/freecol/server/generator/SimpleMapGenerator.java)
                > 2 * radius + 1) {
                String name = (territory.region == null) ? "default region"
                    : territory.region.getNameKey();
                logger.fine("Placing a " + territory.player
                            + " camp in region: " + name
                            + " at tile: " + tile);
                settlements.add(placeIndianSettlement(territory.player,
                                                      false, tile, map));
                settlementsPlaced++;
                territory.numberOfSettlements--;
                if (territory.numberOfSettlements <= 0) {
                    territories.remove(territory);
                }

            }
,
>
, <(startLine=94 endLine=105 srcPath=/root/NewExperiment/freecolFilter/00791/src/net/sf/freecol/server/model/TransactionSession.java)
                                            FreeColGameObject o2) {
        Map<String, TransactionSession> base = allSessions.get(o1.getId());
        if (base == null) {
            base = new HashMap<String, TransactionSession>();
            allSessions.put(o1.getId(), base);
        } else {
            if (base.containsKey(o2.getId())) base.remove(o2.getId());
        }
        TransactionSession session = new TransactionSession();
        base.put(o2.getId(), session);
        return session;
    }
,
(startLine=116 endLine=128 srcPath=/root/NewExperiment/freecolFilter/00791/src/net/sf/freecol/server/model/TransactionSession.java)
                                          FreeColGameObject o2) {
        Map<String, TransactionSession> base = allSessions.get(o1.getId());
        if (base == null) {
            base = new HashMap<String, TransactionSession>();
            allSessions.put(o1.getId(), base);
        }
        TransactionSession session = base.get(o2.getId());
        if (session == null) {
            session = new TransactionSession();
            base.put(o2.getId(), session);
        }
        return session;
    }
,
>
, <(startLine=341 endLine=359 srcPath=/root/NewExperiment/freecolFilter/00230/src/net/sf/freecol/client/gui/panel/EuropePanel.java)
    public void refreshBuyRecruit() {
        docksPanel.removeAll();

        Iterator<Unit> unitIterator = europe.getUnitIterator();
        while (unitIterator.hasNext()) {
            Unit unit = unitIterator.next();

            if (((unit.getState() == Unit.ACTIVE) || (unit.getState() == Unit.SENTRY)) && (!unit.isNaval())) {
                UnitLabel unitLabel = new UnitLabel(unit, parent);
                unitLabel.setTransferHandler(defaultTransferHandler);
                unitLabel.addMouseListener(pressListener);

                docksPanel.add(unitLabel, false);
            }
        }

        // Only one component will be repainted!
        docksPanel.repaint(0, 0, docksPanel.getWidth(), docksPanel.getHeight());
    }
,
(startLine=369 endLine=391 srcPath=/root/NewExperiment/freecolFilter/00230/src/net/sf/freecol/client/gui/panel/EuropePanel.java)
    public void refreshBuyPurchase(int type) {
        if (type == Unit.ARTILLERY) {
            refreshBuyRecruit();
        } else {
            inPortPanel.removeAll();

            Iterator<Unit> unitIterator = europe.getUnitIterator();
            while (unitIterator.hasNext()) {
                Unit unit = unitIterator.next();

                if ((unit.getState() == Unit.ACTIVE) && (unit.isNaval())) {
                    UnitLabel unitLabel = new UnitLabel(unit, parent);
                    unitLabel.setTransferHandler(defaultTransferHandler);
                    unitLabel.addMouseListener(pressListener);

                    inPortPanel.add(unitLabel);
                }
            }

            // Only one component will be repainted!
            inPortPanel.repaint(0, 0, inPortPanel.getWidth(), inPortPanel.getHeight());
        }
    }
,
>
, <(startLine=43 endLine=66 srcPath=/root/NewExperiment/freecolFilter/00051/src/net/sf/freecol/common/networking/Message.java)
    public Message(String msg) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        Document tempDocument = null;

        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            tempDocument = builder.parse(new InputSource(new StringReader(msg)));
        } catch (SAXException sxe) {
            // Error generated during parsing
            Exception  x = sxe;
            if (sxe.getException() != null) {
                x = sxe.getException();
            }
            x.printStackTrace();
            logger.warning("Invalid message received: \"" + msg + "\"");
        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }
        document = tempDocument;
    }
,
(startLine=73 endLine=96 srcPath=/root/NewExperiment/freecolFilter/00051/src/net/sf/freecol/common/networking/Message.java)
    public Message(InputStream inputStream) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        Document tempDocument = null;

        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            tempDocument = builder.parse(inputStream);
        } catch (SAXException sxe) {
            // Error generated during parsing
            Exception  x = sxe;
            if (sxe.getException() != null) {
                x = sxe.getException();
            }
            x.printStackTrace();
            logger.warning("Invalid message received.");
        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }
        document = tempDocument;
    }    
,
>
, <(startLine=69 endLine=80 srcPath=/root/NewExperiment/freecolFilter/00259/test/src/net/sf/freecol/util/test/FreeColTestCase.java)
    public static Game getStandardGame() {
        game = new Game(new MockModelController());

        Vector<Player> players = new Vector<Player>();

        for (int i = 0; i < Player.NUMBER_OF_NATIONS; i++) {
            Player p = new Player(game, String.valueOf(i), false, !Player.isEuropeanNoREF(i), i);
            game.addPlayer(p);
            players.add(p);
        }
        return game;
    }
,
(startLine=10 endLine=21 srcPath=/root/NewExperiment/freecolFilter/00259/test/src/net/sf/freecol/common/model/ColonyProductionTest.java)
	public static Game getStandardGame() {
		Game game = new Game(new MockModelController());

		Vector<Player> players = new Vector<Player>();

		for (int i = 0; i < Player.NUMBER_OF_NATIONS; i++) {
			Player p = new Player(game, String.valueOf(i), false, i);
			game.addPlayer(p);
			players.add(p);
		}
		return game;
	}
,
>
, <(startLine=155 endLine=192 srcPath=/root/NewExperiment/freecolFilter/01333/test/src/net/sf/freecol/server/ai/mission/TransportMissionTest.java)
    public void testGetNextStopIsEurope() {
        Game game = ServerTestHelper.startServerGame(getCoastTestMap(plainsType));
        Map map = game.getMap();
        InGameController igc = ServerTestHelper.getInGameController();
        AIMain aiMain = ServerTestHelper.getServer().getAIMain();
        assertNotNull(aiMain);

        ServerPlayer dutch = (ServerPlayer)game.getPlayer("model.nation.dutch");
        dutch.exploreMap(true);
        Europe europe = dutch.getEurope();
        assertNotNull("Setup error, europe is null", europe);

        // create a ship carrying a colonist in a colony
        Tile colonyTile = map.getTile(9, 9);
        getStandardColony(1, colonyTile.getX(), colonyTile.getY());

        Unit galleon = new ServerUnit(game, colonyTile, dutch, galleonType);
        AIUnit aiUnit = aiMain.getAIUnit(galleon);
        assertNotNull(aiUnit);

        // assign transport mission to the ship
        TransportMission mission = new TransportMission(aiMain, aiUnit);
        aiUnit.changeMission(mission, "test");
        Transportable goods = new AIGoods(aiMain, galleon, horsesType, 50,
                                          europe);
        assertTrue("Goods should queue",
                   mission.queueTransportable(goods, false));
        mission.doMission();

        // Exercise
        Location dest = mission.getTarget();

        // Test
        assertNotNull("Unit should have a destination", dest);
        assertEquals("Destination should be Europe", europe, dest);
        assertFalse("Unit should have a path", 
                    galleon.getTurnsToReach(dest) == FreeColObject.INFINITY);
    }
,
(startLine=194 endLine=231 srcPath=/root/NewExperiment/freecolFilter/01333/test/src/net/sf/freecol/server/ai/mission/TransportMissionTest.java)
    public void testGetNextStopIsColony() {
        Game game = ServerTestHelper.startServerGame(getCoastTestMap(plainsType));
        Map map = game.getMap();
        InGameController igc = ServerTestHelper.getInGameController();
        AIMain aiMain = ServerTestHelper.getServer().getAIMain();
        assertNotNull(aiMain);

        ServerPlayer dutch = (ServerPlayer)game.getPlayer("model.nation.dutch");
        Europe europe = dutch.getEurope();
        assertNotNull("Setup error, europe is null", europe);

        Tile colonyTile = map.getTile(9, 9);
        assertTrue(colonyTile.isLand());
        getStandardColony(1, colonyTile.getX(), colonyTile.getY());

        // create a ship
        Tile galleonTile = map.getTile(10, 9);
        assertFalse(galleonTile.isLand());
        Unit galleon = new ServerUnit(game, galleonTile, dutch, galleonType);
        AIUnit aiUnit = aiMain.getAIUnit(galleon);
        assertNotNull(aiUnit);

        // assign transport mission to the ship
        TransportMission mission = new TransportMission(aiMain, aiUnit);
        aiUnit.changeMission(mission, "test");
        Transportable goods = new AIGoods(aiMain, galleon, horsesType, 50,
                                          colonyTile);
        mission.queueTransportable(goods, false);
        mission.doMission();

        // Exercise
        Location dest = mission.getTarget();

        // Test
        assertNotNull("Unit should have a destination", dest);
        assertEquals("Destination should be the colony",
                     colonyTile.getColony(), dest);
    }
,
>
, <(startLine=156 endLine=190 srcPath=/root/NewExperiment/freecolFilter/00448/src/net/sf/freecol/server/ai/IndianAIPlayer.java)
                while (positionIterator.hasNext()) {
                    Tile t = map.getTile(positionIterator.next());
                    if (t.getFirstUnit() != null) {
                        Player enemy = t.getFirstUnit().getOwner();
                        if (enemy == getPlayer()) {
                            defenders++;
                        } else {
                            Tension tension = getPlayer().getTension(enemy);
                            if (tension != null) {
                                int value = tension.getValue();
                                if (value >= Tension.TENSION_ADD_MAJOR) {
                                    threat += 2;
                                    if (t.getUnitCount() * 2 > worstThreat) {
                                        if (t.getSettlement() != null) {
                                            bestTarget = t.getSettlement();
                                        } else {
                                            bestTarget = t.getFirstUnit();
                                        }
                                        worstThreat = t.getUnitCount() * 2;
                                    }
                                } else if (value >= Tension.TENSION_ADD_MINOR) {
                                    threat += 1;
                                    if (t.getUnitCount() > worstThreat) {
                                        if (t.getSettlement() != null) {
                                            bestTarget = t.getSettlement();
                                        } else {
                                            bestTarget = t.getFirstUnit();
                                        }
                                        worstThreat = t.getUnitCount();
                                    }
                                }
                            }
                        }
                    }
                }
,
(startLine=647 endLine=681 srcPath=/root/NewExperiment/freecolFilter/00448/src/net/sf/freecol/server/ai/AIPlayer.java)
                while (positionIterator.hasNext()) {
                    Tile t = map.getTile(positionIterator.next());
                    if (t.getFirstUnit() != null) {
                        Player enemy = t.getFirstUnit().getOwner();
                        if (enemy == player) {
                            defenders++;
                        } else {
                            Tension tension = player.getTension(enemy);
                            if (tension != null) {
                                int value = tension.getValue();
                                if (value >= Tension.TENSION_ADD_MAJOR) {
                                    threat += 2;
                                    if (t.getUnitCount() * 2 > worstThreat) {
                                        if (t.getSettlement() != null) {
                                            bestTarget = t.getSettlement();
                                        } else {
                                            bestTarget = t.getFirstUnit();
                                        }
                                        worstThreat = t.getUnitCount() * 2;
                                    }
                                } else if (value >= Tension.TENSION_ADD_MINOR) {
                                    threat += 1;
                                    if (t.getUnitCount() > worstThreat) {
                                        if (t.getSettlement() != null) {
                                            bestTarget = t.getSettlement();
                                        } else {
                                            bestTarget = t.getFirstUnit();
                                        }
                                        worstThreat = t.getUnitCount();
                                    }
                                }
                            }
                        }
                    }
                }
,
>
, <(startLine=423 endLine=432 srcPath=/root/NewExperiment/freecolFilter/00506/src/net/sf/freecol/client/gui/action/FreeColAction.java)
            try {
                TransformerFactory factory = TransformerFactory.newInstance();
                Transformer xmlTransformer = factory.newTransformer();
                StringWriter stringWriter = new StringWriter();
                xmlTransformer.transform(new DOMSource(element), new StreamResult(stringWriter));
                String xml = stringWriter.toString();
                XMLStreamReader xsr = xif.createXMLStreamReader(new StringReader(xml));
                xsr.nextTag();
                readFromXML(xsr);
            } catch (TransformerException e) {
,
(startLine=254 endLine=263 srcPath=/root/NewExperiment/freecolFilter/00506/src/net/sf/freecol/common/model/FreeColObject.java)
            try {
                TransformerFactory factory = TransformerFactory.newInstance();
                Transformer xmlTransformer = factory.newTransformer();
                StringWriter stringWriter = new StringWriter();
                xmlTransformer.transform(new DOMSource(element), new StreamResult(stringWriter));
                String xml = stringWriter.toString();
                XMLStreamReader xsr = xif.createXMLStreamReader(new StringReader(xml));
                xsr.nextTag();
                readFromXML(xsr);
            } catch (TransformerException e) {
,
>
, <(startLine=482 endLine=495 srcPath=/root/NewExperiment/freecolFilter/00879/src/net/sf/freecol/server/ai/NewAIPlayer.java)
        if (registered == null) {
            int price = ((IndianSettlement) settlement).getPriceToSell(goods)
                + player.getTension(buyer).getValue();
            Unit missionary = ((IndianSettlement) settlement).getMissionary(buyer);
            if (missionary != null && getSpecification()
                .getBoolean("model.option.enhancedMissionaries")) {
                // 10% bonus for missionary, 20% if expert
                int bonus = (missionary.hasAbility("model.ability.expertMissionary")) ? 8
                    : 9;
                price = (price * bonus) / 10;
            }
            sessionRegister.put(goldKey, new Integer(price));
            return price;
        } else {
,
(startLine=511 endLine=524 srcPath=/root/NewExperiment/freecolFilter/00879/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
        if (registered == null) {
            int price = ((IndianSettlement) settlement).getPriceToSell(goods)
                + getPlayer().getTension(buyer).getValue();
            Unit missionary = ((IndianSettlement) settlement).getMissionary(buyer);
            if (missionary != null && getSpecification()
                .getBoolean("model.option.enhancedMissionaries")) {
                // 10% bonus for missionary, 20% if expert
                int bonus = (missionary.hasAbility("model.ability.expertMissionary")) ? 8
                    : 9;
                price = (price * bonus) / 10;
            }
            sessionRegister.put(goldKey, new Integer(price));
            return price;
        } else {
,
(startLine=572 endLine=584 srcPath=/root/NewExperiment/freecolFilter/00879/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            } else {
                price = ((IndianSettlement) settlement).getPriceToBuy(goods) - getPlayer().getTension(seller).getValue();
                Unit missionary = ((IndianSettlement) settlement).getMissionary(seller);
                if (missionary != null && getSpecification()
                    .getBoolean("model.option.enhancedMissionaries")) {
                    // 10% bonus for missionary, 20% if expert
                    int bonus = (missionary.hasAbility("model.ability.expertMissionary")) ? 12
                        : 11;
                    price = (price * bonus) / 10;
                }
                if (price <= 0) return 0;
                sessionRegister.put(goldKey, new Integer(price));
            }
,
>
, <(startLine=168 endLine=193 srcPath=/root/NewExperiment/freecolFilter/01270/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            private int score(AIUnit a) {
                Unit unit;
                if (a == null || (unit = a.getUnit()) == null
                    || unit.getLocation() == null
                    || !unit.isColonist()) {
                    return -1000;
                } else if (unit.hasAbility(Ability.SCOUT_INDIAN_SETTLEMENT)) {
                    return 900 + ((unit.hasTile()) ? 100 : 0);
                } else if (unit.hasAbility(Ability.EXPERT_SCOUT)) {
                    return 600;
                }
                List<AbstractGoods> roleEquipment = unit.getSpecification()
                .getRole("model.role.scout").getRequiredGoods();
                int base = (unit.isInEurope()) ? 500
                    : (unit.getLocation().getColony() != null
                        && unit.getLocation().getColony()
                        .canProvideEquipment(roleEquipment)) ? 400
                    : -1000;
                if (!unit.getEquipment().isEmpty()) {
                    base -= 400;
                } else if (unit.getSkillLevel() > 0) {
                    base -= 200;
                }
                // Do not penalize criminals or servants.
                return base;
            }
,
(startLine=211 endLine=237 srcPath=/root/NewExperiment/freecolFilter/01270/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            private int score(AIUnit a) {
                Unit unit;
                if (a == null || (unit = a.getUnit()) == null
                    || unit.getLocation() == null
                    || !unit.isColonist()) {
                    return -1000;
                } else if (unit.hasAbility(Ability.IMPROVE_TERRAIN)) {
                    return 900 + ((unit.hasTile()) ? 100 : 0);
                } else if (unit.hasAbility(Ability.EXPERT_PIONEER)) {
                    return 600;
                }
                List<AbstractGoods> roleEquipment = unit.getSpecification()
                .getRole("model.role.pioneer").getRequiredGoods();
                int base = (unit.isInEurope()) ? 500
                    : (unit.getLocation().getColony() != null
                        && unit.getLocation().getColony()
                        .canProvideEquipment(roleEquipment)) ? 400
                    : -1000;
                if (!unit.getEquipment().isEmpty()) {
                    base -= 400;
                } else if (unit.getSkillLevel() > 0) {
                    base -= 200;
                } else {
                    base += unit.getSkillLevel() * 150;
                }
                return base;
            }
,
>
, <(startLine=161 endLine=176 srcPath=/root/NewExperiment/freecolFilter/01046/src/net/sf/freecol/client/gui/menu/FreeColMenuBar.java)
    protected JCheckBoxMenuItem getCheckBoxMenuItem(String actionID) {

        JCheckBoxMenuItem rtn = null;
        FreeColAction action = am.getFreeColAction(actionID);

        if (action != null) {
            rtn = new JCheckBoxMenuItem();
            rtn.setAction(action);
            rtn.setOpaque(false);

            rtn.setSelected(((SelectableAction) am.getFreeColAction(actionID)).isSelected());
        } else
            logger.finest("Could not create menu item. [" + actionID + "] not found.");

        return rtn;
    }
,
(startLine=187 endLine=202 srcPath=/root/NewExperiment/freecolFilter/01046/src/net/sf/freecol/client/gui/menu/FreeColMenuBar.java)
                                                          ButtonGroup group) {
        JRadioButtonMenuItem rtn = null;
        FreeColAction action = am.getFreeColAction(actionID);

        if (action != null) {
            rtn = new JRadioButtonMenuItem();
            rtn.setAction(action);
            rtn.setOpaque(false);

            rtn.setSelected(((SelectableAction) am.getFreeColAction(actionID)).isSelected());
            group.add(rtn);
        } else {
            logger.finest("Could not create menu item. [" + actionID + "] not found.");
        }
        return rtn;
    }
,
>
, <(startLine=238 endLine=247 srcPath=/root/NewExperiment/freecolFilter/00152/src/net/sf/freecol/server/control/PreGameInputHandler.java)
            for (int i = 0; i < nations.size(); i++) {
                if (((Integer)nations.get(i)).intValue() == nation) {
                    Element reply = Message.createNewRootElement("error");
                    reply.setAttribute("message",
                        "All players need to pick a unique nation before the game can start.");
                    reply.setAttribute("messageID", "server.invalidPlayerNations");

                    return reply;
                }
            }
,
(startLine=251 endLine=260 srcPath=/root/NewExperiment/freecolFilter/00152/src/net/sf/freecol/server/control/PreGameInputHandler.java)
            for (int i = 0; i < colors.size(); i++) {
                if (((Color)colors.get(i)).equals(color)) {
                    Element reply = Message.createNewRootElement("error");
                    reply.setAttribute("message",
                        "All players need to pick a unique color before the game can start.");
                    reply.setAttribute("messageID", "server.invalidPlayerColors");

                    return reply;
                }
            }
,
>
, <(startLine=167 endLine=197 srcPath=/root/NewExperiment/freecolFilter/00083/src/net/sf/freecol/common/model/FoundingFather.java)
    private static int getWeight1(int foundingFather) {
        switch (foundingFather) {
            case ADAM_SMITH: return 2;
            case JACOB_FUGGER: return 0;
            case PETER_MINUIT: return 9;
            case PETER_STUYVESANT: return 2;
            case JAN_DE_WITT: return 2;
            case FERDINAND_MAGELLAN: return 2;
            case FRANSICO_DE_CORONADO: return 3;
            case HERNANDO_DE_SOTO: return 5;
            case HENRY_HUDSON: return 10;
            case LA_SALLE: return 7;
            case HERNAN_CORTES: return 6;
            case GEORGE_WASHINGTON: return 0;
            case PAUL_REVERE: return 10;
            case FRANCIS_DRAKE: return 4;
            case JOHN_PAUL_JONES: return 0;
            case THOMAS_JEFFERSON: return 4;
            case POCAHONTAS: return 7;
            case THOMAS_PAINE: return 1;
            case SIMON_BOLIVAR: return 0;
            case BENJAMIN_FRANKLIN: return 5;
            case WILLIAM_BREWSTER: return 7;
            case WILLIAM_PENN: return 8;
            case FATHER_JEAN_DE_BREBEUF: return 6;
            case JUAN_DE_SEPULVEDA: return 3;
            case BARTOLOME_DE_LAS_CASAS: return 0;
            default:
                throw new IllegalArgumentException("FoundingFather has invalid type.");
        }
    }
,
(startLine=200 endLine=230 srcPath=/root/NewExperiment/freecolFilter/00083/src/net/sf/freecol/common/model/FoundingFather.java)
    private static int getWeight2(int foundingFather) {
        switch (foundingFather) {
            case ADAM_SMITH: return 8;
            case JACOB_FUGGER: return 5;
            case PETER_MINUIT: return 1;
            case PETER_STUYVESANT: return 4;
            case JAN_DE_WITT: return 6;
            case FERDINAND_MAGELLAN: return 10;
            case FRANSICO_DE_CORONADO: return 5;
            case HERNANDO_DE_SOTO: return 10;
            case HENRY_HUDSON: return 1;
            case LA_SALLE: return 5;
            case HERNAN_CORTES: return 5;
            case GEORGE_WASHINGTON: return 4;
            case PAUL_REVERE: return 2;
            case FRANCIS_DRAKE: return 8;
            case JOHN_PAUL_JONES: return 6;
            case THOMAS_JEFFERSON: return 5;
            case POCAHONTAS: return 5;
            case THOMAS_PAINE: return 2;
            case SIMON_BOLIVAR: return 4;
            case BENJAMIN_FRANKLIN: return 5;
            case WILLIAM_BREWSTER: return 4;
            case WILLIAM_PENN: return 5;
            case FATHER_JEAN_DE_BREBEUF: return 6;
            case JUAN_DE_SEPULVEDA: return 8;
            case BARTOLOME_DE_LAS_CASAS: return 5;
            default:
                throw new IllegalArgumentException("FoundingFather has invalid type.");
        }
    }
,
(startLine=233 endLine=263 srcPath=/root/NewExperiment/freecolFilter/00083/src/net/sf/freecol/common/model/FoundingFather.java)
    private static int getWeight3(int foundingFather) {
        switch (foundingFather) {
            case ADAM_SMITH: return 6;
            case JACOB_FUGGER: return 8;
            case PETER_MINUIT: return 1; // 0
            case PETER_STUYVESANT: return 8;
            case JAN_DE_WITT: return 10;
            case FERDINAND_MAGELLAN: return 10;
            case FRANSICO_DE_CORONADO: return 7;
            case HERNANDO_DE_SOTO: return 5;
            case HENRY_HUDSON: return 1; // 0
            case LA_SALLE: return 3;
            case HERNAN_CORTES: return 1;
            case GEORGE_WASHINGTON: return 10;
            case PAUL_REVERE: return 1;
            case FRANCIS_DRAKE: return 6;
            case JOHN_PAUL_JONES: return 7;
            case THOMAS_JEFFERSON: return 6;
            case POCAHONTAS: return 3;
            case THOMAS_PAINE: return 8;
            case SIMON_BOLIVAR: return 6;
            case BENJAMIN_FRANKLIN: return 5;
            case WILLIAM_BREWSTER: return 1;
            case WILLIAM_PENN: return 2;
            case FATHER_JEAN_DE_BREBEUF: return 1;
            case JUAN_DE_SEPULVEDA: return 3;
            case BARTOLOME_DE_LAS_CASAS: return 10;
            default:
                throw new IllegalArgumentException("FoundingFather has invalid type.");
        }
    }
,
>
, <(startLine=89 endLine=103 srcPath=/root/NewExperiment/freecolFilter/00245/src/net/sf/freecol/client/gui/option/OptionGroupUI.java)
            } else if (o instanceof BooleanOption) {                
                final BooleanOptionUI boi = new BooleanOptionUI((BooleanOption) o, editable);
                ou.add(boi);
                final boolean alreadyAdded = (horizontalPanel != null && !buttonAdded);
                if (!alreadyAdded || buttonAdded) {
                    horizontalPanel = new JPanel(new GridLayout(1, 2, H_GAP, 5));
                    horizontalPanel.setOpaque(false);
                }
                horizontalPanel.add(boi);
                add(horizontalPanel);
                if (alreadyAdded) {
                    horizontalPanel = null;
                }
                buttonAdded = false;
            } else if (o instanceof IntegerOption) {
,
(startLine=113 endLine=127 srcPath=/root/NewExperiment/freecolFilter/00245/src/net/sf/freecol/client/gui/option/OptionGroupUI.java)
            } else if (o instanceof FreeColAction) {
                final FreeColActionUI fau = new FreeColActionUI((FreeColAction) o, this);
                ou.add(fau);
                final boolean alreadyAdded = (horizontalPanel != null && !buttonAdded);
                if (!alreadyAdded || buttonAdded) {
                    horizontalPanel = new JPanel(new GridLayout(1, 2, H_GAP, 5));
                    horizontalPanel.setOpaque(false);
                }
                horizontalPanel.add(fau);
                add(horizontalPanel);
                if (alreadyAdded) {
                    horizontalPanel = null;
                }
                buttonAdded = false;
            } else {
,
>
, <(startLine=540 endLine=553 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        } else if (random < buildingList.size() + goodsList.size()) {
            Goods goods = goodsList.get(random - buildingList.size());
            goods.setAmount(Math.min(goods.getAmount() / 2, 50));
            colony.removeGoods(goods);
            if (attacker.getSpaceLeft() > 0) {
                attacker.add(goods);
            }
            colony.addModelMessage(colony, "model.unit.goodsStolen",
                                   new String[][] {
                                       {"%amount%", String.valueOf(goods.getAmount())},
                                       {"%goods%", goods.getName()}, {"%colony%", colonyName},
                                       {"%enemyNation%", nation}, {"%enemyUnit%", unitName}},
                                   ModelMessage.DEFAULT, goods);
        } else if (random < buildingList.size() + goodsList.size() + shipList.size()) {
,
(startLine=4540 endLine=4551 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/Unit.java)
        } else if (random < buildingList.size() + goodsList.size()) {
            Goods goods = goodsList.get(random - buildingList.size());
            goods.setAmount(Math.min(goods.getAmount() / 2, 50));
            colony.removeGoods(goods);
            if (getSpaceLeft() > 0) add(goods);
            colony.addModelMessage(colony, "model.unit.goodsStolen",
                                   new String[][] {
                                       {"%amount%", String.valueOf(goods.getAmount())},
                                       {"%goods%", goods.getName()}, {"%colony%", colonyName},
                                       {"%enemyNation%", nation}, {"%enemyUnit%", unitName}},
                                   ModelMessage.DEFAULT, goods);
        } else if (random < buildingList.size() + goodsList.size() + shipList.size()) {
,
>
, <(startLine=296 endLine=305 srcPath=/root/NewExperiment/freecolFilter/01490/src/net/sf/freecol/common/model/BuildingType.java)
                                 GoodsType goodsType, UnitType unitType) {
        if (goodsType == null) return 0;
        if (productionType == null) {
            productionType = ProductionType.getBestProductionType(goodsType,
                getAvailableProductionTypes(unitType == null));
        }
        if (productionType == null) return 0;
        AbstractGoods best = productionType.getOutput(goodsType);
        return (best == null) ? 0 : best.getAmount();
    }
,
(startLine=346 endLine=355 srcPath=/root/NewExperiment/freecolFilter/01490/src/net/sf/freecol/common/model/TileType.java)
                                 GoodsType goodsType, UnitType unitType) {
        if (goodsType == null) return 0;
        if (productionType == null) {
            productionType = ProductionType.getBestProductionType(goodsType,
                getAvailableProductionTypes(unitType == null));
        }
        if (productionType == null) return 0;
        AbstractGoods best = productionType.getOutput(goodsType);
        return (best == null) ? 0 : best.getAmount();
    }
,
>
, <(startLine=141 endLine=161 srcPath=/root/NewExperiment/freecolFilter/01432/src/net/sf/freecol/client/gui/panel/GoodsDetailPanel.java)
            if (!buildingTypes.isEmpty()) {
                panel.add(GUI.localizedLabel("colopedia.goods.buildings"),
                          "newline 20");
                if (allTypes) {
                    JButton button = getButton(PanelType.BUILDINGS,
                                               Messages.message("colopedia.goods.allBuildings"),
                                               null);
                    panel.add(button, "span");
                } else {
                    int count = 0;
                    for (BuildingType building : buildingTypes) {
                        JButton label = getButton(building);
                        if (count > 0 && count % 3 == 0) {
                            panel.add(label, "skip");
                        } else {
                            panel.add(label);
                        }
                        count++;
                    }
                }
            }
,
(startLine=180 endLine=200 srcPath=/root/NewExperiment/freecolFilter/01432/src/net/sf/freecol/client/gui/panel/GoodsDetailPanel.java)
            if (!unitTypes.isEmpty()) {
                panel.add(GUI.localizedLabel("colopedia.goods.units"),
                          "newline 20");
                if (allTypes) {
                    JButton button = getButton(PanelType.UNITS,
                                               Messages.message("colopedia.goods.allUnits"),
                                               null);
                    panel.add(button, "span");
                } else {
                    int count = 0;
                    for (UnitType unit : unitTypes) {
                        JButton label = getButton(unit);
                        if (count > 0 && count % 3 == 0) {
                            panel.add(label, "skip");
                        } else {
                            panel.add(label);
                        }
                        count++;
                    }
                }
            }
,
>
, <(startLine=507 endLine=566 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    private void pillageColony(Unit attacker, Colony colony) {
        ArrayList<Building> buildingList = new ArrayList<Building>();
        ArrayList<Unit> shipList = new ArrayList<Unit>();
        List<Goods> goodsList = colony.getGoodsContainer().getCompactGoods();
        
        for (Building building : colony.getBuildings()) {
            if (building.canBeDamaged()) {
                buildingList.add(building);
            }
        }
        
        List<Unit> unitList = colony.getTile().getUnitList();
        for (Unit unit : unitList) {
            if (unit.isNaval()) {
                shipList.add(unit);
            }
        }
        
        String nation = attacker.getOwner().getNationAsString();
        String unitName = attacker.getName();
        String colonyName = colony.getName();
        
        int limit = buildingList.size() + goodsList.size() + shipList.size() + 1;
        int random = attacker.getGame().getModelController().getRandom(attacker.getId() + "pillageColony", limit);
                                                                       
        if (random < buildingList.size()) {
            Building building = buildingList.get(random);
            colony.addModelMessage(colony, "model.unit.buildingDamaged",
                                   new String[][] {
                                       {"%building%", building.getName()}, {"%colony%", colonyName},
                                       {"%enemyNation%", nation}, {"%enemyUnit%", unitName}},
                                   ModelMessage.DEFAULT, colony);
            building.damage();
        } else if (random < buildingList.size() + goodsList.size()) {
            Goods goods = goodsList.get(random - buildingList.size());
            goods.setAmount(Math.min(goods.getAmount() / 2, 50));
            colony.removeGoods(goods);
            if (attacker.getSpaceLeft() > 0) {
                attacker.add(goods);
            }
            colony.addModelMessage(colony, "model.unit.goodsStolen",
                                   new String[][] {
                                       {"%amount%", String.valueOf(goods.getAmount())},
                                       {"%goods%", goods.getName()}, {"%colony%", colonyName},
                                       {"%enemyNation%", nation}, {"%enemyUnit%", unitName}},
                                   ModelMessage.DEFAULT, goods);
        } else if (random < buildingList.size() + goodsList.size() + shipList.size()) {
            Unit ship = shipList.get(random - buildingList.size() - goodsList.size());
            ship.shipDamaged();
        } else { // steal gold
            int gold = colony.getOwner().getGold() / 10;
            colony.getOwner().modifyGold(-gold);
            attacker.getOwner().modifyGold(gold);
            colony.addModelMessage(colony, "model.unit.indianPlunder",
                                   new String[][] {
                                       {"%amount%", String.valueOf(gold)}, {"%colony%", colonyName},
                                       {"%enemyNation%", nation}, {"%enemyUnit%", unitName}},
                                   ModelMessage.DEFAULT, colony);
        }
    }
,
(startLine=4508 endLine=4564 srcPath=/root/NewExperiment/freecolFilter/00358/src/net/sf/freecol/common/model/Unit.java)
    private void pillageColony(Colony colony) {
        ArrayList<Building> buildingList = new ArrayList<Building>();
        ArrayList<Unit> shipList = new ArrayList<Unit>();
        List<Goods> goodsList = colony.getGoodsContainer().getCompactGoods();
        
        for (Building building : colony.getBuildings()) {
            if (building.canBeDamaged()) {
                buildingList.add(building);
            }
        }
        
        List<Unit> unitList = colony.getTile().getUnitList();
        for (Unit unit : unitList) {
            if (unit.isNaval()) {
                shipList.add(unit);
            }
        }
        
        String nation = getOwner().getNationAsString();
        String unitName = getName();
        String colonyName = colony.getName();
        
        int random = getGame().getModelController().getRandom(getId() + "pillageColony",
                                                              buildingList.size() + goodsList.size() + shipList.size() + 1);
        if (random < buildingList.size()) {
            Building building = buildingList.get(random);
            colony.addModelMessage(colony, "model.unit.buildingDamaged",
                                   new String[][] {
                                       {"%building%", building.getName()}, {"%colony%", colonyName},
                                       {"%enemyNation%", nation}, {"%enemyUnit%", unitName}},
                                   ModelMessage.DEFAULT, colony);
            building.damage();
        } else if (random < buildingList.size() + goodsList.size()) {
            Goods goods = goodsList.get(random - buildingList.size());
            goods.setAmount(Math.min(goods.getAmount() / 2, 50));
            colony.removeGoods(goods);
            if (getSpaceLeft() > 0) add(goods);
            colony.addModelMessage(colony, "model.unit.goodsStolen",
                                   new String[][] {
                                       {"%amount%", String.valueOf(goods.getAmount())},
                                       {"%goods%", goods.getName()}, {"%colony%", colonyName},
                                       {"%enemyNation%", nation}, {"%enemyUnit%", unitName}},
                                   ModelMessage.DEFAULT, goods);
        } else if (random < buildingList.size() + goodsList.size() + shipList.size()) {
            Unit ship = shipList.get(random - buildingList.size() - goodsList.size());
            ship.shipDamaged();
        } else { // steal gold
            int gold = colony.getOwner().getGold() / 10;
            colony.getOwner().modifyGold(-gold);
            getOwner().modifyGold(gold);
            colony.addModelMessage(colony, "model.unit.indianPlunder",
                                   new String[][] {
                                       {"%amount%", String.valueOf(gold)}, {"%colony%", colonyName},
                                       {"%enemyNation%", nation}, {"%enemyUnit%", unitName}},
                                   ModelMessage.DEFAULT, colony);
        }
    }
,
>
, <(startLine=528 endLine=548 srcPath=/root/NewExperiment/freecolFilter/00500/src/net/sf/freecol/client/gui/panel/EuropePanel.java)
    public void setSelectedUnitLabel(UnitLabel unitLabel) {
        if (selectedUnit == unitLabel) {
            // No need to change anything
            return;
        }
        if (selectedUnit != null) {
            selectedUnit.setSelected(false);
        }
        selectedUnit = unitLabel;
        if (unitLabel == null) {
            cargoPanel.setCarrier(null);
        } else {
            cargoPanel.setCarrier(unitLabel.getUnit());
            unitLabel.setSelected(true);
        }

        updateCargoPanel();

        cargoPanel.revalidate();
        refresh();
    }
,
(startLine=729 endLine=744 srcPath=/root/NewExperiment/freecolFilter/00500/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
    public void setSelectedUnitLabel(UnitLabel unitLabel) {
        if (selectedUnit != unitLabel) {
            if (selectedUnit != null) {
                selectedUnit.setSelected(false);
                selectedUnit.getUnit().removePropertyChangeListener(this);
            }
            selectedUnit = unitLabel;
            if (unitLabel == null) {
                cargoPanel.setCarrier(null);
            } else {
                cargoPanel.setCarrier(unitLabel.getUnit());
                unitLabel.setSelected(true);
                unitLabel.getUnit().addPropertyChangeListener(this);
            }
        }
    }
,
>
, <(startLine=381 endLine=391 srcPath=/root/NewExperiment/freecolFilter/01566/src/net/sf/freecol/common/resources/ResourceManager.java)
    public static BufferedImage getImage(final String key) {
        BufferedImage image = getImageResource(key).getImage();
        if(image == null) {
            logger.warning("getImage(" + key + ") failed");
            image = getImageResource(REPLACEMENT_IMAGE).getImage();
            if(image == null) {
                FreeColClient.fatal("Failed getting replacement image.");
            }
        }
        return image;
    }
,
(startLine=405 endLine=415 srcPath=/root/NewExperiment/freecolFilter/01566/src/net/sf/freecol/common/resources/ResourceManager.java)
    public static BufferedImage getImage(final String key, final float scale) {
        BufferedImage image = getImageResource(key).getImage(scale);
        if(image == null) {
            logger.warning("getImage(" + key + ", " + scale + ") failed");
            image = getImageResource(REPLACEMENT_IMAGE).getImage(scale);
            if(image == null) {
                FreeColClient.fatal("Failed getting replacement image.");
            }
        }
        return image;
    }
,
(startLine=427 endLine=437 srcPath=/root/NewExperiment/freecolFilter/01566/src/net/sf/freecol/common/resources/ResourceManager.java)
    public static BufferedImage getImage(final String key, final Dimension size) {
        BufferedImage image = getImageResource(key).getImage(size);
        if(image == null) {
            logger.warning("getImage(" + key + ", " + size + ") failed");
            image = getImageResource(REPLACEMENT_IMAGE).getImage(size);
            if(image == null) {
                FreeColClient.fatal("Failed getting replacement image.");
            }
        }
        return image;
    }
,
(startLine=448 endLine=458 srcPath=/root/NewExperiment/freecolFilter/01566/src/net/sf/freecol/common/resources/ResourceManager.java)
    public static BufferedImage getGrayscaleImage(final String key, final Dimension size) {
        BufferedImage image = getImageResource(key).getGrayscaleImage(size);
        if(image == null) {
            logger.warning("getGrayscaleImage(" + key + ", " + size + ") failed");
            image = getImageResource(REPLACEMENT_IMAGE).getGrayscaleImage(size);
            if(image == null) {
                FreeColClient.fatal("Failed getting replacement image.");
            }
        }
        return image;
    }
,
(startLine=469 endLine=479 srcPath=/root/NewExperiment/freecolFilter/01566/src/net/sf/freecol/common/resources/ResourceManager.java)
    public static BufferedImage getGrayscaleImage(final String key, final float scale) {
        BufferedImage image = getImageResource(key).getGrayscaleImage(scale);
        if(image == null) {
            logger.warning("getGrayscaleImage(" + key + ", " + scale + ") failed");
            image = getImageResource(REPLACEMENT_IMAGE).getGrayscaleImage(scale);
            if(image == null) {
                FreeColClient.fatal("Failed getting replacement image.");
            }
        }
        return image;
    }
,
>
, <(startLine=1299 endLine=1337 srcPath=/root/NewExperiment/freecolFilter/00649/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
        while (positionIterator.hasNext()) {
            Tile t = map.getTile(positionIterator.next());
            if (t.getFirstUnit() != null) {
                if (t.getFirstUnit().getOwner() == getPlayer()) {
                    Iterator<Unit> uit = t.getUnitIterator();
                    while (uit.hasNext()) {
                        if (uit.next().isOffensiveUnit()) {
                            defenders++;
                        }
                    }
                } else {
                    int thisThreat = 0;
                    if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MAJOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat += 2;
                            }
                        }
                    } else if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MINOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat++;
                            }
                        }
                    }
                    threat += thisThreat;
                    if (thisThreat > worstThreat) {
                        if (t.getSettlement() != null) {
                            bestTarget = t.getSettlement();
                        } else {
                            bestTarget = t.getFirstUnit();
                        }
                        worstThreat = thisThreat;
                    }
                }
            }
        }
,
(startLine=254 endLine=292 srcPath=/root/NewExperiment/freecolFilter/00649/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        while (positionIterator.hasNext()) {
            Tile t = map.getTile(positionIterator.next());
            if (t.getFirstUnit() != null) {
                if (t.getFirstUnit().getOwner() == getPlayer()) {
                    Iterator<Unit> uit = t.getUnitIterator();
                    while (uit.hasNext()) {
                        if (uit.next().isOffensiveUnit()) {
                            defenders++;
                        }
                    }
                } else {
                    int thisThreat = 0;
                    if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MAJOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat += 2;
                            }
                        }
                    } else if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MINOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat++;
                            }
                        }
                    }
                    threat += thisThreat;
                    if (thisThreat > worstThreat) {
                        if (t.getSettlement() != null) {
                            bestTarget = t.getSettlement();
                        } else {
                            bestTarget = t.getFirstUnit();
                        }
                        worstThreat = thisThreat;
                    }
                }
            }
        }
,
>
, <(startLine=162 endLine=173 srcPath=/root/NewExperiment/freecolFilter/01416/src/net/sf/freecol/client/gui/TilePopup.java)
                if (activeUnit.checkSetState(UnitState.ACTIVE)) {
                    ji = new JMenuItem(Messages.message("activateUnit"));
                    ji.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent event) {
                                if (activeUnit.checkSetState(UnitState.ACTIVE)) {
                                    igc.changeState(activeUnit, Unit.UnitState.ACTIVE);
                                }
                            }
                        });
                    add(ji);
                    hasAnItem = true;
                }
,
(startLine=174 endLine=185 srcPath=/root/NewExperiment/freecolFilter/01416/src/net/sf/freecol/client/gui/TilePopup.java)
                if (activeUnit.checkSetState(UnitState.FORTIFYING)) {
                    ji = new JMenuItem(Messages.message("fortifyUnit"));
                    ji.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent event) {
                                if (activeUnit.checkSetState(UnitState.FORTIFYING)) {
                                    igc.changeState(activeUnit, Unit.UnitState.FORTIFYING);
                                }
                            }
                        });
                    add(ji);
                    hasAnItem = true;
                }
,
(startLine=186 endLine=197 srcPath=/root/NewExperiment/freecolFilter/01416/src/net/sf/freecol/client/gui/TilePopup.java)
                if (activeUnit.checkSetState(UnitState.SKIPPED)) {
                    ji = new JMenuItem(Messages.message("skipUnit"));
                    ji.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent event) {
                                if (activeUnit.checkSetState(UnitState.SKIPPED)) {
                                    igc.changeState(activeUnit, Unit.UnitState.SKIPPED);
                                }
                            }
                        });
                    add(ji);
                    hasAnItem = true;
                }
,
>
, <(startLine=1589 endLine=1603 srcPath=/root/NewExperiment/freecolFilter/00253/src/net/sf/freecol/client/control/InGameController.java)
    public void clearSpeciality(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }

        Client client = freeColClient.getClient();

        Element clearSpecialityElement = Message.createNewRootElement("clearSpeciality");
        clearSpecialityElement.setAttribute("unit", unit.getID());

        unit.clearSpeciality();

        client.sendAndWait(clearSpecialityElement);
    }
,
(startLine=1611 endLine=1625 srcPath=/root/NewExperiment/freecolFilter/00253/src/net/sf/freecol/client/control/InGameController.java)
    public void leaveShip(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }

        Client client = freeColClient.getClient();

        unit.leaveShip();

        Element leaveShipElement = Message.createNewRootElement("leaveShip");
        leaveShipElement.setAttribute("unit", unit.getID());

        client.sendAndWait(leaveShipElement);
    }
,
(startLine=2430 endLine=2444 srcPath=/root/NewExperiment/freecolFilter/00253/src/net/sf/freecol/client/control/InGameController.java)
    public void moveToEurope(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }

        Client client = freeColClient.getClient();

        unit.moveToEurope();

        Element moveToEuropeElement = Message.createNewRootElement("moveToEurope");
        moveToEuropeElement.setAttribute("unit", unit.getID());

        client.sendAndWait(moveToEuropeElement);
    }
,
(startLine=2451 endLine=2465 srcPath=/root/NewExperiment/freecolFilter/00253/src/net/sf/freecol/client/control/InGameController.java)
    public void moveToAmerica(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }

        Client client = freeColClient.getClient();

        unit.moveToAmerica();

        Element moveToAmericaElement = Message.createNewRootElement("moveToAmerica");
        moveToAmericaElement.setAttribute("unit", unit.getID());

        client.sendAndWait(moveToAmericaElement);
    }
,
>
, <(startLine=1236 endLine=1258 srcPath=/root/NewExperiment/freecolFilter/00478/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
        if (defenders > (threat * 2)) {
            // We're so big and tough, we can go wipe out this threat.
            // Pick someone to go make it happen.
            Unit u = null;
            Iterator<Unit> uit = colony.getUnitIterator();
            while (uit.hasNext()) {
                Unit candidate = uit.next();
                if (candidate.isOffensiveUnit() && candidate.getState() == UnitState.FORTIFIED) {
                    u = candidate;
                    break;
                }
            }
            if (u != null) {
                u.setState(UnitState.ACTIVE);
                u.setLocation(colony.getTile());
                AIUnit newDefenderAI = (AIUnit) getAIMain().getAIObject(u);
                if (bestTarget != null) {
                    newDefenderAI.setMission(new UnitSeekAndDestroyMission(getAIMain(), newDefenderAI, bestTarget));
                } else {
                    newDefenderAI.setMission(new UnitWanderHostileMission(getAIMain(), newDefenderAI));
                }
            }
        }
,
(startLine=437 endLine=459 srcPath=/root/NewExperiment/freecolFilter/00478/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (defenders > (threat * 2)) {
            // We're so big and tough, we can go wipe out this threat.
            // Pick someone to go make it happen.
            Unit u = null;
            Iterator<Unit> uit = colony.getUnitIterator();
            while (uit.hasNext()) {
                Unit candidate = uit.next();
                if (candidate.isOffensiveUnit() && candidate.getState() == UnitState.FORTIFIED) {
                    u = candidate;
                    break;
                }
            }
            if (u != null) {
                u.setState(UnitState.ACTIVE);
                u.setLocation(colony.getTile());
                AIUnit newDefenderAI = (AIUnit) getAIMain().getAIObject(u);
                if (bestTarget != null) {
                    newDefenderAI.setMission(new UnitSeekAndDestroyMission(getAIMain(), newDefenderAI, bestTarget));
                } else {
                    newDefenderAI.setMission(new UnitWanderHostileMission(getAIMain(), newDefenderAI));
                }
            }
        }
,
>
, <(startLine=1609 endLine=1616 srcPath=/root/NewExperiment/freecolFilter/00392/src/net/sf/freecol/common/model/Tile.java)
        } else {
            UnitContainer emptyUnitContainer = new UnitContainer(getGame(), this);
            emptyUnitContainer.setFakeID(unitContainer.getId());
            emptyUnitContainer.toXML(out, player, showAll, toSavedGame);
            TileItemContainer emptyTileItemContainer = new TileItemContainer(getGame(), this);
            emptyTileItemContainer.setFakeID(tileItemContainer.getId());
            emptyTileItemContainer.toXML(out, player, showAll, toSavedGame);
        }
,
(startLine=1183 endLine=1191 srcPath=/root/NewExperiment/freecolFilter/00392/src/net/sf/freecol/common/model/IndianSettlement.java)
        } else {
            UnitContainer emptyUnitContainer = new UnitContainer(getGame(), this);
            emptyUnitContainer.setFakeID(unitContainer.getId());
            emptyUnitContainer.toXML(out, player, showAll, toSavedGame);

            GoodsContainer emptyGoodsContainer = new GoodsContainer(getGame(), this);
            emptyGoodsContainer.setFakeID(goodsContainer.getId());
            emptyGoodsContainer.toXML(out, player, showAll, toSavedGame);
        }
,
>
, <(startLine=395 endLine=430 srcPath=/root/NewExperiment/freecolFilter/01363/src/net/sf/freecol/common/debug/DebugUtils.java)
                                    final Unit unit) {
        final FreeColServer server = freeColClient.getFreeColServer();
        final Game sGame = server.getGame();
        final Specification sSpec = sGame.getSpecification();
        final GUI gui = freeColClient.getGUI();

        List<ChoiceItem<GoodsType>> gtl
            = new ArrayList<ChoiceItem<GoodsType>>();
        for (GoodsType t : sSpec.getGoodsTypeList()) {
            if (t.isFoodType() && t != sSpec.getPrimaryFoodType()) continue;
            String msg = Messages.message(t.getNameKey());
            gtl.add(new ChoiceItem<GoodsType>(msg, t));
        }
        GoodsType goodsType
            = gui.showChoiceDialog(true, null, "Select Goods Type", null,
                                   "cancel", gtl);
        if (goodsType == null) return;

        String amount = gui.showInputDialog(true, null,
            StringTemplate.name("Select Goods Amount"),
            "20", "ok", "cancel");
        if (amount == null) return;

        int a;
        try {
            a = Integer.parseInt(amount);
        } catch (NumberFormatException nfe) {
            return;
        }
        GoodsType sGoodsType = sSpec.getGoodsType(goodsType.getId());
        GoodsContainer ugc = unit.getGoodsContainer();
        GoodsContainer sgc = sGame.getFreeColGameObject(ugc.getId(),
                                                        GoodsContainer.class);
        ugc.setAmount(goodsType, a);
        sgc.setAmount(sGoodsType, a);
    }
,
(startLine=948 endLine=983 srcPath=/root/NewExperiment/freecolFilter/01363/src/net/sf/freecol/common/debug/DebugUtils.java)
                                      final Colony colony) {
        final Specification spec = colony.getSpecification();
        List<ChoiceItem<GoodsType>> gtl
            = new ArrayList<ChoiceItem<GoodsType>>();
        for (GoodsType t : spec.getGoodsTypeList()) {
            if (t.isFoodType() && t != spec.getPrimaryFoodType()) continue;
            String msg = Messages.message(t.getNameKey());
            gtl.add(new ChoiceItem<GoodsType>(msg, t));
        }
        GoodsType goodsType = freeColClient.getGUI()
            .showChoiceDialog(true, null, "Select Goods Type", null,
                              "cancel", gtl);
        if (goodsType == null) return;

        String response = freeColClient.getGUI().showInputDialog(true, null,
                StringTemplate.name("Select Goods Amount"),
                Integer.toString(colony.getGoodsCount(goodsType)),
                "ok", "cancel");
        if (response == null || response.length() == 0) return;
        int a;
        try {
            a = Integer.parseInt(response);
        } catch (NumberFormatException nfe) {
            return;
        }

        final FreeColServer server = freeColClient.getFreeColServer();
        final Game sGame = server.getGame();
        final Specification sSpec = server.getSpecification();
        final GoodsType sGoodsType = sSpec.getGoodsType(goodsType.getId());
        GoodsContainer cgc = colony.getGoodsContainer();
        GoodsContainer sgc = sGame.getFreeColGameObject(cgc.getId(),
                                                        GoodsContainer.class);
        cgc.setAmount(goodsType, a);
        sgc.setAmount(sGoodsType, a);
    }
,
>
, <(startLine=42 endLine=54 srcPath=/root/NewExperiment/freecolFilter/00406/test/src/net/sf/freecol/server/ServerTest.java)
    {
        FreeColServer server = null;
        try {
            server = new FreeColServer(publicServer, singleplayer, port, name);
        } catch (NoRouteToServerException e) {
            fail();
        } catch (IOException e) {
            fail();
        }
        assertNotNull(server);
        assertEquals(FreeColServer.GameState.STARTING_GAME, server.getGameState());
        return server;
    }
,
(startLine=57 endLine=71 srcPath=/root/NewExperiment/freecolFilter/00406/test/src/net/sf/freecol/server/ServerTest.java)
    {
        FreeColServer server = null;
        try {
            server = new FreeColServer(file, publicServer, singleplayer, port, name);
        } catch (NoRouteToServerException e) {
            fail();
        } catch (FreeColException e) {
            fail();
        } catch (IOException e) {
            fail();
        }
        assertNotNull(server);
        assertEquals(FreeColServer.GameState.IN_GAME, server.getGameState());
        return server;
    }
,
>
, <(startLine=361 endLine=423 srcPath=/root/NewExperiment/freecolFilter/01276/src/net/sf/freecol/client/gui/MapViewer.java)
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {
,
(startLine=453 endLine=515 srcPath=/root/NewExperiment/freecolFilter/01276/src/net/sf/freecol/client/gui/MapViewer.java)
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {
,
(startLine=550 endLine=612 srcPath=/root/NewExperiment/freecolFilter/01276/src/net/sf/freecol/client/gui/MapViewer.java)
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {
,
(startLine=612 endLine=674 srcPath=/root/NewExperiment/freecolFilter/01276/src/net/sf/freecol/client/gui/MapViewer.java)
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp--;
                                }
                            } else {
                                // Lower-Right
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp++;
                                }
                            } else {
                                // Upper-Right
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp++;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {
,
>
, <(startLine=329 endLine=344 srcPath=/root/NewExperiment/freecolFilter/00908/src/net/sf/freecol/common/model/Building.java)
    public boolean remove(final Locatable locatable) {
        if (!(locatable instanceof Unit)) {
            throw new IllegalStateException("Not a unit: " + locatable);
        }
        Unit unit = (Unit) locatable;
        if (!contains(unit)) return true;

        if (super.remove(unit)) {
            unit.setState(Unit.UnitState.ACTIVE);
            unit.setMovesLeft(0);

            getColony().invalidateCache();
            return true;
        }
        return false;
    }
,
(startLine=284 endLine=299 srcPath=/root/NewExperiment/freecolFilter/00908/src/net/sf/freecol/common/model/ColonyTile.java)
    public boolean remove(final Locatable locatable) {
        if (!(locatable instanceof Unit)) {
            throw new IllegalStateException("Not a unit: " + locatable);
        }
        Unit unit = (Unit) locatable;
        if (!contains(unit)) return true;

        if (super.remove(unit)) {
            unit.setState(Unit.UnitState.ACTIVE);
            unit.setMovesLeft(0);

            getColony().invalidateCache();
            return true;
        }
        return false;
    }
,
>
, <(startLine=169 endLine=182 srcPath=/root/NewExperiment/freecolFilter/00876/src/net/sf/freecol/common/model/Operand.java)
                    && getMethodName() != null) {
                    try {
                        Method method = game.getClass().getMethod(getMethodName());
                        if (method != null &&
                            Integer.class.isAssignableFrom(method.getReturnType())) {
                            return (Integer) method.invoke(game);
                        } else {
                            return null;
                        }
                    } catch(Exception e) {
                        logger.warning(e.toString());
                        return null;
                    }
                } else if (operandType == OperandType.YEAR) {
,
(startLine=288 endLine=299 srcPath=/root/NewExperiment/freecolFilter/00876/src/net/sf/freecol/common/model/Operand.java)
                    if (getMethodName() != null) {
                        try {
                            Method method = colony.getClass().getMethod(getMethodName());
                            if (method != null &&
                                Integer.class.isAssignableFrom(method.getReturnType())) {
                                return (Integer) method.invoke(colony);
                            }
                        } catch(Exception e) {
                            logger.warning(e.toString());
                            return null;
                        }
                    }
,
>
, <(startLine=523 endLine=537 srcPath=/root/NewExperiment/freecolFilter/00007/src/net/sf/freecol/common/model/Unit.java)
    public void add(Locatable locatable) {
        if (isCarrier()) {
            // TODO: Check if there is space for a new Locatable.

            if (locatable instanceof Unit) {
                unitContainer.addUnit((Unit) locatable);
            } else if (locatable instanceof Goods) {
                goodsContainer.addGoods((Goods) locatable);
            } else {
                logger.warning("Tried to add an unrecognized 'Locatable' to a unit.");
            }
        } else {
            logger.warning("Tried to add a 'Locatable' to a non-carrier unit.");
        }
    }
,
(startLine=544 endLine=556 srcPath=/root/NewExperiment/freecolFilter/00007/src/net/sf/freecol/common/model/Unit.java)
    public void remove(Locatable locatable) {
        if (isCarrier()) {
            if (locatable instanceof Unit) {
                unitContainer.removeUnit((Unit) locatable);
            } else if (locatable instanceof Goods) {
                goodsContainer.removeGoods((Goods) locatable);
            } else {
                logger.warning("Tried to remove an unrecognized 'Locatable' from a unit.");
            }
        } else {
            logger.warning("Tried to remove a 'Locatable' from a non-carrier unit.");
        }
    }
,
>
, <(startLine=539 endLine=614 srcPath=/root/NewExperiment/freecolFilter/00956/src/net/sf/freecol/common/model/Map.java)
            for (Direction direction : Direction.values()) {
                final Tile moveTile = currentTile.getNeighbourOrNull(direction);
                if (moveTile == null) continue;

                // If the new tile is the tile we just visited, skip
                // it. We can use == because PathNode.getTile() and
                // getNeighborOrNull both return references to the
                // actual Tile in tiles[][].
                if (currentNode.previous != null
                    && currentNode.previous.getTile() == moveTile) {
                    continue;
                }
                if (closedList.containsKey(moveTile.getId())) {
                    continue;
                }

                // Check for disembarkation on new tile, setting
                // moveUnit to the unit that would actually move.
                boolean moveOnCarrier = carrier != null
                    && currentOnCarrier
                    && (!moveTile.isLand()
                        || (moveTile.getSettlement() != null
                            && moveTile.getSettlement().getOwner()
                            == currentUnit.getOwner()));
                Unit moveUnit = (moveOnCarrier) ? carrier : unit;
                int moveCost = currentCost;
                int moveMoves = (currentOnCarrier && !moveOnCarrier)
                    ? moveUnit.getInitialMovesLeft()
                    : currentMoves;
                int moveTurns = currentTurns;
                CostDecider moveDecider = (costDecider != null) ? costDecider
                    : CostDeciders.defaultCostDeciderFor(moveUnit);

                // Update parameters for the new tile.
                int extraCost = moveDecider.getCost(moveUnit,
                    currentTile, moveTile, moveMoves);
                if (extraCost == CostDecider.ILLEGAL_MOVE) {
                    // Do not let the CostDecider (which may be
                    // conservative) block the final destination if it
                    // is still a legal move.
                    if (moveTile == end
                        && moveUnit.getSimpleMoveType(currentTile, moveTile)
                        .isLegal()) {
                        moveCost += moveUnit.getInitialMovesLeft();
                        moveMoves = 0;
                    } else {
                        continue;
                    }
                } else {
                    moveCost += extraCost;
                    moveMoves = moveDecider.getMovesLeft();
                    if (moveDecider.isNewTurn()) moveTurns++;
                }

                // Is this an improvement?  If not, ignore.
                PathNode successor = openList.get(moveTile.getId());
                if (successor != null) {
                    if (successor.getTurns() < moveTurns
                        || (successor.getTurns() == moveTurns
                            && successor.getCost() <= moveCost)) {
                        continue;
                    }
                    openList.remove(successor.getTile().getId());
                    openListQueue.remove(successor);
                }

                // Queue new node with updated parameters.
                final int f = moveTurns * 100
                    + moveCost + moveTile.getDistanceTo(end);
                successor = new PathNode(moveTile, moveCost, f, direction,
                                         moveMoves, moveTurns);
                successor.previous = currentNode;
                successor.setOnCarrier(carrier != null && moveUnit == carrier);
                openList.put(moveTile.getId(), successor);
                openListQueue.offer(successor);
            }
,
(startLine=801 endLine=862 srcPath=/root/NewExperiment/freecolFilter/00956/src/net/sf/freecol/common/model/Map.java)
            for (Direction direction : Direction.values()) {
                final Tile moveTile = currentTile.getNeighbourOrNull(direction);
                if (moveTile == null) continue;

                // If the new tile is the tile we just visited, skip
                // it.  We can use == because PathNode.getTile() and
                // getNeighborOrNull both return references to the
                // actual Tile in tiles[][].
                if (currentNode.previous != null
                    && currentNode.previous.getTile() == moveTile) {
                    continue;
                }
                if (closedList.containsKey(moveTile.getId())) {
                    continue;
                }

                // Check for disembarkation on new tile, setting
                // moveUnit to the unit that would actually move.
                boolean moveOnCarrier = carrier != null
                    && currentOnCarrier
                    && (!moveTile.isLand()
                        || (moveTile.getSettlement() != null
                            && moveTile.getSettlement().getOwner()
                            == currentUnit.getOwner()));
                Unit moveUnit = (moveOnCarrier) ? carrier : unit;
                int moveCost = currentCost;
                int moveMoves = (currentOnCarrier && !moveOnCarrier)
                    ? moveUnit.getInitialMovesLeft()
                    : currentMoves;
                int moveTurns = currentTurns;
                CostDecider moveDecider = (costDecider != null) ? costDecider
                    : CostDeciders.defaultCostDeciderFor(moveUnit);

                // Update parameters for the new tile.
                int extraCost = moveDecider.getCost(moveUnit, currentTile,
                                                    moveTile, moveMoves);
                if (extraCost == CostDecider.ILLEGAL_MOVE) continue;
                moveCost += extraCost;
                moveMoves = moveDecider.getMovesLeft();
                if (moveDecider.isNewTurn()) moveTurns++;

                // Is this an improvement?  If not, ignore.
                PathNode successor = openList.get(moveTile.getId());
                if (successor != null) {
                    if (successor.getTurns() < moveTurns
                        || (successor.getTurns() == moveTurns
                            && successor.getCost() <= moveCost)) {
                        continue;
                    }
                    openList.remove(successor.getTile().getId());
                    openListQueue.remove(successor);
                }

                // Queue new node with updated parameters.
                final int f = moveTurns * 100 + moveCost;
                successor = new PathNode(moveTile, moveCost, f, direction,
                                         moveMoves, moveTurns);
                successor.previous = currentNode;
                successor.setOnCarrier(carrier != null && moveUnit == carrier);
                openList.put(moveTile.getId(), successor);
                openListQueue.offer(successor);
            }
,
>
, <(startLine=85 endLine=104 srcPath=/root/NewExperiment/freecolFilter/00676/test/src/net/sf/freecol/server/ai/mission/PrivateerMissionTest.java)
	private void setupPrivateerTestGame(){
	    // start a server
	    server = ServerTestHelper.startServer(false, true);

	    Map map = getCoastTestMap(plainsType);

	    server.setMapGenerator(new MockMapGenerator(map));

	    Controller c = server.getController();
	    PreGameController pgc = (PreGameController)c;

	    try {
	        pgc.startGame();
	        setGame(server.getGame());
	    } catch (FreeColException e) {
	        fail("Failed to start game");
	    }
	    
	    setupPrivateerTestMap();
	}
,
(startLine=54 endLine=69 srcPath=/root/NewExperiment/freecolFilter/00676/test/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMissionTest.java)
    private void setupServer(){
        // start a server
        server = ServerTestHelper.startServer(false, true);
                
        server.setMapGenerator(new MockMapGenerator(getTestMap()));
        
        Controller c = server.getController();
        PreGameController pgc = (PreGameController)c;
        
        try {
            pgc.startGame();
            setGame(server.getGame());
        } catch (FreeColException e) {
            fail("Failed to start game");
        }
    }
,
>
, <(startLine=92 endLine=98 srcPath=/root/NewExperiment/freecolFilter/00423/src/net/sf/freecol/common/networking/StatisticsMessage.java)
        if (memoryElement != null) {
            memoryStats = new HashMap<String, Long>();
            NamedNodeMap atts = (NamedNodeMap)memoryElement.getAttributes();
            for (int i=0; i<atts.getLength(); i++) {
                memoryStats.put(atts.item(i).getNodeName(), new Long(atts.item(i).getNodeValue()));
            }
        }
,
(startLine=100 endLine=106 srcPath=/root/NewExperiment/freecolFilter/00423/src/net/sf/freecol/common/networking/StatisticsMessage.java)
        if (gameElement != null) {
            gameStats = new HashMap<String, Long>();
            NamedNodeMap atts = (NamedNodeMap)gameElement.getAttributes();
            for (int i=0; i<atts.getLength(); i++) {
                gameStats.put(atts.item(i).getNodeName(), new Long(atts.item(i).getNodeValue()));
            }
        }
,
(startLine=108 endLine=114 srcPath=/root/NewExperiment/freecolFilter/00423/src/net/sf/freecol/common/networking/StatisticsMessage.java)
        if (aiElement != null) {
            aiStats = new HashMap<String, Long>();
            NamedNodeMap atts = (NamedNodeMap)aiElement.getAttributes();
            for (int i=0; i<atts.getLength(); i++) {
                aiStats.put(atts.item(i).getNodeName(), new Long(atts.item(i).getNodeValue()));
            }
        }
,
>
, <(startLine=1290 endLine=1297 srcPath=/root/NewExperiment/freecolFilter/00465/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if(!unit.getOwner().isIndian() && enemyUnit.getOwner().isIndian()){
        	if(typeToLose == FreeCol.getSpecification().getEquipmentType("model.equipment.horses")){
        		newEquipType = FreeCol.getSpecification().getEquipmentType("model.equipment.indian.horses");
        	}
        	if(typeToLose == FreeCol.getSpecification().getEquipmentType("model.equipment.muskets")){
        		newEquipType = FreeCol.getSpecification().getEquipmentType("model.equipment.indian.muskets");
        	}
        }
,
(startLine=1298 endLine=1305 srcPath=/root/NewExperiment/freecolFilter/00465/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if(unit.getOwner().isIndian() && !enemyUnit.getOwner().isIndian()){
        	if(typeToLose == FreeCol.getSpecification().getEquipmentType("model.equipment.indian.horses")){
        		newEquipType = FreeCol.getSpecification().getEquipmentType("model.equipment.horses");
        	}
        	if(typeToLose == FreeCol.getSpecification().getEquipmentType("model.equipment.indian.muskets")){
        		newEquipType = FreeCol.getSpecification().getEquipmentType("model.equipment.muskets");
        	}
        }
,
>
, <(startLine=507 endLine=516 srcPath=/root/NewExperiment/freecolFilter/01482/src/net/sf/freecol/server/control/ChangeSet.java)
        public String toString() {
            StringBuilder sb = new StringBuilder(32);
            sb.append("[").append(getClass().getName())
                .append(" ").append(see)
                .append(" #").append(getPriority())
                .append(" ").append(key)
                .append("=").append(value)
                .append("]");
            return sb.toString();
        }
,
(startLine=573 endLine=581 srcPath=/root/NewExperiment/freecolFilter/01482/src/net/sf/freecol/server/control/ChangeSet.java)
        public String toString() {
            StringBuilder sb = new StringBuilder(32);
            sb.append("[").append(getClass().getName())
                .append(" ").append(see)
                .append(" #").append(getPriority())
                .append(" ").append(message)
                .append("]");
            return sb.toString();
        }
,
(startLine=806 endLine=814 srcPath=/root/NewExperiment/freecolFilter/01482/src/net/sf/freecol/server/control/ChangeSet.java)
        public String toString() {
            StringBuilder sb = new StringBuilder(32);
            sb.append("[").append(getClass().getName())
                .append(" ").append(see)
                .append(" #").append(getPriority())
                .append(" ").append(fcgo.getId())
                .append("]");
            return sb.toString();
        }
,
(startLine=1032 endLine=1040 srcPath=/root/NewExperiment/freecolFilter/01482/src/net/sf/freecol/server/control/ChangeSet.java)
        public String toString() {
            StringBuilder sb = new StringBuilder(32);
            sb.append("[").append(getClass().getName())
                .append(" ").append(see)
                .append(" #").append(getPriority())
                .append(" ").append(fco.getId())
                .append("]");
            return sb.toString();
        }
,
(startLine=1175 endLine=1183 srcPath=/root/NewExperiment/freecolFilter/01482/src/net/sf/freecol/server/control/ChangeSet.java)
        public String toString() {
            StringBuilder sb = new StringBuilder(32);
            sb.append("[").append(getClass().getName())
                .append(" ").append(see)
                .append(" #").append(getPriority())
                .append(" ").append(tile.getId())
                .append("]");
            return sb.toString();
        }
,
>
, <(startLine=537 endLine=553 srcPath=/root/NewExperiment/freecolFilter/00279/src/net/sf/freecol/common/model/TileItemContainer.java)
            } else if (in.getLocalName().equals(TileImprovement.getXMLElementTagName())) {
                TileImprovement ti = (TileImprovement) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
                if (ti != null) {
                    ti.readFromXML(in);
                    if (!improvements.contains(ti)) {
                        improvements.add(ti);
                    }
                } else {
                    ti = new TileImprovement(getGame(), tile, in);
                    improvements.add(ti);
                }
                if (ti.isRoad()) {
                    road = ti;
                } else if (ti.isRiver()) {
                    river = ti;
                }
            }
,
(startLine=2620 endLine=2636 srcPath=/root/NewExperiment/freecolFilter/00279/src/net/sf/freecol/common/model/Tile.java)
                } else if (in.getLocalName().equals(TileImprovement.getXMLElementTagName())) {
                    TileImprovement ti = (TileImprovement) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
                    if (ti != null) {
                        ti.readFromXML(in);
                        if (!improvements.contains(ti)) {
                            improvements.add(ti);
                        }
                    } else {
                        ti = new TileImprovement(getGame(), tile, in);
                        improvements.add(ti);
                    }
                    if (ti.isRoad()) {
                        road = ti;
                    } else if (ti.isRiver()) {
                        river = ti;
                    }
                }
,
>
, <(startLine=223 endLine=238 srcPath=/root/NewExperiment/freecolFilter/00512/src/net/sf/freecol/server/generator/MapGeneratorOptions.java)
    private int getWidth(final int size) {
        switch (size) {
        case MAP_SIZE_SMALL:
            return 28;
        case MAP_SIZE_MEDIUM:
            return 28;
        case MAP_SIZE_LARGE:
            return 37;
        case MAP_SIZE_VERY_LARGE:
            return 46;
        case MAP_SIZE_HUGE:
            return 55;
        default:
            throw new IllegalStateException("Invalid map-size: " + size + ".");
        }
    }
,
(startLine=249 endLine=264 srcPath=/root/NewExperiment/freecolFilter/00512/src/net/sf/freecol/server/generator/MapGeneratorOptions.java)
    private int getHeight(int size) {
        switch (size) {
        case MAP_SIZE_SMALL:
            return 65;
        case MAP_SIZE_MEDIUM:
            return 128;
        case MAP_SIZE_LARGE:
            return 192;
        case MAP_SIZE_VERY_LARGE:
            return 257;
        case MAP_SIZE_HUGE:
            return 321;
        default:
            throw new IllegalStateException("Invalid map-size: " + size + ".");
        }
    }
,
>
, <(startLine=355 endLine=547 srcPath=/root/NewExperiment/freecolFilter/01226/src/net/sf/freecol/client/gui/MapViewer.java)
            if ((diffUp % 2) == 0) {
                if ((diffLeft % 2) == 0) {
                    diffLeft = diffLeft / 2;
                    done = true;
                } else {
                    // Crosspoint
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }
                }
            } else {
,
(startLine=547 endLine=751 srcPath=/root/NewExperiment/freecolFilter/01226/src/net/sf/freecol/client/gui/MapViewer.java)
            } else {
                if ((diffLeft % 2) == 0) {
                    // Crosspoint
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp--;
                                }
                            } else {
                                // Lower-Right
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp++;
                                }
                            } else {
                                // Upper-Right
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp++;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }
                } else {
                    if ((focus.getY() % 2) == 0) {
                        if (diffLeft < 0) {
                            diffLeft = diffLeft / 2;
                        } else {
                            diffLeft = (diffLeft / 2) + 1;
                        }
                    } else {
                        if (diffLeft < 0) {
                            diffLeft = (diffLeft / 2) - 1;
                        } else {
                            diffLeft = diffLeft / 2;
                        }
                    }
                    done = true;
                }
            }
,
>
, <(startLine=196 endLine=211 srcPath=/root/NewExperiment/freecolFilter/01489/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        public void actionPerformed(ActionEvent event) {
            final String command = event.getActionCommand();
            if (null != command) switch (command) {
                case ADD:
                    NegotiationDialog.this.addColonyTradeItem(source,
                            (Colony)colonyBox.getSelectedItem());
                    break;
                case CLEAR:
                    NegotiationDialog.this
                            .removeTradeItems(ColonyTradeItem.class);
                    break;
                default:
                    logger.warning("Bad command: " + command);
                    break;
            }
        }
,
(startLine=403 endLine=418 srcPath=/root/NewExperiment/freecolFilter/01489/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        public void actionPerformed(ActionEvent event) {
            final String command = event.getActionCommand();
            if (null != command) switch (command) {
                case ADD:
                    NegotiationDialog.this.addGoodsTradeItem(source,
                            (Goods)goodsBox.getSelectedItem());
                    break;
                case CLEAR:
                    NegotiationDialog.this
                            .removeTradeItems(GoodsTradeItem.class);
                    break;
                default:
                    logger.warning("Bad command: " + command);
                    break;
            }
        }
,
(startLine=644 endLine=659 srcPath=/root/NewExperiment/freecolFilter/01489/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        public void actionPerformed(ActionEvent event) {
            final String command = event.getActionCommand();
            if (null != command) switch (command) {
                case ADD:
                    Stance stance = (Stance)stanceBox.getSelectedItem();
                    NegotiationDialog.this.addStanceTradeItem(stance);
                    break;
                case CLEAR:
                    NegotiationDialog.this
                            .removeTradeItems(StanceTradeItem.class);
                    break;
                default:
                    logger.warning("Bad command: " + command);
                    break;
            }
        }
,
(startLine=764 endLine=779 srcPath=/root/NewExperiment/freecolFilter/01489/src/net/sf/freecol/client/gui/panel/NegotiationDialog.java)
        public void actionPerformed(ActionEvent event) {
            final String command = event.getActionCommand();
            if (null != command) switch (command) {
                case ADD:
                    NegotiationDialog.this.addUnitTradeItem(source,
                            (Unit)unitBox.getSelectedItem());
                    break;
                case CLEAR:
                    NegotiationDialog.this
                            .removeTradeItems(UnitTradeItem.class);
                    break;
                default:
                    logger.warning("Bad command: " + command);
                    break;
            }
        }
,
>
, <(startLine=1090 endLine=1101 srcPath=/root/NewExperiment/freecolFilter/01062/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            if (t instanceof AIUnit) {
                aiu = (AIUnit)t;
                if (aiu.leaveTransport(null)) {
                    logger.finest(tag + " completed (unload) of " + aiu
                        + " at " + here + ": " + this);
                } else {
                    logger.warning(tag + " failed to unload " + aiu
                        + " at " + here + ": " + this);
                    return CargoResult.TFAIL;
                }
                
            } else if (t instanceof AIGoods) {
,
(startLine=1101 endLine=1111 srcPath=/root/NewExperiment/freecolFilter/01062/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            } else if (t instanceof AIGoods) {
                aig = (AIGoods)t;
                if (aig.leaveTransport(null)) {
                    logger.finest(tag + " completed (unload) of " + aig
                        + " at " + here + ": " + this);
                } else {
                    logger.warning(tag + " failed to unload " + aig
                        + " at " + here + ": " + this);
                    return CargoResult.TFAIL;
                }
            } else throw new IllegalStateException("Bogus transportable: "+t);
,
>
, <(startLine=212 endLine=225 srcPath=/root/NewExperiment/freecolFilter/00737/src/net/sf/freecol/server/ai/NewAIPlayer.java)
    protected void sendAndWaitSafely(Element element) {
        logger.finest("Entering method sendAndWaitSafely");
        try {
            if (logger.isLoggable(Level.FINER)) {
                logger.finer("AI player (" + this + ") sending " + element.getTagName() + "...");
            }
            getConnection().sendAndWait(element);
            if (logger.isLoggable(Level.FINER)) {
                logger.finer("Sent and waited, returning.");
            }
        } catch (IOException e) {
            logger.log(Level.WARNING, "Couldn't send AI element " + element.getTagName() + "!", e);
        }
    }
,
(startLine=195 endLine=208 srcPath=/root/NewExperiment/freecolFilter/00737/src/net/sf/freecol/server/ai/AIPlayer.java)
    protected void sendAndWaitSafely(Element element) {
        logger.finest("Entering method sendAndWaitSafely");
        try {
            if (logger.isLoggable(Level.FINER)) {
                logger.finer("AI player (" + this + ") sending " + element.getTagName() + "...");
            }
            getConnection().sendAndWait(element);
            if (logger.isLoggable(Level.FINER)) {
                logger.finer("Sent and waited, returning.");
            }
        } catch (IOException e) {
            logger.log(Level.WARNING, "Couldn't send AI element " + element.getTagName() + "!", e);
        }
    }
,
>
, <(startLine=139 endLine=169 srcPath=/root/NewExperiment/freecolFilter/01338/src/net/sf/freecol/common/resources/FAFile.java)
        while (line != null && !line.startsWith("[Chars]")) {
            String name = line;
            st = new StringTokenizer(in.readLine());
            int width = Integer.parseInt(st.nextToken());
            int height = Integer.parseInt(st.nextToken());
            int numberOfPoints = Integer.parseInt(st.nextToken());
            int[] xs = new int[numberOfPoints];
            int[] ys = new int[numberOfPoints];

            line = in.readLine();
            st = new StringTokenizer(line);
            for (int i=0; i<numberOfPoints; i++) {
                xs[i] = Integer.parseInt(st.nextToken());               
            }

            line = in.readLine();
            st = new StringTokenizer(line);         
            for (int i=0; i<numberOfPoints; i++) {
                ys[i] = Integer.parseInt(st.nextToken());               
            }   

            FAName newLetter = new FAName();
            newLetter.width = width;
            newLetter.height = height;
            newLetter.points = new Point[numberOfPoints];
            for (int i=0; i<numberOfPoints; i++) {
                newLetter.points[i] = new Point(xs[i], ys[i]);                
            }                       
            letters.put(name, newLetter);
            line = in.readLine();
        }
,
(startLine=172 endLine=199 srcPath=/root/NewExperiment/freecolFilter/01338/src/net/sf/freecol/common/resources/FAFile.java)
        while (line != null) {
            st = new StringTokenizer(line.substring(1));
            char letter = line.charAt(0);
            int advance = Integer.parseInt(st.nextToken());
            int numberOfPoints = Integer.parseInt(st.nextToken());
            int[] xs = new int[numberOfPoints];
            int[] ys = new int[numberOfPoints];
            line = in.readLine();
            st = new StringTokenizer(line);
            for (int i=0; i<numberOfPoints; i++) {
                xs[i] = Integer.parseInt(st.nextToken());               
            }

            line = in.readLine();
            st = new StringTokenizer(line);         
            for (int i=0; i<numberOfPoints; i++) {
                ys[i] = Integer.parseInt(st.nextToken());               
            }   

            FALetter newLetter = new FALetter();
            newLetter.advance = advance;
            newLetter.points = new Point[numberOfPoints];
            for (int i=0; i<numberOfPoints; i++) {
                newLetter.points[i] = new Point(xs[i], ys[i]);                
            }           
            letters.put(new Character(letter), newLetter);
            line = in.readLine();
        }
,
>
, <(startLine=223 endLine=229 srcPath=/root/NewExperiment/freecolFilter/01372/test/src/net/sf/freecol/common/model/ProductionTypeTest.java)
            for (AbstractGoods ag : productionType.getInputs()) {
                Integer i = inputs.get(ag.getType());
                assertNotNull("Input expected for " + ag.getType(), i);
                assertEquals("Input amount mismatch for " + ag.getType(),
                    i.intValue(), ag.getAmount());
                inputs.remove(ag.getType());
            }
,
(startLine=230 endLine=236 srcPath=/root/NewExperiment/freecolFilter/01372/test/src/net/sf/freecol/common/model/ProductionTypeTest.java)
            for (AbstractGoods ag : productionType.getOutputs()) {
                Integer i = outputs.get(ag.getType());
                assertNotNull("Output expected for " + ag.getType(), i);
                assertEquals("Output amount mismatch for " + ag.getType(),
                    i.intValue(), ag.getAmount());
                outputs.remove(ag.getType());
            }
,
>
, <(startLine=53 endLine=91 srcPath=/root/NewExperiment/freecolFilter/01560/test/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMissionTest.java)
    public void testCapturedUnitsLoseMission() {
        Game game = ServerTestHelper.startServerGame(getTestMap());
        Map map = game.getMap();
        AIMain aiMain = ServerTestHelper.getServer().getAIMain();

        // Create attacking player and unit
        ServerPlayer player1
            = (ServerPlayer)game.getPlayerByNationId("model.nation.dutch");
        Tile tile1 = map.getTile(2, 2);
        Unit attacker = new ServerUnit(game, tile1, player1, veteranType);
        AIUnit aiUnit = aiMain.getAIUnit(attacker);
        assertNotNull(aiUnit);

        // Create defending player and unit
        ServerPlayer player2
            = (ServerPlayer)game.getPlayerByNationId("model.nation.french");
        Tile tile2 = map.getTile(2, 1);
        Role soldierRole = spec().getRole("model.role.soldier");
        Unit defender = new ServerUnit(game, tile2, player2,
                                       veteranType, soldierRole);

        player1.setStance(player2, Stance.WAR);
        player2.setStance(player1, Stance.WAR);

        UnitSeekAndDestroyMission mission
            = new UnitSeekAndDestroyMission(aiMain, aiUnit, defender);
        assertTrue("Attacker should have a UnitSeekAndDestroyMission",
            aiUnit.hasMission(UnitSeekAndDestroyMission.class));

        // simulate capture
        attacker.changeOwner(player2);
        assertEquals("Attacking unit should have been captured",
                     attacker.getOwner(), player2);

        // re-check unit mission
        aiUnit = aiMain.getAIUnit(attacker);
        assertNull("Captured unit should lose previous mission",
                   aiUnit.getMission());
    }
,
(startLine=93 endLine=125 srcPath=/root/NewExperiment/freecolFilter/01560/test/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMissionTest.java)
    public void testDoNotPursueUnitsInColonies(){
        Game game = ServerTestHelper.startServerGame(getTestMap());
        Map map = game.getMap();
        AIMain aiMain = ServerTestHelper.getServer().getAIMain();

        // Create attacking player and unit
        ServerPlayer player1 = (ServerPlayer) game.getPlayerByNationId("model.nation.dutch");
        Tile tile1 = map.getTile(2, 2);
        Unit attacker = new ServerUnit(game, tile1, player1, veteranType);
        AIUnit aiUnit = aiMain.getAIUnit(attacker);
        assertNotNull(aiUnit);

        // Create defending player and unit
        ServerPlayer player2 = (ServerPlayer) game.getPlayerByNationId("model.nation.french");
        Tile defenderTile = map.getTile(2, 1);
        Role soldierRole = spec().getRole("model.role.soldier");
        Unit defender = new ServerUnit(game, defenderTile, player2, veteranType, soldierRole);

        player1.setStance(player2, Stance.WAR);
        player2.setStance(player1, Stance.WAR);

        UnitSeekAndDestroyMission mission
            = new UnitSeekAndDestroyMission(aiMain, aiUnit, defender);
        assertTrue("Attacker should have a UnitSeekAndDestroyMission",
                   aiUnit.hasMission(UnitSeekAndDestroyMission.class));
        assertTrue("UnitSeekAndDestroyMission should be valid",
                   aiUnit.getMission().isValid());

        // add colony to the defender tile, to simulate the unit entering it
        getStandardColony(1, defenderTile.getX(),defenderTile.getY());
        assertFalse("UnitSeekAndDestroyMission should NOT be valid anymore, defender in colony",
                    aiUnit.getMission().isValid());
    }
,
>
, <(startLine=317 endLine=330 srcPath=/root/NewExperiment/freecolFilter/00711/src/net/sf/freecol/server/control/InGameController.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                player.setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           player.modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), player, stance, otherPlayer);
                change = true;
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }
,
(startLine=331 endLine=344 srcPath=/root/NewExperiment/freecolFilter/00711/src/net/sf/freecol/server/control/InGameController.java)
        if (symmetric && (old = otherPlayer.getStance(player)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(player, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) player),
                           otherPlayer.modifyTension(player, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, player);
                change = true;
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }
,
>
, <(startLine=267 endLine=282 srcPath=/root/NewExperiment/freecolFilter/00648/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    public boolean hasFewColonies() {        
        logger.finest("Entering method hasFewColonies");
        if (!getPlayer().canBuildColonies()) {
            return false;
        }
        int numberOfColonies = 0;
        int numberOfWorkers = 0;
        for (Colony colony : getPlayer().getColonies()) {
            numberOfColonies++;
            numberOfWorkers += colony.getUnitCount();
        }
        
        logger.finest("Leaving method hasFewColonies");
        return numberOfColonies <= 2 || numberOfColonies >= 3
                && numberOfWorkers / numberOfColonies > numberOfColonies - 2;
    }
,
(startLine=280 endLine=295 srcPath=/root/NewExperiment/freecolFilter/00648/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    public boolean hasFewColonies() {
        logger.finest("Entering method hasFewColonies");
        if (!getPlayer().canBuildColonies()) {
            return false;
        }
        int numberOfColonies = 0;
        int numberOfWorkers = 0;
        for (Settlement settlment : getPlayer().getSettlements()) {
            numberOfColonies++;
            numberOfWorkers += settlment.getUnitCount();
        }
        
        logger.finest("Leaving method hasFewColonies");
        return numberOfColonies <= 2 || numberOfColonies >= 3
                && numberOfWorkers / numberOfColonies > numberOfColonies - 2;
    }
,
(startLine=712 endLine=727 srcPath=/root/NewExperiment/freecolFilter/00648/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    public boolean hasFewColonies() {
        logger.finest("Entering method hasFewColonies");
        if (!getPlayer().canBuildColonies()) {
            return false;
        }
        int numberOfColonies = 0;
        int numberOfWorkers = 0;
        for (Colony colony : getPlayer().getColonies()) {
            numberOfColonies++;
            numberOfWorkers += colony.getUnitCount();
        }

        logger.finest("Leaving method hasFewColonies");
        return numberOfColonies <= 2 || numberOfColonies >= 3
            && numberOfWorkers / numberOfColonies > numberOfColonies - 2;
    }
,
>
, <(startLine=388 endLine=397 srcPath=/root/NewExperiment/freecolFilter/00848/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askTrivial(String tag) {
        Client client = freeColClient.getClient();
        Element element = Message.createNewRootElement(tag);
        element = askExpecting(client, element, null);
        if (element == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, element);
        return true;
    }
,
(startLine=5009 endLine=5018 srcPath=/root/NewExperiment/freecolFilter/00848/src/net/sf/freecol/client/control/InGameController.java)
    private boolean askGetNewTradeRoute() {
        Client client = freeColClient.getClient();
        Element element = Message.createNewRootElement("getNewTradeRoute");
        Element reply = askExpecting(client, element, null);
        if (reply == null) return false;

        Connection conn = client.getConnection();
        freeColClient.getInGameInputHandler().handle(conn, reply);
        return true;
    }
,
>
, <(startLine=1240 endLine=1267 srcPath=/root/NewExperiment/freecolFilter/00529/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    private void demoteUnit(Unit unit, UnitType downgrade, Unit enemyUnit) {
        String locationName = unit.getLocation().getLocationName();
        String nation = unit.getOwner().getNationAsString();
        String oldName = unit.getName();
        String enemyNation = enemyUnit.getOwner().getNationAsString();
        String messageID = Messages.getKey(unit.getType().getId() + ".demoted",
                                           "model.unit.unitDemoted");

        unit.setType(downgrade);
        enemyUnit.addModelMessage(enemyUnit,
                                  ModelMessage.MessageType.COMBAT_RESULT,
                                  messageID,
                                  "%nation%", nation,
                                  "%oldName%", oldName,
                                  "%unit%", unit.getName(),
                                  "%enemyNation%", enemyNation,
                                  "%enemyUnit%", enemyUnit.getName(),
                                  "%location%", locationName);
        unit.addModelMessage(unit,
                             ModelMessage.MessageType.COMBAT_RESULT,
                             messageID,
                             "%nation%", nation,
                             "%oldName%", oldName,
                             "%unit%", unit.getName(),
                             "%enemyNation%", enemyNation,
                             "%enemyUnit%", enemyUnit.getName(),
                             "%location%", locationName);
    }
,
(startLine=1354 endLine=1380 srcPath=/root/NewExperiment/freecolFilter/00529/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    private void slaughterUnit(Unit unit, Unit enemyUnit) {
        String locationName = enemyUnit.getLocation().getLocationName();
        Player loser = unit.getOwner();
        String nation = loser.getNationAsString();
        String enemyNation = enemyUnit.getOwner().getNationAsString();
        String messageID = Messages.getKey(unit.getType().getId() + ".destroyed",
                                           "model.unit.unitSlaughtered");

        enemyUnit.addModelMessage(enemyUnit,
                                  ModelMessage.MessageType.COMBAT_RESULT,
                                  messageID,
                                  "%nation%", nation,
                                  "%unit%", unit.getName(),
                                  "%enemyNation%", enemyNation,
                                  "%enemyUnit%", enemyUnit.getName(),
                                  "%location%", locationName);
        unit.addModelMessage(unit,
                             ModelMessage.MessageType.COMBAT_RESULT,
                             messageID,
                             "%nation%", nation,
                             "%unit%", unit.getName(),
                             "%enemyNation%", enemyNation,
                             "%enemyUnit%", enemyUnit.getName(),
                             "%location%", locationName);
        loser.divertModelMessages(unit, unit.getTile());
        unit.dispose();
    }
,
>
, <(startLine=154 endLine=166 srcPath=/root/NewExperiment/freecolFilter/01438/test/src/net/sf/freecol/common/model/BuildingTest.java)
    public void testStockadeRequiresMinimumPopulation() {
        Game game = getGame();
        game.setMap(getTestMap(true));
        Colony colony = getStandardColony(2);
        assertEquals(Colony.NoBuildReason.POPULATION_TOO_SMALL,
                     colony.getNoBuildReason(stockadeType, null));

        Unit colonist = new ServerUnit(game, colony.getTile(), colony.getOwner(), freeColonistType);
        colonist.setLocation(colony);

        assertEquals(Colony.NoBuildReason.NONE,
                     colony.getNoBuildReason(stockadeType, null));
    }
,
(startLine=168 endLine=181 srcPath=/root/NewExperiment/freecolFilter/01438/test/src/net/sf/freecol/common/model/BuildingTest.java)
    public void testFortRequiresMinimumPopulation() {
        Game game = getGame();
        game.setMap(getTestMap(true));
        Colony colony = getStandardColony(2);
        assertEquals(Colony.NoBuildReason.POPULATION_TOO_SMALL,
                     colony.getNoBuildReason(fortType, null));

        Unit colonist = new ServerUnit(game, colony.getTile(), colony.getOwner(), freeColonistType);
        colonist.setLocation(colony);

        colony.addBuilding(new ServerBuilding(game, colony, stockadeType));
        assertEquals(Colony.NoBuildReason.NONE,
                     colony.getNoBuildReason(fortType, null));
    }
,
>
, <(startLine=739 endLine=784 srcPath=/root/NewExperiment/freecolFilter/00911/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            if (nearbyColonies.size() > 0) {
                int targetTension = Integer.MIN_VALUE;
                Colony target = null;
                for (int i = 0; i < nearbyColonies.size(); i++) {
                    Colony t = nearbyColonies.get(i);
                    Player to = t.getOwner();
                    if (!getPlayer().hasContacted(to)
                        || !indianSettlement.hasContactedSettlement(to)) {
                        continue;
                    }
                    int tension = 1 + getPlayer().getTension(to).getValue()
                        + indianSettlement.getAlarm(to).getValue();
                    tension = getAIRandom().nextInt(tension);
                    if (tension > targetTension) {
                        targetTension = tension;
                        target = t;
                    }
                }
                if (target != null) {
                    Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                    AIUnit chosenOne = null;
                    while (it2.hasNext()) {
                        chosenOne = getAIUnit(it2.next());
                        if (chosenOne.getUnit().getLocation() instanceof Tile
                            && chosenOne.getUnit().canCarryGoods()
                            && (chosenOne.getMission() == null
                                || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                            // Check that the colony can be reached:
                            PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                       target.getTile());
                            if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                                // Make it less probable that nice players get targeted
                                // for a demand mission:
                                Player tp = target.getOwner();
                                int tension = 1 + getPlayer().getTension(tp).getValue()
                                    + indianSettlement.getAlarm(tp).getValue();
                                if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                                    chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne,
                                                                                 target));
                                    break;
                                }
                            }
                        }
                    }
                }
            }
,
(startLine=1544 endLine=1589 srcPath=/root/NewExperiment/freecolFilter/00911/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            if (nearbyColonies.size() > 0) {
                int targetTension = Integer.MIN_VALUE;
                Colony target = null;
                for (int i = 0; i < nearbyColonies.size(); i++) {
                    Colony t = nearbyColonies.get(i);
                    Player to = t.getOwner();
                    if (!getPlayer().hasContacted(to)
                        || !indianSettlement.hasContactedSettlement(to)) {
                        continue;
                    }
                    int tension = 1 + getPlayer().getTension(to).getValue()
                        + indianSettlement.getAlarm(to).getValue();
                    tension = getAIRandom().nextInt(tension);
                    if (tension > targetTension) {
                        targetTension = tension;
                        target = t;
                    }
                }
                if (target != null) {
                    Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                    AIUnit chosenOne = null;
                    while (it2.hasNext()) {
                        chosenOne = getAIUnit(it2.next());
                        if (chosenOne.getUnit().getLocation() instanceof Tile
                            && chosenOne.getUnit().canCarryGoods()
                            && (chosenOne.getMission() == null
                                || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                            // Check that the colony can be reached:
                            PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                       target.getTile());
                            if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                                // Make it less probable that nice players get targeted
                                // for a demand mission:
                                Player tp = target.getOwner();
                                int tension = 1 + getPlayer().getTension(tp).getValue()
                                    + indianSettlement.getAlarm(tp).getValue();
                                if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                                    chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne,
                                                                                 target));
                                    break;
                                }
                            }
                        }
                    }
                }
            }
,
>
, <(startLine=149 endLine=156 srcPath=/root/NewExperiment/freecolFilter/01736/src/net/sf/freecol/common/networking/WrapperMessage.java)
    public String toString() {
        StringBuilder sb = new StringBuilder(64);
        sb.append('[');
        pretty(sb, getType(), getStringAttributeMap(), null);
        if (this.message != null) sb.append(' ').append(this.message);
        sb.append(']');
        return sb.toString();
    }
,
(startLine=209 endLine=216 srcPath=/root/NewExperiment/freecolFilter/01736/src/net/sf/freecol/common/networking/MultipleMessage.java)
    public String toString() {
        StringBuilder sb = new StringBuilder(64);
        sb.append('[');
        pretty(sb, getType(), getStringAttributeMap(), null);
        for (Message m : this.messages) sb.append(' ').append(m);
        sb.append(']');
        return sb.toString();
    }
,
>
, <(startLine=383 endLine=400 srcPath=/root/NewExperiment/freecolFilter/00693/src/net/sf/freecol/client/gui/panel/EuropePanel.java)
    public void setSelectedUnitLabel(UnitLabel unitLabel) {
        if (selectedUnit == unitLabel) {
            return;
        }
        if (selectedUnit != null) {
            selectedUnit.setSelected(false);
        }
        selectedUnit = unitLabel;
        if (unitLabel == null) {
            cargoPanel.setCarrier(null);
        } else {
            cargoPanel.setCarrier(unitLabel.getUnit());
            unitLabel.setSelected(true);
        }
        
        inPortPanel.revalidate();
        inPortPanel.repaint();
    }
,
(startLine=722 endLine=737 srcPath=/root/NewExperiment/freecolFilter/00693/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
    public void setSelectedUnitLabel(UnitLabel unitLabel) {
        if (selectedUnit != unitLabel) {
            if (selectedUnit != null) {
                selectedUnit.setSelected(false);
                selectedUnit.getUnit().removePropertyChangeListener(this);
            }
            selectedUnit = unitLabel;
            if (unitLabel == null) {
                cargoPanel.setCarrier(null);
            } else {
                cargoPanel.setCarrier(unitLabel.getUnit());
                unitLabel.setSelected(true);
                unitLabel.getUnit().addPropertyChangeListener(this);
            }
        }
    }
,
>
]