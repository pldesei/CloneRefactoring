[Instance #
frags: 
(startLine=50 endLine=89 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00042/dev/scratch/srinath_eran_jaliya/src/test/org/apache/axis/engine/EngineTest.java)
    protected void setUp() throws Exception {
        Global global = new SimpleGlobal();
        global.setInFlow(new MockFlow("globel inflow",4));
        global.setOutFlow(new MockFlow("globel outflow",2));
        global.setFaultFlow(new MockFlow("globel faultflow",1));
        engineRegistry = new SimpleEngineRegistry(global);
        
        Transport transport = new SimpleTransport(transportName);
        transport.setInFlow(new MockFlow("transport inflow",4));
        transport.setOutFlow(new MockFlow("transport outflow",2));
        transport.setFaultFlow(new MockFlow("transport faultflow",1));
        engineRegistry.addTransport(transport);
        
        Service service = new SimpleService(serviceName);
        service.setInFlow(new MockFlow("service inflow",4));
        service.setOutFlow(new MockFlow("service outflow",5));
        service.setFaultFlow(new MockFlow("service faultflow",1));
        service.setClassLoader(Thread.currentThread().getContextClassLoader());
        
        Parameter classParam = new ConcreateParameter("className",EchoService.class.getName());
        service.addParameter(classParam);
         
        service.setProvider(new SimpleJavaProvider());
        
        Module m1 = new SimpleModule(new QName("","A Mdoule 1"));
        m1.setInFlow(new MockFlow("service module inflow",4));
        m1.setFaultFlow(new MockFlow("service module faultflow",1));
        service.addModule(m1);
        
        Operation operation = new SimpleOperation(operationName,service);
        operation.setInFlow(new MockFlow("inflow",4));
        
        service.addOperation(operation);
        engineRegistry.addService(service);
        
        mc = new MessageContext(engineRegistry);
        mc.setCurrentTansport(transportName);
        mc.setCurrentService(serviceName);
        mc.setCurrentOperation(operationName);
    }

(startLine=59 endLine=104 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00042/dev/scratch/srinath_eran_jaliya/src/test/org/apache/axis/engine/EchoTest.java)
    protected void setUp() throws Exception {
        Global global = new SimpleGlobal();
        global.setInFlow(new MockFlow("globel inflow",4));
        global.setOutFlow(new MockFlow("globel outflow",2));
        global.setFaultFlow(new MockFlow("globel faultflow",1));
        engineRegistry = new SimpleEngineRegistry(global);
        
        Transport transport = new SimpleTransport(transportName);
        transport.setInFlow(new MockFlow("transport inflow",4));
        transport.setOutFlow(new MockFlow("transport outflow",2));
        transport.setFaultFlow(new MockFlow("transport faultflow",1));
        engineRegistry.addTransport(transport);
        
        Service service = new SimpleService(serviceName);
        service.setInFlow(new MockFlow("service inflow",4));
        service.setOutFlow(new MockFlow("service outflow",5));
        service.setFaultFlow(new MockFlow("service faultflow",1));
        service.setClassLoader(Thread.currentThread().getContextClassLoader());
        
        Parameter classParam = new ConcreateParameter("className",EchoService.class.getName());
        service.addParameter(classParam);
         
        service.setProvider(new SimpleJavaProvider());
        
        Module m1 = new SimpleModule(new QName("","A Mdoule 1"));
        m1.setInFlow(new MockFlow("service module inflow",4));
        m1.setFaultFlow(new MockFlow("service module faultflow",1));
        service.addModule(m1);
        
        Operation operation = new SimpleOperation(operationName,service);
        operation.setInFlow(new MockFlow("inflow",4));
        
        service.addOperation(operation);
        engineRegistry.addService(service);
        
        mc = new MessageContext(engineRegistry);
        mc.setCurrentTansport(transportName);
        mc.setCurrentService(serviceName);
        mc.setCurrentOperation(operationName);
        
        AxisEngine engine = new AxisEngine(engineRegistry);
        sas = new SimpleAxisServer(engine);
        sas.setServerSocket(new ServerSocket(testingPort));
        thisThread = new Thread(sas);
        thisThread.start();
    }

commonMethod: 
(startLine=49 endLine=114 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00043/dev/scratch/srinath_eran_jaliya/src/test/org/apache/axis/engine/Utils.java)
    public static EngineRegistry createMockRegistry(QName serviceName,QName operationName,QName transportName) throws AxisFault{
        EngineRegistry engineRegistry = null;
        Global global = new SimpleGlobal();
        global.setInFlow(new MockFlow("globel inflow",4));
        global.setOutFlow(new MockFlow("globel outflow",2));
        global.setFaultFlow(new MockFlow("globel faultflow",1));
        engineRegistry = new SimpleEngineRegistry(global);
        
        Transport transport = new SimpleTransport(transportName);
        transport.setInFlow(new MockFlow("transport inflow",4));
        transport.setOutFlow(new MockFlow("transport outflow",2));
        transport.setFaultFlow(new MockFlow("transport faultflow",1));
        engineRegistry.addTransport(transport);
        
        Service service = new SimpleService(serviceName);
        service.setInFlow(new MockFlow("service inflow",4));
        service.setOutFlow(new MockFlow("service outflow",5));
        service.setFaultFlow(new MockFlow("service faultflow",1));
        service.setClassLoader(Thread.currentThread().getContextClassLoader());
        
        Parameter classParam = new ConcreateParameter("className",EchoService.class.getName());
        service.addParameter(classParam);
         
        service.setProvider(new SyncProvider(new SimpleJavaProvider()));
        
        Module m1 = new SimpleModule(new QName("","A Mdoule 1"));
        m1.setInFlow(new MockFlow("service module inflow",4));
        m1.setFaultFlow(new MockFlow("service module faultflow",1));
        service.addModule(m1);
        
        Operation operation = new SimpleOperation(operationName,service);
        operation.setInFlow(new MockFlow("inflow",4));
        
        service.addOperation(operation);
        engineRegistry.addService(service);
        //create Execution Chains
        ExecutionChain inchain = new ExecutionChain();
        inchain.addPhase(new Phase(Constants.PHASE_TRANSPORT));
        inchain.addPhase(new Phase(Constants.PHASE_GLOBAL));
        inchain.addPhase(new Phase(Constants.PHASE_SERVICE));
        EngineUtils.addHandlers(transport.getInFlow(),inchain,Constants.PHASE_TRANSPORT);
        EngineUtils.addHandlers(global.getInFlow(),inchain,Constants.PHASE_GLOBAL);
        EngineUtils.addHandlers(service.getInFlow(),inchain,Constants.PHASE_SERVICE);
        service.setInputExecutionChain(inchain);
        
        ExecutionChain outchain = new ExecutionChain();
        outchain.addPhase(new Phase(Constants.PHASE_SERVICE));
        outchain.addPhase(new Phase(Constants.PHASE_GLOBAL));
        outchain.addPhase(new Phase(Constants.PHASE_TRANSPORT));
        EngineUtils.addHandlers(service.getInFlow(),outchain,Constants.PHASE_SERVICE);
        EngineUtils.addHandlers(global.getInFlow(),outchain,Constants.PHASE_GLOBAL);
        EngineUtils.addHandlers(transport.getInFlow(),outchain,Constants.PHASE_TRANSPORT);
        service.setOutExecutionChain(outchain);
        
        ExecutionChain faultchain = new ExecutionChain();
        
        faultchain.addPhase(new Phase(Constants.PHASE_SERVICE));
        faultchain.addPhase(new Phase(Constants.PHASE_GLOBAL));
        faultchain.addPhase(new Phase(Constants.PHASE_TRANSPORT));
        
        EngineUtils.addHandlers(service.getInFlow(),faultchain,Constants.PHASE_SERVICE);
        EngineUtils.addHandlers(global.getInFlow(),faultchain,Constants.PHASE_GLOBAL);
        EngineUtils.addHandlers(transport.getInFlow(),faultchain,Constants.PHASE_TRANSPORT);
        service.setFaultExecutionChain(outchain);
        return engineRegistry;
    }


, Instance #
frags: 
(startLine=145 endLine=154 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00102/dev/scratch/prototype2/src/java/org/apache/axis/deployment/metadata/phaserule/PhaseHolder.java)
            case 1 : {
                ExecutionChain inChain =  new ExecutionChain();//       service.getExecutableInChain();
                for (int i = 0; i < handler.length; i++) {
                    HandlerMetaData handlerMetaData = handler[i];
                    inChain.addHandler(handlerMetaData.getHandler());
                    log.info("Phase Name " + handlerMetaData.getRules().getPhaseName() );
                }
                service.setExecutableInChain(inChain);
                break;
            }

(startLine=155 endLine=164 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00102/dev/scratch/prototype2/src/java/org/apache/axis/deployment/metadata/phaserule/PhaseHolder.java)
            case 2 : {
                ExecutionChain outChain =new ExecutionChain();// service.getExecutableOutChain();
                for (int i = 0; i < handler.length; i++) {
                    HandlerMetaData handlerMetaData = handler[i];
                    outChain.addHandler(handlerMetaData.getHandler());
                    log.info("Phase Name " + handlerMetaData.getRules().getPhaseName() );
                }
                service.setExecutableOutChain(outChain);
                break;
            }

(startLine=165 endLine=174 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00102/dev/scratch/prototype2/src/java/org/apache/axis/deployment/metadata/phaserule/PhaseHolder.java)
            case 3 : {
                ExecutionChain faultChain = new ExecutionChain();//service.getExecutableFaultChain();
                for (int i = 0; i < handler.length; i++) {
                    HandlerMetaData handlerMetaData = handler[i];
                    faultChain.addHandler(handlerMetaData.getHandler());
                    log.info("Phase Name " + handlerMetaData.getRules().getPhaseName() );
                }
                service.setExecutableFaultChain(faultChain);
                break;
            }

commonMethod: 
(startLine=35 endLine=38 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00103/dev/scratch/prototype2/src/java/org/apache/axis/engine/ExecutionChain.java)
    public void addPhase(Phase phase) {
        phases.put(phase.getPhaseName(), phase);
        executionList.add(phase);
    }


, Instance #
frags: 
(startLine=59 endLine=75 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00123/dev/scratch/prototype2/src/java/org/apache/axis/impl/providers/SimpleJavaProvider.java)
            throws AxisFault {
        try {
            AxisService service = msgContext.getService();
            classLoader = service.getClassLoader();
            Parameter classParm = service.getParameter("className");
            String className = (String) classParm.getValue();
            if (className == null)
                throw new AxisFault("className parameter is null");
            if (classLoader == null) {
                classLoader = Thread.currentThread().getContextClassLoader();
            }
            Class implClass = Class.forName(className, true, classLoader);
            return implClass.newInstance();
        } catch (Exception e) {
            throw AxisFault.makeFault(e);
        }
    }

(startLine=56 endLine=72 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00123/dev/scratch/prototype2/src/java/org/apache/axis/impl/providers/RawXMLProvider.java)
            throws AxisFault {
        try {
            AxisService service = msgContext.getService();
            classLoader = service.getClassLoader();
            Parameter classParm = service.getParameter("className");
            String className = (String) classParm.getValue();
            if (className == null)
                throw new AxisFault("className parameter is null");
            if (classLoader == null) {
                classLoader = Thread.currentThread().getContextClassLoader();
            }
            Class implClass = Class.forName(className, true, classLoader);
            return implClass.newInstance();
        } catch (Exception e) {
            throw AxisFault.makeFault(e);
        }
    }

commonMethod: 
(startLine=286 endLine=288 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00124/dev/scratch/prototype2/src/java/org/apache/axis/impl/description/AxisService.java)
    public Class getServiceClass() {
        return (Class)this.getComponentProperty(DescriptionConstants.SERVICE_CLASS);
    }


, Instance #
frags: 
(startLine=142 endLine=153 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00123/dev/scratch/prototype2/src/java/org/apache/axis/deployment/DeploymentParser.java)
                    if (ST.equals(serverXMLST)) {
                        int attribCount = pullparser.getAttributeCount();
                        if (attribCount > 0) {
                            for (int i = 0; i < attribCount; i++) {
                                String attname = pullparser.getAttributeLocalName(i);
                                String attvalue = pullparser.getAttributeValue(i);
                                if (attname.equals(ServerMetaData.SERVERNAME)) {
                                    serverMetaData.setName(attvalue);
                                }
                            }
                        }
                    } else if (ST.equals(PARAMETERST)) {

(startLine=158 endLine=169 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00123/dev/scratch/prototype2/src/java/org/apache/axis/deployment/DeploymentParser.java)
                    } else if (ST.equals(MODULEST)) {
                        int attribCount = pullparser.getAttributeCount();
                        if (attribCount > 0) {
                            for (int i = 0; i < attribCount; i++) {
                                String attname = pullparser.getAttributeLocalName(i);
                                String attvalue = pullparser.getAttributeValue(i);
                                if (attname.equals(REF)) {
                                    serverMetaData.addModule(new QName(attvalue));
                                }
                            }
                        }
                    } else if (ST.equals(HANDERST)) {

commonMethod: 
(startLine=62 endLine=64 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00124/dev/scratch/prototype2/src/java/org/apache/axis/description/AxisGlobal.java)
    public void addParameter(Parameter param) {
        paramInclude.addParameter(param);
    }


, Instance #
frags: 
(startLine=63 endLine=79 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00153/dev/scratch/prototype2/src/test/org/apache/axis/engine/EchoRawXMLTest.java)
    protected void setUp() throws Exception {
        engineRegistry = EngineUtils.createMockRegistry(serviceName,operationName,transportName);

        AxisService service = new AxisService(serviceName);
        service.setClassLoader(Thread.currentThread().getContextClassLoader());
        service.setServiceClass(Echo.class);
        service.setProvider(new RawXMLProvider());
        AxisOperation operation = new SimpleAxisOperationImpl(operationName);

        service.addOperation(operation);

        EngineUtils.createExecutionChains(service);
        engineRegistry.addService(service);

        sas = EngineUtils.startServer(engineRegistry);
        finish=false;
    }

(startLine=58 endLine=71 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00153/dev/scratch/prototype2/src/test/org/apache/axis/engine/CallUnregisterdServiceTest.java)
    protected void setUp() throws Exception {
        engineRegistry = EngineUtils.createMockRegistry(serviceName,operationName,transportName);
        AxisService service = new AxisService(serviceName);
        service.setClassLoader(Thread.currentThread().getContextClassLoader());
        service.setServiceClass(Echo.class);
        service.setProvider(new RawXMLProvider());
        AxisOperation operation = new SimpleAxisOperationImpl(operationName);
        
        service.addOperation(operation);
        EngineUtils.createExecutionChains(service);        
        engineRegistry.addService(service);
        
        sas = EngineUtils.startServer(engineRegistry);
    }

commonMethod: 
(startLine=43 endLine=61 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00154/dev/scratch/prototype2/src/test/org/apache/axis/integration/UtilServer.java)
    public static synchronized void start() throws IOException {
        if (count == 0) {
            reciver = new SimpleHTTPReceiver("target/test-resources/samples/");

            ServerSocket serverSoc = null;
            serverSoc = new ServerSocket(EngineUtils.TESTING_PORT);
            reciver.setServerSocket(serverSoc);
            Thread thread = new Thread(reciver);
            thread.setDaemon(true);

            try {
                thread.start();
                System.out.print("Server started .....");
            } finally {

            }
        } 
        count++;
    }


, Instance #
frags: 
(startLine=70 endLine=89 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00185/modules/om/src/java/org/apache/axis/om/impl/llom/SOAPEnvelopeImpl.java)
    public SOAPHeader getHeader() throws OMException {

        // if(builder != null){
        // while(header == null && body == null){
        // builder.next();
        // }
        // }
        OMNode node = getFirstChild();
        while (node != null) {
            if ((node != null) && (node.getType() == OMNode.ELEMENT_NODE)) {
                OMElement element = (OMElement) node;
                if (OMConstants.HEADER_LOCAL_NAME.equals(
                        element.getLocalName())) {
                    return (SOAPHeader) element;
                }
            }
            node = node.getNextSibling();
        }
        return null;
    }

(startLine=105 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00185/modules/om/src/java/org/apache/axis/om/impl/llom/SOAPEnvelopeImpl.java)
    public SOAPBody getBody() throws OMException {
        OMNode node = getFirstChild();
        while (node != null) {
            if ((node != null) && (node.getType() == OMNode.ELEMENT_NODE)) {
                OMElement element = (OMElement) node;
                if (OMConstants.BODY_LOCAL_NAME.equals(
                        element.getLocalName())) {
                    return (SOAPBody) element;
                }
            }
            node = node.getNextSibling();
        }
        return null;
    }

commonMethod: 
(startLine=791 endLine=801 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00186/modules/om/src/java/org/apache/axis/om/impl/llom/OMElementImpl.java)
    public OMElement getFirstElement() {
        OMNode node = getFirstChild();
        while(node != null){
            if(node.getType() == OMNode.ELEMENT_NODE){
                return (OMElement)node;
            }else{
                node = node.getNextSibling();
            }
        }
        return null;
    }


, Instance #
frags: 
(startLine=70 endLine=80 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00189/modules/core/src/java/org/apache/axis/phaseresolver/PhaseMetadata.java)
    public void setPhaseFirst(HandlerMetadata phaseFirst) throws PhaseException {
        if (phasefirstset) {
            throw new PhaseException("PhaseFirst alredy has been set, cannot have two phaseFirst Hander for same phase " + this.name);
        } else {
            if (getBefoerAfter(phaseFirst) != ANYWHERE) {
                throw new PhaseException("Hander with PhaseFirst can not have any before or after proprty error in " + phaseFirst.getName());
            } else
                this.phaseFirst = phaseFirst;
            phasefirstset = true;
        }
    }

(startLine=86 endLine=96 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00189/modules/core/src/java/org/apache/axis/phaseresolver/PhaseMetadata.java)
    public void setPhaseLast(HandlerMetadata phaseLast) throws PhaseException {
        if (phaselastset) {
            throw new PhaseException("PhaseLast alredy has been set, cannot have two PhaseLast Hander for same phase " + this.name);
        } else {
            if (getBefoerAfter(phaseLast) != ANYWHERE) {
                throw new PhaseException("Hander with PhaseLast property can not have any before or after proprty error in " + phaseLast.getName());
            } else
                this.phaseLast = phaseLast;
            phaselastset = true;
        }
    }

commonMethod: 
(startLine=393 endLine=417 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00190/modules/core/src/java/org/apache/axis/phaseresolver/PhaseMetadata.java)
    /**
     * Method getBeforeAfter
     *
     * @param handler
     * @return
     * @throws PhaseException
     */
    private int getBeforeAfter(HandlerMetadata handler) throws PhaseException {
        if ((!handler.getRules().getBefore().equals(""))
                && (!handler.getRules().getAfter().equals(""))) {
            if (handler.getRules().getBefore().equals(
                    handler.getRules().getAfter())) {
                throw new PhaseException(
                        "Both before and after cannot be the same for this handler"
                                + handler.getName());
            }
            return BOTH_BEFORE_AFTER;
        } else if (!handler.getRules().getBefore().equals("")) {
            return BEORE;
        } else if (!handler.getRules().getAfter().equals("")) {
            return AFTER;
        } else {
            return ANYWHERE;
        }
    }


, Instance #
frags: 
(startLine=112 endLine=151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00261/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
            if (module != null) {
                switch (flowtype) {
                    case PhaseMetadata.IN_FLOW:
                        {
                            flow = module.getInFlow();
                            break;
                        }
                    case PhaseMetadata.OUT_FLOW:
                        {
                            flow = module.getOutFlow();
                            break;
                        }
                    case PhaseMetadata.FAULT_IN_FLOW:
                        {
                            flow = module.getFaultInFlow();
                            break;
                        }
                    case PhaseMetadata.FAULT_OUT_FLOW:
                        {
                            flow = module.getFaultOutFlow();
                            break;
                        }
                }
                if (flow != null) {
                    for (int j = 0; j < flow.getHandlerCount(); j++) {
                        HandlerMetadata metadata = flow.getHandler(j);
                        /**
                         * If the phase property of a handler is pre-dispatch then those handlers
                         * should go to the global chain , to the pre-dispatch phase
                         */
                        if (PhaseMetadata.PRE_DISPATCH.equals(metadata.getRules().getPhaseName())) {
                            continue;
                        }
                        if (metadata.getRules().getPhaseName().equals("")) {
                            metadata.getRules().setPhaseName("global");
                        }
                        allHandlers.add(metadata);
                    }
                }
            } else {

(startLine=160 endLine=202 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00261/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
        while (itr.hasNext()) {
            QName moduleref = (QName) itr.next();
            module = engineConfig.getModule(moduleref);
            switch (flowtype) {
                case PhaseMetadata.IN_FLOW:
                    {
                        flow = module.getInFlow();
                        break;
                    }
                case PhaseMetadata.OUT_FLOW:
                    {
                        flow = module.getOutFlow();
                        break;
                    }
                case PhaseMetadata.FAULT_IN_FLOW:
                    {
                        flow = module.getFaultInFlow();
                        break;
                    }
                case PhaseMetadata.FAULT_OUT_FLOW:
                    {
                        flow = module.getFaultOutFlow();
                        break;
                    }
            }
            if (flow != null) {
                for (int j = 0; j < flow.getHandlerCount(); j++) {
                    HandlerMetadata metadata = flow.getHandler(j);

                    /**
                     * If the phase property of a handler is pre-dispatch then those handlers
                     * should go to the global chain , to the pre-dispatch phase
                     */
                    if (PhaseMetadata.PRE_DISPATCH.equals(metadata.getRules().getPhaseName())) {
                        continue;
                    }
                    if (metadata.getRules().getPhaseName().equals("")) {
                        metadata.getRules().setPhaseName("service");
                    }
                    allHandlers.add(metadata);
                }
            }
        }

(startLine=207 endLine=249 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00261/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
        while (opitr.hasNext()) {
            QName moduleref = (QName) opitr.next();
            module = engineConfig.getModule(moduleref);
            switch (flowtype) {
                case PhaseMetadata.IN_FLOW:
                    {
                        flow = module.getInFlow();
                        break;
                    }
                case PhaseMetadata.OUT_FLOW:
                    {
                        flow = module.getOutFlow();
                        break;
                    }
                case PhaseMetadata.FAULT_IN_FLOW:
                    {
                        flow = module.getFaultInFlow();
                        break;
                    }
                case PhaseMetadata.FAULT_OUT_FLOW:
                    {
                        flow = module.getFaultOutFlow();
                        break;
                    }
            }
            if (flow != null) {
                for (int j = 0; j < flow.getHandlerCount(); j++) {
                    HandlerMetadata metadata = flow.getHandler(j);

                    /**
                     * If the phase property of a handler is pre-dispatch then those handlers
                     * should go to the global chain , to the pre-dispatch phase
                     */
                    if (PhaseMetadata.PRE_DISPATCH.equals(metadata.getRules().getPhaseName())) {
                        continue;
                    }
                    if (metadata.getRules().getPhaseName().equals("")) {
                        metadata.getRules().setPhaseName("service");
                    }
                    allHandlers.add(metadata);
                }
            }
        }

commonMethod: 
(startLine=89 endLine=129 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00262/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
    private void buildModuleHandlers(ArrayList allHandlers  , AxisModule module , int flowtype) throws PhaseException {
        Flow flow = null;
        switch (flowtype) {
            case PhaseMetadata.IN_FLOW:
                {
                    flow = module.getInFlow();
                    break;
                }
            case PhaseMetadata.OUT_FLOW:
                {
                    flow = module.getOutFlow();
                    break;
                }
            case PhaseMetadata.FAULT_IN_FLOW:
                {
                    flow = module.getFaultInFlow();
                    break;
                }
            case PhaseMetadata.FAULT_OUT_FLOW:
                {
                    flow = module.getFaultOutFlow();
                    break;
                }
        }
        if (flow != null) {
            for (int j = 0; j < flow.getHandlerCount(); j++) {
                HandlerMetadata metadata = flow.getHandler(j);
                /**
                 * If the phase property of a handler is pre-dispatch then those handlers
                 * should go to the global chain , to the pre-dispatch phase
                 */
                if (PhaseMetadata.PRE_DISPATCH.equals(metadata.getRules().getPhaseName())) {
                    continue;
                }
                if (metadata.getRules().getPhaseName().equals("")) {
                    throw new PhaseException("Phase dose not specified");
                }
                allHandlers.add(metadata);
            }
        }
    }


, Instance #
frags: 
(startLine=135 endLine=150 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00261/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
                if (flow != null) {
                    for (int j = 0; j < flow.getHandlerCount(); j++) {
                        HandlerMetadata metadata = flow.getHandler(j);
                        /**
                         * If the phase property of a handler is pre-dispatch then those handlers
                         * should go to the global chain , to the pre-dispatch phase
                         */
                        if (PhaseMetadata.PRE_DISPATCH.equals(metadata.getRules().getPhaseName())) {
                            continue;
                        }
                        if (metadata.getRules().getPhaseName().equals("")) {
                            metadata.getRules().setPhaseName("global");
                        }
                        allHandlers.add(metadata);
                    }
                }

(startLine=185 endLine=201 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00261/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
            if (flow != null) {
                for (int j = 0; j < flow.getHandlerCount(); j++) {
                    HandlerMetadata metadata = flow.getHandler(j);

                    /**
                     * If the phase property of a handler is pre-dispatch then those handlers
                     * should go to the global chain , to the pre-dispatch phase
                     */
                    if (PhaseMetadata.PRE_DISPATCH.equals(metadata.getRules().getPhaseName())) {
                        continue;
                    }
                    if (metadata.getRules().getPhaseName().equals("")) {
                        metadata.getRules().setPhaseName("service");
                    }
                    allHandlers.add(metadata);
                }
            }

(startLine=232 endLine=248 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00261/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
            if (flow != null) {
                for (int j = 0; j < flow.getHandlerCount(); j++) {
                    HandlerMetadata metadata = flow.getHandler(j);

                    /**
                     * If the phase property of a handler is pre-dispatch then those handlers
                     * should go to the global chain , to the pre-dispatch phase
                     */
                    if (PhaseMetadata.PRE_DISPATCH.equals(metadata.getRules().getPhaseName())) {
                        continue;
                    }
                    if (metadata.getRules().getPhaseName().equals("")) {
                        metadata.getRules().setPhaseName("service");
                    }
                    allHandlers.add(metadata);
                }
            }

commonMethod: 
(startLine=89 endLine=129 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00262/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
    private void buildModuleHandlers(ArrayList allHandlers  , AxisModule module , int flowtype) throws PhaseException {
        Flow flow = null;
        switch (flowtype) {
            case PhaseMetadata.IN_FLOW:
                {
                    flow = module.getInFlow();
                    break;
                }
            case PhaseMetadata.OUT_FLOW:
                {
                    flow = module.getOutFlow();
                    break;
                }
            case PhaseMetadata.FAULT_IN_FLOW:
                {
                    flow = module.getFaultInFlow();
                    break;
                }
            case PhaseMetadata.FAULT_OUT_FLOW:
                {
                    flow = module.getFaultOutFlow();
                    break;
                }
        }
        if (flow != null) {
            for (int j = 0; j < flow.getHandlerCount(); j++) {
                HandlerMetadata metadata = flow.getHandler(j);
                /**
                 * If the phase property of a handler is pre-dispatch then those handlers
                 * should go to the global chain , to the pre-dispatch phase
                 */
                if (PhaseMetadata.PRE_DISPATCH.equals(metadata.getRules().getPhaseName())) {
                    continue;
                }
                if (metadata.getRules().getPhaseName().equals("")) {
                    throw new PhaseException("Phase dose not specified");
                }
                allHandlers.add(metadata);
            }
        }
    }


, Instance #
frags: 
(startLine=383 endLine=418 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00288/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
            for (int intA = 0; intA < count; intA++) {
                moduleName = (QName) modules.get(intA);
                module = engineConfig.getModule(moduleName);
                switch (type) {
                    case PhaseMetadata.IN_FLOW:
                        {
                            flow = module.getInFlow();
                            break;
                        }
                    case PhaseMetadata.OUT_FLOW:
                        {
                            flow = module.getOutFlow();
                            break;
                        }
                    case PhaseMetadata.FAULT_IN_FLOW:
                        {
                            flow = module.getFaultInFlow();
                            break;
                        }
                    case PhaseMetadata.FAULT_OUT_FLOW:
                        {
                            flow = module.getFaultOutFlow();
                            break;
                        }
                }
                if (flow != null) {
                    for (int j = 0; j < flow.getHandlerCount(); j++) {
                        HandlerDescription metadata = flow.getHandler(j);
                        if (!PhaseMetadata.PRE_DISPATCH.equals(metadata.getRules().getPhaseName())) {
                            phaseHolder.addHandler(metadata);
                        } else {
                            continue;
                        }
                    }
                }
            }

(startLine=343 endLine=381 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00288/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
            for (Iterator iterator = col.iterator(); iterator.hasNext();) {
                ModuleDescription axismodule = (ModuleDescription) iterator.next();
                switch (type) {
                    case PhaseMetadata.IN_FLOW:
                        {
                            flow = axismodule.getInFlow();
                            break;
                        }
                    case PhaseMetadata.OUT_FLOW:
                        {
                            flow = axismodule.getOutFlow();
                            break;
                        }
                    case PhaseMetadata.FAULT_IN_FLOW:
                        {
                            flow = axismodule.getFaultInFlow();
                            break;
                        }
                    case PhaseMetadata.FAULT_OUT_FLOW:
                        {
                            flow = axismodule.getFaultOutFlow();
                            break;
                        }
                }
                if (flow != null) {
                    for (int j = 0; j < flow.getHandlerCount(); j++) {
                        HandlerDescription metadata = flow.getHandler(j);
                        /**
                         * If the phase property of a handler is pre-dispatch then those handlers
                         * should go to the global chain , to the pre-dispatch phase
                         */
                        if (PhaseMetadata.PRE_DISPATCH.equals(metadata.getRules().getPhaseName())) {
                            phaseHolder.addHandler(metadata);
                        } else {
                            continue;
                        }
                    }
                }
            }

commonMethod: 
(startLine=138 endLine=156 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00289/modules/core/src/org/apache/axis/phaseresolver/PhaseHolder.java)
    /**
     * This is used to order handlers inside a phase
     *
     * @throws PhaseException
     */
    public void getOrderedHandlers() throws PhaseException {
        HandlerDescription[] handlers;
        for (int i = 0; i < phasemetadatholder.size(); i++) {
            PhaseMetadata phase =
                    (PhaseMetadata) phasemetadatholder.get(i);
            Phase axisPhase = getPhase(phase.getName());
            handlers = phase.getOrderedHandlers();
            if (axisPhase != null) {
                for (int j = 0; j < handlers.length; j++) {
                    axisPhase.addHandler(handlers[j].getHandler());
                }
            }
        }
    }


, Instance #
frags: 
(startLine=232 endLine=241 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00288/modules/core/src/org/apache/axis/phaseresolver/PhaseHolder.java)
                        for (int i = 0; i < phaseholder.size(); i++) {
                            PhaseMetadata phase =
                                    (PhaseMetadata) phaseholder.get(i);
                            Phase axisPhase = new Phase(phase.getName());
                            handlers = phase.getOrderedHandlers();
                            for (int j = 0; j < handlers.length; j++) {
                                axisPhase.addHandler(handlers[j].getHandler());
                            }
                            inChain.add(axisPhase);
                        }

(startLine=249 endLine=258 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00288/modules/core/src/org/apache/axis/phaseresolver/PhaseHolder.java)
                        for (int i = 0; i < phaseholder.size(); i++) {
                            PhaseMetadata phase =
                                    (PhaseMetadata) phaseholder.get(i);
                            Phase axisPhase = new Phase(phase.getName());
                            handlers = phase.getOrderedHandlers();
                            for (int j = 0; j < handlers.length; j++) {
                                axisPhase.addHandler(handlers[j].getHandler());
                            }
                            outChain.add(axisPhase);
                        }

(startLine=266 endLine=275 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00288/modules/core/src/org/apache/axis/phaseresolver/PhaseHolder.java)
                        for (int i = 0; i < phaseholder.size(); i++) {
                            PhaseMetadata phase =
                                    (PhaseMetadata) phaseholder.get(i);
                            Phase axisPhase = new Phase(phase.getName());
                            handlers = phase.getOrderedHandlers();
                            for (int j = 0; j < handlers.length; j++) {
                                axisPhase.addHandler(handlers[j].getHandler());
                            }
                            faultInChain.add(axisPhase);
                        }

(startLine=283 endLine=292 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00288/modules/core/src/org/apache/axis/phaseresolver/PhaseHolder.java)
                        for (int i = 0; i < phaseholder.size(); i++) {
                            PhaseMetadata phase =
                                    (PhaseMetadata) phaseholder.get(i);
                            Phase axisPhase = new Phase(phase.getName());
                            handlers = phase.getOrderedHandlers();
                            for (int j = 0; j < handlers.length; j++) {
                                axisPhase.addHandler(handlers[j].getHandler());
                            }
                            faultOutChain.add(axisPhase);
                        }

commonMethod: 
(startLine=104 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00289/modules/core/src/org/apache/axis/phaseresolver/PhaseHolder.java)
    /**
     * this method is used to get the actual phase object given in the phase array list
     *
     * @param phaseName
     * @return
     */
    private Phase getPhase(String phaseName) {
        for (int i = 0; i < phaseList.size(); i++) {
            Phase phase = (Phase) phaseList.get(i);
            if (phase.getPhaseName().equals(phaseName)) {
                return phase;
            }
        }
        return null;
    }


, Instance #
frags: 
(startLine=212 endLine=227 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00293/modules/wsdl/src/org/apache/axis/wsdl/codegen/emitter/MultiLanguageClientEmitter.java)
    protected Element getInputElement(XmlDocument doc,WSDLOperation operation){
        Element inputElt = doc.createElement("input");
        //todo this should be multiple
        Element param = doc.createElement("param");
        Attr paramNameAttr = doc.createAttribute("name");
        paramNameAttr.setValue(this.mapper.getParameterName(operation.getInputMessage().getElement()));
        param.setAttributeNode(paramNameAttr);
        Attr paramTypeAttr = doc.createAttribute("type");
        Class typeMapping = this.mapper.getTypeMapping(operation.getInputMessage().getElement());
        paramTypeAttr.setValue(typeMapping==null?"":typeMapping.getName());
        param.setAttributeNode(paramTypeAttr);

        inputElt.appendChild(param);

        return inputElt;
    }

(startLine=235 endLine=249 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00293/modules/wsdl/src/org/apache/axis/wsdl/codegen/emitter/MultiLanguageClientEmitter.java)
    protected Element getOutputElement(XmlDocument doc,WSDLOperation operation){
        Element outputElt = doc.createElement("output");
        Element param = doc.createElement("param");
        Attr paramNameAttr = doc.createAttribute("name");
        paramNameAttr.setValue(this.mapper.getParameterName(operation.getOutputMessage().getElement()));
        param.setAttributeNode(paramNameAttr);
        Attr paramTypeAttr = doc.createAttribute("type");
        Class typeMapping = this.mapper.getTypeMapping(operation.getOutputMessage().getElement());
        paramTypeAttr.setValue(typeMapping==null?"":typeMapping.getName());
        param.setAttributeNode(paramTypeAttr);

        outputElt.appendChild(param);

        return outputElt;
    }

commonMethod: 
(startLine=328 endLine=333 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00294/modules/wsdl/src/org/apache/axis/wsdl/codegen/emitter/MultiLanguageClientEmitter.java)
    protected void addAttribute(XmlDocument document,String AttribName, String attribValue, Element element){
        Attr attribute = document.createAttribute(AttribName);
        attribute.setValue(attribValue);
        element.setAttributeNode(attribute);

    }


, Instance #
frags: 
(startLine=317 endLine=327 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00313/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
            if (flow != null) {
                ArrayList phaseList = new ArrayList();
                phaseList.add(new Phase(PhaseMetadata.TRANSPORT_PHASE));
                phaseHolder = new PhaseHolder(phaseList);
                for (int j = 0; j < flow.getHandlerCount(); j++) {
                    HandlerDescription metadata = flow.getHandler(j);
                    metadata.getRules().setPhaseName(PhaseMetadata.TRANSPORT_PHASE);
                    phaseHolder.addHandler(metadata);
                    phaseHolder.addHandler(metadata);
                }
            }

(startLine=355 endLine=364 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00313/modules/core/src/org/apache/axis/phaseresolver/PhaseResolver.java)
            if (flow != null) {
                ArrayList phaseList = new ArrayList();
                phaseList.add(new Phase(PhaseMetadata.TRANSPORT_PHASE));
                phaseHolder = new PhaseHolder(phaseList);
                for (int j = 0; j < flow.getHandlerCount(); j++) {
                    HandlerDescription metadata = flow.getHandler(j);
                    metadata.getRules().setPhaseName(PhaseMetadata.TRANSPORT_PHASE);
                    phaseHolder.addHandler(metadata);
                }
            }

commonMethod: 
(startLine=90 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00314/modules/core/src/org/apache/axis/phaseresolver/PhaseHolder.java)
    /**
     * This method is to build the transport phase , here load the corresponding handlers and added them
     * in to correct phase
     * @param phase
     * @param handlers
     * @throws PhaseException
     */
    public void buildTransportHandlerChain(Phase phase, ArrayList handlers) throws PhaseException {
        try {
            Class handlerClass = null;
            Handler handler;
            for (int i = 0; i < handlers.size(); i++) {
                HandlerDescription description = (HandlerDescription) handlers.get(i);
                handlerClass = Class.forName(description.getClassName(), true,
                        Thread.currentThread().getContextClassLoader());
                handler =
                        (Handler) handlerClass.newInstance();
                handler.init(description);
                description.setHandler(handler);
                phase.addHandler(description.getHandler());
            }
        } catch (ClassNotFoundException e) {
            throw new PhaseException(e);
        } catch (InstantiationException e) {
            throw new PhaseException(e);
        } catch (IllegalAccessException e) {
            throw new PhaseException(e);
        }
    }


, Instance #
frags: 
(startLine=102 endLine=140 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00390/modules/samples/test/org/apache/axis/engine/EchoRawXMLTest.java)
    public void testEchoXMLASync() throws Exception {
                OMElement payload = createEnvelope();

        org.apache.axis.clientapi.Call call = new org.apache.axis.clientapi.Call();

        call.setTo(targetEPR);
        call.setTransportInfo(Constants.TRANSPORT_HTTP, Constants.TRANSPORT_HTTP, false);

        Callback callback = new Callback() {
            public void onComplete(AsyncResult result) {
                try {
                    result.getResponseEnvelope().serializeWithCache(new OMOutput(XMLOutputFactory.newInstance().createXMLStreamWriter(System.out)));
                } catch (XMLStreamException e) {
                    reportError(e);
                } finally {
                    finish = true;
                }
            }

            public void reportError(Exception e) {
                e.printStackTrace();
                finish = true;
            }
        };

        call.invokeNonBlocking(operationName.getLocalPart(), payload, callback);
        int index = 0;
        while (!finish) {
            Thread.sleep(1000);
            index++;
            if(index > 10 ){
                throw new AxisFault("Server is shutdown as the Async response take too longs time");
            }
        }
        call.close();


        log.info("send the reqest");
    }

(startLine=102 endLine=140 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00390/modules/samples/test/org/apache/axis/engine/CommonsHTTPEchoRawXMLTest.java)
    public void testEchoXMLASync() throws Exception {
                OMElement payload = createEnvelope();

        org.apache.axis.clientapi.Call call = new org.apache.axis.clientapi.Call(Constants.TESTING_PATH+"commons-http-enabledRepository");

        call.setTo(targetEPR);
        call.setTransportInfo(Constants.TRANSPORT_COMMONS_HTTP, Constants.TRANSPORT_HTTP, false);

        Callback callback = new Callback() {
            public void onComplete(AsyncResult result) {
                try {
                    result.getResponseEnvelope().serializeWithCache(new OMOutput(XMLOutputFactory.newInstance().createXMLStreamWriter(System.out)));
                } catch (XMLStreamException e) {
                    reportError(e);
                } finally {
                    finish = true;
                }
            }

            public void reportError(Exception e) {
                e.printStackTrace();
                finish = true;
            }
        };

        call.invokeNonBlocking(operationName.getLocalPart(), payload, callback);
        int index = 0;
        while (!finish) {
            Thread.sleep(1000);
            index++;
            if(index > 10 ){
                throw new AxisFault("Server is shutdown as the Async response take too longs time");
            }
        }
        call.close();


        log.info("send the reqest");
    }

(startLine=126 endLine=158 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00390/modules/samples/test/org/apache/axis/engine/EchoRawXMLOnTwoChannelsTest.java)
        try {
            call.setTo(targetEPR);
            call.setTransportInfo(Constants.TRANSPORT_HTTP, Constants.TRANSPORT_HTTP, true);
            Callback callback = new Callback() {
                public void onComplete(AsyncResult result) {
                    try {
                        result.getResponseEnvelope().serialize(
                            new OMOutput(XMLOutputFactory.newInstance().createXMLStreamWriter(System.out)));
                    } catch (XMLStreamException e) {
                        reportError(e);
                    } finally {
                        finish = true;
                    }
                }

                public void reportError(Exception e) {
                    e.printStackTrace();
                    finish = true;
                }
            };

            call.invokeNonBlocking(operationName.getLocalPart(), method, callback);
            int index = 0;
            while (!finish) {
                Thread.sleep(1000);
                index++;
                if (index > 10) {
                    throw new AxisFault("Server is shutdown as the Async response take too longs time");
                }
            }
            log.info("send the reqest");
            call.close();
        } finally {

commonMethod: 
(startLine=38 endLine=43 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00391/modules/samples/test/org/apache/axis/integration/TestingUtils.java)
    public static void campareWithCreatedOMElement(OMElement element){
        OMElement firstChild = element.getFirstElement();
        TestCase.assertNotNull(firstChild);
        String textValue = firstChild.getText();
        TestCase.assertEquals(textValue,"Isaac Assimov, the foundation Sega");
    }


, Instance #
frags: 
(startLine=102 endLine=140 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00390/modules/samples/test/org/apache/axis/engine/EchoRawXMLTest.java)
    public void testEchoXMLASync() throws Exception {
                OMElement payload = createEnvelope();

        org.apache.axis.clientapi.Call call = new org.apache.axis.clientapi.Call();

        call.setTo(targetEPR);
        call.setTransportInfo(Constants.TRANSPORT_HTTP, Constants.TRANSPORT_HTTP, false);

        Callback callback = new Callback() {
            public void onComplete(AsyncResult result) {
                try {
                    result.getResponseEnvelope().serializeWithCache(new OMOutput(XMLOutputFactory.newInstance().createXMLStreamWriter(System.out)));
                } catch (XMLStreamException e) {
                    reportError(e);
                } finally {
                    finish = true;
                }
            }

            public void reportError(Exception e) {
                e.printStackTrace();
                finish = true;
            }
        };

        call.invokeNonBlocking(operationName.getLocalPart(), payload, callback);
        int index = 0;
        while (!finish) {
            Thread.sleep(1000);
            index++;
            if(index > 10 ){
                throw new AxisFault("Server is shutdown as the Async response take too longs time");
            }
        }
        call.close();


        log.info("send the reqest");
    }

(startLine=102 endLine=140 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00390/modules/samples/test/org/apache/axis/engine/CommonsHTTPEchoRawXMLTest.java)
    public void testEchoXMLASync() throws Exception {
                OMElement payload = createEnvelope();

        org.apache.axis.clientapi.Call call = new org.apache.axis.clientapi.Call(Constants.TESTING_PATH+"commons-http-enabledRepository");

        call.setTo(targetEPR);
        call.setTransportInfo(Constants.TRANSPORT_COMMONS_HTTP, Constants.TRANSPORT_HTTP, false);

        Callback callback = new Callback() {
            public void onComplete(AsyncResult result) {
                try {
                    result.getResponseEnvelope().serializeWithCache(new OMOutput(XMLOutputFactory.newInstance().createXMLStreamWriter(System.out)));
                } catch (XMLStreamException e) {
                    reportError(e);
                } finally {
                    finish = true;
                }
            }

            public void reportError(Exception e) {
                e.printStackTrace();
                finish = true;
            }
        };

        call.invokeNonBlocking(operationName.getLocalPart(), payload, callback);
        int index = 0;
        while (!finish) {
            Thread.sleep(1000);
            index++;
            if(index > 10 ){
                throw new AxisFault("Server is shutdown as the Async response take too longs time");
            }
        }
        call.close();


        log.info("send the reqest");
    }

commonMethod: 
(startLine=28 endLine=36 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00391/modules/samples/test/org/apache/axis/integration/TestingUtils.java)
    public static OMElement createDummyOMElement() {
        OMFactory fac = OMAbstractFactory.getOMFactory();
        OMNamespace omNs = fac.createOMNamespace("http://localhost/my", "my");
        OMElement method = fac.createOMElement("echoOMElement", omNs);
        OMElement value = fac.createOMElement("myValue", omNs);
        value.addChild(fac.createText(value, "Isaac Assimov, the foundation Sega"));
        method.addChild(value);
        return method;
    }


, Instance #
frags: 
(startLine=109 endLine=121 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00394/modules/core/src/org/apache/axis/receivers/RawXMLINOutMessageReceiver.java)
                } else if (WSDLService.STYLE_RPC.equals(style)) {
                    parmeter = methodElement.getFirstElement();
                    Object[] parms = new Object[]{parmeter};

                    // invoke the WebService
                    OMElement result = (OMElement) method.invoke(obj, parms);
                    envelope = getSOAPFactory().getDefaultEnvelope();

                    OMNamespace ns = getSOAPFactory().createOMNamespace("http://soapenc/", "res");
                    OMElement responseMethodName = getSOAPFactory().createOMElement(methodName + "Response", ns);
                    responseMethodName.addChild(result);
                    envelope.getBody().addChild(responseMethodName);
                } else {

(startLine=138 endLine=149 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00394/modules/core/src/org/apache/axis/receivers/RawXMLINOutMessageReceiver.java)
                } else if (WSDLService.STYLE_RPC.equals(style)) {

                    Object[] parms = new Object[0];

                    // invoke the WebService
                    OMElement result = (OMElement) method.invoke(obj, parms);

                    OMNamespace ns = getSOAPFactory().createOMNamespace("http://soapenc/", "res");
                    OMElement responseMethodName = getSOAPFactory().createOMElement(methodName + "Response", ns);
                    responseMethodName.addChild(result);
                    envelope.getBody().addChild(responseMethodName);
                } else {

commonMethod: 
(startLine=135 endLine=146 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00395/modules/core/src/org/apache/axis/receivers/RawXMLINOutMessageReceiver.java)
    public Method findOperation(OperationDescription op, Class ImplClass) {
        Method method = null;
        String methodName = op.getName().getLocalPart();
        Method[] methods = ImplClass.getMethods();
        for (int i = 0; i < methods.length; i++) {
            if (methods[i].getName().equals(methodName)) {
                method = methods[i];
                break;
            }
        }
        return method;
    }


, Instance #
frags: 
(startLine=73 endLine=137 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00421/modules/core/src/org/apache/axis2/transport/mail/MailWorker.java)
    public void doWork() {
        // create an Axis server
        AxisEngine engine = new AxisEngine(reg);
        MessageContext msgContext = null;
        // create and initialize a message context
        try {
            TransportInDescription transportIn = reg.getAxisConfiguration()
                    .getTransportIn(new QName(Constants.TRANSPORT_MAIL));
            TransportOutDescription transportOut = reg.getAxisConfiguration()
                    .getTransportOut(new QName(Constants.TRANSPORT_MAIL));

            msgContext = new MessageContext(reg, transportIn, transportOut);
            msgContext.setServerSide(true);
            msgContext.setProperty(MailConstants.CONTENT_TYPE,
                    mimeMessage.getContentType());
            String soapAction = getMailHeader(MailConstants.HEADER_SOAP_ACTION);
            msgContext.setWSAAction(soapAction);
            msgContext.setSoapAction(soapAction);

            String serviceURL = mimeMessage.getSubject();
            if (serviceURL == null) {
                serviceURL = "";
            }

            String replyTo = ((InternetAddress) mimeMessage.getReplyTo()[0]).getAddress();
            if (replyTo != null) {
                msgContext.setReplyTo(
                        new EndpointReference(AddressingConstants.WSA_REPLY_TO,
                                replyTo));
            }

            String recepainets = ((InternetAddress) mimeMessage.getAllRecipients()[0]).getAddress();
            if (recepainets != null) {
                msgContext.setTo(
                        new EndpointReference(AddressingConstants.WSA_FROM,
                                recepainets + "/" + serviceURL));
            } else {
                throw new AxisFault("No receptineist found in the Email");
            }

            // add the SOAPEnvelope
            String message = mimeMessage.getContent().toString();
            System.out.println("message[" + message + "]");
            ByteArrayInputStream bais =
                    new ByteArrayInputStream(message.getBytes());
            XMLStreamReader reader = XMLInputFactory.newInstance()
                    .createXMLStreamReader(bais);
            StAXBuilder builder = new StAXSOAPModelBuilder(reader);
            msgContext.setEnvelope((SOAPEnvelope) builder.getDocumentElement());

            // invoke the Axis engine
            engine.receive(msgContext);
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e);
        }

        /*
         * 
         * This part is ignored for the time being. CT 07-Feb-2005.
         * 
         * if (msgContext.getProperty(MessageContext.QUIT_REQUESTED) != null) { //
         * why then, quit! try { server.stop(); } catch (Exception e) { } }
         */
    }

(startLine=66 endLine=128 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00421/modules/core/src/org/apache/axis2/transport/mail/server/MailSorter.java)
                            MimeMessage mimeMessage) {
        // create an Axis server
        AxisEngine engine = new AxisEngine(confContext);
        MessageContext msgContext = null;
        // create and initialize a message context
        try {
            msgContext =
                    new MessageContext(confContext,
                            confContext.getAxisConfiguration().getTransportIn(
                                    new QName(Constants.TRANSPORT_MAIL)),
                            confContext.getAxisConfiguration().getTransportOut(
                                    new QName(Constants.TRANSPORT_MAIL)));
            msgContext.setServerSide(true);

            msgContext.setProperty(MailConstants.CONTENT_TYPE,
                    mimeMessage.getContentType());
            msgContext.setWSAAction(
                    getMailHeader(MailConstants.HEADER_SOAP_ACTION,
                            mimeMessage));

            String serviceURL = mimeMessage.getSubject();
            if (serviceURL == null) {
                serviceURL = "";
            }

            String replyTo = ((InternetAddress) mimeMessage.getReplyTo()[0]).getAddress();
            if (replyTo != null) {
                msgContext.setReplyTo(
                        new EndpointReference(AddressingConstants.WSA_REPLY_TO,
                                replyTo));
            }

            String recepainets = ((InternetAddress) mimeMessage.getAllRecipients()[0]).getAddress();


            if (recepainets != null) {
                msgContext.setTo(
                        new EndpointReference(AddressingConstants.WSA_FROM,
                                recepainets + "/" + serviceURL));
            }

            // add the SOAPEnvelope
            String message = mimeMessage.getContent().toString();
            System.out.println("message[" + message + "]");
            ByteArrayInputStream bais =
                    new ByteArrayInputStream(message.getBytes());
            XMLStreamReader reader = XMLInputFactory.newInstance()
                    .createXMLStreamReader(bais);
            StAXBuilder builder = new StAXSOAPModelBuilder(reader);
            msgContext.setEnvelope((SOAPEnvelope) builder.getDocumentElement());
            // invoke the Axis engine
            engine.receive(msgContext);
        } catch (Exception e) {
            AxisFault af;
            if (e instanceof AxisFault) {
                af = (AxisFault) e;
                log.debug("Error occured while trying to process the mail.",
                        af);
            } else {
                af = AxisFault.makeFault(e);
            }
        }
    }

commonMethod: 
(startLine=159 endLine=192 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/core/src/org/apache/axis2/engine/AxisEngine.java)
    /**
     * This is invoked when a SOAP Fault is received from a Other SOAP Node
     * @param msgContext
     * @throws AxisFault
     */
    public void receiveFault(MessageContext msgContext) throws AxisFault {

        OperationContext opContext = msgContext.getOperationContext();
        if (opContext == null) {
            //If we do not have a OperationContext that means this may be a incoming 
            //Dual Channel response. So try to dispatch the Service 
            ConfigurationContext sysCtx = msgContext.getSystemContext();
            ArrayList phases =
                sysCtx.getAxisConfiguration().getInPhasesUptoAndIncludingPostDispatch();

            if (msgContext.isPaused()) {
                resumeInvocationPhases(phases, msgContext);
            } else {
                invokePhases(phases, msgContext);
            }
            verifyContextBuilt(msgContext);
        }
        opContext = msgContext.getOperationContext();
        //find and execute the Fault In Flow Handlers
        if (opContext != null) {
            OperationDescription axisOperation = opContext.getAxisOperation();
            ArrayList phases = axisOperation.getPhasesInFaultFlow();
            if (msgContext.isPaused()) {
                resumeInvocationPhases(phases, msgContext);
            } else {
                invokePhases(phases, msgContext);
            }
        }
    }


, Instance #
frags: 
(startLine=73 endLine=137 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00421/modules/core/src/org/apache/axis2/transport/mail/MailWorker.java)
    public void doWork() {
        // create an Axis server
        AxisEngine engine = new AxisEngine(reg);
        MessageContext msgContext = null;
        // create and initialize a message context
        try {
            TransportInDescription transportIn = reg.getAxisConfiguration()
                    .getTransportIn(new QName(Constants.TRANSPORT_MAIL));
            TransportOutDescription transportOut = reg.getAxisConfiguration()
                    .getTransportOut(new QName(Constants.TRANSPORT_MAIL));

            msgContext = new MessageContext(reg, transportIn, transportOut);
            msgContext.setServerSide(true);
            msgContext.setProperty(MailConstants.CONTENT_TYPE,
                    mimeMessage.getContentType());
            String soapAction = getMailHeader(MailConstants.HEADER_SOAP_ACTION);
            msgContext.setWSAAction(soapAction);
            msgContext.setSoapAction(soapAction);

            String serviceURL = mimeMessage.getSubject();
            if (serviceURL == null) {
                serviceURL = "";
            }

            String replyTo = ((InternetAddress) mimeMessage.getReplyTo()[0]).getAddress();
            if (replyTo != null) {
                msgContext.setReplyTo(
                        new EndpointReference(AddressingConstants.WSA_REPLY_TO,
                                replyTo));
            }

            String recepainets = ((InternetAddress) mimeMessage.getAllRecipients()[0]).getAddress();
            if (recepainets != null) {
                msgContext.setTo(
                        new EndpointReference(AddressingConstants.WSA_FROM,
                                recepainets + "/" + serviceURL));
            } else {
                throw new AxisFault("No receptineist found in the Email");
            }

            // add the SOAPEnvelope
            String message = mimeMessage.getContent().toString();
            System.out.println("message[" + message + "]");
            ByteArrayInputStream bais =
                    new ByteArrayInputStream(message.getBytes());
            XMLStreamReader reader = XMLInputFactory.newInstance()
                    .createXMLStreamReader(bais);
            StAXBuilder builder = new StAXSOAPModelBuilder(reader);
            msgContext.setEnvelope((SOAPEnvelope) builder.getDocumentElement());

            // invoke the Axis engine
            engine.receive(msgContext);
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e);
        }

        /*
         * 
         * This part is ignored for the time being. CT 07-Feb-2005.
         * 
         * if (msgContext.getProperty(MessageContext.QUIT_REQUESTED) != null) { //
         * why then, quit! try { server.stop(); } catch (Exception e) { } }
         */
    }

(startLine=66 endLine=128 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00421/modules/core/src/org/apache/axis2/transport/mail/server/MailSorter.java)
                            MimeMessage mimeMessage) {
        // create an Axis server
        AxisEngine engine = new AxisEngine(confContext);
        MessageContext msgContext = null;
        // create and initialize a message context
        try {
            msgContext =
                    new MessageContext(confContext,
                            confContext.getAxisConfiguration().getTransportIn(
                                    new QName(Constants.TRANSPORT_MAIL)),
                            confContext.getAxisConfiguration().getTransportOut(
                                    new QName(Constants.TRANSPORT_MAIL)));
            msgContext.setServerSide(true);

            msgContext.setProperty(MailConstants.CONTENT_TYPE,
                    mimeMessage.getContentType());
            msgContext.setWSAAction(
                    getMailHeader(MailConstants.HEADER_SOAP_ACTION,
                            mimeMessage));

            String serviceURL = mimeMessage.getSubject();
            if (serviceURL == null) {
                serviceURL = "";
            }

            String replyTo = ((InternetAddress) mimeMessage.getReplyTo()[0]).getAddress();
            if (replyTo != null) {
                msgContext.setReplyTo(
                        new EndpointReference(AddressingConstants.WSA_REPLY_TO,
                                replyTo));
            }

            String recepainets = ((InternetAddress) mimeMessage.getAllRecipients()[0]).getAddress();


            if (recepainets != null) {
                msgContext.setTo(
                        new EndpointReference(AddressingConstants.WSA_FROM,
                                recepainets + "/" + serviceURL));
            }

            // add the SOAPEnvelope
            String message = mimeMessage.getContent().toString();
            System.out.println("message[" + message + "]");
            ByteArrayInputStream bais =
                    new ByteArrayInputStream(message.getBytes());
            XMLStreamReader reader = XMLInputFactory.newInstance()
                    .createXMLStreamReader(bais);
            StAXBuilder builder = new StAXSOAPModelBuilder(reader);
            msgContext.setEnvelope((SOAPEnvelope) builder.getDocumentElement());
            // invoke the Axis engine
            engine.receive(msgContext);
        } catch (Exception e) {
            AxisFault af;
            if (e instanceof AxisFault) {
                af = (AxisFault) e;
                log.debug("Error occured while trying to process the mail.",
                        af);
            } else {
                af = AxisFault.makeFault(e);
            }
        }
    }

commonMethod: 
(startLine=132 endLine=157 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/core/src/org/apache/axis2/engine/AxisEngine.java)
    /**
     * This Method Send the SOAP Fault to a Other SOAP Node
     * @param msgContext
     * @throws AxisFault
     */
    public void sendFault(MessageContext msgContext) throws AxisFault {
        OperationContext opContext = msgContext.getOperationContext();
        //find and execute the Fault Out Flow Handlers
        if (opContext != null) {
            OperationDescription axisOperation = opContext.getAxisOperation();
            ArrayList phases = axisOperation.getPhasesOutFaultFlow();
            if (msgContext.isPaused()) {
                resumeInvocationPhases(phases, msgContext);
            } else {
                invokePhases(phases, msgContext);
            }
        }
        //it is possible that Operation Context is Null as the error occered before the 
        //Dispatcher. We do not run Handlers in that case 

        if (!msgContext.isPaused()) {
            //Actually send the SOAP Fault
            TransportSender sender = msgContext.getTransportOut().getSender();
            sender.invoke(msgContext);
        }
    }


, Instance #
frags: 
(startLine=73 endLine=137 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00421/modules/core/src/org/apache/axis2/transport/mail/MailWorker.java)
    public void doWork() {
        // create an Axis server
        AxisEngine engine = new AxisEngine(reg);
        MessageContext msgContext = null;
        // create and initialize a message context
        try {
            TransportInDescription transportIn = reg.getAxisConfiguration()
                    .getTransportIn(new QName(Constants.TRANSPORT_MAIL));
            TransportOutDescription transportOut = reg.getAxisConfiguration()
                    .getTransportOut(new QName(Constants.TRANSPORT_MAIL));

            msgContext = new MessageContext(reg, transportIn, transportOut);
            msgContext.setServerSide(true);
            msgContext.setProperty(MailConstants.CONTENT_TYPE,
                    mimeMessage.getContentType());
            String soapAction = getMailHeader(MailConstants.HEADER_SOAP_ACTION);
            msgContext.setWSAAction(soapAction);
            msgContext.setSoapAction(soapAction);

            String serviceURL = mimeMessage.getSubject();
            if (serviceURL == null) {
                serviceURL = "";
            }

            String replyTo = ((InternetAddress) mimeMessage.getReplyTo()[0]).getAddress();
            if (replyTo != null) {
                msgContext.setReplyTo(
                        new EndpointReference(AddressingConstants.WSA_REPLY_TO,
                                replyTo));
            }

            String recepainets = ((InternetAddress) mimeMessage.getAllRecipients()[0]).getAddress();
            if (recepainets != null) {
                msgContext.setTo(
                        new EndpointReference(AddressingConstants.WSA_FROM,
                                recepainets + "/" + serviceURL));
            } else {
                throw new AxisFault("No receptineist found in the Email");
            }

            // add the SOAPEnvelope
            String message = mimeMessage.getContent().toString();
            System.out.println("message[" + message + "]");
            ByteArrayInputStream bais =
                    new ByteArrayInputStream(message.getBytes());
            XMLStreamReader reader = XMLInputFactory.newInstance()
                    .createXMLStreamReader(bais);
            StAXBuilder builder = new StAXSOAPModelBuilder(reader);
            msgContext.setEnvelope((SOAPEnvelope) builder.getDocumentElement());

            // invoke the Axis engine
            engine.receive(msgContext);
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e);
        }

        /*
         * 
         * This part is ignored for the time being. CT 07-Feb-2005.
         * 
         * if (msgContext.getProperty(MessageContext.QUIT_REQUESTED) != null) { //
         * why then, quit! try { server.stop(); } catch (Exception e) { } }
         */
    }

(startLine=66 endLine=128 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00421/modules/core/src/org/apache/axis2/transport/mail/server/MailSorter.java)
                            MimeMessage mimeMessage) {
        // create an Axis server
        AxisEngine engine = new AxisEngine(confContext);
        MessageContext msgContext = null;
        // create and initialize a message context
        try {
            msgContext =
                    new MessageContext(confContext,
                            confContext.getAxisConfiguration().getTransportIn(
                                    new QName(Constants.TRANSPORT_MAIL)),
                            confContext.getAxisConfiguration().getTransportOut(
                                    new QName(Constants.TRANSPORT_MAIL)));
            msgContext.setServerSide(true);

            msgContext.setProperty(MailConstants.CONTENT_TYPE,
                    mimeMessage.getContentType());
            msgContext.setWSAAction(
                    getMailHeader(MailConstants.HEADER_SOAP_ACTION,
                            mimeMessage));

            String serviceURL = mimeMessage.getSubject();
            if (serviceURL == null) {
                serviceURL = "";
            }

            String replyTo = ((InternetAddress) mimeMessage.getReplyTo()[0]).getAddress();
            if (replyTo != null) {
                msgContext.setReplyTo(
                        new EndpointReference(AddressingConstants.WSA_REPLY_TO,
                                replyTo));
            }

            String recepainets = ((InternetAddress) mimeMessage.getAllRecipients()[0]).getAddress();


            if (recepainets != null) {
                msgContext.setTo(
                        new EndpointReference(AddressingConstants.WSA_FROM,
                                recepainets + "/" + serviceURL));
            }

            // add the SOAPEnvelope
            String message = mimeMessage.getContent().toString();
            System.out.println("message[" + message + "]");
            ByteArrayInputStream bais =
                    new ByteArrayInputStream(message.getBytes());
            XMLStreamReader reader = XMLInputFactory.newInstance()
                    .createXMLStreamReader(bais);
            StAXBuilder builder = new StAXSOAPModelBuilder(reader);
            msgContext.setEnvelope((SOAPEnvelope) builder.getDocumentElement());
            // invoke the Axis engine
            engine.receive(msgContext);
        } catch (Exception e) {
            AxisFault af;
            if (e instanceof AxisFault) {
                af = (AxisFault) e;
                log.debug("Error occured while trying to process the mail.",
                        af);
            } else {
                af = AxisFault.makeFault(e);
            }
        }
    }

commonMethod: 
(startLine=194 endLine=255 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/core/src/org/apache/axis2/engine/AxisEngine.java)
    /**
     * If error occurs at inflow or the out flow this method will call to handle the error. But if the
     * execution reach this method twice, means the sending the error handling failed an in that case the
     * this method just log the error and exit</p>
     *
     * @param context
     * @param e
     * @throws AxisFault
     */
    public MessageContext createFaultMessageContext(MessageContext processingContext, Throwable e)
        throws AxisFault {
        if (processingContext.isProcessingFault()) {
            //We get the error file processing the fault. nothing we can do
            throw new AxisFault(
                "Error occured while processing Fault, Previous error is given in the stack trace",
                e);
        }

        MessageContext faultContext =
            new MessageContext(
                engineContext,
                processingContext.getSessionContext(),
                processingContext.getTransportIn(),
                processingContext.getTransportOut());

        faultContext.setProcessingFault(true);
        if (processingContext.getFaultTo() != null) {
            faultContext.setFaultTo(processingContext.getFaultTo());
        } else {
            Object writer = processingContext.getProperty(MessageContext.TRANSPORT_OUT);
            if (writer != null) {
                faultContext.setProperty(MessageContext.TRANSPORT_OUT, writer);
            } else {
                //TODO Opps there are no place to send this, we will log and should we throw the exception? 
                throw new AxisFault("No where to send the Error, the return response path is missing and FaultTo not specified");
            }
        }

        faultContext.setOperationContext(processingContext.getOperationContext());
        faultContext.setProcessingFault(true);
        faultContext.setServerSide(true);
        SOAPEnvelope envelope = null;

        if (SOAP12Constants
            .SOAP_ENVELOPE_NAMESPACE_URI
            .equals(processingContext.getEnvelope().getNamespace().getName())) {
            envelope = OMAbstractFactory.getSOAP12Factory().getDefaultFaultEnvelope();
        } else {
            envelope = OMAbstractFactory.getSOAP11Factory().getDefaultFaultEnvelope();
        }

        // TODO do we need to set old Headers back?
        SOAPBody body = envelope.getBody();

        //            body.addFault(new AxisFault(e.getMessage(), e));
        body.getFault().setException(new AxisFault(e));
        extractFaultInformationFromMessageContext(processingContext, envelope.getBody().getFault());

        faultContext.setEnvelope(envelope);
        sendFault(faultContext);
        return faultContext;
    }


, Instance #
frags: 
(startLine=80 endLine=106 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/core/src/org/apache/axis2/clientapi/Call.java)
    public OMElement invokeBlocking(String axisop, OMElement toSend) throws AxisFault {

        OperationDescription axisConfig =
                serviceContext.getServiceConfig().getOperation(
                        new QName(axisop));
        if (axisConfig == null) {
            axisConfig = new OperationDescription(new QName(axisop));
            axisConfig.setRemainingPhasesInFlow(
                    operationTemplate.getRemainingPhasesInFlow());
            axisConfig.setPhasesOutFlow(operationTemplate.getPhasesOutFlow());
            axisConfig.setPhasesInFaultFlow(
                    operationTemplate.getPhasesInFaultFlow());
            axisConfig.setPhasesOutFaultFlow(
                    operationTemplate.getPhasesOutFaultFlow());
            serviceContext.getServiceConfig().addOperation(axisConfig);
        }

//        if (axisConfig == null) {
//            axisConfig = new OperationDescription(new QName(axisop));
//            serviceContext.getServiceConfig().addOperation(axisConfig);
//        }
        MessageContext msgctx = prepareTheSystem(toSend);

        this.lastResponseMessage = super.invokeBlocking(axisConfig, msgctx);
        SOAPEnvelope resEnvelope = lastResponseMessage.getEnvelope();
        return resEnvelope.getBody().getFirstElement();
    }

(startLine=121 endLine=139 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/core/src/org/apache/axis2/clientapi/Call.java)
            throws AxisFault {
        OperationDescription axisConfig =
                serviceContext.getServiceConfig().getOperation(
                        new QName(axisop));
        if (axisConfig == null) {
            axisConfig = new OperationDescription(new QName(axisop));
            axisConfig.setRemainingPhasesInFlow(
                    operationTemplate.getRemainingPhasesInFlow());
            axisConfig.setPhasesOutFlow(operationTemplate.getPhasesOutFlow());
            axisConfig.setPhasesInFaultFlow(
                    operationTemplate.getPhasesInFaultFlow());
            axisConfig.setPhasesOutFaultFlow(
                    operationTemplate.getPhasesOutFaultFlow());
            serviceContext.getServiceConfig().addOperation(axisConfig);
        }
        MessageContext msgctx = prepareTheSystem(toSend);

        super.invokeNonBlocking(axisConfig, msgctx, callback);
    }

commonMethod: 
(startLine=94 endLine=108 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00423/modules/core/src/org/apache/axis2/clientapi/MEPClient.java)
    /**
     * This class prepare the SOAP Envelope using the payload
     * @param toSend
     * @return
     * @throws AxisFault
     */
    protected MessageContext prepareTheSOAPEnvelope(OMElement toSend) throws AxisFault {
        MessageContext msgctx = new MessageContext(
                serviceContext.getEngineContext());

        SOAPEnvelope envelope = createDefaultSOAPEnvelope();
        envelope.getBody().addChild(toSend);
        msgctx.setEnvelope(envelope);
        return msgctx;
    }


, Instance #
frags: 
(startLine=80 endLine=106 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/core/src/org/apache/axis2/clientapi/Call.java)
    public OMElement invokeBlocking(String axisop, OMElement toSend) throws AxisFault {

        OperationDescription axisConfig =
                serviceContext.getServiceConfig().getOperation(
                        new QName(axisop));
        if (axisConfig == null) {
            axisConfig = new OperationDescription(new QName(axisop));
            axisConfig.setRemainingPhasesInFlow(
                    operationTemplate.getRemainingPhasesInFlow());
            axisConfig.setPhasesOutFlow(operationTemplate.getPhasesOutFlow());
            axisConfig.setPhasesInFaultFlow(
                    operationTemplate.getPhasesInFaultFlow());
            axisConfig.setPhasesOutFaultFlow(
                    operationTemplate.getPhasesOutFaultFlow());
            serviceContext.getServiceConfig().addOperation(axisConfig);
        }

//        if (axisConfig == null) {
//            axisConfig = new OperationDescription(new QName(axisop));
//            serviceContext.getServiceConfig().addOperation(axisConfig);
//        }
        MessageContext msgctx = prepareTheSystem(toSend);

        this.lastResponseMessage = super.invokeBlocking(axisConfig, msgctx);
        SOAPEnvelope resEnvelope = lastResponseMessage.getEnvelope();
        return resEnvelope.getBody().getFirstElement();
    }

(startLine=121 endLine=139 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00422/modules/core/src/org/apache/axis2/clientapi/Call.java)
            throws AxisFault {
        OperationDescription axisConfig =
                serviceContext.getServiceConfig().getOperation(
                        new QName(axisop));
        if (axisConfig == null) {
            axisConfig = new OperationDescription(new QName(axisop));
            axisConfig.setRemainingPhasesInFlow(
                    operationTemplate.getRemainingPhasesInFlow());
            axisConfig.setPhasesOutFlow(operationTemplate.getPhasesOutFlow());
            axisConfig.setPhasesInFaultFlow(
                    operationTemplate.getPhasesInFaultFlow());
            axisConfig.setPhasesOutFaultFlow(
                    operationTemplate.getPhasesOutFaultFlow());
            serviceContext.getServiceConfig().addOperation(axisConfig);
        }
        MessageContext msgctx = prepareTheSystem(toSend);

        super.invokeNonBlocking(axisConfig, msgctx, callback);
    }

commonMethod: 
(startLine=116 endLine=139 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00423/modules/core/src/org/apache/axis2/clientapi/Call.java)
    /**
     * This method create a operation desc if it null and copy the flows from the template operation
     * @param opDesc
     * @param axisOp
     * @return
     */
    private OperationDescription createOpDescAndFillInFlowInformation(
        OperationDescription opDesc,
        String axisOp) {
        if (opDesc == null) {
            //if the operation is not alrady define we will copy the 
            //crated Phases from the templete operation to the this Operation
            opDesc = new OperationDescription(new QName(axisOp));
            opDesc.setRemainingPhasesInFlow(
                operationTemplate.getRemainingPhasesInFlow());
            opDesc.setPhasesOutFlow(operationTemplate.getPhasesOutFlow());
            opDesc.setPhasesInFaultFlow(
                operationTemplate.getPhasesInFaultFlow());
            opDesc.setPhasesOutFaultFlow(
                operationTemplate.getPhasesOutFaultFlow());
            serviceContext.getServiceConfig().addOperation(opDesc);
        }
        return opDesc;
    }


, Instance #
frags: 
(startLine=115 endLine=134 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00514/modules/integration/test/org/apache/axis2/integration/UtilServer.java)
            throws AxisFault {
        DeploymentEngine deploymentEngine = new DeploymentEngine();
        File file = new File(
                org.apache.axis2.Constants.TESTING_REPOSITORY +
                        "/modules/addressing.mar");
        TestCase.assertTrue(file.exists());
        ModuleDescription moduleDesc = deploymentEngine.buildModule(file);

        ConfigurationContextFactory efac = new ConfigurationContextFactory();
        ConfigurationContext sysContext =
                efac.buildClientConfigurationContext("target/test-resources/intregrationRepo");

        sysContext.getAxisConfiguration().addModule(moduleDesc);
        //sysContext.getAxisConfiguration().engageModule(moduleDesc.getName());

        sysContext.getAxisConfiguration().addService(service);

        return service.getParent().getServiceGroupContext(sysContext
        ).getServiceContext(service.getName().getLocalPart());
    }

(startLine=138 endLine=157 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00514/modules/integration/test/org/apache/axis2/integration/UtilServer.java)
            throws AxisFault {
        DeploymentEngine deploymentEngine = new DeploymentEngine();
        File file = new File(
                org.apache.axis2.Constants.TESTING_REPOSITORY +
                        "/modules/addressing.mar");
        TestCase.assertTrue(file.exists());
        ModuleDescription moduleDesc = deploymentEngine.buildModule(file);

        ConfigurationContextFactory efac = new ConfigurationContextFactory();
        ConfigurationContext sysContext =
                efac.buildClientConfigurationContext(clientHome);

        sysContext.getAxisConfiguration().addModule(moduleDesc);
        //sysContext.getAxisConfiguration().engageModule(moduleDesc.getName());

        sysContext.getAxisConfiguration().addService(service);

        return service.getParent().getServiceGroupContext(sysContext
        ).getServiceContext(service.getName().getLocalPart());
    }

commonMethod: 
(startLine=201 endLine=208 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00515/modules/integration/test/org/apache/axis2/integration/UtilServer.java)
    private static File getAddressingMARFile() {
        File dir = new File(org.apache.axis2.Constants.TESTING_REPOSITORY + "/modules");
        File[] files = dir.listFiles(new AddressingFilter());
        TestCase.assertTrue(files.length == 1);
        File file = files[0];
        TestCase.assertTrue(file.exists());
        return file;
    }


, Instance #
frags: 
(startLine=214 endLine=224 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00514/modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingInHandler.java)
            } else if (checkElement(new QName(addressingNamespace, AddressingConstants.EPR_REFERENCE_PARAMETERS), eprChildElement.getQName())){
                AnyContentType anyContentType = new AnyContentType();
                if(epr.getReferenceParameters() == null){
                    epr.setReferenceParameters(anyContentType);
                }
                Iterator referenceParameters = eprChildElement.getChildElements();
                while (referenceParameters.hasNext()) {
                    OMElement element = (OMElement) referenceParameters.next();
                    epr.getReferenceParameters().addReferenceValue(element.getQName(), element.getText());
                }
            } else if (checkElement(new QName(addressingNamespace, AddressingConstants.Final.WSA_METADATA), eprChildElement.getQName())){

(startLine=224 endLine=234 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00514/modules/addressing/src/org/apache/axis2/handlers/addressing/AddressingInHandler.java)
            } else if (checkElement(new QName(addressingNamespace, AddressingConstants.Final.WSA_METADATA), eprChildElement.getQName())){
                AnyContentType anyContentType = new AnyContentType();
                if(epr.getMetadata() == null){
                    epr.setMetadata(anyContentType);
                }
                Iterator metadataChildren = eprChildElement.getChildElements();
                while (metadataChildren.hasNext()) {
                    OMElement element = (OMElement) metadataChildren.next();
                    epr.getMetadata().addReferenceValue(element.getQName(), element.getText());
                }
            }

commonMethod: 
(startLine=73 endLine=82 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00515/modules/addressing/src/org/apache/axis2/addressing/AddressingFaultsHelper.java)
    public static void triggerActionMismatchFault(MessageContext messageContext) throws AxisFault {
        if(log.isDebugEnabled()){
            log.debug("triggerActionMismatchFault: messageContext: "+messageContext);
        }
        String namespace = (String) messageContext.getProperty(AddressingConstants.WS_ADDRESSING_VERSION);
        if (Submission.WSA_NAMESPACE.equals(namespace))
            triggerAddressingFault(messageContext, Final.FAULT_HEADER_PROB_HEADER_QNAME, AddressingConstants.WSA_DEFAULT_PREFIX + ":Action", Submission.FAULT_INVALID_HEADER, null, Submission.FAULT_INVALID_HEADER_REASON);
        else
            triggerAddressingFault(messageContext, Final.FAULT_HEADER_PROB_HEADER_QNAME, AddressingConstants.WSA_DEFAULT_PREFIX + ":Action", Final.FAULT_INVALID_HEADER, "ActionMismatch", Final.FAULT_INVALID_HEADER_REASON);
    }


, Instance #
frags: 
(startLine=326 endLine=344 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00528/modules/kernel/src/org/apache/axis2/description/WSDL20ToAxisServiceBuilder.java)
                    messageReference.getMessageLabel().IN)) {
                // Its an input message

                if (isServerSide) {
                    AxisMessage inMessage = axisOperation
                            .getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);

                    inMessage.setElementQName(messageReference.getElementName());
                    inMessage.setName(messageReference.getElementName().getLocalPart());
                    // TODO copy policy elements
                } else {
                    AxisMessage inMessage = axisOperation
                            .getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);

                    inMessage.setElementQName(messageReference.getElementName());
                    inMessage.setName(messageReference.getElementName().getLocalPart());
                    // TODO copy policy elements
                }
            } else if (messageReference.getMessageLabel().equals(

(startLine=345 endLine=361 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00528/modules/kernel/src/org/apache/axis2/description/WSDL20ToAxisServiceBuilder.java)
                    messageReference.getMessageLabel().OUT)) {
                if (isServerSide) {
                    AxisMessage outMessage = axisOperation
                            .getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);

                    outMessage.setElementQName(messageReference.getElementName());
                    outMessage.setName(messageReference.getElementName().getLocalPart());
//                  TODO copy policy elements
                } else {
                    AxisMessage outMessage = axisOperation
                            .getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);

                    outMessage.setElementQName(messageReference.getElementName());
                    outMessage.setName(messageReference.getElementName().getLocalPart());
//                  TODO copy policy elements
                }
            }

commonMethod: 
(startLine=422 endLine=450 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00529/modules/kernel/src/org/apache/axis2/description/WSDL20ToAxisServiceBuilder.java)
    private void createAxisMessage(AxisOperation axisOperation, InterfaceMessageReference messageReference, String messageLabel) throws Exception {
        AxisMessage message = axisOperation
                .getMessage(messageLabel);

        String messageContentModelName = messageReference.getMessageContentModel();
        QName elementQName = null;

        if (WSDLConstants.WSDL20_2006Constants.NMTOKEN_ELEMENT.equals(messageContentModelName)) {
            elementQName = messageReference.getElementDeclaration().getName();
        } else if (WSDLConstants.WSDL20_2006Constants.NMTOKEN_ANY.equals(messageContentModelName)) {
            // TODO : Need to improve this
//           elementQName = SchemaConstants.XSD_ANY;
        } else
        if (WSDLConstants.WSDL20_2006Constants.NMTOKEN_NONE.equals(messageContentModelName)) {
            // TODO : Need to improve this
//           elementQName = new QName("None");
        } else {
            throw new Exception("Sorry we do not support " + messageContentModelName + ". We do only support #any, #none and #element as message content models.");
        }

        message.setElementQName(elementQName);
        message.setName(elementQName != null ? elementQName.getLocalPart() : null);
        axisOperation.addMessage(message, messageLabel);

        // populate this map so that this can be used in SOAPBody based dispatching
        if (elementQName != null) {
            axisService.addmessageNameToOperationMapping(elementQName.getLocalPart(), axisOperation);
        }
    }


, Instance #
frags: 
(startLine=21 endLine=46 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00541/modules/jaxws/test/org/apache/axis2/jaxws/sample/FaultsServiceTests.java)
    public void testFaultsService1(){
        //FaultyWebServiceFault_Exception exception = null;
        Exception exception = null;
        try{
            System.out.println("----------------------------------");
            System.out.println("test: " + getName());
            FaultsService service = new FaultsService();
            FaultsServicePortType proxy = service.getFaultsPort();
            BindingProvider p = (BindingProvider)proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,axisEndpoint);

            // the invoke will throw an exception, if the test is performed right
            int total = proxy.throwFault(2, "a", 2);
            
        }catch(BaseFault_Exception e){
            exception = e;
        } catch (ComplexFault_Exception e) {
            fail("Should not get ComplexFault_Exception in this testcase");
        }
        
        System.out.println("----------------------------------");
        
        assertNotNull(exception);
        assertTrue(((BaseFault_Exception)exception).getFaultInfo() instanceof DerivedFault2);
        
    }

(startLine=48 endLine=73 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00541/modules/jaxws/test/org/apache/axis2/jaxws/sample/FaultsServiceTests.java)
    public void testFaultsService2(){
        //FaultyWebServiceFault_Exception exception = null;
        Exception exception = null;
        try{
            System.out.println("----------------------------------");
            System.out.println("test: " + getName());
            FaultsService service = new FaultsService();
            FaultsServicePortType proxy = service.getFaultsPort();
            BindingProvider p = (BindingProvider)proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,axisEndpoint);

            // the invoke will throw an exception, if the test is performed right
            int total = proxy.throwFault(2, "Complex", 2);  // "Complex" will cause service to throw ComplexFault_Exception
            
        }catch(BaseFault_Exception e){
            fail("Should not get BaseFault_Exception in this testcase");
        } catch (ComplexFault_Exception e) {
            exception = e;
        }
        
        System.out.println("----------------------------------");
        
        assertNotNull(exception);
        assertTrue(((ComplexFault_Exception)exception).getFaultInfo() instanceof ComplexFault);
        
    }

commonMethod: 
(startLine=28 endLine=38 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00542/modules/jaxws/test/org/apache/axis2/jaxws/sample/FaultsServiceTests.java)
    /**
     * Utility method to get the proxy
     * @return proxy
     */
    private FaultsServicePortType getProxy() {
        FaultsService service = new FaultsService();
        FaultsServicePortType proxy = service.getFaultsPort();
        BindingProvider p = (BindingProvider)proxy;
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,axisEndpoint);
        return proxy;
    }


, Instance #
frags: 
(startLine=24 endLine=35 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00541/modules/jaxws/test/org/apache/axis2/jaxws/sample/FaultsServiceTests.java)
        try{
            System.out.println("----------------------------------");
            System.out.println("test: " + getName());
            FaultsService service = new FaultsService();
            FaultsServicePortType proxy = service.getFaultsPort();
            BindingProvider p = (BindingProvider)proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,axisEndpoint);

            // the invoke will throw an exception, if the test is performed right
            int total = proxy.throwFault(2, "a", 2);
            
        }catch(BaseFault_Exception e){

(startLine=51 endLine=62 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00541/modules/jaxws/test/org/apache/axis2/jaxws/sample/FaultsServiceTests.java)
        try{
            System.out.println("----------------------------------");
            System.out.println("test: " + getName());
            FaultsService service = new FaultsService();
            FaultsServicePortType proxy = service.getFaultsPort();
            BindingProvider p = (BindingProvider)proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,axisEndpoint);

            // the invoke will throw an exception, if the test is performed right
            int total = proxy.throwFault(2, "Complex", 2);  // "Complex" will cause service to throw ComplexFault_Exception
            
        }catch(BaseFault_Exception e){

commonMethod: 
(startLine=28 endLine=38 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00542/modules/jaxws/test/org/apache/axis2/jaxws/sample/FaultsServiceTests.java)
    /**
     * Utility method to get the proxy
     * @return proxy
     */
    private FaultsServicePortType getProxy() {
        FaultsService service = new FaultsService();
        FaultsServicePortType proxy = service.getFaultsPort();
        BindingProvider p = (BindingProvider)proxy;
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,axisEndpoint);
        return proxy;
    }


, Instance #
frags: 
(startLine=93 endLine=115 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00551/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java)
    public Object get() throws InterruptedException, ExecutionException {
        // Wait for the response to come back
        latch.await();
        
        if (hasFault()) {
            throw new ExecutionException(fault);
        }
        if (response == null) {
            WebServiceException wse = new WebServiceException("null response");
            throw new ExecutionException(wse);
        }
        
        // TODO: Check the type of the object to make sure it corresponds with
        // the parameterized generic type.
        if (responseObj == null) {
            if (log.isDebugEnabled()) {
                log.debug("Demarshalling the async response message");
            }
            responseObj = getResponseValueObject(response);
        }

        return responseObj;
    }

(startLine=117 endLine=139 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00551/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java)
    public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
        // Wait for the response to come back
        latch.await(timeout, unit);
        
        if (hasFault()) {
            throw new ExecutionException(fault);
        }
        if (response == null) {
            WebServiceException wse = new WebServiceException("null response");
            throw new ExecutionException(wse);
        }
        
        // TODO: Check the type of the object to make sure it corresponds with
        // the parameterized generic type.
        if (responseObj == null) {
            if (log.isDebugEnabled()) {
                log.debug("Demarshalling the async response message");
            }
            responseObj = getResponseValueObject(response);
        }

        return responseObj;
    }

commonMethod: 
(startLine=182 endLine=189 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00552/modules/jaxws/src/org/apache/axis2/jaxws/ExceptionFactory.java)
	/**
	 * Create a WebServiceException using the information from a given Throwable instance
	 * @param throwable
	 * @return WebServiceException
	 */
	public static WebServiceException makeWebServiceException(Throwable throwable){
		return makeWebServiceException(null, throwable);
	}


, Instance #
frags: 
(startLine=93 endLine=115 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00551/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java)
    public Object get() throws InterruptedException, ExecutionException {
        // Wait for the response to come back
        latch.await();
        
        if (hasFault()) {
            throw new ExecutionException(fault);
        }
        if (response == null) {
            WebServiceException wse = new WebServiceException("null response");
            throw new ExecutionException(wse);
        }
        
        // TODO: Check the type of the object to make sure it corresponds with
        // the parameterized generic type.
        if (responseObj == null) {
            if (log.isDebugEnabled()) {
                log.debug("Demarshalling the async response message");
            }
            responseObj = getResponseValueObject(response);
        }

        return responseObj;
    }

(startLine=117 endLine=139 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00551/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java)
    public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
        // Wait for the response to come back
        latch.await(timeout, unit);
        
        if (hasFault()) {
            throw new ExecutionException(fault);
        }
        if (response == null) {
            WebServiceException wse = new WebServiceException("null response");
            throw new ExecutionException(wse);
        }
        
        // TODO: Check the type of the object to make sure it corresponds with
        // the parameterized generic type.
        if (responseObj == null) {
            if (log.isDebugEnabled()) {
                log.debug("Demarshalling the async response message");
            }
            responseObj = getResponseValueObject(response);
        }

        return responseObj;
    }

commonMethod: 
(startLine=173 endLine=180 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00552/modules/jaxws/src/org/apache/axis2/jaxws/ExceptionFactory.java)
	/**
	 * Make a WebServiceException with a given message
	 * @param message
	 * @return WebServiceException
	 */
	public static WebServiceException makeWebServiceException(String message) {
		return makeWebServiceException(message, null);  
	}


, Instance #
frags: 
(startLine=1675 endLine=1689 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00589/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapOperation.getSoapActionURI());
                    }
                    axisOperation.setSoapAction(soapOperation
                            .getSoapActionURI());
                }

(startLine=1692 endLine=1706 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00589/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapOperation.getSoapActionURI());
                    }
                    axisOperation.setSoapAction(soapOperation
                            .getSoapActionURI());
                }

commonMethod: 
(startLine=541 endLine=551 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00590/modules/kernel/src/org/apache/axis2/description/AxisService.java)
    /**
     * Maps an action (aka WSA action) to the given operation. This is used by
     * addressing based dispatching to figure out which operation it is that a
     * given message is for.
     *
     * @param action        the action key
     * @param axisOperation the operation to map to
     */
    public void mapActionToOperation(String action, AxisOperation axisOperation) {
        operationsAliasesMap.put(action, axisOperation);
    }


, Instance #
frags: 
(startLine=495 endLine=555 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00593/modules/kernel/src/org/apache/axis2/util/ObjectStateUtils.java)
        {
            // active flag
            out.writeBoolean(ACTIVE_OBJECT);

            int listSize = al.size();
            int savedListSize = 0;

            // expected list size
            out.writeInt(listSize);

            // setup an iterator for the list
            Iterator i = al.iterator();

            while (i.hasNext())
            {
                Object obj = i.next();
                String tmpClassName = obj.getClass().getName();

                try
                {
                    out.writeObject(obj);
                    savedListSize++;

                    // trace point
                    if (log.isTraceEnabled())
                    {
                        log.trace("ObjectStateUtils:writeArrayList(): "+desc+" ["+obj.getClass().getName()+"]");
                    }
                    //System.out.println("ObjectStateUtils:writeArrayList(): "+desc+" ["+obj.getClass().getName()+"]");

                }
                catch (Exception ex)
                {
                    // use this as a generic point for all exceptions

                    // trace point
                    log.warn("ObjectStateUtils:writeArrayList(): "+desc+" ["+obj.getClass().getName()+"]  ***Exception***  ["+ex.getClass().getName()+" : "+ex.getMessage()+"]  "+OBJ_SAVE_PROBLEM);
                    //System.out.println("ObjectStateUtils:writeArrayList(): "+desc+" ["+obj.getClass().getName()+"]  ***Exception***  ["+ex.getClass().getName()+" : "+ex.getMessage()+"]");

                    if (log.isTraceEnabled())
                    {
                        // informational
                        log.trace("ObjectStateUtils:writeArrayList(): "+desc+" ["+obj.getClass().getName()+"]  "+OBJ_SAVE_PROBLEM,ex);
                        //ex.printStackTrace();
                    }
                }
            }

            // put the end-of-marker in the stream
            out.writeObject(LAST_ENTRY);
            savedListSize++;

            out.writeInt(savedListSize);

            // trace point
            if (log.isTraceEnabled())
            {
                log.trace("ObjectStateUtils:writeArrayList(): List ["+desc+"]   members saved ["+savedListSize+"]");
            }
            //System.out.println("ObjectStateUtils:writeArrayList(): List ["+desc+"]   members saved ["+savedListSize+"]");
        }

(startLine=1249 endLine=1309 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00593/modules/kernel/src/org/apache/axis2/util/ObjectStateUtils.java)
        {
            // active flag
            out.writeBoolean(ACTIVE_OBJECT);

            int listSize = objlist.size();
            int savedListSize = 0;

            // expected list size
            out.writeInt(listSize);

            // setup an iterator for the list
            Iterator i = objlist.iterator();

            while (i.hasNext())
            {
                Object obj = i.next();
                String tmpClassName = obj.getClass().getName();

                try
                {
                    out.writeObject(obj);
                    savedListSize++;

                    // trace point
                    if (log.isTraceEnabled())
                    {
                        log.trace("ObjectStateUtils:writeLinkedList(): "+desc+" ["+obj.getClass().getName()+"]");
                    }
                    //System.out.println("ObjectStateUtils:writeLinkedList(): "+desc+" ["+obj.getClass().getName()+"]");

                }
                catch (Exception ex)
                {
                    // use this as a generic point for all exceptions

                    // trace point
                    log.warn("ObjectStateUtils:writeLinkedList(): "+desc+" ["+obj.getClass().getName()+"]  ***Exception***  ["+ex.getClass().getName()+" : "+ex.getMessage()+"] "+OBJ_SAVE_PROBLEM);
                    //System.out.println("ObjectStateUtils:writeLinkedList(): "+desc+" ["+obj.getClass().getName()+"]  ***Exception***  ["+ex.getClass().getName()+" : "+ex.getMessage()+"]");

                    if (log.isTraceEnabled())
                    {
                        // informational
                        log.trace("ObjectStateUtils:writeLinkedList(): "+desc+" ["+obj.getClass().getName()+"]  "+OBJ_SAVE_PROBLEM,ex);
                        //ex.printStackTrace();
                    }
                }
            }

            // put the end-of-marker in the stream
            out.writeObject(LAST_ENTRY);
            savedListSize++;

            out.writeInt(savedListSize);

            // trace point
            if (log.isTraceEnabled())
            {
                log.trace("ObjectStateUtils:writeLinkedList(): List ["+desc+"]   members saved ["+savedListSize+"]");
            }
            //System.out.println("ObjectStateUtils:writeLinkedList(): List ["+desc+"]   members saved ["+savedListSize+"]");
        }

commonMethod: 
(startLine=2371 endLine=2417 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00594/modules/kernel/src/org/apache/axis2/util/ObjectStateUtils.java)
    /**
     * Trace the NotSerializable exception for the specified object
     * if this is the first time that the specified
     * object has caused the exception.
     * 
     * @param obj         The object being saved or restored
     * @param nse         The exception object with the details of the error
     * @param objDesc     The description of the object, eg, like the field name where it is being used
     * @param methodName  The method name which encountered the exception
     * @param desc        Text to be used for tracing
     */
    public static void traceNotSerializable(Object obj, NotSerializableException nse, String objDesc, String methodName, String desc)
    {
        if (log.isTraceEnabled() == false)
        {
            // if no tracing is being done, there's nothing to do
            // exit quickly
            return;
        }

        if (obj != null)
        {
            String objName = obj.getClass().getName();

            if (NotSerializableList.get(objName) == null)
            {
                // set up some information about the exception
                // for now, just use an initial counter, which we aren't doing much with
                // but takes less space than the original object that caused the exception
                // future: consider using a trace information object that would
                //         contain a count of the times that a particular class
                //         caused the exception, the class name of that class,
                //         and the stack trace for the first time - this information
                //         could then be accessed from a utility
                Integer counter = new Integer(1);

                // add to table
                NotSerializableList.put(objName,counter);

                // trace point
                log.trace("ObjectStateUtils: ***NotSerializableException*** ["+nse.getMessage()+"] in method ["+methodName+"] for object ["+objName+"]  associated with ["+objDesc+"].  "+desc);
                //System.out.println("ObjectStateUtils: ***NotSerializableException*** ["+nse.getMessage()+"] in method ["+methodName+"] for object ["+objName+"]  associated with ["+objDesc+"].  "+desc);
            }

        }
        
    }


, Instance #
frags: 
(startLine=92 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00599/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java)
    public Object get() throws InterruptedException, ExecutionException {
        // Wait for the response to come back
        latch.await();
        
        if (hasFault()) {
            throw new ExecutionException(ExceptionFactory.makeWebServiceException(fault));
        }
        if (response == null) {
            throw new ExecutionException(ExceptionFactory.makeWebServiceException("null response"));
        }
        
        // TODO: Check the type of the object to make sure it corresponds with
        // the parameterized generic type.
        if (responseObj == null) {
            if (log.isDebugEnabled()) {
                log.debug("Demarshalling the async response message");
            }
            responseObj = getResponseValueObject(response);
        }

        return responseObj;
    }

(startLine=115 endLine=136 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00599/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java)
    public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
        // Wait for the response to come back
        latch.await(timeout, unit);
        
        if (hasFault()) {
            throw new ExecutionException(ExceptionFactory.makeWebServiceException(fault));
        }
        if (response == null) {
            throw new ExecutionException(ExceptionFactory.makeWebServiceException("null response"));
        }
        
        // TODO: Check the type of the object to make sure it corresponds with
        // the parameterized generic type.
        if (responseObj == null) {
            if (log.isDebugEnabled()) {
                log.debug("Demarshalling the async response message");
            }
            responseObj = getResponseValueObject(response);
        }

        return responseObj;
    }

commonMethod: 
(startLine=167 endLine=198 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00600/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncResponse.java)
    private Object processAsyncResponse(MessageContext ctx) throws ExecutionException {
        if (hasFault()) {
            throw new ExecutionException(ExceptionFactory.makeWebServiceException(fault));
        }
        if (ctx == null) {
            throw new ExecutionException(ExceptionFactory.makeWebServiceException("null response"));
        }

        // TODO: Check the type of the object to make sure it corresponds with
        // the parameterized generic type.
        Object obj = null;
        try {
            if (debug) {
                log.debug("Unmarshalling the async response message.");
             }
             obj = getResponseValueObject(ctx);
        }
        catch (Throwable t) {
            if (debug) {
                log.debug("An error occurred while processing the response");
            }
            throw new ExecutionException(ExceptionFactory.makeWebServiceException(t));
        }

        if (debug && obj != null) {
            log.debug("Unmarshalled response object of type: " + obj.getClass());
        }
        
        initResponseContext();
        
        return obj;
    }


, Instance #
frags: 
(startLine=119 endLine=132 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00609/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
                if (service != null) {
                    final String ip = HttpUtils.getIpAddress();
                    EntityTemplate entity = new EntityTemplate(new ContentProducer() {

                        public void writeTo(final OutputStream outstream) throws IOException {
                            service.printWSDL2(outstream, ip, servicePath);
                        }

                    });
                    entity.setContentType("text/xml");
                    entity.setChunked(chunked);
                    response.setEntity(entity);
                    return;
                }

(startLine=138 endLine=151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00609/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
                if (service != null) {
                    final String ip = HttpUtils.getIpAddress();
                    EntityTemplate entity = new EntityTemplate(new ContentProducer() {

                        public void writeTo(final OutputStream outstream) throws IOException {
                            service.printWSDL(outstream, ip, servicePath);
                        }

                    });
                    entity.setContentType("text/xml");
                    entity.setChunked(chunked);
                    response.setEntity(entity);
                    return;
                }

commonMethod: 
(startLine=267 endLine=278 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00610/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
    public String getHostAddress(HttpRequest request) throws java.net.SocketException{
        try {
            Header hostHeader = request.getFirstHeader("host");
            if (hostHeader!=null){
                String host = hostHeader.getValue();
                return new URI("http://"+host).getHost();
            }
        } catch (Exception e){
            
        }
        return HttpUtils.getIpAddress();
    }	


, Instance #
frags: 
(startLine=115 endLine=133 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00609/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
            if (uri.endsWith("?wsdl2")) {
                String serviceName = uri.substring(uri.lastIndexOf("/") + 1, uri.length() - 6);
                HashMap services = configurationContext.getAxisConfiguration().getServices();
                final AxisService service = (AxisService) services.get(serviceName);
                if (service != null) {
                    final String ip = HttpUtils.getIpAddress();
                    EntityTemplate entity = new EntityTemplate(new ContentProducer() {

                        public void writeTo(final OutputStream outstream) throws IOException {
                            service.printWSDL2(outstream, ip, servicePath);
                        }

                    });
                    entity.setContentType("text/xml");
                    entity.setChunked(chunked);
                    response.setEntity(entity);
                    return;
                }
            }

(startLine=134 endLine=152 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00609/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
            if (uri.endsWith("?wsdl")) {
                String serviceName = uri.substring(uri.lastIndexOf("/") + 1, uri.length() - 5);
                HashMap services = configurationContext.getAxisConfiguration().getServices();
                final AxisService service = (AxisService) services.get(serviceName);
                if (service != null) {
                    final String ip = HttpUtils.getIpAddress();
                    EntityTemplate entity = new EntityTemplate(new ContentProducer() {

                        public void writeTo(final OutputStream outstream) throws IOException {
                            service.printWSDL(outstream, ip, servicePath);
                        }

                    });
                    entity.setContentType("text/xml");
                    entity.setChunked(chunked);
                    response.setEntity(entity);
                    return;
                }
            }

commonMethod: 
(startLine=267 endLine=278 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00610/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
    public String getHostAddress(HttpRequest request) throws java.net.SocketException{
        try {
            Header hostHeader = request.getFirstHeader("host");
            if (hostHeader!=null){
                String host = hostHeader.getValue();
                return new URI("http://"+host).getHost();
            }
        } catch (Exception e){
            
        }
        return HttpUtils.getIpAddress();
    }	


, Instance #
frags: 
(startLine=250 endLine=262 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00616/modules/kernel/src/org/apache/axis2/client/Options.java)
    public TransportListener getListener() {
        if (needsToBeReconciled) {
            if (log.isWarnEnabled()) {
                log.warn(myClassName+":getListener(): ****WARNING**** Options.activate(configurationContext) needs to be invoked.");
            }
            //System.out.println(myClassName+":getListener(): ****WARNING**** Options.activate(configurationContext) needs to be invoked.");
        }

        if (listener == null && parent != null) {
            return parent.getListener();
        }
        return listener;
    }

(startLine=269 endLine=281 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00616/modules/kernel/src/org/apache/axis2/client/Options.java)
    public TransportInDescription getTransportIn() {
        if (needsToBeReconciled) {
            if (log.isWarnEnabled()) {
                log.warn(myClassName+":getTransportIn(): ****WARNING**** Options.activate(configurationContext) needs to be invoked.");
            }
            //System.out.println(myClassName+":getTransportIn(): ****WARNING**** Options.activate(configurationContext) needs to be invoked.");
        }

        if (transportIn == null && parent != null) {
            return parent.getTransportIn();
        }
        return transportIn;
    }

(startLine=449 endLine=462 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00616/modules/kernel/src/org/apache/axis2/client/Options.java)
    public TransportOutDescription getTransportOut() {
        if (needsToBeReconciled) {
            if (log.isWarnEnabled()) {
                log.warn(myClassName+":getTransportOut(): ****WARNING**** Options.activate(configurationContext) needs to be invoked.");
            }
            //System.out.println(myClassName+":getTransportOut(): ****WARNING**** Options.activate(configurationContext) needs to be invoked.");
        }

        if (transportOut == null && parent != null) {
            return parent.getTransportOut();
        }

        return transportOut;
    }

commonMethod: 
(startLine=1757 endLine=1768 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00617/modules/kernel/src/org/apache/axis2/client/Options.java)
    /**
     * Trace a warning message, if needed, indicating that this 
     * object needs to be activated before accessing certain fields.
     * 
     * @param methodname The method where the warning occurs
     */
    private void checkActivateWarning(String methodname)
    {
        if (needsToBeReconciled) {
           log.warn(logCorrelationIDString+":"+methodname+"(): ****WARNING**** "+myClassName+".activate(configurationContext) needs to be invoked.");
        }
    }


, Instance #
frags: 
(startLine=1693 endLine=1713 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPOperation) {
                SOAPOperation soapOperation = (SOAPOperation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAP12Header) {

(startLine=1673 endLine=1693 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Operation) {
                SOAP12Operation soapOperation = (SOAP12Operation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAPOperation) {

commonMethod: 
(startLine=122 endLine=145 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/util/PolicyUtil.java)
    public static PolicyComponent getPolicyComponent(Element element) {

        String xmlString;
        ByteArrayInputStream bais;

        if (Constants.URI_POLICY_NS.equals(element.getNamespaceURI())) {

            if (Constants.ELEM_POLICY.equals(element.getLocalName())) {
                xmlString = DOM2Writer.nodeToString(element);
                bais = new ByteArrayInputStream(xmlString.getBytes());

                return PolicyEngine.getPolicy(bais);

            } else if (Constants.ELEM_POLICY_REF.equals(element.getLocalName())) {
                xmlString = DOM2Writer.nodeToString(element);
                bais = new ByteArrayInputStream(xmlString.getBytes());

                return PolicyEngine.getPolicyReferene(bais);
            }
        }

        throw new IllegalArgumentException(
                "Agrument is neither a <wsp:Policy> nor a <wsp:PolicyReference> element");
    }


, Instance #
frags: 
(startLine=1693 endLine=1713 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPOperation) {
                SOAPOperation soapOperation = (SOAPOperation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAP12Header) {

(startLine=1673 endLine=1693 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Operation) {
                SOAP12Operation soapOperation = (SOAP12Operation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAPOperation) {

commonMethod: 
(startLine=115 endLine=169 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/addressing/AddressingHelper.java)
    /**
     * Set the value of an existing unlocked Parameter representing Anonymous or add a new one if one
     * does not exist. If a locked Parameter of the same name already exists the method will trace and
     * return.
     *
     * @param axisOperation
     * @param value
     */
    public static void setAnonymousParameterValue(AxisOperation axisOperation, String value) {
        if (value == null) {
            if (isDebugEnabled) {
                log.debug("setAnonymousParameterValue: value passed in is null. return");
            }
            return;
        }

        Parameter param = axisOperation.getParameter(AddressingConstants.WSAW_ANONYMOUS_PARAMETER_NAME);
        // If an existing parameter exists
        if (param != null) {
            if (isDebugEnabled) {
                log.debug("setAnonymousParameterValue: Parameter already exists");
            }
            // and is not locked
            if (!param.isLocked()) {
                if (isDebugEnabled) {
                    log.debug("setAnonymousParameterValue: Parameter not locked. Setting value: " + value);
                }
                // set the value
                param.setValue(value);
            }
        } else {
            // otherwise, if no Parameter exists
            if (isDebugEnabled) {
                log.debug("setAnonymousParameterValue: Parameter does not exist");
            }
            // Create new Parameter with correct name/value
            param = new Parameter();
            param.setName(AddressingConstants.WSAW_ANONYMOUS_PARAMETER_NAME);
            param.setValue(value);
            try {
                if (isDebugEnabled) {
                    log.debug("setAnonymousParameterValue: Adding parameter with value: " + value);
                }
                // and add it to the AxisOperation object
                axisOperation.addParameter(param);
            } catch (AxisFault af) {
                // This should not happen. AxisFault is only ever thrown when a locked Parameter
                // of the same name already exists and this should be dealt with by the outer
                // if statement.
                if (isDebugEnabled) {
                    log.debug("setAnonymousParameterValue: addParameter failed: " + af.getMessage());
                }
            }
        }
    }


, Instance #
frags: 
(startLine=1693 endLine=1713 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPOperation) {
                SOAPOperation soapOperation = (SOAPOperation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAP12Header) {

(startLine=1673 endLine=1693 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Operation) {
                SOAP12Operation soapOperation = (SOAP12Operation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAPOperation) {

commonMethod: 
(startLine=2344 endLine=2413 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
    /**
     * Add a policy
     *
     * @param description
     * @param originOfExtensibilityElements
     * @param policy
     */
    private void addPolicy(AxisDescription description,
            String originOfExtensibilityElements, Policy policy) {

        if (description instanceof AxisService) {
            // wsdl:service
            if (SERVICE.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.SERVICE_POLICY, policy);

                // wsdl:service -> wsdl:port
            } else if (PORT.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.PORT_POLICY, policy);

                // wsdl:binding
            } else if (BINDING.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.BINDING_POLICY, policy);

            }

            // TODO wsdl:portType ?

        } else if (description instanceof AxisOperation) {

            // wsdl:portType -> wsdl:operation
            if (PORT_TYPE_OPERATION.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.OPERATION_POLICY, policy);

                // wsdl:binding -> wsdl:operation
            } else {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.BINDING_OPERATION_POLICY, policy);
            }

        } else {

            // wsdl:portType -> wsdl:operation -> wsdl:input
            if (PORT_TYPE_OPERATION_INPUT.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.INPUT_POLICY, policy);

                // wsdl:binding -> wsdl:operation -> wsdl:input
            } else if (BINDING_OPERATION_INPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.BINDING_INPUT_POLICY, policy);

                // wsdl:portType -> wsdl:operation -> wsdl:put
            } else if (PORT_TYPE_OPERATION_OUTPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.OUTPUT_POLICY, policy);

                // wsdl:binding -> wsdl:operation -> wsdl:output
            } else if (BINDING_OPERATION_OUTPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.BINDING_OUTPUT_POLICY, policy);
            }
        }
    }


, Instance #
frags: 
(startLine=1693 endLine=1713 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPOperation) {
                SOAPOperation soapOperation = (SOAPOperation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAP12Header) {

(startLine=1673 endLine=1693 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Operation) {
                SOAP12Operation soapOperation = (SOAP12Operation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAPOperation) {

commonMethod: 
(startLine=2415 endLine=2486 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
    /**
     * Add a policy reference
     *
     * @param description
     * @param originOfExtensibilityElements
     * @param policyRefElement
     */
    private void addPolicyRef(AxisDescription description,
            String originOfExtensibilityElements,
            PolicyReference policyRefElement) {

        if (description instanceof AxisService) {
            // wsdl:service
            if (SERVICE.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.SERVICE_POLICY, policyRefElement);

                // wsdl:service -> wsdl:port
            } else if (PORT.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.PORT_POLICY, policyRefElement);

                // wsdl:binding
            } else if (BINDING.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.BINDING_POLICY, policyRefElement);
            }

            // TODO policy for wsdl:portType ?

        } else if (description instanceof AxisOperation) {

            // wsdl:portType -> wsdl:operation
            if (PORT_TYPE_OPERATION.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.OPERATION_POLICY, policyRefElement);

                // wsdl:binding -> wsdl:operation
            } else {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.BINDING_POLICY, policyRefElement);
            }

        } else {

            // wsdl:portType -> wsdl:operation -> wsdl:input
            if (PORT_TYPE_OPERATION_INPUT.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.INPUT_POLICY, policyRefElement);

                // wsdl:binding -> wsdl:operation -> wsdl:input
            } else if (BINDING_OPERATION_INPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.BINDING_INPUT_POLICY, policyRefElement);

                // wsdl:portType -> wsdl:operation -> wsdl:put
            } else if (PORT_TYPE_OPERATION_OUTPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.OUTPUT_POLICY, policyRefElement);

                // wsdl:binding -> wsdl:operation -> wsdl:output
            } else if (BINDING_OPERATION_OUTPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.BINDING_OUTPUT_POLICY, policyRefElement);
            }

            // TODO Faults ..
        }
    }


, Instance #
frags: 
(startLine=1693 endLine=1713 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPOperation) {
                SOAPOperation soapOperation = (SOAPOperation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAP12Header) {

(startLine=1673 endLine=1693 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Operation) {
                SOAP12Operation soapOperation = (SOAP12Operation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAPOperation) {

commonMethod: 
(startLine=209 endLine=214 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/AxisService.java)
    public void setWSAddressingFlag(String ar) {
        wsaddressingFlag = ar;
        if (wsaddressingFlag == null) {
            wsaddressingFlag = AddressingConstants.ADDRESSING_UNSPECIFIED;
        }
    }


, Instance #
frags: 
(startLine=1693 endLine=1713 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPOperation) {
                SOAPOperation soapOperation = (SOAPOperation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAP12Header) {

(startLine=1673 endLine=1693 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Operation) {
                SOAP12Operation soapOperation = (SOAP12Operation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAPOperation) {

commonMethod: 
(startLine=52 endLine=54 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/AxisBinding.java)
    public void setProperty(String name, Object value) {
        options.put(name, value);
    }


, Instance #
frags: 
(startLine=1693 endLine=1713 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPOperation) {
                SOAPOperation soapOperation = (SOAPOperation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAP12Header) {

(startLine=1673 endLine=1693 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Operation) {
                SOAP12Operation soapOperation = (SOAP12Operation) wsdl4jElement;
                if (description instanceof AxisOperation) {
                    AxisOperation axisOperation = (AxisOperation) description;
                    
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: AxisOperation "+axisOperation);
                    }
                    if (soapOperation.getStyle() != null) {
                        axisOperation.setStyle(soapOperation.getStyle());
                    }
                    String soapActionURI = soapOperation.getSoapActionURI();
                    if(isTraceEnabled){
                        log.trace("copyExtensibleElements:: setSoapAction "+soapActionURI);
                    }
                    axisOperation.setSoapAction(soapActionURI);
                    if(soapActionURI != null){
                        axisService.mapActionToOperation(soapActionURI, axisOperation);
                    }
                }
            } else if (wsdl4jElement instanceof SOAPOperation) {

commonMethod: 
(startLine=67 endLine=69 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/AxisBindingOperation.java)
    public void setProperty(String name, Object value) {
        options.put(name, value);
    }


, Instance #
frags: 
(startLine=1781 endLine=1791 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPBinding) {
                SOAPBinding soapBinding = (SOAPBinding) wsdl4jElement;
                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            } else if (wsdl4jElement instanceof SOAP12Binding) {

(startLine=1791 endLine=1802 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Binding) {
                SOAP12Binding soapBinding = (SOAP12Binding) wsdl4jElement;

                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            }

commonMethod: 
(startLine=122 endLine=145 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/util/PolicyUtil.java)
    public static PolicyComponent getPolicyComponent(Element element) {

        String xmlString;
        ByteArrayInputStream bais;

        if (Constants.URI_POLICY_NS.equals(element.getNamespaceURI())) {

            if (Constants.ELEM_POLICY.equals(element.getLocalName())) {
                xmlString = DOM2Writer.nodeToString(element);
                bais = new ByteArrayInputStream(xmlString.getBytes());

                return PolicyEngine.getPolicy(bais);

            } else if (Constants.ELEM_POLICY_REF.equals(element.getLocalName())) {
                xmlString = DOM2Writer.nodeToString(element);
                bais = new ByteArrayInputStream(xmlString.getBytes());

                return PolicyEngine.getPolicyReferene(bais);
            }
        }

        throw new IllegalArgumentException(
                "Agrument is neither a <wsp:Policy> nor a <wsp:PolicyReference> element");
    }


, Instance #
frags: 
(startLine=1781 endLine=1791 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPBinding) {
                SOAPBinding soapBinding = (SOAPBinding) wsdl4jElement;
                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            } else if (wsdl4jElement instanceof SOAP12Binding) {

(startLine=1791 endLine=1802 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Binding) {
                SOAP12Binding soapBinding = (SOAP12Binding) wsdl4jElement;

                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            }

commonMethod: 
(startLine=115 endLine=169 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/addressing/AddressingHelper.java)
    /**
     * Set the value of an existing unlocked Parameter representing Anonymous or add a new one if one
     * does not exist. If a locked Parameter of the same name already exists the method will trace and
     * return.
     *
     * @param axisOperation
     * @param value
     */
    public static void setAnonymousParameterValue(AxisOperation axisOperation, String value) {
        if (value == null) {
            if (isDebugEnabled) {
                log.debug("setAnonymousParameterValue: value passed in is null. return");
            }
            return;
        }

        Parameter param = axisOperation.getParameter(AddressingConstants.WSAW_ANONYMOUS_PARAMETER_NAME);
        // If an existing parameter exists
        if (param != null) {
            if (isDebugEnabled) {
                log.debug("setAnonymousParameterValue: Parameter already exists");
            }
            // and is not locked
            if (!param.isLocked()) {
                if (isDebugEnabled) {
                    log.debug("setAnonymousParameterValue: Parameter not locked. Setting value: " + value);
                }
                // set the value
                param.setValue(value);
            }
        } else {
            // otherwise, if no Parameter exists
            if (isDebugEnabled) {
                log.debug("setAnonymousParameterValue: Parameter does not exist");
            }
            // Create new Parameter with correct name/value
            param = new Parameter();
            param.setName(AddressingConstants.WSAW_ANONYMOUS_PARAMETER_NAME);
            param.setValue(value);
            try {
                if (isDebugEnabled) {
                    log.debug("setAnonymousParameterValue: Adding parameter with value: " + value);
                }
                // and add it to the AxisOperation object
                axisOperation.addParameter(param);
            } catch (AxisFault af) {
                // This should not happen. AxisFault is only ever thrown when a locked Parameter
                // of the same name already exists and this should be dealt with by the outer
                // if statement.
                if (isDebugEnabled) {
                    log.debug("setAnonymousParameterValue: addParameter failed: " + af.getMessage());
                }
            }
        }
    }


, Instance #
frags: 
(startLine=1781 endLine=1791 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPBinding) {
                SOAPBinding soapBinding = (SOAPBinding) wsdl4jElement;
                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            } else if (wsdl4jElement instanceof SOAP12Binding) {

(startLine=1791 endLine=1802 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Binding) {
                SOAP12Binding soapBinding = (SOAP12Binding) wsdl4jElement;

                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            }

commonMethod: 
(startLine=1872 endLine=1874 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/AxisService.java)
    public void setEndpointURL(String endpointURL) {
        this.endpointURL = endpointURL;
    }


, Instance #
frags: 
(startLine=1781 endLine=1791 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPBinding) {
                SOAPBinding soapBinding = (SOAPBinding) wsdl4jElement;
                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            } else if (wsdl4jElement instanceof SOAP12Binding) {

(startLine=1791 endLine=1802 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Binding) {
                SOAP12Binding soapBinding = (SOAP12Binding) wsdl4jElement;

                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            }

commonMethod: 
(startLine=2344 endLine=2413 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
    /**
     * Add a policy
     *
     * @param description
     * @param originOfExtensibilityElements
     * @param policy
     */
    private void addPolicy(AxisDescription description,
            String originOfExtensibilityElements, Policy policy) {

        if (description instanceof AxisService) {
            // wsdl:service
            if (SERVICE.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.SERVICE_POLICY, policy);

                // wsdl:service -> wsdl:port
            } else if (PORT.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.PORT_POLICY, policy);

                // wsdl:binding
            } else if (BINDING.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.BINDING_POLICY, policy);

            }

            // TODO wsdl:portType ?

        } else if (description instanceof AxisOperation) {

            // wsdl:portType -> wsdl:operation
            if (PORT_TYPE_OPERATION.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.OPERATION_POLICY, policy);

                // wsdl:binding -> wsdl:operation
            } else {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.BINDING_OPERATION_POLICY, policy);
            }

        } else {

            // wsdl:portType -> wsdl:operation -> wsdl:input
            if (PORT_TYPE_OPERATION_INPUT.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.INPUT_POLICY, policy);

                // wsdl:binding -> wsdl:operation -> wsdl:input
            } else if (BINDING_OPERATION_INPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.BINDING_INPUT_POLICY, policy);

                // wsdl:portType -> wsdl:operation -> wsdl:put
            } else if (PORT_TYPE_OPERATION_OUTPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.OUTPUT_POLICY, policy);

                // wsdl:binding -> wsdl:operation -> wsdl:output
            } else if (BINDING_OPERATION_OUTPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyElement(
                        PolicyInclude.BINDING_OUTPUT_POLICY, policy);
            }
        }
    }


, Instance #
frags: 
(startLine=1781 endLine=1791 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPBinding) {
                SOAPBinding soapBinding = (SOAPBinding) wsdl4jElement;
                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            } else if (wsdl4jElement instanceof SOAP12Binding) {

(startLine=1791 endLine=1802 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Binding) {
                SOAP12Binding soapBinding = (SOAP12Binding) wsdl4jElement;

                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            }

commonMethod: 
(startLine=83 endLine=85 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/AxisBinding.java)
    public void setType(String type) {
        this.type = type;
    }


, Instance #
frags: 
(startLine=1781 endLine=1791 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPBinding) {
                SOAPBinding soapBinding = (SOAPBinding) wsdl4jElement;
                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            } else if (wsdl4jElement instanceof SOAP12Binding) {

(startLine=1791 endLine=1802 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Binding) {
                SOAP12Binding soapBinding = (SOAP12Binding) wsdl4jElement;

                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            }

commonMethod: 
(startLine=2415 endLine=2486 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
    /**
     * Add a policy reference
     *
     * @param description
     * @param originOfExtensibilityElements
     * @param policyRefElement
     */
    private void addPolicyRef(AxisDescription description,
            String originOfExtensibilityElements,
            PolicyReference policyRefElement) {

        if (description instanceof AxisService) {
            // wsdl:service
            if (SERVICE.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.SERVICE_POLICY, policyRefElement);

                // wsdl:service -> wsdl:port
            } else if (PORT.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.PORT_POLICY, policyRefElement);

                // wsdl:binding
            } else if (BINDING.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.BINDING_POLICY, policyRefElement);
            }

            // TODO policy for wsdl:portType ?

        } else if (description instanceof AxisOperation) {

            // wsdl:portType -> wsdl:operation
            if (PORT_TYPE_OPERATION.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.OPERATION_POLICY, policyRefElement);

                // wsdl:binding -> wsdl:operation
            } else {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.BINDING_POLICY, policyRefElement);
            }

        } else {

            // wsdl:portType -> wsdl:operation -> wsdl:input
            if (PORT_TYPE_OPERATION_INPUT.equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.INPUT_POLICY, policyRefElement);

                // wsdl:binding -> wsdl:operation -> wsdl:input
            } else if (BINDING_OPERATION_INPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.BINDING_INPUT_POLICY, policyRefElement);

                // wsdl:portType -> wsdl:operation -> wsdl:put
            } else if (PORT_TYPE_OPERATION_OUTPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.OUTPUT_POLICY, policyRefElement);

                // wsdl:binding -> wsdl:operation -> wsdl:output
            } else if (BINDING_OPERATION_OUTPUT
                    .equals(originOfExtensibilityElements)) {
                description.getPolicyInclude().addPolicyRefElement(
                        PolicyInclude.BINDING_OUTPUT_POLICY, policyRefElement);
            }

            // TODO Faults ..
        }
    }


, Instance #
frags: 
(startLine=1781 endLine=1791 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPBinding) {
                SOAPBinding soapBinding = (SOAPBinding) wsdl4jElement;
                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            } else if (wsdl4jElement instanceof SOAP12Binding) {

(startLine=1791 endLine=1802 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Binding) {
                SOAP12Binding soapBinding = (SOAP12Binding) wsdl4jElement;

                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            }

commonMethod: 
(startLine=209 endLine=214 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/AxisService.java)
    public void setWSAddressingFlag(String ar) {
        wsaddressingFlag = ar;
        if (wsaddressingFlag == null) {
            wsaddressingFlag = AddressingConstants.ADDRESSING_UNSPECIFIED;
        }
    }


, Instance #
frags: 
(startLine=1781 endLine=1791 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPBinding) {
                SOAPBinding soapBinding = (SOAPBinding) wsdl4jElement;
                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            } else if (wsdl4jElement instanceof SOAP12Binding) {

(startLine=1791 endLine=1802 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Binding) {
                SOAP12Binding soapBinding = (SOAP12Binding) wsdl4jElement;

                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            }

commonMethod: 
(startLine=52 endLine=54 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/AxisBinding.java)
    public void setProperty(String name, Object value) {
        options.put(name, value);
    }


, Instance #
frags: 
(startLine=1781 endLine=1791 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAPBinding) {
                SOAPBinding soapBinding = (SOAPBinding) wsdl4jElement;
                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            } else if (wsdl4jElement instanceof SOAP12Binding) {

(startLine=1791 endLine=1802 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00624/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (wsdl4jElement instanceof SOAP12Binding) {
                SOAP12Binding soapBinding = (SOAP12Binding) wsdl4jElement;

                style = soapBinding.getStyle();
                String wsdl11SOAPNSURI = soapBinding.getElementType()
                        .getNamespaceURI();
                if (org.apache.axis2.namespace.Constants.URI_WSDL11_SOAP.equals(wsdl11SOAPNSURI)) {
                    axisService.setSoapNsUri(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                } else {
                    axisService.setSoapNsUri(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
                }
            }

commonMethod: 
(startLine=67 endLine=69 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00625/modules/kernel/src/org/apache/axis2/description/AxisBindingOperation.java)
    public void setProperty(String name, Object value) {
        options.put(name, value);
    }


, Instance #
frags: 
(startLine=82 endLine=103 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00633/modules/jaxws/src/org/apache/axis2/jaxws/client/async/CallbackFuture.java)
    public void onComplete(AsyncResult result) {
        if (debug) {
            log.debug("JAX-WS received the async response");
        }
        
        MessageContext response = null;
        try {
            response = AsyncUtils.createMessageContext(result);
        } catch (WebServiceException e) {
            cft.setError(e);
            if (debug) {
                log.debug("An error occured while processing the async response.  " + e.getMessage());
            }
        }
        
        if (response == null) {
            // TODO: throw an exception
        }
        
        cft.setMessageContext(response);
        execute();
    }

(startLine=40 endLine=61 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00633/modules/jaxws/src/org/apache/axis2/jaxws/client/async/PollingFuture.java)
    public void onComplete(AsyncResult result) {
        boolean debug = log.isDebugEnabled();
        if (debug) {
            log.debug("JAX-WS async response listener received the response");
        }
        
        MessageContext responseMsgCtx = null;
        try {
            responseMsgCtx = AsyncUtils.createMessageContext(result);
        } catch (WebServiceException e) {
            response.onError(e);
            if (debug) {
                log.debug("An error occured while processing the async response.  " + e.getMessage());
            }
        }
        
        if (response == null) {
            // TODO: throw an exception
        }
        
        response.onComplete(responseMsgCtx);
    }

commonMethod: 
(startLine=36 endLine=38 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00634/modules/jaxws/src/org/apache/axis2/jaxws/client/async/AsyncUtils.java)
    public static MessageContext createJAXWSMessageContext(AsyncResult result) throws WebServiceException {
        return AsyncUtils.createJAXWSMessageContext(result.getResponseMessageContext());
    }


, Instance #
frags: 
(startLine=572 endLine=585 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00643/modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java)
                            } catch (Exception e) {
                                if (log.isInfoEnabled()) {
                                    StringWriter sw = new StringWriter();
                                    PrintWriter pw = new PrintWriter(sw);
                                    e.printStackTrace(pw);
                                    log.info(Messages.getMessage(
                                            DeploymentErrorMsgs.INVALID_SERVICE,
                                            currentArchiveFile.getName(),
                                            sw.getBuffer().toString()));
                                }
                                PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
                                e.printStackTrace(error_ptintWriter);
                                serviceStatus = "Error:\n" + errorWriter.toString();
                            } catch (Throwable t) {

(startLine=585 endLine=598 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00643/modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java)
                            } catch (Throwable t) {
                                if (log.isInfoEnabled()) {
                                    StringWriter sw = new StringWriter();
                                    PrintWriter pw = new PrintWriter(sw);
                                    t.printStackTrace(pw);
                                    log.info(Messages.getMessage(
                                            DeploymentErrorMsgs.INVALID_SERVICE,
                                            currentArchiveFile.getName(),
                                            sw.getBuffer().toString()));
                                }
                                PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
                                t.printStackTrace(error_ptintWriter);
                                serviceStatus = "Error:\n" + errorWriter.toString();
                            } finally {

(startLine=644 endLine=657 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00643/modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java)
                            } catch (Throwable t) {
                                if (log.isInfoEnabled()) {
                                    StringWriter sw = new StringWriter();
                                    PrintWriter pw = new PrintWriter(sw);
                                    t.printStackTrace(pw);
                                    log.error(Messages.getMessage(DeploymentErrorMsgs.INVALID_MODULE,
                                            currentArchiveFile.getName(),
                                            t.getMessage()),
                                            t);
                                }
                                PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
                                t.printStackTrace(error_ptintWriter);
                                moduleStatus = "Error:\n" + errorWriter.toString();
                            } finally {

commonMethod: 
(startLine=53 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00644/modules/kernel/src/org/apache/axis2/deployment/ModuleDeployer.java)
    public void deploy(DeploymentFileData deploymentFileData) {
        ArchiveReader archiveReader = new ArchiveReader();
        String moduleStatus = "";
        StringWriter errorWriter = new StringWriter();
        boolean explodedDir = deploymentFileData.getFile().isDirectory();
        try {
            deploymentFileData.setClassLoader(explodedDir,
                    axisConfig.getModuleClassLoader());
            AxisModule metaData = new AxisModule();
            metaData.setModuleClassLoader(deploymentFileData.getClassLoader());
            metaData.setParent(axisConfig);
            archiveReader.readModuleArchive(deploymentFileData, metaData, explodedDir,
                    axisConfig);
            metaData.setFileName(deploymentFileData.getFile().toURL());
            DeploymentEngine.addNewModule(metaData, axisConfig);
            log.info(Messages.getMessage(DeploymentErrorMsgs.DEPLOYING_MODULE,
                    metaData.getName().getLocalPart()));
        } catch (DeploymentException e) {
            log.error(Messages.getMessage(DeploymentErrorMsgs.INVALID_MODULE,
                    deploymentFileData.getName(),
                    e.getMessage()),
                    e);
            PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
            e.printStackTrace(error_ptintWriter);
            moduleStatus = "Error:\n" + errorWriter.toString();
        } catch (AxisFault axisFault) {
            log.error(Messages.getMessage(DeploymentErrorMsgs.INVALID_MODULE,
                    deploymentFileData.getName(),
                    axisFault.getMessage()),
                    axisFault);
            PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
            axisFault.printStackTrace(error_ptintWriter);
            moduleStatus = "Error:\n" + errorWriter.toString();
        } catch (MalformedURLException e) {
            log.error(Messages.getMessage(DeploymentErrorMsgs.INVALID_MODULE,
                    deploymentFileData.getName(),
                    e.getMessage()),
                    e);
            PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
            e.printStackTrace(error_ptintWriter);
            moduleStatus = "Error:\n" + errorWriter.toString();
        } catch (Throwable t) {
            if (log.isInfoEnabled()) {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                t.printStackTrace(pw);
                log.error(Messages.getMessage(DeploymentErrorMsgs.INVALID_MODULE,
                        deploymentFileData.getName(),
                        t.getMessage()),
                        t);
            }
            PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
            t.printStackTrace(error_ptintWriter);
            moduleStatus = "Error:\n" + errorWriter.toString();
        } finally {
            if (moduleStatus.startsWith("Error:")) {
                axisConfig.getFaultyModules().put(DeploymentEngine.getAxisServiceName(
                        deploymentFileData.getName()), moduleStatus);
            }
        }
    }


, Instance #
frags: 
(startLine=572 endLine=585 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00643/modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java)
                            } catch (Exception e) {
                                if (log.isInfoEnabled()) {
                                    StringWriter sw = new StringWriter();
                                    PrintWriter pw = new PrintWriter(sw);
                                    e.printStackTrace(pw);
                                    log.info(Messages.getMessage(
                                            DeploymentErrorMsgs.INVALID_SERVICE,
                                            currentArchiveFile.getName(),
                                            sw.getBuffer().toString()));
                                }
                                PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
                                e.printStackTrace(error_ptintWriter);
                                serviceStatus = "Error:\n" + errorWriter.toString();
                            } catch (Throwable t) {

(startLine=585 endLine=598 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00643/modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java)
                            } catch (Throwable t) {
                                if (log.isInfoEnabled()) {
                                    StringWriter sw = new StringWriter();
                                    PrintWriter pw = new PrintWriter(sw);
                                    t.printStackTrace(pw);
                                    log.info(Messages.getMessage(
                                            DeploymentErrorMsgs.INVALID_SERVICE,
                                            currentArchiveFile.getName(),
                                            sw.getBuffer().toString()));
                                }
                                PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
                                t.printStackTrace(error_ptintWriter);
                                serviceStatus = "Error:\n" + errorWriter.toString();
                            } finally {

(startLine=644 endLine=657 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00643/modules/kernel/src/org/apache/axis2/deployment/DeploymentEngine.java)
                            } catch (Throwable t) {
                                if (log.isInfoEnabled()) {
                                    StringWriter sw = new StringWriter();
                                    PrintWriter pw = new PrintWriter(sw);
                                    t.printStackTrace(pw);
                                    log.error(Messages.getMessage(DeploymentErrorMsgs.INVALID_MODULE,
                                            currentArchiveFile.getName(),
                                            t.getMessage()),
                                            t);
                                }
                                PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
                                t.printStackTrace(error_ptintWriter);
                                moduleStatus = "Error:\n" + errorWriter.toString();
                            } finally {

commonMethod: 
(startLine=51 endLine=135 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00644/modules/kernel/src/org/apache/axis2/deployment/ServiceDeployer.java)
    public void deploy(DeploymentFileData deploymentFileData) {
        boolean explodedDir = deploymentFileData.getFile().isDirectory();
        ArchiveReader archiveReader;
        StringWriter errorWriter = new StringWriter();
        archiveReader = new ArchiveReader();
        String serviceStatus = "";
        try {
            deploymentFileData.setClassLoader(explodedDir,
                    axisConfig.getServiceClassLoader());
            HashMap wsdlservice = archiveReader.processWSDLs(deploymentFileData);
            if (wsdlservice != null && wsdlservice.size() > 0) {
                Iterator services = wsdlservice.values().iterator();
                while (services.hasNext()) {
                    AxisService service = (AxisService) services.next();
                    Iterator operations = service.getOperations();
                    while (operations.hasNext()) {
                        AxisOperation axisOperation = (AxisOperation) operations.next();
                        axisConfig.getPhasesInfo().setOperationPhases(axisOperation);
                    }
                }
            }
            AxisServiceGroup sericeGroup = new AxisServiceGroup(axisConfig);
            sericeGroup.setServiceGroupClassLoader(
                    deploymentFileData.getClassLoader());
            ArrayList serviceList = archiveReader.processServiceGroup(
                    deploymentFileData.getAbsolutePath(), deploymentFileData,
                    sericeGroup, explodedDir, wsdlservice,
                    configCtx);
            DeploymentEngine.addServiceGroup(sericeGroup,
                    serviceList,
                    deploymentFileData.getFile().toURL(),
                    deploymentFileData,
                    axisConfig);
            log.info(Messages.getMessage(DeploymentErrorMsgs.DEPLOYING_WS,
                    deploymentFileData.getName()));
        } catch (DeploymentException de) {
            de.printStackTrace();
            log.error(Messages.getMessage(DeploymentErrorMsgs.INVALID_SERVICE,
                    deploymentFileData.getName(),
                    de.getMessage()),
                    de);
            PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
            de.printStackTrace(error_ptintWriter);
            serviceStatus = "Error:\n" + errorWriter.toString();
        } catch (AxisFault axisFault) {
            log.error(Messages.getMessage(DeploymentErrorMsgs.INVALID_SERVICE,
                    deploymentFileData.getName(),
                    axisFault.getMessage()),
                    axisFault);
            PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
            axisFault.printStackTrace(error_ptintWriter);
            serviceStatus = "Error:\n" + errorWriter.toString();
        } catch (Exception e) {
            if (log.isInfoEnabled()) {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                log.info(Messages.getMessage(
                        DeploymentErrorMsgs.INVALID_SERVICE,
                        deploymentFileData.getName(),
                        sw.getBuffer().toString()));
            }
            PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
            e.printStackTrace(error_ptintWriter);
            serviceStatus = "Error:\n" + errorWriter.toString();
        } catch (Throwable t) {
            if (log.isInfoEnabled()) {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                t.printStackTrace(pw);
                log.info(Messages.getMessage(
                        DeploymentErrorMsgs.INVALID_SERVICE,
                        deploymentFileData.getName(),
                        sw.getBuffer().toString()));
            }
            PrintWriter error_ptintWriter = new PrintWriter(errorWriter);
            t.printStackTrace(error_ptintWriter);
            serviceStatus = "Error:\n" + errorWriter.toString();
        } finally {
            if (serviceStatus.startsWith("Error:")) {
                axisConfig.getFaultyServices().put(deploymentFileData.getFile().getAbsolutePath(),
                        serviceStatus);
            }
        }
    }


, Instance #
frags: 
(startLine=270 endLine=298 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00646/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java)
            } else {
          
                // We have a matching paramValue
                Object value = pv.getElementValue();
                pvIndex++;
                
                // The signature wants the object that is rendered as the type
                value = XMLRootElementUtil.getTypeEnabledObject(value);
                
                // Now that we have the type, there may be a mismatch
                // between the type (as defined by JAXB) and the formal
                // parameter (as defined by JAXWS).  Frequently this occurs
                // with respect to T[] versus List<T>.  
                // Use the convert utility to silently do any conversions
                if (ConvertUtils.isConvertable(value, pd.getParameterActualType())) {
                    value = ConvertUtils.convert(value, pd.getParameterActualType());
                } else {
                    String objectClass = (value == null) ? "null" : value.getClass().getName();
                    throw ExceptionFactory.makeWebServiceException(
                            Messages.getMessage("convertProblem", objectClass, pd.getParameterActualType().getName()));
                }
                
                // The signature may want a holder representation
                if (pd.isHolderType()) {
                    args[i] = createHolder(pd.getParameterType(), value);
                } else {
                    args[i] = value;
                }
            }

(startLine=325 endLine=352 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00646/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java)
            if (pv != null && pv.getParam() == pd) {   
                // We have a matching paramValue
                Object value = pv.getElementValue();
                pvIndex++;
                
                // The signature wants the object that is rendered as the type
                value = XMLRootElementUtil.getTypeEnabledObject(value);
                
                // Now that we have the type, there may be a mismatch
                // between the type (as defined by JAXB) and the formal
                // parameter (as defined by JAXWS).  Frequently this occurs
                // with respect to T[] versus List<T>.  
                // Use the convert utility to silently do any conversions
                if (ConvertUtils.isConvertable(value, pd.getParameterActualType())) {
                    value = ConvertUtils.convert(value, pd.getParameterActualType());
                } else {
                    String objectClass = (value == null) ? "null" : value.getClass().getName();
                    throw ExceptionFactory.makeWebServiceException(
                            Messages.getMessage("convertProblem", objectClass, pd.getParameterActualType().getName()));
                }
                
                // TODO Assert that this ParameterDescriptor must represent
                // an OUT or INOUT and must have a non-null holder object to 
                // store the value
                if (isHolder(signatureArgs[i])) {
                    ((Holder) signatureArgs[i]).value = value;
                }
            }    

commonMethod: 
(startLine=42 endLine=45 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00647/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/PDElement.java)
    public Element getElement() {
       
        return element;
    }


, Instance #
frags: 
(startLine=270 endLine=298 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00646/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java)
            } else {
          
                // We have a matching paramValue
                Object value = pv.getElementValue();
                pvIndex++;
                
                // The signature wants the object that is rendered as the type
                value = XMLRootElementUtil.getTypeEnabledObject(value);
                
                // Now that we have the type, there may be a mismatch
                // between the type (as defined by JAXB) and the formal
                // parameter (as defined by JAXWS).  Frequently this occurs
                // with respect to T[] versus List<T>.  
                // Use the convert utility to silently do any conversions
                if (ConvertUtils.isConvertable(value, pd.getParameterActualType())) {
                    value = ConvertUtils.convert(value, pd.getParameterActualType());
                } else {
                    String objectClass = (value == null) ? "null" : value.getClass().getName();
                    throw ExceptionFactory.makeWebServiceException(
                            Messages.getMessage("convertProblem", objectClass, pd.getParameterActualType().getName()));
                }
                
                // The signature may want a holder representation
                if (pd.isHolderType()) {
                    args[i] = createHolder(pd.getParameterType(), value);
                } else {
                    args[i] = value;
                }
            }

(startLine=325 endLine=352 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00646/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/MethodMarshallerUtils.java)
            if (pv != null && pv.getParam() == pd) {   
                // We have a matching paramValue
                Object value = pv.getElementValue();
                pvIndex++;
                
                // The signature wants the object that is rendered as the type
                value = XMLRootElementUtil.getTypeEnabledObject(value);
                
                // Now that we have the type, there may be a mismatch
                // between the type (as defined by JAXB) and the formal
                // parameter (as defined by JAXWS).  Frequently this occurs
                // with respect to T[] versus List<T>.  
                // Use the convert utility to silently do any conversions
                if (ConvertUtils.isConvertable(value, pd.getParameterActualType())) {
                    value = ConvertUtils.convert(value, pd.getParameterActualType());
                } else {
                    String objectClass = (value == null) ? "null" : value.getClass().getName();
                    throw ExceptionFactory.makeWebServiceException(
                            Messages.getMessage("convertProblem", objectClass, pd.getParameterActualType().getName()));
                }
                
                // TODO Assert that this ParameterDescriptor must represent
                // an OUT or INOUT and must have a non-null holder object to 
                // store the value
                if (isHolder(signatureArgs[i])) {
                    ((Holder) signatureArgs[i]).value = value;
                }
            }    

commonMethod: 
(startLine=80 endLine=90 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00647/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/Element.java)
    public Object getTypeValue() {
        if (elementValue != null) {
            if (elementValue.getClass() == JAXBElement.class) {
                return ((JAXBElement) elementValue).getValue();
            } else {
                return elementValue;
            }
        } else {
            return typeValue;
        }
    }


, Instance #
frags: 
(startLine=412 endLine=431 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00646/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedPlusMethodMarshaller.java)
            while(it.hasNext()) {
                PDElement pde = it.next();
                String name = pde.getParam().getParameterName();
                if (!pde.getParam().isHeader()) {
                    // Normal case
                    // The object list contains type rendered objects
                    Object value = pde.getElementValue();
                    if (value instanceof JAXBElement) {
                        value = ((JAXBElement) value).getValue();
                    }  
                    nameList.add(name);
                    objectList.put(name, value);
                } else {
                    // Header Case:
                    // Remove the header from the list, it will
                    // not be placed in the wrapper
                    it.remove();
                    headerPDEList.add(pde);
                }
            }

(startLine=540 endLine=559 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00646/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedPlusMethodMarshaller.java)
            while(it.hasNext()){
                PDElement pde = it.next();
                String name = pde.getParam().getParameterName();
                if (!pde.getParam().isHeader()) {
                    // Normal case:
                    // The object list contains type rendered objects
                    Object value = pde.getElementValue();
                    if (value instanceof JAXBElement) {
                        value = ((JAXBElement) value).getValue();
                    }
                    nameList.add(name);
                    objectList.put(name, value);
                } else {
                    // Header Case:
                    // Remove the header from the list, it will
                    // not be placed in the wrapper
                    it.remove();
                    headerPDEList.add(pde);
                }
            }   

commonMethod: 
(startLine=42 endLine=45 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00647/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/PDElement.java)
    public Element getElement() {
       
        return element;
    }


, Instance #
frags: 
(startLine=412 endLine=431 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00646/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedPlusMethodMarshaller.java)
            while(it.hasNext()) {
                PDElement pde = it.next();
                String name = pde.getParam().getParameterName();
                if (!pde.getParam().isHeader()) {
                    // Normal case
                    // The object list contains type rendered objects
                    Object value = pde.getElementValue();
                    if (value instanceof JAXBElement) {
                        value = ((JAXBElement) value).getValue();
                    }  
                    nameList.add(name);
                    objectList.put(name, value);
                } else {
                    // Header Case:
                    // Remove the header from the list, it will
                    // not be placed in the wrapper
                    it.remove();
                    headerPDEList.add(pde);
                }
            }

(startLine=540 endLine=559 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00646/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedPlusMethodMarshaller.java)
            while(it.hasNext()){
                PDElement pde = it.next();
                String name = pde.getParam().getParameterName();
                if (!pde.getParam().isHeader()) {
                    // Normal case:
                    // The object list contains type rendered objects
                    Object value = pde.getElementValue();
                    if (value instanceof JAXBElement) {
                        value = ((JAXBElement) value).getValue();
                    }
                    nameList.add(name);
                    objectList.put(name, value);
                } else {
                    // Header Case:
                    // Remove the header from the list, it will
                    // not be placed in the wrapper
                    it.remove();
                    headerPDEList.add(pde);
                }
            }   

commonMethod: 
(startLine=80 endLine=90 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00647/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/Element.java)
    public Object getTypeValue() {
        if (elementValue != null) {
            if (elementValue.getClass() == JAXBElement.class) {
                return ((JAXBElement) elementValue).getValue();
            } else {
                return elementValue;
            }
        } else {
            return typeValue;
        }
    }


, Instance #
frags: 
(startLine=354 endLine=486 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00646/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedPlusMethodMarshaller.java)
            throws WebServiceException {
        if (log.isDebugEnabled()) {
            log.debug("Calling DocLitWrapperPlusMethodMarshaller.marshalResponse");
            log.debug("  The DocLitWrapped Plus marshaller is used when the web service method deviates from the normal doc/lit rules.");
        }
        EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
        EndpointDescription endpointDesc = ed.getEndpointDescription();
        // We want to respond with the same protocol as the request,
        // It the protocol is null, then use the Protocol defined by the binding
        if (protocol == null) {
            protocol = Protocol.getProtocolForBinding(endpointDesc.getBindingType());
        }
        
        // Note all exceptions are caught and rethrown with a WebServiceException
        try {
            // Sample Document message
            // ..
            // <soapenv:body>
            //    <m:return ... >...</m:param>
            // </soapenv:body>
            //
            // Important points.
            //   1) There is no operation element in the message
            //   2) The data blocks are located underneath the operation element. 
            //   3) The name of the data blocks (m:param) are defined by the schema.
            //      (SOAP indicates that the name of the element is not important, but
            //      for document processing, we will assume that the name corresponds to 
            //      a schema root element)
            //   4) The type of the data block is defined by schema; thus in most cases
            //      an xsi:type will not be present
            
            // Get the operation information
            ParameterDescription[] pds =operationDesc.getParameterDescriptions();
            MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
            TreeSet<String> packages = marshalDesc.getPackages();
            
            // Create the message 
            MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
            Message m = mf.create(protocol);
            
            // In usage=WRAPPED, there will be a single block in the body.
            // The signatureArguments represent the child elements of that block
            // The first step is to convert the signature arguments into a list
            // of parameter values
            List<PDElement> pdeList = 
                MethodMarshallerUtils.getPDElements(pds,
                        signatureArgs, 
                        false,  // output
                        true, false);   

            // Now we want to create a single JAXB element that contains the 
            // parameter values.  We will use the wrapper tool to do this.
            // Create the inputs to the wrapper tool
            ArrayList<String> nameList = new ArrayList<String>();
            Map<String, Object> objectList = new HashMap<String, Object>();
            List<PDElement> headerPDEList = new ArrayList<PDElement>();
            
            Iterator<PDElement> it = pdeList.iterator();
            while(it.hasNext()) {
                PDElement pde = it.next();
                String name = pde.getParam().getParameterName();
                if (!pde.getParam().isHeader()) {
                    // Normal case
                    // The object list contains type rendered objects
                    Object value = pde.getElementValue();
                    if (value instanceof JAXBElement) {
                        value = ((JAXBElement) value).getValue();
                    }  
                    nameList.add(name);
                    objectList.put(name, value);
                } else {
                    // Header Case:
                    // Remove the header from the list, it will
                    // not be placed in the wrapper
                    it.remove();
                    headerPDEList.add(pde);
                }
            }
            
            Class returnType = operationDesc.getResultActualType();
            if (!operationDesc.isResultHeader()) {
                // Normal (Body Result): Add the return object to the nameList and objectList
                
                if (returnType != void.class) {
                    String name = operationDesc.getResultName();
                    nameList.add(name);
                    objectList.put(name, returnObject);
                }
            } else {
                // Header Result:
                // Put the return object onto the message
                if (returnType != void.class) {
                    MethodMarshallerUtils.toMessage(returnObject, returnType,
                            operationDesc.getResultTargetNamespace(),
                            operationDesc.getResultName(), packages, m, 
                            false, // don't force xsi:type for doc/lit
                            true); 
                }
            }
            
            // Now create the single JAXB element
            Class cls = MethodMarshallerUtils.loadClass(operationDesc.getResponseWrapperClassName());
            JAXBWrapperTool wrapperTool = new JAXBWrapperToolImpl();
            Object object  = wrapperTool.wrap(cls, nameList, objectList);
            
            // Make sure object can be rendered as an element
            if (!XMLRootElementUtil.isElementEnabled(cls)) {
                object = XMLRootElementUtil.getElementEnabledObject(
                        operationDesc.getResponseWrapperTargetNamespace(), 
                        operationDesc.getResponseWrapperLocalName(), 
                        cls, 
                        object);
            }
            
            
            // Put the object into the message
            JAXBBlockFactory factory = 
                (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
            
            Block block = factory.createFrom(object, 
                    new JAXBBlockContext(packages), 
                    null);  // The factory will get the qname from the value
            m.setBodyBlock(block);
            
            //  Now place the headers in the message
            if (headerPDEList.size() > 0) {
                MethodMarshallerUtils.toMessage(headerPDEList, m, packages, false);
            }
            return m;
        } catch(Exception e) {
            throw ExceptionFactory.makeWebServiceException(e);
        }
    }

(startLine=488 endLine=591 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00646/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedPlusMethodMarshaller.java)
    public Message marshalRequest(Object[] signatureArguments, OperationDescription operationDesc) throws WebServiceException {
        if (log.isDebugEnabled()) {
            log.debug("Calling DocLitWrapperPlusMethodMarshaller.marshalRequest");
            log.debug("  The DocLitWrapped Plus marshaller is used when the web service method deviates from the normal doc/lit rules.");
        }
        EndpointInterfaceDescription ed = operationDesc.getEndpointInterfaceDescription();
        EndpointDescription endpointDesc = ed.getEndpointDescription();
        Protocol protocol = Protocol.getProtocolForBinding(endpointDesc.getClientBindingID()); 
        MarshalServiceRuntimeDescription marshalDesc = MethodMarshallerUtils.getMarshalDesc(endpointDesc);
        TreeSet<String> packages = marshalDesc.getPackages();
        
        
        // Note all exceptions are caught and rethrown with a WebServiceException
        try {
            // Sample Document message
            // ..
            // <soapenv:body>
            //    <m:param .. >...</m:param>
            // </soapenv:body>
            //
            // Important points.
            //   1) There is no operation element under the body.
            //   2) The data blocks are located underneath the body.  
            //   3) The name of the data blocks (m:param) are defined by the schema
            //   4) The type of the data block (data:foo) is defined by schema (and probably
            //      is not present in the message
            
            
            // Get the operation information
            ParameterDescription[] pds =operationDesc.getParameterDescriptions();
            
            // Create the message 
            MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
            Message m = mf.create(protocol);
            
            // In usage=WRAPPED, there will be a single block in the body.
            // The signatureArguments represent the child elements of that block
            // The first step is to convert the signature arguments into list
            // of parameter values
            List<PDElement> pdeList = MethodMarshallerUtils.getPDElements(pds, 
                    signatureArguments, 
                    true,   // input
                    true, false); 
            
            // Now we want to create a single JAXB element that contains the 
            // ParameterValues.  We will use the wrapper tool to do this.
            // Create the inputs to the wrapper tool
            ArrayList<String> nameList = new ArrayList<String>();
            Map<String, Object> objectList = new HashMap<String, Object>();
            List<PDElement> headerPDEList = new ArrayList<PDElement>();
            
            Iterator<PDElement> it = pdeList.iterator();
            while(it.hasNext()){
                PDElement pde = it.next();
                String name = pde.getParam().getParameterName();
                if (!pde.getParam().isHeader()) {
                    // Normal case:
                    // The object list contains type rendered objects
                    Object value = pde.getElementValue();
                    if (value instanceof JAXBElement) {
                        value = ((JAXBElement) value).getValue();
                    }
                    nameList.add(name);
                    objectList.put(name, value);
                } else {
                    // Header Case:
                    // Remove the header from the list, it will
                    // not be placed in the wrapper
                    it.remove();
                    headerPDEList.add(pde);
                }
            }   
            
            // Now create the single JAXB element 
            Class cls = MethodMarshallerUtils.loadClass(operationDesc.getRequestWrapperClassName());
            JAXBWrapperTool wrapperTool = new JAXBWrapperToolImpl();
            Object object  = wrapperTool.wrap(cls, nameList, objectList);
            
            // Make sure object can be rendered as an element
            if (!XMLRootElementUtil.isElementEnabled(cls)) {
                object = XMLRootElementUtil.getElementEnabledObject(
                        operationDesc.getRequestWrapperTargetNamespace(), 
                        operationDesc.getRequestWrapperLocalName(), 
                        cls, 
                        object);
            }
            
            // Put the object into the message
            JAXBBlockFactory factory = 
                (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);
            Block block = factory.createFrom(object, 
                    new JAXBBlockContext(packages), 
                    null);  // The factory will get the qname from the value
            m.setBodyBlock(block);
            
            // Now place the headers in the message
            if (headerPDEList.size() > 0) {
                MethodMarshallerUtils.toMessage(headerPDEList, m, packages, false);
            }
            return m;
        } catch(Exception e) {
            throw ExceptionFactory.makeWebServiceException(e);
        }
    }

commonMethod: 
(startLine=80 endLine=90 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00647/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/Element.java)
    public Object getTypeValue() {
        if (elementValue != null) {
            if (elementValue.getClass() == JAXBElement.class) {
                return ((JAXBElement) elementValue).getValue();
            } else {
                return elementValue;
            }
        } else {
            return typeValue;
        }
    }


, Instance #
frags: 
(startLine=34 endLine=41 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00654/modules/json/test/org/apache/axis2/json/JSONDataSourceTest.java)
    public void testSerialize1() throws XMLStreamException {
        String jsonString = "{\"p\":{\"name\":{\"kamal\":{\"$\":\"yes\"},\"$\":\"innername\"},\"@pp\":\"value\"}}";
        InputStream jsonInputStream = new ByteArrayInputStream(jsonString.getBytes());
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        JSONBadgerfishDataSource source = new JSONBadgerfishDataSource(readLocalName(jsonInputStream), "p");
        source.serialize(outStream, null);
        assertEquals(jsonString, new String(outStream.toByteArray()));
    }

(startLine=43 endLine=52 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00654/modules/json/test/org/apache/axis2/json/JSONDataSourceTest.java)
    public void testSerialize2() throws XMLStreamException, IOException {
        String jsonString = "{\"p\":{\"name\":{\"kamal\":[{\"$\":\"yes\"},{\"$\":\"second\"}],\"$\":\"innername\"},\"@pp\":\"value\"}}";
        InputStream jsonInputStream = new ByteArrayInputStream(jsonString.getBytes());
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        OutputStreamWriter writer = new OutputStreamWriter(outStream);
        JSONBadgerfishDataSource source = new JSONBadgerfishDataSource(readLocalName(jsonInputStream), "p");
        source.serialize(writer, null);
        writer.flush();
        assertEquals(jsonString, new String(outStream.toByteArray()));
    }

commonMethod: 
(startLine=101 endLine=104 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00655/modules/json/test/org/apache/axis2/json/JSONDataSourceTest.java)
    private JSONDataSource getMappedDataSource(String jsonString) {
        InputStream jsonInputStream = new ByteArrayInputStream(jsonString.getBytes());
        return new JSONDataSource(readLocalName(jsonInputStream), "\"mapping\"");
    }


, Instance #
frags: 
(startLine=34 endLine=41 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00654/modules/json/test/org/apache/axis2/json/JSONDataSourceTest.java)
    public void testSerialize1() throws XMLStreamException {
        String jsonString = "{\"p\":{\"name\":{\"kamal\":{\"$\":\"yes\"},\"$\":\"innername\"},\"@pp\":\"value\"}}";
        InputStream jsonInputStream = new ByteArrayInputStream(jsonString.getBytes());
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        JSONBadgerfishDataSource source = new JSONBadgerfishDataSource(readLocalName(jsonInputStream), "p");
        source.serialize(outStream, null);
        assertEquals(jsonString, new String(outStream.toByteArray()));
    }

(startLine=43 endLine=52 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00654/modules/json/test/org/apache/axis2/json/JSONDataSourceTest.java)
    public void testSerialize2() throws XMLStreamException, IOException {
        String jsonString = "{\"p\":{\"name\":{\"kamal\":[{\"$\":\"yes\"},{\"$\":\"second\"}],\"$\":\"innername\"},\"@pp\":\"value\"}}";
        InputStream jsonInputStream = new ByteArrayInputStream(jsonString.getBytes());
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        OutputStreamWriter writer = new OutputStreamWriter(outStream);
        JSONBadgerfishDataSource source = new JSONBadgerfishDataSource(readLocalName(jsonInputStream), "p");
        source.serialize(writer, null);
        writer.flush();
        assertEquals(jsonString, new String(outStream.toByteArray()));
    }

commonMethod: 
(startLine=106 endLine=112 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00655/modules/json/test/org/apache/axis2/json/JSONDataSourceTest.java)
    private String getMappedJSONString() {
//        {"mapping":{"inner":[{"first":"test string one"},"test string two"],"name":"foo"}}
//          <mapping><inner><first>test string one</first></inner><inner>test string two</inner><name>foo</name></mapping>
//        return "{\"mapping\":{\"inner\":[{\"first\":\"test string one\"},\"test string two\"],\"name\":\"foo\"}}";
        return "{\"mapping\":{\"inner\":[\"test string one\",\"test string two\"],\"name\":\"foo\"}}";
//        return "{\"mapping\":{\"inner\":\"foo\"}}";
    }


, Instance #
frags: 
(startLine=883 endLine=972 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
                                   boolean isWrapped) {

        List extensibilityElements = bindingInput.getExtensibilityElements();
        Message wsdl4jMessage = wsdl4jOperation.getInput().getMessage();

        for (int i = 0; i < extensibilityElements.size(); i++) {
            ExtensibilityElement extElement = (ExtensibilityElement) extensibilityElements.get(i);

            // SOAP 1.1 body element found!
            if (extElement instanceof SOAPBody) {
                SOAPBody soapBody = (SOAPBody) extElement;
                List bindingPartsList = soapBody.getParts();
                if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                    // we can process a single part only
                    processPartsList(bindingPartsList, wsdl4jMessage, inMessage);
                    // there are no parts named in the binding - process the
                    // items normally
                    // by looking at the single message part - or the wrapped
                    // items if wrapped by us
                } else {
                    // for the wrapped types we need to find this from the
                    // wrapper schema map
                    if (isWrapped) {
                        // The schema for this should be already made ! Find the
                        // QName from
                        // the list and add it - the name for this is just the
                        inMessage
                                .setElementQName((QName) resolvedRpcWrappedElementMap
                                        .get(wsdl4jOperation.getName()));

                    } else if (wsdl4jMessage != null) {
                        // pick the first part from the list and take that as
                        // the relevant part
                        // it is somewhat questionnable whether the first part
                        // gets picked
                        // but we'll have to take a chance here
                        Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                        if (!wsdl4jPartsMap.isEmpty()) {
                            Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                    .toArray()[0];
                            if (wsdl4jPart.getElementName() != null) {
                                inMessage.setElementQName(wsdl4jPart
                                        .getElementName());
                            }
                        }
                    }
                }
                break;
            } else if (extElement instanceof SOAP12Body) {
                SOAP12Body soapBody = (SOAP12Body) extElement;
                List bindingPartsList = soapBody.getParts();
                if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                    // we can process a single part only
                    processPartsList(bindingPartsList, wsdl4jMessage, inMessage);
                    // there are no parts named in the binding - process the
                    // items normally
                    // by looking at the single message part - or the wrapped
                    // items if wrapped by us
                } else {
                    // for the wrapped types we need to find this from the
                    // wrapper schema map
                    if (isWrapped) {
                        // The schema for this should be already made ! Find the
                        // QName from
                        // the list and add it - the name for this is just the
                        inMessage
                                .setElementQName((QName) resolvedRpcWrappedElementMap
                                        .get(wsdl4jOperation.getName()));
                    } else if (wsdl4jMessage != null) {
                        // pick the first part from the list and take that as
                        // the relevant part
                        // it is somewhat questionnable whether the first part
                        // gets picked
                        // but we'll have to take a chance here
                        Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                        if (!wsdl4jPartsMap.isEmpty()) {
                            Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                    .toArray()[0];
                            if (wsdl4jPart.getElementName() != null) {
                                inMessage.setElementQName(wsdl4jPart
                                        .getElementName());
                            }
                        }
                    }
                }
                break;
            }
        }

    }

(startLine=1016 endLine=1113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
                                   boolean isWrapped) {

        if (bindingOutput != null) {
            List extensibilityElements = bindingOutput.getExtensibilityElements();
            if (wsdl4jOperation.getOutput() == null) {
                return;
            }
            Message wsdl4jMessage = wsdl4jOperation.getOutput().getMessage();

            for (int i = 0; i < extensibilityElements.size(); i++) {
                ExtensibilityElement extElement = (ExtensibilityElement) extensibilityElements
                        .get(i);

                // SOAP 1.1 body element found!
                if (extElement instanceof SOAPBody) {
                    SOAPBody soapBody = (SOAPBody) extElement;
                    List bindingPartsList = soapBody.getParts();
                    if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                        // we can process a single part only so delegate the task
                        // of processing
                        processPartsList(bindingPartsList, wsdl4jMessage,
                                outMessage);
                        // there are no parts named in the binding - process the
                        // items normally
                        // by looking at the single message part - or the wrapped
                        // items if wrapped by us
                    } else {
                        // for the wrapped types we need to find this from the
                        // wrapper schema map
                        if (isWrapped) {
                            // The schema for this should be already made ! Find the
                            // QName from
                            // the list and add it
                            outMessage
                                    .setElementQName((QName) resolvedRpcWrappedElementMap
                                            .get(wsdl4jOperation.getName()
                                                    + WRAPPED_OUTPUTNAME_SUFFIX));

                        } else if (wsdl4jMessage != null) {
                            // pick the first part from the list and take that as
                            // the relevant part
                            // it is somewhat questionable whether the first part
                            // gets picked
                            // but we'll have to take a chance here
                            Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                            if (!wsdl4jPartsMap.isEmpty()) {
                                Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                        .toArray()[0];
                                if (wsdl4jPart.getElementName() != null) {
                                    outMessage.setElementQName(wsdl4jPart
                                            .getElementName());
                                }
                            }
                        }
                    }
                } else if (extElement instanceof SOAP12Body) {
                    SOAP12Body soapBody = (SOAP12Body) extElement;
                    List bindingPartsList = soapBody.getParts();
                    if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                        // we can process a single part only
                        processPartsList(bindingPartsList, wsdl4jMessage,
                                outMessage);
                        // there are no parts named in the binding - process the
                        // items normally
                        // by looking at the single message part - or the wrapped
                        // items if wrapped by us
                    } else {
                        // for the wrapped types we need to find this from the
                        // wrapper schema map
                        if (isWrapped) {
                            // The schema for this should be already made ! Find the
                            // QName from
                            // the list and add it - the name for this is just the
                            outMessage
                                    .setElementQName((QName) resolvedRpcWrappedElementMap
                                            .get(wsdl4jOperation.getName()
                                                    + WRAPPED_OUTPUTNAME_SUFFIX));
                        } else if (wsdl4jMessage != null) {
                            // pick the first part from the list and take that as
                            // the relevant part
                            // it is somewhat questionnable whether the first part
                            // gets picked
                            // but we'll have to take a chance here
                            Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                            if (!wsdl4jPartsMap.isEmpty()) {
                                Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                        .toArray()[0];
                                if (wsdl4jPart.getElementName() != null) {
                                    outMessage.setElementQName(wsdl4jPart
                                            .getElementName());
                                }
                            }
                        }
                    }
                }
            }
        }
    }

commonMethod: 
(startLine=911 endLine=983 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00674/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
	private void addQNameReference(AxisMessage message, Operation wsdl4jOperation, boolean isWrapped, List extensibilityElements, Message wsdl4jMessage) {
		for (int i = 0; i < extensibilityElements.size(); i++) {
            ExtensibilityElement extElement = (ExtensibilityElement) extensibilityElements.get(i);

            List bindingPartsList = null;
            
            // SOAP 1.1 body element found!
            if (extElement instanceof SOAPBody) {
                SOAPBody soapBody = (SOAPBody) extElement;
                bindingPartsList = soapBody.getParts();
                
            } else if (extElement instanceof SOAP12Body) {
                SOAP12Body soapBody = (SOAP12Body) extElement;
                bindingPartsList = soapBody.getParts();
            }
            
            if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                // we can process a single part only
                if (bindingPartsList.size() > 1) {
				    // do something here - perhaps throw and exception
				} else {
				    // find the part from the relevant message
				    Part wsdl4jMessagePart = wsdl4jMessage
				            .getPart((String) bindingPartsList.get(0));
				    // the part name better be there - if not throw an exception
				    if (wsdl4jMessagePart == null) {
				        throw new WSDLProcessingException("Missing part named \""
				                + bindingPartsList.get(0) + "\"");
				    }
				    QName name = wsdl4jMessagePart.getElementName();
				    if (name == null) {
				        name = wsdl4jMessagePart.getTypeName();
				    }
				    if (name == null) {
				        throw new WSDLProcessingException(
				                "Element reference / Type name  missing for "
				                        + bindingPartsList.get(0) + "!");
				    }
				    message.setElementQName(wsdl4jMessagePart.getElementName());
				}
                // there are no parts named in the binding - process the
                // items normally
                // by looking at the single message part - or the wrapped
                // items if wrapped by us
            } else {
                // for the wrapped types we need to find this from the
                // wrapper schema map
                if (isWrapped) {
                    // The schema for this should be already made ! Find the
                    // QName from
                    // the list and add it - the name for this is just the
                    message
                            .setElementQName((QName) resolvedRpcWrappedElementMap
                                    .get(wsdl4jOperation.getName()));
                } else if (wsdl4jMessage != null) {
                    // pick the first part from the list and take that as
                    // the relevant part
                    // it is somewhat questionnable whether the first part
                    // gets picked
                    // but we'll have to take a chance here
                    Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                    if (!wsdl4jPartsMap.isEmpty()) {
                        Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                .toArray()[0];
                        if (wsdl4jPart.getElementName() != null) {
                            message.setElementQName(wsdl4jPart
                                    .getElementName());
                        }
                    }
                }
            }
        }
	}


, Instance #
frags: 
(startLine=892 endLine=931 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            if (extElement instanceof SOAPBody) {
                SOAPBody soapBody = (SOAPBody) extElement;
                List bindingPartsList = soapBody.getParts();
                if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                    // we can process a single part only
                    processPartsList(bindingPartsList, wsdl4jMessage, inMessage);
                    // there are no parts named in the binding - process the
                    // items normally
                    // by looking at the single message part - or the wrapped
                    // items if wrapped by us
                } else {
                    // for the wrapped types we need to find this from the
                    // wrapper schema map
                    if (isWrapped) {
                        // The schema for this should be already made ! Find the
                        // QName from
                        // the list and add it - the name for this is just the
                        inMessage
                                .setElementQName((QName) resolvedRpcWrappedElementMap
                                        .get(wsdl4jOperation.getName()));

                    } else if (wsdl4jMessage != null) {
                        // pick the first part from the list and take that as
                        // the relevant part
                        // it is somewhat questionnable whether the first part
                        // gets picked
                        // but we'll have to take a chance here
                        Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                        if (!wsdl4jPartsMap.isEmpty()) {
                            Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                    .toArray()[0];
                            if (wsdl4jPart.getElementName() != null) {
                                inMessage.setElementQName(wsdl4jPart
                                        .getElementName());
                            }
                        }
                    }
                }
                break;
            } else if (extElement instanceof SOAP12Body) {

(startLine=931 endLine=969 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
            } else if (extElement instanceof SOAP12Body) {
                SOAP12Body soapBody = (SOAP12Body) extElement;
                List bindingPartsList = soapBody.getParts();
                if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                    // we can process a single part only
                    processPartsList(bindingPartsList, wsdl4jMessage, inMessage);
                    // there are no parts named in the binding - process the
                    // items normally
                    // by looking at the single message part - or the wrapped
                    // items if wrapped by us
                } else {
                    // for the wrapped types we need to find this from the
                    // wrapper schema map
                    if (isWrapped) {
                        // The schema for this should be already made ! Find the
                        // QName from
                        // the list and add it - the name for this is just the
                        inMessage
                                .setElementQName((QName) resolvedRpcWrappedElementMap
                                        .get(wsdl4jOperation.getName()));
                    } else if (wsdl4jMessage != null) {
                        // pick the first part from the list and take that as
                        // the relevant part
                        // it is somewhat questionnable whether the first part
                        // gets picked
                        // but we'll have to take a chance here
                        Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                        if (!wsdl4jPartsMap.isEmpty()) {
                            Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                    .toArray()[0];
                            if (wsdl4jPart.getElementName() != null) {
                                inMessage.setElementQName(wsdl4jPart
                                        .getElementName());
                            }
                        }
                    }
                }
                break;
            }

(startLine=1030 endLine=1071 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
                if (extElement instanceof SOAPBody) {
                    SOAPBody soapBody = (SOAPBody) extElement;
                    List bindingPartsList = soapBody.getParts();
                    if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                        // we can process a single part only so delegate the task
                        // of processing
                        processPartsList(bindingPartsList, wsdl4jMessage,
                                outMessage);
                        // there are no parts named in the binding - process the
                        // items normally
                        // by looking at the single message part - or the wrapped
                        // items if wrapped by us
                    } else {
                        // for the wrapped types we need to find this from the
                        // wrapper schema map
                        if (isWrapped) {
                            // The schema for this should be already made ! Find the
                            // QName from
                            // the list and add it
                            outMessage
                                    .setElementQName((QName) resolvedRpcWrappedElementMap
                                            .get(wsdl4jOperation.getName()
                                                    + WRAPPED_OUTPUTNAME_SUFFIX));

                        } else if (wsdl4jMessage != null) {
                            // pick the first part from the list and take that as
                            // the relevant part
                            // it is somewhat questionable whether the first part
                            // gets picked
                            // but we'll have to take a chance here
                            Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                            if (!wsdl4jPartsMap.isEmpty()) {
                                Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                        .toArray()[0];
                                if (wsdl4jPart.getElementName() != null) {
                                    outMessage.setElementQName(wsdl4jPart
                                            .getElementName());
                                }
                            }
                        }
                    }
                } else if (extElement instanceof SOAP12Body) {

(startLine=1071 endLine=1110 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
                } else if (extElement instanceof SOAP12Body) {
                    SOAP12Body soapBody = (SOAP12Body) extElement;
                    List bindingPartsList = soapBody.getParts();
                    if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                        // we can process a single part only
                        processPartsList(bindingPartsList, wsdl4jMessage,
                                outMessage);
                        // there are no parts named in the binding - process the
                        // items normally
                        // by looking at the single message part - or the wrapped
                        // items if wrapped by us
                    } else {
                        // for the wrapped types we need to find this from the
                        // wrapper schema map
                        if (isWrapped) {
                            // The schema for this should be already made ! Find the
                            // QName from
                            // the list and add it - the name for this is just the
                            outMessage
                                    .setElementQName((QName) resolvedRpcWrappedElementMap
                                            .get(wsdl4jOperation.getName()
                                                    + WRAPPED_OUTPUTNAME_SUFFIX));
                        } else if (wsdl4jMessage != null) {
                            // pick the first part from the list and take that as
                            // the relevant part
                            // it is somewhat questionnable whether the first part
                            // gets picked
                            // but we'll have to take a chance here
                            Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                            if (!wsdl4jPartsMap.isEmpty()) {
                                Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                        .toArray()[0];
                                if (wsdl4jPart.getElementName() != null) {
                                    outMessage.setElementQName(wsdl4jPart
                                            .getElementName());
                                }
                            }
                        }
                    }
                }

commonMethod: 
(startLine=911 endLine=983 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00674/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
	private void addQNameReference(AxisMessage message, Operation wsdl4jOperation, boolean isWrapped, List extensibilityElements, Message wsdl4jMessage) {
		for (int i = 0; i < extensibilityElements.size(); i++) {
            ExtensibilityElement extElement = (ExtensibilityElement) extensibilityElements.get(i);

            List bindingPartsList = null;
            
            // SOAP 1.1 body element found!
            if (extElement instanceof SOAPBody) {
                SOAPBody soapBody = (SOAPBody) extElement;
                bindingPartsList = soapBody.getParts();
                
            } else if (extElement instanceof SOAP12Body) {
                SOAP12Body soapBody = (SOAP12Body) extElement;
                bindingPartsList = soapBody.getParts();
            }
            
            if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                // we can process a single part only
                if (bindingPartsList.size() > 1) {
				    // do something here - perhaps throw and exception
				} else {
				    // find the part from the relevant message
				    Part wsdl4jMessagePart = wsdl4jMessage
				            .getPart((String) bindingPartsList.get(0));
				    // the part name better be there - if not throw an exception
				    if (wsdl4jMessagePart == null) {
				        throw new WSDLProcessingException("Missing part named \""
				                + bindingPartsList.get(0) + "\"");
				    }
				    QName name = wsdl4jMessagePart.getElementName();
				    if (name == null) {
				        name = wsdl4jMessagePart.getTypeName();
				    }
				    if (name == null) {
				        throw new WSDLProcessingException(
				                "Element reference / Type name  missing for "
				                        + bindingPartsList.get(0) + "!");
				    }
				    message.setElementQName(wsdl4jMessagePart.getElementName());
				}
                // there are no parts named in the binding - process the
                // items normally
                // by looking at the single message part - or the wrapped
                // items if wrapped by us
            } else {
                // for the wrapped types we need to find this from the
                // wrapper schema map
                if (isWrapped) {
                    // The schema for this should be already made ! Find the
                    // QName from
                    // the list and add it - the name for this is just the
                    message
                            .setElementQName((QName) resolvedRpcWrappedElementMap
                                    .get(wsdl4jOperation.getName()));
                } else if (wsdl4jMessage != null) {
                    // pick the first part from the list and take that as
                    // the relevant part
                    // it is somewhat questionnable whether the first part
                    // gets picked
                    // but we'll have to take a chance here
                    Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                    if (!wsdl4jPartsMap.isEmpty()) {
                        Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                .toArray()[0];
                        if (wsdl4jPart.getElementName() != null) {
                            message.setElementQName(wsdl4jPart
                                    .getElementName());
                        }
                    }
                }
            }
        }
	}


, Instance #
frags: 
(startLine=902 endLine=929 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
                } else {
                    // for the wrapped types we need to find this from the
                    // wrapper schema map
                    if (isWrapped) {
                        // The schema for this should be already made ! Find the
                        // QName from
                        // the list and add it - the name for this is just the
                        inMessage
                                .setElementQName((QName) resolvedRpcWrappedElementMap
                                        .get(wsdl4jOperation.getName()));

                    } else if (wsdl4jMessage != null) {
                        // pick the first part from the list and take that as
                        // the relevant part
                        // it is somewhat questionnable whether the first part
                        // gets picked
                        // but we'll have to take a chance here
                        Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                        if (!wsdl4jPartsMap.isEmpty()) {
                            Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                    .toArray()[0];
                            if (wsdl4jPart.getElementName() != null) {
                                inMessage.setElementQName(wsdl4jPart
                                        .getElementName());
                            }
                        }
                    }
                }

(startLine=941 endLine=967 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
                } else {
                    // for the wrapped types we need to find this from the
                    // wrapper schema map
                    if (isWrapped) {
                        // The schema for this should be already made ! Find the
                        // QName from
                        // the list and add it - the name for this is just the
                        inMessage
                                .setElementQName((QName) resolvedRpcWrappedElementMap
                                        .get(wsdl4jOperation.getName()));
                    } else if (wsdl4jMessage != null) {
                        // pick the first part from the list and take that as
                        // the relevant part
                        // it is somewhat questionnable whether the first part
                        // gets picked
                        // but we'll have to take a chance here
                        Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                        if (!wsdl4jPartsMap.isEmpty()) {
                            Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                    .toArray()[0];
                            if (wsdl4jPart.getElementName() != null) {
                                inMessage.setElementQName(wsdl4jPart
                                        .getElementName());
                            }
                        }
                    }
                }

(startLine=1042 endLine=1070 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
                    } else {
                        // for the wrapped types we need to find this from the
                        // wrapper schema map
                        if (isWrapped) {
                            // The schema for this should be already made ! Find the
                            // QName from
                            // the list and add it
                            outMessage
                                    .setElementQName((QName) resolvedRpcWrappedElementMap
                                            .get(wsdl4jOperation.getName()
                                                    + WRAPPED_OUTPUTNAME_SUFFIX));

                        } else if (wsdl4jMessage != null) {
                            // pick the first part from the list and take that as
                            // the relevant part
                            // it is somewhat questionable whether the first part
                            // gets picked
                            // but we'll have to take a chance here
                            Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                            if (!wsdl4jPartsMap.isEmpty()) {
                                Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                        .toArray()[0];
                                if (wsdl4jPart.getElementName() != null) {
                                    outMessage.setElementQName(wsdl4jPart
                                            .getElementName());
                                }
                            }
                        }
                    }

(startLine=1082 endLine=1109 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00673/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
                    } else {
                        // for the wrapped types we need to find this from the
                        // wrapper schema map
                        if (isWrapped) {
                            // The schema for this should be already made ! Find the
                            // QName from
                            // the list and add it - the name for this is just the
                            outMessage
                                    .setElementQName((QName) resolvedRpcWrappedElementMap
                                            .get(wsdl4jOperation.getName()
                                                    + WRAPPED_OUTPUTNAME_SUFFIX));
                        } else if (wsdl4jMessage != null) {
                            // pick the first part from the list and take that as
                            // the relevant part
                            // it is somewhat questionnable whether the first part
                            // gets picked
                            // but we'll have to take a chance here
                            Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                            if (!wsdl4jPartsMap.isEmpty()) {
                                Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                        .toArray()[0];
                                if (wsdl4jPart.getElementName() != null) {
                                    outMessage.setElementQName(wsdl4jPart
                                            .getElementName());
                                }
                            }
                        }
                    }

commonMethod: 
(startLine=911 endLine=983 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00674/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java)
	private void addQNameReference(AxisMessage message, Operation wsdl4jOperation, boolean isWrapped, List extensibilityElements, Message wsdl4jMessage) {
		for (int i = 0; i < extensibilityElements.size(); i++) {
            ExtensibilityElement extElement = (ExtensibilityElement) extensibilityElements.get(i);

            List bindingPartsList = null;
            
            // SOAP 1.1 body element found!
            if (extElement instanceof SOAPBody) {
                SOAPBody soapBody = (SOAPBody) extElement;
                bindingPartsList = soapBody.getParts();
                
            } else if (extElement instanceof SOAP12Body) {
                SOAP12Body soapBody = (SOAP12Body) extElement;
                bindingPartsList = soapBody.getParts();
            }
            
            if (bindingPartsList != null && !bindingPartsList.isEmpty()) {
                // we can process a single part only
                if (bindingPartsList.size() > 1) {
				    // do something here - perhaps throw and exception
				} else {
				    // find the part from the relevant message
				    Part wsdl4jMessagePart = wsdl4jMessage
				            .getPart((String) bindingPartsList.get(0));
				    // the part name better be there - if not throw an exception
				    if (wsdl4jMessagePart == null) {
				        throw new WSDLProcessingException("Missing part named \""
				                + bindingPartsList.get(0) + "\"");
				    }
				    QName name = wsdl4jMessagePart.getElementName();
				    if (name == null) {
				        name = wsdl4jMessagePart.getTypeName();
				    }
				    if (name == null) {
				        throw new WSDLProcessingException(
				                "Element reference / Type name  missing for "
				                        + bindingPartsList.get(0) + "!");
				    }
				    message.setElementQName(wsdl4jMessagePart.getElementName());
				}
                // there are no parts named in the binding - process the
                // items normally
                // by looking at the single message part - or the wrapped
                // items if wrapped by us
            } else {
                // for the wrapped types we need to find this from the
                // wrapper schema map
                if (isWrapped) {
                    // The schema for this should be already made ! Find the
                    // QName from
                    // the list and add it - the name for this is just the
                    message
                            .setElementQName((QName) resolvedRpcWrappedElementMap
                                    .get(wsdl4jOperation.getName()));
                } else if (wsdl4jMessage != null) {
                    // pick the first part from the list and take that as
                    // the relevant part
                    // it is somewhat questionnable whether the first part
                    // gets picked
                    // but we'll have to take a chance here
                    Map wsdl4jPartsMap = wsdl4jMessage.getParts();
                    if (!wsdl4jPartsMap.isEmpty()) {
                        Part wsdl4jPart = (Part) wsdl4jPartsMap.values()
                                .toArray()[0];
                        if (wsdl4jPart.getElementName() != null) {
                            message.setElementQName(wsdl4jPart
                                    .getElementName());
                        }
                    }
                }
            }
        }
	}


, Instance #
frags: 
(startLine=1615 endLine=1635 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00749/modules/kernel/src/org/apache/axis2/description/AxisService.java)
        try {
            schemaGenerator = new SchemaGenerator(serviceClassLoader,
                                                  implClass, schemaNamespace,
                                                  axisService.getSchematargetNamespacePrefix());
            schemaGenerator.setElementFormDefault(Java2WSDLConstants.FORM_DEFAULT_UNQUALIFIED);
            axisService.setElementFormDefault(false);
            excludeOpeartion.add("init");
            excludeOpeartion.add("setOperationContext");
            excludeOpeartion.add("destroy");
            excludeOpeartion.add("startUp");
            schemaGenerator.setExcludeMethods(excludeOpeartion);
            axisService.addSchema(schemaGenerator.generateSchema());
            axisService.setSchematargetNamespace(schemaGenerator.getSchemaTargetNameSpace());
            axisService.setTypeTable(schemaGenerator.getTypeTable());
            if (targetNamespace == null) {
                targetNamespace = schemaGenerator.getSchemaTargetNameSpace();
            }
            if (targetNamespace != null && !"".equals(targetNamespace)) {
                axisService.setTargetNamespace(targetNamespace);
            }
        } catch (Exception e) {

(startLine=1763 endLine=1783 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00749/modules/kernel/src/org/apache/axis2/description/AxisService.java)
        try {
            schemaGenerator = new SchemaGenerator(serviceClassLoader,
                                                  implClass, schemaNameSpace,
                                                  axisService.getSchematargetNamespacePrefix());
            schemaGenerator.setElementFormDefault(Java2WSDLConstants.FORM_DEFAULT_UNQUALIFIED);
            axisService.setElementFormDefault(false);
            excludeOpeartion.add("init");
            excludeOpeartion.add("setOperationContext");
            excludeOpeartion.add("destroy");
            excludeOpeartion.add("startUp");
            schemaGenerator.setExcludeMethods(excludeOpeartion);
            axisService.addSchema(schemaGenerator.generateSchema());
            axisService.setSchematargetNamespace(schemaGenerator.getSchemaTargetNameSpace());
            axisService.setTypeTable(schemaGenerator.getTypeTable());
            if (targetNameSpace == null) {
                targetNameSpace = schemaGenerator.getSchemaTargetNameSpace();
            }
            if (targetNameSpace != null && !"".equals(targetNameSpace)) {
                axisService.setTargetNamespace(targetNameSpace);
            }
        } catch (Exception e) {

commonMethod: 
(startLine=623 endLine=633 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00750/modules/kernel/src/org/apache/axis2/deployment/util/Utils.java)
    /**
     * To add the exclude method when generating scheams , here the exclude methods
     * will be session releated axis2 methods
     */
    public static void addExclueMethods(ArrayList excludeList){
        excludeList.add("init");
        excludeList.add("setOperationContext");
        excludeList.add("startUp");
        excludeList.add("destroy");
        excludeList.add("shutDown");
    }


, Instance #
frags: 
(startLine=108 endLine=125 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00757/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
            if (uri.endsWith("?wsdl2")) {
                String serviceName = uri.substring(uri.lastIndexOf("/") + 1, uri.length() - 6);
                HashMap services = configurationContext.getAxisConfiguration().getServices();
                final AxisService service = (AxisService) services.get(serviceName);
                if (service != null) {
                    final String ip = getHostAddress(request);
                    EntityTemplate entity = new EntityTemplate(new ContentProducer() {

                        public void writeTo(final OutputStream outstream) throws IOException {
                            service.printWSDL2(outstream, ip, servicePath);
                        }

                    });
                    entity.setContentType("text/xml");
                    response.setEntity(entity);
                    return;
                }
            }

(startLine=126 endLine=143 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00757/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
            if (uri.endsWith("?wsdl")) {
                String serviceName = uri.substring(uri.lastIndexOf("/") + 1, uri.length() - 5);
                HashMap services = configurationContext.getAxisConfiguration().getServices();
                final AxisService service = (AxisService) services.get(serviceName);
                if (service != null) {
                    final String ip = getHostAddress(request);
                    EntityTemplate entity = new EntityTemplate(new ContentProducer() {

                        public void writeTo(final OutputStream outstream) throws IOException {
                            service.printWSDL(outstream, ip, servicePath);
                        }

                    });
                    entity.setContentType("text/xml");
                    response.setEntity(entity);
                    return;
                }
            }

(startLine=144 endLine=160 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00757/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
            if (uri.endsWith("?xsd")) {
                String serviceName = uri.substring(uri.lastIndexOf("/") + 1, uri.length() - 4);
                HashMap services = configurationContext.getAxisConfiguration().getServices();
                final AxisService service = (AxisService) services.get(serviceName);
                if (service != null) {
                    EntityTemplate entity = new EntityTemplate(new ContentProducer() {

                        public void writeTo(final OutputStream outstream) throws IOException {
                            service.printSchema(outstream);
                        }

                    });
                    entity.setContentType("text/xml");
                    response.setEntity(entity);
                    return;
                }
            }

commonMethod: 
(startLine=890 endLine=900 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00758/modules/kernel/src/org/apache/axis2/context/MessageContext.java)
    /**
     * Set a property for this message context.
     *
     * @param name  name of the property
     * @param value the value to set
     */
    public void setProperty(String name, Object value) {
        // we override this method here to make sure the properties are set on
        // options rather than in the inherited property bag.
        options.setProperty(name, value);
    }


, Instance #
frags: 
(startLine=112 endLine=124 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00757/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
                if (service != null) {
                    final String ip = getHostAddress(request);
                    EntityTemplate entity = new EntityTemplate(new ContentProducer() {

                        public void writeTo(final OutputStream outstream) throws IOException {
                            service.printWSDL2(outstream, ip, servicePath);
                        }

                    });
                    entity.setContentType("text/xml");
                    response.setEntity(entity);
                    return;
                }

(startLine=130 endLine=142 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00757/modules/kernel/src/org/apache/axis2/transport/http/HTTPWorker.java)
                if (service != null) {
                    final String ip = getHostAddress(request);
                    EntityTemplate entity = new EntityTemplate(new ContentProducer() {

                        public void writeTo(final OutputStream outstream) throws IOException {
                            service.printWSDL(outstream, ip, servicePath);
                        }

                    });
                    entity.setContentType("text/xml");
                    response.setEntity(entity);
                    return;
                }

commonMethod: 
(startLine=890 endLine=900 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00758/modules/kernel/src/org/apache/axis2/context/MessageContext.java)
    /**
     * Set a property for this message context.
     *
     * @param name  name of the property
     * @param value the value to set
     */
    public void setProperty(String name, Object value) {
        // we override this method here to make sure the properties are set on
        // options rather than in the inherited property bag.
        options.setProperty(name, value);
    }


, Instance #
frags: 
(startLine=295 endLine=378 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00760/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java)
        try {
            // Sample Document message
            // ..
            // <soapenv:body>
            //    <m:operationResponse ... >
            //       <param>hello</param>
            //    </m:operationResponse>
            // </soapenv:body>
            //
            // Important points.
            //   1) There is no operation element in the message
            //   2) The data blocks are located underneath the body element. 
            //   3) The name of the data block (m:operationResponse) is defined by the schema.
            //      It matches the operation name + "Response", and it has a corresponding JAXB element.
            //      This element is called the wrapper element
            //   4) The parameters are (param) are child elements of the wrapper element.

            // Get the operation information
            ParameterDescription[] pds = operationDesc.getParameterDescriptions();

            // Create the message 
            MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
            Message m = mf.create(protocol);

            // In usage=WRAPPED, there will be a single block in the body.
            // The signatureArguments represent the child elements of that block
            // The first step is to convert the signature arguments into a list
            // of parameter values
            List<PDElement> pdeList =
                    MethodMarshallerUtils.getPDElements(marshalDesc,
                                                        pds,
                                                        signatureArgs,
                                                        false,  // output
                                                        true, false);

            // Now we want to create a single JAXB element that contains the 
            // ParameterValues.  We will use the wrapper tool to do this.
            // Create the inputs to the wrapper tool
            ArrayList<String> nameList = new ArrayList<String>();
            Map<String, Object> objectList = new HashMap<String, Object>();

            for (PDElement pde : pdeList) {
                String name = pde.getParam().getParameterName();

                // The object list contains type rendered objects
                Object value = pde.getElement().getTypeValue();
                nameList.add(name);
                objectList.put(name, value);
            }

            // Add the return object to the nameList and objectList
            Class returnType = operationDesc.getResultActualType();
            if (returnType != void.class) {
                String name = operationDesc.getResultName();
                nameList.add(name);
                objectList.put(name, returnObject);
            }

            // Now create the single JAXB element
            String wrapperName = marshalDesc.getResponseWrapperClassName(operationDesc);
            Class cls = MethodMarshallerUtils.loadClass(wrapperName);
            JAXBWrapperTool wrapperTool = new JAXBWrapperToolImpl();
            Object object = wrapperTool.wrap(cls, nameList, objectList,
                                             marshalDesc.getPropertyDescriptorMap(cls));

            QName wrapperQName = new QName(operationDesc.getResponseWrapperTargetNamespace(),
                                           operationDesc.getResponseWrapperLocalName());

            // Make sure object can be rendered as an element
            if (!marshalDesc.getAnnotationDesc(cls).hasXmlRootElement()) {
                object = new JAXBElement(wrapperQName, cls, object);
            }

            // Put the object into the message
            JAXBBlockFactory factory =
                    (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);

            Block block = factory.createFrom(object,
                                             new JAXBBlockContext(packages, packagesKey),
                                             wrapperQName);
            m.setBodyBlock(block);

            return m;
        } catch (Exception e) {

(startLine=395 endLine=468 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00760/modules/jaxws/src/org/apache/axis2/jaxws/marshaller/impl/alt/DocLitWrappedMethodMarshaller.java)
        try {
            // Sample Document message
            // ..
            // <soapenv:body>
            //    <m:operation>
            //      <param>hello</param>
            //    </m:operation>
            // </soapenv:body>
            //
            // Important points.
            //   1) There is no operation element under the body.
            //   2) The data blocks are located underneath the body.  
            //   3) The name of the data block (m:operation) is defined by the schema and match the name of the operation.
            //      This is called the wrapper element.  The wrapper element has a corresponding JAXB element pojo.
            //   4) The parameters (m:param) are child elements of the wrapper element.

            // Get the operation information
            ParameterDescription[] pds = operationDesc.getParameterDescriptions();

            // Create the message 
            MessageFactory mf = (MessageFactory)FactoryRegistry.getFactory(MessageFactory.class);
            Message m = mf.create(protocol);

            // In usage=WRAPPED, there will be a single block in the body.
            // The signatureArguments represent the child elements of that block
            // The first step is to convert the signature arguments into list
            // of parameter values
            List<PDElement> pvList = MethodMarshallerUtils.getPDElements(marshalDesc,
                                                                         pds,
                                                                         signatureArguments,
                                                                         true,   // input
                                                                         true, false);

            // Now we want to create a single JAXB element that contains the 
            // ParameterValues.  We will use the wrapper tool to do this.
            // Create the inputs to the wrapper tool
            ArrayList<String> nameList = new ArrayList<String>();
            Map<String, Object> objectList = new HashMap<String, Object>();

            for (PDElement pv : pvList) {
                String name = pv.getParam().getParameterName();

                // The object list contains type rendered objects
                Object value = pv.getElement().getTypeValue();
                nameList.add(name);
                objectList.put(name, value);
            }

            // Now create the single JAXB element 
            String wrapperName = marshalDesc.getRequestWrapperClassName(operationDesc);
            Class cls = MethodMarshallerUtils.loadClass(wrapperName);
            JAXBWrapperTool wrapperTool = new JAXBWrapperToolImpl();
            Object object = wrapperTool.wrap(cls, nameList, objectList,
                                             marshalDesc.getPropertyDescriptorMap(cls));

            QName wrapperQName = new QName(operationDesc.getRequestWrapperTargetNamespace(),
                                           operationDesc.getRequestWrapperLocalName());

            // Make sure object can be rendered as an element
            if (!marshalDesc.getAnnotationDesc(cls).hasXmlRootElement()) {
                object = new JAXBElement(wrapperQName, cls, object);
            }

            // Put the object into the message
            JAXBBlockFactory factory =
                    (JAXBBlockFactory)FactoryRegistry.getFactory(JAXBBlockFactory.class);

            Block block = factory.createFrom(object,
                                             new JAXBBlockContext(packages, packagesKey),
                                             wrapperQName);
            m.setBodyBlock(block);

            return m;
        } catch (Exception e) {

commonMethod: 
(startLine=77 endLine=78 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00761/modules/jaxws/src/org/apache/axis2/jaxws/runtime/description/marshal/MarshalServiceRuntimeDescription.java)
    /** @return MessageFactory for this Marshaller */
    public MessageFactory getMessageFactory();


, Instance #
frags: 
(startLine=73 endLine=78 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00762/modules/jaxws/src/org/apache/axis2/jaxws/message/attachments/JAXBAttachmentMarshaller.java)
        if (log.isDebugEnabled()) {
            log.debug("Adding MTOM/XOP byte array attachment for element: " + "{" + namespace +
                    "}" + localPart);
            log.debug("   content id=" + cid);
            log.debug("   mimeType  =" + mimeType);
        }

(startLine=108 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00762/modules/jaxws/src/org/apache/axis2/jaxws/message/attachments/JAXBAttachmentMarshaller.java)
        if (log.isDebugEnabled()) {
            log.debug("Adding MTOM/XOP datahandler attachment for element: " + "{" + namespace +
                    "}" + localPart);
            log.debug("   content id=" + cid);
            log.debug("   dataHandler  =" + data);
        }

commonMethod: 
(startLine=125 endLine=147 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00763/modules/jaxws/src/org/apache/axis2/jaxws/message/attachments/JAXBAttachmentMarshaller.java)
    private String addDataHandler(DataHandler dh) {
        String cid = null;
        OMText textNode = null;
        
        // If this is an MTOMXMLStreamWriter then inform the writer 
        // that it must write out this attchment (I guess we should do this
        // even if the attachment is SWAREF ?)
        if (writer instanceof MTOMXMLStreamWriter) {
            textNode = new OMTextImpl(dh, null);
            cid = textNode.getContentID();
            ((MTOMXMLStreamWriter) writer).writeOptimized(textNode);
        } else {
            cid = UUIDGenerator.getUUID();
        }
        
        if (log.isDebugEnabled()){ 
            log.debug("   content id=" + cid);
            log.debug("   dataHandler  =" + dh);
        }
        // Remember the attachment on the message.
        message.addDataHandler(dh, cid);
        return cid;
    }


, Instance #
frags: 
(startLine=106 endLine=117 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00762/modules/jaxws/src/org/apache/axis2/jaxws/message/attachments/JAXBAttachmentMarshaller.java)
    public String addMtomAttachment(DataHandler data, String namespace, String localPart) {
        String cid = UUIDGenerator.getUUID();
        if (log.isDebugEnabled()) {
            log.debug("Adding MTOM/XOP datahandler attachment for element: " + "{" + namespace +
                    "}" + localPart);
            log.debug("   content id=" + cid);
            log.debug("   dataHandler  =" + data);
        }
        Attachment a = message.createAttachment(data, cid);
        message.addAttachment(a);
        return cid;
    }

(startLine=120 endLine=131 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00762/modules/jaxws/src/org/apache/axis2/jaxws/message/attachments/JAXBAttachmentMarshaller.java)
    public String addSwaRefAttachment(DataHandler data) {
        String cid = UUIDGenerator.getUUID();
        if (log.isDebugEnabled()) {
            log.debug("Adding SWAREF attachment");
            log.debug("   content id=" + cid);
            log.debug("   dataHandler  =" + data);
        }

        Attachment a = message.createAttachment(data, cid);
        message.addAttachment(a);
        return cid;
    }

commonMethod: 
(startLine=125 endLine=147 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00763/modules/jaxws/src/org/apache/axis2/jaxws/message/attachments/JAXBAttachmentMarshaller.java)
    private String addDataHandler(DataHandler dh) {
        String cid = null;
        OMText textNode = null;
        
        // If this is an MTOMXMLStreamWriter then inform the writer 
        // that it must write out this attchment (I guess we should do this
        // even if the attachment is SWAREF ?)
        if (writer instanceof MTOMXMLStreamWriter) {
            textNode = new OMTextImpl(dh, null);
            cid = textNode.getContentID();
            ((MTOMXMLStreamWriter) writer).writeOptimized(textNode);
        } else {
            cid = UUIDGenerator.getUUID();
        }
        
        if (log.isDebugEnabled()){ 
            log.debug("   content id=" + cid);
            log.debug("   dataHandler  =" + dh);
        }
        // Remember the attachment on the message.
        message.addDataHandler(dh, cid);
        return cid;
    }


, Instance #
frags: 
(startLine=223 endLine=290 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00764/modules/jaxws/src/org/apache/axis2/jaxws/client/dispatch/BaseDispatch.java)
    public Future<?> invokeAsync(Object obj, AsyncHandler asynchandler) throws WebServiceException {

        // All exceptions are caught and rethrown as a WebServiceException
        try {
            if (log.isDebugEnabled()) {
                log.debug("Entered asynchronous (callback) invocation: BaseDispatch.invokeAsync()");
            }

            // Create the InvocationContext instance for this request/response flow.
            InvocationContext invocationContext =
                    InvocationContextFactory.createInvocationContext(null);
            invocationContext.setServiceClient(serviceClient);

            // Create the MessageContext to hold the actual request message and its
            // associated properties
            MessageContext requestMsgCtx = new MessageContext();
            requestMsgCtx.setEndpointDescription(getEndpointDescription());
            invocationContext.setRequestMessageContext(requestMsgCtx);

            Message requestMsg = null;
            if (isValidInvocationParam(obj)) {
                requestMsg = createMessageFromValue(obj);
            } else {
                throw ExceptionFactory.makeWebServiceException("dispatchInvalidParam");
            }

            setupMessageProperties(requestMsg);
            requestMsgCtx.setMessage(requestMsg);

            // Migrate the properties from the client request context bag to
            // the request MessageContext.
            ApplicationContextMigratorUtil.performMigrationToMessageContext(
                    Constants.APPLICATION_CONTEXT_MIGRATOR_LIST_ID,
                    getRequestContext(), requestMsgCtx);

            // Setup the Executor that will be used to drive async responses back to 
            // the client.
            // FIXME: We shouldn't be getting this from the ServiceDelegate, rather each 
            // Dispatch object should have it's own.
            Executor e = serviceDelegate.getExecutor();
            invocationContext.setExecutor(e);

            // Create the AsyncListener that is to be used by the InvocationController.
            AsyncResponse listener = createAsyncResponseListener();
            invocationContext.setAsyncResponseListener(listener);

            // Send the request using the InvocationController
            Future<?> asyncResponse = ic.invokeAsync(invocationContext, asynchandler);

            //Check to see if we need to maintain session state
            if (requestMsgCtx.isMaintainSession()) {
                //TODO: Need to figure out a cleaner way to make this call. 
                setupSessionContext(
                        invocationContext.getServiceClient().getServiceContext().getProperties());
            }

            if (log.isDebugEnabled()) {
                log.debug("Asynchronous (callback) invocation sent: BaseDispatch.invokeAsync()");
            }

            return asyncResponse;
        } catch (WebServiceException e) {
            throw e;
        } catch (Exception e) {
            // All exceptions are caught and rethrown as a WebServiceException
            throw ExceptionFactory.makeWebServiceException(e);
        }
    }

(startLine=292 endLine=359 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00764/modules/jaxws/src/org/apache/axis2/jaxws/client/dispatch/BaseDispatch.java)
    public Response invokeAsync(Object obj) throws WebServiceException {

        // All exceptions are caught and rethrown as a WebServiceException
        try {
            if (log.isDebugEnabled()) {
                log.debug("Entered asynchronous (polling) invocation: BaseDispatch.invokeAsync()");
            }

            // Create the InvocationContext instance for this request/response flow.
            InvocationContext invocationContext =
                    InvocationContextFactory.createInvocationContext(null);
            invocationContext.setServiceClient(serviceClient);

            // Create the MessageContext to hold the actual request message and its
            // associated properties
            MessageContext requestMsgCtx = new MessageContext();
            requestMsgCtx.setEndpointDescription(getEndpointDescription());
            invocationContext.setRequestMessageContext(requestMsgCtx);

            Message requestMsg = null;
            if (isValidInvocationParam(obj)) {
                requestMsg = createMessageFromValue(obj);
            } else {
                throw ExceptionFactory.makeWebServiceException("dispatchInvalidParam");
            }

            setupMessageProperties(requestMsg);
            requestMsgCtx.setMessage(requestMsg);

            // Migrate the properties from the client request context bag to
            // the request MessageContext.
            ApplicationContextMigratorUtil.performMigrationToMessageContext(
                    Constants.APPLICATION_CONTEXT_MIGRATOR_LIST_ID,
                    getRequestContext(), requestMsgCtx);

            // Setup the Executor that will be used to drive async responses back to 
            // the client.
            // FIXME: We shouldn't be getting this from the ServiceDelegate, rather each 
            // Dispatch object should have it's own.
            Executor e = serviceDelegate.getExecutor();
            invocationContext.setExecutor(e);

            // Create the AsyncListener that is to be used by the InvocationController.
            AsyncResponse listener = createAsyncResponseListener();
            invocationContext.setAsyncResponseListener(listener);

            // Send the request using the InvocationController
            Response asyncResponse = ic.invokeAsync(invocationContext);

            //Check to see if we need to maintain session state
            if (requestMsgCtx.isMaintainSession()) {
                //TODO: Need to figure out a cleaner way to make this call. 
                setupSessionContext(
                        invocationContext.getServiceClient().getServiceContext().getProperties());
            }

            if (log.isDebugEnabled()) {
                log.debug("Asynchronous (polling) invocation sent: BaseDispatch.invokeAsync()");
            }

            return asyncResponse;
        } catch (WebServiceException e) {
            throw e;
        } catch (Exception e) {
            // All exceptions are caught and rethrown as a WebServiceException
            throw ExceptionFactory.makeWebServiceException(e);
        }
    }

commonMethod: 
(startLine=108 endLine=128 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00765/modules/jaxws/src/org/apache/axis2/jaxws/BindingProvider.java)
    /**
     * Check for maintain session state enablement either in the
     * MessageContext.isMaintainSession() or in the ServiceContext properties.
     * 
     * @param mc
     * @param ic
     */
    protected void checkMaintainSessionState(MessageContext mc, InvocationContext ic) {
        Map<String, Object> properties = ic.getServiceClient().getServiceContext().getProperties();
        boolean bValue = false;

        if (properties != null
            && properties
                         .containsKey(javax.xml.ws.BindingProvider.SESSION_MAINTAIN_PROPERTY)) {
            bValue = (Boolean) properties
                .get(javax.xml.ws.BindingProvider.SESSION_MAINTAIN_PROPERTY);
        }
        if (mc.isMaintainSession() || bValue == true) {
            setupSessionContext(properties);
        }
    }


, Instance #
frags: 
(startLine=47 endLine=102 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00768/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerInvokerUtils.java)
            List<Handler> handlers, EndpointDescription endpointDesc, HandlerChainProcessor.MEP mep, boolean isOneWay) {
        
        if (handlers == null)
            return true;
        
        int numHandlers = handlers.size();

        javax.xml.ws.handler.MessageContext handlerMessageContext = null;
        if (numHandlers > 0) {
            handlerMessageContext = findOrCreateMessageContext(msgCtx);
        } else {
            return true;
        }

        String bindingProto = null;
        if (mep.equals(HandlerChainProcessor.MEP.REQUEST))  // inbound request; must be on the server
            bindingProto = endpointDesc.getBindingType();
        else // inbound response; must be on the client
            bindingProto = endpointDesc.getClientBindingID();
        Protocol proto = Protocol.getProtocolForBinding(bindingProto);
        
        HandlerChainProcessor processor = new HandlerChainProcessor(handlers, proto);
        // if not one-way, expect a response
        try {
            if (msgCtx.getMessage().isFault()) {
                processor.processFault(handlerMessageContext,
                                       HandlerChainProcessor.Direction.IN);
            } else {
        		processor.processChain(handlerMessageContext,
                                                               HandlerChainProcessor.Direction.IN,
                                                               mep,
                                                               !isOneWay);
            }
        } catch (RuntimeException re) {
            /*
                * handler framework should only throw an exception here if
                * we are in the client inbound case.  Make sure the message
                * context and message are transformed.
                */
        	HandlerChainProcessor.convertToFaultMessage(handlerMessageContext, re, proto);
            addConvertedFaultMsgToCtx(msgCtx, handlerMessageContext);
            return false;
        }

        if (handlerMessageContext.get(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY)
                .equals(true)
                && mep.equals(HandlerChainProcessor.MEP.REQUEST)) {
            // uh-oh.  We've changed directions on the server inbound handler processing,
            // This means we're now on an outbound flow, and the endpoint will not
            // be called.  Be sure to mark the context and message as such.
            addConvertedFaultMsgToCtx(msgCtx, handlerMessageContext);
            return false;
        }
        return true;

    }

(startLine=110 endLine=164 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00768/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerInvokerUtils.java)
            List<Handler> handlers, EndpointDescription endpointDesc, HandlerChainProcessor.MEP mep, boolean isOneWay) {
        
        if (handlers == null)
            return true;
        
        int numHandlers = handlers.size();

        javax.xml.ws.handler.MessageContext handlerMessageContext = null;
        if (numHandlers > 0) {
            handlerMessageContext = findOrCreateMessageContext(msgCtx);
        } else {
            return true;
        }
        
        String bindingProto = null;
        if (mep.equals(HandlerChainProcessor.MEP.REQUEST))  // outbound request; must be on the client
            bindingProto = endpointDesc.getClientBindingID();
        else // outbound response; must be on the server
            bindingProto = endpointDesc.getBindingType();
        Protocol proto = Protocol.getProtocolForBinding(bindingProto);
        
        HandlerChainProcessor processor = new HandlerChainProcessor(handlers, proto);
        // if not one-way, expect a response
        try {
            if (msgCtx.getMessage().isFault()) {
                processor.processFault(handlerMessageContext,
                                       HandlerChainProcessor.Direction.OUT);
            } else {
        		processor.processChain(handlerMessageContext,
                                                               HandlerChainProcessor.Direction.OUT,
                                                               mep, !isOneWay);
            }
        } catch (RuntimeException re) {
            /*
                * handler framework should only throw an exception here if
                * we are in the server outbound case.  Make sure the message
                * context and message are transformed.
                */
        	HandlerChainProcessor.convertToFaultMessage(handlerMessageContext, re, proto);
            addConvertedFaultMsgToCtx(msgCtx, handlerMessageContext);
            return false;
        }

        if (handlerMessageContext.get(javax.xml.ws.handler.MessageContext.MESSAGE_OUTBOUND_PROPERTY)
                .equals(false)
                && mep.equals(HandlerChainProcessor.MEP.REQUEST)) {
            // uh-oh.  We've changed directions on the client outbound handler processing,
            // This means we're now on an inbound flow, and the service will not
            // be called.  Be sure to mark the context and message as such.
            addConvertedFaultMsgToCtx(msgCtx, handlerMessageContext);
            return false;
        }
        return true;

    }

commonMethod: 
(startLine=338 endLine=340 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00769/modules/jaxws/src/org/apache/axis2/jaxws/handler/HandlerChainProcessor.java)
    public void callHandlerCloseMethods(Direction direction) {
        callCloseHandlers(0, handlers.size() - 1, direction);
    }


, Instance #
frags: 
(startLine=69 endLine=90 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00771/modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java)
    public void checkModules() {
        File root = deploymentEngine.getModulesDir();
        File[] files = root.listFiles();

        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                File file = files[i];
                if (isSourceControlDir(file)) {
                    continue;
                }
                if (!file.isDirectory()) {
                    if (DeploymentFileData.isModuleArchiveFile(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_MODULE);
                    }
                } else {
                    if (!"lib".equalsIgnoreCase(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_MODULE);
                    }
                }
            }
        }
    }

(startLine=239 endLine=261 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00771/modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java)
    protected void findServicesInDirectory() {
        File root = deploymentEngine.getServicesDir();
        File[] files = root.listFiles();

        if (files != null && files.length > 0) {
            for (int i = 0; i < files.length; i++) {
                File file = files[i];
                if (isSourceControlDir(file)) {
                    continue;
                }
                if (!file.isDirectory()) {
                    if (DeploymentFileData.isServiceArchiveFile(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_SERVICE);
                    }
                } else {
                    if (!"lib".equalsIgnoreCase(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_SERVICE);
                    }
                }
            }
        }
        wsInfoList.addWSInfoItem(null, TYPE_DEFAULT);
    }

commonMethod: 
(startLine=288 endLine=290 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00772/modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java)
    public void addFileToDeploy(File file, Deployer deployer) {
        wsInfoList.addWSInfoItem(file, deployer);
    }


, Instance #
frags: 
(startLine=73 endLine=89 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00771/modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java)
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                File file = files[i];
                if (isSourceControlDir(file)) {
                    continue;
                }
                if (!file.isDirectory()) {
                    if (DeploymentFileData.isModuleArchiveFile(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_MODULE);
                    }
                } else {
                    if (!"lib".equalsIgnoreCase(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_MODULE);
                    }
                }
            }
        }

(startLine=243 endLine=259 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00771/modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java)
        if (files != null && files.length > 0) {
            for (int i = 0; i < files.length; i++) {
                File file = files[i];
                if (isSourceControlDir(file)) {
                    continue;
                }
                if (!file.isDirectory()) {
                    if (DeploymentFileData.isServiceArchiveFile(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_SERVICE);
                    }
                } else {
                    if (!"lib".equalsIgnoreCase(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_SERVICE);
                    }
                }
            }
        }

commonMethod: 
(startLine=288 endLine=290 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00772/modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java)
    public void addFileToDeploy(File file, Deployer deployer) {
        wsInfoList.addWSInfoItem(file, deployer);
    }


, Instance #
frags: 
(startLine=74 endLine=88 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00771/modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java)
            for (int i = 0; i < files.length; i++) {
                File file = files[i];
                if (isSourceControlDir(file)) {
                    continue;
                }
                if (!file.isDirectory()) {
                    if (DeploymentFileData.isModuleArchiveFile(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_MODULE);
                    }
                } else {
                    if (!"lib".equalsIgnoreCase(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_MODULE);
                    }
                }
            }

(startLine=244 endLine=258 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00771/modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java)
            for (int i = 0; i < files.length; i++) {
                File file = files[i];
                if (isSourceControlDir(file)) {
                    continue;
                }
                if (!file.isDirectory()) {
                    if (DeploymentFileData.isServiceArchiveFile(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_SERVICE);
                    }
                } else {
                    if (!"lib".equalsIgnoreCase(file.getName())) {
                        wsInfoList.addWSInfoItem(file, TYPE_SERVICE);
                    }
                }
            }

commonMethod: 
(startLine=288 endLine=290 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00772/modules/kernel/src/org/apache/axis2/deployment/RepositoryListener.java)
    public void addFileToDeploy(File file, Deployer deployer) {
        wsInfoList.addWSInfoItem(file, deployer);
    }


, Instance #
frags: 
(startLine=74 endLine=115 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
            if (configurationManagerElement != null) {
                classNameAttr = configurationManagerElement.getAttribute(new QName(TAG_CLASS_NAME));
                if (classNameAttr == null) {
                    throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_CONFIGURATION_MANAGER));
                }

                className = classNameAttr.getAttributeValue();
                clazz = Class.forName(className);

                ConfigurationManager configurationManager = (ConfigurationManager) clazz
                        .newInstance();
                clusterManager.setConfigurationManager(configurationManager);

                OMElement listenersElement = configurationManagerElement
                        .getFirstChildWithName(new QName(TAG_LISTENERS));
                if (listenersElement != null) {
                    Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                            TAG_LISTENER));
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ConfigurationManagerListener listener = (ConfigurationManagerListener) clazz
                                .newInstance();
                        listener.setConfigurationContext(configCtx);
                        configurationManager.addConfigurationManagerListener(listener);
                    }
                }

                //updating the ConfigurationManager with the new ConfigurationContext
                configurationManager.setConfigurationContext(configCtx);

                //loading the parameters.
                processParameters(configurationManagerElement.getChildrenWithName(new QName(TAG_PARAMETER)),
                                  configurationManager,
                                  null);
            }

(startLine=120 endLine=155 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
            if (contextManagerElement != null) {
                classNameAttr = contextManagerElement.getAttribute(new QName(TAG_CLASS_NAME));
                if (classNameAttr == null) {
                    throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_CONTEXT_MANAGER));
                }

                className = classNameAttr.getAttributeValue();

                clazz = Class.forName(className);
                ContextManager contextManager = (ContextManager) clazz.newInstance();
                clusterManager.setContextManager(contextManager);

                OMElement listenersElement = contextManagerElement.getFirstChildWithName(new QName(
                        TAG_LISTENERS));
                if (listenersElement != null) {
                    Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                            TAG_LISTENER));
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ContextManagerListener listener = (ContextManagerListener) clazz.newInstance();
                        contextManager.addContextManagerListener(listener);
                    }
                }

                //loading the parameters.
                processParameters(contextManagerElement.getChildrenWithName(new QName(TAG_PARAMETER)),
                                  contextManager,
                                  null);
            }

commonMethod: 
(startLine=189 endLine=239 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00786/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
    private void loadConfigManager(OMElement clusterElement,
                                   ClusterManager clusterManager) throws DeploymentException,
                                                                         ClassNotFoundException,
                                                                         InstantiationException,
                                                                         IllegalAccessException {
        OMElement configManagerEle =
                clusterElement.getFirstChildWithName(new QName(TAG_CONFIGURATION_MANAGER));
        if (configManagerEle != null) {
            OMAttribute classNameAttr = configManagerEle.getAttribute(new QName(ATTRIBUTE_CLASS));
            if (classNameAttr == null) {
                throw new DeploymentException(Messages.getMessage("classAttributeNotFound",
                                                                  TAG_CONFIGURATION_MANAGER));
            }

            String className = classNameAttr.getAttributeValue();
            Class clazz = Class.forName(className);

            ConfigurationManager configurationManager =
                    (ConfigurationManager) clazz.newInstance();
            clusterManager.setConfigurationManager(configurationManager);

            OMElement listenersElement =
                    configManagerEle.getFirstChildWithName(new QName(TAG_LISTENERS));
            if (listenersElement != null) {
                Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                        TAG_LISTENER));
                while (listenerElemIter.hasNext()) {
                    OMElement listenerElement = (OMElement) listenerElemIter.next();
                    classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                    if (classNameAttr == null) {
                        throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                    }

                    className = classNameAttr.getAttributeValue();
                    clazz = Class.forName(className);
                    ConfigurationManagerListener listener = (ConfigurationManagerListener) clazz
                            .newInstance();
                    listener.setConfigurationContext(configCtx);
                    configurationManager.addConfigurationManagerListener(listener);
                }
            }

            //updating the ConfigurationManager with the new ConfigurationContext
            configurationManager.setConfigurationContext(configCtx);

            //loading the parameters.
            processParameters(configManagerEle.getChildrenWithName(new QName(TAG_PARAMETER)),
                              configurationManager,
                              null);
        }
    }


, Instance #
frags: 
(startLine=74 endLine=115 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
            if (configurationManagerElement != null) {
                classNameAttr = configurationManagerElement.getAttribute(new QName(TAG_CLASS_NAME));
                if (classNameAttr == null) {
                    throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_CONFIGURATION_MANAGER));
                }

                className = classNameAttr.getAttributeValue();
                clazz = Class.forName(className);

                ConfigurationManager configurationManager = (ConfigurationManager) clazz
                        .newInstance();
                clusterManager.setConfigurationManager(configurationManager);

                OMElement listenersElement = configurationManagerElement
                        .getFirstChildWithName(new QName(TAG_LISTENERS));
                if (listenersElement != null) {
                    Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                            TAG_LISTENER));
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ConfigurationManagerListener listener = (ConfigurationManagerListener) clazz
                                .newInstance();
                        listener.setConfigurationContext(configCtx);
                        configurationManager.addConfigurationManagerListener(listener);
                    }
                }

                //updating the ConfigurationManager with the new ConfigurationContext
                configurationManager.setConfigurationContext(configCtx);

                //loading the parameters.
                processParameters(configurationManagerElement.getChildrenWithName(new QName(TAG_PARAMETER)),
                                  configurationManager,
                                  null);
            }

(startLine=120 endLine=155 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
            if (contextManagerElement != null) {
                classNameAttr = contextManagerElement.getAttribute(new QName(TAG_CLASS_NAME));
                if (classNameAttr == null) {
                    throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_CONTEXT_MANAGER));
                }

                className = classNameAttr.getAttributeValue();

                clazz = Class.forName(className);
                ContextManager contextManager = (ContextManager) clazz.newInstance();
                clusterManager.setContextManager(contextManager);

                OMElement listenersElement = contextManagerElement.getFirstChildWithName(new QName(
                        TAG_LISTENERS));
                if (listenersElement != null) {
                    Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                            TAG_LISTENER));
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ContextManagerListener listener = (ContextManagerListener) clazz.newInstance();
                        contextManager.addContextManagerListener(listener);
                    }
                }

                //loading the parameters.
                processParameters(contextManagerElement.getChildrenWithName(new QName(TAG_PARAMETER)),
                                  contextManager,
                                  null);
            }

commonMethod: 
(startLine=90 endLine=187 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00786/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
    private void loadContextManager(OMElement clusterElement,
                                    ClusterManager clusterManager) throws DeploymentException,
                                                                          ClassNotFoundException,
                                                                          InstantiationException,
                                                                          IllegalAccessException {
        OMElement contextManagerEle =
                clusterElement.getFirstChildWithName(new QName(TAG_CONTEXT_MANAGER));
        if (contextManagerEle != null) {

            // Load & set the ContextManager class
            OMAttribute classNameAttr =
                    contextManagerEle.getAttribute(new QName(ATTRIBUTE_CLASS));
            if (classNameAttr == null) {
                throw new DeploymentException(Messages.getMessage("classAttributeNotFound",
                                                                  TAG_CONTEXT_MANAGER));
            }

            String className = classNameAttr.getAttributeValue();

            Class clazz = Class.forName(className);
            ContextManager contextManager = (ContextManager) clazz.newInstance();
            clusterManager.setContextManager(contextManager);

            // Load & set the ContextManagerListener objects
            OMElement listenersElement =
                    contextManagerEle.getFirstChildWithName(new QName(TAG_LISTENERS));
            if (listenersElement != null) {
                for (Iterator iter = listenersElement.getChildrenWithName(new QName(TAG_LISTENER));
                     iter.hasNext();) {
                    OMElement listenerElement = (OMElement) iter.next();
                    classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                    if (classNameAttr == null) {
                        throw new DeploymentException(Messages.getMessage("classAttributeNotFound",
                                                                          TAG_LISTENER));
                    }

                    className = classNameAttr.getAttributeValue();
                    clazz = Class.forName(className);
                    ContextManagerListener listener = (ContextManagerListener) clazz.newInstance();
                    contextManager.addContextManagerListener(listener);
                }
            }

            //loading the parameters.
            processParameters(contextManagerEle.getChildrenWithName(new QName(TAG_PARAMETER)),
                              contextManager,
                              null);

            // Load the replication patterns to be excluded. We load the following structure.
            /*<replication>
                <defaults>
                    <exclude name="foo.bar.*"/>
                </defaults>
                <context class="org.apache.axis2.context.ConfigurationContext">
                    <exclude name="my.sandesha.*"/>
                </context>
                <context class="org.apache.axis2.context.ServiceGroupContext">
                    <exclude name="my.sandesha.*"/>
                </context>
                <context class="org.apache.axis2.context.ServiceContext">
                    <exclude name="my.sandesha.*"/>
                </context>
            </replication>*/
            OMElement replicationEle =
                    contextManagerEle.getFirstChildWithName(new QName(TAG_REPLICATION));
            if (replicationEle != null) {
                // Process defaults
                OMElement defaultsEle =
                        replicationEle.getFirstChildWithName(new QName(TAG_DEFAULTS));
                if (defaultsEle != null) {
                    List defaults = new ArrayList();
                    for (Iterator iter = defaultsEle.getChildrenWithName(new QName(TAG_EXCLUDE));
                         iter.hasNext();) {
                        OMElement excludeEle = (OMElement) iter.next();
                        OMAttribute nameAtt = excludeEle.getAttribute(new QName(ATTRIBUTE_NAME));
                        defaults.add(nameAtt.getAttributeValue());
                    }
                    contextManager.setReplicationExcludePatterns(TAG_DEFAULTS, defaults);
                }

                // Process specifics
                for (Iterator iter = replicationEle.getChildrenWithName(new QName(TAG_CONTEXT));
                     iter.hasNext();) {
                    OMElement contextEle = (OMElement) iter.next();
                    String ctxClassName =
                            contextEle.getAttribute(new QName(ATTRIBUTE_CLASS)).getAttributeValue();
                    List excludes = new ArrayList();
                    for (Iterator iter2 = contextEle.getChildrenWithName(new QName(TAG_EXCLUDE));
                         iter2.hasNext();) {
                        OMElement excludeEle = (OMElement) iter2.next();
                        OMAttribute nameAtt = excludeEle.getAttribute(new QName(ATTRIBUTE_NAME));
                        excludes.add(nameAtt.getAttributeValue());
                    }
                    contextManager.setReplicationExcludePatterns(ctxClassName, excludes);
                }
            }
        }
    }


, Instance #
frags: 
(startLine=89 endLine=106 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
                if (listenersElement != null) {
                    Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                            TAG_LISTENER));
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ConfigurationManagerListener listener = (ConfigurationManagerListener) clazz
                                .newInstance();
                        listener.setConfigurationContext(configCtx);
                        configurationManager.addConfigurationManagerListener(listener);
                    }
                }

(startLine=134 endLine=149 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
                if (listenersElement != null) {
                    Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                            TAG_LISTENER));
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ContextManagerListener listener = (ContextManagerListener) clazz.newInstance();
                        contextManager.addContextManagerListener(listener);
                    }
                }

commonMethod: 
(startLine=189 endLine=239 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00786/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
    private void loadConfigManager(OMElement clusterElement,
                                   ClusterManager clusterManager) throws DeploymentException,
                                                                         ClassNotFoundException,
                                                                         InstantiationException,
                                                                         IllegalAccessException {
        OMElement configManagerEle =
                clusterElement.getFirstChildWithName(new QName(TAG_CONFIGURATION_MANAGER));
        if (configManagerEle != null) {
            OMAttribute classNameAttr = configManagerEle.getAttribute(new QName(ATTRIBUTE_CLASS));
            if (classNameAttr == null) {
                throw new DeploymentException(Messages.getMessage("classAttributeNotFound",
                                                                  TAG_CONFIGURATION_MANAGER));
            }

            String className = classNameAttr.getAttributeValue();
            Class clazz = Class.forName(className);

            ConfigurationManager configurationManager =
                    (ConfigurationManager) clazz.newInstance();
            clusterManager.setConfigurationManager(configurationManager);

            OMElement listenersElement =
                    configManagerEle.getFirstChildWithName(new QName(TAG_LISTENERS));
            if (listenersElement != null) {
                Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                        TAG_LISTENER));
                while (listenerElemIter.hasNext()) {
                    OMElement listenerElement = (OMElement) listenerElemIter.next();
                    classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                    if (classNameAttr == null) {
                        throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                    }

                    className = classNameAttr.getAttributeValue();
                    clazz = Class.forName(className);
                    ConfigurationManagerListener listener = (ConfigurationManagerListener) clazz
                            .newInstance();
                    listener.setConfigurationContext(configCtx);
                    configurationManager.addConfigurationManagerListener(listener);
                }
            }

            //updating the ConfigurationManager with the new ConfigurationContext
            configurationManager.setConfigurationContext(configCtx);

            //loading the parameters.
            processParameters(configManagerEle.getChildrenWithName(new QName(TAG_PARAMETER)),
                              configurationManager,
                              null);
        }
    }


, Instance #
frags: 
(startLine=89 endLine=106 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
                if (listenersElement != null) {
                    Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                            TAG_LISTENER));
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ConfigurationManagerListener listener = (ConfigurationManagerListener) clazz
                                .newInstance();
                        listener.setConfigurationContext(configCtx);
                        configurationManager.addConfigurationManagerListener(listener);
                    }
                }

(startLine=134 endLine=149 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
                if (listenersElement != null) {
                    Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                            TAG_LISTENER));
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ContextManagerListener listener = (ContextManagerListener) clazz.newInstance();
                        contextManager.addContextManagerListener(listener);
                    }
                }

commonMethod: 
(startLine=90 endLine=187 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00786/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
    private void loadContextManager(OMElement clusterElement,
                                    ClusterManager clusterManager) throws DeploymentException,
                                                                          ClassNotFoundException,
                                                                          InstantiationException,
                                                                          IllegalAccessException {
        OMElement contextManagerEle =
                clusterElement.getFirstChildWithName(new QName(TAG_CONTEXT_MANAGER));
        if (contextManagerEle != null) {

            // Load & set the ContextManager class
            OMAttribute classNameAttr =
                    contextManagerEle.getAttribute(new QName(ATTRIBUTE_CLASS));
            if (classNameAttr == null) {
                throw new DeploymentException(Messages.getMessage("classAttributeNotFound",
                                                                  TAG_CONTEXT_MANAGER));
            }

            String className = classNameAttr.getAttributeValue();

            Class clazz = Class.forName(className);
            ContextManager contextManager = (ContextManager) clazz.newInstance();
            clusterManager.setContextManager(contextManager);

            // Load & set the ContextManagerListener objects
            OMElement listenersElement =
                    contextManagerEle.getFirstChildWithName(new QName(TAG_LISTENERS));
            if (listenersElement != null) {
                for (Iterator iter = listenersElement.getChildrenWithName(new QName(TAG_LISTENER));
                     iter.hasNext();) {
                    OMElement listenerElement = (OMElement) iter.next();
                    classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                    if (classNameAttr == null) {
                        throw new DeploymentException(Messages.getMessage("classAttributeNotFound",
                                                                          TAG_LISTENER));
                    }

                    className = classNameAttr.getAttributeValue();
                    clazz = Class.forName(className);
                    ContextManagerListener listener = (ContextManagerListener) clazz.newInstance();
                    contextManager.addContextManagerListener(listener);
                }
            }

            //loading the parameters.
            processParameters(contextManagerEle.getChildrenWithName(new QName(TAG_PARAMETER)),
                              contextManager,
                              null);

            // Load the replication patterns to be excluded. We load the following structure.
            /*<replication>
                <defaults>
                    <exclude name="foo.bar.*"/>
                </defaults>
                <context class="org.apache.axis2.context.ConfigurationContext">
                    <exclude name="my.sandesha.*"/>
                </context>
                <context class="org.apache.axis2.context.ServiceGroupContext">
                    <exclude name="my.sandesha.*"/>
                </context>
                <context class="org.apache.axis2.context.ServiceContext">
                    <exclude name="my.sandesha.*"/>
                </context>
            </replication>*/
            OMElement replicationEle =
                    contextManagerEle.getFirstChildWithName(new QName(TAG_REPLICATION));
            if (replicationEle != null) {
                // Process defaults
                OMElement defaultsEle =
                        replicationEle.getFirstChildWithName(new QName(TAG_DEFAULTS));
                if (defaultsEle != null) {
                    List defaults = new ArrayList();
                    for (Iterator iter = defaultsEle.getChildrenWithName(new QName(TAG_EXCLUDE));
                         iter.hasNext();) {
                        OMElement excludeEle = (OMElement) iter.next();
                        OMAttribute nameAtt = excludeEle.getAttribute(new QName(ATTRIBUTE_NAME));
                        defaults.add(nameAtt.getAttributeValue());
                    }
                    contextManager.setReplicationExcludePatterns(TAG_DEFAULTS, defaults);
                }

                // Process specifics
                for (Iterator iter = replicationEle.getChildrenWithName(new QName(TAG_CONTEXT));
                     iter.hasNext();) {
                    OMElement contextEle = (OMElement) iter.next();
                    String ctxClassName =
                            contextEle.getAttribute(new QName(ATTRIBUTE_CLASS)).getAttributeValue();
                    List excludes = new ArrayList();
                    for (Iterator iter2 = contextEle.getChildrenWithName(new QName(TAG_EXCLUDE));
                         iter2.hasNext();) {
                        OMElement excludeEle = (OMElement) iter2.next();
                        OMAttribute nameAtt = excludeEle.getAttribute(new QName(ATTRIBUTE_NAME));
                        excludes.add(nameAtt.getAttributeValue());
                    }
                    contextManager.setReplicationExcludePatterns(ctxClassName, excludes);
                }
            }
        }
    }


, Instance #
frags: 
(startLine=92 endLine=105 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ConfigurationManagerListener listener = (ConfigurationManagerListener) clazz
                                .newInstance();
                        listener.setConfigurationContext(configCtx);
                        configurationManager.addConfigurationManagerListener(listener);
                    }

(startLine=137 endLine=148 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ContextManagerListener listener = (ContextManagerListener) clazz.newInstance();
                        contextManager.addContextManagerListener(listener);
                    }

commonMethod: 
(startLine=189 endLine=239 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00786/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
    private void loadConfigManager(OMElement clusterElement,
                                   ClusterManager clusterManager) throws DeploymentException,
                                                                         ClassNotFoundException,
                                                                         InstantiationException,
                                                                         IllegalAccessException {
        OMElement configManagerEle =
                clusterElement.getFirstChildWithName(new QName(TAG_CONFIGURATION_MANAGER));
        if (configManagerEle != null) {
            OMAttribute classNameAttr = configManagerEle.getAttribute(new QName(ATTRIBUTE_CLASS));
            if (classNameAttr == null) {
                throw new DeploymentException(Messages.getMessage("classAttributeNotFound",
                                                                  TAG_CONFIGURATION_MANAGER));
            }

            String className = classNameAttr.getAttributeValue();
            Class clazz = Class.forName(className);

            ConfigurationManager configurationManager =
                    (ConfigurationManager) clazz.newInstance();
            clusterManager.setConfigurationManager(configurationManager);

            OMElement listenersElement =
                    configManagerEle.getFirstChildWithName(new QName(TAG_LISTENERS));
            if (listenersElement != null) {
                Iterator listenerElemIter = listenersElement.getChildrenWithName(new QName(
                        TAG_LISTENER));
                while (listenerElemIter.hasNext()) {
                    OMElement listenerElement = (OMElement) listenerElemIter.next();
                    classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                    if (classNameAttr == null) {
                        throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                    }

                    className = classNameAttr.getAttributeValue();
                    clazz = Class.forName(className);
                    ConfigurationManagerListener listener = (ConfigurationManagerListener) clazz
                            .newInstance();
                    listener.setConfigurationContext(configCtx);
                    configurationManager.addConfigurationManagerListener(listener);
                }
            }

            //updating the ConfigurationManager with the new ConfigurationContext
            configurationManager.setConfigurationContext(configCtx);

            //loading the parameters.
            processParameters(configManagerEle.getChildrenWithName(new QName(TAG_PARAMETER)),
                              configurationManager,
                              null);
        }
    }


, Instance #
frags: 
(startLine=92 endLine=105 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ConfigurationManagerListener listener = (ConfigurationManagerListener) clazz
                                .newInstance();
                        listener.setConfigurationContext(configCtx);
                        configurationManager.addConfigurationManagerListener(listener);
                    }

(startLine=137 endLine=148 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00785/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
                    while (listenerElemIter.hasNext()) {
                        OMElement listenerElement = (OMElement) listenerElemIter.next();
                        classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                        if (classNameAttr == null) {
                            throw new DeploymentException(Messages.getMessage("classAttributeNotFound", TAG_LISTENER));
                        }

                        className = classNameAttr.getAttributeValue();
                        clazz = Class.forName(className);
                        ContextManagerListener listener = (ContextManagerListener) clazz.newInstance();
                        contextManager.addContextManagerListener(listener);
                    }

commonMethod: 
(startLine=90 endLine=187 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00786/modules/kernel/src/org/apache/axis2/deployment/ClusterBuilder.java)
    private void loadContextManager(OMElement clusterElement,
                                    ClusterManager clusterManager) throws DeploymentException,
                                                                          ClassNotFoundException,
                                                                          InstantiationException,
                                                                          IllegalAccessException {
        OMElement contextManagerEle =
                clusterElement.getFirstChildWithName(new QName(TAG_CONTEXT_MANAGER));
        if (contextManagerEle != null) {

            // Load & set the ContextManager class
            OMAttribute classNameAttr =
                    contextManagerEle.getAttribute(new QName(ATTRIBUTE_CLASS));
            if (classNameAttr == null) {
                throw new DeploymentException(Messages.getMessage("classAttributeNotFound",
                                                                  TAG_CONTEXT_MANAGER));
            }

            String className = classNameAttr.getAttributeValue();

            Class clazz = Class.forName(className);
            ContextManager contextManager = (ContextManager) clazz.newInstance();
            clusterManager.setContextManager(contextManager);

            // Load & set the ContextManagerListener objects
            OMElement listenersElement =
                    contextManagerEle.getFirstChildWithName(new QName(TAG_LISTENERS));
            if (listenersElement != null) {
                for (Iterator iter = listenersElement.getChildrenWithName(new QName(TAG_LISTENER));
                     iter.hasNext();) {
                    OMElement listenerElement = (OMElement) iter.next();
                    classNameAttr = listenerElement.getAttribute(new QName(TAG_CLASS_NAME));
                    if (classNameAttr == null) {
                        throw new DeploymentException(Messages.getMessage("classAttributeNotFound",
                                                                          TAG_LISTENER));
                    }

                    className = classNameAttr.getAttributeValue();
                    clazz = Class.forName(className);
                    ContextManagerListener listener = (ContextManagerListener) clazz.newInstance();
                    contextManager.addContextManagerListener(listener);
                }
            }

            //loading the parameters.
            processParameters(contextManagerEle.getChildrenWithName(new QName(TAG_PARAMETER)),
                              contextManager,
                              null);

            // Load the replication patterns to be excluded. We load the following structure.
            /*<replication>
                <defaults>
                    <exclude name="foo.bar.*"/>
                </defaults>
                <context class="org.apache.axis2.context.ConfigurationContext">
                    <exclude name="my.sandesha.*"/>
                </context>
                <context class="org.apache.axis2.context.ServiceGroupContext">
                    <exclude name="my.sandesha.*"/>
                </context>
                <context class="org.apache.axis2.context.ServiceContext">
                    <exclude name="my.sandesha.*"/>
                </context>
            </replication>*/
            OMElement replicationEle =
                    contextManagerEle.getFirstChildWithName(new QName(TAG_REPLICATION));
            if (replicationEle != null) {
                // Process defaults
                OMElement defaultsEle =
                        replicationEle.getFirstChildWithName(new QName(TAG_DEFAULTS));
                if (defaultsEle != null) {
                    List defaults = new ArrayList();
                    for (Iterator iter = defaultsEle.getChildrenWithName(new QName(TAG_EXCLUDE));
                         iter.hasNext();) {
                        OMElement excludeEle = (OMElement) iter.next();
                        OMAttribute nameAtt = excludeEle.getAttribute(new QName(ATTRIBUTE_NAME));
                        defaults.add(nameAtt.getAttributeValue());
                    }
                    contextManager.setReplicationExcludePatterns(TAG_DEFAULTS, defaults);
                }

                // Process specifics
                for (Iterator iter = replicationEle.getChildrenWithName(new QName(TAG_CONTEXT));
                     iter.hasNext();) {
                    OMElement contextEle = (OMElement) iter.next();
                    String ctxClassName =
                            contextEle.getAttribute(new QName(ATTRIBUTE_CLASS)).getAttributeValue();
                    List excludes = new ArrayList();
                    for (Iterator iter2 = contextEle.getChildrenWithName(new QName(TAG_EXCLUDE));
                         iter2.hasNext();) {
                        OMElement excludeEle = (OMElement) iter2.next();
                        OMAttribute nameAtt = excludeEle.getAttribute(new QName(ATTRIBUTE_NAME));
                        excludes.add(nameAtt.getAttributeValue());
                    }
                    contextManager.setReplicationExcludePatterns(ctxClassName, excludes);
                }
            }
        }
    }


, Instance #
frags: 
(startLine=72 endLine=95 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00793/modules/integration/test/org/apache/axis2/engine/SOAPversionTest.java)
    public void testSOAP11() throws AxisFault {
        OMElement payload = createEnvelope();
        ConfigurationContext configCtx = ConfigurationContextFactory.
                createConfigurationContextFromFileSystem(null, null);
        ServiceClient client = new ServiceClient(configCtx, null);


        Options options = new Options();
        client.setOptions(options);
        options.setSoapVersionURI(
                SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        OperationClient opClinet = client.createClient(ServiceClient.ANON_OUT_IN_OP);
        opClinet.addMessageContext(prepareTheSOAPEnvelope(payload, options));
        opClinet.execute(true);

        SOAPEnvelope result =
                opClinet.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE).getEnvelope();
        assertEquals("SOAP Version received is not compatible",
                     SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI,
                     result.getNamespace().getNamespaceURI());
    }

(startLine=97 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00793/modules/integration/test/org/apache/axis2/engine/SOAPversionTest.java)
    public void testSOAP12() throws AxisFault {
        OMElement payload = createEnvelope();
        ConfigurationContext configCtx = ConfigurationContextFactory.
                createConfigurationContextFromFileSystem(null, null);
        ServiceClient client = new ServiceClient(configCtx, null);
        Options options = new Options();
        options.setSoapVersionURI(
                SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
        client.setOptions(options);

        OperationClient opClinet = client.createClient(ServiceClient.ANON_OUT_IN_OP);
        opClinet.addMessageContext(prepareTheSOAPEnvelope(payload, options));
        opClinet.execute(true);

        SOAPEnvelope result =
                opClinet.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE).getEnvelope();
        assertEquals("SOAP Version received is not compatible",
                     SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI,
                     result.getNamespace().getNamespaceURI());
    }

commonMethod: 
(startLine=172 endLine=195 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00794/modules/integration/test/org/apache/axis2/integration/LocalTestCase.java)
    /**
     * Get a pre-initialized ServiceClient set up to talk to our local
     * server.  If you want to set options, call this and then use getOptions()
     * on the return. Clients created using this method have their To EPR
     * preset to include the address for the service+operation.
     *
     * @return a ServiceClient, pre-initialized to talk using our local sender
     * @throws AxisFault if there's a problem
     */
    protected ServiceClient getClient(String serviceName, String operationName) throws AxisFault {
        TransportOutDescription td = new TransportOutDescription("local");
        td.setSender(sender);

        Options opts = new Options();
        opts.setTransportOut(td);
        
        String url = LocalTransportReceiver.CONFIG_CONTEXT.getServiceContextPath()+"/"+serviceName;

        opts.setTo(new EndpointReference(url));
        opts.setAction(operationName);
        ServiceClient client = new ServiceClient(clientCtx, null);
        client.setOptions(opts);
        return client;
    }


, Instance #
frags: 
(startLine=72 endLine=95 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00793/modules/integration/test/org/apache/axis2/engine/SOAPversionTest.java)
    public void testSOAP11() throws AxisFault {
        OMElement payload = createEnvelope();
        ConfigurationContext configCtx = ConfigurationContextFactory.
                createConfigurationContextFromFileSystem(null, null);
        ServiceClient client = new ServiceClient(configCtx, null);


        Options options = new Options();
        client.setOptions(options);
        options.setSoapVersionURI(
                SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        OperationClient opClinet = client.createClient(ServiceClient.ANON_OUT_IN_OP);
        opClinet.addMessageContext(prepareTheSOAPEnvelope(payload, options));
        opClinet.execute(true);

        SOAPEnvelope result =
                opClinet.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE).getEnvelope();
        assertEquals("SOAP Version received is not compatible",
                     SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI,
                     result.getNamespace().getNamespaceURI());
    }

(startLine=97 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00793/modules/integration/test/org/apache/axis2/engine/SOAPversionTest.java)
    public void testSOAP12() throws AxisFault {
        OMElement payload = createEnvelope();
        ConfigurationContext configCtx = ConfigurationContextFactory.
                createConfigurationContextFromFileSystem(null, null);
        ServiceClient client = new ServiceClient(configCtx, null);
        Options options = new Options();
        options.setSoapVersionURI(
                SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
        client.setOptions(options);

        OperationClient opClinet = client.createClient(ServiceClient.ANON_OUT_IN_OP);
        opClinet.addMessageContext(prepareTheSOAPEnvelope(payload, options));
        opClinet.execute(true);

        SOAPEnvelope result =
                opClinet.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE).getEnvelope();
        assertEquals("SOAP Version received is not compatible",
                     SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI,
                     result.getNamespace().getNamespaceURI());
    }

commonMethod: 
(startLine=26 endLine=35 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00794/modules/integration/test/org/apache/axis2/integration/TestingUtils.java)
    public static OMElement createDummyOMElement() {
        OMFactory fac = OMAbstractFactory.getOMFactory();
        OMNamespace omNs = fac.createOMNamespace("http://org.apache.axis2/xsd", "ns1");
        OMElement method = fac.createOMElement("echoOM", omNs);
        OMElement value = fac.createOMElement("myValue", omNs);
        value.addChild(
                fac.createOMText(value, "Isaac Asimov, The Foundation Trilogy"));
        method.addChild(value);
        return method;
    }


, Instance #
frags: 
(startLine=95 endLine=117 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00793/modules/kernel/src/org/apache/axis2/engine/AddressingBasedDispatcher.java)
        if (values[0] != null) {
            AxisConfiguration registry =
                    configurationContext.getAxisConfiguration();

            service = registry.getService(values[0]);

            // If the axisService is not null we get the binding that the request came to and
            // add it as a property to the messageContext
            if (service != null) {
                Map endpoints = service.getEndpoints();
                if (endpoints != null) {
                    if (endpoints.size() == 1) {
                        messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
                                                   endpoints.get(
                                                           service.getEndpointName()));
                    } else {
                        String endpointName = values[0].substring(values[0].indexOf(".") + 1);
                        messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
                                                   endpoints.get(endpointName));
                    }
                }
            }
        }

(startLine=73 endLine=97 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00793/modules/kernel/src/org/apache/axis2/engine/RequestURIBasedDispatcher.java)
            if ((values.length >= 1) && (values[0] != null)) {
                AxisConfiguration registry =
                        configurationContext.getAxisConfiguration();

                AxisService axisService = registry.getService(values[0]);

                // If the axisService is not null we get the binding that the request came to add
                // add it as a property to the messageContext
                if (axisService != null) {
                    Map endpoints = axisService.getEndpoints();
                    if (endpoints != null) {
                        if (endpoints.size() == 1) {
                            messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
                                                       endpoints.get(
                                                               axisService.getEndpointName()));
                        } else {
                            String endpointName = values[0].substring(values[0].indexOf(".") + 1);
                            messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
                                                       endpoints.get(endpointName));
                        }
                    }
                }

                return axisService;
            } else {

commonMethod: 
(startLine=41 endLine=95 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00794/modules/kernel/src/org/apache/axis2/dispatchers/RequestURIBasedServiceDispatcher.java)
    public AxisService findService(MessageContext messageContext) throws AxisFault {
        EndpointReference toEPR = messageContext.getTo();
        if (toEPR != null) {
            if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                log.debug(messageContext.getLogIDString() +
                        " Checking for Service using target endpoint address : " +
                        toEPR.getAddress());
            }
            String filePart = toEPR.getAddress();
            //REVIEW: (nagy) Parsing the RequestURI will also give us the operationName if present, so we could conceivably store it in the MessageContext, but doing so and retrieving it is probably no faster than simply reparsing the URI
            ConfigurationContext configurationContext = messageContext.getConfigurationContext();
            String[] values = Utils.parseRequestURLForServiceAndOperation(filePart,
                                                                          messageContext
                                                                                  .getConfigurationContext().getServiceContextPath());

            if ((values.length >= 1) && (values[0] != null)) {
            	
            	AxisConfiguration registry =
            		configurationContext.getAxisConfiguration();

            	AxisService axisService = registry.getService(values[0]);

            	// If the axisService is not null we get the binding that the request came to add
            	// add it as a property to the messageContext
            	if (axisService != null) {
            		Map endpoints = axisService.getEndpoints();
            		if (endpoints != null) {
            			if (endpoints.size() == 1) {
            				messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
            						endpoints.get(
            								axisService.getEndpointName()));
            			} else {
            				String endpointName = values[0].substring(values[0].indexOf(".") + 1);
            				messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
            						endpoints.get(endpointName));
            			}
            		}
            	}

            	return axisService;
            } else {
                if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                    log.debug(messageContext.getLogIDString() +
                            " Attempted to check for Service using target endpoint URI, but the service fragment was missing");
                }
                return null;
            }
        } else {
            if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                log.debug(messageContext.getLogIDString() +
                        " Attempted to check for Service using null target endpoint URI");
            }
            return null;
        }
    }


, Instance #
frags: 
(startLine=103 endLine=116 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00793/modules/kernel/src/org/apache/axis2/engine/AddressingBasedDispatcher.java)
            if (service != null) {
                Map endpoints = service.getEndpoints();
                if (endpoints != null) {
                    if (endpoints.size() == 1) {
                        messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
                                                   endpoints.get(
                                                           service.getEndpointName()));
                    } else {
                        String endpointName = values[0].substring(values[0].indexOf(".") + 1);
                        messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
                                                   endpoints.get(endpointName));
                    }
                }
            }

(startLine=81 endLine=94 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00793/modules/kernel/src/org/apache/axis2/engine/RequestURIBasedDispatcher.java)
                if (axisService != null) {
                    Map endpoints = axisService.getEndpoints();
                    if (endpoints != null) {
                        if (endpoints.size() == 1) {
                            messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
                                                       endpoints.get(
                                                               axisService.getEndpointName()));
                        } else {
                            String endpointName = values[0].substring(values[0].indexOf(".") + 1);
                            messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
                                                       endpoints.get(endpointName));
                        }
                    }
                }

commonMethod: 
(startLine=41 endLine=95 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00794/modules/kernel/src/org/apache/axis2/dispatchers/RequestURIBasedServiceDispatcher.java)
    public AxisService findService(MessageContext messageContext) throws AxisFault {
        EndpointReference toEPR = messageContext.getTo();
        if (toEPR != null) {
            if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                log.debug(messageContext.getLogIDString() +
                        " Checking for Service using target endpoint address : " +
                        toEPR.getAddress());
            }
            String filePart = toEPR.getAddress();
            //REVIEW: (nagy) Parsing the RequestURI will also give us the operationName if present, so we could conceivably store it in the MessageContext, but doing so and retrieving it is probably no faster than simply reparsing the URI
            ConfigurationContext configurationContext = messageContext.getConfigurationContext();
            String[] values = Utils.parseRequestURLForServiceAndOperation(filePart,
                                                                          messageContext
                                                                                  .getConfigurationContext().getServiceContextPath());

            if ((values.length >= 1) && (values[0] != null)) {
            	
            	AxisConfiguration registry =
            		configurationContext.getAxisConfiguration();

            	AxisService axisService = registry.getService(values[0]);

            	// If the axisService is not null we get the binding that the request came to add
            	// add it as a property to the messageContext
            	if (axisService != null) {
            		Map endpoints = axisService.getEndpoints();
            		if (endpoints != null) {
            			if (endpoints.size() == 1) {
            				messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
            						endpoints.get(
            								axisService.getEndpointName()));
            			} else {
            				String endpointName = values[0].substring(values[0].indexOf(".") + 1);
            				messageContext.setProperty(WSDL2Constants.ENDPOINT_LOCAL_NAME,
            						endpoints.get(endpointName));
            			}
            		}
            	}

            	return axisService;
            } else {
                if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                    log.debug(messageContext.getLogIDString() +
                            " Attempted to check for Service using target endpoint URI, but the service fragment was missing");
                }
                return null;
            }
        } else {
            if (LoggingControl.debugLoggingAllowed && log.isDebugEnabled()) {
                log.debug(messageContext.getLogIDString() +
                        " Attempted to check for Service using null target endpoint URI");
            }
            return null;
        }
    }


, Instance #
frags: 
(startLine=80 endLine=100 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00795/modules/integration/test/org/apache/axis2/engine/ServiceDispatchingTest.java)
    public void testDispatchWithURLAndSOAPAction() throws Exception {
        SOAPFactory fac = OMAbstractFactory.getSOAP11Factory();
        OMNamespace omNs = fac.createOMNamespace("http://dummyURL", "my");
        OMElement payload = fac.createOMElement("echoOMElementRequest", omNs);
        OMElement value = fac.createOMElement("myValue", omNs);
        value.addChild(
                fac.createOMText(value, "Isaac Asimov, The Foundation Trilogy"));
        payload.addChild(value);
        Options options = new Options();
        options.setTo(
                new EndpointReference("http://127.0.0.1:5555/axis2/services/EchoXMLService/"));
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
        options.setAction("echoOMElement");
        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        ServiceClient sender = new ServiceClient(configContext, null);
        sender.setOptions(options);

        OMElement result = sender.sendReceive(payload);
        TestingUtils.compareWithCreatedOMElement(result);
    }

(startLine=102 endLine=123 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00795/modules/integration/test/org/apache/axis2/engine/ServiceDispatchingTest.java)
    public void testDispatchWithSOAPBody() throws Exception {
        SOAPFactory fac = OMAbstractFactory.getSOAP11Factory();

        OMNamespace omNs = fac.createOMNamespace(
                "http://127.0.0.1:5555/axis2/services/EchoXMLService", "my");
        OMElement payload = fac.createOMElement("echoOMElement", omNs);
        OMElement value = fac.createOMElement("myValue", omNs);
        value.addChild(
                fac.createOMText(value, "Isaac Asimov, The Foundation Trilogy"));
        payload.addChild(value);
        Options options = new Options();
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        ServiceClient sender = new ServiceClient(configContext, null);
        sender.setOptions(options);
        options.setTo(targetEPR);

        OMElement result = sender.sendReceive(payload);

        TestingUtils.compareWithCreatedOMElement(result);
    }

commonMethod: 
(startLine=172 endLine=195 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00796/modules/integration/test/org/apache/axis2/integration/LocalTestCase.java)
    /**
     * Get a pre-initialized ServiceClient set up to talk to our local
     * server.  If you want to set options, call this and then use getOptions()
     * on the return. Clients created using this method have their To EPR
     * preset to include the address for the service+operation.
     *
     * @return a ServiceClient, pre-initialized to talk using our local sender
     * @throws AxisFault if there's a problem
     */
    protected ServiceClient getClient(String serviceName, String operationName) throws AxisFault {
        TransportOutDescription td = new TransportOutDescription("local");
        td.setSender(sender);

        Options opts = new Options();
        opts.setTransportOut(td);
        
        String url = LocalTransportReceiver.CONFIG_CONTEXT.getServiceContextPath()+"/"+serviceName;

        opts.setTo(new EndpointReference(url));
        opts.setAction(operationName);
        ServiceClient client = new ServiceClient(clientCtx, null);
        client.setOptions(opts);
        return client;
    }


, Instance #
frags: 
(startLine=343 endLine=361 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00797/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java)
        else if (obj == serverSide){
            if(clientSide.isSelected()){
                rdasync.setEnabled(true);
                rdBoth.setEnabled(true);
                rdsyn.setEnabled(true);
                chkTestCase.setEnabled(true);
                serviceXML.setEnabled(false);
                serverSideInterface.setEnabled(false);
            }
            else
            {
                rdasync.setEnabled(false);
                rdBoth.setEnabled(false);
                rdsyn.setEnabled(false);
                chkTestCase.setEnabled(false);
                serviceXML.setEnabled(true);
                serverSideInterface.setEnabled(true);
            }
        }

(startLine=362 endLine=380 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00797/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java)
        else if (obj == clientSide){
            if(serverSide.isSelected()){
                rdasync.setEnabled(false);
                rdBoth.setEnabled(false);
                rdsyn.setEnabled(false);
                serviceXML.setEnabled(true);
                chkTestCase.setEnabled(false);
                serverSideInterface.setEnabled(true);
            }
            else
            {
                rdasync.setEnabled(true);
                rdBoth.setEnabled(true);
                rdsyn.setEnabled(true);
                chkTestCase.setEnabled(true);
                serviceXML.setEnabled(false);
                serverSideInterface.setEnabled(false);
            }
        }

commonMethod: 
(startLine=69 endLine=74 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00798/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BottomPanel.java)
    public static void setEnable(boolean back,boolean next, boolean finish, boolean cancel) {
        btnBack.setEnabled(back);
        btnNext.setEnabled(next);
        btnFinish.setEnabled(finish);
        btnCancel.setEnabled(cancel);
    }


, Instance #
frags: 
(startLine=343 endLine=361 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00797/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java)
        else if (obj == serverSide){
            if(clientSide.isSelected()){
                rdasync.setEnabled(true);
                rdBoth.setEnabled(true);
                rdsyn.setEnabled(true);
                chkTestCase.setEnabled(true);
                serviceXML.setEnabled(false);
                serverSideInterface.setEnabled(false);
            }
            else
            {
                rdasync.setEnabled(false);
                rdBoth.setEnabled(false);
                rdsyn.setEnabled(false);
                chkTestCase.setEnabled(false);
                serviceXML.setEnabled(true);
                serverSideInterface.setEnabled(true);
            }
        }

(startLine=362 endLine=380 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00797/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java)
        else if (obj == clientSide){
            if(serverSide.isSelected()){
                rdasync.setEnabled(false);
                rdBoth.setEnabled(false);
                rdsyn.setEnabled(false);
                serviceXML.setEnabled(true);
                chkTestCase.setEnabled(false);
                serverSideInterface.setEnabled(true);
            }
            else
            {
                rdasync.setEnabled(true);
                rdBoth.setEnabled(true);
                rdsyn.setEnabled(true);
                chkTestCase.setEnabled(true);
                serviceXML.setEnabled(false);
                serverSideInterface.setEnabled(false);
            }
        }

commonMethod: 
(startLine=217 endLine=237 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00798/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java)
    private void enabel(){
        cmbdbtype .setEnabled(false);
        cmbLan .setEnabled(false);
        cmbPortName .setEnabled(false);
        cmbServiceName .setEnabled(false);
        txtPacakgeName.setEnabled(false);
        chkTestCase.setEnabled(false);
        clientSide .setEnabled(false);
        rdsyn .setEnabled(false);
        rdBoth .setEnabled(false);
        rdasync .setEnabled(false);
        serverSide .setEnabled(false);
        serverSideInterface .setEnabled(false);
        serviceXML .setEnabled(false);
        all.setEnabled(false);
        table.setEnabled(false);
        spTable.setEnabled(false);



    }


, Instance #
frags: 
(startLine=343 endLine=361 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00797/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java)
        else if (obj == serverSide){
            if(clientSide.isSelected()){
                rdasync.setEnabled(true);
                rdBoth.setEnabled(true);
                rdsyn.setEnabled(true);
                chkTestCase.setEnabled(true);
                serviceXML.setEnabled(false);
                serverSideInterface.setEnabled(false);
            }
            else
            {
                rdasync.setEnabled(false);
                rdBoth.setEnabled(false);
                rdsyn.setEnabled(false);
                chkTestCase.setEnabled(false);
                serviceXML.setEnabled(true);
                serverSideInterface.setEnabled(true);
            }
        }

(startLine=362 endLine=380 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00797/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java)
        else if (obj == clientSide){
            if(serverSide.isSelected()){
                rdasync.setEnabled(false);
                rdBoth.setEnabled(false);
                rdsyn.setEnabled(false);
                serviceXML.setEnabled(true);
                chkTestCase.setEnabled(false);
                serverSideInterface.setEnabled(true);
            }
            else
            {
                rdasync.setEnabled(true);
                rdBoth.setEnabled(true);
                rdsyn.setEnabled(true);
                chkTestCase.setEnabled(true);
                serviceXML.setEnabled(false);
                serverSideInterface.setEnabled(false);
            }
        }

commonMethod: 
(startLine=395 endLine=405 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00798/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java)
    private void setDefault(){
        buttonGroup.setSelected(rdasync.getModel(),false);
        buttonGroup.setSelected(rdsyn .getModel(),false);
        buttonGroup.setSelected(rdBoth.getModel(),false);
        rdasync .setSelected(false);
        rdsyn .setSelected(false);
        rdBoth .setSelected(false);
        serviceXML .setSelected(false);
        serverSideInterface .setSelected(false);
        BottomPanel.setEnable(true,true,false,true);
    }


, Instance #
frags: 
(startLine=165 endLine=179 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00797/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BottomPanel.java)
                if (output.equalsIgnoreCase("radCurrentProject")) {

                    try {

                        java2CodeFrame.generateDefaultServerCode(temp, (String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem());
                    } catch (Exception e1) {
                        StringWriter writer = new StringWriter();
                        JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
                                "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
                        java2CodeFrame.dispose();
                        return;
                    }


                } else {

(startLine=206 endLine=222 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00797/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BottomPanel.java)
                if (output.equalsIgnoreCase("radCurrentProject")) {
                    try {

                        java2CodeFrame.generateDefaultServerCode(temp, (String) java2CodeFrame.outputpane.cmbModuleSrc.getSelectedItem());
                        File temp2 = java2CodeFrame.optionPane.setDefaultClientConfigurations();
                        java2CodeFrame.generateDefaultClientCode(temp2);

                    } catch (Exception e1) {
                        StringWriter writer = new StringWriter();
                        JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
                                "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
                        java2CodeFrame.dispose();
                        return;

                    }

                } else {

(startLine=225 endLine=238 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00797/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/BottomPanel.java)
                    if (outputPath.exists()) {
                        try {
                            java2CodeFrame.generateDefaultServerCodeCustomLocation(path);
                            File temp2 = java2CodeFrame.optionPane.setDefaultClientConfigurations();
                            java2CodeFrame.generateDefaultClientCode(temp2);
                        } catch (Exception e1) {
                            StringWriter writer = new StringWriter();
                            JOptionPane.showMessageDialog(java2CodeFrame, "Code genaration failed!" + writer.toString(),
                                    "Axis2 code generation", JOptionPane.ERROR_MESSAGE);
                            java2CodeFrame.dispose();
                            return;
                        }

                    } else {

commonMethod: 
(startLine=284 endLine=306 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00798/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/idea/SecondFrame.java)
    public void setDefaultCommonConfigurations() {

        setStatus();

        codegenBean.setLanguage("java");

        codegenBean.setDatabindingName("adb");

        codegenBean.setTestCase(false);

        codegenBean.setServerSide(false);

        codegenBean.setPackageName(codegenBean.packageFromTargetNamespace());

        codegenBean.setServerXML(false);

        codegenBean.setServiceName(cmbServiceName.getSelectedItem().toString() );

        codegenBean.setPortName(cmbPortName .getSelectedItem().toString());

        codegenBean.setNamespace2packageList(getNs2PkgMapping());

    }


, Instance #
frags: 
(startLine=63 endLine=88 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00822/modules/kernel/src/org/apache/axis2/phaseresolver/PhaseResolver.java)
                case PhaseMetadata.IN_FLOW : {
                    ArrayList phases = new ArrayList();

                    if (axisConfig != null) {
                        Iterator itr_axis_config =
                                axisConfig.getInFlowPhases().iterator();

                        while (itr_axis_config.hasNext()) {
                            Object o = itr_axis_config.next();

                            phases.add(o);
                        }
                    }

                    Iterator itr_ops = axisOperation.getRemainingPhasesInFlow().iterator();

                    while (itr_ops.hasNext()) {
                        Object o = itr_ops.next();

                        phases.add(o);
                    }

                    phaseHolder = new PhaseHolder(phases);

                    break;
                }

(startLine=90 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00822/modules/kernel/src/org/apache/axis2/phaseresolver/PhaseResolver.java)
                case PhaseMetadata.OUT_FLOW : {
                    ArrayList phases = new ArrayList();
                    Iterator itr_ops = axisOperation.getPhasesOutFlow().iterator();

                    while (itr_ops.hasNext()) {
                        Object o = itr_ops.next();

                        phases.add(o);
                    }

                    if (axisConfig != null) {
                        Iterator itr_axis_config = axisConfig.getOutFlowPhases().iterator();

                        while (itr_axis_config.hasNext()) {
                            Object o = itr_axis_config.next();

                            phases.add(o);
                        }
                    }

                    phaseHolder = new PhaseHolder(phases);

                    break;
                }

(startLine=115 endLine=139 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00822/modules/kernel/src/org/apache/axis2/phaseresolver/PhaseResolver.java)
                case PhaseMetadata.FAULT_IN_FLOW : {
                    ArrayList phases = new ArrayList();

                    if (axisConfig != null) {
                        Iterator itr_axis_config = axisConfig.getInFaultFlowPhases().iterator();

                        while (itr_axis_config.hasNext()) {
                            Object o = itr_axis_config.next();

                            phases.add(o);
                        }
                    }

                    Iterator itr_ops = axisOperation.getPhasesInFaultFlow().iterator();

                    while (itr_ops.hasNext()) {
                        Object o = itr_ops.next();

                        phases.add(o);
                    }

                    phaseHolder = new PhaseHolder(phases);

                    break;
                }

(startLine=141 endLine=158 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00822/modules/kernel/src/org/apache/axis2/phaseresolver/PhaseResolver.java)
                case PhaseMetadata.FAULT_OUT_FLOW : {
                    ArrayList phases = new ArrayList();
                    Iterator itr_ops = axisOperation.getPhasesOutFaultFlow().iterator();
                    while (itr_ops.hasNext()) {
                        Object o = itr_ops.next();

                        phases.add(o);
                    }
                    if (axisConfig != null) {
                        Iterator itr_axis_config = axisConfig.getOutFaultFlowPhases().iterator();
                        while (itr_axis_config.hasNext()) {
                            Object o = itr_axis_config.next();
                            phases.add(o);
                        }
                    }
                    phaseHolder = new PhaseHolder(phases);
                    break;
                }

commonMethod: 
(startLine=56 endLine=64 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/kernel/src/org/apache/axis2/phaseresolver/PhaseResolver.java)
    private void engageModuleToFlow(Flow flow, List handlerChain) throws PhaseException {
        phaseHolder = new PhaseHolder(handlerChain);
        if (flow != null) {
            for (int j = 0; j < flow.getHandlerCount(); j++) {
                HandlerDescription metadata = flow.getHandler(j);
                phaseHolder.addHandler(metadata);
            }
        }
    }


, Instance #
frags: 
(startLine=103 endLine=134 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testEditBean() throws AxisFault {
        configureSystem("editBean");

        Options options = new Options();
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);
        sender.setOptions(options);
        options.setTo(targetEPR);

        MyBean bean = new MyBean();
        bean.setAge(100);
        bean.setName("Deepal");
        bean.setValue(false);
        AddressBean ab = new AddressBean();
        ab.setNumber(1010);
        ab.setTown("Colombo3");
        bean.setAddress(ab);


        ArrayList args = new ArrayList();
        args.add(bean);
        args.add("159");

        OMElement response = sender.invokeBlocking(operationName, args.toArray());
        MyBean resBean = (MyBean)BeanUtil.deserialize(MyBean.class, response.getFirstElement(),
                                                      new DefaultObjectSupplier(), null);
        assertNotNull(resBean);
        assertEquals(resBean.getAge(), 159);
    }

(startLine=148 endLine=180 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testEchoBean() throws AxisFault {
        configureSystem("echoBean");

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);
        sender.setOptions(options);

        MyBean bean = new MyBean();
        bean.setAge(100);
        bean.setName("Deepal");
        bean.setValue(false);
        AddressBean ab = new AddressBean();
        ab.setNumber(1010);
        ab.setTown("Colombo3");
        bean.setAddress(ab);

        ArrayList args = new ArrayList();
        args.add(bean);


        OMElement response = sender.invokeBlocking(operationName, args.toArray());
        MyBean resBean = (MyBean)BeanUtil.deserialize(MyBean.class,
                                                      response.getFirstElement(),
                                                      new DefaultObjectSupplier(), null);
//        MyBean resBean =(MyBean) new  BeanSerializer(MyBean.class,response).deserilze();
        assertNotNull(resBean);
        assertEquals(resBean.getAge(), 100);
    }

(startLine=525 endLine=557 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testechoBean2() throws AxisFault {
        configureSystem("echoBean");

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);
        sender.setOptions(options);

        MyBean bean = new MyBean();
        bean.setAge(100);
        bean.setName("Deepal");
        bean.setValue(false);
        AddressBean ab = new AddressBean();
        ab.setNumber(1010);
        ab.setTown("Colombo3");
        bean.setAddress(ab);

        ArrayList args = new ArrayList();
        args.add(bean);

        ArrayList ret = new ArrayList();
        ret.add(MyBean.class);

        Object [] response = sender.invokeBlocking(operationName, args.toArray(),
                                                   (Class[])ret.toArray(new Class[ret.size()]));
        MyBean resBean = (MyBean)response[0];
        assertNotNull(resBean);
        assertEquals(resBean.getAge(), 100);
    }

commonMethod: 
(startLine=45 endLine=63 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00824/modules/integration/test/org/apache/axis2/integration/RPCLocalTestCase.java)
    /**
     * Get a pre-initialized ServiceClient set up to talk to our local
     * server.  If you want to set options, call this and then use getOptions()
     * on the return. Clients created using this method have their To EPR
     * preset to include the address for the service+operation.
     *
     * @return a ServiceClient, pre-initialized to talk using our local sender
     * @throws AxisFault if there's a problem
     */
    protected RPCServiceClient getRPCClient(String serviceName, String operationName) throws AxisFault {
        String url = LocalTransportReceiver.CONFIG_CONTEXT.getServiceContextPath()+"/"+serviceName;

        Options opts = getOptions();
        opts.setTo(new EndpointReference(url));
        opts.setAction(operationName);
        RPCServiceClient client = new RPCServiceClient(clientCtx, null);
        client.setOptions(opts);
        return client;
    }


, Instance #
frags: 
(startLine=97 endLine=139 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/MultirefTest.java)
    public void testMulitref1() throws AxisFault {
        configureSystem("echoString");
        OMFactory fac = OMAbstractFactory.getOMFactory();

        OMNamespace omNs = fac.createOMNamespace(NAMESPACE, "my");
        OMElement method = fac.createOMElement("echoString", omNs);
        OMElement value = fac.createOMElement("arg0", null);
        value.addAttribute(fac.createOMAttribute("href", null, "#1"));
        method.addChild(value);
        SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope envelope = factory.getDefaultEnvelope();
        envelope.getBody().addChild(method);

        OMElement ref = fac.createOMElement("reference", null);
        ref.addAttribute(fac.createOMAttribute("id", null, "1"));
        ref.setText("hello Axis2");
        envelope.getBody().addChild(ref);

        Options options = new Options();

        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext = ConfigurationContextFactory
                .createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient rpcClient = new RPCServiceClient(configContext, null);
        rpcClient.setOptions(options);
        MessageContext reqMessageContext = configContext.createMessageContext();
        OperationClient opClinet = rpcClient.createClient(ServiceClient.ANON_OUT_IN_OP);
        opClinet.setOptions(options);
        reqMessageContext.setEnvelope(envelope);

        opClinet.addMessageContext(reqMessageContext);
        opClinet.execute(true);

        MessageContext responseMessageContx =
                opClinet.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);

        SOAPEnvelope env = responseMessageContx.getEnvelope();


        assertEquals(env.getBody().getFirstElement().getFirstElement().getText(), "hello Axis2");
    }

(startLine=141 endLine=192 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/MultirefTest.java)
    public void testadd() throws AxisFault {
        configureSystem("add");
        OMFactory fac = OMAbstractFactory.getOMFactory();

        OMNamespace omNs = fac.createOMNamespace(NAMESPACE, "my");
        OMElement method = fac.createOMElement("add", omNs);
        OMElement value = fac.createOMElement("arg0", null);
        value.addAttribute(fac.createOMAttribute("href", null, "#1"));
        method.addChild(value);

        OMElement value2 = fac.createOMElement("arg1", null);
        value2.addAttribute(fac.createOMAttribute("href", null, "#2"));
        method.addChild(value2);

        SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope envelope = factory.getDefaultEnvelope();
        envelope.getBody().addChild(method);

        OMElement ref = fac.createOMElement("reference", null);
        ref.addAttribute(fac.createOMAttribute("id", null, "1"));
        ref.setText("10");
        envelope.getBody().addChild(ref);

        OMElement ref2 = fac.createOMElement("reference", null);
        ref2.addAttribute(fac.createOMAttribute("id", null, "2"));
        ref2.setText("10");
        envelope.getBody().addChild(ref2);

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext = ConfigurationContextFactory
                .createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient rpcClient = new RPCServiceClient(configContext, null);
        rpcClient.setOptions(options);
        MessageContext reqMessageContext = configContext.createMessageContext();
        OperationClient opClinet = rpcClient.createClient(ServiceClient.ANON_OUT_IN_OP);
        opClinet.setOptions(options);
        reqMessageContext.setEnvelope(envelope);

        opClinet.addMessageContext(reqMessageContext);
        opClinet.execute(true);

        MessageContext responseMessageContx =
                opClinet.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);

        SOAPEnvelope env = responseMessageContx.getEnvelope();


        assertEquals(env.getBody().getFirstElement().getFirstElement().getText(), "20");
    }

(startLine=194 endLine=238 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/MultirefTest.java)
    public void testaddSameRef() throws AxisFault {
        configureSystem("add");
        OMFactory fac = OMAbstractFactory.getOMFactory();

        OMNamespace omNs = fac.createOMNamespace(NAMESPACE, "my");
        OMElement method = fac.createOMElement("add", omNs);
        OMElement value = fac.createOMElement("arg0", null);
        value.addAttribute(fac.createOMAttribute("href", null, "#1"));
        method.addChild(value);

        OMElement value2 = fac.createOMElement("arg1", null);
        value2.addAttribute(fac.createOMAttribute("href", null, "#1"));
        method.addChild(value2);

        SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope envelope = factory.getDefaultEnvelope();
        envelope.getBody().addChild(method);

        OMElement ref = fac.createOMElement("reference", null);
        ref.addAttribute(fac.createOMAttribute("id", null, "1"));
        ref.setText("10");
        envelope.getBody().addChild(ref);

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext = ConfigurationContextFactory
                .createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient rpcClient = new RPCServiceClient(configContext, null);
        rpcClient.setOptions(options);
        MessageContext reqMessageContext = configContext.createMessageContext();
        OperationClient opClinet = rpcClient.createClient(ServiceClient.ANON_OUT_IN_OP);
        opClinet.setOptions(options);
        reqMessageContext.setEnvelope(envelope);

        opClinet.addMessageContext(reqMessageContext);
        opClinet.execute(true);

        MessageContext responseMessageContx =
                opClinet.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
        SOAPEnvelope env = responseMessageContx.getEnvelope();

        assertEquals(env.getBody().getFirstElement().getFirstElement().getText(), "20");
    }

(startLine=240 endLine=295 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/MultirefTest.java)
    public void testaddError() {
        try {
            configureSystem("add");
            OMFactory fac = OMAbstractFactory.getOMFactory();

            OMNamespace omNs = fac.createOMNamespace(NAMESPACE, "my");
            OMElement method = fac.createOMElement("add", omNs);
            OMElement value = fac.createOMElement("arg0", null);
            value.addAttribute(fac.createOMAttribute("href", null, "#1"));
            method.addChild(value);

            OMElement value2 = fac.createOMElement("arg1", null);
            value2.addAttribute(fac.createOMAttribute("href", null, "#2"));
            method.addChild(value2);

            SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();
            SOAPEnvelope envelope = factory.getDefaultEnvelope();
            envelope.getBody().addChild(method);

            OMElement ref = fac.createOMElement("reference", null);
            ref.addAttribute(fac.createOMAttribute("id", null, "1"));
            ref.setText("10");
            envelope.getBody().addChild(ref);

            OMElement ref2 = fac.createOMElement("reference", null);
            ref2.addAttribute(fac.createOMAttribute("id", null, "3"));
            ref2.setText("10");
            envelope.getBody().addChild(ref2);

            Options options = new Options();
            options.setTo(targetEPR);
            options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

            ConfigurationContext configContext = ConfigurationContextFactory
                    .createConfigurationContextFromFileSystem(null, null);
            RPCServiceClient rpcClient = new RPCServiceClient(configContext, null);
            rpcClient.setOptions(options);
            MessageContext reqMessageContext = configContext.createMessageContext();;
            OperationClient opClinet = rpcClient.createClient(ServiceClient.ANON_OUT_IN_OP);
            opClinet.setOptions(options);
            reqMessageContext.setEnvelope(envelope);

            opClinet.addMessageContext(reqMessageContext);
            opClinet.execute(true);

            fail("This should fail with : " + "org.apache.axis2.AxisFault: Invalid reference :2");
        } catch (AxisFault axisFault) {
            String val = axisFault.getFaultDetailElement().toString();
            System.out.println("val = " + val);
            int index = val.indexOf("org.apache.axis2.AxisFault: Invalid reference :2");
            if (index < 0) {
                fail("This should fail with : " +
                        "org.apache.axis2.AxisFault: Invalid reference :2");
            }
        }
    }

commonMethod: 
(startLine=45 endLine=63 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00824/modules/integration/test/org/apache/axis2/integration/RPCLocalTestCase.java)
    /**
     * Get a pre-initialized ServiceClient set up to talk to our local
     * server.  If you want to set options, call this and then use getOptions()
     * on the return. Clients created using this method have their To EPR
     * preset to include the address for the service+operation.
     *
     * @return a ServiceClient, pre-initialized to talk using our local sender
     * @throws AxisFault if there's a problem
     */
    protected RPCServiceClient getRPCClient(String serviceName, String operationName) throws AxisFault {
        String url = LocalTransportReceiver.CONFIG_CONTEXT.getServiceContextPath()+"/"+serviceName;

        Options opts = getOptions();
        opts.setTo(new EndpointReference(url));
        opts.setAction(operationName);
        RPCServiceClient client = new RPCServiceClient(clientCtx, null);
        client.setOptions(opts);
        return client;
    }


, Instance #
frags: 
(startLine=298 endLine=357 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/MultirefTest.java)
    public void testMulitrefBean() throws Exception {
        configureSystem("editBean");
        OMFactory fac = OMAbstractFactory.getOMFactory();

        OMNamespace omNs = fac.createOMNamespace(NAMESPACE, "my");
        OMElement method = fac.createOMElement("editBean", omNs);
        OMElement value = fac.createOMElement("arg0", null);
        value.addAttribute(fac.createOMAttribute("href", null, "#1"));
        method.addChild(value);
        OMElement value2 = fac.createOMElement("arg1", null);
        value2.setText("159");
        method.addChild(value2);


        SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope envelope = factory.getDefaultEnvelope();
        envelope.getBody().addChild(method);


        String ref1 =
                "<reference id=\"1\"><name>Deepal</name><value href=\"#2\"/><address href=\"#3\"/></reference>";
        OMElement om1 = getOMElement(ref1, fac);
        envelope.getBody().addChild(om1);
        String ref2 = "<reference id=\"2\">false</reference>";
        OMElement om2 = getOMElement(ref2, fac);
        envelope.getBody().addChild(om2);
        String ref3 = "<reference id=\"3\"><town href=\"#4\"/><number>1010</number></reference>";
        OMElement om3 = getOMElement(ref3, fac);
        envelope.getBody().addChild(om3);
        String ref4 = "<reference id=\"4\">Colombo3</reference>";
        OMElement om4 = getOMElement(ref4, fac);
        envelope.getBody().addChild(om4);

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext = ConfigurationContextFactory
                .createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient rpcClient = new RPCServiceClient(configContext, null);
        rpcClient.setOptions(options);
        MessageContext reqMessageContext = configContext.createMessageContext();
        OperationClient opClinet = rpcClient.createClient(ServiceClient.ANON_OUT_IN_OP);
        opClinet.setOptions(options);
        reqMessageContext.setEnvelope(envelope);

        opClinet.addMessageContext(reqMessageContext);
        opClinet.execute(true);

        MessageContext responseMessageContx =
                opClinet.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);

        SOAPEnvelope env = responseMessageContx.getEnvelope();

        OMElement response = env.getBody().getFirstElement();
        MyBean resBean = (MyBean)BeanUtil.deserialize(MyBean.class, response.getFirstElement(),
                                                      new DefaultObjectSupplier(), null);
        assertNotNull(resBean);
        assertEquals(resBean.getAge(), 159);
    }

(startLine=360 endLine=419 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/MultirefTest.java)
    public void testbeanOM() throws Exception {
        configureSystem("beanOM");
        OMFactory fac = OMAbstractFactory.getOMFactory();

        OMNamespace omNs = fac.createOMNamespace(NAMESPACE, "my");
        OMElement method = fac.createOMElement("beanOM", omNs);
        OMElement value = fac.createOMElement("arg0", null);
        value.addAttribute(fac.createOMAttribute("href", null, "#1"));
        method.addChild(value);
        OMElement value2 = fac.createOMElement("arg1", null);
        value2.setText("159");
        method.addChild(value2);


        SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope envelope = factory.getDefaultEnvelope();
        envelope.getBody().addChild(method);


        String ref1 =
                "<reference id=\"1\"><name>Deepal</name><value href=\"#2\"/><address href=\"#3\"/></reference>";
        OMElement om1 = getOMElement(ref1, fac);
        envelope.getBody().addChild(om1);
        String ref2 = "<reference id=\"2\">false</reference>";
        OMElement om2 = getOMElement(ref2, fac);
        envelope.getBody().addChild(om2);
        String ref3 = "<reference id=\"3\"><town href=\"#4\"/><number>1010</number></reference>";
        OMElement om3 = getOMElement(ref3, fac);
        envelope.getBody().addChild(om3);
        String ref4 = "<reference id=\"4\">Colombo3</reference>";
        OMElement om4 = getOMElement(ref4, fac);
        envelope.getBody().addChild(om4);

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext = ConfigurationContextFactory
                .createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient rpcClient = new RPCServiceClient(configContext, null);
        rpcClient.setOptions(options);
        MessageContext reqMessageContext = configContext.createMessageContext();;
        OperationClient opClinet = rpcClient.createClient(ServiceClient.ANON_OUT_IN_OP);
        opClinet.setOptions(options);
        reqMessageContext.setEnvelope(envelope);

        opClinet.addMessageContext(reqMessageContext);
        opClinet.execute(true);

        MessageContext responseMessageContx =
                opClinet.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);

        SOAPEnvelope env = responseMessageContx.getEnvelope();

        OMElement response = env.getBody().getFirstElement();
        MyBean resBean = (MyBean)BeanUtil.deserialize(MyBean.class, response.getFirstElement(),
                                                      new DefaultObjectSupplier(), null);
        assertNotNull(resBean);
        assertEquals(resBean.getAge(), 159);
    }

(startLine=422 endLine=486 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/MultirefTest.java)
    public void testomrefs() throws Exception {
        configureSystem("omrefs");
        OMFactory fac = OMAbstractFactory.getOMFactory();

        OMNamespace omNs = fac.createOMNamespace(NAMESPACE, "my");
        OMElement method = fac.createOMElement("omrefs", omNs);

        OMElement value = fac.createOMElement("arg0", null);
        value.addAttribute(fac.createOMAttribute("href", null, "#1"));
        method.addChild(value);

        OMElement value2 = fac.createOMElement("arg1", null);
        value2.addAttribute(fac.createOMAttribute("href", null, "#1"));
        method.addChild(value2);


        SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope envelope = factory.getDefaultEnvelope();
        envelope.getBody().addChild(method);


        String ref1 =
                "<reference id=\"1\"><name>Deepal</name><value href=\"#2\"/><address href=\"#3\"/></reference>";
        OMElement om1 = getOMElement(ref1, fac);
        envelope.getBody().addChild(om1);
        String ref2 = "<reference id=\"2\">false</reference>";
        OMElement om2 = getOMElement(ref2, fac);
        envelope.getBody().addChild(om2);
        String ref3 = "<reference id=\"3\"><town href=\"#4\"/><number>1010</number></reference>";
        OMElement om3 = getOMElement(ref3, fac);
        envelope.getBody().addChild(om3);
        String ref4 = "<reference id=\"4\">Colombo3</reference>";
        OMElement om4 = getOMElement(ref4, fac);
        envelope.getBody().addChild(om4);
        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext = ConfigurationContextFactory
                .createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient rpcClient = new RPCServiceClient(configContext, null);
        rpcClient.setOptions(options);
        MessageContext reqMessageContext = configContext.createMessageContext();;
        OperationClient opClinet = rpcClient.createClient(ServiceClient.ANON_OUT_IN_OP);
        opClinet.setOptions(options);
        reqMessageContext.setEnvelope(envelope);

        opClinet.addMessageContext(reqMessageContext);
        opClinet.execute(true);

        MessageContext responseMessageContx =
                opClinet.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);

        SOAPEnvelope env = responseMessageContx.getEnvelope();

        OMElement response = env.getBody().getFirstElement();

        ArrayList args = new ArrayList();
        args.add(boolean.class);

        Object [] resBean =
                BeanUtil.deserialize(response, args.toArray(), new DefaultObjectSupplier());
        assertNotNull(resBean);
        assertEquals(((Boolean)resBean[0]).booleanValue(), true);
    }

commonMethod: 
(startLine=45 endLine=63 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00824/modules/integration/test/org/apache/axis2/integration/RPCLocalTestCase.java)
    /**
     * Get a pre-initialized ServiceClient set up to talk to our local
     * server.  If you want to set options, call this and then use getOptions()
     * on the return. Clients created using this method have their To EPR
     * preset to include the address for the service+operation.
     *
     * @return a ServiceClient, pre-initialized to talk using our local sender
     * @throws AxisFault if there's a problem
     */
    protected RPCServiceClient getRPCClient(String serviceName, String operationName) throws AxisFault {
        String url = LocalTransportReceiver.CONFIG_CONTEXT.getServiceContextPath()+"/"+serviceName;

        Options opts = getOptions();
        opts.setTo(new EndpointReference(url));
        opts.setAction(operationName);
        RPCServiceClient client = new RPCServiceClient(clientCtx, null);
        client.setOptions(opts);
        return client;
    }


, Instance #
frags: 
(startLine=215 endLine=231 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testEchoString() throws AxisFault {
        configureSystem("echoString");

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);
        sender.setOptions(options);

        ArrayList args = new ArrayList();
        args.add("foo");
        OMElement response = sender.invokeBlocking(operationName, args.toArray());
        assertEquals(response.getFirstElement().getText(), "foo");
    }

(startLine=233 endLine=250 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testEchoInt() throws AxisFault {
        configureSystem("echoInt");

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);
        sender.setOptions(options);

        ArrayList args = new ArrayList();
        args.add("100");

        OMElement response = sender.invokeBlocking(operationName, args.toArray());
        assertEquals(Integer.parseInt(response.getFirstElement().getText()), 100);
    }

(startLine=252 endLine=268 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testAdd() throws AxisFault {
        configureSystem("add");
        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
        sender.setOptions(options);
        ArrayList args = new ArrayList();
        args.add("100");
        args.add("200");

        OMElement response = sender.invokeBlocking(operationName, args.toArray());
        assertEquals(Integer.parseInt(response.getFirstElement().getText()), 300);
    }

(startLine=270 endLine=286 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testByteArray() throws AxisFault {
        configureSystem("testByteArray");
        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
        sender.setOptions(options);
        ArrayList args = new ArrayList();
        String hello = "hello";
        args.add(hello.getBytes());

        OMElement response = sender.invokeBlocking(operationName, args.toArray());
        assertEquals(response.getFirstElement().getText(), hello);
    }

(startLine=290 endLine=308 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testDivide() throws AxisFault {
        configureSystem("divide");

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);
        sender.setOptions(options);


        ArrayList args = new ArrayList();
        args.add("10");
        args.add("0");
        OMElement response = sender.invokeBlocking(operationName, args.toArray());
        assertEquals(response.getFirstElement().getText(), "INF");
    }

(startLine=310 endLine=327 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testEchoBool() throws AxisFault {
        configureSystem("echoBool");

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);
        sender.setOptions(options);

        ArrayList args = new ArrayList();
        args.add("true");

        OMElement response = sender.invokeBlocking(operationName, args.toArray());
        assertEquals(Boolean.valueOf(response.getFirstElement().getText()).booleanValue(), true);
    }

(startLine=329 endLine=346 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testEchoByte() throws AxisFault {
        configureSystem("echoByte");

        Options options = new Options();

        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);
        sender.setOptions(options);

        ArrayList args = new ArrayList();
        args.add("1");
        OMElement response = sender.invokeBlocking(operationName, args.toArray());
        assertEquals(Byte.parseByte(response.getFirstElement().getText()), 1);
    }

(startLine=485 endLine=501 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testEchoOM() throws AxisFault {
        configureSystem("echoOM");

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);
        sender.setOptions(options);

        ArrayList args = new ArrayList();
        args.add("1");
        OMElement response = sender.invokeBlocking(operationName, args.toArray());
        assertEquals(Byte.parseByte(response.getFirstElement().getFirstElement().getText()), 1);
    }

(startLine=659 endLine=678 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00823/modules/integration/test/org/apache/axis2/rpc/RPCCallTest.java)
    public void testmulReturn() throws AxisFault {
        configureSystem("mulReturn");

        Options options = new Options();
        options.setTo(targetEPR);
        options.setTransportInProtocol(Constants.TRANSPORT_HTTP);

        ConfigurationContext configContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, null);
        RPCServiceClient sender = new RPCServiceClient(configContext, null);
        sender.setOptions(options);

        ArrayList args = new ArrayList();
        args.add("foo");


        OMElement element = sender.invokeBlocking(operationName, args.toArray());
        System.out.println("element = " + element);
//        assertEquals(response.getFirstElement().getText(), "foo");
    }

commonMethod: 
(startLine=45 endLine=63 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00824/modules/integration/test/org/apache/axis2/integration/RPCLocalTestCase.java)
    /**
     * Get a pre-initialized ServiceClient set up to talk to our local
     * server.  If you want to set options, call this and then use getOptions()
     * on the return. Clients created using this method have their To EPR
     * preset to include the address for the service+operation.
     *
     * @return a ServiceClient, pre-initialized to talk using our local sender
     * @throws AxisFault if there's a problem
     */
    protected RPCServiceClient getRPCClient(String serviceName, String operationName) throws AxisFault {
        String url = LocalTransportReceiver.CONFIG_CONTEXT.getServiceContextPath()+"/"+serviceName;

        Options opts = getOptions();
        opts.setTo(new EndpointReference(url));
        opts.setAction(operationName);
        RPCServiceClient client = new RPCServiceClient(clientCtx, null);
        client.setOptions(opts);
        return client;
    }


, Instance #
frags: 
(startLine=96 endLine=127 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCMessageReceiver.java)
            if (inAxisMessage != null) {
                if (inAxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inAxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found none");
                        }
                        if (!messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement, method,
                                                                  inMessage
                                                                          .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }

(startLine=83 endLine=110 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCInOutAsyncMessageReceiver.java)
            if (inaxisMessage != null) {
                if (inaxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inaxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null ||
                                !messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement,
                                                                  method, inMessage
                            .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }

commonMethod: 
(startLine=340 endLine=450 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00839/modules/adb/src/org/apache/axis2/rpc/receivers/RPCUtil.java)
    public static void processResponseAsDocLitWrapped(Object resObject,
                                                      AxisService service,
                                                      Method method,
                                                      SOAPEnvelope envelope,
                                                      SOAPFactory fac,
                                                      OMNamespace ns,
                                                      OMElement bodyContent,
                                                      MessageContext outMessage
    ) throws Exception {
        QName elementQName = outMessage.getAxisMessage().getElementQName();
        if (resObject == null) {
            QName resName;
            if (service.isElementFormDefault()) {
                resName = new QName(service.getSchematargetNamespace(),
                        RETURN_WRAPPER,
                        service.getSchemaTargetNamespacePrefix());
            } else {
                resName = new QName(RETURN_WRAPPER);
            }
            XMLStreamReader xr = new NullXMLStreamReader(resName);
            StreamWrapper parser = new StreamWrapper(xr);
            StAXOMBuilder stAXOMBuilder =
                    OMXMLBuilderFactory.createStAXOMBuilder(
                            OMAbstractFactory.getSOAP11Factory(), parser);
            ns = fac.createOMNamespace(service.getSchematargetNamespace(),
                    service.getSchemaTargetNamespacePrefix());
            OMElement bodyChild = fac.createOMElement(method.getName() + "Response", ns);
            bodyChild.addChild(stAXOMBuilder.getDocumentElement());
            envelope.getBody().addChild(bodyChild);
        } else {
            if (resObject instanceof Object[]) {

                QName resName = new QName(elementQName.getNamespaceURI(),
                        method.getName() + "Response",
                        elementQName.getPrefix());
                OMElement bodyChild = RPCUtil.getResponseElement(resName,
                        (Object[]) resObject,
                        service.isElementFormDefault(),
                        service.getTypeTable());
                envelope.getBody().addChild(bodyChild);
            } else {
                if (resObject.getClass().isArray()) {
                    int length = Array.getLength(resObject);
                    Object objArray[];
                    if (resObject instanceof byte[]) {
                        objArray = new Object[1];
                        objArray[0] = Base64.encode((byte[]) resObject);
                    } else {
                        objArray = new Object[length];
                        for (int i = 0; i < length; i++) {
                            objArray[i] = Array.get(resObject, i);
                        }
                    }

                    QName resName = new QName(elementQName.getNamespaceURI(),
                            method.getName() + "Response",
                            elementQName.getPrefix());
                    OMElement bodyChild = RPCUtil.getResponseElement(resName,
                            objArray,
                            service.isElementFormDefault(),
                            service.getTypeTable());
                    envelope.getBody().addChild(bodyChild);
                } else {
                    if (SimpleTypeMapper.isCollection(resObject.getClass())) {
                        Collection collection = (Collection) resObject;
                        int size = collection.size();
                        Object values[] = new Object[size];
                        int count = 0;
                        for (Iterator iterator = collection.iterator(); iterator.hasNext();) {
                            values[count] = iterator.next();
                            count++;

                        }
                        QName resName = new QName(elementQName.getNamespaceURI(),
                                method.getName() + "Response",
                                elementQName.getPrefix());
                        OMElement bodyChild = RPCUtil.getResponseElement(resName,
                                values,
                                service.isElementFormDefault(),
                                service.getTypeTable());
                        envelope.getBody().addChild(bodyChild);
                    } else if (SimpleTypeMapper.isDataHandler(resObject.getClass())) {
                        OMElement resElemt = fac.createOMElement(method.getName() + "Response", ns);
                        OMText text = fac.createOMText(resObject, true);
                        OMElement returnElement;
                        if (service.isElementFormDefault()) {
                            returnElement = fac.createOMElement(RETURN_WRAPPER, ns);
                        } else {
                            returnElement = fac.createOMElement(RETURN_WRAPPER, null);
                        }
                        returnElement.addChild(text);
                        resElemt.addChild(returnElement);
                        envelope.getBody().addChild(resElemt);
                    } else {
                        if (service.isElementFormDefault()) {
                            RPCUtil.processResponse(fac, resObject, bodyContent, ns,
                                    envelope, method,
                                    service.isElementFormDefault(),
                                    service.getTypeTable());
                        } else {
                            RPCUtil.processResponse(fac, resObject, bodyContent, ns,
                                    envelope, method,
                                    service.isElementFormDefault(),
                                    null);
                        }
                    }
                }
            }
        }
        outMessage.setEnvelope(envelope);
    }


, Instance #
frags: 
(startLine=96 endLine=127 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCMessageReceiver.java)
            if (inAxisMessage != null) {
                if (inAxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inAxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found none");
                        }
                        if (!messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement, method,
                                                                  inMessage
                                                                          .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }

(startLine=61 endLine=89 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCInOnlyMessageReceiver.java)
            if (inAxisMessage != null) {
                if (inAxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inAxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null ||
                                !messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " +
                                    methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement, method,
                                                                  inMessage
                                                                          .getAxisService().getObjectSupplier());
                    method.invoke(obj, objectArray);
                }

            }

(startLine=83 endLine=110 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCInOutAsyncMessageReceiver.java)
            if (inaxisMessage != null) {
                if (inaxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inaxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null ||
                                !messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement,
                                                                  method, inMessage
                            .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }

commonMethod: 
(startLine=154 endLine=195 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00839/modules/adb/src/org/apache/axis2/rpc/receivers/RPCUtil.java)
    public static Object invokeServiceClass(AxisMessage inAxisMessage,
                                            Method method,
                                            Object implClass,
                                            String messageNameSpace,
                                            OMElement methodElement,
                                            MessageContext inMessage) throws AxisFault,
            IllegalAccessException, InvocationTargetException {
        if (inAxisMessage.getElementQName() == null) {
            // method accept empty SOAPbody
            return method.invoke(implClass, new Object[0]);
        } else {
            QName elementQName = inAxisMessage.getElementQName();
            messageNameSpace = elementQName.getNamespaceURI();
            OMNamespace namespace = methodElement.getNamespace();
            if (messageNameSpace != null) {
                if (namespace == null) {
                    throw new AxisFault("namespace mismatch require " +
                            messageNameSpace +
                            " found none");
                }
                if (!messageNameSpace.equals(namespace.getNamespaceURI())) {
                    throw new AxisFault("namespace mismatch require " +
                            messageNameSpace +
                            " found " + methodElement.getNamespace().getNamespaceURI());
                }
            } else if (namespace != null) {
                throw new AxisFault(
                        "namespace mismatch. Axis Oepration expects non-namespace " +
                                "qualified element. But received a namespace qualified element");
            }
            Object[] objectArray;
            if (inAxisMessage.isWrapped()) {
                objectArray = RPCUtil.processRequest(methodElement,
                        method, inMessage.getAxisService().getObjectSupplier());
            } else {
                objectArray = RPCUtil.processRequest((OMElement) methodElement.getParent(),
                        method, inMessage.getAxisService().getObjectSupplier());
            }
            return method.invoke(implClass, objectArray);

        }
    }


, Instance #
frags: 
(startLine=62 endLine=169 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCMessageReceiver.java)
            throws AxisFault {
        Method method = null;
        try {
            // get the implementation class for the Web Service
            Object obj = getTheImplementationObject(inMessage);

            Class ImplClass = obj.getClass();

            AxisOperation op = inMessage.getOperationContext().getAxisOperation();
            AxisService service = inMessage.getAxisService();
            OMElement methodElement = inMessage.getEnvelope().getBody()
                    .getFirstElement();
            AxisMessage inAxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            String messageNameSpace = null;
            QName elementQName;

            method = (Method)(op.getParameterValue("myMethod"));
            if (method == null) {
                String methodName = op.getName().getLocalPart();
                Method[] methods = ImplClass.getMethods();

                for (int i = 0; i < methods.length; i++) {
                    if (methods[i].getName().equals(methodName)) {
                        method = methods[i];
                        op.addParameter("myMethod", method);
                        break;
                    }
                }
                if (method == null) {
                    throw new AxisFault("No such method '" + methodName +
                            "' in class " + ImplClass.getName());
                }
            }
            Object resObject = null;
            if (inAxisMessage != null) {
                if (inAxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inAxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found none");
                        }
                        if (!messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement, method,
                                                                  inMessage
                                                                          .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }


            SOAPFactory fac = getSOAPFactory(inMessage);

            // Handling the response
            AxisMessage outaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
            if (outaxisMessage != null) {
                messageNameSpace = outaxisMessage.getElementQName().getNamespaceURI();
            }

            OMNamespace ns = fac.createOMNamespace(messageNameSpace,
                                                   service.getSchemaTargetNamespacePrefix());
            SOAPEnvelope envelope = fac.getDefaultEnvelope();
            OMElement bodyContent = null;
            RPCUtil.processResponse(resObject, service,
                                    method, envelope, fac, ns,
                                    bodyContent, outMessage);
            outMessage.setEnvelope(envelope);
        } catch (InvocationTargetException e) {
            String msg = null;
            Throwable cause = e.getCause();
            if (cause != null) {
                msg = cause.getMessage();
            }
            if (msg == null) {
                msg = "Exception occurred while trying to invoke service method " +
                        method.getName();
            }
            log.error(msg, e);
            if (cause instanceof AxisFault) {
                throw (AxisFault)cause;
            }
            throw new AxisFault(msg, e);
        } catch(RuntimeException e) {
            throw AxisFault.makeFault(e);
        } catch (Exception e) {
            String msg = "Exception occurred while trying to invoke service method " +
                    method.getName();
            log.error(msg, e);
            throw AxisFault.makeFault(e);
        }
    }

(startLine=58 endLine=149 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCInOutAsyncMessageReceiver.java)
            throws AxisFault {
        Method method = null;
        try {
            // get the implementation class for the Web Service
            Object obj = getTheImplementationObject(inMessage);

            Class ImplClass = obj.getClass();

            AxisOperation op = inMessage.getOperationContext().getAxisOperation();
            AxisService service = inMessage.getAxisService();
            OMElement methodElement = inMessage.getEnvelope().getBody()
                    .getFirstElement();

            AxisMessage inaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            String messageNameSpace = null;
            QName elementQName;
            String methodName = op.getName().getLocalPart();
            Method[] methods = ImplClass.getMethods();
            for (int i = 0; i < methods.length; i++) {
                if (methods[i].getName().equals(methodName)) {
                    method = methods[i];
                    break;
                }
            }
            Object resObject = null;
            if (inaxisMessage != null) {
                if (inaxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inaxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null ||
                                !messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement,
                                                                  method, inMessage
                            .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }


            SOAPFactory fac = getSOAPFactory(inMessage);

            // Handling the response

            AxisMessage outaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
            if (outaxisMessage != null) {
                messageNameSpace = outaxisMessage.getElementQName().getNamespaceURI();
            }

            OMNamespace ns = fac.createOMNamespace(messageNameSpace,
                                                   service.getSchemaTargetNamespacePrefix());
            SOAPEnvelope envelope = fac.getDefaultEnvelope();
            OMElement bodyContent = null;
            RPCUtil.processResponse(resObject, service,
                                    method, envelope, fac, ns, bodyContent, outMessage);
        } catch (InvocationTargetException e) {
            String msg = null;
            Throwable cause = e.getCause();
            if (cause != null) {
                msg = cause.getMessage();
            }
            if (msg == null) {
                msg = "Exception occurred while trying to invoke service method " +
                        method.getName();
            }
            log.error(msg, e);
            if (cause instanceof AxisFault) {
                throw (AxisFault)cause;
            }
            throw new AxisFault(msg);
        } catch (Exception e) {
            String msg = "Exception occurred while trying to invoke service method " +
                    method.getName();
            log.error(msg, e);
            throw new AxisFault(msg, e);
        }
    }

commonMethod: 
(startLine=340 endLine=450 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00839/modules/adb/src/org/apache/axis2/rpc/receivers/RPCUtil.java)
    public static void processResponseAsDocLitWrapped(Object resObject,
                                                      AxisService service,
                                                      Method method,
                                                      SOAPEnvelope envelope,
                                                      SOAPFactory fac,
                                                      OMNamespace ns,
                                                      OMElement bodyContent,
                                                      MessageContext outMessage
    ) throws Exception {
        QName elementQName = outMessage.getAxisMessage().getElementQName();
        if (resObject == null) {
            QName resName;
            if (service.isElementFormDefault()) {
                resName = new QName(service.getSchematargetNamespace(),
                        RETURN_WRAPPER,
                        service.getSchemaTargetNamespacePrefix());
            } else {
                resName = new QName(RETURN_WRAPPER);
            }
            XMLStreamReader xr = new NullXMLStreamReader(resName);
            StreamWrapper parser = new StreamWrapper(xr);
            StAXOMBuilder stAXOMBuilder =
                    OMXMLBuilderFactory.createStAXOMBuilder(
                            OMAbstractFactory.getSOAP11Factory(), parser);
            ns = fac.createOMNamespace(service.getSchematargetNamespace(),
                    service.getSchemaTargetNamespacePrefix());
            OMElement bodyChild = fac.createOMElement(method.getName() + "Response", ns);
            bodyChild.addChild(stAXOMBuilder.getDocumentElement());
            envelope.getBody().addChild(bodyChild);
        } else {
            if (resObject instanceof Object[]) {

                QName resName = new QName(elementQName.getNamespaceURI(),
                        method.getName() + "Response",
                        elementQName.getPrefix());
                OMElement bodyChild = RPCUtil.getResponseElement(resName,
                        (Object[]) resObject,
                        service.isElementFormDefault(),
                        service.getTypeTable());
                envelope.getBody().addChild(bodyChild);
            } else {
                if (resObject.getClass().isArray()) {
                    int length = Array.getLength(resObject);
                    Object objArray[];
                    if (resObject instanceof byte[]) {
                        objArray = new Object[1];
                        objArray[0] = Base64.encode((byte[]) resObject);
                    } else {
                        objArray = new Object[length];
                        for (int i = 0; i < length; i++) {
                            objArray[i] = Array.get(resObject, i);
                        }
                    }

                    QName resName = new QName(elementQName.getNamespaceURI(),
                            method.getName() + "Response",
                            elementQName.getPrefix());
                    OMElement bodyChild = RPCUtil.getResponseElement(resName,
                            objArray,
                            service.isElementFormDefault(),
                            service.getTypeTable());
                    envelope.getBody().addChild(bodyChild);
                } else {
                    if (SimpleTypeMapper.isCollection(resObject.getClass())) {
                        Collection collection = (Collection) resObject;
                        int size = collection.size();
                        Object values[] = new Object[size];
                        int count = 0;
                        for (Iterator iterator = collection.iterator(); iterator.hasNext();) {
                            values[count] = iterator.next();
                            count++;

                        }
                        QName resName = new QName(elementQName.getNamespaceURI(),
                                method.getName() + "Response",
                                elementQName.getPrefix());
                        OMElement bodyChild = RPCUtil.getResponseElement(resName,
                                values,
                                service.isElementFormDefault(),
                                service.getTypeTable());
                        envelope.getBody().addChild(bodyChild);
                    } else if (SimpleTypeMapper.isDataHandler(resObject.getClass())) {
                        OMElement resElemt = fac.createOMElement(method.getName() + "Response", ns);
                        OMText text = fac.createOMText(resObject, true);
                        OMElement returnElement;
                        if (service.isElementFormDefault()) {
                            returnElement = fac.createOMElement(RETURN_WRAPPER, ns);
                        } else {
                            returnElement = fac.createOMElement(RETURN_WRAPPER, null);
                        }
                        returnElement.addChild(text);
                        resElemt.addChild(returnElement);
                        envelope.getBody().addChild(resElemt);
                    } else {
                        if (service.isElementFormDefault()) {
                            RPCUtil.processResponse(fac, resObject, bodyContent, ns,
                                    envelope, method,
                                    service.isElementFormDefault(),
                                    service.getTypeTable());
                        } else {
                            RPCUtil.processResponse(fac, resObject, bodyContent, ns,
                                    envelope, method,
                                    service.isElementFormDefault(),
                                    null);
                        }
                    }
                }
            }
        }
        outMessage.setEnvelope(envelope);
    }


, Instance #
frags: 
(startLine=62 endLine=169 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCMessageReceiver.java)
            throws AxisFault {
        Method method = null;
        try {
            // get the implementation class for the Web Service
            Object obj = getTheImplementationObject(inMessage);

            Class ImplClass = obj.getClass();

            AxisOperation op = inMessage.getOperationContext().getAxisOperation();
            AxisService service = inMessage.getAxisService();
            OMElement methodElement = inMessage.getEnvelope().getBody()
                    .getFirstElement();
            AxisMessage inAxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            String messageNameSpace = null;
            QName elementQName;

            method = (Method)(op.getParameterValue("myMethod"));
            if (method == null) {
                String methodName = op.getName().getLocalPart();
                Method[] methods = ImplClass.getMethods();

                for (int i = 0; i < methods.length; i++) {
                    if (methods[i].getName().equals(methodName)) {
                        method = methods[i];
                        op.addParameter("myMethod", method);
                        break;
                    }
                }
                if (method == null) {
                    throw new AxisFault("No such method '" + methodName +
                            "' in class " + ImplClass.getName());
                }
            }
            Object resObject = null;
            if (inAxisMessage != null) {
                if (inAxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inAxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found none");
                        }
                        if (!messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement, method,
                                                                  inMessage
                                                                          .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }


            SOAPFactory fac = getSOAPFactory(inMessage);

            // Handling the response
            AxisMessage outaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
            if (outaxisMessage != null) {
                messageNameSpace = outaxisMessage.getElementQName().getNamespaceURI();
            }

            OMNamespace ns = fac.createOMNamespace(messageNameSpace,
                                                   service.getSchemaTargetNamespacePrefix());
            SOAPEnvelope envelope = fac.getDefaultEnvelope();
            OMElement bodyContent = null;
            RPCUtil.processResponse(resObject, service,
                                    method, envelope, fac, ns,
                                    bodyContent, outMessage);
            outMessage.setEnvelope(envelope);
        } catch (InvocationTargetException e) {
            String msg = null;
            Throwable cause = e.getCause();
            if (cause != null) {
                msg = cause.getMessage();
            }
            if (msg == null) {
                msg = "Exception occurred while trying to invoke service method " +
                        method.getName();
            }
            log.error(msg, e);
            if (cause instanceof AxisFault) {
                throw (AxisFault)cause;
            }
            throw new AxisFault(msg, e);
        } catch(RuntimeException e) {
            throw AxisFault.makeFault(e);
        } catch (Exception e) {
            String msg = "Exception occurred while trying to invoke service method " +
                    method.getName();
            log.error(msg, e);
            throw AxisFault.makeFault(e);
        }
    }

(startLine=58 endLine=149 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCInOutAsyncMessageReceiver.java)
            throws AxisFault {
        Method method = null;
        try {
            // get the implementation class for the Web Service
            Object obj = getTheImplementationObject(inMessage);

            Class ImplClass = obj.getClass();

            AxisOperation op = inMessage.getOperationContext().getAxisOperation();
            AxisService service = inMessage.getAxisService();
            OMElement methodElement = inMessage.getEnvelope().getBody()
                    .getFirstElement();

            AxisMessage inaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            String messageNameSpace = null;
            QName elementQName;
            String methodName = op.getName().getLocalPart();
            Method[] methods = ImplClass.getMethods();
            for (int i = 0; i < methods.length; i++) {
                if (methods[i].getName().equals(methodName)) {
                    method = methods[i];
                    break;
                }
            }
            Object resObject = null;
            if (inaxisMessage != null) {
                if (inaxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inaxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null ||
                                !messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement,
                                                                  method, inMessage
                            .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }


            SOAPFactory fac = getSOAPFactory(inMessage);

            // Handling the response

            AxisMessage outaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
            if (outaxisMessage != null) {
                messageNameSpace = outaxisMessage.getElementQName().getNamespaceURI();
            }

            OMNamespace ns = fac.createOMNamespace(messageNameSpace,
                                                   service.getSchemaTargetNamespacePrefix());
            SOAPEnvelope envelope = fac.getDefaultEnvelope();
            OMElement bodyContent = null;
            RPCUtil.processResponse(resObject, service,
                                    method, envelope, fac, ns, bodyContent, outMessage);
        } catch (InvocationTargetException e) {
            String msg = null;
            Throwable cause = e.getCause();
            if (cause != null) {
                msg = cause.getMessage();
            }
            if (msg == null) {
                msg = "Exception occurred while trying to invoke service method " +
                        method.getName();
            }
            log.error(msg, e);
            if (cause instanceof AxisFault) {
                throw (AxisFault)cause;
            }
            throw new AxisFault(msg);
        } catch (Exception e) {
            String msg = "Exception occurred while trying to invoke service method " +
                    method.getName();
            log.error(msg, e);
            throw new AxisFault(msg, e);
        }
    }

commonMethod: 
(startLine=154 endLine=195 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00839/modules/adb/src/org/apache/axis2/rpc/receivers/RPCUtil.java)
    public static Object invokeServiceClass(AxisMessage inAxisMessage,
                                            Method method,
                                            Object implClass,
                                            String messageNameSpace,
                                            OMElement methodElement,
                                            MessageContext inMessage) throws AxisFault,
            IllegalAccessException, InvocationTargetException {
        if (inAxisMessage.getElementQName() == null) {
            // method accept empty SOAPbody
            return method.invoke(implClass, new Object[0]);
        } else {
            QName elementQName = inAxisMessage.getElementQName();
            messageNameSpace = elementQName.getNamespaceURI();
            OMNamespace namespace = methodElement.getNamespace();
            if (messageNameSpace != null) {
                if (namespace == null) {
                    throw new AxisFault("namespace mismatch require " +
                            messageNameSpace +
                            " found none");
                }
                if (!messageNameSpace.equals(namespace.getNamespaceURI())) {
                    throw new AxisFault("namespace mismatch require " +
                            messageNameSpace +
                            " found " + methodElement.getNamespace().getNamespaceURI());
                }
            } else if (namespace != null) {
                throw new AxisFault(
                        "namespace mismatch. Axis Oepration expects non-namespace " +
                                "qualified element. But received a namespace qualified element");
            }
            Object[] objectArray;
            if (inAxisMessage.isWrapped()) {
                objectArray = RPCUtil.processRequest(methodElement,
                        method, inMessage.getAxisService().getObjectSupplier());
            } else {
                objectArray = RPCUtil.processRequest((OMElement) methodElement.getParent(),
                        method, inMessage.getAxisService().getObjectSupplier());
            }
            return method.invoke(implClass, objectArray);

        }
    }


, Instance #
frags: 
(startLine=64 endLine=146 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCMessageReceiver.java)
        try {
            // get the implementation class for the Web Service
            Object obj = getTheImplementationObject(inMessage);

            Class ImplClass = obj.getClass();

            AxisOperation op = inMessage.getOperationContext().getAxisOperation();
            AxisService service = inMessage.getAxisService();
            OMElement methodElement = inMessage.getEnvelope().getBody()
                    .getFirstElement();
            AxisMessage inAxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            String messageNameSpace = null;
            QName elementQName;

            method = (Method)(op.getParameterValue("myMethod"));
            if (method == null) {
                String methodName = op.getName().getLocalPart();
                Method[] methods = ImplClass.getMethods();

                for (int i = 0; i < methods.length; i++) {
                    if (methods[i].getName().equals(methodName)) {
                        method = methods[i];
                        op.addParameter("myMethod", method);
                        break;
                    }
                }
                if (method == null) {
                    throw new AxisFault("No such method '" + methodName +
                            "' in class " + ImplClass.getName());
                }
            }
            Object resObject = null;
            if (inAxisMessage != null) {
                if (inAxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inAxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found none");
                        }
                        if (!messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement, method,
                                                                  inMessage
                                                                          .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }


            SOAPFactory fac = getSOAPFactory(inMessage);

            // Handling the response
            AxisMessage outaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
            if (outaxisMessage != null) {
                messageNameSpace = outaxisMessage.getElementQName().getNamespaceURI();
            }

            OMNamespace ns = fac.createOMNamespace(messageNameSpace,
                                                   service.getSchemaTargetNamespacePrefix());
            SOAPEnvelope envelope = fac.getDefaultEnvelope();
            OMElement bodyContent = null;
            RPCUtil.processResponse(resObject, service,
                                    method, envelope, fac, ns,
                                    bodyContent, outMessage);
            outMessage.setEnvelope(envelope);
        } catch (InvocationTargetException e) {

(startLine=60 endLine=128 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCInOutAsyncMessageReceiver.java)
        try {
            // get the implementation class for the Web Service
            Object obj = getTheImplementationObject(inMessage);

            Class ImplClass = obj.getClass();

            AxisOperation op = inMessage.getOperationContext().getAxisOperation();
            AxisService service = inMessage.getAxisService();
            OMElement methodElement = inMessage.getEnvelope().getBody()
                    .getFirstElement();

            AxisMessage inaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            String messageNameSpace = null;
            QName elementQName;
            String methodName = op.getName().getLocalPart();
            Method[] methods = ImplClass.getMethods();
            for (int i = 0; i < methods.length; i++) {
                if (methods[i].getName().equals(methodName)) {
                    method = methods[i];
                    break;
                }
            }
            Object resObject = null;
            if (inaxisMessage != null) {
                if (inaxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inaxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null ||
                                !messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement,
                                                                  method, inMessage
                            .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }


            SOAPFactory fac = getSOAPFactory(inMessage);

            // Handling the response

            AxisMessage outaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
            if (outaxisMessage != null) {
                messageNameSpace = outaxisMessage.getElementQName().getNamespaceURI();
            }

            OMNamespace ns = fac.createOMNamespace(messageNameSpace,
                                                   service.getSchemaTargetNamespacePrefix());
            SOAPEnvelope envelope = fac.getDefaultEnvelope();
            OMElement bodyContent = null;
            RPCUtil.processResponse(resObject, service,
                                    method, envelope, fac, ns, bodyContent, outMessage);
        } catch (InvocationTargetException e) {

commonMethod: 
(startLine=340 endLine=450 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00839/modules/adb/src/org/apache/axis2/rpc/receivers/RPCUtil.java)
    public static void processResponseAsDocLitWrapped(Object resObject,
                                                      AxisService service,
                                                      Method method,
                                                      SOAPEnvelope envelope,
                                                      SOAPFactory fac,
                                                      OMNamespace ns,
                                                      OMElement bodyContent,
                                                      MessageContext outMessage
    ) throws Exception {
        QName elementQName = outMessage.getAxisMessage().getElementQName();
        if (resObject == null) {
            QName resName;
            if (service.isElementFormDefault()) {
                resName = new QName(service.getSchematargetNamespace(),
                        RETURN_WRAPPER,
                        service.getSchemaTargetNamespacePrefix());
            } else {
                resName = new QName(RETURN_WRAPPER);
            }
            XMLStreamReader xr = new NullXMLStreamReader(resName);
            StreamWrapper parser = new StreamWrapper(xr);
            StAXOMBuilder stAXOMBuilder =
                    OMXMLBuilderFactory.createStAXOMBuilder(
                            OMAbstractFactory.getSOAP11Factory(), parser);
            ns = fac.createOMNamespace(service.getSchematargetNamespace(),
                    service.getSchemaTargetNamespacePrefix());
            OMElement bodyChild = fac.createOMElement(method.getName() + "Response", ns);
            bodyChild.addChild(stAXOMBuilder.getDocumentElement());
            envelope.getBody().addChild(bodyChild);
        } else {
            if (resObject instanceof Object[]) {

                QName resName = new QName(elementQName.getNamespaceURI(),
                        method.getName() + "Response",
                        elementQName.getPrefix());
                OMElement bodyChild = RPCUtil.getResponseElement(resName,
                        (Object[]) resObject,
                        service.isElementFormDefault(),
                        service.getTypeTable());
                envelope.getBody().addChild(bodyChild);
            } else {
                if (resObject.getClass().isArray()) {
                    int length = Array.getLength(resObject);
                    Object objArray[];
                    if (resObject instanceof byte[]) {
                        objArray = new Object[1];
                        objArray[0] = Base64.encode((byte[]) resObject);
                    } else {
                        objArray = new Object[length];
                        for (int i = 0; i < length; i++) {
                            objArray[i] = Array.get(resObject, i);
                        }
                    }

                    QName resName = new QName(elementQName.getNamespaceURI(),
                            method.getName() + "Response",
                            elementQName.getPrefix());
                    OMElement bodyChild = RPCUtil.getResponseElement(resName,
                            objArray,
                            service.isElementFormDefault(),
                            service.getTypeTable());
                    envelope.getBody().addChild(bodyChild);
                } else {
                    if (SimpleTypeMapper.isCollection(resObject.getClass())) {
                        Collection collection = (Collection) resObject;
                        int size = collection.size();
                        Object values[] = new Object[size];
                        int count = 0;
                        for (Iterator iterator = collection.iterator(); iterator.hasNext();) {
                            values[count] = iterator.next();
                            count++;

                        }
                        QName resName = new QName(elementQName.getNamespaceURI(),
                                method.getName() + "Response",
                                elementQName.getPrefix());
                        OMElement bodyChild = RPCUtil.getResponseElement(resName,
                                values,
                                service.isElementFormDefault(),
                                service.getTypeTable());
                        envelope.getBody().addChild(bodyChild);
                    } else if (SimpleTypeMapper.isDataHandler(resObject.getClass())) {
                        OMElement resElemt = fac.createOMElement(method.getName() + "Response", ns);
                        OMText text = fac.createOMText(resObject, true);
                        OMElement returnElement;
                        if (service.isElementFormDefault()) {
                            returnElement = fac.createOMElement(RETURN_WRAPPER, ns);
                        } else {
                            returnElement = fac.createOMElement(RETURN_WRAPPER, null);
                        }
                        returnElement.addChild(text);
                        resElemt.addChild(returnElement);
                        envelope.getBody().addChild(resElemt);
                    } else {
                        if (service.isElementFormDefault()) {
                            RPCUtil.processResponse(fac, resObject, bodyContent, ns,
                                    envelope, method,
                                    service.isElementFormDefault(),
                                    service.getTypeTable());
                        } else {
                            RPCUtil.processResponse(fac, resObject, bodyContent, ns,
                                    envelope, method,
                                    service.isElementFormDefault(),
                                    null);
                        }
                    }
                }
            }
        }
        outMessage.setEnvelope(envelope);
    }


, Instance #
frags: 
(startLine=64 endLine=146 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCMessageReceiver.java)
        try {
            // get the implementation class for the Web Service
            Object obj = getTheImplementationObject(inMessage);

            Class ImplClass = obj.getClass();

            AxisOperation op = inMessage.getOperationContext().getAxisOperation();
            AxisService service = inMessage.getAxisService();
            OMElement methodElement = inMessage.getEnvelope().getBody()
                    .getFirstElement();
            AxisMessage inAxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            String messageNameSpace = null;
            QName elementQName;

            method = (Method)(op.getParameterValue("myMethod"));
            if (method == null) {
                String methodName = op.getName().getLocalPart();
                Method[] methods = ImplClass.getMethods();

                for (int i = 0; i < methods.length; i++) {
                    if (methods[i].getName().equals(methodName)) {
                        method = methods[i];
                        op.addParameter("myMethod", method);
                        break;
                    }
                }
                if (method == null) {
                    throw new AxisFault("No such method '" + methodName +
                            "' in class " + ImplClass.getName());
                }
            }
            Object resObject = null;
            if (inAxisMessage != null) {
                if (inAxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inAxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found none");
                        }
                        if (!messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement, method,
                                                                  inMessage
                                                                          .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }


            SOAPFactory fac = getSOAPFactory(inMessage);

            // Handling the response
            AxisMessage outaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
            if (outaxisMessage != null) {
                messageNameSpace = outaxisMessage.getElementQName().getNamespaceURI();
            }

            OMNamespace ns = fac.createOMNamespace(messageNameSpace,
                                                   service.getSchemaTargetNamespacePrefix());
            SOAPEnvelope envelope = fac.getDefaultEnvelope();
            OMElement bodyContent = null;
            RPCUtil.processResponse(resObject, service,
                                    method, envelope, fac, ns,
                                    bodyContent, outMessage);
            outMessage.setEnvelope(envelope);
        } catch (InvocationTargetException e) {

(startLine=60 endLine=128 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/rpc/receivers/RPCInOutAsyncMessageReceiver.java)
        try {
            // get the implementation class for the Web Service
            Object obj = getTheImplementationObject(inMessage);

            Class ImplClass = obj.getClass();

            AxisOperation op = inMessage.getOperationContext().getAxisOperation();
            AxisService service = inMessage.getAxisService();
            OMElement methodElement = inMessage.getEnvelope().getBody()
                    .getFirstElement();

            AxisMessage inaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            String messageNameSpace = null;
            QName elementQName;
            String methodName = op.getName().getLocalPart();
            Method[] methods = ImplClass.getMethods();
            for (int i = 0; i < methods.length; i++) {
                if (methods[i].getName().equals(methodName)) {
                    method = methods[i];
                    break;
                }
            }
            Object resObject = null;
            if (inaxisMessage != null) {
                if (inaxisMessage.getElementQName() == null) {
                    // method accept empty SOAPbody
                    resObject = method.invoke(obj, new Object[0]);
                } else {
                    elementQName = inaxisMessage.getElementQName();
                    messageNameSpace = elementQName.getNamespaceURI();
                    OMNamespace namespace = methodElement.getNamespace();
                    if (messageNameSpace != null) {
                        if (namespace == null ||
                                !messageNameSpace.equals(namespace.getNamespaceURI())) {
                            throw new AxisFault("namespace mismatch require " +
                                    messageNameSpace +
                                    " found " + methodElement.getNamespace().getNamespaceURI());
                        }
                    } else if (namespace != null) {
                        throw new AxisFault(
                                "namespace mismatch. Axis Oepration expects non-namespace " +
                                        "qualified element. But received a namespace qualified element");
                    }

                    Object[] objectArray = RPCUtil.processRequest(methodElement,
                                                                  method, inMessage
                            .getAxisService().getObjectSupplier());
                    resObject = method.invoke(obj, objectArray);
                }

            }


            SOAPFactory fac = getSOAPFactory(inMessage);

            // Handling the response

            AxisMessage outaxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
            if (outaxisMessage != null) {
                messageNameSpace = outaxisMessage.getElementQName().getNamespaceURI();
            }

            OMNamespace ns = fac.createOMNamespace(messageNameSpace,
                                                   service.getSchemaTargetNamespacePrefix());
            SOAPEnvelope envelope = fac.getDefaultEnvelope();
            OMElement bodyContent = null;
            RPCUtil.processResponse(resObject, service,
                                    method, envelope, fac, ns, bodyContent, outMessage);
        } catch (InvocationTargetException e) {

commonMethod: 
(startLine=154 endLine=195 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00839/modules/adb/src/org/apache/axis2/rpc/receivers/RPCUtil.java)
    public static Object invokeServiceClass(AxisMessage inAxisMessage,
                                            Method method,
                                            Object implClass,
                                            String messageNameSpace,
                                            OMElement methodElement,
                                            MessageContext inMessage) throws AxisFault,
            IllegalAccessException, InvocationTargetException {
        if (inAxisMessage.getElementQName() == null) {
            // method accept empty SOAPbody
            return method.invoke(implClass, new Object[0]);
        } else {
            QName elementQName = inAxisMessage.getElementQName();
            messageNameSpace = elementQName.getNamespaceURI();
            OMNamespace namespace = methodElement.getNamespace();
            if (messageNameSpace != null) {
                if (namespace == null) {
                    throw new AxisFault("namespace mismatch require " +
                            messageNameSpace +
                            " found none");
                }
                if (!messageNameSpace.equals(namespace.getNamespaceURI())) {
                    throw new AxisFault("namespace mismatch require " +
                            messageNameSpace +
                            " found " + methodElement.getNamespace().getNamespaceURI());
                }
            } else if (namespace != null) {
                throw new AxisFault(
                        "namespace mismatch. Axis Oepration expects non-namespace " +
                                "qualified element. But received a namespace qualified element");
            }
            Object[] objectArray;
            if (inAxisMessage.isWrapped()) {
                objectArray = RPCUtil.processRequest(methodElement,
                        method, inMessage.getAxisService().getObjectSupplier());
            } else {
                objectArray = RPCUtil.processRequest((OMElement) methodElement.getParent(),
                        method, inMessage.getAxisService().getObjectSupplier());
            }
            return method.invoke(implClass, objectArray);

        }
    }


, Instance #
frags: 
(startLine=180 endLine=191 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java)
                            for (int j = 0; j < i1; j++) {
                                Object o = Array.get(value, j);
                                if (elemntNameSpace != null) {
                                    object.add(new QName(elemntNameSpace.getNamespaceURI(),
                                                         propDesc.getName(),
                                                         elemntNameSpace.getPrefix()));
                                } else {
                                    object.add(new QName(beanName.getNamespaceURI(),
                                                         propDesc.getName(), beanName.getPrefix()));
                                }
                                object.add(o == null ? null : SimpleTypeMapper.getStringValue(o));
                            }

(startLine=208 endLine=219 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java)
                            for (int j = 0; j < value.length; j++) {
                                Object o = value[j];
                                if (elemntNameSpace != null) {
                                    object.add(new QName(elemntNameSpace.getNamespaceURI(),
                                                         propDesc.getName(),
                                                         elemntNameSpace.getPrefix()));
                                } else {
                                    object.add(new QName(beanName.getNamespaceURI(),
                                                         propDesc.getName(), beanName.getPrefix()));
                                }
                                object.add(o);
                            }

(startLine=275 endLine=286 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00838/modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java)
                } else {
                    if (elemntNameSpace != null) {
                        object.add(new QName(elemntNameSpace.getNamespaceURI(),
                                             propDesc.getName(), elemntNameSpace.getPrefix()));
                    } else {
                        object.add(new QName(beanName.getNamespaceURI(),
                                             propDesc.getName(), beanName.getPrefix()));
                    }
                    Object value = propDesc.getReadMethod().invoke(beanObject,
                                                                   null);
                    object.add(value);
                }

commonMethod: 
(startLine=249 endLine=266 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00839/modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java)
    private static void addTypeQname(QName elemntNameSpace,
                                     ArrayList object,
                                     PropertyDescriptor propDesc,
                                     QName beanName,
                                     boolean processingDocLitBare) {
        if (elemntNameSpace != null) {
            object.add(new QName(elemntNameSpace.getNamespaceURI(),
                    propDesc.getName(), elemntNameSpace.getPrefix()));
        } else {
            if(processingDocLitBare){
                object.add(new QName(propDesc.getName()));
            } else {
                object.add(new QName(beanName.getNamespaceURI(),
                        propDesc.getName(), beanName.getPrefix()));
            }

        }
    }


, Instance #
frags: 
(startLine=95 endLine=136 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00846/modules/kernel/src/org/apache/axis2/description/java2wsdl/DocLitBareSchemaGenerator.java)
            if (jMethod.getExceptionTypes().length > 0) {
                JClass[] extypes = jMethod.getExceptionTypes();
                for (int j = 0; j < extypes.length; j++) {
                    JClass extype = extypes[j];
                    if (AxisFault.class.getName().equals(extype.getQualifiedName())) {
                        continue;
                    }
                     if (!generateBaseException) {
                        methodSchemaType = createSchemaTypeForMethodPart("Exception");
                        sequence = new XmlSchemaSequence();
                        QName schemaTypeName = typeTable.getSimpleSchemaTypeName(Exception.class.getName());
                        addContentToMethodSchemaType(sequence,
                                schemaTypeName,
                                "Exception",
                                false);
                        methodSchemaType.setParticle(sequence);
                        generateBaseException = true;
                    }
                    String partQname = extype.getSimpleName();
                    methodSchemaType = createSchemaTypeForMethodPart(partQname);
                    sequence = new XmlSchemaSequence();
                    if (Exception.class.getName().equals(extype.getQualifiedName())) {
                        addContentToMethodSchemaType(sequence,
                                typeTable.getComplexSchemaType("Exception"),
                                partQname,
                                false);
                        methodSchemaType.setParticle(sequence);
                        typeTable.addComplexSchema(Exception.class.getPackage().getName(),
                                methodSchemaType.getQName());
                    } else {
                        generateSchemaForType(sequence, extype, extype.getSimpleName());
                        methodSchemaType.setParticle(sequence);
                    }
                    if (AxisFault.class.getName().equals(extype.getQualifiedName())) {
                        continue;
                    }
                    AxisMessage faultMessage = new AxisMessage();
                    faultMessage.setName(extype.getSimpleName());
                    faultMessage.setElementQName(typeTable.getQNamefortheType(partQname));
                    axisOperation.setFaultMessages(faultMessage);
                }
            }

(startLine=234 endLine=275 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00846/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
            if (jMethod.getExceptionTypes().length > 0) {
                JClass[] extypes = jMethod.getExceptionTypes();
                for (int j = 0; j < extypes.length; j++) {
                    JClass extype = extypes[j];
                    if (AxisFault.class.getName().equals(extype.getQualifiedName())) {
                        continue;
                    }
                    if (!generateBaseException) {
                        methodSchemaType = createSchemaTypeForMethodPart("Exception");
                        sequence = new XmlSchemaSequence();
                        QName schemaTypeName = typeTable.getSimpleSchemaTypeName(Exception.class.getName());
                        addContentToMethodSchemaType(sequence,
                                schemaTypeName,
                                "Exception",
                                false);
                        methodSchemaType.setParticle(sequence);
                        generateBaseException = true;
                    }
                    String partQname = extype.getSimpleName();
                    methodSchemaType = createSchemaTypeForMethodPart(partQname);
                    sequence = new XmlSchemaSequence();
                    if (Exception.class.getName().equals(extype.getQualifiedName())) {
                        addContentToMethodSchemaType(sequence,
                                typeTable.getComplexSchemaType("Exception"),
                                partQname,
                                false);
                        methodSchemaType.setParticle(sequence);
                        typeTable.addComplexSchema(Exception.class.getPackage().getName(),
                                methodSchemaType.getQName());
                    } else {
                        generateSchemaForType(sequence, extype, extype.getSimpleName());
                        methodSchemaType.setParticle(sequence);
                    }
                    if (AxisFault.class.getName().equals(extype.getQualifiedName())) {
                        continue;
                    }
                    AxisMessage faultMessage = new AxisMessage();
                    faultMessage.setName(extype.getSimpleName());
                    faultMessage.setElementQName(typeTable.getQNamefortheType(partQname));
                    axisOperation.setFaultMessages(faultMessage);
                }
            }

commonMethod: 
(startLine=311 endLine=375 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00847/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    /**
     *  This method will generate Schema element for all the excetion types in a given JMethod
     *  - No matter what it will generate Schema element for java.lang.Exception so that for other
     *    exception which extend java.lang.Excetion can use as the base class type
     */
    protected void processException(JMethod jMethod, 
                                                 AxisOperation axisOperation) throws Exception {
        XmlSchemaComplexType methodSchemaType;
        XmlSchemaSequence sequence;
        if (jMethod.getExceptionTypes().length > 0) {
            if (!generateBaseException) {
                sequence = new XmlSchemaSequence();
                XmlSchema xmlSchema = getXmlSchema(schemaTargetNameSpace);
                QName elementName = new QName(schemaTargetNameSpace,
                        "Exception",
                        schema_namespace_prefix);
                XmlSchemaComplexType complexType = new XmlSchemaComplexType(xmlSchema);
                complexType.setName("Exception");
                xmlSchema.getItems().add(complexType);
                xmlSchema.getElements().add(elementName, complexType);
                typeTable.addComplexSchema(Exception.class.getName(), elementName);
                QName schemaTypeName = TypeTable.ANY_TYPE;
                addContentToMethodSchemaType(sequence,
                        schemaTypeName,
                        "Exception",
                        false);
                complexType.setParticle(sequence);
                generateBaseException = true;
            }
            JClass[] extypes = jMethod.getExceptionTypes();
            for (int j = 0; j < extypes.length; j++) {
                JClass extype = extypes[j];
                if (AxisFault.class.getName().equals(extype.getQualifiedName())) {
                    continue;
                }
                String partQname = extype.getSimpleName();
                methodSchemaType = createSchemaTypeForFault(partQname);
                QName elementName =
                        new QName(this.schemaTargetNameSpace, partQname, this.schema_namespace_prefix);
                sequence = new XmlSchemaSequence();
                if (Exception.class.getName().equals(extype.getQualifiedName())) {
                    addContentToMethodSchemaType(sequence,
                            typeTable.getComplexSchemaType(Exception.class.getName()),
                            partQname,
                            false);
                    methodSchemaType.setParticle(sequence);
                    typeTable.addComplexSchema(Exception.class.getPackage().getName(),
                            methodSchemaType.getQName());
                } else {
                    generateSchemaForType(sequence, extype, extype.getSimpleName());
                    methodSchemaType.setParticle(sequence);
                }

                typeTable.addComplexSchema(partQname,elementName);

                if (AxisFault.class.getName().equals(extype.getQualifiedName())) {
                    continue;
                }
                AxisMessage faultMessage = new AxisMessage();
                faultMessage.setName(extype.getSimpleName());
                faultMessage.setElementQName(typeTable.getQNamefortheType(partQname));
                axisOperation.setFaultMessages(faultMessage);
            }
        }
    }


, Instance #
frags: 
(startLine=100 endLine=115 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00867/modules/kernel/src/org/apache/axis2/deployment/POJODeployer.java)
                            if (annotation != null) {
                                Class claxx = Class.forName(
                                        "org.apache.axis2.jaxws.description.DescriptionFactory");
                                Method mthod = claxx.getMethod(
                                        "createAxisService",
                                        new Class[]{Class.class});
                                Class pojoClass = Loader.loadClass(classLoader, className);
                                AxisService axisService =
                                        (AxisService) mthod.invoke(claxx, new Object[]{pojoClass});
                                Utils.fillAxisService(axisService,
                                                      configCtx.getAxisConfiguration(),
                                                      new ArrayList(),
                                                      new ArrayList());
                                setMessageReceivers(axisService);
                                configCtx.getAxisConfiguration().addService(axisService);
                            } else {

(startLine=190 endLine=221 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00867/modules/kernel/src/org/apache/axis2/deployment/POJODeployer.java)
                    while (jClassIter.hasNext()) {
                        JClass jclass = (JClass) jClassIter.next();
                        if (jclass.getQualifiedName().equals(className)) {
                            /**
                             * Schema genertaion done in two stage 1. Load all the methods and
                             * create type for methods parameters (if the parameters are Bean
                             * then it will create Complex types for those , and if the
                             * parameters are simple type which decribe in SimpleTypeTable
                             * nothing will happen) 2. In the next stage for all the methods
                             * messages and port types will be creteated
                             */
                            JAnnotation annotation =
                                    jclass.getAnnotation(AnnotationConstants.WEB_SERVICE);
                            if (annotation != null) {
                                Class claxx = Class.forName(
                                        "org.apache.axis2.jaxws.description.DescriptionFactory");
                                Method mthod = claxx.getMethod(
                                        "createAxisService",
                                        new Class[]{Class.class});
                                Class pojoClass = Loader.loadClass(classLoader, className);
                                AxisService axisService =
                                        (AxisService) mthod.invoke(claxx, new Object[]{pojoClass});
                                Utils.fillAxisService(axisService,
                                                      configCtx.getAxisConfiguration(),
                                                      new ArrayList(),
                                                      new ArrayList());
                                axisService.setName(className);
                                setMessageReceivers(axisService);
                                axisServiceList.add(axisService);
                            }
                        }
                    }

commonMethod: 
(startLine=198 endLine=226 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00868/modules/kernel/src/org/apache/axis2/deployment/POJODeployer.java)
    private AxisService createAxisService(ClassLoader classLoader,
                                          String className) throws ClassNotFoundException,
            InstantiationException,
            IllegalAccessException,
            AxisFault {
        AxisService axisService;
        try {
            Class claxx = Class.forName(
                    "org.apache.axis2.jaxws.description.DescriptionFactory");
            Method mthod = claxx.getMethod(
                    "createAxisService",
                    new Class[]{Class.class});
            Class pojoClass = Loader.loadClass(classLoader, className);
            axisService =
                    (AxisService) mthod.invoke(claxx, new Object[]{pojoClass});
            Utils.fillAxisService(axisService,
                    configCtx.getAxisConfiguration(),
                    new ArrayList(),
                    new ArrayList());
            setMessageReceivers(axisService);

        } catch (Exception e) {
            // Seems like the jax-ws jars missin in the class path .
            // lets tryu annogen
            axisService = createAxisServiceUsingAnnogen(className,
                    classLoader);
        }
        return axisService;
    }


, Instance #
frags: 
(startLine=100 endLine=115 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00867/modules/kernel/src/org/apache/axis2/deployment/POJODeployer.java)
                            if (annotation != null) {
                                Class claxx = Class.forName(
                                        "org.apache.axis2.jaxws.description.DescriptionFactory");
                                Method mthod = claxx.getMethod(
                                        "createAxisService",
                                        new Class[]{Class.class});
                                Class pojoClass = Loader.loadClass(classLoader, className);
                                AxisService axisService =
                                        (AxisService) mthod.invoke(claxx, new Object[]{pojoClass});
                                Utils.fillAxisService(axisService,
                                                      configCtx.getAxisConfiguration(),
                                                      new ArrayList(),
                                                      new ArrayList());
                                setMessageReceivers(axisService);
                                configCtx.getAxisConfiguration().addService(axisService);
                            } else {

(startLine=190 endLine=221 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00867/modules/kernel/src/org/apache/axis2/deployment/POJODeployer.java)
                    while (jClassIter.hasNext()) {
                        JClass jclass = (JClass) jClassIter.next();
                        if (jclass.getQualifiedName().equals(className)) {
                            /**
                             * Schema genertaion done in two stage 1. Load all the methods and
                             * create type for methods parameters (if the parameters are Bean
                             * then it will create Complex types for those , and if the
                             * parameters are simple type which decribe in SimpleTypeTable
                             * nothing will happen) 2. In the next stage for all the methods
                             * messages and port types will be creteated
                             */
                            JAnnotation annotation =
                                    jclass.getAnnotation(AnnotationConstants.WEB_SERVICE);
                            if (annotation != null) {
                                Class claxx = Class.forName(
                                        "org.apache.axis2.jaxws.description.DescriptionFactory");
                                Method mthod = claxx.getMethod(
                                        "createAxisService",
                                        new Class[]{Class.class});
                                Class pojoClass = Loader.loadClass(classLoader, className);
                                AxisService axisService =
                                        (AxisService) mthod.invoke(claxx, new Object[]{pojoClass});
                                Utils.fillAxisService(axisService,
                                                      configCtx.getAxisConfiguration(),
                                                      new ArrayList(),
                                                      new ArrayList());
                                axisService.setName(className);
                                setMessageReceivers(axisService);
                                axisServiceList.add(axisService);
                            }
                        }
                    }

commonMethod: 
(startLine=228 endLine=255 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00868/modules/kernel/src/org/apache/axis2/deployment/POJODeployer.java)
    private AxisService createAxisServiceUsingAnnogen(String className, ClassLoader classLoader)
            throws ClassNotFoundException,
            InstantiationException,
            IllegalAccessException,
            AxisFault {
        HashMap messageReciverMap = new HashMap();
        Class inOnlyMessageReceiver = Loader.loadClass(
                "org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver");
        MessageReceiver messageReceiver =
                (MessageReceiver) inOnlyMessageReceiver.newInstance();
        messageReciverMap.put( WSDL2Constants.MEP_URI_IN_ONLY,
                                        messageReceiver);
        Class inoutMessageReceiver = Loader.loadClass(
                "org.apache.axis2.rpc.receivers.RPCMessageReceiver");
        MessageReceiver inOutmessageReceiver =
                (MessageReceiver) inoutMessageReceiver.newInstance();
        messageReciverMap.put(WSDL2Constants.MEP_URI_IN_OUT,
                                        inOutmessageReceiver);
        messageReciverMap.put(WSDL2Constants.MEP_URI_ROBUST_IN_ONLY,
                                                      inOutmessageReceiver);
        AxisService axisService =
                AxisService.createService(className,
                                          configCtx.getAxisConfiguration(),
                                          messageReciverMap,
                                          null, null,
                                          classLoader);
        return axisService;
    }


, Instance #
frags: 
(startLine=2190 endLine=2239 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00913/modules/kernel/src/org/apache/axis2/context/MessageContext.java)
            while (i.hasNext()) {
                Object obj = i.next();
                String objClass = obj.getClass().getName();
                // start the meta data entry for this object
                MetaDataEntry mdEntry = new MetaDataEntry();
                mdEntry.setClassName(objClass);

                // get the correct object-specific name
                String qnameAsString;

                if (obj instanceof Phase) {
                    Phase phaseObj = (Phase) obj;
                    qnameAsString = phaseObj.getName();

                    // add the list of handlers to the meta data
                    setupPhaseList(phaseObj, mdEntry);
                } else if (obj instanceof Handler) {
                    Handler handlerObj = (Handler) obj;
                    qnameAsString = handlerObj.getName();
                } else {
                    // TODO: will there be any other kinds of objects in the execution Chain?
                    qnameAsString = "NULL";
                }

                mdEntry.setQName(qnameAsString);

                // update the index for the entry in the chain

                if (LoggingControl.debugLoggingAllowed && log.isTraceEnabled()) {
                    log.trace(logCorrelationIDString +
                            ":writeExternal(): ***BEFORE OBJ WRITE*** executionChain entry class [" +
                            objClass + "] qname [" + qnameAsString + "]");
                }

                ObjectStateUtils.writeObject(out, mdEntry, logCorrelationIDString +
                        ".executionChain:entry class [" + objClass + "] qname [" + qnameAsString +
                        "]");

                // update the index so that the index
                // now indicates the next entry that
                // will be attempted
                nextIndex++;

                if (LoggingControl.debugLoggingAllowed && log.isTraceEnabled()) {
                    log.trace(logCorrelationIDString +
                            ":writeExternal(): ***AFTER OBJ WRITE*** executionChain entry class [" +
                            objClass + "] qname [" + qnameAsString + "]");
                }

            } // end while entries in execution chain

(startLine=2309 endLine=2356 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00913/modules/kernel/src/org/apache/axis2/context/MessageContext.java)
            while (iterator.hasNext()) {
                Object obj = iterator.next();
                String objClass = obj.getClass().getName();
                // start the meta data entry for this object
                MetaDataEntry mdEntry = new MetaDataEntry();
                mdEntry.setClassName(objClass);

                // get the correct object-specific name
                String qnameAsString;

                if (obj instanceof Phase) {
                    Phase inPhaseObj = (Phase) obj;
                    qnameAsString = inPhaseObj.getName();

                    // add the list of handlers to the meta data
                    setupPhaseList(inPhaseObj, mdEntry);
                } else if (obj instanceof Handler) {
                    Handler inHandlerObj = (Handler) obj;
                    qnameAsString = inHandlerObj.getName();
                } else {
                    // TODO: will there be any other kinds of objects in the list
                    qnameAsString = "NULL";
                }

                mdEntry.setQName(qnameAsString);

                if (LoggingControl.debugLoggingAllowed && log.isTraceEnabled()) {
                    log.trace(logCorrelationIDString +
                            ":writeExternal(): ***BEFORE Executed List OBJ WRITE*** executedPhases entry class [" +
                            objClass + "] qname [" + qnameAsString + "]");
                }

                ObjectStateUtils.writeObject(out, mdEntry, logCorrelationIDString +
                        ".executedPhases:entry class [" + objClass + "] qname [" +
                        qnameAsString + "]");

                // update the index so that the index
                // now indicates the next entry that
                // will be attempted
                execNextIndex++;

                if (LoggingControl.debugLoggingAllowed && log.isTraceEnabled()) {
                    log.trace(logCorrelationIDString + ":writeExternal(): " +
                            "***AFTER Executed List OBJ WRITE*** " +
                            "executedPhases entry class [" + objClass + "] " +
                            "qname [" + qnameAsString + "]");
                }
            } // end while entries in execution chain

commonMethod: 
(startLine=78 endLine=89 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00914/modules/kernel/src/org/apache/axis2/context/externalize/SafeObjectOutputStream.java)
    /**
     * Add the SafeOutputStream if necessary.
     * @param out Current ObjectOutput
     * @return
     * @throws IOException
     */
    public static SafeObjectOutputStream install(ObjectOutput out) throws IOException {
        if (out instanceof SafeObjectOutputStream) {
            return (SafeObjectOutputStream) out;
        }
        return new SafeObjectOutputStream(out);
    }


, Instance #
frags: 
(startLine=179 endLine=206 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00915/modules/kernel/src/org/apache/axis2/context/externalize/SafeObjectInputStream.java)
            try {
                if (isObjectForm) {
                    if (isDebug) {
                        log.debug(" reading using object form");
                    }
                    // Read the key and value directly
                    key = in.readObject();
                    value = in.readObject();
                } else {
                    if (isDebug) {
                        log.debug(" reading using byte form");
                    }
                    // Get the byte stream
                    ByteArrayInputStream bais = getByteStream(in);

                    // Now get the real key and value
                    ObjectInputStream tempOIS = createObjectInputStream(bais);
                    key = tempOIS.readObject();
                    value = tempOIS.readObject();
                    tempOIS.close();
                    bais.close();
                }
                // Put the key and value in the map
                if (isDebug) {
                    log.debug("Read key=" + key + " value="+value);
                }
                map.put(key, value);
            } catch (ClassNotFoundException e) {

(startLine=256 endLine=281 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00915/modules/kernel/src/org/apache/axis2/context/externalize/SafeObjectInputStream.java)
            try {
                if (isObjectForm) {
                    if (isDebug) {
                        log.debug(" reading using object form");
                    }
                    // Read the value directly
                    value = in.readObject();
                } else {
                    if (isDebug) {
                        log.debug(" reading using byte form");
                    }
                    // Get the byte stream
                    ByteArrayInputStream bais = getByteStream(in);

                    // Now get the real key and value
                    ObjectInputStream tempOIS = createObjectInputStream(bais);
                    value = tempOIS.readObject();
                    tempOIS.close();
                    bais.close();
                }
                // Put the key and value in the map
                if (isDebug) {
                    log.debug("Read value="+value);
                }
                list.add(value);
            } catch (IOException e) {

commonMethod: 
(startLine=350 endLine=358 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00916/modules/kernel/src/org/apache/axis2/context/externalize/SafeObjectInputStream.java)
    private String valueName(Object obj) {
        if (obj == null) {
            return "null";
        } else if (obj instanceof String) {
            return (String) obj;
        } else {
            return "Object of class = " + obj.getClass().getName();
        }
    }


, Instance #
frags: 
(startLine=1106 endLine=1122 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00920/modules/adb-codegen/src/org/apache/axis2/schema/SchemaCompiler.java)
            if (!isAlreadyProcessed(extension.getBaseTypeName())) {
                //pick the relevant basetype from the schema and process it
                XmlSchemaType type = getType(parentSchema, extension.getBaseTypeName());
                if (type instanceof XmlSchemaComplexType) {
                    XmlSchemaComplexType complexType = (XmlSchemaComplexType) type;
                    if (complexType.getName() != null) {
                        processNamedComplexSchemaType(complexType, parentSchema);
                    } else {
                        //this is not possible. The extension should always
                        //have a name
                        throw new SchemaCompilationException("Unnamed complex type used in extension");//Internationlize this
                    }
                } else if (type instanceof XmlSchemaSimpleType) {
                    //process simple type
                    processSimpleSchemaType((XmlSchemaSimpleType) type, null, parentSchema, null);
                }
            }

(startLine=1325 endLine=1341 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00920/modules/adb-codegen/src/org/apache/axis2/schema/SchemaCompiler.java)
            if (!isAlreadyProcessed(extension.getBaseTypeName())) {
                //pick the relevant basetype from the schema and process it
                XmlSchemaType type = getType(parentSchema, extension.getBaseTypeName());
                if (type instanceof XmlSchemaComplexType) {
                    XmlSchemaComplexType complexType = (XmlSchemaComplexType) type;
                    if (complexType.getName() != null) {
                        processNamedComplexSchemaType(complexType, parentSchema);
                    } else {
                        //this is not possible. The extension should always
                        //have a name
                        throw new SchemaCompilationException("Unnamed complex type used in extension");//Internationlize this
                    }
                } else if (type instanceof XmlSchemaSimpleType) {
                    //process simple type
                    processSimpleSchemaType((XmlSchemaSimpleType) type, null, parentSchema, null);
                }
            }

commonMethod: 
(startLine=2522 endLine=2563 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00921/modules/adb-codegen/src/org/apache/axis2/schema/SchemaCompiler.java)
    /**
     * returns the parent schema of the componet having QName compoentTypeQName.
     * withe the componet type.
     * @param parentSchema - parent schema of the given componet
     * @param componentQName - qname of the componet, of which we want to get the parent schema
     * @param componetType - type of the componet. this can either be type,element,attribute or attribute group
     * @return parent schema.
     */

    private XmlSchema getParentSchema(XmlSchema parentSchema,
                                      QName componentQName,
                                      int componetType) throws SchemaCompilationException {
        // if the componet do not have a propernamesapce or
        // it is equals to the xsd scheam namesapce
        // we do not have to do any thing.
        if ((componentQName == null) ||
              (componentQName.getNamespaceURI() == null) ||
                Constants.URI_2001_SCHEMA_XSD.equals(componentQName.getNamespaceURI())){
            return parentSchema;
        }

        List visitedSchemas = new ArrayList();
        visitedSchemas.add(parentSchema);
        XmlSchema newParentSchema = getParentSchemaFromIncludes(parentSchema,
                componentQName,componetType,visitedSchemas);
        if (newParentSchema == null){
            String targetNamespace = componentQName.getNamespaceURI();
            if (loadedSchemaMap.containsKey(targetNamespace)){
                XmlSchema tempSchema = (XmlSchema) loadedSchemaMap.get(targetNamespace);
                if (isComponetExists(tempSchema,componentQName,componetType)){
                    newParentSchema = tempSchema;
                }
            } else if (availableSchemaMap.containsKey(targetNamespace)){
                XmlSchema tempSchema = (XmlSchema) availableSchemaMap.get(targetNamespace);
                if (isComponetExists(tempSchema,componentQName,componetType)){
                    compile(tempSchema);
                    newParentSchema = tempSchema;
                }
            }
        }
        return newParentSchema;
    }


, Instance #
frags: 
(startLine=239 endLine=248 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java)
        } catch (DeploymentException e) {
            // TODO RAS & NLS
            if (log.isDebugEnabled()) {
                log.debug(
                        "Caught DeploymentException attempting to complete configuration on AxisService: "
                                + axisService + " for ServiceDesription: " + parent, e);
            }
            throw ExceptionFactory.makeWebServiceException(
                    "Unable to complete configuration due to exception " + e, e);
        } catch (Exception e) {

(startLine=248 endLine=256 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/EndpointDescriptionImpl.java)
        } catch (Exception e) {
            // TODO RAS & NLS
            if (log.isDebugEnabled()) {
                log.debug("Caught Exception attempting to complete configuration on AxisService: "
                        + axisService + " for ServiceDesription: " + parent, e);
            }
            throw ExceptionFactory.makeWebServiceException(
                    "Unable to complete configuration due to exception " + e, e);
        }

commonMethod: 
(startLine=90 endLine=102 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00924/modules/metadata/src/org/apache/axis2/jaxws/i18n/Messages.java)
    /**
     * Get a message from resource.properties from the package of the given object.
     *
     * @param key  The resource key
     * @param arg0 The argument to place in variable {0}
     * @param arg1 The argument to place in variable {1}
     * @return The formatted message
     */
    public static String getMessage(String key, String arg0, String arg1)
            throws MissingResourceException {
        MessageBundle messageBundle = getMessageBundle(DEFAULT_MESSAGE_BUNDLE_KEY);
        return messageBundle.getMessage(key, arg0, arg1);
    }


, Instance #
frags: 
(startLine=1077 endLine=1084 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
            && !(implPDCList == null || implPDCList.isEmpty())) {
            String message = "Validation error: SEI indicates no parameters but implementation method specifies parameters: "
                + implPDCList
                + "; Implementation class: "
                + composite.getClassName()
                + "; Method name: " + seiMDC.getMethodName() + "; Endpoint Interface: " + className;
            throw ExceptionFactory.makeWebServiceException(message);
        } else if ((seiPDCList != null && !seiPDCList.isEmpty())

(startLine=1085 endLine=1091 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
            && !(implPDCList != null && !implPDCList.isEmpty())) {
            String message = "Validation error: SEI indicates parameters " + seiPDCList
                + " but implementation method specifies no parameters; Implementation class: "
                + composite.getClassName() + "; Method name: " + seiMDC.getMethodName()
                + "; Endpoint Interface: " + className;
            throw ExceptionFactory.makeWebServiceException(message);
        } else if (seiPDCList.size() != implPDCList.size()) {

(startLine=1138 endLine=1145 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        } else if (seiReturnValue == null && implReturnValue != null) {
            String message = "Validation error: SEI indicates no return value but implementation method specifies return value: "
                + implReturnValue
                + "; Implementation class: "
                + composite.getClassName()
                + "; Method name: " + seiMDC.getMethodName() + "; Endpoint Interface: " + className;
            throw ExceptionFactory.makeWebServiceException(message);
        } else if (seiReturnValue != null && implReturnValue == null) {

(startLine=1145 endLine=1151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        } else if (seiReturnValue != null && implReturnValue == null) {
            String message = "Validation error: SEI indicates return value " + seiReturnValue
                + " but implementation method specifies no return value; Implementation class: "
                + composite.getClassName() + "; Method name: " + seiMDC.getMethodName()
                + "; Endpoint Interface: " + className;
            throw ExceptionFactory.makeWebServiceException(message);
        } else if (!seiReturnValue.equals(implReturnValue)) {

(startLine=1151 endLine=1157 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        } else if (!seiReturnValue.equals(implReturnValue)) {
            String message = "Validation error: SEI return value " + seiReturnValue
                + " does not match implementation method return value " + implReturnValue
                + "; Implementation class: " + composite.getClassName() + "; Method name: "
                + seiMDC.getMethodName() + "; Endpoint Interface: " + className;
            throw ExceptionFactory.makeWebServiceException(message);
        }

commonMethod: 
(startLine=119 endLine=133 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00924/modules/metadata/src/org/apache/axis2/jaxws/i18n/Messages.java)
    /**
     * Get a message from resource.properties from the package of the given object.
     *
     * @param key  The resource key
     * @param arg0 The argument to place in variable {0}
     * @param arg1 The argument to place in variable {1}
     * @param arg2 The argument to place in variable {2}
     * @param arg3 The argument to place in variable {3}
     * @return The formatted message
     */
    public static String getMessage(String key, String arg0, String arg1, String arg2, String arg3)
            throws MissingResourceException {
        MessageBundle messageBundle = getMessageBundle(DEFAULT_MESSAGE_BUNDLE_KEY);
        return messageBundle.getMessage(key, arg0, arg1, arg2, arg3);
    }


, Instance #
frags: 
(startLine=1077 endLine=1084 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
            && !(implPDCList == null || implPDCList.isEmpty())) {
            String message = "Validation error: SEI indicates no parameters but implementation method specifies parameters: "
                + implPDCList
                + "; Implementation class: "
                + composite.getClassName()
                + "; Method name: " + seiMDC.getMethodName() + "; Endpoint Interface: " + className;
            throw ExceptionFactory.makeWebServiceException(message);
        } else if ((seiPDCList != null && !seiPDCList.isEmpty())

(startLine=1085 endLine=1091 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
            && !(implPDCList != null && !implPDCList.isEmpty())) {
            String message = "Validation error: SEI indicates parameters " + seiPDCList
                + " but implementation method specifies no parameters; Implementation class: "
                + composite.getClassName() + "; Method name: " + seiMDC.getMethodName()
                + "; Endpoint Interface: " + className;
            throw ExceptionFactory.makeWebServiceException(message);
        } else if (seiPDCList.size() != implPDCList.size()) {

(startLine=1138 endLine=1145 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        } else if (seiReturnValue == null && implReturnValue != null) {
            String message = "Validation error: SEI indicates no return value but implementation method specifies return value: "
                + implReturnValue
                + "; Implementation class: "
                + composite.getClassName()
                + "; Method name: " + seiMDC.getMethodName() + "; Endpoint Interface: " + className;
            throw ExceptionFactory.makeWebServiceException(message);
        } else if (seiReturnValue != null && implReturnValue == null) {

(startLine=1145 endLine=1151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        } else if (seiReturnValue != null && implReturnValue == null) {
            String message = "Validation error: SEI indicates return value " + seiReturnValue
                + " but implementation method specifies no return value; Implementation class: "
                + composite.getClassName() + "; Method name: " + seiMDC.getMethodName()
                + "; Endpoint Interface: " + className;
            throw ExceptionFactory.makeWebServiceException(message);
        } else if (!seiReturnValue.equals(implReturnValue)) {

(startLine=1151 endLine=1157 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        } else if (!seiReturnValue.equals(implReturnValue)) {
            String message = "Validation error: SEI return value " + seiReturnValue
                + " does not match implementation method return value " + implReturnValue
                + "; Implementation class: " + composite.getClassName() + "; Method name: "
                + seiMDC.getMethodName() + "; Endpoint Interface: " + className;
            throw ExceptionFactory.makeWebServiceException(message);
        }

commonMethod: 
(startLine=135 endLine=151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00924/modules/metadata/src/org/apache/axis2/jaxws/i18n/Messages.java)
    /**
     * Get a message from resource.properties from the package of the given object.
     *
     * @param key  The resource key
     * @param arg0 The argument to place in variable {0}
     * @param arg1 The argument to place in variable {1}
     * @param arg2 The argument to place in variable {2}
     * @param arg3 The argument to place in variable {3}
     * @param arg4 The argument to place in variable {4}
     * @return The formatted message
     */
    public static String getMessage(String key, String arg0, String arg1, String arg2, String arg3,
                                    String arg4)
            throws MissingResourceException {
        MessageBundle messageBundle = getMessageBundle(DEFAULT_MESSAGE_BUNDLE_KEY);
        return messageBundle.getMessage(key, arg0, arg1, arg2, arg3, arg4);
    }


, Instance #
frags: 
(startLine=1170 endLine=1180 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        if (seiExceptions == null) {
            if (implExceptions == null) {
                return;
            } else {
                // SEI delcares no checked exceptions, but the implementation has checked exceptions, which is an error
                throw ExceptionFactory.makeWebServiceException("Validation error: Implementation method signature has more checked exceptions than SEI method signature (0): Implementation class: "
                    + composite.getClassName() 
                    + "; method name: " + seiMDC.getMethodName() 
                    + "; endpointInterface: " + className);
            }
        } else if (implExceptions == null) {

(startLine=1186 endLine=1193 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        if (seiExceptions.length < implExceptions.length) {
            throw ExceptionFactory.makeWebServiceException("Validation error: Implementation method signature has more checked exceptions ("
                + implExceptions.length + ") than SEI method signature ("
                + seiExceptions.length + "): Implementation class: "
                + composite.getClassName() 
                + "; method name: " + seiMDC.getMethodName() 
                + "; endpointInterface: " + className);
        }

commonMethod: 
(startLine=119 endLine=133 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00924/modules/metadata/src/org/apache/axis2/jaxws/i18n/Messages.java)
    /**
     * Get a message from resource.properties from the package of the given object.
     *
     * @param key  The resource key
     * @param arg0 The argument to place in variable {0}
     * @param arg1 The argument to place in variable {1}
     * @param arg2 The argument to place in variable {2}
     * @param arg3 The argument to place in variable {3}
     * @return The formatted message
     */
    public static String getMessage(String key, String arg0, String arg1, String arg2, String arg3)
            throws MissingResourceException {
        MessageBundle messageBundle = getMessageBundle(DEFAULT_MESSAGE_BUNDLE_KEY);
        return messageBundle.getMessage(key, arg0, arg1, arg2, arg3);
    }


, Instance #
frags: 
(startLine=1170 endLine=1180 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        if (seiExceptions == null) {
            if (implExceptions == null) {
                return;
            } else {
                // SEI delcares no checked exceptions, but the implementation has checked exceptions, which is an error
                throw ExceptionFactory.makeWebServiceException("Validation error: Implementation method signature has more checked exceptions than SEI method signature (0): Implementation class: "
                    + composite.getClassName() 
                    + "; method name: " + seiMDC.getMethodName() 
                    + "; endpointInterface: " + className);
            }
        } else if (implExceptions == null) {

(startLine=1186 endLine=1193 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        if (seiExceptions.length < implExceptions.length) {
            throw ExceptionFactory.makeWebServiceException("Validation error: Implementation method signature has more checked exceptions ("
                + implExceptions.length + ") than SEI method signature ("
                + seiExceptions.length + "): Implementation class: "
                + composite.getClassName() 
                + "; method name: " + seiMDC.getMethodName() 
                + "; endpointInterface: " + className);
        }

commonMethod: 
(startLine=135 endLine=151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00924/modules/metadata/src/org/apache/axis2/jaxws/i18n/Messages.java)
    /**
     * Get a message from resource.properties from the package of the given object.
     *
     * @param key  The resource key
     * @param arg0 The argument to place in variable {0}
     * @param arg1 The argument to place in variable {1}
     * @param arg2 The argument to place in variable {2}
     * @param arg3 The argument to place in variable {3}
     * @param arg4 The argument to place in variable {4}
     * @return The formatted message
     */
    public static String getMessage(String key, String arg0, String arg1, String arg2, String arg3,
                                    String arg4)
            throws MissingResourceException {
        MessageBundle messageBundle = getMessageBundle(DEFAULT_MESSAGE_BUNDLE_KEY);
        return messageBundle.getMessage(key, arg0, arg1, arg2, arg3, arg4);
    }


, Instance #
frags: 
(startLine=1170 endLine=1180 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        if (seiExceptions == null) {
            if (implExceptions == null) {
                return;
            } else {
                // SEI delcares no checked exceptions, but the implementation has checked exceptions, which is an error
                throw ExceptionFactory.makeWebServiceException("Validation error: Implementation method signature has more checked exceptions than SEI method signature (0): Implementation class: "
                    + composite.getClassName() 
                    + "; method name: " + seiMDC.getMethodName() 
                    + "; endpointInterface: " + className);
            }
        } else if (implExceptions == null) {

(startLine=1186 endLine=1193 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        if (seiExceptions.length < implExceptions.length) {
            throw ExceptionFactory.makeWebServiceException("Validation error: Implementation method signature has more checked exceptions ("
                + implExceptions.length + ") than SEI method signature ("
                + seiExceptions.length + "): Implementation class: "
                + composite.getClassName() 
                + "; method name: " + seiMDC.getMethodName() 
                + "; endpointInterface: " + className);
        }

commonMethod: 
(startLine=104 endLine=117 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00924/modules/metadata/src/org/apache/axis2/jaxws/i18n/Messages.java)
    /**
     * Get a message from resource.properties from the package of the given object.
     *
     * @param key  The resource key
     * @param arg0 The argument to place in variable {0}
     * @param arg1 The argument to place in variable {1}
     * @param arg2 The argument to place in variable {2}
     * @return The formatted message
     */
    public static String getMessage(String key, String arg0, String arg1, String arg2)
            throws MissingResourceException {
        MessageBundle messageBundle = getMessageBundle(DEFAULT_MESSAGE_BUNDLE_KEY);
        return messageBundle.getMessage(key, arg0, arg1, arg2);
    }


, Instance #
frags: 
(startLine=858 endLine=863 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
            if (composite.getSoapBindingAnnot() != null) {
                if (composite.getSoapBindingAnnot().use() == javax.jws.soap.SOAPBinding.Use.ENCODED) {
                    throw ExceptionFactory.makeWebServiceException("Validation error: Unsupported SOAPBinding annotation value. The ENCODED setting is not supported for SOAPBinding.Use. Implementation class: " 
                                +composite.getClassName());  
                }
            }

(startLine=1307 endLine=1312 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        if (seic.getSoapBindingAnnot() != null) {
        if (seic.getSoapBindingAnnot().use() == javax.jws.soap.SOAPBinding.Use.ENCODED) {
               throw ExceptionFactory.makeWebServiceException("Validation error: Unsupported SOAPBinding annotation value. The ENCODED setting is not supported for SOAPBinding.Use. Implementation class: " 
                        +seic.getClassName());  
        }
       }

commonMethod: 
(startLine=77 endLine=88 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00924/modules/metadata/src/org/apache/axis2/jaxws/i18n/Messages.java)
    /**
     * Get a message from resource.properties from the package of the given object.
     *
     * @param key  The resource key
     * @param arg0 The argument to place in variable {0}
     * @return The formatted message
     */
    public static String getMessage(String key, String arg0)
            throws MissingResourceException {
        MessageBundle messageBundle = getMessageBundle(DEFAULT_MESSAGE_BUNDLE_KEY);
        return messageBundle.getMessage(key, arg0);
    }


, Instance #
frags: 
(startLine=858 endLine=863 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
            if (composite.getSoapBindingAnnot() != null) {
                if (composite.getSoapBindingAnnot().use() == javax.jws.soap.SOAPBinding.Use.ENCODED) {
                    throw ExceptionFactory.makeWebServiceException("Validation error: Unsupported SOAPBinding annotation value. The ENCODED setting is not supported for SOAPBinding.Use. Implementation class: " 
                                +composite.getClassName());  
                }
            }

(startLine=1307 endLine=1312 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00923/modules/metadata/src/org/apache/axis2/jaxws/description/impl/ServiceDescriptionImpl.java)
        if (seic.getSoapBindingAnnot() != null) {
        if (seic.getSoapBindingAnnot().use() == javax.jws.soap.SOAPBinding.Use.ENCODED) {
               throw ExceptionFactory.makeWebServiceException("Validation error: Unsupported SOAPBinding annotation value. The ENCODED setting is not supported for SOAPBinding.Use. Implementation class: " 
                        +seic.getClassName());  
        }
       }

commonMethod: 
(startLine=90 endLine=102 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00924/modules/metadata/src/org/apache/axis2/jaxws/i18n/Messages.java)
    /**
     * Get a message from resource.properties from the package of the given object.
     *
     * @param key  The resource key
     * @param arg0 The argument to place in variable {0}
     * @param arg1 The argument to place in variable {1}
     * @return The formatted message
     */
    public static String getMessage(String key, String arg0, String arg1)
            throws MissingResourceException {
        MessageBundle messageBundle = getMessageBundle(DEFAULT_MESSAGE_BUNDLE_KEY);
        return messageBundle.getMessage(key, arg0, arg1);
    }


, Instance #
frags: 
(startLine=55 endLine=67 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00934/modules/kernel/src/org/apache/axis2/clustering/context/Replicator.java)
    public static void replicate(AbstractContext abstractContext) throws ClusteringFault {
        if (!doReplication(abstractContext)) {
            return;
        }
        log.debug("Going to replicate state...");
        try {
            replicateState(abstractContext);
        } catch (Exception e) {
            String message = "Could not replicate the state";
            log.error(message, e);
            throw new ClusteringFault(message, e);
        }
    }

(startLine=41 endLine=53 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00934/modules/kernel/src/org/apache/axis2/clustering/context/Replicator.java)
    public static void replicate(MessageContext msgContext) throws ClusteringFault {
        if (!doReplication(msgContext)) {
            return;
        }
        log.debug("Going to replicate state...");
        try {
            replicateState(msgContext);
        } catch (Exception e) {
            String message = "Could not replicate the state";
            log.error(message, e);
            throw new ClusteringFault(message, e);
        }
    }

commonMethod: 
(startLine=215 endLine=223 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00935/modules/kernel/src/org/apache/axis2/context/AbstractContext.java)
    /**
     * Get the property differences since the last transmission by the clustering
     * mechanism
     *
     * @return The property differences
     */
    public synchronized Map getPropertyDifferences() {
        return propertyDifferences;
    }


, Instance #
frags: 
(startLine=55 endLine=67 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00934/modules/kernel/src/org/apache/axis2/clustering/context/Replicator.java)
    public static void replicate(AbstractContext abstractContext) throws ClusteringFault {
        if (!doReplication(abstractContext)) {
            return;
        }
        log.debug("Going to replicate state...");
        try {
            replicateState(abstractContext);
        } catch (Exception e) {
            String message = "Could not replicate the state";
            log.error(message, e);
            throw new ClusteringFault(message, e);
        }
    }

(startLine=41 endLine=53 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00934/modules/kernel/src/org/apache/axis2/clustering/context/Replicator.java)
    public static void replicate(MessageContext msgContext) throws ClusteringFault {
        if (!doReplication(msgContext)) {
            return;
        }
        log.debug("Going to replicate state...");
        try {
            replicateState(msgContext);
        } catch (Exception e) {
            String message = "Could not replicate the state";
            log.error(message, e);
            throw new ClusteringFault(message, e);
        }
    }

commonMethod: 
(startLine=123 endLine=127 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00935/modules/kernel/src/org/apache/axis2/clustering/context/Replicator.java)
    private static ContextManager getContextManager(AbstractContext abstractContext) {
        ClusterManager clusterManager =
                abstractContext.getRootContext().getAxisConfiguration().getClusterManager();
        return clusterManager.getContextManager();
    }


, Instance #
frags: 
(startLine=55 endLine=67 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00934/modules/kernel/src/org/apache/axis2/clustering/context/Replicator.java)
    public static void replicate(AbstractContext abstractContext) throws ClusteringFault {
        if (!doReplication(abstractContext)) {
            return;
        }
        log.debug("Going to replicate state...");
        try {
            replicateState(abstractContext);
        } catch (Exception e) {
            String message = "Could not replicate the state";
            log.error(message, e);
            throw new ClusteringFault(message, e);
        }
    }

(startLine=41 endLine=53 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00934/modules/kernel/src/org/apache/axis2/clustering/context/Replicator.java)
    public static void replicate(MessageContext msgContext) throws ClusteringFault {
        if (!doReplication(msgContext)) {
            return;
        }
        log.debug("Going to replicate state...");
        try {
            replicateState(msgContext);
        } catch (Exception e) {
            String message = "Could not replicate the state";
            log.error(message, e);
            throw new ClusteringFault(message, e);
        }
    }

commonMethod: 
(startLine=162 endLine=187 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00935/modules/kernel/src/org/apache/axis2/clustering/context/Replicator.java)
    private static void waitForACKs(ContextManager contextManager,
                                    String msgUUID,
                                    ConfigurationContext configCtx) throws ClusteringFault {
        long start = System.currentTimeMillis();

        // Wait till all members have ACKed receipt & successful processing of
        // the message with UUID 'msgUUID'
        do {

            // Wait sometime before checking whether message is ACKed
            try {
                Long tts =
                        (Long) configCtx.getPropertyNonReplicable(ClusteringConstants.TIME_TO_SEND);
                if (tts == null) {
                    Thread.sleep(5);
                } else if (tts.longValue() >= 0) {
                    Thread.sleep(tts.longValue() + 5); // Time to recv ACK + time in queue & processing replication request
                }
            } catch (InterruptedException ignored) {
            }
            if (System.currentTimeMillis() - start > 45000) {
                throw new ClusteringFault("ACKs not received from all members within 45 sec. " +
                                          "Aborting wait.");
            }
        } while (!contextManager.isMessageAcknowledged(msgUUID));
    }


, Instance #
frags: 
(startLine=198 endLine=228 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00937/modules/metadata/test/org/apache/axis2/jaxws/description/AnnotationServiceImplWithDBCTests.java)
    public void testLoadWSDLImpl() {
    	String sep = java.io.File.separator;
    	String wsdlRelativeLocation = ".." + sep + ".." + sep + "test-resources" + sep + "wsdl" + sep;
        String wsdlFileName = "EchoMessageService.wsdl";
        String wsdlLocation = wsdlRelativeLocation + wsdlFileName;

        // Build up a DBC, including the WSDL Definition and the annotation information for 
        // the impl class.
        JavaClassToDBCConverter converter = new JavaClassToDBCConverter(EchoMessageService.class);
        HashMap<String, DescriptionBuilderComposite> dbcMap = converter.produceDBC();
        assertNotNull(dbcMap);
        DescriptionBuilderComposite dbc = dbcMap.get(EchoMessageService.class.getName());
        assertNotNull(dbc);
        dbc.setClassLoader(this.getClass().getClassLoader());
        assertNotNull(this.getClass().getClassLoader().getResource((wsdlLocation)));

        WebServiceAnnot webServiceAnnot = dbc.getWebServiceAnnot();
        assertNotNull(webServiceAnnot);
        webServiceAnnot.setWsdlLocation(wsdlLocation);
        dbc.setWebServiceAnnot(webServiceAnnot);
        dbcMap.put(EchoMessageService.class.getName(), dbc);
        
        List<ServiceDescription> serviceDescList =
            DescriptionFactory.createServiceDescriptionFromDBCMap(dbcMap);
        assertEquals(1, serviceDescList.size());
        ServiceDescription sd = serviceDescList.get(0);
        assertNotNull(sd);
        
        // make sure the WSDL definition was read in from the appropriate location
        assertNotNull(((ServiceDescriptionWSDL) sd).getWSDLDefinition());
    }

(startLine=230 endLine=262 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00937/modules/metadata/test/org/apache/axis2/jaxws/description/AnnotationServiceImplWithDBCTests.java)
    public void testLoadWSDLSEI() {
    	String sep = java.io.File.separator;
    	String wsdlRelativeLocation = ".." + sep + ".." + sep + "test-resources" + sep + "wsdl" + sep;
        String wsdlFileName = "EchoMessageService.wsdl";
        String wsdlLocation = wsdlRelativeLocation + wsdlFileName;

        // Build up a DBC, including the WSDL Definition and the annotation information for 
        // the impl class.
        JavaClassToDBCConverter converter = new JavaClassToDBCConverter(EchoMessageServiceSEI.class);
        HashMap<String, DescriptionBuilderComposite> dbcMap = converter.produceDBC();
        assertNotNull(dbcMap);
        DescriptionBuilderComposite dbc = dbcMap.get(EchoMessageServiceSEI.class.getName());
        assertNotNull(dbc);
        DescriptionBuilderComposite seiDBC = dbcMap.get(EchoMessageServiceInterface.class.getName());
        assertNotNull(seiDBC);
        dbc.setClassLoader(this.getClass().getClassLoader());
        assertNotNull(this.getClass().getClassLoader().getResource((wsdlLocation)));

        WebServiceAnnot webServiceAnnot = seiDBC.getWebServiceAnnot();
        assertNotNull(webServiceAnnot);
        webServiceAnnot.setWsdlLocation(wsdlLocation);
        seiDBC.setWebServiceAnnot(webServiceAnnot);
        dbcMap.put(EchoMessageServiceInterface.class.getName(), seiDBC);
        
        List<ServiceDescription> serviceDescList =
            DescriptionFactory.createServiceDescriptionFromDBCMap(dbcMap);
        assertEquals(1, serviceDescList.size());
        ServiceDescription sd = serviceDescList.get(0);
        assertNotNull(sd);
        
        // make sure the WSDL definition was read in from the appropriate location
        assertNotNull(((ServiceDescriptionWSDL) sd).getWSDLDefinition());
    }

commonMethod: 
(startLine=257 endLine=269 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00938/modules/metadata/test/org/apache/axis2/jaxws/description/AnnotationServiceImplWithDBCTests.java)
    private String getEchoMessageServiceWSDLLocation() {
    	String loc = null;
    	String sep = java.io.File.separator;
        loc = sep + "test-resources" + sep + "wsdl" + sep + "EchoMessageService.wsdl";
        try {
        	String baseDir = new File(System.getProperty("basedir",".")).getCanonicalPath();
            loc = baseDir + loc;
        }
        catch(IOException ioe) {
        	ioe.printStackTrace();
        }
    	return loc;
    }


, Instance #
frags: 
(startLine=317 endLine=497 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00937/modules/kernel/src/org/apache/axis2/description/java2wsdl/DocLitBareSchemaGenerator.java)
    private QName generateSchema(JClass javaType) throws Exception {
        String name = getQualifiedName(javaType);
        QName schemaTypeName = typeTable.getComplexSchemaType(name);
        if (schemaTypeName == null) {
            String simpleName = getSimpleName(javaType);

            String packageName = getQualifiedName(javaType.getContainingPackage());
            String targetNameSpace = resolveSchemaNamespace(packageName);

            XmlSchema xmlSchema = getXmlSchema(targetNameSpace);
            String targetNamespacePrefix = (String) targetNamespacePrefixMap.get(targetNameSpace);
            if (targetNamespacePrefix == null) {
                targetNamespacePrefix = generatePrefix();
                targetNamespacePrefixMap.put(targetNameSpace, targetNamespacePrefix);
            }

            XmlSchemaComplexType complexType = new XmlSchemaComplexType(xmlSchema);
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            XmlSchemaComplexContentExtension complexExtension =
                    new XmlSchemaComplexContentExtension();

            XmlSchemaElement eltOuter = new XmlSchemaElement();
            schemaTypeName = new QName(targetNameSpace, simpleName, targetNamespacePrefix);
            eltOuter.setName(simpleName);
            eltOuter.setQName(schemaTypeName);

            JClass sup = javaType.getSuperclass();

            if ((sup != null) && !("java.lang.Object".compareTo(sup.getQualifiedName()) == 0) &&
                    !("org.apache.axis2".compareTo(sup.getContainingPackage().getQualifiedName()) == 0)
                    &&!("java.util".compareTo(sup.getContainingPackage().getQualifiedName()) == 0)) {
                String superClassName = sup.getQualifiedName();
                String superclassname = getSimpleName(sup);
                String tgtNamespace;
                String tgtNamespacepfx;
                QName qName = typeTable.getSimpleSchemaTypeName(superClassName);
                if (qName != null) {
                    tgtNamespace = qName.getNamespaceURI();
                    tgtNamespacepfx = qName.getPrefix();
                } else {
                    tgtNamespace =
                            resolveSchemaNamespace(sup.getContainingPackage().getQualifiedName());
                    tgtNamespacepfx = (String) targetNamespacePrefixMap.get(tgtNamespace);
                    QName superClassQname = generateSchema(sup);
                    if(superClassQname!=null){
                        tgtNamespacepfx = superClassQname.getPrefix();
                        tgtNamespace = superClassQname.getNamespaceURI();
                    }
                }

                if (tgtNamespacepfx == null) {
                    tgtNamespacepfx = generatePrefix();
                    targetNamespacePrefixMap.put(tgtNamespace, tgtNamespacepfx);
                }

                QName basetype = new QName(tgtNamespace, superclassname, tgtNamespacepfx);


                complexExtension.setBaseTypeName(basetype);
                complexExtension.setParticle(sequence);

                XmlSchemaComplexContent contentModel = new XmlSchemaComplexContent();

                contentModel.setContent(complexExtension);

                complexType.setContentModel(contentModel);

            } else {
                complexType.setParticle(sequence);
            }

            complexType.setName(simpleName);

//            xmlSchema.getItems().add(eltOuter);
            xmlSchema.getElements().add(schemaTypeName, eltOuter);
            eltOuter.setSchemaTypeName(complexType.getQName());

            xmlSchema.getItems().add(complexType);
            xmlSchema.getSchemaTypes().add(schemaTypeName, complexType);

            // adding this type to the table
            typeTable.addComplexSchema(name, eltOuter.getQName());
            // adding this type's package to the table, to support inheritance.
            typeTable.addComplexSchema(javaType.getContainingPackage().getQualifiedName(),
                    eltOuter.getQName());


            Set propertiesSet = new HashSet();
            Set propertiesNames = new HashSet();

            ArrayList excludes = null;
            if (service.getBeanExludeMap() !=null) {
                excludes = (ArrayList) service.getBeanExludeMap().get(
                        javaType.getQualifiedName());
            }
            JProperty[] tempProperties = javaType.getDeclaredProperties();
            for (int i = 0; i < tempProperties.length; i++) {
                JProperty tempProperty = tempProperties[i];
                if (excludes !=null && excludes.contains("*")){
                      continue;
                }
                if (excludes != null && excludes.contains(
                        getCorrectName(tempProperty.getSimpleName()))) {
                    continue;
                }
                propertiesSet.add(tempProperties[i]);
            }

            JProperty[] properties = (JProperty[]) propertiesSet.toArray(new JProperty[0]);
            Arrays.sort(properties);
            for (int i = 0; i < properties.length; i++) {
                JProperty property = properties[i];
                boolean isArryType = property.getType().isArrayType();

                String propname = getCorrectName(property.getSimpleName());

                propertiesNames.add(propname);

                this.generateSchemaforFieldsandProperties(xmlSchema, sequence, property.getType(),
                        propname, isArryType);

            }

            JField[] tempFields = javaType.getDeclaredFields();
            HashMap FieldMap = new HashMap();


            for (int i = 0; i < tempFields.length; i++) {
                // create a element for the field only if it is public
                // and there is no property with the same name
                if (tempFields[i].isPublic()) {

                    if (tempFields[i].isStatic()) {
//                        We do not need to expose static fields
                        continue;
                    }
                    if (excludes != null && excludes.contains("*")) {
                        continue;
                    }
                    if (excludes != null &&
                            excludes.contains(tempFields[i].getSimpleName())) {
                        continue;
                    }

                    // skip field with same name as a property
                    if (!propertiesNames.contains(tempFields[i].getSimpleName())) {

                        FieldMap.put(tempFields[i].getSimpleName(), tempFields[i]);
                    }
                }

            }

            // remove fields from super classes patch for defect Annogen-21
            // getDeclaredFields is incorrectly returning fields of super classes as well
            // getDeclaredProperties used earlier works correctly
            JClass supr = javaType.getSuperclass();
            while (supr != null && supr.getQualifiedName().compareTo("java.lang.Object") != 0) {
                JField[] suprFields = supr.getFields();
                for (int i = 0; i < suprFields.length; i++) {
                    FieldMap.remove(suprFields[i].getSimpleName());
                }
                supr = supr.getSuperclass();
            }
            // end patch for Annogen -21

            JField[] froperties = (JField[]) FieldMap.values().toArray(new JField[0]);
            Arrays.sort(froperties);

            for (int i = 0; i < froperties.length; i++) {
                JField field = froperties[i];
                boolean isArryType = field.getType().isArrayType();

                this.generateSchemaforFieldsandProperties(xmlSchema, sequence, field.getType(),
                        field.getSimpleName(), isArryType);
            }


        }
        return schemaTypeName;
    }

(startLine=414 endLine=592 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00937/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    private QName generateSchema(JClass javaType) throws Exception {
        String name = getQualifiedName(javaType);
        QName schemaTypeName = typeTable.getComplexSchemaType(name);
        if (schemaTypeName == null) {
            String simpleName = getSimpleName(javaType);

            String packageName = getQualifiedName(javaType.getContainingPackage());
            String targetNameSpace = resolveSchemaNamespace(packageName);

            XmlSchema xmlSchema = getXmlSchema(targetNameSpace);
            String targetNamespacePrefix = (String) targetNamespacePrefixMap.get(targetNameSpace);
            if (targetNamespacePrefix == null) {
                targetNamespacePrefix = generatePrefix();
                targetNamespacePrefixMap.put(targetNameSpace, targetNamespacePrefix);
            }

            XmlSchemaComplexType complexType = new XmlSchemaComplexType(xmlSchema);
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            XmlSchemaComplexContentExtension complexExtension =
                    new XmlSchemaComplexContentExtension();

            XmlSchemaElement eltOuter = new XmlSchemaElement();
            schemaTypeName = new QName(targetNameSpace, simpleName, targetNamespacePrefix);
            eltOuter.setName(simpleName);
            eltOuter.setQName(schemaTypeName);

            JClass sup = javaType.getSuperclass();

            if ((sup != null) && !("java.lang.Object".compareTo(sup.getQualifiedName()) == 0) &&
                    !("org.apache.axis2".compareTo(sup.getContainingPackage().getQualifiedName()) == 0)
                    &&!("java.util".compareTo(sup.getContainingPackage().getQualifiedName()) == 0)) {
                String superClassName = sup.getQualifiedName();
                String superclassname = getSimpleName(sup);
                String tgtNamespace;
                String tgtNamespacepfx;
                QName qName = typeTable.getSimpleSchemaTypeName(superClassName);
                if (qName != null) {
                    tgtNamespace = qName.getNamespaceURI();
                    tgtNamespacepfx = qName.getPrefix();
                } else {
                    tgtNamespace =
                            resolveSchemaNamespace(sup.getContainingPackage().getQualifiedName());
                    tgtNamespacepfx = (String) targetNamespacePrefixMap.get(tgtNamespace);
                    QName superClassQname = generateSchema(sup);
                    if(superClassQname!=null){
                        tgtNamespacepfx = superClassQname.getPrefix();
                        tgtNamespace = superClassQname.getNamespaceURI();
                    }
                }

                if (tgtNamespacepfx == null) {
                    tgtNamespacepfx = generatePrefix();
                    targetNamespacePrefixMap.put(tgtNamespace, tgtNamespacepfx);
                }

                QName basetype = new QName(tgtNamespace, superclassname, tgtNamespacepfx);


                complexExtension.setBaseTypeName(basetype);
                complexExtension.setParticle(sequence);

                XmlSchemaComplexContent contentModel = new XmlSchemaComplexContent();

                contentModel.setContent(complexExtension);

                complexType.setContentModel(contentModel);

            } else {
                complexType.setParticle(sequence);
            }

            complexType.setName(simpleName);

//            xmlSchema.getItems().add(eltOuter);
            xmlSchema.getElements().add(schemaTypeName, eltOuter);
            eltOuter.setSchemaTypeName(complexType.getQName());

            xmlSchema.getItems().add(complexType);
            xmlSchema.getSchemaTypes().add(schemaTypeName, complexType);

            // adding this type to the table
            typeTable.addComplexSchema(name, eltOuter.getQName());
            // adding this type's package to the table, to support inheritance.
            typeTable.addComplexSchema(javaType.getContainingPackage().getQualifiedName(),
                    eltOuter.getQName());


            Set propertiesSet = new HashSet();
            Set propertiesNames = new HashSet();

            JProperty[] tempProperties = javaType.getDeclaredProperties();
            ArrayList excludes = null;
            if (service.getBeanExludeMap() !=null) {
                excludes = (ArrayList) service.getBeanExludeMap().get(
                        javaType.getQualifiedName());
            }
            for (int i = 0; i < tempProperties.length; i++) {
                JProperty tempProperty = tempProperties[i];
                if (excludes !=null && excludes.contains("*")){
                      continue;
                }
                if (excludes != null && excludes.contains(
                        getCorrectName(tempProperty.getSimpleName()))) {
                    continue;
                }
                propertiesSet.add(tempProperties[i]);
            }

            JProperty[] properties = (JProperty[]) propertiesSet.toArray(new JProperty[0]);
            Arrays.sort(properties);
            for (int i = 0; i < properties.length; i++) {
                JProperty property = properties[i];
                boolean isArryType = property.getType().isArrayType();

                String propname = getCorrectName(property.getSimpleName());

                propertiesNames.add(propname);

                this.generateSchemaforFieldsandProperties(xmlSchema, sequence, property.getType(),
                        propname, isArryType);

            }

            JField[] tempFields = javaType.getDeclaredFields();
            HashMap FieldMap = new HashMap();


            for (int i = 0; i < tempFields.length; i++) {
                // create a element for the field only if it is public
                // and there is no property with the same name
                if (tempFields[i].isPublic()) {
                    if (tempFields[i].isStatic()){
//                        We do not need to expose static fields
                        continue;
                    }
                    if (excludes != null && excludes.contains("*")) {
                        continue;
                    }
                    if (excludes !=null &&
                            excludes.contains(tempFields[i].getSimpleName())) {
                        continue;
                    }
                    // skip field with same name as a property
                    if (!propertiesNames.contains(tempFields[i].getSimpleName())) {

                        FieldMap.put(tempFields[i].getSimpleName(), tempFields[i]);
                    }
                }

            }

            // remove fields from super classes patch for defect Annogen-21
            // getDeclaredFields is incorrectly returning fields of super classes as well
            // getDeclaredProperties used earlier works correctly
            JClass supr = javaType.getSuperclass();
            while (supr != null && supr.getQualifiedName().compareTo("java.lang.Object") != 0) {
                JField[] suprFields = supr.getFields();
                for (int i = 0; i < suprFields.length; i++) {
                    FieldMap.remove(suprFields[i].getSimpleName());
                }
                supr = supr.getSuperclass();
            }
            // end patch for Annogen -21

            JField[] froperties = (JField[]) FieldMap.values().toArray(new JField[0]);
            Arrays.sort(froperties);

            for (int i = 0; i < froperties.length; i++) {
                JField field = froperties[i];
                boolean isArryType = field.getType().isArrayType();

                this.generateSchemaforFieldsandProperties(xmlSchema, sequence, field.getType(),
                        field.getSimpleName(), isArryType);
            }


        }
        return schemaTypeName;
    }

commonMethod: 
(startLine=53 endLine=72 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00938/modules/kernel/src/org/apache/axis2/deployment/util/BeanExcludeInfo.java)
    /**
     * a property is excluded if it ths given in the exclude list
     * but not in include list
     * @param property
     * @return is exclude the property or not
     */
    public boolean isExcluedProperty(String property){
       boolean isExclude = false;
       if ((excludeProperties != null) && (excludeProperties.trim().length() > 0)){
           if (property.matches(excludeProperties)){
               isExclude = true;
               if ((includeProperties != null) && (includeProperties.trim().length() > 0)){
                   if (property.matches(includeProperties)){
                       isExclude = false;
                   }
               }
           }
       }
       return isExclude;
    }


, Instance #
frags: 
(startLine=317 endLine=497 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00937/modules/kernel/src/org/apache/axis2/description/java2wsdl/DocLitBareSchemaGenerator.java)
    private QName generateSchema(JClass javaType) throws Exception {
        String name = getQualifiedName(javaType);
        QName schemaTypeName = typeTable.getComplexSchemaType(name);
        if (schemaTypeName == null) {
            String simpleName = getSimpleName(javaType);

            String packageName = getQualifiedName(javaType.getContainingPackage());
            String targetNameSpace = resolveSchemaNamespace(packageName);

            XmlSchema xmlSchema = getXmlSchema(targetNameSpace);
            String targetNamespacePrefix = (String) targetNamespacePrefixMap.get(targetNameSpace);
            if (targetNamespacePrefix == null) {
                targetNamespacePrefix = generatePrefix();
                targetNamespacePrefixMap.put(targetNameSpace, targetNamespacePrefix);
            }

            XmlSchemaComplexType complexType = new XmlSchemaComplexType(xmlSchema);
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            XmlSchemaComplexContentExtension complexExtension =
                    new XmlSchemaComplexContentExtension();

            XmlSchemaElement eltOuter = new XmlSchemaElement();
            schemaTypeName = new QName(targetNameSpace, simpleName, targetNamespacePrefix);
            eltOuter.setName(simpleName);
            eltOuter.setQName(schemaTypeName);

            JClass sup = javaType.getSuperclass();

            if ((sup != null) && !("java.lang.Object".compareTo(sup.getQualifiedName()) == 0) &&
                    !("org.apache.axis2".compareTo(sup.getContainingPackage().getQualifiedName()) == 0)
                    &&!("java.util".compareTo(sup.getContainingPackage().getQualifiedName()) == 0)) {
                String superClassName = sup.getQualifiedName();
                String superclassname = getSimpleName(sup);
                String tgtNamespace;
                String tgtNamespacepfx;
                QName qName = typeTable.getSimpleSchemaTypeName(superClassName);
                if (qName != null) {
                    tgtNamespace = qName.getNamespaceURI();
                    tgtNamespacepfx = qName.getPrefix();
                } else {
                    tgtNamespace =
                            resolveSchemaNamespace(sup.getContainingPackage().getQualifiedName());
                    tgtNamespacepfx = (String) targetNamespacePrefixMap.get(tgtNamespace);
                    QName superClassQname = generateSchema(sup);
                    if(superClassQname!=null){
                        tgtNamespacepfx = superClassQname.getPrefix();
                        tgtNamespace = superClassQname.getNamespaceURI();
                    }
                }

                if (tgtNamespacepfx == null) {
                    tgtNamespacepfx = generatePrefix();
                    targetNamespacePrefixMap.put(tgtNamespace, tgtNamespacepfx);
                }

                QName basetype = new QName(tgtNamespace, superclassname, tgtNamespacepfx);


                complexExtension.setBaseTypeName(basetype);
                complexExtension.setParticle(sequence);

                XmlSchemaComplexContent contentModel = new XmlSchemaComplexContent();

                contentModel.setContent(complexExtension);

                complexType.setContentModel(contentModel);

            } else {
                complexType.setParticle(sequence);
            }

            complexType.setName(simpleName);

//            xmlSchema.getItems().add(eltOuter);
            xmlSchema.getElements().add(schemaTypeName, eltOuter);
            eltOuter.setSchemaTypeName(complexType.getQName());

            xmlSchema.getItems().add(complexType);
            xmlSchema.getSchemaTypes().add(schemaTypeName, complexType);

            // adding this type to the table
            typeTable.addComplexSchema(name, eltOuter.getQName());
            // adding this type's package to the table, to support inheritance.
            typeTable.addComplexSchema(javaType.getContainingPackage().getQualifiedName(),
                    eltOuter.getQName());


            Set propertiesSet = new HashSet();
            Set propertiesNames = new HashSet();

            ArrayList excludes = null;
            if (service.getBeanExludeMap() !=null) {
                excludes = (ArrayList) service.getBeanExludeMap().get(
                        javaType.getQualifiedName());
            }
            JProperty[] tempProperties = javaType.getDeclaredProperties();
            for (int i = 0; i < tempProperties.length; i++) {
                JProperty tempProperty = tempProperties[i];
                if (excludes !=null && excludes.contains("*")){
                      continue;
                }
                if (excludes != null && excludes.contains(
                        getCorrectName(tempProperty.getSimpleName()))) {
                    continue;
                }
                propertiesSet.add(tempProperties[i]);
            }

            JProperty[] properties = (JProperty[]) propertiesSet.toArray(new JProperty[0]);
            Arrays.sort(properties);
            for (int i = 0; i < properties.length; i++) {
                JProperty property = properties[i];
                boolean isArryType = property.getType().isArrayType();

                String propname = getCorrectName(property.getSimpleName());

                propertiesNames.add(propname);

                this.generateSchemaforFieldsandProperties(xmlSchema, sequence, property.getType(),
                        propname, isArryType);

            }

            JField[] tempFields = javaType.getDeclaredFields();
            HashMap FieldMap = new HashMap();


            for (int i = 0; i < tempFields.length; i++) {
                // create a element for the field only if it is public
                // and there is no property with the same name
                if (tempFields[i].isPublic()) {

                    if (tempFields[i].isStatic()) {
//                        We do not need to expose static fields
                        continue;
                    }
                    if (excludes != null && excludes.contains("*")) {
                        continue;
                    }
                    if (excludes != null &&
                            excludes.contains(tempFields[i].getSimpleName())) {
                        continue;
                    }

                    // skip field with same name as a property
                    if (!propertiesNames.contains(tempFields[i].getSimpleName())) {

                        FieldMap.put(tempFields[i].getSimpleName(), tempFields[i]);
                    }
                }

            }

            // remove fields from super classes patch for defect Annogen-21
            // getDeclaredFields is incorrectly returning fields of super classes as well
            // getDeclaredProperties used earlier works correctly
            JClass supr = javaType.getSuperclass();
            while (supr != null && supr.getQualifiedName().compareTo("java.lang.Object") != 0) {
                JField[] suprFields = supr.getFields();
                for (int i = 0; i < suprFields.length; i++) {
                    FieldMap.remove(suprFields[i].getSimpleName());
                }
                supr = supr.getSuperclass();
            }
            // end patch for Annogen -21

            JField[] froperties = (JField[]) FieldMap.values().toArray(new JField[0]);
            Arrays.sort(froperties);

            for (int i = 0; i < froperties.length; i++) {
                JField field = froperties[i];
                boolean isArryType = field.getType().isArrayType();

                this.generateSchemaforFieldsandProperties(xmlSchema, sequence, field.getType(),
                        field.getSimpleName(), isArryType);
            }


        }
        return schemaTypeName;
    }

(startLine=414 endLine=592 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00937/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    private QName generateSchema(JClass javaType) throws Exception {
        String name = getQualifiedName(javaType);
        QName schemaTypeName = typeTable.getComplexSchemaType(name);
        if (schemaTypeName == null) {
            String simpleName = getSimpleName(javaType);

            String packageName = getQualifiedName(javaType.getContainingPackage());
            String targetNameSpace = resolveSchemaNamespace(packageName);

            XmlSchema xmlSchema = getXmlSchema(targetNameSpace);
            String targetNamespacePrefix = (String) targetNamespacePrefixMap.get(targetNameSpace);
            if (targetNamespacePrefix == null) {
                targetNamespacePrefix = generatePrefix();
                targetNamespacePrefixMap.put(targetNameSpace, targetNamespacePrefix);
            }

            XmlSchemaComplexType complexType = new XmlSchemaComplexType(xmlSchema);
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            XmlSchemaComplexContentExtension complexExtension =
                    new XmlSchemaComplexContentExtension();

            XmlSchemaElement eltOuter = new XmlSchemaElement();
            schemaTypeName = new QName(targetNameSpace, simpleName, targetNamespacePrefix);
            eltOuter.setName(simpleName);
            eltOuter.setQName(schemaTypeName);

            JClass sup = javaType.getSuperclass();

            if ((sup != null) && !("java.lang.Object".compareTo(sup.getQualifiedName()) == 0) &&
                    !("org.apache.axis2".compareTo(sup.getContainingPackage().getQualifiedName()) == 0)
                    &&!("java.util".compareTo(sup.getContainingPackage().getQualifiedName()) == 0)) {
                String superClassName = sup.getQualifiedName();
                String superclassname = getSimpleName(sup);
                String tgtNamespace;
                String tgtNamespacepfx;
                QName qName = typeTable.getSimpleSchemaTypeName(superClassName);
                if (qName != null) {
                    tgtNamespace = qName.getNamespaceURI();
                    tgtNamespacepfx = qName.getPrefix();
                } else {
                    tgtNamespace =
                            resolveSchemaNamespace(sup.getContainingPackage().getQualifiedName());
                    tgtNamespacepfx = (String) targetNamespacePrefixMap.get(tgtNamespace);
                    QName superClassQname = generateSchema(sup);
                    if(superClassQname!=null){
                        tgtNamespacepfx = superClassQname.getPrefix();
                        tgtNamespace = superClassQname.getNamespaceURI();
                    }
                }

                if (tgtNamespacepfx == null) {
                    tgtNamespacepfx = generatePrefix();
                    targetNamespacePrefixMap.put(tgtNamespace, tgtNamespacepfx);
                }

                QName basetype = new QName(tgtNamespace, superclassname, tgtNamespacepfx);


                complexExtension.setBaseTypeName(basetype);
                complexExtension.setParticle(sequence);

                XmlSchemaComplexContent contentModel = new XmlSchemaComplexContent();

                contentModel.setContent(complexExtension);

                complexType.setContentModel(contentModel);

            } else {
                complexType.setParticle(sequence);
            }

            complexType.setName(simpleName);

//            xmlSchema.getItems().add(eltOuter);
            xmlSchema.getElements().add(schemaTypeName, eltOuter);
            eltOuter.setSchemaTypeName(complexType.getQName());

            xmlSchema.getItems().add(complexType);
            xmlSchema.getSchemaTypes().add(schemaTypeName, complexType);

            // adding this type to the table
            typeTable.addComplexSchema(name, eltOuter.getQName());
            // adding this type's package to the table, to support inheritance.
            typeTable.addComplexSchema(javaType.getContainingPackage().getQualifiedName(),
                    eltOuter.getQName());


            Set propertiesSet = new HashSet();
            Set propertiesNames = new HashSet();

            JProperty[] tempProperties = javaType.getDeclaredProperties();
            ArrayList excludes = null;
            if (service.getBeanExludeMap() !=null) {
                excludes = (ArrayList) service.getBeanExludeMap().get(
                        javaType.getQualifiedName());
            }
            for (int i = 0; i < tempProperties.length; i++) {
                JProperty tempProperty = tempProperties[i];
                if (excludes !=null && excludes.contains("*")){
                      continue;
                }
                if (excludes != null && excludes.contains(
                        getCorrectName(tempProperty.getSimpleName()))) {
                    continue;
                }
                propertiesSet.add(tempProperties[i]);
            }

            JProperty[] properties = (JProperty[]) propertiesSet.toArray(new JProperty[0]);
            Arrays.sort(properties);
            for (int i = 0; i < properties.length; i++) {
                JProperty property = properties[i];
                boolean isArryType = property.getType().isArrayType();

                String propname = getCorrectName(property.getSimpleName());

                propertiesNames.add(propname);

                this.generateSchemaforFieldsandProperties(xmlSchema, sequence, property.getType(),
                        propname, isArryType);

            }

            JField[] tempFields = javaType.getDeclaredFields();
            HashMap FieldMap = new HashMap();


            for (int i = 0; i < tempFields.length; i++) {
                // create a element for the field only if it is public
                // and there is no property with the same name
                if (tempFields[i].isPublic()) {
                    if (tempFields[i].isStatic()){
//                        We do not need to expose static fields
                        continue;
                    }
                    if (excludes != null && excludes.contains("*")) {
                        continue;
                    }
                    if (excludes !=null &&
                            excludes.contains(tempFields[i].getSimpleName())) {
                        continue;
                    }
                    // skip field with same name as a property
                    if (!propertiesNames.contains(tempFields[i].getSimpleName())) {

                        FieldMap.put(tempFields[i].getSimpleName(), tempFields[i]);
                    }
                }

            }

            // remove fields from super classes patch for defect Annogen-21
            // getDeclaredFields is incorrectly returning fields of super classes as well
            // getDeclaredProperties used earlier works correctly
            JClass supr = javaType.getSuperclass();
            while (supr != null && supr.getQualifiedName().compareTo("java.lang.Object") != 0) {
                JField[] suprFields = supr.getFields();
                for (int i = 0; i < suprFields.length; i++) {
                    FieldMap.remove(suprFields[i].getSimpleName());
                }
                supr = supr.getSuperclass();
            }
            // end patch for Annogen -21

            JField[] froperties = (JField[]) FieldMap.values().toArray(new JField[0]);
            Arrays.sort(froperties);

            for (int i = 0; i < froperties.length; i++) {
                JField field = froperties[i];
                boolean isArryType = field.getType().isArrayType();

                this.generateSchemaforFieldsandProperties(xmlSchema, sequence, field.getType(),
                        field.getSimpleName(), isArryType);
            }


        }
        return schemaTypeName;
    }

commonMethod: 
(startLine=41 endLine=55 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00938/modules/kernel/src/org/apache/axis2/deployment/util/ExcludeInfo.java)
    public BeanExcludeInfo getBeanExcludeInfoForClass(String className){
        // here map keys represents the regualr expressions for class names
        // so we have to iterate through the keys and find the beanInfo object
        String classNameRegx = null;
        BeanExcludeInfo beanExcludeInfo = null;
        for (Iterator iter = this.classNameToBeanInfoMap.keySet().iterator(); iter.hasNext();){
             classNameRegx = (String) iter.next();
             if (className.matches(classNameRegx)){
                 beanExcludeInfo = (BeanExcludeInfo) this.classNameToBeanInfoMap.get(classNameRegx);
                 // this means we have find the required object
                 break;
             }
        }
        return beanExcludeInfo;
    }


, Instance #
frags: 
(startLine=444 endLine=468 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00937/modules/kernel/src/org/apache/axis2/description/java2wsdl/DocLitBareSchemaGenerator.java)
            for (int i = 0; i < tempFields.length; i++) {
                // create a element for the field only if it is public
                // and there is no property with the same name
                if (tempFields[i].isPublic()) {

                    if (tempFields[i].isStatic()) {
//                        We do not need to expose static fields
                        continue;
                    }
                    if (excludes != null && excludes.contains("*")) {
                        continue;
                    }
                    if (excludes != null &&
                            excludes.contains(tempFields[i].getSimpleName())) {
                        continue;
                    }

                    // skip field with same name as a property
                    if (!propertiesNames.contains(tempFields[i].getSimpleName())) {

                        FieldMap.put(tempFields[i].getSimpleName(), tempFields[i]);
                    }
                }

            }

(startLine=541 endLine=563 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00937/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
            for (int i = 0; i < tempFields.length; i++) {
                // create a element for the field only if it is public
                // and there is no property with the same name
                if (tempFields[i].isPublic()) {
                    if (tempFields[i].isStatic()){
//                        We do not need to expose static fields
                        continue;
                    }
                    if (excludes != null && excludes.contains("*")) {
                        continue;
                    }
                    if (excludes !=null &&
                            excludes.contains(tempFields[i].getSimpleName())) {
                        continue;
                    }
                    // skip field with same name as a property
                    if (!propertiesNames.contains(tempFields[i].getSimpleName())) {

                        FieldMap.put(tempFields[i].getSimpleName(), tempFields[i]);
                    }
                }

            }

commonMethod: 
(startLine=53 endLine=72 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00938/modules/kernel/src/org/apache/axis2/deployment/util/BeanExcludeInfo.java)
    /**
     * a property is excluded if it ths given in the exclude list
     * but not in include list
     * @param property
     * @return is exclude the property or not
     */
    public boolean isExcluedProperty(String property){
       boolean isExclude = false;
       if ((excludeProperties != null) && (excludeProperties.trim().length() > 0)){
           if (property.matches(excludeProperties)){
               isExclude = true;
               if ((includeProperties != null) && (includeProperties.trim().length() > 0)){
                   if (property.matches(includeProperties)){
                       isExclude = false;
                   }
               }
           }
       }
       return isExclude;
    }


, Instance #
frags: 
(startLine=444 endLine=468 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00937/modules/kernel/src/org/apache/axis2/description/java2wsdl/DocLitBareSchemaGenerator.java)
            for (int i = 0; i < tempFields.length; i++) {
                // create a element for the field only if it is public
                // and there is no property with the same name
                if (tempFields[i].isPublic()) {

                    if (tempFields[i].isStatic()) {
//                        We do not need to expose static fields
                        continue;
                    }
                    if (excludes != null && excludes.contains("*")) {
                        continue;
                    }
                    if (excludes != null &&
                            excludes.contains(tempFields[i].getSimpleName())) {
                        continue;
                    }

                    // skip field with same name as a property
                    if (!propertiesNames.contains(tempFields[i].getSimpleName())) {

                        FieldMap.put(tempFields[i].getSimpleName(), tempFields[i]);
                    }
                }

            }

(startLine=541 endLine=563 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00937/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
            for (int i = 0; i < tempFields.length; i++) {
                // create a element for the field only if it is public
                // and there is no property with the same name
                if (tempFields[i].isPublic()) {
                    if (tempFields[i].isStatic()){
//                        We do not need to expose static fields
                        continue;
                    }
                    if (excludes != null && excludes.contains("*")) {
                        continue;
                    }
                    if (excludes !=null &&
                            excludes.contains(tempFields[i].getSimpleName())) {
                        continue;
                    }
                    // skip field with same name as a property
                    if (!propertiesNames.contains(tempFields[i].getSimpleName())) {

                        FieldMap.put(tempFields[i].getSimpleName(), tempFields[i]);
                    }
                }

            }

commonMethod: 
(startLine=41 endLine=55 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00938/modules/kernel/src/org/apache/axis2/deployment/util/ExcludeInfo.java)
    public BeanExcludeInfo getBeanExcludeInfoForClass(String className){
        // here map keys represents the regualr expressions for class names
        // so we have to iterate through the keys and find the beanInfo object
        String classNameRegx = null;
        BeanExcludeInfo beanExcludeInfo = null;
        for (Iterator iter = this.classNameToBeanInfoMap.keySet().iterator(); iter.hasNext();){
             classNameRegx = (String) iter.next();
             if (className.matches(classNameRegx)){
                 beanExcludeInfo = (BeanExcludeInfo) this.classNameToBeanInfoMap.get(classNameRegx);
                 // this means we have find the required object
                 break;
             }
        }
        return beanExcludeInfo;
    }


, Instance #
frags: 
(startLine=169 endLine=186 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00985/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/WrapTests.java)
    public void testEchoStringWSGEN1() {
        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());
        try{
            String request = "hello world";
            
            DocLitWrapService service = new DocLitWrapService();
            DocLitWrap proxy = service.getDocLitWrapPort();
            BindingProvider p = (BindingProvider) proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            String response = proxy.echoStringWSGEN1(request);
            assertTrue(response.equals(request));
            TestLogger.logger.debug("------------------------------");
        }catch(Exception e){
            e.printStackTrace();
            fail();
        }
    }

(startLine=194 endLine=211 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00985/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/WrapTests.java)
    public void testEchoStringWSGEN2() {
        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());
        try{
            String request = "hello world 2";
            
            DocLitWrapService service = new DocLitWrapService();
            DocLitWrap proxy = service.getDocLitWrapPort();
            BindingProvider p = (BindingProvider) proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            String response = proxy.echoStringWSGEN2(request);
            assertTrue(response.equals(request));
            TestLogger.logger.debug("------------------------------");
        }catch(Exception e){
            e.printStackTrace();
            fail();
        }
    }

commonMethod: 
(startLine=60 endLine=70 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00986/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/WrapTests.java)
        /**
         * Get theDocLitWrap Prxoy
         * @return DocLitWrapProxy
         */
        private DocLitWrap getProxy() {
            DocLitWrapService service = new DocLitWrapService();
            DocLitWrap proxy = service.getDocLitWrapPort();
            BindingProvider p = (BindingProvider) proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            return proxy;
        }


, Instance #
frags: 
(startLine=172 endLine=182 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00985/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/WrapTests.java)
        try{
            String request = "hello world";
            
            DocLitWrapService service = new DocLitWrapService();
            DocLitWrap proxy = service.getDocLitWrapPort();
            BindingProvider p = (BindingProvider) proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            String response = proxy.echoStringWSGEN1(request);
            assertTrue(response.equals(request));
            TestLogger.logger.debug("------------------------------");
        }catch(Exception e){

(startLine=197 endLine=207 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00985/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/WrapTests.java)
        try{
            String request = "hello world 2";
            
            DocLitWrapService service = new DocLitWrapService();
            DocLitWrap proxy = service.getDocLitWrapPort();
            BindingProvider p = (BindingProvider) proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            String response = proxy.echoStringWSGEN2(request);
            assertTrue(response.equals(request));
            TestLogger.logger.debug("------------------------------");
        }catch(Exception e){

commonMethod: 
(startLine=60 endLine=70 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/00986/modules/jaxws-integration/test/org/apache/axis2/jaxws/sample/WrapTests.java)
        /**
         * Get theDocLitWrap Prxoy
         * @return DocLitWrapProxy
         */
        private DocLitWrap getProxy() {
            DocLitWrapService service = new DocLitWrapService();
            DocLitWrap proxy = service.getDocLitWrapPort();
            BindingProvider p = (BindingProvider) proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            return proxy;
        }


, Instance #
frags: 
(startLine=399 endLine=411 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01001/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
        if (action != null) {
            FaultAction[] faultActions = action.fault();
            
            if (faultActions != null) {
                for (FaultAction faultAction : faultActions) {
                    String className = faultAction.className().getName();
                    FaultDescription faultDesc = resolveFaultByExceptionName(className);
                    if (faultDesc != null)  {
                        newAxisOperation.addFaultAction(faultDesc.getName(), faultAction.value());
                    }
                }
            }
        }

(startLine=532 endLine=544 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01001/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
        if (action != null) {
            FaultAction[] faultActions = action.fault();
            
            if (faultActions != null) {
                for (FaultAction faultAction : faultActions) {
                    String className = faultAction.className().getName();
                    FaultDescription faultDesc = resolveFaultByExceptionName(className);
                    if (faultDesc != null)  {
                        newAxisOperation.addFaultAction(faultDesc.getName(), faultAction.value());
                    }
                }
            }
        }

commonMethod: 
(startLine=1530 endLine=1539 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01002/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
    private String getInputAction() {
        String inputAction = null;
        Action action = getAnnoAction();
        
        if (action != null) {
            inputAction = action.input();
        }
        
        return inputAction;
    }


, Instance #
frags: 
(startLine=399 endLine=411 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01001/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
        if (action != null) {
            FaultAction[] faultActions = action.fault();
            
            if (faultActions != null) {
                for (FaultAction faultAction : faultActions) {
                    String className = faultAction.className().getName();
                    FaultDescription faultDesc = resolveFaultByExceptionName(className);
                    if (faultDesc != null)  {
                        newAxisOperation.addFaultAction(faultDesc.getName(), faultAction.value());
                    }
                }
            }
        }

(startLine=532 endLine=544 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01001/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
        if (action != null) {
            FaultAction[] faultActions = action.fault();
            
            if (faultActions != null) {
                for (FaultAction faultAction : faultActions) {
                    String className = faultAction.className().getName();
                    FaultDescription faultDesc = resolveFaultByExceptionName(className);
                    if (faultDesc != null)  {
                        newAxisOperation.addFaultAction(faultDesc.getName(), faultAction.value());
                    }
                }
            }
        }

commonMethod: 
(startLine=1541 endLine=1550 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01002/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
    private String getOutputAction() {
        String outputAction = null;
        Action action = getAnnoAction();
        
        if (action != null) {
            outputAction = action.output();
        }
        
        return outputAction;
    }


, Instance #
frags: 
(startLine=399 endLine=411 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01001/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
        if (action != null) {
            FaultAction[] faultActions = action.fault();
            
            if (faultActions != null) {
                for (FaultAction faultAction : faultActions) {
                    String className = faultAction.className().getName();
                    FaultDescription faultDesc = resolveFaultByExceptionName(className);
                    if (faultDesc != null)  {
                        newAxisOperation.addFaultAction(faultDesc.getName(), faultAction.value());
                    }
                }
            }
        }

(startLine=532 endLine=544 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01001/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
        if (action != null) {
            FaultAction[] faultActions = action.fault();
            
            if (faultActions != null) {
                for (FaultAction faultAction : faultActions) {
                    String className = faultAction.className().getName();
                    FaultDescription faultDesc = resolveFaultByExceptionName(className);
                    if (faultDesc != null)  {
                        newAxisOperation.addFaultAction(faultDesc.getName(), faultAction.value());
                    }
                }
            }
        }

commonMethod: 
(startLine=1552 endLine=1561 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01002/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
    private FaultAction[] getFaultActions() {
        FaultAction[] faultActions = null;
        Action action = getAnnoAction();
        
        if (action !=  null) {
            faultActions = action.fault();
        }
        
        return faultActions;
    }


, Instance #
frags: 
(startLine=274 endLine=283 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01014/modules/kernel/src/org/apache/axis2/deployment/util/Utils.java)
            if (libfiles.exists()) {
                urls.add(libfiles.toURL());
                File jarfiles[] = libfiles.listFiles();
                for (int i = 0; i < jarfiles.length; i++) {
                    File jarfile = jarfiles[i];
                    if (jarfile.getName().endsWith(".jar")) {
                        urls.add(jarfile.toURL());
                    }
                }
            } else {

(startLine=286 endLine=295 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01014/modules/kernel/src/org/apache/axis2/deployment/util/Utils.java)
                if (libfiles.exists()) {
                    urls.add(libfiles.toURL());
                    File jarfiles[] = libfiles.listFiles();
                    for (int i = 0; i < jarfiles.length; i++) {
                        File jarfile = jarfiles[i];
                        if (jarfile.getName().endsWith(".jar")) {
                            urls.add(jarfile.toURL());
                        }
                    }
                }

commonMethod: 
(startLine=379 endLine=404 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01015/modules/kernel/src/org/apache/axis2/deployment/util/Utils.java)
    private static boolean addFiles(ArrayList urls, final File libfiles) throws MalformedURLException {
        Boolean exists = (Boolean) org.apache.axis2.java.security.AccessController.doPrivileged(
                new PrivilegedAction() {
                    public Object run() {
                        return new Boolean(libfiles.exists());
                    }
                }
        );
        if (exists.booleanValue()) {
            urls.add(libfiles.toURL());
            File jarfiles[] = (File[]) org.apache.axis2.java.security.AccessController.doPrivileged(
                    new PrivilegedAction() {
                        public Object run() {
                            return libfiles.listFiles();
                        }
                    }
            );
            for (int i = 0; i < jarfiles.length; i++) {
                File jarfile = jarfiles[i];
                if (jarfile.getName().endsWith(".jar")) {
                    urls.add(jarfile.toURL());
                }
            }
        }
        return exists.booleanValue();
    }


, Instance #
frags: 
(startLine=1126 endLine=1167 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01022/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
			OMElement service) throws Exception {

		// /////////////////// FIXME //////////////////////////////////////////
		Iterator iterator = axisService.getEndpoints().values().iterator();
		AxisEndpoint axisEndpoint = null;
		AxisBinding axisBinding = null;
		boolean found = false;
		for (; iterator.hasNext();) {
			axisEndpoint = (AxisEndpoint) iterator.next();
			/*
			 * Some transports might not be active at runtime.
			 */
			if (axisEndpoint.getEndpointURL() == null) {
				continue;
			}
			axisBinding = axisEndpoint.getBinding();
			String type = axisBinding.getType();
			if (Java2WSDLConstants.TRANSPORT_URI.equals(type)) {
				String version = (String) axisBinding
						.getProperty(WSDL2Constants.ATTR_WSOAP_VERSION);
				if (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(version)) {
					found = true;
					break;
				}
			}
		}
		if (!found) {
			return;
		}
		// /////////////////////////////////////////////////////////////////////

		OMElement port = fac.createOMElement(PORT, wsdl);
		service.addChild(port);
		port.addAttribute(ATTRIBUTE_NAME, axisEndpoint.getName(), null);
		QName qname = axisBinding.getName();
		port.addAttribute(BINDING_LOCAL_NAME, tns.getPrefix() + ":"
				+ qname.getLocalPart(), null);
		WSDLSerializationUtil.addExtensionElement(fac, port, SOAP_ADDRESS,
				LOCATION, axisEndpoint.getEndpointURL(), soap);
		addPolicyAsExtElement(axisEndpoint, port);
		generateSoap11Binding(fac, definition, axisEndpoint.getBinding());
	}

(startLine=1170 endLine=1211 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01022/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
			OMElement service) throws Exception {

		// /////////////////// FIXME //////////////////////////////////////////
		Iterator iterator = axisService.getEndpoints().values().iterator();
		AxisEndpoint axisEndpoint = null;
		AxisBinding axisBinding = null;
		boolean found = false;
		for (; iterator.hasNext();) {
			axisEndpoint = (AxisEndpoint) iterator.next();
			/*
			 * 
			 */
			if (axisEndpoint.getEndpointURL() == null) {
				continue;
			}
			axisBinding = axisEndpoint.getBinding();
			String type = axisBinding.getType();
			if (Java2WSDLConstants.TRANSPORT_URI.equals(type)) {
				String version = (String) axisBinding
						.getProperty(WSDL2Constants.ATTR_WSOAP_VERSION);
				if (SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(version)) {
					found = true;
					break;
				}
			}
		}
		if (!found) {
			return;
		}
		// /////////////////////////////////////////////////////////////////////

		OMElement port = fac.createOMElement(PORT, wsdl);
		service.addChild(port);
		port.addAttribute(ATTRIBUTE_NAME, axisEndpoint.getName(), null);
		QName qname = axisBinding.getName();
		port.addAttribute(BINDING_LOCAL_NAME, tns.getPrefix() + ":"
				+ qname.getLocalPart(), null);
		WSDLSerializationUtil.addExtensionElement(fac, port, SOAP_ADDRESS,
				LOCATION, axisEndpoint.getEndpointURL(), soap12);
		addPolicyAsExtElement(axisEndpoint, port);
		generateSoap12Binding(fac, definition, axisEndpoint.getBinding());
	}

(startLine=1214 endLine=1254 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01022/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
			OMElement service) throws Exception {

		// /////////////////// FIXME //////////////////////////////////////////
		Iterator iterator = axisService.getEndpoints().values().iterator();
		AxisEndpoint axisEndpoint = null;
		AxisBinding axisBinding = null;
		boolean found = false;
		for (; iterator.hasNext();) {
			axisEndpoint = (AxisEndpoint) iterator.next();
			/*
			 * 
			 */
			if (axisEndpoint.getEndpointURL() == null) {
				continue;
			}
			axisBinding = axisEndpoint.getBinding();
			String type = axisBinding.getType();
			if (WSDL2Constants.URI_WSDL2_HTTP.equals(type)) {
				found = true;
				break;
			}
		}
		if (!found) {
			return;
		}
		// /////////////////////////////////////////////////////////////////////

		OMElement port = fac.createOMElement(PORT, wsdl);
		service.addChild(port);
		port.addAttribute(ATTRIBUTE_NAME, axisEndpoint.getName(), null);
		QName qname = axisBinding.getName();
		port.addAttribute(BINDING_LOCAL_NAME, tns.getPrefix() + ":"
				+ qname.getLocalPart(), null);
		OMElement extElement = fac.createOMElement("address", http);
		extElement
				.addAttribute("location", axisEndpoint.getEndpointURL(), null);
		port.addChild(extElement);

		addPolicyAsExtElement(axisEndpoint, port);
		generateHttpBinding(fac, definition, axisEndpoint.getBinding());
	}

commonMethod: 
(startLine=204 endLine=219 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01023/modules/kernel/src/org/apache/axis2/description/AxisEndpoint.java)
	public boolean isActive() {
		if (transportInDescName != null && parent != null) {
			AxisConfiguration axisConfiguration = getAxisConfiguration();
			if (axisConfiguration != null) {
				AxisService service = (AxisService) parent;
				if (service.isEnableAllTransports()) {
					return axisConfiguration.getTransportsIn().containsKey(
							transportInDescName);
				} else {
					return service.getExposedTransports().contains(
							transportInDescName);
				}
			}
		}
		return false;
	}


, Instance #
frags: 
(startLine=1133 endLine=1151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01022/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
		for (; iterator.hasNext();) {
			axisEndpoint = (AxisEndpoint) iterator.next();
			/*
			 * Some transports might not be active at runtime.
			 */
			if (axisEndpoint.getEndpointURL() == null) {
				continue;
			}
			axisBinding = axisEndpoint.getBinding();
			String type = axisBinding.getType();
			if (Java2WSDLConstants.TRANSPORT_URI.equals(type)) {
				String version = (String) axisBinding
						.getProperty(WSDL2Constants.ATTR_WSOAP_VERSION);
				if (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(version)) {
					found = true;
					break;
				}
			}
		}

(startLine=1177 endLine=1195 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01022/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
		for (; iterator.hasNext();) {
			axisEndpoint = (AxisEndpoint) iterator.next();
			/*
			 * 
			 */
			if (axisEndpoint.getEndpointURL() == null) {
				continue;
			}
			axisBinding = axisEndpoint.getBinding();
			String type = axisBinding.getType();
			if (Java2WSDLConstants.TRANSPORT_URI.equals(type)) {
				String version = (String) axisBinding
						.getProperty(WSDL2Constants.ATTR_WSOAP_VERSION);
				if (SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(version)) {
					found = true;
					break;
				}
			}
		}

commonMethod: 
(startLine=204 endLine=219 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01023/modules/kernel/src/org/apache/axis2/description/AxisEndpoint.java)
	public boolean isActive() {
		if (transportInDescName != null && parent != null) {
			AxisConfiguration axisConfiguration = getAxisConfiguration();
			if (axisConfiguration != null) {
				AxisService service = (AxisService) parent;
				if (service.isEnableAllTransports()) {
					return axisConfiguration.getTransportsIn().containsKey(
							transportInDescName);
				} else {
					return service.getExposedTransports().contains(
							transportInDescName);
				}
			}
		}
		return false;
	}


, Instance #
frags: 
(startLine=187 endLine=204 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01022/modules/samples/jaxws-samples/src/main/org/apache/axis2/jaxws/samples/client/SampleClient.java)
            if (soap12) {
                if (servtype.equalsIgnoreCase("echo")) {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = ECHO_CONTEXT12;
                    }
                    buildEcho12(uriString + urlSuffix, null, message);
                } else if (servtype.equalsIgnoreCase("async")) {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = ECHO_CONTEXT12;
                    }
                    buildAsync12(uriString + urlSuffix, null, message, timeout, wireasync);
                } else {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = PING_CONTEXT12;
                    }
                    buildPing12(uriString + urlSuffix, null, message);
                }
            } else {

(startLine=204 endLine=221 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01022/modules/samples/jaxws-samples/src/main/org/apache/axis2/jaxws/samples/client/SampleClient.java)
            } else {
                if (servtype.equalsIgnoreCase("echo")) {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = ECHO_CONTEXT;
                    }
                    buildEcho(uriString + urlSuffix, null, message);
                } else if (servtype.equalsIgnoreCase("async")) {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = ECHO_CONTEXT;
                    }
                    buildAsync(uriString + urlSuffix, null, message, timeout, wireasync);
                } else {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = PING_CONTEXT;
                    }
                    buildPing(uriString + urlSuffix, null, message);
                }
            }

commonMethod: 
(startLine=245 endLine=259 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01023/modules/samples/jaxws-samples/src/main/org/apache/axis2/jaxws/samples/client/SampleClient.java)
    private ClientConfigurationFactory initConfigurationFactory() {
        String axis2xml = System.getProperty("org.apache.axis2.jaxws.config.path");
        if (axis2xml == null) {
            throw new RuntimeException("Please set org.apache.axis2.jaxws.config.path system property to a valid axis2.xml file (with addressing module enabled)");
        }
        ClientConfigurationFactory factory = null;
        try {
            FileSystemConfigurator configurator = new FileSystemConfigurator(null, axis2xml);
            factory = new ClientConfigurationFactory(configurator);
            MetadataFactoryRegistry.setFactory(ClientConfigurationFactory.class, factory);
        } catch (AxisFault axisFault) {
            throw new RuntimeException(axisFault);
        }
        return factory;
    }


, Instance #
frags: 
(startLine=187 endLine=204 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01022/modules/samples/jaxws-samples/src/main/org/apache/axis2/jaxws/samples/client/SampleClient.java)
            if (soap12) {
                if (servtype.equalsIgnoreCase("echo")) {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = ECHO_CONTEXT12;
                    }
                    buildEcho12(uriString + urlSuffix, null, message);
                } else if (servtype.equalsIgnoreCase("async")) {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = ECHO_CONTEXT12;
                    }
                    buildAsync12(uriString + urlSuffix, null, message, timeout, wireasync);
                } else {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = PING_CONTEXT12;
                    }
                    buildPing12(uriString + urlSuffix, null, message);
                }
            } else {

(startLine=204 endLine=221 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01022/modules/samples/jaxws-samples/src/main/org/apache/axis2/jaxws/samples/client/SampleClient.java)
            } else {
                if (servtype.equalsIgnoreCase("echo")) {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = ECHO_CONTEXT;
                    }
                    buildEcho(uriString + urlSuffix, null, message);
                } else if (servtype.equalsIgnoreCase("async")) {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = ECHO_CONTEXT;
                    }
                    buildAsync(uriString + urlSuffix, null, message, timeout, wireasync);
                } else {
                    if (0 == urlSuffix.length()) {
                        urlSuffix = PING_CONTEXT;
                    }
                    buildPing(uriString + urlSuffix, null, message);
                }
            }

commonMethod: 
(startLine=261 endLine=267 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01023/modules/samples/jaxws-samples/src/main/org/apache/axis2/jaxws/samples/client/SampleClient.java)
    private void destroyConfigurationFactory(ClientConfigurationFactory factory) {
        try {
            factory.getClientConfigurationContext().terminate();
        } catch (AxisFault axisFault) {
            throw new RuntimeException(axisFault);
        }
    }


, Instance #
frags: 
(startLine=1126 endLine=1167 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01026/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
			OMElement service) throws Exception {

		// /////////////////// FIXME //////////////////////////////////////////
		Iterator iterator = axisService.getEndpoints().values().iterator();
		AxisEndpoint axisEndpoint = null;
		AxisBinding axisBinding = null;
		boolean found = false;
		for (; iterator.hasNext();) {
			axisEndpoint = (AxisEndpoint) iterator.next();
			/*
			 * Some transports might not be active at runtime.
			 */
			if (axisEndpoint.getEndpointURL() == null) {
				continue;
			}
			axisBinding = axisEndpoint.getBinding();
			String type = axisBinding.getType();
			if (Java2WSDLConstants.TRANSPORT_URI.equals(type)) {
				String version = (String) axisBinding
						.getProperty(WSDL2Constants.ATTR_WSOAP_VERSION);
				if (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(version)) {
					found = true;
					break;
				}
			}
		}
		if (!found) {
			return;
		}
		// /////////////////////////////////////////////////////////////////////

		OMElement port = fac.createOMElement(PORT, wsdl);
		service.addChild(port);
		port.addAttribute(ATTRIBUTE_NAME, axisEndpoint.getName(), null);
		QName qname = axisBinding.getName();
		port.addAttribute(BINDING_LOCAL_NAME, tns.getPrefix() + ":"
				+ qname.getLocalPart(), null);
		WSDLSerializationUtil.addExtensionElement(fac, port, SOAP_ADDRESS,
				LOCATION, axisEndpoint.getEndpointURL(), soap);
		addPolicyAsExtElement(axisEndpoint, port);
		generateSoap11Binding(fac, definition, axisEndpoint.getBinding());
	}

(startLine=1170 endLine=1211 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01026/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
			OMElement service) throws Exception {

		// /////////////////// FIXME //////////////////////////////////////////
		Iterator iterator = axisService.getEndpoints().values().iterator();
		AxisEndpoint axisEndpoint = null;
		AxisBinding axisBinding = null;
		boolean found = false;
		for (; iterator.hasNext();) {
			axisEndpoint = (AxisEndpoint) iterator.next();
			/*
			 * 
			 */
			if (axisEndpoint.getEndpointURL() == null) {
				continue;
			}
			axisBinding = axisEndpoint.getBinding();
			String type = axisBinding.getType();
			if (Java2WSDLConstants.TRANSPORT_URI.equals(type)) {
				String version = (String) axisBinding
						.getProperty(WSDL2Constants.ATTR_WSOAP_VERSION);
				if (SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(version)) {
					found = true;
					break;
				}
			}
		}
		if (!found) {
			return;
		}
		// /////////////////////////////////////////////////////////////////////

		OMElement port = fac.createOMElement(PORT, wsdl);
		service.addChild(port);
		port.addAttribute(ATTRIBUTE_NAME, axisEndpoint.getName(), null);
		QName qname = axisBinding.getName();
		port.addAttribute(BINDING_LOCAL_NAME, tns.getPrefix() + ":"
				+ qname.getLocalPart(), null);
		WSDLSerializationUtil.addExtensionElement(fac, port, SOAP_ADDRESS,
				LOCATION, axisEndpoint.getEndpointURL(), soap12);
		addPolicyAsExtElement(axisEndpoint, port);
		generateSoap12Binding(fac, definition, axisEndpoint.getBinding());
	}

(startLine=1214 endLine=1254 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01026/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
			OMElement service) throws Exception {

		// /////////////////// FIXME //////////////////////////////////////////
		Iterator iterator = axisService.getEndpoints().values().iterator();
		AxisEndpoint axisEndpoint = null;
		AxisBinding axisBinding = null;
		boolean found = false;
		for (; iterator.hasNext();) {
			axisEndpoint = (AxisEndpoint) iterator.next();
			/*
			 * 
			 */
			if (axisEndpoint.getEndpointURL() == null) {
				continue;
			}
			axisBinding = axisEndpoint.getBinding();
			String type = axisBinding.getType();
			if (WSDL2Constants.URI_WSDL2_HTTP.equals(type)) {
				found = true;
				break;
			}
		}
		if (!found) {
			return;
		}
		// /////////////////////////////////////////////////////////////////////

		OMElement port = fac.createOMElement(PORT, wsdl);
		service.addChild(port);
		port.addAttribute(ATTRIBUTE_NAME, axisEndpoint.getName(), null);
		QName qname = axisBinding.getName();
		port.addAttribute(BINDING_LOCAL_NAME, tns.getPrefix() + ":"
				+ qname.getLocalPart(), null);
		OMElement extElement = fac.createOMElement("address", http);
		extElement
				.addAttribute("location", axisEndpoint.getEndpointURL(), null);
		port.addChild(extElement);

		addPolicyAsExtElement(axisEndpoint, port);
		generateHttpBinding(fac, definition, axisEndpoint.getBinding());
	}

commonMethod: 
(startLine=204 endLine=219 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01027/modules/kernel/src/org/apache/axis2/description/AxisEndpoint.java)
	public boolean isActive() {
		if (transportInDescName != null && parent != null) {
			AxisConfiguration axisConfiguration = getAxisConfiguration();
			if (axisConfiguration != null) {
				AxisService service = (AxisService) parent;
				if (service.isEnableAllTransports()) {
					return axisConfiguration.getTransportsIn().containsKey(
							transportInDescName);
				} else {
					return service.getExposedTransports().contains(
							transportInDescName);
				}
			}
		}
		return false;
	}


, Instance #
frags: 
(startLine=1322 endLine=1342 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01026/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
					|| WSDL2Constants.MEP_URI_IN_OUT.equals(MEP)) {
                AxisBindingMessage axisBindingInMessage = (AxisBindingMessage) axisBindingOperation
                        .getChild(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                if (axisBindingInMessage != null) {
                    AxisMessage inaxisMessage = axisBindingInMessage
                            .getAxisMessage();

                    if (inaxisMessage != null) {
                        operation.addAttribute(ATTRIBUTE_NAME, opeartionName, null);
                        OMElement input = fac.createOMElement(IN_PUT_LOCAL_NAME,
                                wsdl);
                        addPolicyAsExtElement(axisBindingInMessage, input);
                        addExtensionElement(fac, input, SOAP_BODY, SOAP_USE, use,
                                null, targetNamespace, soap);
                        // addPolicyAsExtElement(PolicyInclude.BINDING_INPUT_POLICY,
                        // inaxisMessage.getPolicyInclude(), input);
                        operation.addChild(input);
                        writeSoapHeaders(inaxisMessage, fac, input, soap12);
                    }
                }
            }

(startLine=1463 endLine=1481 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01026/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
					|| WSDL2Constants.MEP_URI_IN_OUT.equals(MEP)) {
                AxisBindingMessage axisBindingInMessage = (AxisBindingMessage) axisBindingOperation
                        .getChild(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                if (axisBindingInMessage != null) {
                    AxisMessage inaxisMessage = axisBindingInMessage
                            .getAxisMessage();

                    if (inaxisMessage != null) {
                        operation.addAttribute(ATTRIBUTE_NAME, opeartionName, null);
                        OMElement input = fac.createOMElement(IN_PUT_LOCAL_NAME,
                                wsdl);
                        addPolicyAsExtElement(axisBindingInMessage, input);
                        addExtensionElement(fac, input, SOAP_BODY, SOAP_USE, use,
                                null, targetNamespace, soap12);
                        operation.addChild(input);
                        writeSoapHeaders(inaxisMessage, fac, input, soap12);
                    }
                }
            }

commonMethod: 
(startLine=1742 endLine=1756 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01027/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
	private boolean isAlreadyAdded(AxisBinding axisBinding,
			OMElement definitionElement) {
		QName bindingName = axisBinding.getName();
		QName name = new QName("name");
		for (Iterator iterator = definitionElement
				.getChildrenWithName(new QName(wsdl.getNamespaceURI(),
						BINDING_LOCAL_NAME)); iterator.hasNext();) {
			OMElement element = (OMElement) iterator.next();
			String value = element.getAttributeValue(name);
			if (bindingName.getLocalPart().equals(value)) {
				return true;
			}
		}
		return false;
	}


, Instance #
frags: 
(startLine=1353 endLine=1367 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01026/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
                if (axisBindingOutMessage != null) {
                    AxisMessage outAxisMessage = axisBindingOutMessage
                            .getAxisMessage();
                    if (outAxisMessage != null) {
                        OMElement output = fac.createOMElement(OUT_PUT_LOCAL_NAME,
                                wsdl);
                        addPolicyAsExtElement(axisBindingOutMessage, output);
                        addExtensionElement(fac, output, SOAP_BODY, SOAP_USE, use,
                                null, targetNamespace, soap);
                        // addPolicyAsExtElement(PolicyInclude.BINDING_OUTPUT_POLICY,
                        // outAxisMessage.getPolicyInclude(), output);
                        operation.addChild(output);
                        writeSoapHeaders(outAxisMessage, fac, output, soap12);
                    }
                }

(startLine=1492 endLine=1506 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01026/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
                if (axisBindingOutMessage != null) {
                    AxisMessage outAxisMessage = axisBindingOutMessage
                            .getAxisMessage();
                    if (outAxisMessage != null) {
                        OMElement output = fac.createOMElement(OUT_PUT_LOCAL_NAME,
                                wsdl);
                        addPolicyAsExtElement(axisBindingOutMessage, output);
                        addExtensionElement(fac, output, SOAP_BODY, SOAP_USE, use,
                                null, targetNamespace, soap12);
                        // addPolicyAsExtElement(PolicyInclude.BINDING_OUTPUT_POLICY,
                        // outAxisMessage.getPolicyInclude(), output);
                        operation.addChild(output);
                        writeSoapHeaders(outAxisMessage, fac, output, soap12);
                    }
                }

commonMethod: 
(startLine=1742 endLine=1756 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01027/modules/kernel/src/org/apache/axis2/description/AxisService2WSDL11.java)
	private boolean isAlreadyAdded(AxisBinding axisBinding,
			OMElement definitionElement) {
		QName bindingName = axisBinding.getName();
		QName name = new QName("name");
		for (Iterator iterator = definitionElement
				.getChildrenWithName(new QName(wsdl.getNamespaceURI(),
						BINDING_LOCAL_NAME)); iterator.hasNext();) {
			OMElement element = (OMElement) iterator.next();
			String value = element.getAttributeValue(name);
			if (bindingName.getLocalPart().equals(value)) {
				return true;
			}
		}
		return false;
	}


, Instance #
frags: 
(startLine=370 endLine=386 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01034/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
        if (faultDescs != null) {
            for (FaultDescription faultDesc : faultDescs) {
        
                AxisMessage faultMessage = new AxisMessage();
                String faultName = faultDesc.getName();
                faultMessage.setName(faultName);
                
                String faultAction = 
                        WSDL11ActionHelper.getFaultActionFromStringInformation( targetNS, 
                                        portTypeName, 
                                        operationName, 
                                        faultMessage.getName());
                
                newAxisOperation.addFaultAction(faultMessage.getName(), faultAction);
                newAxisOperation.setFaultMessages(faultMessage);
            }
        }

(startLine=490 endLine=506 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01034/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
        if (faultDescs != null) {
            for (FaultDescription faultDesc : faultDescs) {
        
                AxisMessage faultMessage = new AxisMessage();
                String faultName = faultDesc.getName();
                faultMessage.setName(faultName);
                
                String faultAction = 
                        WSDL11ActionHelper.getFaultActionFromStringInformation( targetNS, 
                                        portTypeName, 
                                        operationName, 
                                        faultMessage.getName());
                
                newAxisOperation.addFaultAction(faultMessage.getName(), faultAction);
                newAxisOperation.setFaultMessages(faultMessage);
            }
        }

commonMethod: 
(startLine=504 endLine=542 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01035/modules/metadata/src/org/apache/axis2/jaxws/description/impl/OperationDescriptionImpl.java)
    private void setFaultActions(AxisOperation newAxisOperation,
                                 String operationName,
                                 String targetNS,
                                 String portTypeName) {
        // Walk the fault information
        FaultDescription[] faultDescs = getFaultDescriptions();
        
        //Generate fault actions according to the Default Action Pattern.
        if (faultDescs != null) {
            for (FaultDescription faultDesc : faultDescs) {
        
                AxisMessage faultMessage = new AxisMessage();
                String faultName = faultDesc.getName();
                faultMessage.setName(faultName);
                
                String faultAction = 
                        WSDL11ActionHelper.getFaultActionFromStringInformation( targetNS, 
                                        portTypeName, 
                                        operationName, 
                                        faultMessage.getName());
                
                newAxisOperation.addFaultAction(faultDesc.getExceptionClassName(),  faultAction);
                newAxisOperation.setFaultMessages(faultMessage);
            }
        }
        
        //Override the fault actions based on any FaultAction annotations that are defined.
        FaultAction[] faultActions = getFaultActions();
        
        if (faultActions != null) {
            for (FaultAction faultAction : faultActions) {
                String className = faultAction.className().getName();
                FaultDescription faultDesc = resolveFaultByExceptionName(className);
                if (faultDesc != null)  {
                    newAxisOperation.addFaultAction(className, faultAction.value());
                }
            }
        }
    }


, Instance #
frags: 
(startLine=123 endLine=142 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01059/modules/clustering/src/org/apache/axis2/clustering/tribes/TribesClusterManager.java)
        for (Object o : axisConfig.getInFlowPhases()) {
            Phase phase = (Phase) o;
            if (phase instanceof DispatchPhase) {
                RequestBlockingHandler requestBlockingHandler = new RequestBlockingHandler();
                if (!phase.getHandlers().contains(requestBlockingHandler)) {
                    PhaseRule rule = new PhaseRule("Dispatch");
                    rule.setAfter("SOAPMessageBodyBasedDispatcher");
                    rule.setBefore("InstanceDispatcher");
                    HandlerDescription handlerDesc = requestBlockingHandler.getHandlerDesc();
                    handlerDesc.setHandler(requestBlockingHandler);
                    handlerDesc.setName(ClusteringConstants.REQUEST_BLOCKING_HANDLER);
                    handlerDesc.setRules(rule);
                    phase.addHandler(requestBlockingHandler);

                    log.info("Added " + ClusteringConstants.REQUEST_BLOCKING_HANDLER +
                             " between SOAPMessageBodyBasedDispatcher & InstanceDispatcher to InFlow");
                    break;
                }
            }
        }

(startLine=143 endLine=162 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01059/modules/clustering/src/org/apache/axis2/clustering/tribes/TribesClusterManager.java)
        for (Object o : axisConfig.getInFaultFlowPhases()) {
            Phase phase = (Phase) o;
            if (phase instanceof DispatchPhase) {
                RequestBlockingHandler requestBlockingHandler = new RequestBlockingHandler();
                if (!phase.getHandlers().contains(requestBlockingHandler)) {
                    PhaseRule rule = new PhaseRule("Dispatch");
                    rule.setAfter("SOAPMessageBodyBasedDispatcher");
                    rule.setBefore("InstanceDispatcher");
                    HandlerDescription handlerDesc = requestBlockingHandler.getHandlerDesc();
                    handlerDesc.setHandler(requestBlockingHandler);
                    handlerDesc.setName(ClusteringConstants.REQUEST_BLOCKING_HANDLER);
                    handlerDesc.setRules(rule);
                    phase.addHandler(requestBlockingHandler);

                    log.info("Added " + ClusteringConstants.REQUEST_BLOCKING_HANDLER +
                             " between SOAPMessageBodyBasedDispatcher & InstanceDispatcher to InFaultFlow");
                    break;
                }
            }
        }

commonMethod: 
(startLine=238 endLine=287 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01060/modules/clustering/src/org/apache/axis2/clustering/tribes/TribesClusterManager.java)
    /**
     * A RequestBlockingHandler, which is an implementation of
     * {@link org.apache.axis2.engine.Handler} is added to the InFlow & InFaultFlow. This handler
     * is used for rejecting Web service requests until this node has been initialized. This handler
     * can also be used for rejecting requests when this node is reinitializing or is in an
     * inconsistent state (which can happen when a configuration change is taking place).
     */
    private void addRequestBlockingHandlerToInFlows() {
        AxisConfiguration axisConfig = configurationContext.getAxisConfiguration();
        for (Object o : axisConfig.getInFlowPhases()) {
            Phase phase = (Phase) o;
            if (phase instanceof DispatchPhase) {
                RequestBlockingHandler requestBlockingHandler = new RequestBlockingHandler();
                if (!phase.getHandlers().contains(requestBlockingHandler)) {
                    PhaseRule rule = new PhaseRule("Dispatch");
                    rule.setAfter("SOAPMessageBodyBasedDispatcher");
                    rule.setBefore("InstanceDispatcher");
                    HandlerDescription handlerDesc = requestBlockingHandler.getHandlerDesc();
                    handlerDesc.setHandler(requestBlockingHandler);
                    handlerDesc.setName(ClusteringConstants.REQUEST_BLOCKING_HANDLER);
                    handlerDesc.setRules(rule);
                    phase.addHandler(requestBlockingHandler);

                    log.debug("Added " + ClusteringConstants.REQUEST_BLOCKING_HANDLER +
                              " between SOAPMessageBodyBasedDispatcher & InstanceDispatcher to InFlow");
                    break;
                }
            }
        }
        for (Object o : axisConfig.getInFaultFlowPhases()) {
            Phase phase = (Phase) o;
            if (phase instanceof DispatchPhase) {
                RequestBlockingHandler requestBlockingHandler = new RequestBlockingHandler();
                if (!phase.getHandlers().contains(requestBlockingHandler)) {
                    PhaseRule rule = new PhaseRule("Dispatch");
                    rule.setAfter("SOAPMessageBodyBasedDispatcher");
                    rule.setBefore("InstanceDispatcher");
                    HandlerDescription handlerDesc = requestBlockingHandler.getHandlerDesc();
                    handlerDesc.setHandler(requestBlockingHandler);
                    handlerDesc.setName(ClusteringConstants.REQUEST_BLOCKING_HANDLER);
                    handlerDesc.setRules(rule);
                    phase.addHandler(requestBlockingHandler);

                    log.debug("Added " + ClusteringConstants.REQUEST_BLOCKING_HANDLER +
                              " between SOAPMessageBodyBasedDispatcher & InstanceDispatcher to InFaultFlow");
                    break;
                }
            }
        }
    }


, Instance #
frags: 
(startLine=72 endLine=93 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01068/modules/clustering/src/org/apache/axis2/clustering/tribes/LoadBalancerInterceptor.java)
    public void memberAdded(Member member) {
        if (loadBalancerMembership == null) {
            setupMembership();
        }
        boolean notify;
        synchronized (loadBalancerMembership) {
            notify = Arrays.equals(loadBalancerDomain, member.getDomain());
            if (notify) {
                notify = loadBalancerMembership.memberAlive((MemberImpl) member);
            }
        }
        if (notify) {
            super.memberAdded(member);
        }

        // Is this an application domain member?
        if (Arrays.equals(applicationDomain, member.getDomain())) {
            log.info("Application member " + TribesUtil.getHost(member) + " joined cluster");
            applicationMembers.add(member);
        }

    }

(startLine=95 endLine=113 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01068/modules/clustering/src/org/apache/axis2/clustering/tribes/LoadBalancerInterceptor.java)
    public void memberDisappeared(Member member) {
        if (loadBalancerMembership == null) {
            setupMembership();
        }
        boolean notify;
        synchronized (loadBalancerMembership) {
            notify = Arrays.equals(loadBalancerDomain, member.getDomain());
            loadBalancerMembership.removeMember((MemberImpl) member);
        }
        if (notify) {
            super.memberDisappeared(member);
        }

        // Is this an application domain member?
        if (Arrays.equals(applicationDomain, member.getDomain())) {
            log.info("Application member " + TribesUtil.getHost(member) + " left cluster");
            applicationMembers.remove(member);
        }
    }

commonMethod: 
(startLine=46 endLine=48 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01069/modules/clustering/src/org/apache/axis2/clustering/tribes/TribesUtil.java)
    public static String getName(Member member) {
        return getHost(member) + ":" + member.getPort();
    }


, Instance #
frags: 
(startLine=235 endLine=243 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01105/modules/jaxws/src/org/apache/axis2/jaxws/context/utils/ContextUtils.java)
                if (ed != null) {
                    soapMessageContext
                            .put(javax.xml.ws.handler.MessageContext.WSDL_PORT, ed.getPortQName());
                    soapMessageContext.setScope(javax.xml.ws.handler.MessageContext.WSDL_PORT,
                                                Scope.APPLICATION);
                    if (log.isDebugEnabled()) {
                        log.debug("WSDL_PORT :" + ed.getPortQName());
                    }
                }

(startLine=286 endLine=294 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01105/modules/jaxws/src/org/apache/axis2/jaxws/context/utils/ContextUtils.java)
            if (ed != null) {
                    soapMessageContext
                            .put(javax.xml.ws.handler.MessageContext.WSDL_PORT, ed.getPortQName());
                    soapMessageContext.setScope(javax.xml.ws.handler.MessageContext.WSDL_PORT,
                                                Scope.APPLICATION);
                    if (log.isDebugEnabled()) {
                        log.debug("WSDL_PORT :" + ed.getPortQName());
                    }
            }

commonMethod: 
(startLine=249 endLine=255 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01106/modules/jaxws/src/org/apache/axis2/jaxws/context/utils/ContextUtils.java)
    private static void setProperty(SOAPMessageContext context, String name, Object value, boolean logMessage) {
        context.put(name, value);
        context.setScope(name, Scope.APPLICATION);
        if (logMessage && log.isDebugEnabled()) {
            log.debug(name + " :" + value);
        }
    }


, Instance #
frags: 
(startLine=235 endLine=243 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01105/modules/jaxws/src/org/apache/axis2/jaxws/context/utils/ContextUtils.java)
                if (ed != null) {
                    soapMessageContext
                            .put(javax.xml.ws.handler.MessageContext.WSDL_PORT, ed.getPortQName());
                    soapMessageContext.setScope(javax.xml.ws.handler.MessageContext.WSDL_PORT,
                                                Scope.APPLICATION);
                    if (log.isDebugEnabled()) {
                        log.debug("WSDL_PORT :" + ed.getPortQName());
                    }
                }

(startLine=286 endLine=294 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01105/modules/jaxws/src/org/apache/axis2/jaxws/context/utils/ContextUtils.java)
            if (ed != null) {
                    soapMessageContext
                            .put(javax.xml.ws.handler.MessageContext.WSDL_PORT, ed.getPortQName());
                    soapMessageContext.setScope(javax.xml.ws.handler.MessageContext.WSDL_PORT,
                                                Scope.APPLICATION);
                    if (log.isDebugEnabled()) {
                        log.debug("WSDL_PORT :" + ed.getPortQName());
                    }
            }

commonMethod: 
(startLine=230 endLine=243 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01106/modules/jaxws/src/org/apache/axis2/jaxws/context/utils/ContextUtils.java)
    private static SOAPMessageContext getSOAPMessageContext(MessageContext jaxwsMessageContext) {
        org.apache.axis2.context.MessageContext msgContext =
            jaxwsMessageContext.getAxisMessageContext();
        ServiceContext serviceContext = msgContext.getServiceContext();
        SOAPMessageContext soapMessageContext = null;
        if (serviceContext != null) {
            WebServiceContext wsc =
                (WebServiceContext)serviceContext.getProperty(EndpointLifecycleManagerImpl.WEBSERVICE_MESSAGE_CONTEXT);
            if (wsc != null) {
                soapMessageContext = (SOAPMessageContext)wsc.getMessageContext();
            }
        }
        return soapMessageContext;
    }


, Instance #
frags: 
(startLine=707 endLine=742 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName(name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                            typeTable.getSimpleSchemaTypeName(propertyName),
                            xmlSchemaSequence,
                            propertyName.equals("base64Binary"),
                            isArrayType,
                            type.isPrimitive());
                } else {
                    xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {

(startLine=654 endLine=700 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
        if (typeTable.isSimpleType(propertyName)) {

            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName( name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        xmlSchemaSequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
                } else {
                   xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {
                addElementToSequence(name,
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        sequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
            }

        } else {

commonMethod: 
(startLine=749 endLine=876 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01139/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    protected void generateSchemaforGenericFields(XmlSchema xmlSchema,
                                                  XmlSchemaSequence sequence, Type genericType,
                                                  String name)
            throws Exception {
        String propertyName;
        Class type;
        boolean isArrayType = true;
        if (genericType instanceof GenericArrayType) {
            Class simpleType = (Class) ((GenericArrayType) genericType).getGenericComponentType();
            propertyName = simpleType.getName();
            // this is a doble array element
            String simpleTypeName = "";
            while (simpleType.isArray()) {
                simpleTypeName += "ArrayOf";
                simpleType = simpleType.getComponentType();
            }
            simpleTypeName += simpleType.getSimpleName();

            if (xmlSchema.getTypeByName(simpleTypeName) == null) {
                XmlSchemaComplexType xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                generateSchemaforGenericFields(xmlSchema,
                        xmlSchemaSequence, simpleType, "array");

                xmlSchemaComplexType.setName(simpleTypeName);
                xmlSchema.getItems().add(xmlSchemaComplexType);
                xmlSchema.getSchemaTypes().add(
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName), xmlSchemaComplexType);
            }

            if (isGenerateWrappedArrayTypes) {
                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName( name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName = simpleTypeName + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                xmlSchemaComplexType.setName(complexTypeName);

                xmlSchema.getItems().add(xmlSchemaComplexType);
                xmlSchema.getSchemaTypes().add(
                        new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                        xmlSchemaComplexType);
                addContentToMethodSchemaType(xmlSchemaSequence,
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName),
                        "array",
                        true);

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace,
                        xmlSchemaComplexType.getName()));

            } else {
                addContentToMethodSchemaType(sequence,
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName),
                        name,
                        true);

            }
            return;
        } else {
//            isArrayType = false;
            type = (Class) genericType;
            propertyName = type.getName();
        }

        if (isArrayType && "byte".equals(propertyName)) {
            propertyName = "base64Binary";
        }
        if (isDataHandler(type)) {
            propertyName = "base64Binary";
        }
        if (typeTable.isSimpleType(propertyName)) {

            if (isGenerateWrappedArrayTypes && isArrayType) {

                processGenerateWrappedArrayTypes(xmlSchema, sequence, type, name, isArrayType, propertyName);


            } else {
                addElementToSequence(name,
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        sequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
            }

        } else {
            if (isArrayType) {
                generateSchema(type.getComponentType());
            } else {
                generateSchema(type);
            }

            if (isGenerateWrappedArrayTypes && isArrayType) {

                processGenerateWrappedArrayTypes(xmlSchema, sequence, type, name, isArrayType, propertyName);


            } else {
                addElementToSequence(name,
                        typeTable.getComplexSchemaType(propertyName),
                        sequence,
                        false,
                        isArrayType,
                        type.isPrimitive());
            }

            if (typeTable.getComplexSchemaType(propertyName) != null && !((NamespaceMap) xmlSchema.getNamespaceContext()).values().
                    contains(typeTable.getComplexSchemaType(propertyName).getNamespaceURI())) {
                XmlSchemaImport importElement = new XmlSchemaImport();
                importElement.setNamespace(
                        typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
                xmlSchema.getItems().add(importElement);
                ((NamespaceMap) xmlSchema.getNamespaceContext()).
                        put(generatePrefix(),
                                typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
            }
        }


    }


, Instance #
frags: 
(startLine=707 endLine=742 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName(name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                            typeTable.getSimpleSchemaTypeName(propertyName),
                            xmlSchemaSequence,
                            propertyName.equals("base64Binary"),
                            isArrayType,
                            type.isPrimitive());
                } else {
                    xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {

(startLine=654 endLine=700 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
        if (typeTable.isSimpleType(propertyName)) {

            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName( name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        xmlSchemaSequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
                } else {
                   xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {
                addElementToSequence(name,
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        sequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
            }

        } else {

commonMethod: 
(startLine=879 endLine=916 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01139/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    private void processGenerateWrappedArrayTypes(XmlSchema xmlSchema,
                                                  XmlSchemaSequence sequence,
                                                  Class type,
                                                  String name,
                                                  boolean isArrayType,
                                                  String propertyName) {
        XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
        xmlSchemaElement.setName( name + "Wrapper");
        xmlSchemaElement.setNillable(true);
        sequence.getItems().add(xmlSchemaElement);

        String complexTypeName =
                typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

        XmlSchemaComplexType xmlSchemaComplexType ;
        if (xmlSchema.getTypeByName(complexTypeName) == null) {
            xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
            XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
            xmlSchemaComplexType.setParticle(xmlSchemaSequence);
            xmlSchemaComplexType.setName(complexTypeName);

            xmlSchema.getItems().add(xmlSchemaComplexType);
            xmlSchema.getSchemaTypes().add(
                    new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                    xmlSchemaComplexType);
            addElementToSequence("array",
                typeTable.getSimpleSchemaTypeName(propertyName),
                xmlSchemaSequence,
                propertyName.equals("base64Binary"),
                isArrayType,
                type.isPrimitive());
        } else {
           xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
        }

        xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
        xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));
    }


, Instance #
frags: 
(startLine=654 endLine=700 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
        if (typeTable.isSimpleType(propertyName)) {

            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName( name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        xmlSchemaSequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
                } else {
                   xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {
                addElementToSequence(name,
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        sequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
            }

        } else {

(startLine=707 endLine=742 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName(name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                            typeTable.getSimpleSchemaTypeName(propertyName),
                            xmlSchemaSequence,
                            propertyName.equals("base64Binary"),
                            isArrayType,
                            type.isPrimitive());
                } else {
                    xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {

commonMethod: 
(startLine=749 endLine=876 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01139/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    protected void generateSchemaforGenericFields(XmlSchema xmlSchema,
                                                  XmlSchemaSequence sequence, Type genericType,
                                                  String name)
            throws Exception {
        String propertyName;
        Class type;
        boolean isArrayType = true;
        if (genericType instanceof GenericArrayType) {
            Class simpleType = (Class) ((GenericArrayType) genericType).getGenericComponentType();
            propertyName = simpleType.getName();
            // this is a doble array element
            String simpleTypeName = "";
            while (simpleType.isArray()) {
                simpleTypeName += "ArrayOf";
                simpleType = simpleType.getComponentType();
            }
            simpleTypeName += simpleType.getSimpleName();

            if (xmlSchema.getTypeByName(simpleTypeName) == null) {
                XmlSchemaComplexType xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                generateSchemaforGenericFields(xmlSchema,
                        xmlSchemaSequence, simpleType, "array");

                xmlSchemaComplexType.setName(simpleTypeName);
                xmlSchema.getItems().add(xmlSchemaComplexType);
                xmlSchema.getSchemaTypes().add(
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName), xmlSchemaComplexType);
            }

            if (isGenerateWrappedArrayTypes) {
                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName( name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName = simpleTypeName + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                xmlSchemaComplexType.setName(complexTypeName);

                xmlSchema.getItems().add(xmlSchemaComplexType);
                xmlSchema.getSchemaTypes().add(
                        new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                        xmlSchemaComplexType);
                addContentToMethodSchemaType(xmlSchemaSequence,
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName),
                        "array",
                        true);

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace,
                        xmlSchemaComplexType.getName()));

            } else {
                addContentToMethodSchemaType(sequence,
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName),
                        name,
                        true);

            }
            return;
        } else {
//            isArrayType = false;
            type = (Class) genericType;
            propertyName = type.getName();
        }

        if (isArrayType && "byte".equals(propertyName)) {
            propertyName = "base64Binary";
        }
        if (isDataHandler(type)) {
            propertyName = "base64Binary";
        }
        if (typeTable.isSimpleType(propertyName)) {

            if (isGenerateWrappedArrayTypes && isArrayType) {

                processGenerateWrappedArrayTypes(xmlSchema, sequence, type, name, isArrayType, propertyName);


            } else {
                addElementToSequence(name,
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        sequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
            }

        } else {
            if (isArrayType) {
                generateSchema(type.getComponentType());
            } else {
                generateSchema(type);
            }

            if (isGenerateWrappedArrayTypes && isArrayType) {

                processGenerateWrappedArrayTypes(xmlSchema, sequence, type, name, isArrayType, propertyName);


            } else {
                addElementToSequence(name,
                        typeTable.getComplexSchemaType(propertyName),
                        sequence,
                        false,
                        isArrayType,
                        type.isPrimitive());
            }

            if (typeTable.getComplexSchemaType(propertyName) != null && !((NamespaceMap) xmlSchema.getNamespaceContext()).values().
                    contains(typeTable.getComplexSchemaType(propertyName).getNamespaceURI())) {
                XmlSchemaImport importElement = new XmlSchemaImport();
                importElement.setNamespace(
                        typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
                xmlSchema.getItems().add(importElement);
                ((NamespaceMap) xmlSchema.getNamespaceContext()).
                        put(generatePrefix(),
                                typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
            }
        }


    }


, Instance #
frags: 
(startLine=654 endLine=700 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
        if (typeTable.isSimpleType(propertyName)) {

            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName( name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        xmlSchemaSequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
                } else {
                   xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {
                addElementToSequence(name,
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        sequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
            }

        } else {

(startLine=707 endLine=742 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName(name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                            typeTable.getSimpleSchemaTypeName(propertyName),
                            xmlSchemaSequence,
                            propertyName.equals("base64Binary"),
                            isArrayType,
                            type.isPrimitive());
                } else {
                    xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {

commonMethod: 
(startLine=879 endLine=916 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01139/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    private void processGenerateWrappedArrayTypes(XmlSchema xmlSchema,
                                                  XmlSchemaSequence sequence,
                                                  Class type,
                                                  String name,
                                                  boolean isArrayType,
                                                  String propertyName) {
        XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
        xmlSchemaElement.setName( name + "Wrapper");
        xmlSchemaElement.setNillable(true);
        sequence.getItems().add(xmlSchemaElement);

        String complexTypeName =
                typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

        XmlSchemaComplexType xmlSchemaComplexType ;
        if (xmlSchema.getTypeByName(complexTypeName) == null) {
            xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
            XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
            xmlSchemaComplexType.setParticle(xmlSchemaSequence);
            xmlSchemaComplexType.setName(complexTypeName);

            xmlSchema.getItems().add(xmlSchemaComplexType);
            xmlSchema.getSchemaTypes().add(
                    new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                    xmlSchemaComplexType);
            addElementToSequence("array",
                typeTable.getSimpleSchemaTypeName(propertyName),
                xmlSchemaSequence,
                propertyName.equals("base64Binary"),
                isArrayType,
                type.isPrimitive());
        } else {
           xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
        }

        xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
        xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));
    }


, Instance #
frags: 
(startLine=654 endLine=700 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
        if (typeTable.isSimpleType(propertyName)) {

            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName( name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        xmlSchemaSequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
                } else {
                   xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {
                addElementToSequence(name,
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        sequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
            }

        } else {

(startLine=707 endLine=742 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName(name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                            typeTable.getSimpleSchemaTypeName(propertyName),
                            xmlSchemaSequence,
                            propertyName.equals("base64Binary"),
                            isArrayType,
                            type.isPrimitive());
                } else {
                    xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {

commonMethod: 
(startLine=749 endLine=876 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01139/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    protected void generateSchemaforGenericFields(XmlSchema xmlSchema,
                                                  XmlSchemaSequence sequence, Type genericType,
                                                  String name)
            throws Exception {
        String propertyName;
        Class type;
        boolean isArrayType = true;
        if (genericType instanceof GenericArrayType) {
            Class simpleType = (Class) ((GenericArrayType) genericType).getGenericComponentType();
            propertyName = simpleType.getName();
            // this is a doble array element
            String simpleTypeName = "";
            while (simpleType.isArray()) {
                simpleTypeName += "ArrayOf";
                simpleType = simpleType.getComponentType();
            }
            simpleTypeName += simpleType.getSimpleName();

            if (xmlSchema.getTypeByName(simpleTypeName) == null) {
                XmlSchemaComplexType xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                generateSchemaforGenericFields(xmlSchema,
                        xmlSchemaSequence, simpleType, "array");

                xmlSchemaComplexType.setName(simpleTypeName);
                xmlSchema.getItems().add(xmlSchemaComplexType);
                xmlSchema.getSchemaTypes().add(
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName), xmlSchemaComplexType);
            }

            if (isGenerateWrappedArrayTypes) {
                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName( name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName = simpleTypeName + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                xmlSchemaComplexType.setName(complexTypeName);

                xmlSchema.getItems().add(xmlSchemaComplexType);
                xmlSchema.getSchemaTypes().add(
                        new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                        xmlSchemaComplexType);
                addContentToMethodSchemaType(xmlSchemaSequence,
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName),
                        "array",
                        true);

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace,
                        xmlSchemaComplexType.getName()));

            } else {
                addContentToMethodSchemaType(sequence,
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName),
                        name,
                        true);

            }
            return;
        } else {
//            isArrayType = false;
            type = (Class) genericType;
            propertyName = type.getName();
        }

        if (isArrayType && "byte".equals(propertyName)) {
            propertyName = "base64Binary";
        }
        if (isDataHandler(type)) {
            propertyName = "base64Binary";
        }
        if (typeTable.isSimpleType(propertyName)) {

            if (isGenerateWrappedArrayTypes && isArrayType) {

                processGenerateWrappedArrayTypes(xmlSchema, sequence, type, name, isArrayType, propertyName);


            } else {
                addElementToSequence(name,
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        sequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
            }

        } else {
            if (isArrayType) {
                generateSchema(type.getComponentType());
            } else {
                generateSchema(type);
            }

            if (isGenerateWrappedArrayTypes && isArrayType) {

                processGenerateWrappedArrayTypes(xmlSchema, sequence, type, name, isArrayType, propertyName);


            } else {
                addElementToSequence(name,
                        typeTable.getComplexSchemaType(propertyName),
                        sequence,
                        false,
                        isArrayType,
                        type.isPrimitive());
            }

            if (typeTable.getComplexSchemaType(propertyName) != null && !((NamespaceMap) xmlSchema.getNamespaceContext()).values().
                    contains(typeTable.getComplexSchemaType(propertyName).getNamespaceURI())) {
                XmlSchemaImport importElement = new XmlSchemaImport();
                importElement.setNamespace(
                        typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
                xmlSchema.getItems().add(importElement);
                ((NamespaceMap) xmlSchema.getNamespaceContext()).
                        put(generatePrefix(),
                                typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
            }
        }


    }


, Instance #
frags: 
(startLine=654 endLine=700 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
        if (typeTable.isSimpleType(propertyName)) {

            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName( name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        xmlSchemaSequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
                } else {
                   xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {
                addElementToSequence(name,
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        sequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
            }

        } else {

(startLine=707 endLine=742 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
            if (isGenerateWrappedArrayTypes && isArrayType) {

                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName(name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName =
                        typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = null;
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                            typeTable.getSimpleSchemaTypeName(propertyName),
                            xmlSchemaSequence,
                            propertyName.equals("base64Binary"),
                            isArrayType,
                            type.isPrimitive());
                } else {
                    xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
                }

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));


            } else {

commonMethod: 
(startLine=879 endLine=916 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01139/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    private void processGenerateWrappedArrayTypes(XmlSchema xmlSchema,
                                                  XmlSchemaSequence sequence,
                                                  Class type,
                                                  String name,
                                                  boolean isArrayType,
                                                  String propertyName) {
        XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
        xmlSchemaElement.setName( name + "Wrapper");
        xmlSchemaElement.setNillable(true);
        sequence.getItems().add(xmlSchemaElement);

        String complexTypeName =
                typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

        XmlSchemaComplexType xmlSchemaComplexType ;
        if (xmlSchema.getTypeByName(complexTypeName) == null) {
            xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
            XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
            xmlSchemaComplexType.setParticle(xmlSchemaSequence);
            xmlSchemaComplexType.setName(complexTypeName);

            xmlSchema.getItems().add(xmlSchemaComplexType);
            xmlSchema.getSchemaTypes().add(
                    new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                    xmlSchemaComplexType);
            addElementToSequence("array",
                typeTable.getSimpleSchemaTypeName(propertyName),
                xmlSchemaSequence,
                propertyName.equals("base64Binary"),
                isArrayType,
                type.isPrimitive());
        } else {
           xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
        }

        xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
        xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));
    }


, Instance #
frags: 
(startLine=667 endLine=683 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        xmlSchemaSequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
                } else {

(startLine=718 endLine=734 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                            typeTable.getSimpleSchemaTypeName(propertyName),
                            xmlSchemaSequence,
                            propertyName.equals("base64Binary"),
                            isArrayType,
                            type.isPrimitive());
                } else {

commonMethod: 
(startLine=749 endLine=876 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01139/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    protected void generateSchemaforGenericFields(XmlSchema xmlSchema,
                                                  XmlSchemaSequence sequence, Type genericType,
                                                  String name)
            throws Exception {
        String propertyName;
        Class type;
        boolean isArrayType = true;
        if (genericType instanceof GenericArrayType) {
            Class simpleType = (Class) ((GenericArrayType) genericType).getGenericComponentType();
            propertyName = simpleType.getName();
            // this is a doble array element
            String simpleTypeName = "";
            while (simpleType.isArray()) {
                simpleTypeName += "ArrayOf";
                simpleType = simpleType.getComponentType();
            }
            simpleTypeName += simpleType.getSimpleName();

            if (xmlSchema.getTypeByName(simpleTypeName) == null) {
                XmlSchemaComplexType xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                generateSchemaforGenericFields(xmlSchema,
                        xmlSchemaSequence, simpleType, "array");

                xmlSchemaComplexType.setName(simpleTypeName);
                xmlSchema.getItems().add(xmlSchemaComplexType);
                xmlSchema.getSchemaTypes().add(
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName), xmlSchemaComplexType);
            }

            if (isGenerateWrappedArrayTypes) {
                XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
                xmlSchemaElement.setName( name + "Wrapper");
                xmlSchemaElement.setNillable(true);
                sequence.getItems().add(xmlSchemaElement);

                String complexTypeName = simpleTypeName + "Wrapper";

                XmlSchemaComplexType xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                xmlSchemaComplexType.setName(complexTypeName);

                xmlSchema.getItems().add(xmlSchemaComplexType);
                xmlSchema.getSchemaTypes().add(
                        new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                        xmlSchemaComplexType);
                addContentToMethodSchemaType(xmlSchemaSequence,
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName),
                        "array",
                        true);

                xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
                xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace,
                        xmlSchemaComplexType.getName()));

            } else {
                addContentToMethodSchemaType(sequence,
                        new QName(xmlSchema.getTargetNamespace(), simpleTypeName),
                        name,
                        true);

            }
            return;
        } else {
//            isArrayType = false;
            type = (Class) genericType;
            propertyName = type.getName();
        }

        if (isArrayType && "byte".equals(propertyName)) {
            propertyName = "base64Binary";
        }
        if (isDataHandler(type)) {
            propertyName = "base64Binary";
        }
        if (typeTable.isSimpleType(propertyName)) {

            if (isGenerateWrappedArrayTypes && isArrayType) {

                processGenerateWrappedArrayTypes(xmlSchema, sequence, type, name, isArrayType, propertyName);


            } else {
                addElementToSequence(name,
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        sequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
            }

        } else {
            if (isArrayType) {
                generateSchema(type.getComponentType());
            } else {
                generateSchema(type);
            }

            if (isGenerateWrappedArrayTypes && isArrayType) {

                processGenerateWrappedArrayTypes(xmlSchema, sequence, type, name, isArrayType, propertyName);


            } else {
                addElementToSequence(name,
                        typeTable.getComplexSchemaType(propertyName),
                        sequence,
                        false,
                        isArrayType,
                        type.isPrimitive());
            }

            if (typeTable.getComplexSchemaType(propertyName) != null && !((NamespaceMap) xmlSchema.getNamespaceContext()).values().
                    contains(typeTable.getComplexSchemaType(propertyName).getNamespaceURI())) {
                XmlSchemaImport importElement = new XmlSchemaImport();
                importElement.setNamespace(
                        typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
                xmlSchema.getItems().add(importElement);
                ((NamespaceMap) xmlSchema.getNamespaceContext()).
                        put(generatePrefix(),
                                typeTable.getComplexSchemaType(propertyName).getNamespaceURI());
            }
        }


    }


, Instance #
frags: 
(startLine=667 endLine=683 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                        typeTable.getSimpleSchemaTypeName(propertyName),
                        xmlSchemaSequence,
                        propertyName.equals("base64Binary"),
                        isArrayType,
                        type.isPrimitive());
                } else {

(startLine=718 endLine=734 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
                if (xmlSchema.getTypeByName(complexTypeName) == null) {
                    xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
                    XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
                    xmlSchemaComplexType.setParticle(xmlSchemaSequence);
                    xmlSchemaComplexType.setName(complexTypeName);

                    xmlSchema.getItems().add(xmlSchemaComplexType);
                    xmlSchema.getSchemaTypes().add(
                            new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                            xmlSchemaComplexType);
                    addElementToSequence("array",
                            typeTable.getSimpleSchemaTypeName(propertyName),
                            xmlSchemaSequence,
                            propertyName.equals("base64Binary"),
                            isArrayType,
                            type.isPrimitive());
                } else {

commonMethod: 
(startLine=879 endLine=916 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01139/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    private void processGenerateWrappedArrayTypes(XmlSchema xmlSchema,
                                                  XmlSchemaSequence sequence,
                                                  Class type,
                                                  String name,
                                                  boolean isArrayType,
                                                  String propertyName) {
        XmlSchemaElement xmlSchemaElement = new XmlSchemaElement();
        xmlSchemaElement.setName( name + "Wrapper");
        xmlSchemaElement.setNillable(true);
        sequence.getItems().add(xmlSchemaElement);

        String complexTypeName =
                typeTable.getSimpleSchemaTypeName(propertyName).getLocalPart() + "Wrapper";

        XmlSchemaComplexType xmlSchemaComplexType ;
        if (xmlSchema.getTypeByName(complexTypeName) == null) {
            xmlSchemaComplexType = new XmlSchemaComplexType(xmlSchema);
            XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
            xmlSchemaComplexType.setParticle(xmlSchemaSequence);
            xmlSchemaComplexType.setName(complexTypeName);

            xmlSchema.getItems().add(xmlSchemaComplexType);
            xmlSchema.getSchemaTypes().add(
                    new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()),
                    xmlSchemaComplexType);
            addElementToSequence("array",
                typeTable.getSimpleSchemaTypeName(propertyName),
                xmlSchemaSequence,
                propertyName.equals("base64Binary"),
                isArrayType,
                type.isPrimitive());
        } else {
           xmlSchemaComplexType = (XmlSchemaComplexType) xmlSchema.getTypeByName(complexTypeName);
        }

        xmlSchemaElement.setSchemaType(xmlSchemaComplexType);
        xmlSchemaElement.setSchemaTypeName(new QName(schemaTargetNameSpace, xmlSchemaComplexType.getName()));
    }


, Instance #
frags: 
(startLine=257 endLine=267 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/transport/http/src/org/apache/axis2/transport/http/SimpleHTTPServer.java)
            if (embedded != null) {
                String endpointRefernce = hostAddress ;
                if(configurationContext.getServiceContextPath().startsWith("/")){
                    endpointRefernce =  endpointRefernce +
                            configurationContext.getServiceContextPath() + "/" + serviceName;
                } else {
                    endpointRefernce = endpointRefernce + '/' +
                            configurationContext.getServiceContextPath() + "/" + serviceName;
                }
                return new EndpointReference[]{new EndpointReference(endpointRefernce + "/")};
            } else {

(startLine=289 endLine=301 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01138/modules/transport/http/src/org/apache/axis2/transport/http/SimpleHTTPServer.java)
        if (embedded != null) {
            String endpointRefernce = "http://" + ipAddress + ":" + embedded.getPort() ;
            if(configurationContext.getServiceContextPath().startsWith("/")){
                endpointRefernce =  endpointRefernce +
                        configurationContext.getServiceContextPath() + "/" + serviceName;
            } else {
                endpointRefernce = endpointRefernce + '/' +
                        configurationContext.getServiceContextPath() + "/" + serviceName;
            }


            return new EndpointReference[]{new EndpointReference(endpointRefernce + "/")};
        } else {

commonMethod: 
(startLine=283 endLine=342 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01139/modules/transport/http/src/org/apache/axis2/transport/http/HTTPTransportUtils.java)
    public static EndpointReference[] getEPRsForService(ConfigurationContext configurationContext,
            TransportInDescription trpInDesc, String serviceName, String ip, int port) throws AxisFault {
        
        AxisConfiguration axisConfiguration = configurationContext.getAxisConfiguration();
        Parameter param = axisConfiguration.getParameter(Constants.HTTP_FRONTEND_HOST_URL);
        StringBuilder epr = new StringBuilder();
        if (param != null) {
            epr.append(param.getValue());
            String servicePath = configurationContext.getServicePath();
            if (epr.charAt(epr.length()-1) != '/' && !servicePath.startsWith("/")) {
                epr.append('/');
            }
            epr.append(servicePath);
        } else {
            param = trpInDesc.getParameter(TransportListener.HOST_ADDRESS);
            if (param != null) {
                // TODO: Need to decide if we really want to deprecate this parameter.
                //       Reason to deprecate it is that it has a misleading name ("hostname"
                //       while it is actually a URL), that its role overlaps with that
                //       of the "httpFrontendHostUrl" parameter in the Axis configuration and
                //       that there might be a confusion with the "hostname" parameter in the
                //       Axis configuration (which has a different meaning).
                //       If we deprecate it, we need to remove it from all the axis2.xml sample
                //       files. Note that the same parameter seems to be used by the TCP transport,
                //       but it's role is not very clear (since TCP has no concept of request URI).
                log.warn("Transport '" + trpInDesc.getName()
                        + "' is configured with deprecated parameter '"
                        + TransportListener.HOST_ADDRESS + "'. Please set '"
                        + Constants.HTTP_FRONTEND_HOST_URL
                        + "' in the Axis configuration instead.");
                epr.append(param.getValue());
            } else {
                if (ip == null){
                    try {
                        ip = Utils.getIpAddress(configurationContext.getAxisConfiguration());
                    } catch (SocketException ex) {
                        AxisFault.makeFault(ex);
                    }
                }
                String scheme = trpInDesc.getName();
                epr.append(scheme);
                epr.append("://");
                epr.append(ip);
                if (!(scheme.equals("http") && port == 80
                        || scheme.equals("https") && port == 443)) {
                    epr.append(':');
                    epr.append(port);
                }
            }
            String serviceContextPath = configurationContext.getServiceContextPath();
            if (epr.charAt(epr.length()-1) != '/' && !serviceContextPath.startsWith("/")) {
                epr.append('/');
            }
            epr.append(serviceContextPath);
        }
        epr.append('/');
        epr.append(serviceName);
        epr.append('/');
        return new EndpointReference[]{new EndpointReference(epr.toString())};
    }


, Instance #
frags: 
(startLine=118 endLine=178 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
    public void testAnyTypeElement3() {
        TestAnyTypeElement3 testAnyTypeElement;
        testAnyTypeElement = new TestAnyTypeElement3();
        testAnyTypeElement.setParam1(new Object[]{"test1","test2"});

        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement3.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement3 result = TestAnyTypeElement3.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }

        testAnyTypeElement = new TestAnyTypeElement3();
        testAnyTypeElement.setParam1(null);

        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement3.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement3 result = TestAnyTypeElement3.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],null);
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }

        testAnyTypeElement = new TestAnyTypeElement3();
        testAnyTypeElement.setParam1(new Object[]{"test",null});

        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement3.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement3 result = TestAnyTypeElement3.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test");
            assertEquals(result.getParam1()[1],null);
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }
    }

(startLine=181 endLine=240 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
     public void testAnyTypeElement4() {
        TestAnyTypeElement4 testAnyTypeElement;
        testAnyTypeElement = new TestAnyTypeElement4();
        testAnyTypeElement.setParam1(new Object[]{"test1","test2"});

        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement4.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement4 result = TestAnyTypeElement4.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }

        testAnyTypeElement = new TestAnyTypeElement4();
        testAnyTypeElement.setParam1(null);

        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement4.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement4 result = TestAnyTypeElement4.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),null);
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }

        testAnyTypeElement = new TestAnyTypeElement4();
        testAnyTypeElement.setParam1(new Object[]{"test",null});

        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement4.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement4 result = TestAnyTypeElement4.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test");
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }
    }

(startLine=243 endLine=303 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
    public void testAnyTypeElement5() {
        TestAnyTypeElement5 testAnyTypeElement;
        testAnyTypeElement = new TestAnyTypeElement5();
        testAnyTypeElement.setParam1(new Object[]{"test1","test2"});

        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement5.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement5 result = TestAnyTypeElement5.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }

        testAnyTypeElement = new TestAnyTypeElement5();
        testAnyTypeElement.setParam1(null);

        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement5.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement5 result = TestAnyTypeElement5.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],null);
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }

        testAnyTypeElement = new TestAnyTypeElement5();
        testAnyTypeElement.setParam1(new Object[]{"test",null});

        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement5.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement5 result = TestAnyTypeElement5.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test");
            assertEquals(result.getParam1()[1],null);
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }
    }

commonMethod: 
(startLine=165 endLine=179 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Serialize a bean to XML and then deserialize the XML.
     * 
     * @param bean the bean to serialize
     * @return the deserialized bean
     * @throws Exception
     */
    public static ADBBean serializeDeserialize(ADBBean bean) throws Exception {
        Class<? extends ADBBean> beanClass = bean.getClass();
        OMElement omElement = bean.getOMElement(getADBBeanQName(beanClass), OMAbstractFactory.getOMFactory());
        String omElementString = omElement.toStringWithConsume();
//        System.out.println("om string ==> " + omElementString);
        XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
        return parse(beanClass, xmlReader);
    }


, Instance #
frags: 
(startLine=39 endLine=76 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
    public void testAnyTypeElement1() {
        TestAnyTypeElement1 testAnyTypeElement;

        testAnyTypeElement = new TestAnyTypeElement1();
        testAnyTypeElement.setTestAnyTypeElement1("test");
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement1.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement1 result = TestAnyTypeElement1.Factory.parse(xmlReader);
            assertEquals(result.getTestAnyTypeElement1(),"test");
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }

        testAnyTypeElement = new TestAnyTypeElement1();
        testAnyTypeElement.setTestAnyTypeElement1(null);
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement1.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            fail();
        } catch (ADBException e) {
            assertTrue(true);
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }

    }

(startLine=546 endLine=582 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
    public void testAnyTypeElement10() {
        TestAnyTypeElement10 testAnyTypeElement;

        testAnyTypeElement = new TestAnyTypeElement10();
        testAnyTypeElement.setParam1("test");
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement10.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement10 result = TestAnyTypeElement10.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),"test");
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }

        testAnyTypeElement = new TestAnyTypeElement10();
        testAnyTypeElement.setParam1(null);
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement10.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            fail();
        } catch (ADBException e) {
            assertTrue(true);
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }
    }

commonMethod: 
(startLine=192 endLine=206 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Assert that serializing the given bean should result in an {@link ADBException}.
     * 
     * @param bean the bean to serialize
     * @throws Exception
     */
    public static void assertSerializationFailure(ADBBean bean) throws Exception {
        try {
            OMElement omElement = bean.getOMElement(getADBBeanQName(bean.getClass()), OMAbstractFactory.getOMFactory());
            omElement.toStringWithConsume();
            fail("Expected ADBException");
        } catch (ADBException ex) {
            // OK: expected
        }
    }


, Instance #
frags: 
(startLine=584 endLine=604 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
    public void testAnyElementInteger(){
        // datatype tests
        TestAnyTypeElement1 testAnyTypeElement;
        testAnyTypeElement = new TestAnyTypeElement1();
        testAnyTypeElement.setTestAnyTypeElement1(new Integer(5));
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement1.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement1 result = TestAnyTypeElement1.Factory.parse(xmlReader);
            assertEquals(result.getTestAnyTypeElement1(),new Integer(5));
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }
    }

(startLine=606 endLine=626 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
    public void testAnyElementQName(){
        // datatype tests
        TestAnyTypeElement1 testAnyTypeElement;
        testAnyTypeElement = new TestAnyTypeElement1();
        testAnyTypeElement.setTestAnyTypeElement1(new QName("http://wso2.org","testElement"));
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement1.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement1 result = TestAnyTypeElement1.Factory.parse(xmlReader);
            assertEquals(result.getTestAnyTypeElement1(),new QName("http://wso2.org","testElement"));
        } catch (ADBException e) {
            fail();
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }
    }

commonMethod: 
(startLine=181 endLine=190 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Serialize a bean to XML, then deserialize the XML and compare the resulting bean to
     * the original.
     * 
     * @param bean the bean to serialize
     * @throws Exception
     */
    public static void testSerializeDeserialize(ADBBean bean) throws Exception {
        assertBeanEquals(bean, serializeDeserialize(bean));
    }


, Instance #
frags: 
(startLine=70 endLine=91 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerChoice/InnerChoiceTest.java)
    public void testInnerChoice21() {
        TestInnerSequence2 testSequence = new TestInnerSequence2();
        testSequence.setSequence1("sequence");
        testSequence.setSequence2(3);
        TestInnerSequence2Choice_type0 testInnerSequence2Choice_type1 = new TestInnerSequence2Choice_type0();
        testInnerSequence2Choice_type1.setChoice1(new String[]{"choice1", "choice2"});
        testSequence.setTestInnerSequence2Choice_type0(testInnerSequence2Choice_type1);

        try {
            OMElement omElement = testSequence.getOMElement(TestInnerSequence2.MY_QNAME,
                    OMAbstractFactory.getSOAP12Factory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMelement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerSequence2 result = TestInnerSequence2.Factory.parse(xmlReader);
            assertEquals(result.getSequence1(), "sequence");
            assertEquals(result.getSequence2(), 3);
            assertTrue(isEqual(result.getTestInnerSequence2Choice_type0().getChoice1(), new String[]{"choice1", "choice2"}));
        } catch (Exception e) {
            fail();
        }
    }

(startLine=93 endLine=114 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerChoice/InnerChoiceTest.java)
    public void testInnerChoice22() {
        TestInnerSequence2 testSequence = new TestInnerSequence2();
        testSequence.setSequence1("sequence");
        testSequence.setSequence2(3);
        TestInnerSequence2Choice_type0 testInnerSequence2Choice_type1 = new TestInnerSequence2Choice_type0();
        testInnerSequence2Choice_type1.setChoice2(new int[]{2, 4});
        testSequence.setTestInnerSequence2Choice_type0(testInnerSequence2Choice_type1);

         try {
             OMElement omElement = testSequence.getOMElement(TestInnerSequence2.MY_QNAME,
                      OMAbstractFactory.getSOAP12Factory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMelement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerSequence2 result = TestInnerSequence2.Factory.parse(xmlReader);
            assertEquals(result.getSequence1(), "sequence");
            assertEquals(result.getSequence2(), 3);
            assertTrue(isEqual(result.getTestInnerSequence2Choice_type0().getChoice2(), new int[]{2, 4}));
        } catch (Exception e) {
            fail();
        }
    }

(startLine=116 endLine=137 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerChoice/InnerChoiceTest.java)
    public void testInnerChoice31() {
        TestInnerSequence3 testSequence = new TestInnerSequence3();
        testSequence.setSequence1("sequence");
        testSequence.setSequence2(3);
        TestInnerSequence3Choice_type0 testInnerSequence3Choice_type0 = new TestInnerSequence3Choice_type0();
        testInnerSequence3Choice_type0.setChoice1(new String[]{"choice1", null, "choice2"});
        testSequence.setTestInnerSequence3Choice_type0(testInnerSequence3Choice_type0);

       try {
           OMElement omElement = testSequence.getOMElement(TestInnerSequence3.MY_QNAME,
                   OMAbstractFactory.getSOAP12Factory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMelement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerSequence3 result = TestInnerSequence3.Factory.parse(xmlReader);
            assertEquals(result.getSequence1(), "sequence");
            assertEquals(result.getSequence2(), 3);
            assertTrue(isEqual(result.getTestInnerSequence3Choice_type0().getChoice1(), new String[]{"choice1", null, "choice2"}));
        } catch (Exception e) {
            fail();
        }
    }

(startLine=139 endLine=161 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerChoice/InnerChoiceTest.java)
    public void testInnerChoice32() {
        TestInnerSequence3 testSequence = new TestInnerSequence3();
        testSequence.setSequence1("sequence");
        testSequence.setSequence2(3);
        TestInnerSequence3Choice_type0 testInnerSequence3Choice_type0 = new TestInnerSequence3Choice_type0();
        testInnerSequence3Choice_type0.setChoice2(new int[]{2, Integer.MIN_VALUE, 6});
        testSequence.setTestInnerSequence3Choice_type0(testInnerSequence3Choice_type0);


         try {
             OMElement omElement = testSequence.getOMElement(TestInnerSequence3.MY_QNAME,
                      OMAbstractFactory.getSOAP12Factory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMelement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerSequence3 result = TestInnerSequence3.Factory.parse(xmlReader);
            assertEquals(result.getSequence1(), "sequence");
            assertEquals(result.getSequence2(), 3);
            assertTrue(isEqual(result.getTestInnerSequence3Choice_type0().getChoice2(), new int[]{2, Integer.MIN_VALUE, 6}));
        } catch (Exception e) {
            fail();
        }
    }

commonMethod: 
(startLine=181 endLine=190 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Serialize a bean to XML, then deserialize the XML and compare the resulting bean to
     * the original.
     * 
     * @param bean the bean to serialize
     * @throws Exception
     */
    public static void testSerializeDeserialize(ADBBean bean) throws Exception {
        assertBeanEquals(bean, serializeDeserialize(bean));
    }


, Instance #
frags: 
(startLine=78 endLine=88 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerChoice/InnerChoiceTest.java)
        try {
            OMElement omElement = testSequence.getOMElement(TestInnerSequence2.MY_QNAME,
                    OMAbstractFactory.getSOAP12Factory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMelement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerSequence2 result = TestInnerSequence2.Factory.parse(xmlReader);
            assertEquals(result.getSequence1(), "sequence");
            assertEquals(result.getSequence2(), 3);
            assertTrue(isEqual(result.getTestInnerSequence2Choice_type0().getChoice1(), new String[]{"choice1", "choice2"}));
        } catch (Exception e) {

(startLine=101 endLine=111 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerChoice/InnerChoiceTest.java)
         try {
             OMElement omElement = testSequence.getOMElement(TestInnerSequence2.MY_QNAME,
                      OMAbstractFactory.getSOAP12Factory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMelement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerSequence2 result = TestInnerSequence2.Factory.parse(xmlReader);
            assertEquals(result.getSequence1(), "sequence");
            assertEquals(result.getSequence2(), 3);
            assertTrue(isEqual(result.getTestInnerSequence2Choice_type0().getChoice2(), new int[]{2, 4}));
        } catch (Exception e) {

(startLine=124 endLine=134 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerChoice/InnerChoiceTest.java)
       try {
           OMElement omElement = testSequence.getOMElement(TestInnerSequence3.MY_QNAME,
                   OMAbstractFactory.getSOAP12Factory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMelement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerSequence3 result = TestInnerSequence3.Factory.parse(xmlReader);
            assertEquals(result.getSequence1(), "sequence");
            assertEquals(result.getSequence2(), 3);
            assertTrue(isEqual(result.getTestInnerSequence3Choice_type0().getChoice1(), new String[]{"choice1", null, "choice2"}));
        } catch (Exception e) {

(startLine=148 endLine=158 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerChoice/InnerChoiceTest.java)
         try {
             OMElement omElement = testSequence.getOMElement(TestInnerSequence3.MY_QNAME,
                      OMAbstractFactory.getSOAP12Factory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMelement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerSequence3 result = TestInnerSequence3.Factory.parse(xmlReader);
            assertEquals(result.getSequence1(), "sequence");
            assertEquals(result.getSequence2(), 3);
            assertTrue(isEqual(result.getTestInnerSequence3Choice_type0().getChoice2(), new int[]{2, Integer.MIN_VALUE, 6}));
        } catch (Exception e) {

commonMethod: 
(startLine=181 endLine=190 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Serialize a bean to XML, then deserialize the XML and compare the resulting bean to
     * the original.
     * 
     * @param bean the bean to serialize
     * @throws Exception
     */
    public static void testSerializeDeserialize(ADBBean bean) throws Exception {
        assertBeanEquals(bean, serializeDeserialize(bean));
    }


, Instance #
frags: 
(startLine=119 endLine=126 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/union/UnionTest.java)
        try {
            omElement = testInnerUnionType.getOMElement(TestInnerUnionType.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerUnionType result = TestInnerUnionType.Factory.parse(xmlReader);
            assertEquals(packingType_t_type0.toString(),result.getTestInnerUnionType().getObject().toString());
        } catch (Exception e) {

(startLine=137 endLine=144 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/union/UnionTest.java)
         try {
            omElement = testInnerUnionType.getOMElement(TestInnerUnionType.MY_QNAME,OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerUnionType result = TestInnerUnionType.Factory.parse(xmlReader);
            assertEquals(packingType_t_type1.toString(),result.getTestInnerUnionType().getObject().toString());
        } catch (Exception e) {

(startLine=153 endLine=160 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/union/UnionTest.java)
        try {
            omElement = testInnerUnionType.getOMElement(TestInnerUnionType.MY_QNAME,OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerUnionType result = TestInnerUnionType.Factory.parse(xmlReader);
            assertEquals(PackingType_T_type2.TAR,result.getTestInnerUnionType().getObject());
        } catch (Exception e) {

(startLine=43 endLine=51 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/list/ListTest.java)
       try {
           OMElement omElement = testListStringElement.getOMElement(TestListStringElement.MY_QNAME,
                       OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestListStringElement result = TestListStringElement.Factory.parse(xmlReader);
            assertEquals(testListString.toString(),result.getTestListStringElement().toString());
        } catch (Exception e) {

commonMethod: 
(startLine=181 endLine=190 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Serialize a bean to XML, then deserialize the XML and compare the resulting bean to
     * the original.
     * 
     * @param bean the bean to serialize
     * @throws Exception
     */
    public static void testSerializeDeserialize(ADBBean bean) throws Exception {
        assertBeanEquals(bean, serializeDeserialize(bean));
    }


, Instance #
frags: 
(startLine=114 endLine=138 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerparticles/InnerParticlesTest.java)
    public void testInnerParticle32() {

        TestInnerParticle3 testInnerParticle3 = new TestInnerParticle3();
        TestInnerParticle3Choice_type0 testInnerParticle3Choice_type1 = new TestInnerParticle3Choice_type0();
        testInnerParticle3Choice_type1.setParam2("Param2");
        testInnerParticle3Choice_type1.setParam3("Param3");
        testInnerParticle3.setTestInnerParticle3Choice_type0(testInnerParticle3Choice_type1);

        try {
            OMElement omElement =
                    testInnerParticle3.getOMElement(TestInnerParticle3.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerParticle3 result = TestInnerParticle3.Factory.parse(xmlReader);
            assertEquals(result.getTestInnerParticle3Choice_type0().getParam3(), "Param3");
        } catch (XMLStreamException e) {
            e.printStackTrace();
            fail();
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }

    }

(startLine=140 endLine=164 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerparticles/InnerParticlesTest.java)
    public void testInnerParticle33() {

        TestInnerParticle3 testInnerParticle3 = new TestInnerParticle3();
        testInnerParticle3.setParam1("Param1");
        TestInnerParticle3Choice_type0 testInnerParticle3Choice_type1 = new TestInnerParticle3Choice_type0();
        testInnerParticle3Choice_type1.setParam2("Param2");
        testInnerParticle3Choice_type1.setParam3("Param3");
        testInnerParticle3.setTestInnerParticle3Choice_type0(testInnerParticle3Choice_type1);
        testInnerParticle3.setParam4("Param4");

         try {
             OMElement omElement =
                      testInnerParticle3.getOMElement(TestInnerParticle3.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerParticle3 result = TestInnerParticle3.Factory.parse(xmlReader);
            assertEquals(result.getParam4(), "Param4");
        } catch (XMLStreamException e) {
            fail();
        } catch (Exception e) {
            fail();
        }

    }

commonMethod: 
(startLine=165 endLine=179 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Serialize a bean to XML and then deserialize the XML.
     * 
     * @param bean the bean to serialize
     * @return the deserialized bean
     * @throws Exception
     */
    public static ADBBean serializeDeserialize(ADBBean bean) throws Exception {
        Class<? extends ADBBean> beanClass = bean.getClass();
        OMElement omElement = bean.getOMElement(getADBBeanQName(beanClass), OMAbstractFactory.getOMFactory());
        String omElementString = omElement.toStringWithConsume();
//        System.out.println("om string ==> " + omElementString);
        XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
        return parse(beanClass, xmlReader);
    }


, Instance #
frags: 
(startLine=166 endLine=187 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerparticles/InnerParticlesTest.java)
    public void testInnerParticle41() {

        TestInnerParticle4 testInnerParticle4 = new TestInnerParticle4();
        testInnerParticle4.setParam1("Param1");

         try {
             OMElement omElement =
                      testInnerParticle4.getOMElement(TestInnerParticle4.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerParticle4 result = TestInnerParticle4.Factory.parse(xmlReader);
            assertEquals(result.getParam1(), "Param1");
        } catch (XMLStreamException e) {
            e.printStackTrace();
            fail();
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }

    }

(startLine=216 endLine=237 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerparticles/InnerParticlesTest.java)
    public void testInnerParticle43() {

        TestInnerParticle4 testInnerParticle4 = new TestInnerParticle4();
        testInnerParticle4.setParam4("Param4");

         try {
            OMElement omElement =
                      testInnerParticle4.getOMElement(TestInnerParticle4.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerParticle4 result = TestInnerParticle4.Factory.parse(xmlReader);
            assertEquals(result.getParam4(), "Param4");
        } catch (XMLStreamException e) {
            e.printStackTrace();
            fail();
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }

    }

commonMethod: 
(startLine=181 endLine=190 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Serialize a bean to XML, then deserialize the XML and compare the resulting bean to
     * the original.
     * 
     * @param bean the bean to serialize
     * @throws Exception
     */
    public static void testSerializeDeserialize(ADBBean bean) throws Exception {
        assertBeanEquals(bean, serializeDeserialize(bean));
    }


, Instance #
frags: 
(startLine=56 endLine=64 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/booleantest/BooleanTest.java)
         try {
            OMElement omElement = testBoolean.getOMElement(TestBoolean2.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestBoolean2 result = TestBoolean2.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),false);
            assertEquals(result.getAttribute1(),true);
        } catch (Exception e) {

(startLine=160 endLine=169 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/group/GroupTest.java)
         try {
             OMElement omElement =
                       testAttributeGroup.getOMElement(TestAttributeGroupElement.MY_QNAME,OMAbstractFactory.getOMFactory());
             String omElementString = omElement.toStringWithConsume();
             System.out.println("OM Element ==> " + omElementString);
             XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
             TestAttributeGroupElement result = TestAttributeGroupElement.Factory.parse(xmlReader);
             assertEquals(result.getParam1(),"Param1");
             assertEquals(result.getAttribute1(),"Attribute1");
         } catch (XMLStreamException e) {

(startLine=183 endLine=193 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/group/GroupTest.java)
        try {
            OMElement omElement =
                    testNestedAttributeGroupElement.getOMElement(TestNestedAttributeGroupElement.MY_QNAME,OMAbstractFactory.getOMFactory());
             String omElementString = omElement.toStringWithConsume();
             System.out.println("OM Element ==> " + omElementString);
             XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
             TestNestedAttributeGroupElement result = TestNestedAttributeGroupElement.Factory.parse(xmlReader);
             assertEquals(result.getParam1(),"Param1");
             assertEquals(result.getAttribute1(),"Attribute1");
             assertEquals(result.getAttribute2(),"Attribute2");
         } catch (XMLStreamException e) {

commonMethod: 
(startLine=181 endLine=190 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Serialize a bean to XML, then deserialize the XML and compare the resulting bean to
     * the original.
     * 
     * @param bean the bean to serialize
     * @throws Exception
     */
    public static void testSerializeDeserialize(ADBBean bean) throws Exception {
        assertBeanEquals(bean, serializeDeserialize(bean));
    }


, Instance #
frags: 
(startLine=44 endLine=52 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement1.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement1 result = TestAnyTypeElement1.Factory.parse(xmlReader);
            assertEquals(result.getTestAnyTypeElement1(),"test");
        } catch (ADBException e) {

(startLine=83 endLine=91 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement2.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement2 result = TestAnyTypeElement2.Factory.parse(xmlReader);
            assertEquals(result.getTestAnyTypeElement2(),"test");
        } catch (ADBException e) {

(startLine=101 endLine=109 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement1.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement2 result = TestAnyTypeElement2.Factory.parse(xmlReader);
            assertEquals(result.getTestAnyTypeElement2(),null);
        } catch (ADBException e) {

(startLine=123 endLine=132 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement3.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement3 result = TestAnyTypeElement3.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {

(startLine=143 endLine=151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement3.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement3 result = TestAnyTypeElement3.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],null);
        } catch (ADBException e) {

(startLine=162 endLine=171 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement3.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement3 result = TestAnyTypeElement3.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test");
            assertEquals(result.getParam1()[1],null);
        } catch (ADBException e) {

(startLine=186 endLine=195 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement4.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement4 result = TestAnyTypeElement4.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {

(startLine=206 endLine=214 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement4.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement4 result = TestAnyTypeElement4.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),null);
        } catch (ADBException e) {

(startLine=225 endLine=233 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement4.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement4 result = TestAnyTypeElement4.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test");
        } catch (ADBException e) {

(startLine=248 endLine=257 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement5.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement5 result = TestAnyTypeElement5.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {

(startLine=268 endLine=276 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement5.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement5 result = TestAnyTypeElement5.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],null);
        } catch (ADBException e) {

(startLine=287 endLine=296 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement5.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement5 result = TestAnyTypeElement5.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test");
            assertEquals(result.getParam1()[1],null);
        } catch (ADBException e) {

(startLine=311 endLine=320 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement6.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement6 result = TestAnyTypeElement6.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {

(startLine=405 endLine=413 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement7.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement7 result = TestAnyTypeElement7.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),"test");
        } catch (ADBException e) {

(startLine=423 endLine=431 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement7.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement7 result = TestAnyTypeElement7.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),null);
        } catch (ADBException e) {

(startLine=446 endLine=457 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement7.getOMElement(
                    TestAnyTypeElement7.MY_QNAME,OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(
                    new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement7 result = TestAnyTypeElement7.Factory.parse(xmlReader);
            TestComplexParent resultParent = (TestComplexParent) result.getParam1();
            assertEquals(resultParent.getParam1(),"test param1");

        } catch (ADBException e) {

(startLine=471 endLine=479 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement8.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement8 result = TestAnyTypeElement8.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),"test");
        } catch (ADBException e) {

(startLine=489 endLine=497 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement8.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement8 result = TestAnyTypeElement8.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),null);
        } catch (ADBException e) {

(startLine=511 endLine=519 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement9.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement9 result = TestAnyTypeElement9.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),"test");
        } catch (ADBException e) {

(startLine=529 endLine=537 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement9.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement9 result = TestAnyTypeElement9.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),null);
        } catch (ADBException e) {

(startLine=551 endLine=559 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement10.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement10 result = TestAnyTypeElement10.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),"test");
        } catch (ADBException e) {

(startLine=589 endLine=597 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement1.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement1 result = TestAnyTypeElement1.Factory.parse(xmlReader);
            assertEquals(result.getTestAnyTypeElement1(),new Integer(5));
        } catch (ADBException e) {

(startLine=611 endLine=619 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement1.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement1 result = TestAnyTypeElement1.Factory.parse(xmlReader);
            assertEquals(result.getTestAnyTypeElement1(),new QName("http://wso2.org","testElement"));
        } catch (ADBException e) {

(startLine=39 endLine=46 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/booleantest/BooleanTest.java)
        try {
            OMElement omElement = testBoolean.getOMElement(TestBoolean1.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestBoolean1 result = TestBoolean1.Factory.parse(xmlReader);
            assertEquals(result.getTestBoolean1(),true);
        } catch (Exception e) {

(startLine=305 endLine=313 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/particalmaxoccurs/ParticalMaxOccursTest.java)
        try {
            OMElement omElement =
                     testParticalChoiceMaxOccurs.getOMElement(TestParticalChoiceMaxOccurs.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM string ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestParticalChoiceMaxOccurs result = TestParticalChoiceMaxOccurs.Factory.parse(xmlReader);
            assertEquals(result.getTestParticalChoiceMaxOccurs().getParm1(), "Param1");
        } catch (XMLStreamException e) {

(startLine=98 endLine=106 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerparticles/InnerParticlesTest.java)
        try {
            OMElement omElement =
                     testInnerParticle3.getOMElement(TestInnerParticle3.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerParticle3 result = TestInnerParticle3.Factory.parse(xmlReader);
            assertEquals(result.getParam1(), "Param1");
        } catch (XMLStreamException e) {

(startLine=171 endLine=179 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerparticles/InnerParticlesTest.java)
         try {
             OMElement omElement =
                      testInnerParticle4.getOMElement(TestInnerParticle4.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerParticle4 result = TestInnerParticle4.Factory.parse(xmlReader);
            assertEquals(result.getParam1(), "Param1");
        } catch (XMLStreamException e) {

(startLine=197 endLine=206 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerparticles/InnerParticlesTest.java)
        try {
            OMElement omElement =
                     testInnerParticle4.getOMElement(TestInnerParticle4.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerParticle4 result = TestInnerParticle4.Factory.parse(xmlReader);
            assertEquals(result.getTestInnerParticle4Sequence_type0().getParam2(), "Param2");
            assertEquals(result.getTestInnerParticle4Sequence_type0().getParam3(), "Param3");
        } catch (XMLStreamException e) {

(startLine=221 endLine=229 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerparticles/InnerParticlesTest.java)
         try {
            OMElement omElement =
                      testInnerParticle4.getOMElement(TestInnerParticle4.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerParticle4 result = TestInnerParticle4.Factory.parse(xmlReader);
            assertEquals(result.getParam4(), "Param4");
        } catch (XMLStreamException e) {

(startLine=109 endLine=116 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/references/ElementReferenceTest.java)
        try {
            OMElement omElement = element1.getOMElement(Element1.MY_QNAME,OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            Element1 result = Element1.Factory.parse(xmlReader);
            assertNotNull(result);
        } catch (ADBException e) {

(startLine=136 endLine=145 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/references/ElementReferenceTest.java)
        try {
            OMElement omElement = element1.getOMElement(Element1.MY_QNAME,OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            Element1 result = Element1.Factory.parse(xmlReader);
            assertNotNull(result);
            assertNotNull(result.getElement1());
            assertNotNull(result.getElement1().getElement1());
        } catch (ADBException e) {

(startLine=39 endLine=46 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/attribute/AttributeTest.java)
        try {
            omElement = testElement.getOMElement(TestElement1.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMElement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestElement1 result = TestElement1.Factory.parse(xmlReader);
            assertEquals(result.getAttribute1(),1);
        } catch (Exception e) {

(startLine=53 endLine=60 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/attribute/AttributeTest.java)
        try {
            omElement = testElement.getOMElement(TestElement1.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMElement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestElement1 result = TestElement1.Factory.parse(xmlReader);
            assertEquals(result.getAttribute1(),Integer.MIN_VALUE);
        } catch (Exception e) {

(startLine=69 endLine=76 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/attribute/AttributeTest.java)
         try {
             omElement = testElement.getOMElement(TestElement2.MY_QNAME, OMAbstractFactory.getOMFactory());
             String omElementString = omElement.toStringWithConsume();
            System.out.println("OMElement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestElement2 result = TestElement2.Factory.parse(xmlReader);
            assertEquals(result.getAttribute1(),1);
        } catch (Exception e) {

(startLine=97 endLine=104 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/attribute/AttributeTest.java)
         try {
             omElement = testElement.getOMElement(TestElement3.MY_QNAME, OMAbstractFactory.getOMFactory());
             String omElementString = omElement.toStringWithConsume();
            System.out.println("OMElement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestElement3 result = TestElement3.Factory.parse(xmlReader);
            assertEquals(result.getAttribute1(),"test");
        } catch (Exception e) {

(startLine=111 endLine=118 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/attribute/AttributeTest.java)
        try {
            omElement = testElement.getOMElement(TestElement3.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMElement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestElement3 result = TestElement3.Factory.parse(xmlReader);
            assertEquals(result.getAttribute1(),null);
        } catch (Exception e) {

(startLine=127 endLine=134 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/attribute/AttributeTest.java)
        try {
            omElement = testElement.getOMElement(TestElement4.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMElement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestElement4 result = TestElement4.Factory.parse(xmlReader);
            assertEquals(result.getAttribute1(),"test");
        } catch (Exception e) {

(startLine=157 endLine=165 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/attribute/AttributeTest.java)
        try {
            OMElement omElement = testAttributeSimpleType.getOMElement(TestAttributeSimpleType.MY_QNAME,
                      OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMString ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAttributeSimpleType result = TestAttributeSimpleType.Factory.parse(xmlReader);
            assertEquals(result.getAttribute1().getAttribute1_type0(),"test attribute");
        } catch (Exception e) {

commonMethod: 
(startLine=181 endLine=190 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Serialize a bean to XML, then deserialize the XML and compare the resulting bean to
     * the original.
     * 
     * @param bean the bean to serialize
     * @throws Exception
     */
    public static void testSerializeDeserialize(ADBBean bean) throws Exception {
        assertBeanEquals(bean, serializeDeserialize(bean));
    }


, Instance #
frags: 
(startLine=44 endLine=52 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement1.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement1 result = TestAnyTypeElement1.Factory.parse(xmlReader);
            assertEquals(result.getTestAnyTypeElement1(),"test");
        } catch (ADBException e) {

(startLine=311 endLine=320 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement6.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement6 result = TestAnyTypeElement6.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {

(startLine=551 endLine=559 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement10.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement10 result = TestAnyTypeElement10.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),"test");
        } catch (ADBException e) {

(startLine=69 endLine=76 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/attribute/AttributeTest.java)
         try {
             omElement = testElement.getOMElement(TestElement2.MY_QNAME, OMAbstractFactory.getOMFactory());
             String omElementString = omElement.toStringWithConsume();
            System.out.println("OMElement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestElement2 result = TestElement2.Factory.parse(xmlReader);
            assertEquals(result.getAttribute1(),1);
        } catch (Exception e) {

(startLine=127 endLine=134 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/attribute/AttributeTest.java)
        try {
            omElement = testElement.getOMElement(TestElement4.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OMElement ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestElement4 result = TestElement4.Factory.parse(xmlReader);
            assertEquals(result.getAttribute1(),"test");
        } catch (Exception e) {

commonMethod: 
(startLine=192 endLine=206 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Assert that serializing the given bean should result in an {@link ADBException}.
     * 
     * @param bean the bean to serialize
     * @throws Exception
     */
    public static void assertSerializationFailure(ADBBean bean) throws Exception {
        try {
            OMElement omElement = bean.getOMElement(getADBBeanQName(bean.getClass()), OMAbstractFactory.getOMFactory());
            omElement.toStringWithConsume();
            fail("Expected ADBException");
        } catch (ADBException ex) {
            // OK: expected
        }
    }


, Instance #
frags: 
(startLine=123 endLine=132 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement3.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement3 result = TestAnyTypeElement3.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {

(startLine=143 endLine=151 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement3.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement3 result = TestAnyTypeElement3.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],null);
        } catch (ADBException e) {

(startLine=162 endLine=171 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement3.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement3 result = TestAnyTypeElement3.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test");
            assertEquals(result.getParam1()[1],null);
        } catch (ADBException e) {

(startLine=186 endLine=195 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement4.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement4 result = TestAnyTypeElement4.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {

(startLine=206 endLine=214 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement4.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement4 result = TestAnyTypeElement4.Factory.parse(xmlReader);
            assertEquals(result.getParam1(),null);
        } catch (ADBException e) {

(startLine=225 endLine=233 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement4.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement4 result = TestAnyTypeElement4.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test");
        } catch (ADBException e) {

(startLine=248 endLine=257 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement5.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement5 result = TestAnyTypeElement5.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test1");
            assertEquals(result.getParam1()[1],"test2");
        } catch (ADBException e) {

(startLine=268 endLine=276 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement5.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement5 result = TestAnyTypeElement5.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],null);
        } catch (ADBException e) {

(startLine=287 endLine=296 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/anytype/AnyTypeTest.java)
        try {
            OMElement omElement = testAnyTypeElement.getOMElement(TestAnyTypeElement5.MY_QNAME,
                    OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestAnyTypeElement5 result = TestAnyTypeElement5.Factory.parse(xmlReader);
            assertEquals(result.getParam1()[0],"test");
            assertEquals(result.getParam1()[1],null);
        } catch (ADBException e) {

(startLine=114 endLine=122 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/union2/Union2Test.java)
        try {
            OMElement omElement = testFuzzyDateType.getOMElement(
                    TestFuzzyDateType.MY_QNAME,OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM Element ==> " + omElementString);
            XMLStreamReader xmlReader =
                    StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestFuzzyDateType result = TestFuzzyDateType.Factory.parse(xmlReader);
        } catch (ADBException e) {

(startLine=122 endLine=130 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerparticles/InnerParticlesTest.java)
        try {
            OMElement omElement =
                    testInnerParticle3.getOMElement(TestInnerParticle3.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerParticle3 result = TestInnerParticle3.Factory.parse(xmlReader);
            assertEquals(result.getTestInnerParticle3Choice_type0().getParam3(), "Param3");
        } catch (XMLStreamException e) {

(startLine=150 endLine=158 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/innerparticles/InnerParticlesTest.java)
         try {
             OMElement omElement =
                      testInnerParticle3.getOMElement(TestInnerParticle3.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestInnerParticle3 result = TestInnerParticle3.Factory.parse(xmlReader);
            assertEquals(result.getParam4(), "Param4");
        } catch (XMLStreamException e) {

(startLine=108 endLine=117 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/group/GroupTest.java)
       try {
           OMElement omElement =
                   testGroupChoiceElement.getOMElement(TestChoiceGroupElement.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader =
                    StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestChoiceGroupElement result = TestChoiceGroupElement.Factory.parse(xmlReader);
            assertEquals(result.getTestChoiceGroup().getChoiceParam1(),"choiceParam1");
        } catch (XMLStreamException e) {

(startLine=139 endLine=148 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/group/GroupTest.java)
       try {
           OMElement omElement =
                   testChoiceNestedGroupElement.getOMElement(testChoiceNestedGroupElement.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String ==> " + omElementString);
            XMLStreamReader xmlReader =
                    StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestChoiceNestedGroupElement result = TestChoiceNestedGroupElement.Factory.parse(xmlReader);
            assertEquals(result.getTestChoiceNestedGroup().getTestChoiceGroup().getChoiceParam1(),"choiceParam1");
        } catch (XMLStreamException e) {

(startLine=54 endLine=61 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01143/modules/adb-codegen/test/org/apache/axis2/schema/rampart/RampartTest.java)
        try {
            OMElement omElement = testExtension.getOMElement(TestExtension.MY_QNAME, OMAbstractFactory.getOMFactory());
            String omElementString = omElement.toStringWithConsume();
            System.out.println("OM String " + omElementString);
            XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
            TestExtension result = TestExtension.Factory.parse(xmlReader);
            
        } catch (ADBException e) {

commonMethod: 
(startLine=165 endLine=179 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01144/modules/adb-codegen/test/org/apache/axis2/schema/AbstractTestCase.java)
    /**
     * Serialize a bean to XML and then deserialize the XML.
     * 
     * @param bean the bean to serialize
     * @return the deserialized bean
     * @throws Exception
     */
    public static ADBBean serializeDeserialize(ADBBean bean) throws Exception {
        Class<? extends ADBBean> beanClass = bean.getClass();
        OMElement omElement = bean.getOMElement(getADBBeanQName(beanClass), OMAbstractFactory.getOMFactory());
        String omElementString = omElement.toStringWithConsume();
//        System.out.println("om string ==> " + omElementString);
        XMLStreamReader xmlReader = StAXUtils.createXMLStreamReader(new ByteArrayInputStream(omElementString.getBytes()));
        return parse(beanClass, xmlReader);
    }


, Instance #
frags: 
(startLine=223 endLine=260 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                    if (idParam != null) {
                        // Id is set

                        Policy targetPolicy = findPolicy(idParam, axisService);

                        if (targetPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                targetPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }

                        } else {

                            OutputStream out = res.getOutputStream();
                            res.setContentType("text/html");
                            String outStr = "<b>No policy found for id="
                                            + idParam + "</b>";
                            out.write(outStr.getBytes());
                        }

                    } else {

(startLine=260 endLine=295 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                    } else {

                        PolicyInclude policyInclude = axisService.getPolicyInclude();
                        Policy effecPolicy = policyInclude.getEffectivePolicy();

                        if (effecPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                effecPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }
                        } else {

                            OutputStream out = res.getOutputStream();
                            res.setContentType("text/html");
                            String outStr = "<b>No effective policy for "
                                            + serviceName + " service</b>";
                            out.write(outStr.getBytes());
                        }
                    }

commonMethod: 
(startLine=331 endLine=349 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01217/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
    private void handleWSDL2Request(HttpServletRequest req,
                                    HttpServletResponse res,
                                    String url,
                                    AxisService axisService) throws IOException {
        if (!canExposeServiceMetadata(axisService)){
            res.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        res.setContentType("text/xml");
        String ip = extractHost(url);
        String wsdlName = req.getParameter("wsdl2");

        int ret = axisService.printWSDL2(res.getOutputStream(), ip, wsdlName);
        if (ret == 0) {
            res.sendRedirect("");
        } else if (ret == -1) {
            res.sendError(HttpServletResponse.SC_NOT_FOUND);
        }
    }


, Instance #
frags: 
(startLine=223 endLine=260 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                    if (idParam != null) {
                        // Id is set

                        Policy targetPolicy = findPolicy(idParam, axisService);

                        if (targetPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                targetPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }

                        } else {

                            OutputStream out = res.getOutputStream();
                            res.setContentType("text/html");
                            String outStr = "<b>No policy found for id="
                                            + idParam + "</b>";
                            out.write(outStr.getBytes());
                        }

                    } else {

(startLine=260 endLine=295 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                    } else {

                        PolicyInclude policyInclude = axisService.getPolicyInclude();
                        Policy effecPolicy = policyInclude.getEffectivePolicy();

                        if (effecPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                effecPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }
                        } else {

                            OutputStream out = res.getOutputStream();
                            res.setContentType("text/html");
                            String outStr = "<b>No effective policy for "
                                            + serviceName + " service</b>";
                            out.write(outStr.getBytes());
                        }
                    }

commonMethod: 
(startLine=311 endLine=329 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01217/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
    private void handleWSDLRequest(HttpServletRequest req,
                                   HttpServletResponse res,
                                   String url,
                                   AxisService axisService) throws IOException {
        if (!canExposeServiceMetadata(axisService)){
            res.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        OutputStream out = res.getOutputStream();
        res.setContentType("text/xml");
        String ip = extractHost(url);
        String wsdlName = req.getParameter("wsdl");

        if (wsdlName != null && wsdlName.length()>0) {
            axisService.printUserWSDL(out, wsdlName, ip);
        } else {
            axisService.printWSDL(out, ip);
        }
    }


, Instance #
frags: 
(startLine=223 endLine=260 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                    if (idParam != null) {
                        // Id is set

                        Policy targetPolicy = findPolicy(idParam, axisService);

                        if (targetPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                targetPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }

                        } else {

                            OutputStream out = res.getOutputStream();
                            res.setContentType("text/html");
                            String outStr = "<b>No policy found for id="
                                            + idParam + "</b>";
                            out.write(outStr.getBytes());
                        }

                    } else {

(startLine=260 endLine=295 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                    } else {

                        PolicyInclude policyInclude = axisService.getPolicyInclude();
                        Policy effecPolicy = policyInclude.getEffectivePolicy();

                        if (effecPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                effecPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }
                        } else {

                            OutputStream out = res.getOutputStream();
                            res.setContentType("text/html");
                            String outStr = "<b>No effective policy for "
                                            + serviceName + " service</b>";
                            out.write(outStr.getBytes());
                        }
                    }

commonMethod: 
(startLine=293 endLine=309 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01217/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
    private void handleXSDRequest(HttpServletRequest req, HttpServletResponse res,
                                  AxisService axisService) throws IOException {
        if (!canExposeServiceMetadata(axisService)){
            res.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        res.setContentType("text/xml");
        int ret = axisService.printXSD(res.getOutputStream(), req.getParameter("xsd"));
        if (ret == 0) {
            //multiple schemas are present and the user specified
            //no name - in this case we cannot possibly pump a schema
            //so redirect to the service root
            res.sendRedirect("");
        } else if (ret == -1) {
            res.sendError(HttpServletResponse.SC_NOT_FOUND);
        }
    }


, Instance #
frags: 
(startLine=223 endLine=260 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                    if (idParam != null) {
                        // Id is set

                        Policy targetPolicy = findPolicy(idParam, axisService);

                        if (targetPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                targetPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }

                        } else {

                            OutputStream out = res.getOutputStream();
                            res.setContentType("text/html");
                            String outStr = "<b>No policy found for id="
                                            + idParam + "</b>";
                            out.write(outStr.getBytes());
                        }

                    } else {

(startLine=260 endLine=295 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                    } else {

                        PolicyInclude policyInclude = axisService.getPolicyInclude();
                        Policy effecPolicy = policyInclude.getEffectivePolicy();

                        if (effecPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                effecPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }
                        } else {

                            OutputStream out = res.getOutputStream();
                            res.setContentType("text/html");
                            String outStr = "<b>No effective policy for "
                                            + serviceName + " service</b>";
                            out.write(outStr.getBytes());
                        }
                    }

commonMethod: 
(startLine=203 endLine=291 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01217/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
    private void handlePolicyRequest(HttpServletRequest req,
                                     HttpServletResponse res,
                                     String serviceName,
                                     AxisService axisService) throws IOException, ServletException {
        if (!canExposeServiceMetadata(axisService)){
            res.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        ExternalPolicySerializer serializer = new ExternalPolicySerializer();
        serializer.setAssertionsToFilter(configContext
                .getAxisConfiguration().getLocalPolicyAssertions());

        // check whether Id is set
        String idParam = req.getParameter("id");

        if (idParam != null) {
            // Id is set

            Policy targetPolicy = findPolicy(idParam, axisService);

            if (targetPolicy != null) {
                XMLStreamWriter writer;

                try {
                    OutputStream out = res.getOutputStream();
                    writer = XMLOutputFactory.newInstance()
                            .createXMLStreamWriter(out);

                    res.setContentType("application/wspolicy+xml");
                    targetPolicy.serialize(writer);
                    writer.flush();

                } catch (XMLStreamException e) {
                    throw new ServletException(
                            "Error occured when serializing the Policy",
                            e);

                } catch (FactoryConfigurationError e) {
                    throw new ServletException(
                            "Error occured when serializing the Policy",
                            e);
                }

            } else {

                OutputStream out = res.getOutputStream();
                res.setContentType("text/html");
                String outStr = "<b>No policy found for id="
                                + idParam + "</b>";
                out.write(outStr.getBytes());
            }

        } else {

            PolicyInclude policyInclude = axisService.getPolicyInclude();
            Policy effecPolicy = policyInclude.getEffectivePolicy();

            if (effecPolicy != null) {
                XMLStreamWriter writer;

                try {
                    OutputStream out = res.getOutputStream();
                    writer = XMLOutputFactory.newInstance()
                            .createXMLStreamWriter(out);

                    res.setContentType("application/wspolicy+xml");
                    effecPolicy.serialize(writer);
                    writer.flush();

                } catch (XMLStreamException e) {
                    throw new ServletException(
                            "Error occured when serializing the Policy",
                            e);

                } catch (FactoryConfigurationError e) {
                    throw new ServletException(
                            "Error occured when serializing the Policy",
                            e);
                }
            } else {

                OutputStream out = res.getOutputStream();
                res.setContentType("text/html");
                String outStr = "<b>No effective policy for "
                                + serviceName + " service</b>";
                out.write(outStr.getBytes());
            }
        }
    }


, Instance #
frags: 
(startLine=223 endLine=260 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                    if (idParam != null) {
                        // Id is set

                        Policy targetPolicy = findPolicy(idParam, axisService);

                        if (targetPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                targetPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }

                        } else {

                            OutputStream out = res.getOutputStream();
                            res.setContentType("text/html");
                            String outStr = "<b>No policy found for id="
                                            + idParam + "</b>";
                            out.write(outStr.getBytes());
                        }

                    } else {

(startLine=260 endLine=295 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                    } else {

                        PolicyInclude policyInclude = axisService.getPolicyInclude();
                        Policy effecPolicy = policyInclude.getEffectivePolicy();

                        if (effecPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                effecPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }
                        } else {

                            OutputStream out = res.getOutputStream();
                            res.setContentType("text/html");
                            String outStr = "<b>No effective policy for "
                                            + serviceName + " service</b>";
                            out.write(outStr.getBytes());
                        }
                    }

commonMethod: 
(startLine=351 endLine=365 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01217/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
    /**
     * Checks whether exposing the WSDL & WSDL elements such as schema & policy have been allowed
     *
     * @param service  The AxisService which needs to be verified
     * @throws IOException If exposing WSDL & WSDL elements has been restricted.
     * @return true - if service metadata can be exposed, false - otherwise
     */
    private boolean canExposeServiceMetadata(AxisService service) {
        Parameter exposeServiceMetadata = service.getParameter("exposeServiceMetadata");
        if(exposeServiceMetadata != null &&
           JavaUtils.isFalseExplicitly(exposeServiceMetadata.getValue())) {
           return false;
        }
        return true;
    }


, Instance #
frags: 
(startLine=228 endLine=251 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                        if (targetPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                targetPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }

                        } else {

(startLine=265 endLine=287 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                        if (effecPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                effecPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }
                        } else {

commonMethod: 
(startLine=331 endLine=349 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01217/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
    private void handleWSDL2Request(HttpServletRequest req,
                                    HttpServletResponse res,
                                    String url,
                                    AxisService axisService) throws IOException {
        if (!canExposeServiceMetadata(axisService)){
            res.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        res.setContentType("text/xml");
        String ip = extractHost(url);
        String wsdlName = req.getParameter("wsdl2");

        int ret = axisService.printWSDL2(res.getOutputStream(), ip, wsdlName);
        if (ret == 0) {
            res.sendRedirect("");
        } else if (ret == -1) {
            res.sendError(HttpServletResponse.SC_NOT_FOUND);
        }
    }


, Instance #
frags: 
(startLine=228 endLine=251 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                        if (targetPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                targetPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }

                        } else {

(startLine=265 endLine=287 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                        if (effecPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                effecPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }
                        } else {

commonMethod: 
(startLine=311 endLine=329 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01217/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
    private void handleWSDLRequest(HttpServletRequest req,
                                   HttpServletResponse res,
                                   String url,
                                   AxisService axisService) throws IOException {
        if (!canExposeServiceMetadata(axisService)){
            res.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        OutputStream out = res.getOutputStream();
        res.setContentType("text/xml");
        String ip = extractHost(url);
        String wsdlName = req.getParameter("wsdl");

        if (wsdlName != null && wsdlName.length()>0) {
            axisService.printUserWSDL(out, wsdlName, ip);
        } else {
            axisService.printWSDL(out, ip);
        }
    }


, Instance #
frags: 
(startLine=228 endLine=251 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                        if (targetPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                targetPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }

                        } else {

(startLine=265 endLine=287 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                        if (effecPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                effecPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }
                        } else {

commonMethod: 
(startLine=293 endLine=309 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01217/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
    private void handleXSDRequest(HttpServletRequest req, HttpServletResponse res,
                                  AxisService axisService) throws IOException {
        if (!canExposeServiceMetadata(axisService)){
            res.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        res.setContentType("text/xml");
        int ret = axisService.printXSD(res.getOutputStream(), req.getParameter("xsd"));
        if (ret == 0) {
            //multiple schemas are present and the user specified
            //no name - in this case we cannot possibly pump a schema
            //so redirect to the service root
            res.sendRedirect("");
        } else if (ret == -1) {
            res.sendError(HttpServletResponse.SC_NOT_FOUND);
        }
    }


, Instance #
frags: 
(startLine=228 endLine=251 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                        if (targetPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                targetPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }

                        } else {

(startLine=265 endLine=287 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                        if (effecPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                effecPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }
                        } else {

commonMethod: 
(startLine=203 endLine=291 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01217/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
    private void handlePolicyRequest(HttpServletRequest req,
                                     HttpServletResponse res,
                                     String serviceName,
                                     AxisService axisService) throws IOException, ServletException {
        if (!canExposeServiceMetadata(axisService)){
            res.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        ExternalPolicySerializer serializer = new ExternalPolicySerializer();
        serializer.setAssertionsToFilter(configContext
                .getAxisConfiguration().getLocalPolicyAssertions());

        // check whether Id is set
        String idParam = req.getParameter("id");

        if (idParam != null) {
            // Id is set

            Policy targetPolicy = findPolicy(idParam, axisService);

            if (targetPolicy != null) {
                XMLStreamWriter writer;

                try {
                    OutputStream out = res.getOutputStream();
                    writer = XMLOutputFactory.newInstance()
                            .createXMLStreamWriter(out);

                    res.setContentType("application/wspolicy+xml");
                    targetPolicy.serialize(writer);
                    writer.flush();

                } catch (XMLStreamException e) {
                    throw new ServletException(
                            "Error occured when serializing the Policy",
                            e);

                } catch (FactoryConfigurationError e) {
                    throw new ServletException(
                            "Error occured when serializing the Policy",
                            e);
                }

            } else {

                OutputStream out = res.getOutputStream();
                res.setContentType("text/html");
                String outStr = "<b>No policy found for id="
                                + idParam + "</b>";
                out.write(outStr.getBytes());
            }

        } else {

            PolicyInclude policyInclude = axisService.getPolicyInclude();
            Policy effecPolicy = policyInclude.getEffectivePolicy();

            if (effecPolicy != null) {
                XMLStreamWriter writer;

                try {
                    OutputStream out = res.getOutputStream();
                    writer = XMLOutputFactory.newInstance()
                            .createXMLStreamWriter(out);

                    res.setContentType("application/wspolicy+xml");
                    effecPolicy.serialize(writer);
                    writer.flush();

                } catch (XMLStreamException e) {
                    throw new ServletException(
                            "Error occured when serializing the Policy",
                            e);

                } catch (FactoryConfigurationError e) {
                    throw new ServletException(
                            "Error occured when serializing the Policy",
                            e);
                }
            } else {

                OutputStream out = res.getOutputStream();
                res.setContentType("text/html");
                String outStr = "<b>No effective policy for "
                                + serviceName + " service</b>";
                out.write(outStr.getBytes());
            }
        }
    }


, Instance #
frags: 
(startLine=228 endLine=251 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                        if (targetPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                targetPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }

                        } else {

(startLine=265 endLine=287 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01216/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
                        if (effecPolicy != null) {
                            XMLStreamWriter writer;

                            try {
                                OutputStream out = res.getOutputStream();
                                writer = XMLOutputFactory.newInstance()
                                        .createXMLStreamWriter(out);

                                res.setContentType("application/wspolicy+xml");
                                effecPolicy.serialize(writer);
                                writer.flush();

                            } catch (XMLStreamException e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);

                            } catch (FactoryConfigurationError e) {
                                throw new ServletException(
                                        "Error occured when serializing the Policy",
                                        e);
                            }
                        } else {

commonMethod: 
(startLine=351 endLine=365 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01217/modules/transport/http/src/org/apache/axis2/transport/http/ListingAgent.java)
    /**
     * Checks whether exposing the WSDL & WSDL elements such as schema & policy have been allowed
     *
     * @param service  The AxisService which needs to be verified
     * @throws IOException If exposing WSDL & WSDL elements has been restricted.
     * @return true - if service metadata can be exposed, false - otherwise
     */
    private boolean canExposeServiceMetadata(AxisService service) {
        Parameter exposeServiceMetadata = service.getParameter("exposeServiceMetadata");
        if(exposeServiceMetadata != null &&
           JavaUtils.isFalseExplicitly(exposeServiceMetadata.getValue())) {
           return false;
        }
        return true;
    }


, Instance #
frags: 
(startLine=1267 endLine=1286 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01229/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    private XmlSchemaComplexType createSchemaTypeForMethodPart(String localPartName) {
        XmlSchema xmlSchema = getXmlSchema(schemaTargetNameSpace);
        QName elementName =
                new QName(this.schemaTargetNameSpace, localPartName, this.schema_namespace_prefix);

        XmlSchemaComplexType complexType = getComplexTypeForElement(xmlSchema, elementName);
        if (complexType == null) {
            complexType = new XmlSchemaComplexType(xmlSchema);

            XmlSchemaElement globalElement = new XmlSchemaElement();
            globalElement.setSchemaType(complexType);
            globalElement.setName(localPartName);
            globalElement.setQName(elementName);
            xmlSchema.getItems().add(globalElement);
            xmlSchema.getElements().add(elementName, globalElement);
        }
        typeTable.addComplexSchema(localPartName, elementName);

        return complexType;
    }

(startLine=1288 endLine=1305 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01229/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
    private XmlSchemaComplexType createSchemaTypeForFault(String localPartName) {
        XmlSchema xmlSchema = getXmlSchema(schemaTargetNameSpace);
        QName elementName =
                new QName(this.schemaTargetNameSpace, localPartName, this.schema_namespace_prefix);

        XmlSchemaComplexType complexType = getComplexTypeForElement(xmlSchema, elementName);
        if (complexType == null) {
            complexType = new XmlSchemaComplexType(xmlSchema);

            XmlSchemaElement globalElement = new XmlSchemaElement();
            globalElement.setSchemaType(complexType);
            globalElement.setName(localPartName);
            globalElement.setQName(elementName);
            xmlSchema.getItems().add(globalElement);
            xmlSchema.getElements().add(elementName, globalElement);
        }
        return complexType;
    }

commonMethod: 
(startLine=1376 endLine=1383 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01230/modules/kernel/src/org/apache/axis2/description/java2wsdl/DefaultSchemaGenerator.java)
     private boolean isAnonymousTypesDisallowed() {
        boolean disallowAnonTypes = false;
        Parameter param = service.getParameter(Java2WSDLConstants.DISALLOW_ANON_TYPES_OPTION_LONG);
        if (param != null) {
            disallowAnonTypes = JavaUtils.isTrueExplicitly(param.getValue());
        }
        return disallowAnonTypes;
    }


, Instance #
frags: 
(startLine=272 endLine=380 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01232/modules/adb/src/org/apache/axis2/rpc/receivers/RPCUtil.java)
    ) throws Exception {
        QName elementQName = outMessage.getAxisMessage().getElementQName();
        String partName = outMessage.getAxisMessage().getPartName();
        if (resObject == null) {
            processNullReturns(service, envelope, partName);
        } else {
            if (resObject instanceof Object[]) {
                QName resName = new QName(elementQName.getNamespaceURI(),
                        partName,
                        elementQName.getPrefix());
                OMElement bodyChild = RPCUtil.getResponseElement(resName,
                        (Object[]) resObject,
                        service.isElementFormDefault(),
                        service.getTypeTable());
                envelope.getBody().addChild(bodyChild);
            } else {
                if (resObject.getClass().isArray()) {
                    int length = Array.getLength(resObject);
                    Object objArray[];
                    if (resObject instanceof byte[]) {
                        objArray = new Object[1];
                        objArray[0] = Base64.encode((byte[]) resObject);
                    } else {
                        objArray = new Object[length];
                        for (int i = 0; i < length; i++) {
                            objArray[i] = Array.get(resObject, i);
                        }
                    }

                    QName resName = new QName(elementQName.getNamespaceURI(),
                            partName,
                            elementQName.getPrefix());
                    OMElement bodyChild = RPCUtil.getResponseElement(resName,
                            objArray,
                            service.isElementFormDefault(),
                            service.getTypeTable());
                    envelope.getBody().addChild(bodyChild);
                } else {
                    if (SimpleTypeMapper.isCollection(resObject.getClass())) {
                        Collection collection = (Collection) resObject;
                        int size = collection.size();
                        Object values[] = new Object[size];
                        int count = 0;
                        for (Object aCollection : collection) {
                            values[count] = aCollection;
                            count++;

                        }
                        QName resName = new QName(elementQName.getNamespaceURI(),
                                partName,
                                elementQName.getPrefix());
                        OMElement bodyChild = RPCUtil.getResponseElement(resName,
                                values,
                                service.isElementFormDefault(),
                                service.getTypeTable());
                        envelope.getBody().addChild(bodyChild);
                        
					} else if (SimpleTypeMapper.isMap(resObject.getClass())) {
						OMElement resElemt = fac.createOMElement(
								partName, ns);
						List<OMElement> omList = BeanUtil.getMapElement(fac,
								method.getGenericReturnType(), (Map) resObject,
								service.getTypeTable(),
								service.isElementFormDefault());					
						Iterator<OMElement> omItr = omList.iterator();
						while (omItr.hasNext()) {
							resElemt.addChild(omItr.next());
						}						
						envelope.getBody().addChild(resElemt);

					} else if (SimpleTypeMapper.isDataHandler(resObject
							.getClass())) {
                        OMElement resElemt;
                        if (service.isElementFormDefault()) {
                            resElemt = fac.createOMElement(partName, ns);
                        } else {
                            resElemt = fac.createOMElement(partName, null);
                        }
                        OMText text = fac.createOMText(resObject, true);
                        resElemt.addChild(text);
                        envelope.getBody().addChild(resElemt);
                    } else {
                        if (service.isElementFormDefault()) {
                            RPCUtil.processObjectAsDocLitBare(fac,
                                    resObject,
                                    bodyContent,
                                    ns,
                                    method,
                                    envelope,
                                    service.isElementFormDefault(),
                                    service.getTypeTable(),
                                    partName);
                        } else {
                            RPCUtil.processObjectAsDocLitBare(fac,
                                    resObject,
                                    bodyContent,
                                    ns,
                                    method,
                                    envelope,
                                    service.isElementFormDefault(),
                                    null,
                                    partName);
                        }
                    }
                }
            }
        }
        outMessage.setEnvelope(envelope);
    }

(startLine=425 endLine=543 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01232/modules/adb/src/org/apache/axis2/rpc/receivers/RPCUtil.java)
    ) throws Exception {
        QName elementQName = outMessage.getAxisMessage().getElementQName();
        if (resObject == null) {
            QName resName;
            if (service.isElementFormDefault()) {
                resName = new QName(service.getSchemaTargetNamespace(),
                        RETURN_WRAPPER,
                        service.getSchemaTargetNamespacePrefix());
            } else {
                resName = new QName(RETURN_WRAPPER);
            }
            XMLStreamReader xr = new NullXMLStreamReader(resName);
            StreamWrapper parser = new StreamWrapper(xr);
            OMXMLParserWrapper stAXOMBuilder =
                    OMXMLBuilderFactory.createStAXOMBuilder(
                            OMAbstractFactory.getSOAP11Factory(), parser);
            ns = fac.createOMNamespace(service.getSchemaTargetNamespace(),
                    service.getSchemaTargetNamespacePrefix());
            OMElement bodyChild = fac.createOMElement(method.getName() + "Response", ns);
            bodyChild.addChild(stAXOMBuilder.getDocumentElement());
            envelope.getBody().addChild(bodyChild);
        } else {
            if (resObject instanceof Object[]) {

                QName resName = new QName(elementQName.getNamespaceURI(),
                        method.getName() + "Response",
                        elementQName.getPrefix());
                OMElement bodyChild = RPCUtil.getResponseElement(resName,
                        (Object[]) resObject,
                        service.isElementFormDefault(),
                        service.getTypeTable());
                envelope.getBody().addChild(bodyChild);
            } else {
                if (resObject.getClass().isArray()) {
                    int length = Array.getLength(resObject);
                    Object objArray[];
                    if (resObject instanceof byte[]) {
                        objArray = new Object[1];
                        objArray[0] = Base64.encode((byte[]) resObject);
                    } else {
                        objArray = new Object[length];
                        for (int i = 0; i < length; i++) {
                            objArray[i] = Array.get(resObject, i);
                        }
                    }

                    QName resName = new QName(elementQName.getNamespaceURI(),
                            method.getName() + "Response",
                            elementQName.getPrefix());
                    OMElement bodyChild = RPCUtil.getResponseElement(resName,
                            objArray,
                            service.isElementFormDefault(),
                            service.getTypeTable());
                    envelope.getBody().addChild(bodyChild);
                } else {
                    if (SimpleTypeMapper.isCollection(resObject.getClass())) {
                        Collection collection = (Collection) resObject;
                        int size = collection.size();
                        Object values[] = new Object[size];
                        int count = 0;
                        for (Object aCollection : collection) {
                            values[count] = aCollection;
                            count++;

                        }
                        QName resName = new QName(elementQName.getNamespaceURI(),
                                method.getName() + "Response",
                                elementQName.getPrefix());
                        OMElement bodyChild = RPCUtil.getResponseElement(resName,
                                values,
                                service.isElementFormDefault(),
                                service.getTypeTable());
                        envelope.getBody().addChild(bodyChild);
                    } else if (SimpleTypeMapper.isMap(resObject.getClass())){
                    	 OMElement resElemt = fac.createOMElement(method.getName() + "Response", ns);
                    	 List<OMElement> omList = BeanUtil.getMapElement(fac,method.getGenericReturnType(), (Map) resObject,service.getTypeTable(),service.isElementFormDefault());
                         OMElement returnElement;
                         if (service.isElementFormDefault()) {
                             returnElement = fac.createOMElement(RETURN_WRAPPER, ns);
                         } else {
                             returnElement = fac.createOMElement(RETURN_WRAPPER, null);
                         }
                         Iterator<OMElement> omItr = omList.iterator();
                         while(omItr.hasNext()){
                        	 returnElement.addChild(omItr.next());                        	 
                         }                         
                         resElemt.addChild(returnElement);
                         envelope.getBody().addChild(resElemt);
                    	
                    } else if (SimpleTypeMapper.isDataHandler(resObject.getClass())) {
                        OMElement resElemt = fac.createOMElement(method.getName() + "Response", ns);
                        OMText text = fac.createOMText(resObject, true);
                        OMElement returnElement;
                        if (service.isElementFormDefault()) {
                            returnElement = fac.createOMElement(RETURN_WRAPPER, ns);
                        } else {
                            returnElement = fac.createOMElement(RETURN_WRAPPER, null);
                        }
                        returnElement.addChild(text);
                        resElemt.addChild(returnElement);
                        envelope.getBody().addChild(resElemt);
                    } else {
                        if (service.isElementFormDefault()) {
                            RPCUtil.processResponse(fac, resObject, bodyContent, ns,
                                    envelope, method,
                                    service.isElementFormDefault(),
                                    service.getTypeTable());
                        } else {
                            RPCUtil.processResponse(fac, resObject, bodyContent, ns,
                                    envelope, method,
                                    service.isElementFormDefault(),
                                    service.getTypeTable());
                        }
                    }
                }
            }
        }
        outMessage.setEnvelope(envelope);
    }

commonMethod: 
(startLine=1723 endLine=1771 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01233/modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java)
	/**
	 * Gets the collection element.
	 *
	 * @param fac the fac
	 * @param type the type
	 * @param results the results
	 * @param name the name
	 * @param innerName the inner name
	 * @param elementQName the element q name
	 * @param typeTable the type table
	 * @param elementFormDefault the element form default
	 * @return the collection element
	 */
	public static OMElement getCollectionElement(OMFactory fac, Type type,
		Collection results, String name, String innerName,
		QName elementQName, TypeTable typeTable, boolean elementFormDefault) {

	    String elementName = (innerName == null) ? name : innerName;
	    Iterator<Object> itr = results.iterator();
	    List<Object> properties = new ArrayList<Object>();
	    OMNamespace ns = fac.createOMNamespace(elementQName.getNamespaceURI(),
		    elementQName.getPrefix());
	    Type valueType = Object.class;
	    if (type instanceof ParameterizedType) {
		ParameterizedType aType = (ParameterizedType) type;
		Type[] parameterArgTypes = aType.getActualTypeArguments();
		valueType = parameterArgTypes[0];
	    }

	    while (itr.hasNext()) {
		Object value = itr.next();
		if (value != null) {
		    value = getCollectionItemElement(fac, elementName, value,
			    valueType, typeTable, ns, elementFormDefault);
		    properties.add(new QName(ns.getNamespaceURI(), elementName, ns
			    .getPrefix()));
		    properties.add(value);
		}
	    }

	    XMLStreamReader pullParser = new ADBXMLStreamReaderImpl(new QName(
		    ns.getNamespaceURI(), elementQName.getLocalPart(),
		    ns.getPrefix()), properties.toArray(), null, typeTable,
		    elementFormDefault);

	    StAXOMBuilder stAXOMBuilder = new StAXOMBuilder(
		    OMAbstractFactory.getOMFactory(), new StreamWrapper(pullParser));
	    return stAXOMBuilder.getDocumentElement();
	}	


, Instance #
frags: 
(startLine=310 endLine=329 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01232/modules/adb/src/org/apache/axis2/rpc/receivers/RPCUtil.java)
                    if (SimpleTypeMapper.isCollection(resObject.getClass())) {
                        Collection collection = (Collection) resObject;
                        int size = collection.size();
                        Object values[] = new Object[size];
                        int count = 0;
                        for (Object aCollection : collection) {
                            values[count] = aCollection;
                            count++;

                        }
                        QName resName = new QName(elementQName.getNamespaceURI(),
                                partName,
                                elementQName.getPrefix());
                        OMElement bodyChild = RPCUtil.getResponseElement(resName,
                                values,
                                service.isElementFormDefault(),
                                service.getTypeTable());
                        envelope.getBody().addChild(bodyChild);
                        
					} else if (SimpleTypeMapper.isMap(resObject.getClass())) {

(startLine=480 endLine=498 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01232/modules/adb/src/org/apache/axis2/rpc/receivers/RPCUtil.java)
                    if (SimpleTypeMapper.isCollection(resObject.getClass())) {
                        Collection collection = (Collection) resObject;
                        int size = collection.size();
                        Object values[] = new Object[size];
                        int count = 0;
                        for (Object aCollection : collection) {
                            values[count] = aCollection;
                            count++;

                        }
                        QName resName = new QName(elementQName.getNamespaceURI(),
                                method.getName() + "Response",
                                elementQName.getPrefix());
                        OMElement bodyChild = RPCUtil.getResponseElement(resName,
                                values,
                                service.isElementFormDefault(),
                                service.getTypeTable());
                        envelope.getBody().addChild(bodyChild);
                    } else if (SimpleTypeMapper.isMap(resObject.getClass())){

commonMethod: 
(startLine=1723 endLine=1771 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01233/modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java)
	/**
	 * Gets the collection element.
	 *
	 * @param fac the fac
	 * @param type the type
	 * @param results the results
	 * @param name the name
	 * @param innerName the inner name
	 * @param elementQName the element q name
	 * @param typeTable the type table
	 * @param elementFormDefault the element form default
	 * @return the collection element
	 */
	public static OMElement getCollectionElement(OMFactory fac, Type type,
		Collection results, String name, String innerName,
		QName elementQName, TypeTable typeTable, boolean elementFormDefault) {

	    String elementName = (innerName == null) ? name : innerName;
	    Iterator<Object> itr = results.iterator();
	    List<Object> properties = new ArrayList<Object>();
	    OMNamespace ns = fac.createOMNamespace(elementQName.getNamespaceURI(),
		    elementQName.getPrefix());
	    Type valueType = Object.class;
	    if (type instanceof ParameterizedType) {
		ParameterizedType aType = (ParameterizedType) type;
		Type[] parameterArgTypes = aType.getActualTypeArguments();
		valueType = parameterArgTypes[0];
	    }

	    while (itr.hasNext()) {
		Object value = itr.next();
		if (value != null) {
		    value = getCollectionItemElement(fac, elementName, value,
			    valueType, typeTable, ns, elementFormDefault);
		    properties.add(new QName(ns.getNamespaceURI(), elementName, ns
			    .getPrefix()));
		    properties.add(value);
		}
	    }

	    XMLStreamReader pullParser = new ADBXMLStreamReaderImpl(new QName(
		    ns.getNamespaceURI(), elementQName.getLocalPart(),
		    ns.getPrefix()), properties.toArray(), null, typeTable,
		    elementFormDefault);

	    StAXOMBuilder stAXOMBuilder = new StAXOMBuilder(
		    OMAbstractFactory.getOMFactory(), new StreamWrapper(pullParser));
	    return stAXOMBuilder.getDocumentElement();
	}	


, Instance #
frags: 
(startLine=67 endLine=80 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01288/modules/json/src/org/apache/axis2/json/impl/utils/XmlNodeGenerator.java)
        while (iterator.hasNext()) {
            Object nextEle = iterator.next();
            if (nextEle instanceof XmlSchemaElement) {
                XmlSchemaElement innerElement = ((XmlSchemaElement) nextEle);   // todo add to xml node
                XmlSchemaType innerEleType = innerElement.getSchemaType();
                if (innerEleType == null) {
                    processSchemaTypeName(innerElement, mainXmlNode);
                } else if (innerEleType instanceof XmlSchemaComplexType) {
                    processComplexType(innerElement , mainXmlNode);
                } else if (innerEleType instanceof XmlSchemaSimpleType) {
                    processSimpleType(innerElement , mainXmlNode);
                }
            }
        }

(startLine=149 endLine=162 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01288/modules/json/src/org/apache/axis2/json/impl/utils/XmlNodeGenerator.java)
                                while (iterator.hasNext()) {
                                    Object nextEle = iterator.next();
                                    if (nextEle instanceof XmlSchemaElement) {
                                        XmlSchemaElement innerElement = ((XmlSchemaElement) nextEle);   // todo add to xml node
                                        XmlSchemaType innerEleType = innerElement.getSchemaType();
                                        if (innerEleType == null) {
                                            processSchemaTypeName(innerElement, xmlNode);
                                        } else if (innerEleType instanceof XmlSchemaComplexType) {
                                            processComplexType(innerElement , xmlNode);
                                        } else if (innerEleType instanceof XmlSchemaSimpleType) {
                                            processSimpleType(innerElement , xmlNode);
                                        }
                                    }
                                }

commonMethod: 
(startLine=113 endLine=134 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01289/modules/json/src/org/apache/axis2/json/impl/utils/XmlNodeGenerator.java)
    private void processSchemaType(XmlSchemaType xmlSchemaType , XmlNode parentNode , XmlSchema schema) {
        if (xmlSchemaType instanceof XmlSchemaComplexType) {
            XmlSchemaComplexType complexType = (XmlSchemaComplexType)xmlSchemaType;
            XmlSchemaParticle particle = complexType.getParticle();
            if (particle instanceof XmlSchemaSequence) {
                XmlSchemaSequence sequence = (XmlSchemaSequence)particle;
                XmlSchemaObjectCollection objectCollection = sequence.getItems();
                Iterator objectIterator = objectCollection.getIterator();
                while (objectIterator.hasNext()) {
                    Object obj = objectIterator.next();
                    if (obj instanceof XmlSchemaElement) {
                        processElement((XmlSchemaElement)obj , parentNode , schema);
                    }else if (obj instanceof XmlSchemaComplexType || obj instanceof  XmlSchemaSimpleType) {     // never come to this
                        XmlSchemaType schemaType = (XmlSchemaType)obj;
                        processSchemaType(schemaType , parentNode , schema);
                    }
                }
            }
        }else if (xmlSchemaType instanceof XmlSchemaSimpleType) {
            // nothing to do with simpleType
        }
    }


, Instance #
frags: 
(startLine=69 endLine=79 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01288/modules/json/src/org/apache/axis2/json/impl/utils/XmlNodeGenerator.java)
            if (nextEle instanceof XmlSchemaElement) {
                XmlSchemaElement innerElement = ((XmlSchemaElement) nextEle);   // todo add to xml node
                XmlSchemaType innerEleType = innerElement.getSchemaType();
                if (innerEleType == null) {
                    processSchemaTypeName(innerElement, mainXmlNode);
                } else if (innerEleType instanceof XmlSchemaComplexType) {
                    processComplexType(innerElement , mainXmlNode);
                } else if (innerEleType instanceof XmlSchemaSimpleType) {
                    processSimpleType(innerElement , mainXmlNode);
                }
            }

(startLine=151 endLine=161 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01288/modules/json/src/org/apache/axis2/json/impl/utils/XmlNodeGenerator.java)
                                    if (nextEle instanceof XmlSchemaElement) {
                                        XmlSchemaElement innerElement = ((XmlSchemaElement) nextEle);   // todo add to xml node
                                        XmlSchemaType innerEleType = innerElement.getSchemaType();
                                        if (innerEleType == null) {
                                            processSchemaTypeName(innerElement, xmlNode);
                                        } else if (innerEleType instanceof XmlSchemaComplexType) {
                                            processComplexType(innerElement , xmlNode);
                                        } else if (innerEleType instanceof XmlSchemaSimpleType) {
                                            processSimpleType(innerElement , xmlNode);
                                        }
                                    }

commonMethod: 
(startLine=113 endLine=134 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01289/modules/json/src/org/apache/axis2/json/impl/utils/XmlNodeGenerator.java)
    private void processSchemaType(XmlSchemaType xmlSchemaType , XmlNode parentNode , XmlSchema schema) {
        if (xmlSchemaType instanceof XmlSchemaComplexType) {
            XmlSchemaComplexType complexType = (XmlSchemaComplexType)xmlSchemaType;
            XmlSchemaParticle particle = complexType.getParticle();
            if (particle instanceof XmlSchemaSequence) {
                XmlSchemaSequence sequence = (XmlSchemaSequence)particle;
                XmlSchemaObjectCollection objectCollection = sequence.getItems();
                Iterator objectIterator = objectCollection.getIterator();
                while (objectIterator.hasNext()) {
                    Object obj = objectIterator.next();
                    if (obj instanceof XmlSchemaElement) {
                        processElement((XmlSchemaElement)obj , parentNode , schema);
                    }else if (obj instanceof XmlSchemaComplexType || obj instanceof  XmlSchemaSimpleType) {     // never come to this
                        XmlSchemaType schemaType = (XmlSchemaType)obj;
                        processSchemaType(schemaType , parentNode , schema);
                    }
                }
            }
        }else if (xmlSchemaType instanceof XmlSchemaSimpleType) {
            // nothing to do with simpleType
        }
    }


, Instance #
frags: 
(startLine=84 endLine=132 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01366/modules/jaxws-integration/test/org/apache/axis2/jaxws/dispatch/SOAPMessageDispatchTests.java)
    public void testSOAPMessageAsyncCallbackMessageMode() throws Exception {

        String basedir = new File(System.getProperty("basedir",".")).getAbsolutePath();
        String messageResource = new File(basedir, this.messageResource).getAbsolutePath();

        TestLogger.logger.debug("---------------------------------------");
        TestLogger.logger.debug("test: " + getName());
        //Initialize the JAX-WS client artifacts
        Service svc = Service.create(serviceName);
        svc.addPort(portName, null, url);
        Dispatch<SOAPMessage> dispatch = svc.createDispatch(portName,
                                                            SOAPMessage.class, Service.Mode.MESSAGE);

        //Create SOAPMessage Object no attachments here.
        FileInputStream inputStream = new FileInputStream(messageResource);
        MessageFactory factory = MessageFactory.newInstance();
        SOAPMessage msgObject = factory.createMessage(null, inputStream);

        AsyncCallback<SOAPMessage> ac = new AsyncCallback<SOAPMessage>();
        //Invoke the Dispatch
        TestLogger.logger.debug(">> Invoking sync Dispatch");
        Future<?> monitor = dispatch.invokeAsync(msgObject, ac);

        assertNotNull("dispatch invokeAsync returned null Future<?>", monitor);
        while (!monitor.isDone()) {
            TestLogger.logger.debug(">> Async invocation still not complete");
            Thread.sleep(1000);
        }

        SOAPMessage response = ac.getValue();
        assertNotNull("dispatch invoke returned null", response);
        response.writeTo(System.out);
        
        // Invoke a second time to verify
        ac = new AsyncCallback<SOAPMessage>();
        //Invoke the Dispatch
        TestLogger.logger.debug(">> Invoking sync Dispatch");
        monitor = dispatch.invokeAsync(msgObject, ac);

        assertNotNull("dispatch invokeAsync returned null Future<?>", monitor);
        while (!monitor.isDone()) {
            TestLogger.logger.debug(">> Async invocation still not complete");
            Thread.sleep(1000);
        }

        response = ac.getValue();
        assertNotNull("dispatch invoke returned null", response);
        response.writeTo(System.out);
    }

(startLine=134 endLine=181 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01366/modules/jaxws-integration/test/org/apache/axis2/jaxws/dispatch/SOAPMessageDispatchTests.java)
    public void testSOAPMessageAsyncPollingMessageMode() throws Exception {

        String basedir = new File(System.getProperty("basedir",".")).getAbsolutePath();
        String messageResource = new File(basedir, this.messageResource).getAbsolutePath();

        TestLogger.logger.debug("---------------------------------------");
        TestLogger.logger.debug("test: " + getName());
        //Initialize the JAX-WS client artifacts
        Service svc = Service.create(serviceName);
        svc.addPort(portName, null, url);
        Dispatch<SOAPMessage> dispatch = svc.createDispatch(portName,
                                                            SOAPMessage.class, Service.Mode.MESSAGE);

        //Create SOAPMessage Object no attachments here.
        FileInputStream inputStream = new FileInputStream(messageResource);
        MessageFactory factory = MessageFactory.newInstance();
        SOAPMessage msgObject = factory.createMessage(null, inputStream);

        //Invoke the Dispatch
        TestLogger.logger.debug(">> Invoking sync Dispatch");
        Response<SOAPMessage> asyncResponse = dispatch.invokeAsync(msgObject);

        assertNotNull("dispatch invokeAsync returned null Response", asyncResponse);
        while (!asyncResponse.isDone()) {
            TestLogger.logger.debug(">> Async invocation still not complete");
            Thread.sleep(1000);
        }

        SOAPMessage response = asyncResponse.get();
        assertNotNull("dispatch invoke returned null", response);
        response.writeTo(System.out);
        
        
        // Invoke a second time to verify
        // Invoke the Dispatch
        TestLogger.logger.debug(">> Invoking sync Dispatch");
        asyncResponse = dispatch.invokeAsync(msgObject);

        assertNotNull("dispatch invokeAsync returned null Response", asyncResponse);
        while (!asyncResponse.isDone()) {
            TestLogger.logger.debug(">> Async invocation still not complete");
            Thread.sleep(1000);
        }

        response = asyncResponse.get();
        assertNotNull("dispatch invoke returned null", response);
        response.writeTo(System.out);
    }

commonMethod: 
(startLine=51 endLine=53 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01367/modules/jaxws-integration/test/org/apache/axis2/jaxws/dispatch/SOAPMessageDispatchTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("ProxyDocLitWrappedService.DocLitWrappedProxyImplPort");
    }


, Instance #
frags: 
(startLine=57 endLine=94 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/MtomSampleByteArrayTests.java)
    public void _testAttachmentByteArrayAPI11() throws Exception {
        TestLogger.logger.debug("----------------------------------");
        TestLogger.logger.debug("test: " + getName());
        
        String imageResourceDir = IMAGE_DIR;
        
        Service svc = Service.create(QNAME_SERVICE);
        svc.addPort(QNAME_PORT, SOAPBinding.SOAP11HTTP_BINDING, URL_ENDPOINT);
        
        JAXBContext jbc = JAXBContext.newInstance("org.apache.axis2.jaxws.sample.mtom1");
        Dispatch<Object> dispatch = svc.createDispatch(QNAME_PORT, jbc, Service.Mode.PAYLOAD);
        
        SOAPBinding binding = (SOAPBinding)dispatch.getBinding();
        binding.setMTOMEnabled(true);
        
        Image image = ImageIO.read (new File(imageResourceDir+File.separator+"test.jpg"));
        ImageDepot imageDepot = new ObjectFactory().createImageDepot();
        imageDepot.setImageData(image);
        setText(imageDepot);
        
        //Create a request bean with imagedepot bean as value
        ObjectFactory factory = new ObjectFactory();
        Invoke request = factory.createInvoke();
        request.setInput(imageDepot);
        
        SendImageResponse response = (SendImageResponse) dispatch.invoke(request);
        
        assertNotNull(response);
        assertNotNull(response.getOutput().getImageData());
        checkText(response.getOutput());
        
        // Repeat to verify behavior
        response = (SendImageResponse) dispatch.invoke(request);
        
        assertNotNull(response);
        assertNotNull(response.getOutput().getImageData());
        checkText(response.getOutput());
    }

(startLine=101 endLine=138 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/MtomSampleByteArrayTests.java)
    public void testAttachmentByteArrayAPI11_ClientSendsNonOptimizedMTOM() throws Exception {
        TestLogger.logger.debug("----------------------------------");
        TestLogger.logger.debug("test: " + getName());
        
        String imageResourceDir = IMAGE_DIR;
        
        Service svc = Service.create(QNAME_SERVICE);
        svc.addPort(QNAME_PORT, SOAPBinding.SOAP11HTTP_BINDING, URL_ENDPOINT);
        
        JAXBContext jbc = JAXBContext.newInstance("org.apache.axis2.jaxws.sample.mtom1");
        Dispatch<Object> dispatch = svc.createDispatch(QNAME_PORT, jbc, Service.Mode.PAYLOAD);
        
        SOAPBinding binding = (SOAPBinding)dispatch.getBinding();
        binding.setMTOMEnabled(false);  // Disabling MTOM optimization on client, but server will respond with optimized MTOM
        
        Image image = ImageIO.read (new File(imageResourceDir+File.separator+"test.jpg"));
        ImageDepot imageDepot = new ObjectFactory().createImageDepot();
        imageDepot.setImageData(image);
        setText(imageDepot);
        
        //Create a request bean with imagedepot bean as value
        ObjectFactory factory = new ObjectFactory();
        Invoke request = factory.createInvoke();
        request.setInput(imageDepot);
        
        SendImageResponse response = (SendImageResponse) dispatch.invoke(request);
        
        assertNotNull(response);
        assertNotNull(response.getOutput().getImageData());
        checkText(response.getOutput());
        
        // Repeat to verify behavior
        response = (SendImageResponse) dispatch.invoke(request);
        
        assertNotNull(response);
        assertNotNull(response.getOutput().getImageData());
        checkText(response.getOutput());
    }

(startLine=144 endLine=180 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/MtomSampleByteArrayTests.java)
    public void testAttachmentByteArrayProperty11() throws Exception {
        
        TestLogger.logger.debug("----------------------------------");
        TestLogger.logger.debug("test: " + getName());
        
        String imageResourceDir = IMAGE_DIR;
        
        Service svc = Service.create(QNAME_SERVICE);
        svc.addPort(QNAME_PORT, SOAPBinding.SOAP11HTTP_MTOM_BINDING, URL_ENDPOINT);
        
        JAXBContext jbc = JAXBContext.newInstance("org.apache.axis2.jaxws.sample.mtom1");
        Dispatch<Object> dispatch = svc.createDispatch(QNAME_PORT, jbc, Service.Mode.PAYLOAD);
        
        Image image = ImageIO.read (new File(imageResourceDir+File.separator+"test.jpg"));
        ImageDepot imageDepot = new ObjectFactory().createImageDepot();
        imageDepot.setImageData(image);
        setText(imageDepot);
        
        //Create a request bean with imagedepot bean as value
        ObjectFactory factory = new ObjectFactory();
        Invoke request = factory.createInvoke();
        request.setInput(imageDepot);
        
        SendImageResponse response = (SendImageResponse) dispatch.invoke(request);
        
        assertNotNull(response);
        assertNotNull(response.getOutput().getImageData());
        checkText(response.getOutput());
        
        // Repeat to verify behavior
        response = (SendImageResponse) dispatch.invoke(request);
        
        assertNotNull(response);
        assertNotNull(response.getOutput().getImageData());
        checkText(response.getOutput());
        
    }

commonMethod: 
(startLine=54 endLine=56 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01369/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/MtomSampleByteArrayTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("SendImageService.sendImagePort");
    }


, Instance #
frags: 
(startLine=83 endLine=213 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/HeadersHandlerTests.java)
    public void testHeadersHandler() throws Exception {
        TestLogger.logger.debug("----------------------------------");
        TestLogger.logger.debug("test: " + getName());

        HeadersHandlerService service = new HeadersHandlerService();
        HeadersHandlerPortType proxy = service.getHeadersHandlerPort();
        BindingProvider p = (BindingProvider) proxy;
        Map<String, Object> requestCtx = p.getRequestContext();
        
        requestCtx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
        
        /*
         * add several headers by way of HeadersAdapter property
         */
        String acoh1, acoh2, acoh3, acoh4, acoh5, acoh6;
        SOAPFactory sf = SOAPFactory.newInstance();
        try {
            Map<QName, List<String>> requestHeaders = new HashMap<QName, List<String>>();
            
            // QName used here should match the key for the list set on the requestCtx
            acoh1 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH1_HEADER_QNAME, TestHeaders.CONTENT_SMALL1);
            
            // QName used here should match the key for the list set on the requestCtx
            acoh2 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH1_HEADER_QNAME, TestHeaders.CONTENT_SMALL2);
            
            // QName used here should match the key for the list set on the requestCtx
            acoh3 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH2_HEADER_QNAME, TestHeaders.CONTENT_SMALL3);
            
            // QName used here should match the key for the list set on the requestCtx
            acoh4 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH2_HEADER_QNAME, TestHeaders.CONTENT_SMALL4);
            
            // create additional header strings that will need to be checked:
            acoh5 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH3_HEADER_QNAME, TestHeaders.CONTENT_LARGE);
            acoh6 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH4_HEADER_QNAME, TestHeaders.CONTENT_SMALL4);
            
            List<String> list1 = new ArrayList<String>();
            list1.add(acoh1);
            list1.add(acoh2);
            
            List<String> list2 = new ArrayList<String>();
            list2.add(acoh3);
            list2.add(acoh4);
            
            requestHeaders.put(TestHeaders.ACOH1_HEADER_QNAME, list1);
            requestHeaders.put(TestHeaders.ACOH2_HEADER_QNAME, list2);
            requestCtx.put(Constants.JAXWS_OUTBOUND_SOAP_HEADERS, requestHeaders);
        } catch (Throwable e) {
            fail(e.getMessage());
            return;
        }
        
        // some handlers decrement the value, so we can confirm SOAP body manipulation does not corrupt the headers
        int numOfHandlerHitsInFlow = 3;
        
        int intParam1 = 10;
        int intParam2 = 10;
        int total = proxy.headersHandler(intParam1, intParam2);
        
        assertEquals("Return value should be " + (intParam1 + intParam2 - numOfHandlerHitsInFlow) + " but was " + total ,
                     (intParam1 + intParam2 - numOfHandlerHitsInFlow),
                     total);
        TestLogger.logger.debug("Total (after handler manipulation) = " + total);
        
        /*
         * I tried to give enough info below in the expected_calls list so you can tell what's
         * being tested without having to look at handler code.  All header manipulation is
         * done by SOAPHeadersAdapter.
         * 
         * TODO: I would very much like to have done some other means of
         * header manipulation, but the Axis2 SAAJ module is lacking necessary implementation
         * to do this with any reliability.
         */
        
        String log = readLogFile();
        String expected_calls =
                // client outbound
                  "HeadersClientLogicalHandler HANDLE_MESSAGE_OUTBOUND\n"
                + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh1+"\n"
                + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh2+"\n"
                + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh3+"\n"
                + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh4+"\n"
                + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh1+"\n"
                + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh3+"\n"
                + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh4+"\n"   // message manipulated after this action
                + "HeadersClientProtocolHandler HANDLE_MESSAGE_OUTBOUND\n"
                + "HeadersClientProtocolHandler CHECKED_HEADER "+acoh2+"\n"                   
                + "HeadersClientProtocolHandler ADDED_HEADER "+acoh5+"\n"
                + "HeadersClientProtocolHandler2 HANDLE_MESSAGE_OUTBOUND\n"
                + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh2+"\n"
                + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh5+"\n"
                + "HeadersClientProtocolHandler GET_HEADERS\n"
                + "HeadersClientProtocolHandler2 GET_HEADERS\n"
                // server inbound
                + "HeadersServerProtocolHandler GET_HEADERS\n"
                + "HeadersServerProtocolHandler HANDLE_MESSAGE_INBOUND\n"
                + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh2+"\n"
                + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh5+"\n"
                + "HeadersServerProtocolHandler REMOVED_HEADER "+acoh2+"\n"
                + "HeadersServerProtocolHandler ADDED_HEADER "+acoh6+"\n"
                + "HeadersServerLogicalHandler HANDLE_MESSAGE_INBOUND\n"
                + "HeadersServerLogicalHandler CHECKED_HEADER "+acoh5+"\n"
                + "HeadersServerLogicalHandler CHECKED_HEADER "+acoh6+"\n"
                + "HeadersServerLogicalHandler REMOVED_HEADER "+acoh5+"\n"   // message manipulated after this action
                + "HeadersServerLogicalHandler REMOVED_HEADER "+acoh6+"\n"
                // server outbound
                + "HeadersServerLogicalHandler HANDLE_MESSAGE_OUTBOUND\n"
                + "HeadersServerLogicalHandler ADDED_HEADER "+acoh1+"\n"   // message manipulated after this action
                + "HeadersServerProtocolHandler HANDLE_MESSAGE_OUTBOUND\n"
                + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh1+"\n"
                + "HeadersServerProtocolHandler REMOVED_HEADER "+acoh1+"\n"
                + "HeadersServerProtocolHandler ADDED_HEADER "+acoh5+"\n"
                + "HeadersServerLogicalHandler CLOSE\n"
                + "HeadersServerProtocolHandler CLOSE\n"
                // client inbound
                + "HeadersClientProtocolHandler2 HANDLE_MESSAGE_INBOUND\n"
                + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh5+"\n"
                + "HeadersClientProtocolHandler2 ADDED_HEADER "+acoh3+"\n"
                + "HeadersClientProtocolHandler HANDLE_MESSAGE_INBOUND\n"
                + "HeadersClientProtocolHandler CHECKED_HEADER "+acoh5+"\n"
                + "HeadersClientProtocolHandler CHECKED_HEADER "+acoh3+"\n"
                + "HeadersClientProtocolHandler REMOVED_HEADER "+acoh5+"\n"
                + "HeadersClientProtocolHandler ADDED_HEADER "+acoh4+"\n"
                + "HeadersClientLogicalHandler HANDLE_MESSAGE_INBOUND\n"
                + "HeadersClientProtocolHandler2 CLOSE\n"
                + "HeadersClientProtocolHandler CLOSE\n"
                + "HeadersClientLogicalHandler CLOSE\n";
        
        assertEquals(expected_calls, log);
            
        TestLogger.logger.debug("----------------------------------");
    }

(startLine=215 endLine=351 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/HeadersHandlerTests.java)
    public void testHeadersHandlerAsyncCallback() throws Exception {
        TestLogger.logger.debug("----------------------------------");
        TestLogger.logger.debug("test: " + getName());

        HeadersHandlerService service = new HeadersHandlerService();
        HeadersHandlerPortType proxy = service.getHeadersHandlerPort();
        BindingProvider p = (BindingProvider) proxy;
        Map<String, Object> requestCtx = p.getRequestContext();
        
        requestCtx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
        
        /*
         * add several headers by way of HeadersAdapter property
         */
        String acoh1, acoh2, acoh3, acoh4, acoh5, acoh6;
        SOAPFactory sf = SOAPFactory.newInstance();
        
        Map<QName, List<String>> requestHeaders = new HashMap<QName, List<String>>();
        
        // QName used here should match the key for the list set on the requestCtx
        acoh1 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH1_HEADER_QNAME, TestHeaders.CONTENT_SMALL1);
        
        // QName used here should match the key for the list set on the requestCtx
        acoh2 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH1_HEADER_QNAME, TestHeaders.CONTENT_SMALL2);
        
        // QName used here should match the key for the list set on the requestCtx
        acoh3 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH2_HEADER_QNAME, TestHeaders.CONTENT_SMALL3);
        
        // QName used here should match the key for the list set on the requestCtx
        acoh4 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH2_HEADER_QNAME, TestHeaders.CONTENT_SMALL4);
        
        // create additional header strings that will need to be checked:
        acoh5 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH3_HEADER_QNAME, TestHeaders.CONTENT_LARGE);
        acoh6 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH4_HEADER_QNAME, TestHeaders.CONTENT_SMALL4);
        
        List<String> list1 = new ArrayList<String>();
        list1.add(acoh1);
        list1.add(acoh2);
        
        List<String> list2 = new ArrayList<String>();
        list2.add(acoh3);
        list2.add(acoh4);
        
        requestHeaders.put(TestHeaders.ACOH1_HEADER_QNAME, list1);
        requestHeaders.put(TestHeaders.ACOH2_HEADER_QNAME, list2);
        requestCtx.put(Constants.JAXWS_OUTBOUND_SOAP_HEADERS, requestHeaders);
        
        // some handlers decrement the value, so we can confirm SOAP body manipulation does not corrupt the headers
        int numOfHandlerHitsInFlow = 3;
        
        int intParam1 = 10;
        int intParam2 = 10;
        
        HeadersHandlerAsyncCallback callback = new HeadersHandlerAsyncCallback();
        Future<?> future = proxy.headersHandlerAsync(intParam1, intParam2, callback);

        while (!future.isDone()) {
            Thread.sleep(1000);
            TestLogger.logger.debug("Async invocation incomplete");
        }

        int total = callback.getResponseValue();
        
        
        assertEquals("Return value should be " + (intParam1 + intParam2 - numOfHandlerHitsInFlow) + " but was " + total ,
                     (intParam1 + intParam2 - numOfHandlerHitsInFlow),
                     total);
        TestLogger.logger.debug("Total (after handler manipulation) = " + total);
        
        /*
         * I tried to give enough info below in the expected_calls list so you can tell what's
         * being tested without having to look at handler code.  All header manipulation is
         * done by SOAPHeadersAdapter.
         * 
         * TODO: I would very much like to have done some other means of
         * header manipulation, but the Axis2 SAAJ module is lacking necessary implementation
         * to do this with any reliability.
         */
        
        String log = readLogFile();
        String expected_calls =
                // client outbound
                  "HeadersClientLogicalHandler HANDLE_MESSAGE_OUTBOUND\n"
                + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh1+"\n"
                + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh2+"\n"
                + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh3+"\n"
                + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh4+"\n"
                + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh1+"\n"
                + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh3+"\n"
                + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh4+"\n"   // message manipulated after this action
                + "HeadersClientProtocolHandler HANDLE_MESSAGE_OUTBOUND\n"
                + "HeadersClientProtocolHandler CHECKED_HEADER "+acoh2+"\n"                   
                + "HeadersClientProtocolHandler ADDED_HEADER "+acoh5+"\n"
                + "HeadersClientProtocolHandler2 HANDLE_MESSAGE_OUTBOUND\n"
                + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh2+"\n"
                + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh5+"\n"
                + "HeadersClientProtocolHandler GET_HEADERS\n"
                + "HeadersClientProtocolHandler2 GET_HEADERS\n"
                // server inbound
                + "HeadersServerProtocolHandler GET_HEADERS\n"
                + "HeadersServerProtocolHandler HANDLE_MESSAGE_INBOUND\n"
                + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh2+"\n"
                + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh5+"\n"
                + "HeadersServerProtocolHandler REMOVED_HEADER "+acoh2+"\n"
                + "HeadersServerProtocolHandler ADDED_HEADER "+acoh6+"\n"
                + "HeadersServerLogicalHandler HANDLE_MESSAGE_INBOUND\n"
                + "HeadersServerLogicalHandler CHECKED_HEADER "+acoh5+"\n"
                + "HeadersServerLogicalHandler CHECKED_HEADER "+acoh6+"\n"
                + "HeadersServerLogicalHandler REMOVED_HEADER "+acoh5+"\n"   // message manipulated after this action
                + "HeadersServerLogicalHandler REMOVED_HEADER "+acoh6+"\n"
                // server outbound
                + "HeadersServerLogicalHandler HANDLE_MESSAGE_OUTBOUND\n"
                + "HeadersServerLogicalHandler ADDED_HEADER "+acoh1+"\n"   // message manipulated after this action
                + "HeadersServerProtocolHandler HANDLE_MESSAGE_OUTBOUND\n"
                + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh1+"\n"
                + "HeadersServerProtocolHandler REMOVED_HEADER "+acoh1+"\n"
                + "HeadersServerProtocolHandler ADDED_HEADER "+acoh5+"\n"
                + "HeadersServerLogicalHandler CLOSE\n"
                + "HeadersServerProtocolHandler CLOSE\n"
                // client inbound
                + "HeadersClientProtocolHandler2 HANDLE_MESSAGE_INBOUND\n"
                + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh5+"\n"
                + "HeadersClientProtocolHandler2 ADDED_HEADER "+acoh3+"\n"
                + "HeadersClientProtocolHandler HANDLE_MESSAGE_INBOUND\n"
                + "HeadersClientProtocolHandler CHECKED_HEADER "+acoh5+"\n"
                + "HeadersClientProtocolHandler CHECKED_HEADER "+acoh3+"\n"
                + "HeadersClientProtocolHandler REMOVED_HEADER "+acoh5+"\n"
                + "HeadersClientProtocolHandler ADDED_HEADER "+acoh4+"\n"
                + "HeadersClientLogicalHandler HANDLE_MESSAGE_INBOUND\n"
                + "HeadersClientProtocolHandler2 CLOSE\n"
                + "HeadersClientProtocolHandler CLOSE\n"
                + "HeadersClientLogicalHandler CLOSE\n";
        
        assertEquals(expected_calls, log);
            
        TestLogger.logger.debug("----------------------------------");
    }

(startLine=353 endLine=480 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/HeadersHandlerTests.java)
    public void testHeadersHandlerServerInboundFault() {
        TestLogger.logger.debug("----------------------------------");
        TestLogger.logger.debug("test: " + getName());

        HeadersHandlerService service = new HeadersHandlerService();
        HeadersHandlerPortType proxy = service.getHeadersHandlerPort();
        BindingProvider p = (BindingProvider) proxy;
        Map<String, Object> requestCtx = p.getRequestContext();

        requestCtx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);

        /*
         * add several headers by way of HeadersAdapter property
         */
        String acoh1, acoh2, acoh3, acoh4, acoh5, acoh6;
        SOAPFactory sf;
        try {
            sf = SOAPFactory.newInstance();
        } catch (Exception e) {
            e.printStackTrace();
            fail(e.getMessage());
            return;
        }

        Map<QName, List<String>> requestHeaders = new HashMap<QName, List<String>>();

        // QName used here should match the key for the list set on the requestCtx
        acoh1 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH1_HEADER_QNAME, TestHeaders.CONTENT_SMALL1);

        // QName used here should match the key for the list set on the requestCtx
        acoh2 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH1_HEADER_QNAME, TestHeaders.CONTENT_SMALL2);

        // QName used here should match the key for the list set on the requestCtx
        acoh3 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH2_HEADER_QNAME, TestHeaders.CONTENT_SMALL3);

        // QName used here should match the key for the list set on the requestCtx
        acoh4 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH2_HEADER_QNAME, TestHeaders.CONTENT_SMALL4);

        // create additional header strings that will need to be checked:
        acoh5 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH3_HEADER_QNAME, TestHeaders.CONTENT_LARGE);
        acoh6 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH4_HEADER_QNAME, TestHeaders.CONTENT_SMALL4);

        List<String> list1 = new ArrayList<String>();
        list1.add(acoh1);
        list1.add(acoh2);

        List<String> list2 = new ArrayList<String>();
        list2.add(acoh3);
        list2.add(acoh4);

        requestHeaders.put(TestHeaders.ACOH1_HEADER_QNAME, list1);
        requestHeaders.put(TestHeaders.ACOH2_HEADER_QNAME, list2);
        requestCtx.put(Constants.JAXWS_OUTBOUND_SOAP_HEADERS, requestHeaders);

        // some handlers decrement the value, so we can confirm SOAP body manipulation does not corrupt the headers
        int numOfHandlerHitsInFlow = 3;

        int intParam1 = 10;
        int intParam2 = 66;
            
        try {
            int total = proxy.headersHandler(intParam1, intParam2);
            fail("headersHandler should have caused an exception, but did not.");
            
            /*
             * I tried to give enough info below in the expected_calls list so you can tell what's
             * being tested without having to look at handler code.  All header manipulation is
             * done by SOAPHeadersAdapter.
             * 
             * TODO: I would very much like to have done some other means of
             * header manipulation, but the Axis2 SAAJ module is lacking necessary implementation
             * to do this with any reliability.
             */
            
        } catch (Exception e) {
            
            String log = readLogFile();
            String expected_calls =
                    // client outbound
                      "HeadersClientLogicalHandler HANDLE_MESSAGE_OUTBOUND\n"
                    + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh1+"\n"
                    + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh2+"\n"
                    + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh3+"\n"
                    + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh4+"\n"
                    + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh1+"\n"
                    + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh3+"\n"
                    + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh4+"\n"   // message manipulated after this action
                    + "HeadersClientProtocolHandler HANDLE_MESSAGE_OUTBOUND\n"
                    + "HeadersClientProtocolHandler CHECKED_HEADER "+acoh2+"\n"                   
                    + "HeadersClientProtocolHandler ADDED_HEADER "+acoh5+"\n"
                    + "HeadersClientProtocolHandler2 HANDLE_MESSAGE_OUTBOUND\n"
                    + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh2+"\n"
                    + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh5+"\n"
                    + "HeadersClientProtocolHandler GET_HEADERS\n"
                    + "HeadersClientProtocolHandler2 GET_HEADERS\n"
                    // server inbound
                    + "HeadersServerProtocolHandler GET_HEADERS\n"
                    + "HeadersServerProtocolHandler HANDLE_MESSAGE_INBOUND\n"
                    + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh2+"\n"
                    + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh5+"\n"
                    + "HeadersServerProtocolHandler REMOVED_HEADER "+acoh2+"\n"
                    + "HeadersServerProtocolHandler ADDED_HEADER "+acoh6+"\n"
                    + "HeadersServerLogicalHandler HANDLE_MESSAGE_INBOUND\n"
                    + "HeadersServerLogicalHandler CHECKED_HEADER "+acoh5+"\n"
                    + "HeadersServerLogicalHandler CHECKED_HEADER "+acoh6+"\n"
                    + "HeadersServerLogicalHandler REMOVED_HEADER "+acoh5+"\n"   // message manipulated after this action
                    + "HeadersServerLogicalHandler REMOVED_HEADER "+acoh6+"\n"   // throws protocol exception
                    // server outbound
                    + "HeadersServerProtocolHandler HANDLE_FAULT_OUTBOUND\n"
                    + "HeadersServerProtocolHandler ADDED_HEADER "+acoh5+"\n"
                    + "HeadersServerLogicalHandler CLOSE\n"
                    + "HeadersServerProtocolHandler CLOSE\n"
                    // client inbound
                    + "HeadersClientProtocolHandler2 HANDLE_FAULT_INBOUND\n"
                    + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh5+"\n"
                    + "HeadersClientProtocolHandler2 REMOVED_HEADER "+acoh5+"\n"
                    + "HeadersClientProtocolHandler HANDLE_FAULT_INBOUND\n"
                    + "HeadersClientLogicalHandler HANDLE_FAULT_INBOUND\n"   // getPayload called, just to exercise underlying code
                    + "HeadersClientProtocolHandler2 CLOSE\n"
                    + "HeadersClientProtocolHandler CLOSE\n"
                    + "HeadersClientLogicalHandler CLOSE\n";
            
            assertEquals(expected_calls, log);
            assertEquals("I don't like 66", e.getMessage());
            
        }
        TestLogger.logger.debug("----------------------------------");
    }

(startLine=504 endLine=637 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/HeadersHandlerTests.java)
    public void _testHeadersHandlerServerInboundFlowReversal() {
        TestLogger.logger.debug("----------------------------------");
        TestLogger.logger.debug("test: " + getName());

        HeadersHandlerService service = new HeadersHandlerService();
        HeadersHandlerPortType proxy = service.getHeadersHandlerPort();
        BindingProvider p = (BindingProvider) proxy;
        Map<String, Object> requestCtx = p.getRequestContext();

        requestCtx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);

        /*
         * add several headers by way of HeadersAdapter property
         */
        String acoh1, acoh2, acoh3, acoh4, acoh5, acoh6;
        SOAPFactory sf;
        try {
            sf = SOAPFactory.newInstance();
        } catch (Exception e) {
            e.printStackTrace();
            fail(e.getMessage());
            return;
        }

        Map<QName, List<String>> requestHeaders = new HashMap<QName, List<String>>();

        // QName used here should match the key for the list set on the requestCtx
        acoh1 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH1_HEADER_QNAME, TestHeaders.CONTENT_SMALL1);

        // QName used here should match the key for the list set on the requestCtx
        acoh2 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH1_HEADER_QNAME, TestHeaders.CONTENT_SMALL2);

        // QName used here should match the key for the list set on the requestCtx
        acoh3 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH2_HEADER_QNAME, TestHeaders.CONTENT_SMALL3);

        // QName used here should match the key for the list set on the requestCtx
        acoh4 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH2_HEADER_QNAME, TestHeaders.CONTENT_SMALL4);

        // create additional header strings that will need to be checked:
        acoh5 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH3_HEADER_QNAME, TestHeaders.CONTENT_LARGE);
        acoh6 = TestHeaders.createHeaderXMLString(TestHeaders.ACOH4_HEADER_QNAME, TestHeaders.CONTENT_SMALL4);

        List<String> list1 = new ArrayList<String>();
        list1.add(acoh1);
        list1.add(acoh2);

        List<String> list2 = new ArrayList<String>();
        list2.add(acoh3);
        list2.add(acoh4);

        requestHeaders.put(TestHeaders.ACOH1_HEADER_QNAME, list1);
        requestHeaders.put(TestHeaders.ACOH2_HEADER_QNAME, list2);
        requestCtx.put(Constants.JAXWS_OUTBOUND_SOAP_HEADERS, requestHeaders);

        int intParam1 = 10;
        int intParam2 = 33;
            
        try {
            int total = proxy.headersHandler(intParam1, intParam2);
        } catch (Exception e) {
            /*
             * I tried to give enough info below in the expected_calls list so you can tell what's
             * being tested without having to look at handler code.  All header manipulation is
             * done by SOAPHeadersAdapter.
             * 
             * TODO: I would very much like to have done some other means of
             * header manipulation, but the Axis2 SAAJ module is lacking necessary implementation
             * to do this with any reliability.
             */
            
            
            String log = readLogFile();
            String expected_calls =
                    // client outbound
                      "HeadersClientLogicalHandler HANDLE_MESSAGE_OUTBOUND\n"
                    + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh1+"\n"
                    + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh2+"\n"
                    + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh3+"\n"
                    + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh4+"\n"
                    + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh1+"\n"
                    + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh3+"\n"
                    + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh4+"\n"   // message manipulated after this action
                    + "HeadersClientProtocolHandler HANDLE_MESSAGE_OUTBOUND\n"
                    + "HeadersClientProtocolHandler CHECKED_HEADER "+acoh2+"\n"                   
                    + "HeadersClientProtocolHandler ADDED_HEADER "+acoh5+"\n"
                    + "HeadersClientProtocolHandler2 HANDLE_MESSAGE_OUTBOUND\n"
                    + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh2+"\n"
                    + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh5+"\n"
                    + "HeadersClientProtocolHandler GET_HEADERS\n"
                    + "HeadersClientProtocolHandler2 GET_HEADERS\n"
                    // server inbound
                    + "HeadersServerProtocolHandler GET_HEADERS\n"
                    + "HeadersServerProtocolHandler HANDLE_MESSAGE_INBOUND\n"
                    + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh2+"\n"
                    + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh5+"\n"
                    + "HeadersServerProtocolHandler REMOVED_HEADER "+acoh2+"\n"
                    + "HeadersServerProtocolHandler ADDED_HEADER "+acoh6+"\n"
                    + "HeadersServerLogicalHandler HANDLE_MESSAGE_INBOUND\n"
                    + "HeadersServerLogicalHandler CHECKED_HEADER "+acoh5+"\n"
                    + "HeadersServerLogicalHandler CHECKED_HEADER "+acoh6+"\n"
                    + "HeadersServerLogicalHandler REMOVED_HEADER "+acoh5+"\n"   // message manipulated after this action
                    + "HeadersServerLogicalHandler REMOVED_HEADER "+acoh6+"\n"   // returns false
                    // server outbound
                    + "HeadersServerProtocolHandler HANDLE_MESSAGE_OUTBOUND\n"
                    + "HeadersServerProtocolHandler ADDED_HEADER "+acoh1+"\n"
                    + "HeadersServerProtocolHandler CHECKED_HEADER "+acoh1+"\n"
                    + "HeadersServerProtocolHandler REMOVED_HEADER "+acoh1+"\n"
                    + "HeadersServerProtocolHandler ADDED_HEADER "+acoh5+"\n"
                    + "HeadersServerLogicalHandler CLOSE\n"
                    + "HeadersServerProtocolHandler CLOSE\n"
                    // client inbound
                    + "HeadersClientProtocolHandler2 HANDLE_MESSAGE_INBOUND\n"
                    + "HeadersClientProtocolHandler2 CHECKED_HEADER "+acoh5+"\n"
                    + "HeadersClientProtocolHandler2 ADDED_HEADER "+acoh3+"\n"
                    + "HeadersClientProtocolHandler HANDLE_MESSAGE_INBOUND\n"
                    + "HeadersClientProtocolHandler CHECKED_HEADER "+acoh5+"\n"
                    + "HeadersClientProtocolHandler CHECKED_HEADER "+acoh3+"\n"
                    + "HeadersClientProtocolHandler REMOVED_HEADER "+acoh5+"\n"
                    + "HeadersClientProtocolHandler ADDED_HEADER "+acoh4+"\n"
                    + "HeadersClientLogicalHandler HANDLE_MESSAGE_INBOUND\n"
                    + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh3+"\n"
                    + "HeadersClientLogicalHandler CHECKED_HEADER "+acoh4+"\n"
                    + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh3+"\n"
                    + "HeadersClientLogicalHandler REMOVED_HEADER "+acoh4+"\n"
                    + "HeadersClientProtocolHandler2 CLOSE\n"
                    + "HeadersClientProtocolHandler CLOSE\n"
                    + "HeadersClientLogicalHandler CLOSE\n";
            
            assertEquals("I don't like 33", e.getMessage());
            assertEquals(expected_calls, log);
            
        }
        TestLogger.logger.debug("----------------------------------");
    }

commonMethod: 
(startLine=84 endLine=86 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01369/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/HeadersHandlerTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("HeadersHandlerService.HeadersHandlerPortTypeImplPort");
    }


, Instance #
frags: 
(startLine=47 endLine=71 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/BareTests.java)
    public void testEchoString() throws Exception {
        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());


        BareDocLitService service = new BareDocLitService();
        DocLitBarePortType proxy = service.getBareDocLitPort();
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE);
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_URI_PROPERTY, "echoString");
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ENDPOINT_URL);

        String request = "Hello World";
        String response = proxy.echoString(request);
        assertTrue(request.equals(response));
        
        // Try the test again
        response = proxy.echoString(request);
        assertTrue(request.equals(response));

        TestLogger.logger.debug("------------------------------");

    }

(startLine=73 endLine=96 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/BareTests.java)
    public void testEchoString_xmlencode() throws Exception {
        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());

        BareDocLitService service = new BareDocLitService();
        DocLitBarePortType proxy = service.getBareDocLitPort();
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE);
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_URI_PROPERTY, "echoString");
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ENDPOINT_URL);

        String request = XMLCHARS;
        String response = proxy.echoString(request);
        assertTrue(request.equals(response));
        
        // Try the test again
        response = proxy.echoString(request);
        assertTrue(request.equals(response));

        TestLogger.logger.debug("------------------------------");

    }

commonMethod: 
(startLine=44 endLine=46 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01369/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/BareTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("BareDocLitService.DocLitBarePortTypeImplPort");
    }


, Instance #
frags: 
(startLine=98 endLine=125 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/BareTests.java)
    public void testTwoWaySync(){
        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());

        try{

            BareDocLitService service = new BareDocLitService();
            DocLitBarePortType proxy = service.getBareDocLitPort();
            BindingProvider p = (BindingProvider) proxy;
            p.getRequestContext().put(
                                      BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE);
            p.getRequestContext().put(
                                      BindingProvider.SOAPACTION_URI_PROPERTY, "twoWaySimple");
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ENDPOINT_URL);

            String response = proxy.twoWaySimple(10);
            TestLogger.logger.debug("Sync Response =" + response);
            
            // Try the call again
            response = proxy.twoWaySimple(10);
            
            TestLogger.logger.debug("Sync Response =" + response);
            TestLogger.logger.debug("------------------------------");
        }catch(Exception e){
            e.printStackTrace();
            fail();
        }
    }

(startLine=127 endLine=150 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/BareTests.java)
    public void testTwoWaySyncWithBodyRouting(){
        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());

        try{

            BareDocLitService service = new BareDocLitService();
            DocLitBarePortType proxy = service.getBareDocLitPort();
            BindingProvider p = (BindingProvider) proxy;
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ENDPOINT_URL);

            String response = proxy.twoWaySimple(10);
            TestLogger.logger.debug("Sync Response =" + response);
            
            
            // Try the call again
            response = proxy.twoWaySimple(10);
            TestLogger.logger.debug("Sync Response =" + response);
            TestLogger.logger.debug("------------------------------");
        }catch(Exception e){
            e.printStackTrace();
            fail();
        }
    }

commonMethod: 
(startLine=44 endLine=46 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01369/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/BareTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("BareDocLitService.DocLitBarePortTypeImplPort");
    }


, Instance #
frags: 
(startLine=69 endLine=92 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/security/BasicAuthSecurityTests.java)
    public void testBasicAuth_uid_pwd() throws Exception {
        TestLogger.logger.debug("---------------------------------------");
        TestLogger.logger.debug("test: " + getName());
        
        Dispatch<String> dispatch = getDispatch(Service.Mode.PAYLOAD,
        		                                endpointUrl,
        		                                SOAPBinding.SOAP11HTTP_BINDING);
        
        dispatch.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, USER_ID);
		dispatch.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, PASSWORD);

        TestLogger.logger.debug(">> Invoking Dispatch<String> BasicAuthSecurityService");
        String retVal = dispatch.invoke(xmlString);
        TestLogger.logger.debug(">> Response [" + retVal + "]");
        
        assertTrue(retVal != null);
        
        // Invoke a second time to verify
        TestLogger.logger.debug(">> Invoking Dispatch<String> BasicAuthSecurityService");
        retVal = dispatch.invoke(xmlString);
        TestLogger.logger.debug(">> Response [" + retVal + "]");
        
        assertTrue(retVal != null);
    }

(startLine=94 endLine=112 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/security/BasicAuthSecurityTests.java)
    public void testBasicAuth_uid()throws Exception{
        TestLogger.logger.debug("---------------------------------------");
        TestLogger.logger.debug("test: " + getName());
        
        Dispatch<String> dispatch = getDispatch(Service.Mode.PAYLOAD,
        		                                endpointUrl,
        		                                SOAPBinding.SOAP11HTTP_BINDING);
        
        dispatch.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, USER_ID);

        TestLogger.logger.debug(">> Invoking Dispatch<String> BasicAuthSecurityService");
        String retVal = dispatch.invoke(xmlString);
       	TestLogger.logger.debug(">> Response [" + retVal + "]");
        
        // Invoke a second time to verify
        TestLogger.logger.debug(">> Invoking Dispatch<String> BasicAuthSecurityService");
        retVal = dispatch.invoke(xmlString);
        TestLogger.logger.debug(">> Response [" + retVal + "]");
    }

commonMethod: 
(startLine=49 endLine=51 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01369/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/security/BasicAuthSecurityTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("BasicAuthSecurityService.SimpleProviderServiceSOAP11port0");
    }


, Instance #
frags: 
(startLine=180 endLine=207 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/BareTests.java)
    public void testHeader() throws Exception {
        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());


        BareDocLitService service = new BareDocLitService();
        DocLitBarePortType proxy = service.getBareDocLitPort();
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE);
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_URI_PROPERTY, "headerTest");
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ENDPOINT_URL);

        String request = "Hello World";
        String response = proxy.headerTest(1, request);
        assertTrue(response != null);
        assertTrue(response.indexOf(request) > 0);
        
        // Try the test again
        request = "Hello World";
        response = proxy.headerTest(1,request);
        assertTrue(response != null);
        assertTrue(response.indexOf(request) > 0);

        TestLogger.logger.debug("------------------------------");

    }

(startLine=209 endLine=238 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01368/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/BareTests.java)
    public void testHeaderWithNull() throws Exception {
        TestLogger.logger.debug("------------------------------");
        TestLogger.logger.debug("Test : " + getName());


        BareDocLitService service = new BareDocLitService();
        DocLitBarePortType proxy = service.getBareDocLitPort();
        BindingProvider p = (BindingProvider) proxy;
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE);
        p.getRequestContext().put(
                                  BindingProvider.SOAPACTION_URI_PROPERTY, "headerTest");
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ENDPOINT_URL);
        
        // Don't write a header element when the @WebParam header parameter is null.
        p.getRequestContext().put(org.apache.axis2.jaxws.Constants.WRITE_HEADER_ELEMENT_IF_NULL, Boolean.FALSE);

        String request = null;  // No header
        String response = proxy.headerTest(1, request);
        assertTrue(response != null);
        assertTrue(response.indexOf("No Header") > 0);

        // Try the test again
        request = null;
        response = proxy.headerTest(1,request);
        assertTrue(response != null);
        assertTrue(response.indexOf("No Header") > 0);

        TestLogger.logger.debug("------------------------------");
    }

commonMethod: 
(startLine=44 endLine=46 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01369/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/BareTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("BareDocLitService.DocLitBarePortTypeImplPort");
    }


, Instance #
frags: 
(startLine=176 endLine=247 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01371/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
    public void testAddNumbersHandler_WithCheckedException() throws Exception {

        TestLogger.logger.debug("----------------------------------");
        TestLogger.logger.debug("test: " + getName());

        AddNumbersHandlerService service = new AddNumbersHandlerService();
        AddNumbersHandlerPortType proxy = service.getAddNumbersHandlerPort();

        BindingProvider p = (BindingProvider)proxy;
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
        AddNumbersHandlerFault_Exception expectedException = null;
        Throwable t = null;
        try {
            proxy.addNumbersHandler(Integer.MAX_VALUE, Integer.MAX_VALUE);
            
        } catch (Throwable e) {
            // An exception is expected
            t = e;
            
        } 
        
        // Make sure the proper exception is thrown
        if (t == null) {
            fail("Expected AddNumbersHandlerFault_Exception to be thrown");
        }
        if (t instanceof AddNumbersHandlerFault_Exception) {
            expectedException = (AddNumbersHandlerFault_Exception) t;
        } else {
            fail("Expected AddNumbersHandlerFault_Exception to be thrown, " +
                        "but the exception is: " + t);
        }
       
        // also confirm that @PreDestroy method is called.  Since it only makes sense to call it on the managed
        // (server) side and just before the handler instance goes out of scope, we are creating a file in the
        // @PreDestroy method, and will check for its existance here.  If the file does not exist, it means
        // @PreDestroy method was never called.  The file is set to .deleteOnExit(), so no need to delete it.
        File file = new File("AddNumbersProtocolHandler.preDestroy.txt");
        assertTrue("File AddNumbersProtocolHandler.preDestroy.txt does not exist, meaning the @PreDestroy method was not called.", file.exists());

        String log = readLogFile();
        String expected_calls =
            "AddNumbersLogicalHandler2 POST_CONSTRUCT\n"
            + "AddNumbersProtocolHandler2 GET_HEADERS\n"
            + "AddNumbersProtocolHandler GET_HEADERS\n"
            + "AddNumbersProtocolHandler HANDLE_MESSAGE_INBOUND\n"
            + "AddNumbersProtocolHandler2 HANDLE_MESSAGE_INBOUND\n"
            + "AddNumbersLogicalHandler2 HANDLE_MESSAGE_INBOUND\n"
            + "AddNumbersLogicalHandler HANDLE_MESSAGE_INBOUND\n"
            + "AddNumbersLogicalHandler HANDLE_FAULT_OUTBOUND\n"
            + "AddNumbersLogicalHandler2 HANDLE_FAULT_OUTBOUND\n"
            + "AddNumbersProtocolHandler2 HANDLE_FAULT_OUTBOUND\n"
            + "AddNumbersProtocolHandler HANDLE_FAULT_OUTBOUND\n"
            + "AddNumbersLogicalHandler CLOSE\n"
            + "AddNumbersLogicalHandler2 CLOSE\n"
            + "AddNumbersProtocolHandler2 CLOSE\n"
            + "AddNumbersProtocolHandler CLOSE\n"
            + "AddNumbersProtocolHandler PRE_DESTROY\n";
        
        assertEquals(expected_calls, log);
        
        TestLogger.logger.debug("Expected Exception is " + 
                                expectedException.getMessage());
        
        // The outbound service handler adds the stack trace to the 
        // message.  Make sure the stack trace contains the AddNumbersHandlerPortTypeImpl
        assertTrue("A stack trace was not present in the returned exception's message:" + 
                   expectedException.getMessage(),
                   expectedException.getMessage().indexOf("AddNumbersHandlerPortTypeImpl") > 0);

        TestLogger.logger.debug("----------------------------------");
        
    }

(startLine=269 endLine=344 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01371/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
    public void testAddNumbersHandler_WithUnCheckedException() throws Exception {

        TestLogger.logger.debug("----------------------------------");
        TestLogger.logger.debug("test: " + getName());

        AddNumbersHandlerService service = new AddNumbersHandlerService();
        AddNumbersHandlerPortType proxy = service.getAddNumbersHandlerPort();

        BindingProvider p = (BindingProvider)proxy;
        p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
        SOAPFaultException expectedException = null;
        Throwable t = null;
        try {
            proxy.addNumbersHandler(-1000, Integer.MIN_VALUE);
            
        } catch (Throwable e) {
            // An exception is expected
            t = e;
            
        } 
        
        // Make sure the proper exception is thrown
        if (t == null) {
            fail("Expected AddNumbersHandlerFault_Exception to be thrown");
        }
        
        if (t instanceof SOAPFaultException) {
            expectedException = (SOAPFaultException) t;
        } else {
            fail("Expected SOAPFaultException to be thrown, " +
                        "but the exception is: " + t);
        }
       
        // also confirm that @PreDestroy method is called.  Since it only makes sense to call it on the managed
        // (server) side and just before the handler instance goes out of scope, we are creating a file in the
        // @PreDestroy method, and will check for its existance here.  If the file does not exist, it means
        // @PreDestroy method was never called.  The file is set to .deleteOnExit(), so no need to delete it.
        File file = new File("AddNumbersProtocolHandler.preDestroy.txt");
        assertTrue("File AddNumbersProtocolHandler.preDestroy.txt does not exist, meaning the @PreDestroy method was not called.", file.exists());

        String log = readLogFile();
        String expected_calls =
            "AddNumbersLogicalHandler2 POST_CONSTRUCT\n"
            + "AddNumbersProtocolHandler2 GET_HEADERS\n"
            + "AddNumbersProtocolHandler GET_HEADERS\n"
            + "AddNumbersProtocolHandler HANDLE_MESSAGE_INBOUND\n"
            + "AddNumbersProtocolHandler2 HANDLE_MESSAGE_INBOUND\n"
            + "AddNumbersLogicalHandler2 HANDLE_MESSAGE_INBOUND\n"
            + "AddNumbersLogicalHandler HANDLE_MESSAGE_INBOUND\n"
            + "AddNumbersLogicalHandler HANDLE_FAULT_OUTBOUND\n"
            + "AddNumbersLogicalHandler2 HANDLE_FAULT_OUTBOUND\n"
            + "AddNumbersProtocolHandler2 HANDLE_FAULT_OUTBOUND\n"
            + "AddNumbersProtocolHandler HANDLE_FAULT_OUTBOUND\n"
            + "AddNumbersLogicalHandler CLOSE\n"
            + "AddNumbersLogicalHandler2 CLOSE\n"
            + "AddNumbersProtocolHandler2 CLOSE\n"
            + "AddNumbersProtocolHandler CLOSE\n"
            + "AddNumbersProtocolHandler PRE_DESTROY\n";
        
        assertTrue("Expected : " + expected_calls + " but received " + log, expected_calls.equals(log));
        
        // The outbound service handler adds the stack trace to the 
        // message.  Make sure the stack trace contains the AddNumbersHandlerPortTypeImpl
        
        TestLogger.logger.debug("Expected Exception is " + 
                                expectedException.getMessage());
        
        SOAPFault fault = expectedException.getFault();
        assertTrue("A stack trace was not present in the returned exception's message:" + 
                   fault.getFaultString(),
                   fault.getFaultString().indexOf("AddNumbersHandlerPortTypeImpl") > 0);
                   

        TestLogger.logger.debug("----------------------------------");
        
    }

commonMethod: 
(startLine=98 endLine=100 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01372/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("AddNumbersHandlerService.AddNumbersHandlerPortTypeImplPort");
    }


, Instance #
frags: 
(startLine=745 endLine=769 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01371/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
        try{
            TestLogger.logger.debug("----------------------------------");
            TestLogger.logger.debug("test: " + getName());
            
            AddNumbersHandlerService service = new AddNumbersHandlerService();
            AddNumbersHandlerPortType proxy = service.getAddNumbersHandlerPort();
            
            BindingProvider p = (BindingProvider)proxy;
            
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, 
                    axisEndpoint);

            List<Handler> handlers = p.getBinding().getHandlerChain();
            if (handlers == null)
                handlers = new ArrayList<Handler>();
            handlers.add(new AddNumbersClientLogicalHandler());
            handlers.add(new AddNumbersClientProtocolHandler());
            p.getBinding().setHandlerChain(handlers);

            // value 102 triggers an endpoint exception, which will run through the server outbound
            // handleFault methods, then client inbound handleFault methods
            int total = proxy.addNumbersHandler(102,10);
            
            fail("should have got an exception, but didn't");
        } catch(Exception e) {

(startLine=808 endLine=832 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01371/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
        try{
            TestLogger.logger.debug("----------------------------------");
            TestLogger.logger.debug("test: " + getName());
            
            AddNumbersHandlerService service = new AddNumbersHandlerService();
            AddNumbersHandlerPortType proxy = service.getAddNumbersHandlerPort();
            
            BindingProvider p = (BindingProvider)proxy;
            
            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, 
                    axisEndpoint);

            List<Handler> handlers = p.getBinding().getHandlerChain();
            if (handlers == null)
                handlers = new ArrayList<Handler>();
            handlers.add(new AddNumbersClientLogicalHandler4());
            handlers.add(new AddNumbersClientLogicalHandler3());
            handlers.add(new AddNumbersClientLogicalHandler());
            
            p.getBinding().setHandlerChain(handlers);

            int total = proxy.addNumbersHandler(99,10);
            
            fail("Should have got an exception, but we didn't.");
        } catch(Exception e) {

commonMethod: 
(startLine=98 endLine=100 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01372/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("AddNumbersHandlerService.AddNumbersHandlerPortTypeImplPort");
    }


, Instance #
frags: 
(startLine=1199 endLine=1249 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01371/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
    public void testOneWayWithProtocolException() {
        Exception exception = null;
        try {
            TestLogger.logger.debug("----------------------------------");
            TestLogger.logger.debug("test: " + getName());

            AddNumbersHandlerService service = new AddNumbersHandlerService();
            AddNumbersHandlerPortType proxy = service.getAddNumbersHandlerPort();

            BindingProvider p = (BindingProvider) proxy;

            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            p.getRequestContext().put("myClientKey", "myClientVal");

            List<Handler> handlers = p.getBinding().getHandlerChain();
            if (handlers == null)
                handlers = new ArrayList<Handler>();
            handlers.add(new AddNumbersClientLogicalHandler());
            handlers.add(new AddNumbersClientProtocolHandler());
            p.getBinding().setHandlerChain(handlers);
            
            BindingProvider bp = (BindingProvider) proxy;
            bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            // value 99 will trigger exception from AddNumbersClientLogicalHandler
            proxy.oneWayInt(99);
        } catch (Exception e) {            
            e.printStackTrace();
            exception = e;
        }
        
        // exceptions on one-way invocations are suppressed by default
        assertNull(exception);
            
        // one-way invocations run in their own thread,
        // and we can't tell here in the client when it
        // has completed.  So, we need to wait long enough
        // for the invocation to complete, so our log file
        // is fully populated.
        try {
            Thread.sleep(1000 * 5); // 5 seconds
        } catch (InterruptedException ie) {
            // nothing
        }
            
        String log = readLogFile();
        String expected_calls = "AddNumbersClientLogicalHandler HANDLE_MESSAGE_OUTBOUND\n"
                + "AddNumbersClientLogicalHandler CLOSE\n";
        assertEquals(expected_calls, log);
                    
        TestLogger.logger.debug("----------------------------------");
    }

(startLine=1251 endLine=1301 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01371/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
    public void testOneWayWithRuntimeException() {
        Exception exception = null;
        try {
            TestLogger.logger.debug("----------------------------------");
            TestLogger.logger.debug("test: " + getName());

            AddNumbersHandlerService service = new AddNumbersHandlerService();
            AddNumbersHandlerPortType proxy = service.getAddNumbersHandlerPort();

            BindingProvider p = (BindingProvider) proxy;

            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            p.getRequestContext().put("myClientKey", "myClientVal");

            List<Handler> handlers = p.getBinding().getHandlerChain();
            if (handlers == null)
                handlers = new ArrayList<Handler>();
            handlers.add(new AddNumbersClientLogicalHandler());
            handlers.add(new AddNumbersClientProtocolHandler());
            p.getBinding().setHandlerChain(handlers);
            
            BindingProvider bp = (BindingProvider) proxy;
            bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            // value 99 will trigger exception from AddNumbersClientLogicalHandler
            proxy.oneWayInt(999);
        } catch (Exception e) {
            e.printStackTrace();
            exception = e;
        }
        
        // exceptions on one-way invocations are suppressed by default
        assertNull(exception);            
            
        // one-way invocations run in their own thread,
        // and we can't tell here in the client when it
        // has completed.  So, we need to wait long enough
        // for the invocation to complete, so our log file
        // is fully populated.
        try {
            Thread.sleep(1000 * 5); // 5 seconds
        } catch (InterruptedException ie) {
            // nothing
        }
            
        String log = readLogFile();
        String expected_calls = "AddNumbersClientLogicalHandler HANDLE_MESSAGE_OUTBOUND\n"
                + "AddNumbersClientLogicalHandler CLOSE\n";
        assertEquals(expected_calls, log);
        
        TestLogger.logger.debug("----------------------------------");
    }

commonMethod: 
(startLine=98 endLine=100 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01372/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("AddNumbersHandlerService.AddNumbersHandlerPortTypeImplPort");
    }


, Instance #
frags: 
(startLine=1201 endLine=1224 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01371/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
        try {
            TestLogger.logger.debug("----------------------------------");
            TestLogger.logger.debug("test: " + getName());

            AddNumbersHandlerService service = new AddNumbersHandlerService();
            AddNumbersHandlerPortType proxy = service.getAddNumbersHandlerPort();

            BindingProvider p = (BindingProvider) proxy;

            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            p.getRequestContext().put("myClientKey", "myClientVal");

            List<Handler> handlers = p.getBinding().getHandlerChain();
            if (handlers == null)
                handlers = new ArrayList<Handler>();
            handlers.add(new AddNumbersClientLogicalHandler());
            handlers.add(new AddNumbersClientProtocolHandler());
            p.getBinding().setHandlerChain(handlers);
            
            BindingProvider bp = (BindingProvider) proxy;
            bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            // value 99 will trigger exception from AddNumbersClientLogicalHandler
            proxy.oneWayInt(99);
        } catch (Exception e) {            

(startLine=1253 endLine=1276 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01371/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
        try {
            TestLogger.logger.debug("----------------------------------");
            TestLogger.logger.debug("test: " + getName());

            AddNumbersHandlerService service = new AddNumbersHandlerService();
            AddNumbersHandlerPortType proxy = service.getAddNumbersHandlerPort();

            BindingProvider p = (BindingProvider) proxy;

            p.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            p.getRequestContext().put("myClientKey", "myClientVal");

            List<Handler> handlers = p.getBinding().getHandlerChain();
            if (handlers == null)
                handlers = new ArrayList<Handler>();
            handlers.add(new AddNumbersClientLogicalHandler());
            handlers.add(new AddNumbersClientProtocolHandler());
            p.getBinding().setHandlerChain(handlers);
            
            BindingProvider bp = (BindingProvider) proxy;
            bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, axisEndpoint);
            // value 99 will trigger exception from AddNumbersClientLogicalHandler
            proxy.oneWayInt(999);
        } catch (Exception e) {

commonMethod: 
(startLine=98 endLine=100 srcPath=/home/newdisk/pc/NewExperiment/axis2-javaFilter/01372/modules/jaxws-integration/src/test/java/org/apache/axis2/jaxws/sample/AddNumbersHandlerTests.java)
    private static String getEndpoint() throws Exception {
        return server.getEndpoint("AddNumbersHandlerService.AddNumbersHandlerPortTypeImplPort");
    }


]