[Instance #
frags: 
(startLine=563 endLine=580 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00036/source/org/jfree/chart/renderer/xy/XYAreaRenderer.java)
        if (state.getInfo() != null) {
            EntityCollection entities = state.getEntityCollection();
            if (entities != null && hotspot != null) {
                String tip = null;
                XYToolTipGenerator generator 
                    = getToolTipGenerator(series, item);
                if (generator != null) {
                    tip = generator.generateToolTip(dataset, series, item);
                }
                String url = null;
                if (getURLGenerator() != null) {
                    url = getURLGenerator().generateURL(dataset, series, item);
                }
                XYItemEntity entity = new XYItemEntity(hotspot, dataset, 
                        series, item, tip, url);
                entities.add(entity);
            }
        }

(startLine=696 endLine=713 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00036/source/org/jfree/chart/renderer/xy/XYBarRenderer.java)
        if (info != null) {
            EntityCollection entities = info.getOwner().getEntityCollection();
            if (entities != null) {
                String tip = null;
                XYToolTipGenerator generator = getToolTipGenerator(series, 
                        item);
                if (generator != null) {
                    tip = generator.generateToolTip(dataset, series, item);
                }
                String url = null;
                if (getURLGenerator() != null) {
                    url = getURLGenerator().generateURL(dataset, series, item);
                }
                XYItemEntity entity = new XYItemEntity(bar, dataset, series, 
                        item, tip, url);
                entities.add(entity);
            }
        }

commonMethod: 
(startLine=1703 endLine=1738 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00037/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java)
    /**
     * Adds an entity to the collection.
     *
     * @param entities  the entity collection being populated.
     * @param area  the entity area (if <code>null</code> a default will be
     *              used).
     * @param dataset  the dataset.
     * @param series  the series.
     * @param item  the item.
     * @param entityX  the entity's center x-coordinate in user space.
     * @param entityY  the entity's center y-coordinate in user space.
     */
    protected void addEntity(EntityCollection entities, Shape area,
                             XYDataset dataset, int series, int item,
                             double entityX, double entityY) {
        if (!getItemCreateEntity(series, item)) {
            return;
        }
        if (area == null) {
            area = new Ellipse2D.Double(entityX - this.defaultEntityRadius,
                    entityY - this.defaultEntityRadius,
                    this.defaultEntityRadius * 2, this.defaultEntityRadius * 2);
        }
        String tip = null;
        XYToolTipGenerator generator = getToolTipGenerator(series, item);
        if (generator != null) {
            tip = generator.generateToolTip(dataset, series, item);
        }
        String url = null;
        if (getURLGenerator() != null) {
            url = getURLGenerator().generateURL(dataset, series, item);
        }
        XYItemEntity entity = new XYItemEntity(area, dataset, series, item,
                tip, url);
        entities.add(entity);
    }


, Instance #
frags: 
(startLine=541 endLine=560 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00045/source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java)
        if (state.getInfo() != null && box != null) {
            EntityCollection entities = state.getEntityCollection();
            if (entities != null) {
                String tip = null;
                CategoryToolTipGenerator tipster 
                        = getToolTipGenerator(row, column);
                if (tipster != null) {
                    tip = tipster.generateToolTip(dataset, row, column);
                }
                String url = null;
                if (getItemURLGenerator(row, column) != null) {
                    url = getItemURLGenerator(row, column).generateURL(
                            dataset, row, column);
                }
                CategoryItemEntity entity = new CategoryItemEntity(box, tip, 
                        url, dataset, dataset.getRowKey(row), 
                        dataset.getColumnKey(column));
                entities.add(entity);
            }
        }

(startLine=778 endLine=797 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00045/source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java)
        if (state.getInfo() != null && box != null) {
            EntityCollection entities = state.getEntityCollection();
            if (entities != null) {
                String tip = null;
                CategoryToolTipGenerator tipster 
                        = getToolTipGenerator(row, column);
                if (tipster != null) {
                    tip = tipster.generateToolTip(dataset, row, column);
                }
                String url = null;
                if (getItemURLGenerator(row, column) != null) {
                    url = getItemURLGenerator(row, column).generateURL(dataset,
                            row, column);
                }
                CategoryItemEntity entity = new CategoryItemEntity(box, tip, 
                        url, dataset, dataset.getRowKey(row), 
                        dataset.getColumnKey(column));
                entities.add(entity);
            }
        }

commonMethod: 
(startLine=1577 endLine=1604 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00046/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java)
    /**
     * Adds an entity with the specified hotspot.
     *
     * @param entities  the entity collection.
     * @param dataset  the dataset.
     * @param row  the row index.
     * @param column  the column index.
     * @param hotspot  the hotspot.
     */
    protected void addItemEntity(EntityCollection entities,
                                 CategoryDataset dataset, int row, int column,
                                 Shape hotspot) {

        String tip = null;
        CategoryToolTipGenerator tipster = getToolTipGenerator(row, column);
        if (tipster != null) {
            tip = tipster.generateToolTip(dataset, row, column);
        }
        String url = null;
        CategoryURLGenerator urlster = getItemURLGenerator(row, column);
        if (urlster != null) {
            url = urlster.generateURL(dataset, row, column);
        }
        CategoryItemEntity entity = new CategoryItemEntity(hotspot, tip, url,
                dataset, dataset.getRowKey(row), dataset.getColumnKey(column));
        entities.add(entity);

    }


, Instance #
frags: 
(startLine=548 endLine=566 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00047/source/org/jfree/chart/plot/Plot.java)
    public void setBackgroundPaint(Paint paint) {

        if (paint == null) {
            if (this.backgroundPaint != null) {
                this.backgroundPaint = null;
                notifyListeners(new PlotChangeEvent(this));
            }
        }
        else {
            if (this.backgroundPaint != null) {
                if (this.backgroundPaint.equals(paint)) {
                    return;  // nothing to do
                }
            }
            this.backgroundPaint = paint;
            notifyListeners(new PlotChangeEvent(this));
        }

    }

(startLine=807 endLine=823 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00047/source/org/jfree/chart/plot/Plot.java)
    public void setOutlinePaint(Paint paint) {
        if (paint == null) {
            if (this.outlinePaint != null) {
                this.outlinePaint = null;
                notifyListeners(new PlotChangeEvent(this));
            }
        }
        else {
            if (this.outlinePaint != null) {
                if (this.outlinePaint.equals(paint)) {
                    return;  // nothing to do
                }
            }
            this.outlinePaint = paint;
            notifyListeners(new PlotChangeEvent(this));
        }
    }

commonMethod: 
(startLine=896 endLine=903 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00048/source/org/jfree/chart/plot/Plot.java)
    /**
     * Sends a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @since 1.0.10
     */
    protected void fireChangeEvent() {
        notifyListeners(new PlotChangeEvent(this));
    }


, Instance #
frags: 
(startLine=839 endLine=848 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00047/source/org/jfree/chart/plot/XYPlot.java)
    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            ValueAxis axis = (ValueAxis) this.domainAxes.get(i);
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        notifyListeners(new PlotChangeEvent(this));
    }

(startLine=1137 endLine=1146 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00047/source/org/jfree/chart/plot/XYPlot.java)
    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        notifyListeners(new PlotChangeEvent(this));
    }

(startLine=845 endLine=854 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00047/source/org/jfree/chart/plot/CategoryPlot.java)
    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i);
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        notifyListeners(new PlotChangeEvent(this));
    }

(startLine=1123 endLine=1132 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00047/source/org/jfree/chart/plot/CategoryPlot.java)
    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        notifyListeners(new PlotChangeEvent(this));
    }

commonMethod: 
(startLine=896 endLine=903 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00048/source/org/jfree/chart/plot/Plot.java)
    /**
     * Sends a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @since 1.0.10
     */
    protected void fireChangeEvent() {
        notifyListeners(new PlotChangeEvent(this));
    }


, Instance #
frags: 
(startLine=444 endLine=457 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00126/source/org/jfree/chart/renderer/xy/HighLowRenderer.java)
        if (entities != null) {
            String tip = null;
            XYToolTipGenerator generator = getToolTipGenerator(series, item);
            if (generator != null) {
                tip = generator.generateToolTip(dataset, series, item);
            }
            String url = null;
            if (getURLGenerator() != null) {
                url = getURLGenerator().generateURL(dataset, series, item);
            }
            XYItemEntity entity = new XYItemEntity(entityArea, dataset,
                    series, item, tip, url);
            entities.add(entity);
        }

(startLine=248 endLine=264 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00126/source/org/jfree/chart/renderer/xy/YIntervalRenderer.java)
        if (entities != null) {
            if (entityArea == null) {
                entityArea = line.getBounds();
            }
            String tip = null;
            XYToolTipGenerator generator = getToolTipGenerator(series, item);
            if (generator != null) {
                tip = generator.generateToolTip(dataset, series, item);
            }
            String url = null;
            if (getURLGenerator() != null) {
                url = getURLGenerator().generateURL(dataset, series, item);
            }
            XYItemEntity entity = new XYItemEntity(entityArea, dataset, series,
                    item, tip, url);
            entities.add(entity);
        }

commonMethod: 
(startLine=1709 endLine=1755 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00127/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java)
    /**
     * Adds an entity to the collection.
     *
     * @param entities  the entity collection being populated.
     * @param area  the entity area (if <code>null</code> a default will be
     *              used).
     * @param dataset  the dataset.
     * @param series  the series.
     * @param item  the item.
     * @param entityX  the entity's center x-coordinate in user space (only
     *                 used if <code>area</code> is <code>null</code>).
     * @param entityY  the entity's center y-coordinate in user space (only
     *                 used if <code>area</code> is <code>null</code>).
     */
    protected void addEntity(EntityCollection entities, Shape area,
                             XYDataset dataset, int series, int item,
                             double entityX, double entityY) {
        if (!getItemCreateEntity(series, item)) {
            return;
        }
        Shape hotspot = area;
        if (hotspot == null) {
        	double w = this.defaultEntityRadius * 2;
        	if (getPlot().getOrientation() == PlotOrientation.VERTICAL) {
        		hotspot = new Ellipse2D.Double(
        				entityX - this.defaultEntityRadius,
        				entityY - this.defaultEntityRadius, w, w);
        	}
        	else {
        		hotspot = new Ellipse2D.Double(
        				entityY - this.defaultEntityRadius,
        	            entityX - this.defaultEntityRadius, w, w);
        	}
        }
        String tip = null;
        XYToolTipGenerator generator = getToolTipGenerator(series, item);
        if (generator != null) {
            tip = generator.generateToolTip(dataset, series, item);
        }
        String url = null;
        if (getURLGenerator() != null) {
            url = getURLGenerator().generateURL(dataset, series, item);
        }
        XYItemEntity entity = new XYItemEntity(hotspot, dataset, series, item,
                tip, url);
        entities.add(entity);
    }


, Instance #
frags: 
(startLine=386 endLine=404 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00139/source/org/jfree/chart/renderer/category/GanttRenderer.java)
            if (state.getInfo() != null) {
                EntityCollection entities = state.getEntityCollection();
                if (entities != null) {
                    String tip = null;
                    if (getToolTipGenerator(row, column) != null) {
                        tip = getToolTipGenerator(row, column).generateToolTip(
                                dataset, row, column);
                    }
                    String url = null;
                    if (getItemURLGenerator(row, column) != null) {
                        url = getItemURLGenerator(row, column).generateURL(
                                dataset, row, column);
                    }
                    CategoryItemEntity entity = new CategoryItemEntity(
                            bar, tip, url, dataset, dataset.getRowKey(row),
                            dataset.getColumnKey(column));
                    entities.add(entity);
                }
            }

(startLine=539 endLine=558 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00139/source/org/jfree/chart/renderer/category/GanttRenderer.java)
        if (state.getInfo() != null) {
            EntityCollection entities = state.getEntityCollection();
            if (entities != null) {
                String tip = null;
                CategoryToolTipGenerator tipster = getToolTipGenerator(row,
                        column);
                if (tipster != null) {
                    tip = tipster.generateToolTip(dataset, row, column);
                }
                String url = null;
                if (getItemURLGenerator(row, column) != null) {
                    url = getItemURLGenerator(row, column).generateURL(
                            dataset, row, column);
                }
                CategoryItemEntity entity = new CategoryItemEntity(bar, tip,
                        url, dataset, dataset.getRowKey(row),
                        dataset.getColumnKey(column));
                entities.add(entity);
            }
        }

commonMethod: 
(startLine=1648 endLine=1675 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00140/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java)
    /**
     * Adds an entity with the specified hotspot.
     *
     * @param entities  the entity collection.
     * @param dataset  the dataset.
     * @param row  the row index.
     * @param column  the column index.
     * @param hotspot  the hotspot.
     */
    protected void addItemEntity(EntityCollection entities,
                                 CategoryDataset dataset, int row, int column,
                                 Shape hotspot) {

        String tip = null;
        CategoryToolTipGenerator tipster = getToolTipGenerator(row, column);
        if (tipster != null) {
            tip = tipster.generateToolTip(dataset, row, column);
        }
        String url = null;
        CategoryURLGenerator urlster = getItemURLGenerator(row, column);
        if (urlster != null) {
            url = urlster.generateURL(dataset, row, column);
        }
        CategoryItemEntity entity = new CategoryItemEntity(hotspot, tip, url,
                dataset, dataset.getRowKey(row), dataset.getColumnKey(column));
        entities.add(entity);

    }


, Instance #
frags: 
(startLine=386 endLine=404 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00139/source/org/jfree/chart/renderer/category/GanttRenderer.java)
            if (state.getInfo() != null) {
                EntityCollection entities = state.getEntityCollection();
                if (entities != null) {
                    String tip = null;
                    if (getToolTipGenerator(row, column) != null) {
                        tip = getToolTipGenerator(row, column).generateToolTip(
                                dataset, row, column);
                    }
                    String url = null;
                    if (getItemURLGenerator(row, column) != null) {
                        url = getItemURLGenerator(row, column).generateURL(
                                dataset, row, column);
                    }
                    CategoryItemEntity entity = new CategoryItemEntity(
                            bar, tip, url, dataset, dataset.getRowKey(row),
                            dataset.getColumnKey(column));
                    entities.add(entity);
                }
            }

(startLine=539 endLine=558 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00139/source/org/jfree/chart/renderer/category/GanttRenderer.java)
        if (state.getInfo() != null) {
            EntityCollection entities = state.getEntityCollection();
            if (entities != null) {
                String tip = null;
                CategoryToolTipGenerator tipster = getToolTipGenerator(row,
                        column);
                if (tipster != null) {
                    tip = tipster.generateToolTip(dataset, row, column);
                }
                String url = null;
                if (getItemURLGenerator(row, column) != null) {
                    url = getItemURLGenerator(row, column).generateURL(
                            dataset, row, column);
                }
                CategoryItemEntity entity = new CategoryItemEntity(bar, tip,
                        url, dataset, dataset.getRowKey(row),
                        dataset.getColumnKey(column));
                entities.add(entity);
            }
        }

commonMethod: 
(startLine=1306 endLine=1344 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00140/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java)
    /**
     * Considers the current (x, y) coordinate and updates the crosshair point
     * if it meets the criteria (usually means the (x, y) coordinate is the
     * closest to the anchor point so far).
     *
     * @param crosshairState  the crosshair state (<code>null</code> permitted,
     *                        but the method does nothing in that case).
     * @param x  the category key, or <code>null</code>.
     * @param y  the y-value (in data space).
     * @param domainAxisIndex  the index of the domain axis for the point.
     * @param rangeAxisIndex  the index of the range axis for the point.
     * @param transX  the x-value translated to Java2D space.
     * @param transY  the y-value translated to Java2D space.
     * @param orientation  the plot orientation (<code>null</code> not
     *                     permitted).
     *
     * @since 1.0.11
     */
    protected void updateCrosshairValues(CategoryCrosshairState crosshairState,
            Comparable rowKey, Comparable columnKey, double value,
            int datasetIndex,
            double transX, double transY, PlotOrientation orientation) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }

        if (crosshairState != null) {
            if (this.plot.isRangeCrosshairLockedOnData()) {
                // both axes
                crosshairState.updateCrosshairPoint(rowKey, columnKey, value,
                		datasetIndex, transX, transY, orientation);
            }
            else {
                crosshairState.updateCrosshairX(rowKey, columnKey,
                		datasetIndex, transX, orientation);
            }
        }
    }


, Instance #
frags: 
(startLine=386 endLine=404 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00139/source/org/jfree/chart/renderer/category/GanttRenderer.java)
            if (state.getInfo() != null) {
                EntityCollection entities = state.getEntityCollection();
                if (entities != null) {
                    String tip = null;
                    if (getToolTipGenerator(row, column) != null) {
                        tip = getToolTipGenerator(row, column).generateToolTip(
                                dataset, row, column);
                    }
                    String url = null;
                    if (getItemURLGenerator(row, column) != null) {
                        url = getItemURLGenerator(row, column).generateURL(
                                dataset, row, column);
                    }
                    CategoryItemEntity entity = new CategoryItemEntity(
                            bar, tip, url, dataset, dataset.getRowKey(row),
                            dataset.getColumnKey(column));
                    entities.add(entity);
                }
            }

(startLine=539 endLine=558 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00139/source/org/jfree/chart/renderer/category/GanttRenderer.java)
        if (state.getInfo() != null) {
            EntityCollection entities = state.getEntityCollection();
            if (entities != null) {
                String tip = null;
                CategoryToolTipGenerator tipster = getToolTipGenerator(row,
                        column);
                if (tipster != null) {
                    tip = tipster.generateToolTip(dataset, row, column);
                }
                String url = null;
                if (getItemURLGenerator(row, column) != null) {
                    url = getItemURLGenerator(row, column).generateURL(
                            dataset, row, column);
                }
                CategoryItemEntity entity = new CategoryItemEntity(bar, tip,
                        url, dataset, dataset.getRowKey(row),
                        dataset.getColumnKey(column));
                entities.add(entity);
            }
        }

commonMethod: 
(startLine=1279 endLine=1298 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00140/source/org/jfree/chart/plot/CategoryPlot.java)
    /**
     * Returns the index of the specified dataset, or <code>-1</code> if the
     * dataset does not belong to the plot.
     *
     * @param dataset  the dataset (<code>null</code> not permitted).
     *
     * @return The index.
     *
     * @since 1.0.11
     */
    public int indexOf(CategoryDataset dataset) {
        int result = -1;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (dataset == this.datasets.get(i)) {
                result = i;
                break;
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=233 endLine=353 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00218/source/org/jfree/chart/renderer/category/LayeredBarRenderer.java)
                                      int column) {

        // nothing is drawn for null values...
        Number dataValue = data.getValue(row, column);
        if (dataValue == null) {
            return;
        }

        // X
        double value = dataValue.doubleValue();
        double base = 0.0;
        double lclip = getLowerClip();
        double uclip = getUpperClip();
        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
            if (value >= uclip) {
                return; // bar is not visible
            }
            base = uclip;
            if (value <= lclip) {
                value = lclip;
            }
        }
        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8
            if (value >= uclip) {
                value = uclip;
            }
            else {
                if (value <= lclip) {
                    value = lclip;
                }
            }
        }
        else { // cases 9, 10, 11 and 12
            if (value <= lclip) {
                return; // bar is not visible
            }
            base = lclip;
            if (value >= uclip) {
                value = uclip;
            }
        }

        RectangleEdge edge = plot.getRangeAxisEdge();
        double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);
        double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);
        double rectX = Math.min(transX1, transX2);
        double rectWidth = Math.abs(transX2 - transX1);

        // Y
        double rectY = domainAxis.getCategoryMiddle(column, getColumnCount(),
                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;

        int seriesCount = getRowCount();

        // draw the bar...
        double shift = 0.0;
        double rectHeight = 0.0;
        double widthFactor = 1.0;
        double seriesBarWidth = getSeriesBarWidth(row);
        if (!Double.isNaN(seriesBarWidth)) {
            widthFactor = seriesBarWidth;
        }
        rectHeight = widthFactor * state.getBarWidth();
        rectY = rectY + (1 - widthFactor) * state.getBarWidth() / 2.0;
        if (seriesCount > 1) {
            shift = rectHeight * 0.20 / (seriesCount - 1);
        }

        Rectangle2D bar = new Rectangle2D.Double(rectX,
                (rectY + ((seriesCount - 1 - row) * shift)), rectWidth,
                (rectHeight - (seriesCount - 1 - row) * shift * 2));

        Paint itemPaint = getItemPaint(row, column);
        GradientPaintTransformer t = getGradientPaintTransformer();
        if (t != null && itemPaint instanceof GradientPaint) {
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        g2.setPaint(itemPaint);
        g2.fill(bar);

        // draw the outline...
        if (isDrawBarOutline()
                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            Stroke stroke = getItemOutlineStroke(row, column);
            Paint paint = getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

        CategoryItemLabelGenerator generator
            = getItemLabelGenerator(row, column);
        if (generator != null && isItemLabelVisible(row, column)) {
            drawItemLabel(g2, data, row, column, plot, generator, bar,
                    (transX1 > transX2));
        }

        // collect entity and tool tip information...
        if (state.getInfo() != null) {
            EntityCollection entities = state.getEntityCollection();
            if (entities != null) {
                String tip = null;
                CategoryToolTipGenerator tipster
                    = getToolTipGenerator(row, column);
                if (tipster != null) {
                    tip = tipster.generateToolTip(data, row, column);
                }
                String url = null;
                if (getItemURLGenerator(row, column) != null) {
                    url = getItemURLGenerator(row, column).generateURL(data,
                            row, column);
                }
                CategoryItemEntity entity = new CategoryItemEntity(bar, tip,
                        url, data, data.getRowKey(row),
                        data.getColumnKey(column));
                entities.add(entity);
            }
        }
    }

(startLine=376 endLine=503 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00218/source/org/jfree/chart/renderer/category/LayeredBarRenderer.java)
                                    int column) {

        // nothing is drawn for null values...
        Number dataValue = data.getValue(row, column);
        if (dataValue == null) {
            return;
        }

        // BAR X
        double rectX = domainAxis.getCategoryMiddle(column, getColumnCount(),
                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;

        int seriesCount = getRowCount();

        // BAR Y
        double value = dataValue.doubleValue();
        double base = 0.0;
        double lclip = getLowerClip();
        double uclip = getUpperClip();

        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
            if (value >= uclip) {
                return; // bar is not visible
            }
            base = uclip;
            if (value <= lclip) {
                value = lclip;
            }
        }
        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8
            if (value >= uclip) {
                value = uclip;
            }
            else {
                if (value <= lclip) {
                    value = lclip;
                }
            }
        }
        else { // cases 9, 10, 11 and 12
            if (value <= lclip) {
                return; // bar is not visible
            }
            base = getLowerClip();
            if (value >= uclip) {
               value = uclip;
            }
        }

        RectangleEdge edge = plot.getRangeAxisEdge();
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, edge);
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, edge);
        double rectY = Math.min(transY2, transY1);

        double rectWidth = state.getBarWidth();
        double rectHeight = Math.abs(transY2 - transY1);

        // draw the bar...
        double shift = 0.0;
        rectWidth = 0.0;
        double widthFactor = 1.0;
        double seriesBarWidth = getSeriesBarWidth(row);
        if (!Double.isNaN(seriesBarWidth)) {
            widthFactor = seriesBarWidth;
        }
        rectWidth = widthFactor * state.getBarWidth();
        rectX = rectX + (1 - widthFactor) * state.getBarWidth() / 2.0;
        if (seriesCount > 1) {
            // needs to be improved !!!
            shift = rectWidth * 0.20 / (seriesCount - 1);
        }

        Rectangle2D bar = new Rectangle2D.Double(
            (rectX + ((seriesCount - 1 - row) * shift)), rectY,
            (rectWidth - (seriesCount - 1 - row) * shift * 2), rectHeight);
        Paint itemPaint = getItemPaint(row, column);
        GradientPaintTransformer t = getGradientPaintTransformer();
        if (t != null && itemPaint instanceof GradientPaint) {
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        g2.setPaint(itemPaint);
        g2.fill(bar);

        // draw the outline...
        if (isDrawBarOutline()
                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            Stroke stroke = getItemOutlineStroke(row, column);
            Paint paint = getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

        // draw the item labels if there are any...
        double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);
        double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);

        CategoryItemLabelGenerator generator
            = getItemLabelGenerator(row, column);
        if (generator != null && isItemLabelVisible(row, column)) {
            drawItemLabel(g2, data, row, column, plot, generator, bar,
                    (transX1 > transX2));
        }

        // collect entity and tool tip information...
        if (state.getInfo() != null) {
            EntityCollection entities = state.getEntityCollection();
            if (entities != null) {
                String tip = null;
                CategoryToolTipGenerator tipster
                    = getToolTipGenerator(row, column);
                if (tipster != null) {
                    tip = tipster.generateToolTip(data, row, column);
                }
                String url = null;
                if (getItemURLGenerator(row, column) != null) {
                    url = getItemURLGenerator(row, column).generateURL(
                        data, row, column);
                }
                CategoryItemEntity entity = new CategoryItemEntity(bar, tip,
                        url, data, data.getRowKey(row),
                        data.getColumnKey(column));
                entities.add(entity);
            }
        }
    }

commonMethod: 
(startLine=1652 endLine=1679 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00219/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java)
    /**
     * Adds an entity with the specified hotspot.
     *
     * @param entities  the entity collection.
     * @param dataset  the dataset.
     * @param row  the row index.
     * @param column  the column index.
     * @param hotspot  the hotspot.
     */
    protected void addItemEntity(EntityCollection entities,
                                 CategoryDataset dataset, int row, int column,
                                 Shape hotspot) {

        String tip = null;
        CategoryToolTipGenerator tipster = getToolTipGenerator(row, column);
        if (tipster != null) {
            tip = tipster.generateToolTip(dataset, row, column);
        }
        String url = null;
        CategoryURLGenerator urlster = getItemURLGenerator(row, column);
        if (urlster != null) {
            url = urlster.generateURL(dataset, row, column);
        }
        CategoryItemEntity entity = new CategoryItemEntity(hotspot, tip, url,
                dataset, dataset.getRowKey(row), dataset.getColumnKey(column));
        entities.add(entity);

    }


, Instance #
frags: 
(startLine=333 endLine=352 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00218/source/org/jfree/chart/renderer/category/LayeredBarRenderer.java)
        if (state.getInfo() != null) {
            EntityCollection entities = state.getEntityCollection();
            if (entities != null) {
                String tip = null;
                CategoryToolTipGenerator tipster
                    = getToolTipGenerator(row, column);
                if (tipster != null) {
                    tip = tipster.generateToolTip(data, row, column);
                }
                String url = null;
                if (getItemURLGenerator(row, column) != null) {
                    url = getItemURLGenerator(row, column).generateURL(data,
                            row, column);
                }
                CategoryItemEntity entity = new CategoryItemEntity(bar, tip,
                        url, data, data.getRowKey(row),
                        data.getColumnKey(column));
                entities.add(entity);
            }
        }

(startLine=483 endLine=502 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00218/source/org/jfree/chart/renderer/category/LayeredBarRenderer.java)
        if (state.getInfo() != null) {
            EntityCollection entities = state.getEntityCollection();
            if (entities != null) {
                String tip = null;
                CategoryToolTipGenerator tipster
                    = getToolTipGenerator(row, column);
                if (tipster != null) {
                    tip = tipster.generateToolTip(data, row, column);
                }
                String url = null;
                if (getItemURLGenerator(row, column) != null) {
                    url = getItemURLGenerator(row, column).generateURL(
                        data, row, column);
                }
                CategoryItemEntity entity = new CategoryItemEntity(bar, tip,
                        url, data, data.getRowKey(row),
                        data.getColumnKey(column));
                entities.add(entity);
            }
        }

commonMethod: 
(startLine=1652 endLine=1679 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00219/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java)
    /**
     * Adds an entity with the specified hotspot.
     *
     * @param entities  the entity collection.
     * @param dataset  the dataset.
     * @param row  the row index.
     * @param column  the column index.
     * @param hotspot  the hotspot.
     */
    protected void addItemEntity(EntityCollection entities,
                                 CategoryDataset dataset, int row, int column,
                                 Shape hotspot) {

        String tip = null;
        CategoryToolTipGenerator tipster = getToolTipGenerator(row, column);
        if (tipster != null) {
            tip = tipster.generateToolTip(dataset, row, column);
        }
        String url = null;
        CategoryURLGenerator urlster = getItemURLGenerator(row, column);
        if (urlster != null) {
            url = urlster.generateURL(dataset, row, column);
        }
        CategoryItemEntity entity = new CategoryItemEntity(hotspot, tip, url,
                dataset, dataset.getRowKey(row), dataset.getColumnKey(column));
        entities.add(entity);

    }


, Instance #
frags: 
(startLine=4990 endLine=5009 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00236/source/org/jfree/chart/plot/XYPlot.java)
            Point2D source) {
        if (!isDomainPannable()) {
            return;
        }
        int domainAxisCount = getDomainAxisCount();
        for (int i = 0; i < domainAxisCount; i++) {
            ValueAxis axis = getDomainAxis(i);
            if (axis == null) {
                continue;
            }
            double length = axis.getRange().getLength();
            double adj = -percent * length;
            if (axis.isInverted()) {
                adj = -adj;
            }
            axis.setRange(axis.getLowerBound() + adj,
                    axis.getUpperBound() + adj);
        }
        configureRangeAxes();
    }

(startLine=5021 endLine=5039 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00236/source/org/jfree/chart/plot/XYPlot.java)
            Point2D source) {
        if (!isRangePannable()) {
            return;
        }
        int rangeAxisCount = getRangeAxisCount();
        for (int i = 0; i < rangeAxisCount; i++) {
            ValueAxis axis = getRangeAxis(i);
            if (axis == null) {
                continue;
            }
            double length = axis.getRange().getLength();
            double adj = percent * length;
            if (axis.isInverted()) {
                adj = -adj;
            }
            axis.setRange(axis.getLowerBound() + adj,
                    axis.getUpperBound() + adj);
        }
    }

commonMethod: 
(startLine=1616 endLine=1630 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00237/source/org/jfree/chart/axis/ValueAxis.java)
    /**
     * Slides the axis range by the specified percentage.
     *
     * @param percent  the percentage.
     *
     * @since 1.0.13
     */
    public void pan(double percent) {
        Range range = getRange();
        double length = range.getLength();
        double adj = length * percent;
        double lower = range.getLowerBound() + adj;
        double upper = range.getUpperBound() + adj;
        setRange(lower, upper);
    }


, Instance #
frags: 
(startLine=4995 endLine=5007 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00236/source/org/jfree/chart/plot/XYPlot.java)
        for (int i = 0; i < domainAxisCount; i++) {
            ValueAxis axis = getDomainAxis(i);
            if (axis == null) {
                continue;
            }
            double length = axis.getRange().getLength();
            double adj = -percent * length;
            if (axis.isInverted()) {
                adj = -adj;
            }
            axis.setRange(axis.getLowerBound() + adj,
                    axis.getUpperBound() + adj);
        }

(startLine=5026 endLine=5038 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00236/source/org/jfree/chart/plot/XYPlot.java)
        for (int i = 0; i < rangeAxisCount; i++) {
            ValueAxis axis = getRangeAxis(i);
            if (axis == null) {
                continue;
            }
            double length = axis.getRange().getLength();
            double adj = percent * length;
            if (axis.isInverted()) {
                adj = -adj;
            }
            axis.setRange(axis.getLowerBound() + adj,
                    axis.getUpperBound() + adj);
        }

commonMethod: 
(startLine=1616 endLine=1630 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00237/source/org/jfree/chart/axis/ValueAxis.java)
    /**
     * Slides the axis range by the specified percentage.
     *
     * @param percent  the percentage.
     *
     * @since 1.0.13
     */
    public void pan(double percent) {
        Range range = getRange();
        double length = range.getLength();
        double adj = length * percent;
        double lower = range.getLowerBound() + adj;
        double upper = range.getUpperBound() + adj;
        setRange(lower, upper);
    }


, Instance #
frags: 
(startLine=551 endLine=562 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00251/source/org/jfree/chart/renderer/xy/XYAreaRenderer.java)
        else {  // vertical orientation
            hotspot = new Polygon();
            hotspot.addPoint((int) ((transX0 + transX1) / 2.0),
                    (int) transZero);
            hotspot.addPoint((int) ((transX0 + transX1) / 2.0),
                    (int) ((transY0 + transY1) / 2.0));
            hotspot.addPoint((int) transX1, (int) transY1);
            hotspot.addPoint((int) ((transX1 + transX2) / 2.0),
                    (int) ((transY1 + transY2) / 2.0));
            hotspot.addPoint((int) ((transX1 + transX2) / 2.0),
                    (int) transZero);
        }

(startLine=361 endLine=372 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00251/source/org/jfree/chart/renderer/xy/XYAreaRenderer2.java)
        else {  // vertical orientation
            hotspot = new Polygon();
            hotspot.addPoint((int) ((transX0 + transX1) / 2.0),
                    (int) transZero);
            hotspot.addPoint((int) ((transX0 + transX1) / 2.0),
                    (int) ((transY0 + transY1) / 2.0));
            hotspot.addPoint((int) transX1, (int) transY1);
            hotspot.addPoint((int) ((transX1 + transX2) / 2.0),
                    (int) ((transY1 + transY2) / 2.0));
            hotspot.addPoint((int) ((transX1 + transX2) / 2.0),
                    (int) transZero);
        }

commonMethod: 
(startLine=1811 endLine=1824 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00252/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java)
    /**
     * Utility method delegating to {@link GeneralPath#lineTo} taking double as
     * parameters.
     *
     * @param hotspot  the region under construction (<code>null</code> not 
     *           permitted);
     * @param x  the x coordinate;
     * @param y  the y coordinate;
     *
     * @since 1.0.14
     */
    protected static void lineTo(GeneralPath hotspot, double x, double y) {
        hotspot.lineTo((float) x, (float) y);
    }


, Instance #
frags: 
(startLine=551 endLine=562 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00251/source/org/jfree/chart/renderer/xy/XYAreaRenderer.java)
        else {  // vertical orientation
            hotspot = new Polygon();
            hotspot.addPoint((int) ((transX0 + transX1) / 2.0),
                    (int) transZero);
            hotspot.addPoint((int) ((transX0 + transX1) / 2.0),
                    (int) ((transY0 + transY1) / 2.0));
            hotspot.addPoint((int) transX1, (int) transY1);
            hotspot.addPoint((int) ((transX1 + transX2) / 2.0),
                    (int) ((transY1 + transY2) / 2.0));
            hotspot.addPoint((int) ((transX1 + transX2) / 2.0),
                    (int) transZero);
        }

(startLine=361 endLine=372 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00251/source/org/jfree/chart/renderer/xy/XYAreaRenderer2.java)
        else {  // vertical orientation
            hotspot = new Polygon();
            hotspot.addPoint((int) ((transX0 + transX1) / 2.0),
                    (int) transZero);
            hotspot.addPoint((int) ((transX0 + transX1) / 2.0),
                    (int) ((transY0 + transY1) / 2.0));
            hotspot.addPoint((int) transX1, (int) transY1);
            hotspot.addPoint((int) ((transX1 + transX2) / 2.0),
                    (int) ((transY1 + transY2) / 2.0));
            hotspot.addPoint((int) ((transX1 + transX2) / 2.0),
                    (int) transZero);
        }

commonMethod: 
(startLine=1796 endLine=1809 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00252/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java)
    /**
     * Utility method delegating to {@link GeneralPath#moveTo} taking double as
     * parameters.
     *
     * @param hotspot  the region under construction (<code>null</code> not 
     *           permitted);
     * @param x  the x coordinate;
     * @param y  the y coordinate;
     *
     * @since 1.0.14
     */
    protected static void moveTo(GeneralPath hotspot, double x, double y) {
        hotspot.moveTo((float) x, (float) y);
    }


, Instance #
frags: 
(startLine=271 endLine=407 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00275/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java)
                                      int column) {

        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();

        // BAR Y
        double rectY = domainAxis.getCategoryStart(column, getColumnCount(),
                dataArea, xAxisLocation);

        int seriesCount = state.getVisibleSeriesCount() >= 0
                ? state.getVisibleSeriesCount() : getRowCount();
        int categoryCount = getColumnCount();
        if (seriesCount > 1) {
            double seriesGap = dataArea.getHeight() * getItemMargin()
                               / (categoryCount * (seriesCount - 1));
            rectY = rectY + visibleRow * (state.getBarWidth() + seriesGap);
        }
        else {
            rectY = rectY + visibleRow * state.getBarWidth();
        }

        // BAR X
        Number meanValue = dataset.getMeanValue(row, column);
        if (meanValue == null) {
            return;
        }
        double value = meanValue.doubleValue();
        double base = 0.0;
        double lclip = getLowerClip();
        double uclip = getUpperClip();

        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
            if (value >= uclip) {
                return; // bar is not visible
            }
            base = uclip;
            if (value <= lclip) {
                value = lclip;
            }
        }
        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8
            if (value >= uclip) {
                value = uclip;
            }
            else {
                if (value <= lclip) {
                    value = lclip;
                }
            }
        }
        else { // cases 9, 10, 11 and 12
            if (value <= lclip) {
                return; // bar is not visible
            }
            base = getLowerClip();
            if (value >= uclip) {
               value = uclip;
            }
        }

        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        double transY2 = rangeAxis.valueToJava2D(value, dataArea,
                yAxisLocation);
        double rectX = Math.min(transY2, transY1);

        double rectHeight = state.getBarWidth();
        double rectWidth = Math.abs(transY2 - transY1);

        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth,
                rectHeight);
        Paint itemPaint = getItemPaint(row, column);
        GradientPaintTransformer t = getGradientPaintTransformer();
        if (t != null && itemPaint instanceof GradientPaint) {
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        g2.setPaint(itemPaint);
        g2.fill(bar);

        // draw the outline...
        if (isDrawBarOutline()
                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            Stroke stroke = getItemOutlineStroke(row, column);
            Paint paint = getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

        // standard deviation lines
        Number n = dataset.getStdDevValue(row, column);
        if (n != null) {
            double valueDelta = n.doubleValue();
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
                    + valueDelta, dataArea, yAxisLocation);
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
                    - valueDelta, dataArea, yAxisLocation);

            if (this.errorIndicatorPaint != null) {
                g2.setPaint(this.errorIndicatorPaint);
            }
            else {
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            if (this.errorIndicatorStroke != null) {
                g2.setStroke(this.errorIndicatorStroke);
            }
            else {
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            Line2D line = null;
            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d,
                                     highVal, rectY + rectHeight / 2.0d);
            g2.draw(line);
            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25,
                                     highVal, rectY + rectHeight * 0.75);
            g2.draw(line);
            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25,
                                     lowVal, rectY + rectHeight * 0.75);
            g2.draw(line);
        }

        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,
                column);
        if (generator != null && isItemLabelVisible(row, column)) {
            drawItemLabel(g2, dataset, row, column, plot, generator, bar,
                    (value < 0.0));
        }

        // add an item entity, if this information is being collected
        EntityCollection entities = state.getEntityCollection();
        if (entities != null) {
            addItemEntity(entities, dataset, row, column, bar);
        }

    }

(startLine=432 endLine=568 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00275/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java)
                                    int column) {

        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();

        // BAR X
        double rectX = domainAxis.getCategoryStart(column, getColumnCount(),
                dataArea, xAxisLocation);

        int seriesCount = state.getVisibleSeriesCount() >= 0
                ? state.getVisibleSeriesCount() : getRowCount();
        int categoryCount = getColumnCount();
        if (seriesCount > 1) {
            double seriesGap = dataArea.getWidth() * getItemMargin()
                               / (categoryCount * (seriesCount - 1));
            rectX = rectX + visibleRow * (state.getBarWidth() + seriesGap);
        }
        else {
            rectX = rectX + visibleRow * state.getBarWidth();
        }

        // BAR Y
        Number meanValue = dataset.getMeanValue(row, column);
        if (meanValue == null) {
            return;
        }

        double value = meanValue.doubleValue();
        double base = 0.0;
        double lclip = getLowerClip();
        double uclip = getUpperClip();

        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
            if (value >= uclip) {
                return; // bar is not visible
            }
            base = uclip;
            if (value <= lclip) {
                value = lclip;
            }
        }
        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8
            if (value >= uclip) {
                value = uclip;
            }
            else {
                if (value <= lclip) {
                    value = lclip;
                }
            }
        }
        else { // cases 9, 10, 11 and 12
            if (value <= lclip) {
                return; // bar is not visible
            }
            base = getLowerClip();
            if (value >= uclip) {
               value = uclip;
            }
        }

        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        double transY2 = rangeAxis.valueToJava2D(value, dataArea,
                yAxisLocation);
        double rectY = Math.min(transY2, transY1);

        double rectWidth = state.getBarWidth();
        double rectHeight = Math.abs(transY2 - transY1);

        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth,
                rectHeight);
        Paint itemPaint = getItemPaint(row, column);
        GradientPaintTransformer t = getGradientPaintTransformer();
        if (t != null && itemPaint instanceof GradientPaint) {
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        g2.setPaint(itemPaint);
        g2.fill(bar);
        // draw the outline...
        if (isDrawBarOutline()
                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            Stroke stroke = getItemOutlineStroke(row, column);
            Paint paint = getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

        // standard deviation lines
        Number n = dataset.getStdDevValue(row, column);
        if (n != null) {
            double valueDelta = n.doubleValue();
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
                    + valueDelta, dataArea, yAxisLocation);
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
                    - valueDelta, dataArea, yAxisLocation);

            if (this.errorIndicatorPaint != null) {
                g2.setPaint(this.errorIndicatorPaint);
            }
            else {
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            if (this.errorIndicatorStroke != null) {
                g2.setStroke(this.errorIndicatorStroke);
            }
            else {
                g2.setStroke(getItemOutlineStroke(row, column));
            }

            Line2D line = null;
            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal,
                                     rectX + rectWidth / 2.0d, highVal);
            g2.draw(line);
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal,
                                     rectX + rectWidth / 2.0d + 5.0d, highVal);
            g2.draw(line);
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,
                                     rectX + rectWidth / 2.0d + 5.0d, lowVal);
            g2.draw(line);
        }

        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,
                column);
        if (generator != null && isItemLabelVisible(row, column)) {
            drawItemLabel(g2, dataset, row, column, plot, generator, bar,
                    (value < 0.0));
        }

        // add an item entity, if this information is being collected
        EntityCollection entities = state.getEntityCollection();
        if (entities != null) {
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

commonMethod: 
(startLine=815 endLine=864 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00276/source/org/jfree/chart/renderer/category/BarRenderer.java)
    /**
     * Calculates the coordinate of the first "side" of a bar.  This will be
     * the minimum x-coordinate for a vertical bar, and the minimum
     * y-coordinate for a horizontal bar.
     *
     * @param plot  the plot.
     * @param orientation  the plot orientation.
     * @param dataArea  the data area.
     * @param domainAxis  the domain axis.
     * @param state  the renderer state (has the bar width precalculated).
     * @param row  the row index.
     * @param column  the column index.
     *
     * @return The coordinate.
     */
    protected double calculateBarW0(CategoryPlot plot,
                                    PlotOrientation orientation,
                                    Rectangle2D dataArea,
                                    CategoryAxis domainAxis,
                                    CategoryItemRendererState state,
                                    int row,
                                    int column) {
        // calculate bar width...
        double space = 0.0;
        if (orientation == PlotOrientation.HORIZONTAL) {
            space = dataArea.getHeight();
        }
        else {
            space = dataArea.getWidth();
        }
        double barW0 = domainAxis.getCategoryStart(column, getColumnCount(),
                dataArea, plot.getDomainAxisEdge());
        int seriesCount = state.getVisibleSeriesCount() >= 0
                ? state.getVisibleSeriesCount() : getRowCount();
        int categoryCount = getColumnCount();
        if (seriesCount > 1) {
            double seriesGap = space * getItemMargin()
                               / (categoryCount * (seriesCount - 1));
            double seriesW = calculateSeriesWidth(space, domainAxis,
                    categoryCount, seriesCount);
            barW0 = barW0 + row * (seriesW + seriesGap)
                          + (seriesW / 2.0) - (state.getBarWidth() / 2.0);
        }
        else {
            barW0 = domainAxis.getCategoryMiddle(column, getColumnCount(),
                    dataArea, plot.getDomainAxisEdge()) - state.getBarWidth()
                    / 2.0;
        }
        return barW0;
    }


, Instance #
frags: 
(startLine=239 endLine=259 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00286/source/org/jfree/chart/plot/CombinedRangeXYPlot.java)
    public void remove(XYPlot subplot) {
        if (subplot == null) {
            throw new IllegalArgumentException(" Null 'subplot' argument.");
        }
        int position = -1;
        int size = this.subplots.size();
        int i = 0;
        while (position == -1 && i < size) {
            if (this.subplots.get(i) == subplot) {
                position = i;
            }
            i++;
        }
        if (position != -1) {
            this.subplots.remove(position);
            subplot.setParent(null);
            subplot.removeChangeListener(this);
            configureRangeAxes();
            fireChangeEvent();
        }
    }

(startLine=294 endLine=317 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00286/source/org/jfree/chart/plot/CombinedDomainXYPlot.java)
    public void remove(XYPlot subplot) {
        if (subplot == null) {
            throw new IllegalArgumentException(" Null 'subplot' argument.");
        }
        int position = -1;
        int size = this.subplots.size();
        int i = 0;
        while (position == -1 && i < size) {
            if (this.subplots.get(i) == subplot) {
                position = i;
            }
            i++;
        }
        if (position != -1) {
            this.subplots.remove(position);
            subplot.setParent(null);
            subplot.removeChangeListener(this);
            ValueAxis domain = getDomainAxis();
            if (domain != null) {
                domain.configure();
            }
            fireChangeEvent();
        }
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=547 endLine=560 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00286/source/org/jfree/chart/plot/CombinedRangeXYPlot.java)
    public XYPlot findSubplot(PlotRenderingInfo info, Point2D source) {
        if (info == null) {
            throw new IllegalArgumentException("Null 'info' argument.");
        }
        if (source == null) {
            throw new IllegalArgumentException("Null 'source' argument.");
        }
        XYPlot result = null;
        int subplotIndex = info.getSubplotIndex(source);
        if (subplotIndex >= 0) {
            result =  (XYPlot) this.subplots.get(subplotIndex);
        }
        return result;
    }

(startLine=598 endLine=611 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00286/source/org/jfree/chart/plot/CombinedDomainXYPlot.java)
    public XYPlot findSubplot(PlotRenderingInfo info, Point2D source) {
        if (info == null) {
            throw new IllegalArgumentException("Null 'info' argument.");
        }
        if (source == null) {
            throw new IllegalArgumentException("Null 'source' argument.");
        }
        XYPlot result = null;
        int subplotIndex = info.getSubplotIndex(source);
        if (subplotIndex >= 0) {
            result =  (XYPlot) this.subplots.get(subplotIndex);
        }
        return result;
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=337 endLine=373 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/LegendItem.java)
                      Stroke lineStroke, Paint linePaint) {

        if (label == null) {
            throw new IllegalArgumentException("Null 'label' argument.");
        }
        if (fillPaint == null) {
            throw new IllegalArgumentException("Null 'fillPaint' argument.");
        }
        if (lineStroke == null) {
            throw new IllegalArgumentException("Null 'lineStroke' argument.");
        }
        if (outlinePaint == null) {
            throw new IllegalArgumentException("Null 'outlinePaint' argument.");
        }
        if (outlineStroke == null) {
            throw new IllegalArgumentException(
                    "Null 'outlineStroke' argument.");
        }
        this.label = label;
        this.labelPaint = null;
        this.attributedLabel = null;
        this.description = description;
        this.shapeVisible = shapeVisible;
        this.shape = shape;
        this.shapeFilled = shapeFilled;
        this.fillPaint = fillPaint;
        this.fillPaintTransformer = new StandardGradientPaintTransformer();
        this.shapeOutlineVisible = shapeOutlineVisible;
        this.outlinePaint = outlinePaint;
        this.outlineStroke = outlineStroke;
        this.lineVisible = lineVisible;
        this.line = line;
        this.lineStroke = lineStroke;
        this.linePaint = linePaint;
        this.toolTipText = toolTipText;
        this.urlText = urlText;
    }

(startLine=482 endLine=523 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/LegendItem.java)
                      Paint linePaint) {

        if (label == null) {
            throw new IllegalArgumentException("Null 'label' argument.");
        }
        if (fillPaint == null) {
            throw new IllegalArgumentException("Null 'fillPaint' argument.");
        }
        if (lineStroke == null) {
            throw new IllegalArgumentException("Null 'lineStroke' argument.");
        }
        if (line == null) {
            throw new IllegalArgumentException("Null 'line' argument.");
        }
        if (linePaint == null) {
            throw new IllegalArgumentException("Null 'linePaint' argument.");
        }
        if (outlinePaint == null) {
            throw new IllegalArgumentException("Null 'outlinePaint' argument.");
        }
        if (outlineStroke == null) {
            throw new IllegalArgumentException(
                "Null 'outlineStroke' argument.");
        }
        this.label = characterIteratorToString(label.getIterator());
        this.attributedLabel = label;
        this.description = description;
        this.shapeVisible = shapeVisible;
        this.shape = shape;
        this.shapeFilled = shapeFilled;
        this.fillPaint = fillPaint;
        this.fillPaintTransformer = new StandardGradientPaintTransformer();
        this.shapeOutlineVisible = shapeOutlineVisible;
        this.outlinePaint = outlinePaint;
        this.outlineStroke = outlineStroke;
        this.lineVisible = lineVisible;
        this.line = line;
        this.lineStroke = lineStroke;
        this.linePaint = linePaint;
        this.toolTipText = toolTipText;
        this.urlText = urlText;
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=928 endLine=955 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                                   boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }

        CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);
        ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);

        StackedBarRenderer renderer = new StackedBarRenderer();
        if (tooltips) {
            renderer.setBaseToolTipGenerator(
                    new StandardCategoryToolTipGenerator());
        }
        if (urls) {
            renderer.setBaseItemURLGenerator(
                    new StandardCategoryURLGenerator());
        }

        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,
                renderer);
        plot.setOrientation(orientation);
        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=984 endLine=1018 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                              boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
        ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);

        BarRenderer3D renderer = new BarRenderer3D();
        if (tooltips) {
            renderer.setBaseToolTipGenerator(
                    new StandardCategoryToolTipGenerator());
        }
        if (urls) {
            renderer.setBaseItemURLGenerator(
                    new StandardCategoryURLGenerator());
        }

        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,
                renderer);
        plot.setOrientation(orientation);
        if (orientation == PlotOrientation.HORIZONTAL) {
            // change rendering order to ensure that bar overlapping is the
            // right way around
            plot.setRowRenderingOrder(SortOrder.DESCENDING);
            plot.setColumnRenderingOrder(SortOrder.DESCENDING);
        }
        plot.setForegroundAlpha(0.75f);

        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=1048 endLine=1083 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                                    boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
        ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);

        // create the renderer...
        CategoryItemRenderer renderer = new StackedBarRenderer3D();
        if (tooltips) {
            renderer.setBaseToolTipGenerator(
                    new StandardCategoryToolTipGenerator());
        }
        if (urls) {
            renderer.setBaseItemURLGenerator(
                    new StandardCategoryURLGenerator());
        }

        // create the plot...
        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,
                renderer);
        plot.setOrientation(orientation);
        if (orientation == PlotOrientation.HORIZONTAL) {
            // change rendering order to ensure that bar overlapping is the
            // right way around
            plot.setColumnRenderingOrder(SortOrder.DESCENDING);
        }

        // create the chart...
        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=1112 endLine=1140 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                             boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
        categoryAxis.setCategoryMargin(0.0);

        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

        AreaRenderer renderer = new AreaRenderer();
        if (tooltips) {
            renderer.setBaseToolTipGenerator(
                    new StandardCategoryToolTipGenerator());
        }
        if (urls) {
            renderer.setBaseItemURLGenerator(
                    new StandardCategoryURLGenerator());
        }

        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,
                renderer);
        plot.setOrientation(orientation);
        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=1166 endLine=1193 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
            boolean legend, boolean tooltips, boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
        categoryAxis.setCategoryMargin(0.0);
        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

        StackedAreaRenderer renderer = new StackedAreaRenderer();
        if (tooltips) {
            renderer.setBaseToolTipGenerator(
                    new StandardCategoryToolTipGenerator());
        }
        if (urls) {
            renderer.setBaseItemURLGenerator(
                    new StandardCategoryURLGenerator());
        }

        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,
                renderer);
        plot.setOrientation(orientation);
        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=1222 endLine=1247 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                             boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

        LineAndShapeRenderer renderer = new LineAndShapeRenderer(true, false);
        if (tooltips) {
            renderer.setBaseToolTipGenerator(
                    new StandardCategoryToolTipGenerator());
        }
        if (urls) {
            renderer.setBaseItemURLGenerator(
                    new StandardCategoryURLGenerator());
        }
        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,
                renderer);
        plot.setOrientation(orientation);
        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=1276 endLine=1301 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                               boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
        ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);

        LineRenderer3D renderer = new LineRenderer3D();
        if (tooltips) {
            renderer.setBaseToolTipGenerator(
                    new StandardCategoryToolTipGenerator());
        }
        if (urls) {
            renderer.setBaseItemURLGenerator(
                    new StandardCategoryURLGenerator());
        }
        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,
                renderer);
        plot.setOrientation(orientation);
        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=1486 endLine=1518 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
            boolean legend, boolean tooltips, boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        NumberAxis xAxis = new NumberAxis(xAxisLabel);
        xAxis.setAutoRangeIncludesZero(false);
        NumberAxis yAxis = new NumberAxis(yAxisLabel);
        yAxis.setAutoRangeIncludesZero(false);

        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);

        XYToolTipGenerator toolTipGenerator = null;
        if (tooltips) {
            toolTipGenerator = new StandardXYToolTipGenerator();
        }

        XYURLGenerator urlGenerator = null;
        if (urls) {
            urlGenerator = new StandardXYURLGenerator();
        }
        XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
        renderer.setBaseToolTipGenerator(toolTipGenerator);
        renderer.setURLGenerator(urlGenerator);
        plot.setRenderer(renderer);
        plot.setOrientation(orientation);

        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=1617 endLine=1646 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                               boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        NumberAxis xAxis = new NumberAxis(xAxisLabel);
        xAxis.setAutoRangeIncludesZero(false);
        NumberAxis yAxis = new NumberAxis(yAxisLabel);
        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
        plot.setOrientation(orientation);
        plot.setForegroundAlpha(0.5f);

        XYToolTipGenerator tipGenerator = null;
        if (tooltips) {
            tipGenerator = new StandardXYToolTipGenerator();
        }

        XYURLGenerator urlGenerator = null;
        if (urls) {
            urlGenerator = new StandardXYURLGenerator();
        }

        plot.setRenderer(new XYAreaRenderer(XYAreaRenderer.AREA, tipGenerator,
                urlGenerator));
        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=1673 endLine=1705 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                                    boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        NumberAxis xAxis = new NumberAxis(xAxisLabel);
        xAxis.setAutoRangeIncludesZero(false);
        xAxis.setLowerMargin(0.0);
        xAxis.setUpperMargin(0.0);
        NumberAxis yAxis = new NumberAxis(yAxisLabel);
        XYToolTipGenerator toolTipGenerator = null;
        if (tooltips) {
            toolTipGenerator = new StandardXYToolTipGenerator();
        }

        XYURLGenerator urlGenerator = null;
        if (urls) {
            urlGenerator = new StandardXYURLGenerator();
        }
        StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2(
                toolTipGenerator, urlGenerator);
        renderer.setOutline(true);
        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
        plot.setOrientation(orientation);

        plot.setRangeAxis(yAxis);  // forces recalculation of the axis range

        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=1730 endLine=1753 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                               boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        NumberAxis xAxis = new NumberAxis(xAxisLabel);
        xAxis.setAutoRangeIncludesZero(false);
        NumberAxis yAxis = new NumberAxis(yAxisLabel);
        XYItemRenderer renderer = new XYLineAndShapeRenderer(true, false);
        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
        plot.setOrientation(orientation);
        if (tooltips) {
            renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
        }
        if (urls) {
            renderer.setURLGenerator(new StandardXYURLGenerator());
        }

        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=1777 endLine=1808 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                               boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        DateAxis xAxis = new DateAxis(xAxisLabel);
        NumberAxis yAxis = new NumberAxis(yAxisLabel);
        yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        XYToolTipGenerator toolTipGenerator = null;
        if (tooltips) {
            toolTipGenerator = new StandardXYToolTipGenerator();
        }

        XYURLGenerator urlGenerator = null;
        if (urls) {
            urlGenerator = new StandardXYURLGenerator();
        }
        XYItemRenderer renderer = new XYStepRenderer(toolTipGenerator,
                urlGenerator);

        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
        plot.setRenderer(renderer);
        plot.setOrientation(orientation);
        plot.setDomainCrosshairVisible(false);
        plot.setRangeCrosshairVisible(false);
        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=1832 endLine=1863 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                                   boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        NumberAxis xAxis = new NumberAxis(xAxisLabel);
        xAxis.setAutoRangeIncludesZero(false);
        NumberAxis yAxis = new NumberAxis(yAxisLabel);

        XYToolTipGenerator toolTipGenerator = null;
        if (tooltips) {
            toolTipGenerator = new StandardXYToolTipGenerator();
        }

        XYURLGenerator urlGenerator = null;
        if (urls) {
            urlGenerator = new StandardXYURLGenerator();
        }
        XYItemRenderer renderer = new XYStepAreaRenderer(
                XYStepAreaRenderer.AREA_AND_SHAPES, toolTipGenerator,
                urlGenerator);

        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
        plot.setRenderer(renderer);
        plot.setOrientation(orientation);
        plot.setDomainCrosshairVisible(false);
        plot.setRangeCrosshairVisible(false);
        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;
    }

(startLine=2049 endLine=2077 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
                                               boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        NumberAxis xAxis = new NumberAxis(xAxisLabel);
        xAxis.setAutoRangeIncludesZero(false);
        NumberAxis yAxis = new NumberAxis(yAxisLabel);
        yAxis.setAutoRangeIncludesZero(false);

        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);

        XYItemRenderer renderer = new XYBubbleRenderer(
                XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
        if (tooltips) {
            renderer.setBaseToolTipGenerator(new StandardXYZToolTipGenerator());
        }
        if (urls) {
            renderer.setURLGenerator(new StandardXYZURLGenerator());
        }
        plot.setRenderer(renderer);
        plot.setOrientation(orientation);

        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

(startLine=2099 endLine=2125 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00287/source/org/jfree/chart/ChartFactory.java)
            boolean urls) {

        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
        NumberAxis xAxis = new NumberAxis(xAxisLabel);
        xAxis.setAutoRangeIncludesZero(false);
        ValueAxis yAxis = new NumberAxis(yAxisLabel);

        XYItemRenderer renderer = new XYBarRenderer();
        if (tooltips) {
            renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
        }
        if (urls) {
            renderer.setURLGenerator(new StandardXYURLGenerator());
        }

        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
        plot.setOrientation(orientation);
        plot.setDomainZeroBaselineVisible(true);
        plot.setRangeZeroBaselineVisible(true);
        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
                plot, legend);
        currentTheme.apply(chart);
        return chart;

    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=1685 endLine=1726 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMinimumDomainValue(XYDataset dataset) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Number result = null;
        // if the dataset implements DomainInfo, life is easy
        if (dataset instanceof DomainInfo) {
            DomainInfo info = (DomainInfo) dataset;
            return new Double(info.getDomainLowerBound(true));
        }
        else {
            double minimum = Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {

                    double value;
                    if (dataset instanceof IntervalXYDataset) {
                        IntervalXYDataset intervalXYData
                            = (IntervalXYDataset) dataset;
                        value = intervalXYData.getStartXValue(series, item);
                    }
                    else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!Double.isNaN(value)) {
                        minimum = Math.min(minimum, value);
                    }

                }
            }
            if (minimum == Double.POSITIVE_INFINITY) {
                result = null;
            }
            else {
                result = new Double(minimum);
            }
        }

        return result;
    }

(startLine=1740 endLine=1783 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMaximumDomainValue(XYDataset dataset) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Number result = null;
        // if the dataset implements DomainInfo, life is easy
        if (dataset instanceof DomainInfo) {
            DomainInfo info = (DomainInfo) dataset;
            return new Double(info.getDomainUpperBound(true));
        }

        // hasn't implemented DomainInfo, so iterate...
        else {
            double maximum = Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {

                    double value;
                    if (dataset instanceof IntervalXYDataset) {
                        IntervalXYDataset intervalXYData
                            = (IntervalXYDataset) dataset;
                        value = intervalXYData.getEndXValue(series, item);
                    }
                    else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!Double.isNaN(value)) {
                        maximum = Math.max(maximum, value);
                    }
                }
            }
            if (maximum == Double.NEGATIVE_INFINITY) {
                result = null;
            }
            else {
                result = new Double(maximum);
            }

        }

        return result;
    }

(startLine=1852 endLine=1900 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMinimumRangeValue(XYDataset dataset) {

        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }

        // work out the minimum value...
        if (dataset instanceof RangeInfo) {
            RangeInfo info = (RangeInfo) dataset;
            return new Double(info.getRangeLowerBound(true));
        }

        // hasn't implemented RangeInfo, so we'll have to iterate...
        else {
            double minimum = Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {

                    double value;
                    if (dataset instanceof IntervalXYDataset) {
                        IntervalXYDataset intervalXYData
                                = (IntervalXYDataset) dataset;
                        value = intervalXYData.getStartYValue(series, item);
                    }
                    else if (dataset instanceof OHLCDataset) {
                        OHLCDataset highLowData = (OHLCDataset) dataset;
                        value = highLowData.getLowValue(series, item);
                    }
                    else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!Double.isNaN(value)) {
                        minimum = Math.min(minimum, value);
                    }

                }
            }
            if (minimum == Double.POSITIVE_INFINITY) {
                return null;
            }
            else {
                return new Double(minimum);
            }

        }

    }

(startLine=1969 endLine=2016 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMaximumRangeValue(XYDataset dataset) {

        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }

        // work out the minimum value...
        if (dataset instanceof RangeInfo) {
            RangeInfo info = (RangeInfo) dataset;
            return new Double(info.getRangeUpperBound(true));
        }

        // hasn't implemented RangeInfo, so we'll have to iterate...
        else  {

            double maximum = Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof IntervalXYDataset) {
                        IntervalXYDataset intervalXYData
                                = (IntervalXYDataset) dataset;
                        value = intervalXYData.getEndYValue(series, item);
                    }
                    else if (dataset instanceof OHLCDataset) {
                        OHLCDataset highLowData = (OHLCDataset) dataset;
                        value = highLowData.getHighValue(series, item);
                    }
                    else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!Double.isNaN(value)) {
                        maximum = Math.max(maximum, value);
                    }
                }
            }
            if (maximum == Double.NEGATIVE_INFINITY) {
                return null;
            }
            else {
                return new Double(maximum);
            }

        }

    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=1797 endLine=1838 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMinimumRangeValue(CategoryDataset dataset) {

        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }

        if (dataset instanceof RangeInfo) {
            RangeInfo info = (RangeInfo) dataset;
            return new Double(info.getRangeLowerBound(true));
        }

        // hasn't implemented RangeInfo, so we'll have to iterate...
        else {
            double minimum = Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getRowCount();
            int itemCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                for (int item = 0; item < itemCount; item++) {
                    Number value;
                    if (dataset instanceof IntervalCategoryDataset) {
                        IntervalCategoryDataset icd
                                = (IntervalCategoryDataset) dataset;
                        value = icd.getStartValue(series, item);
                    }
                    else {
                        value = dataset.getValue(series, item);
                    }
                    if (value != null) {
                        minimum = Math.min(minimum, value.doubleValue());
                    }
                }
            }
            if (minimum == Double.POSITIVE_INFINITY) {
                return null;
            }
            else {
                return new Double(minimum);
            }

        }

    }

(startLine=1913 endLine=1956 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMaximumRangeValue(CategoryDataset dataset) {

        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }

        // work out the minimum value...
        if (dataset instanceof RangeInfo) {
            RangeInfo info = (RangeInfo) dataset;
            return new Double(info.getRangeUpperBound(true));
        }

        // hasn't implemented RangeInfo, so we'll have to iterate...
        else {

            double maximum = Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getRowCount();
            int itemCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                for (int item = 0; item < itemCount; item++) {
                    Number value;
                    if (dataset instanceof IntervalCategoryDataset) {
                        IntervalCategoryDataset icd
                            = (IntervalCategoryDataset) dataset;
                        value = icd.getEndValue(series, item);
                    }
                    else {
                        value = dataset.getValue(series, item);
                    }
                    if (value != null) {
                        maximum = Math.max(maximum, value.doubleValue());
                    }
                }
            }
            if (maximum == Double.NEGATIVE_INFINITY) {
                return null;
            }
            else {
                return new Double(maximum);
            }

        }

    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=1852 endLine=1900 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMinimumRangeValue(XYDataset dataset) {

        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }

        // work out the minimum value...
        if (dataset instanceof RangeInfo) {
            RangeInfo info = (RangeInfo) dataset;
            return new Double(info.getRangeLowerBound(true));
        }

        // hasn't implemented RangeInfo, so we'll have to iterate...
        else {
            double minimum = Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {

                    double value;
                    if (dataset instanceof IntervalXYDataset) {
                        IntervalXYDataset intervalXYData
                                = (IntervalXYDataset) dataset;
                        value = intervalXYData.getStartYValue(series, item);
                    }
                    else if (dataset instanceof OHLCDataset) {
                        OHLCDataset highLowData = (OHLCDataset) dataset;
                        value = highLowData.getLowValue(series, item);
                    }
                    else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!Double.isNaN(value)) {
                        minimum = Math.min(minimum, value);
                    }

                }
            }
            if (minimum == Double.POSITIVE_INFINITY) {
                return null;
            }
            else {
                return new Double(minimum);
            }

        }

    }

(startLine=1969 endLine=2016 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMaximumRangeValue(XYDataset dataset) {

        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }

        // work out the minimum value...
        if (dataset instanceof RangeInfo) {
            RangeInfo info = (RangeInfo) dataset;
            return new Double(info.getRangeUpperBound(true));
        }

        // hasn't implemented RangeInfo, so we'll have to iterate...
        else  {

            double maximum = Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof IntervalXYDataset) {
                        IntervalXYDataset intervalXYData
                                = (IntervalXYDataset) dataset;
                        value = intervalXYData.getEndYValue(series, item);
                    }
                    else if (dataset instanceof OHLCDataset) {
                        OHLCDataset highLowData = (OHLCDataset) dataset;
                        value = highLowData.getHighValue(series, item);
                    }
                    else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!Double.isNaN(value)) {
                        maximum = Math.max(maximum, value);
                    }
                }
            }
            if (maximum == Double.NEGATIVE_INFINITY) {
                return null;
            }
            else {
                return new Double(maximum);
            }

        }

    }

(startLine=1685 endLine=1726 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMinimumDomainValue(XYDataset dataset) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Number result = null;
        // if the dataset implements DomainInfo, life is easy
        if (dataset instanceof DomainInfo) {
            DomainInfo info = (DomainInfo) dataset;
            return new Double(info.getDomainLowerBound(true));
        }
        else {
            double minimum = Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {

                    double value;
                    if (dataset instanceof IntervalXYDataset) {
                        IntervalXYDataset intervalXYData
                            = (IntervalXYDataset) dataset;
                        value = intervalXYData.getStartXValue(series, item);
                    }
                    else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!Double.isNaN(value)) {
                        minimum = Math.min(minimum, value);
                    }

                }
            }
            if (minimum == Double.POSITIVE_INFINITY) {
                result = null;
            }
            else {
                result = new Double(minimum);
            }
        }

        return result;
    }

(startLine=1740 endLine=1783 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMaximumDomainValue(XYDataset dataset) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Number result = null;
        // if the dataset implements DomainInfo, life is easy
        if (dataset instanceof DomainInfo) {
            DomainInfo info = (DomainInfo) dataset;
            return new Double(info.getDomainUpperBound(true));
        }

        // hasn't implemented DomainInfo, so iterate...
        else {
            double maximum = Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {

                    double value;
                    if (dataset instanceof IntervalXYDataset) {
                        IntervalXYDataset intervalXYData
                            = (IntervalXYDataset) dataset;
                        value = intervalXYData.getEndXValue(series, item);
                    }
                    else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!Double.isNaN(value)) {
                        maximum = Math.max(maximum, value);
                    }
                }
            }
            if (maximum == Double.NEGATIVE_INFINITY) {
                result = null;
            }
            else {
                result = new Double(maximum);
            }

        }

        return result;
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=2150 endLine=2178 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMinimumStackedRangeValue(CategoryDataset dataset) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Number result = null;
        boolean hasValidData = false;
        double minimum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value < 0.0) {
                        total = total + value;
                        // '+', remember value is negative
                    }
                }
            }
            minimum = Math.min(minimum, total);
        }
        if (hasValidData) {
            result = new Double(minimum);
        }
        return result;
    }

(startLine=2190 endLine=2217 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
    public static Number findMaximumStackedRangeValue(CategoryDataset dataset) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Number result = null;
        boolean hasValidData = false;
        double maximum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        total = total + value;
                    }
                }
            }
            maximum = Math.max(maximum, total);
        }
        if (hasValidData) {
            result = new Double(maximum);
        }
        return result;
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=1437 endLine=1486 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/plot/Plot.java)
            AxisLocation location, PlotOrientation orientation) {

        if (location == null) {
            throw new IllegalArgumentException("Null 'location' argument.");
        }
        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }

        RectangleEdge result = null;

        if (location == AxisLocation.TOP_OR_RIGHT) {
            if (orientation == PlotOrientation.HORIZONTAL) {
                result = RectangleEdge.RIGHT;
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                result = RectangleEdge.TOP;
            }
        }
        else if (location == AxisLocation.TOP_OR_LEFT) {
            if (orientation == PlotOrientation.HORIZONTAL) {
                result = RectangleEdge.LEFT;
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                result = RectangleEdge.TOP;
            }
        }
        else if (location == AxisLocation.BOTTOM_OR_RIGHT) {
            if (orientation == PlotOrientation.HORIZONTAL) {
                result = RectangleEdge.RIGHT;
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                result = RectangleEdge.BOTTOM;
            }
        }
        else if (location == AxisLocation.BOTTOM_OR_LEFT) {
            if (orientation == PlotOrientation.HORIZONTAL) {
                result = RectangleEdge.LEFT;
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                result = RectangleEdge.BOTTOM;
            }
        }
        // the above should cover all the options...
        if (result == null) {
            throw new IllegalStateException("resolveDomainAxisLocation()");
        }
        return result;

    }

(startLine=1497 endLine=1547 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/plot/Plot.java)
            AxisLocation location, PlotOrientation orientation) {

        if (location == null) {
            throw new IllegalArgumentException("Null 'location' argument.");
        }
        if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }

        RectangleEdge result = null;

        if (location == AxisLocation.TOP_OR_RIGHT) {
            if (orientation == PlotOrientation.HORIZONTAL) {
                result = RectangleEdge.TOP;
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                result = RectangleEdge.RIGHT;
            }
        }
        else if (location == AxisLocation.TOP_OR_LEFT) {
            if (orientation == PlotOrientation.HORIZONTAL) {
                result = RectangleEdge.TOP;
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                result = RectangleEdge.LEFT;
            }
        }
        else if (location == AxisLocation.BOTTOM_OR_RIGHT) {
            if (orientation == PlotOrientation.HORIZONTAL) {
                result = RectangleEdge.BOTTOM;
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                result = RectangleEdge.RIGHT;
            }
        }
        else if (location == AxisLocation.BOTTOM_OR_LEFT) {
            if (orientation == PlotOrientation.HORIZONTAL) {
                result = RectangleEdge.BOTTOM;
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                result = RectangleEdge.LEFT;
            }
        }

        // the above should cover all the options...
        if (result == null) {
            throw new IllegalStateException("resolveRangeAxisLocation()");
        }
        return result;

    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=312 endLine=327 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/axis/CategoryLabelPositions.java)
            CategoryLabelPositions base, CategoryLabelPosition top) {

        if (base == null) {
            throw new IllegalArgumentException("Null 'base' argument.");
        }
        if (top == null) {
            throw new IllegalArgumentException("Null 'top' argument.");
        }

        return new CategoryLabelPositions(
            top,
            base.getLabelPosition(RectangleEdge.BOTTOM),
            base.getLabelPosition(RectangleEdge.LEFT),
            base.getLabelPosition(RectangleEdge.RIGHT)
        );
    }

(startLine=339 endLine=354 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/axis/CategoryLabelPositions.java)
            CategoryLabelPositions base, CategoryLabelPosition bottom) {

        if (base == null) {
            throw new IllegalArgumentException("Null 'base' argument.");
        }
        if (bottom == null) {
            throw new IllegalArgumentException("Null 'bottom' argument.");
        }

        return new CategoryLabelPositions(
            base.getLabelPosition(RectangleEdge.TOP),
            bottom,
            base.getLabelPosition(RectangleEdge.LEFT),
            base.getLabelPosition(RectangleEdge.RIGHT)
        );
    }

(startLine=366 endLine=381 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/axis/CategoryLabelPositions.java)
            CategoryLabelPositions base, CategoryLabelPosition left) {

        if (base == null) {
            throw new IllegalArgumentException("Null 'base' argument.");
        }
        if (left == null) {
            throw new IllegalArgumentException("Null 'left' argument.");
        }

        return new CategoryLabelPositions(
            base.getLabelPosition(RectangleEdge.TOP),
            base.getLabelPosition(RectangleEdge.BOTTOM),
            left,
            base.getLabelPosition(RectangleEdge.RIGHT)
        );
    }

(startLine=393 endLine=408 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/axis/CategoryLabelPositions.java)
            CategoryLabelPositions base, CategoryLabelPosition right) {

        if (base == null) {
            throw new IllegalArgumentException("Null 'base' argument.");
        }
        if (right == null) {
            throw new IllegalArgumentException("Null 'right' argument.");
        }

        return new CategoryLabelPositions(
            base.getLabelPosition(RectangleEdge.TOP),
            base.getLabelPosition(RectangleEdge.BOTTOM),
            base.getLabelPosition(RectangleEdge.LEFT),
            right
        );
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=664 endLine=681 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
                                         boolean includeInterval) {

        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }

        Range result = null;
        // if the dataset implements DomainInfo, life is easier
        if (dataset instanceof DomainInfo) {
            DomainInfo info = (DomainInfo) dataset;
            result = info.getDomainBounds(includeInterval);
        }
        else {
            result = iterateDomainBounds(dataset, includeInterval);
        }
        return result;

    }

(startLine=699 endLine=713 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
            List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Range result = null;
        if (dataset instanceof XYDomainInfo) {
            XYDomainInfo info = (XYDomainInfo) dataset;
            result = info.getDomainBounds(visibleSeriesKeys, includeInterval);
        }
        else {
            result = iterateToFindDomainBounds(dataset, visibleSeriesKeys,
                    includeInterval);
        }
        return result;
    }

(startLine=815 endLine=828 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
                                        boolean includeInterval) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Range result = null;
        if (dataset instanceof RangeInfo) {
            RangeInfo info = (RangeInfo) dataset;
            result = info.getRangeBounds(includeInterval);
        }
        else {
            result = iterateRangeBounds(dataset, includeInterval);
        }
        return result;
    }

(startLine=845 endLine=859 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
            List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Range result = null;
        if (dataset instanceof CategoryRangeInfo) {
            CategoryRangeInfo info = (CategoryRangeInfo) dataset;
            result = info.getRangeBounds(visibleSeriesKeys, includeInterval);
        }
        else {
            result = iterateToFindRangeBounds(dataset, visibleSeriesKeys,
                    includeInterval);
        }
        return result;
    }

(startLine=885 endLine=898 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
                                        boolean includeInterval) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Range result = null;
        if (dataset instanceof RangeInfo) {
            RangeInfo info = (RangeInfo) dataset;
            result = info.getRangeBounds(includeInterval);
        }
        else {
            result = iterateRangeBounds(dataset, includeInterval);
        }
        return result;
    }

(startLine=917 endLine=932 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/data/general/DatasetUtilities.java)
            List visibleSeriesKeys, Range xRange, boolean includeInterval) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        Range result = null;
        if (dataset instanceof XYRangeInfo) {
            XYRangeInfo info = (XYRangeInfo) dataset;
            result = info.getRangeBounds(visibleSeriesKeys, xRange,
                    includeInterval);
        }
        else {
            result = iterateToFindRangeBounds(dataset, visibleSeriesKeys,
                    xRange, includeInterval);
        }
        return result;
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=345 endLine=363 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/ChartUtilities.java)
           int compression) throws IOException {

        if (file == null) {
            throw new IllegalArgumentException("Null 'file' argument.");
        }
        if (chart == null) {
            throw new IllegalArgumentException("Null 'chart' argument.");
        }

        OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
        try {
            writeChartAsPNG(out, chart, width, height, info, encodeAlpha,
                    compression);
        }
        finally {
            out.close();
        }

    }

(startLine=512 endLine=528 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/ChartUtilities.java)
            int width, int height, ChartRenderingInfo info) throws IOException {

        if (file == null) {
            throw new IllegalArgumentException("Null 'file' argument.");
        }
        if (chart == null) {
            throw new IllegalArgumentException("Null 'chart' argument.");
        }
        OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
        try {
            writeChartAsJPEG(out, chart, width, height, info);
        }
        finally {
            out.close();
        }

    }

(startLine=547 endLine=565 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00288/source/org/jfree/chart/ChartUtilities.java)
            ChartRenderingInfo info) throws IOException {

        if (file == null) {
            throw new IllegalArgumentException("Null 'file' argument.");
        }
        if (chart == null) {
            throw new IllegalArgumentException("Null 'chart' argument.");
        }

        OutputStream out = new BufferedOutputStream(new FileOutputStream(
                file));
        try {
            writeChartAsJPEG(out, quality, chart, width, height, info);
        }
        finally {
            out.close();
        }

    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=181 endLine=203 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/data/statistics/BoxAndWhiskerCalculator.java)
    public static double calculateQ1(List values) {
        if (values == null) {
            throw new IllegalArgumentException("Null 'values' argument.");
        }

        double result = Double.NaN;
        int count = values.size();
        if (count > 0) {
            if (count % 2 == 1) {
                if (count > 1) {
                    result = Statistics.calculateMedian(values, 0, count / 2);
                }
                else {
                    result = Statistics.calculateMedian(values, 0, 0);
                }
            }
            else {
                result = Statistics.calculateMedian(values, 0, count / 2 - 1);
            }

        }
        return result;
    }

(startLine=216 endLine=238 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/data/statistics/BoxAndWhiskerCalculator.java)
    public static double calculateQ3(List values) {
        if (values == null) {
            throw new IllegalArgumentException("Null 'values' argument.");
        }
        double result = Double.NaN;
        int count = values.size();
        if (count > 0) {
            if (count % 2 == 1) {
                if (count > 1) {
                    result = Statistics.calculateMedian(values, count / 2,
                            count - 1);
                }
                else {
                    result = Statistics.calculateMedian(values, 0, 0);
                }
            }
            else {
                result = Statistics.calculateMedian(values, count / 2,
                        count - 1);
            }
        }
        return result;
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=151 endLine=167 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/data/DataUtilities.java)
             int[] validRows) {
        if (data == null) {
            throw new IllegalArgumentException("Null 'data' argument.");
        }
        double total = 0.0;
        int rowCount = data.getRowCount();
        for (int v = 0; v < validRows.length; v++) {
            int row = validRows[v];
            if (row < rowCount) {
                Number n = data.getValue(row, column);
                if (n != null) {
                    total += n.doubleValue();
                }
            }
        }
        return total;
    }

(startLine=206 endLine=222 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/data/DataUtilities.java)
             int[] validCols) {
        if (data == null) {
            throw new IllegalArgumentException("Null 'data' argument.");
        }
        double total = 0.0;
        int colCount = data.getColumnCount();
        for (int v = 0; v < validCols.length; v++) {
            int col = validCols[v];
            if (col < colCount) {
                Number n = data.getValue(row, col);
                if (n != null) {
                    total += n.doubleValue();
                }
            }
        }
        return total;
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=175 endLine=193 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/servlet/ServletUtilities.java)
            ChartRenderingInfo info, HttpSession session) throws IOException {

        if (chart == null) {
            throw new IllegalArgumentException("Null 'chart' argument.");
        }
        ServletUtilities.createTempDir();
        String prefix = ServletUtilities.tempFilePrefix;
        if (session == null) {
            prefix = ServletUtilities.tempOneTimeFilePrefix;
        }
        File tempFile = File.createTempFile(prefix, ".png",
                new File(System.getProperty("java.io.tmpdir")));
        ChartUtilities.saveChartAsPNG(tempFile, chart, width, height, info);
        if (session != null) {
            ServletUtilities.registerChartForDeletion(tempFile, session);
        }
        return tempFile.getName();

    }

(startLine=249 endLine=268 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/servlet/ServletUtilities.java)
            throws IOException {

        if (chart == null) {
            throw new IllegalArgumentException("Null 'chart' argument.");
        }

        ServletUtilities.createTempDir();
        String prefix = ServletUtilities.tempFilePrefix;
        if (session == null) {
            prefix = ServletUtilities.tempOneTimeFilePrefix;
        }
        File tempFile = File.createTempFile(prefix, ".jpeg",
                new File(System.getProperty("java.io.tmpdir")));
        ChartUtilities.saveChartAsJPEG(tempFile, chart, width, height, info);
        if (session != null) {
            ServletUtilities.registerChartForDeletion(tempFile, session);
        }
        return tempFile.getName();

    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=4384 endLine=4404 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/plot/XYPlot.java)
    private List getDatasetsMappedToDomainAxis(Integer axisIndex) {
        if (axisIndex == null) {
            throw new IllegalArgumentException("Null 'axisIndex' argument.");
        }
        List result = new ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            List mappedAxes = (List) this.datasetToDomainAxesMap.get(
                    new Integer(i));
            if (mappedAxes == null) {
                if (axisIndex.equals(ZERO)) {
                    result.add(this.datasets.get(i));
                }
            }
            else {
                if (mappedAxes.contains(axisIndex)) {
                    result.add(this.datasets.get(i));
                }
            }
        }
        return result;
    }

(startLine=4414 endLine=4434 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/plot/XYPlot.java)
    private List getDatasetsMappedToRangeAxis(Integer axisIndex) {
        if (axisIndex == null) {
            throw new IllegalArgumentException("Null 'axisIndex' argument.");
        }
        List result = new ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            List mappedAxes = (List) this.datasetToRangeAxesMap.get(
                    new Integer(i));
            if (mappedAxes == null) {
                if (axisIndex.equals(ZERO)) {
                    result.add(this.datasets.get(i));
                }
            }
            else {
                if (mappedAxes.contains(axisIndex)) {
                    result.add(this.datasets.get(i));
                }
            }
        }
        return result;
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=172 endLine=191 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/plot/CombinedDomainCategoryPlot.java)
    public void add(CategoryPlot subplot, int weight) {
        if (subplot == null) {
            throw new IllegalArgumentException("Null 'subplot' argument.");
        }
        if (weight < 1) {
            throw new IllegalArgumentException("Require weight >= 1.");
        }
        subplot.setParent(this);
        subplot.setWeight(weight);
        subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
        subplot.setDomainAxis(null);
        subplot.setOrientation(getOrientation());
        subplot.addChangeListener(this);
        this.subplots.add(subplot);
        CategoryAxis axis = getDomainAxis();
        if (axis != null) {
            axis.configure();
        }
        fireChangeEvent();
    }

(startLine=165 endLine=186 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/plot/CombinedRangeCategoryPlot.java)
    public void add(CategoryPlot subplot, int weight) {
        if (subplot == null) {
            throw new IllegalArgumentException("Null 'subplot' argument.");
        }
        if (weight <= 0) {
            throw new IllegalArgumentException("Require weight >= 1.");
        }
        // store the plot and its weight
        subplot.setParent(this);
        subplot.setWeight(weight);
        subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
        subplot.setRangeAxis(null);
        subplot.setOrientation(getOrientation());
        subplot.addChangeListener(this);
        this.subplots.add(subplot);
        // configure the range axis...
        ValueAxis axis = getRangeAxis();
        if (axis != null) {
            axis.configure();
        }
        fireChangeEvent();
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=72 endLine=150 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/renderer/RendererUtilities.java)
            double xLow, double xHigh) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        if (xLow >= xHigh) {
            throw new IllegalArgumentException("Requires xLow < xHigh.");
        }
        int itemCount = dataset.getItemCount(series);
        if (itemCount <= 1) {
            return 0;
        }
        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {
            // for data in ascending order by x-value, we are (broadly) looking
            // for the index of the highest x-value that is less than xLow
            int low = 0;
            int high = itemCount - 1;
            double lowValue = dataset.getXValue(series, low);
            if (lowValue >= xLow) {
                // special case where the lowest x-value is >= xLow
                return low;
            }
            double highValue = dataset.getXValue(series, high);
            if (highValue < xLow) {
                // special case where the highest x-value is < xLow
                return high;
            }
            while (high - low > 1) {
                int mid = (low + high) / 2;
                double midV = dataset.getXValue(series, mid);
                if (midV >= xLow) {
                    high = mid;
                }
                else {
                    low = mid;
                }
            }
            return high;
        }
        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {
            // when the x-values are sorted in descending order, the lower
            // bound is found by calculating relative to the xHigh value
            int low = 0;
            int high = itemCount - 1;
            double lowValue = dataset.getXValue(series, low);
            if (lowValue <= xHigh) {
                return low;
            }
            double highValue = dataset.getXValue(series, high);
            if (highValue > xHigh) {
                return high;
            }
            while (high - low > 1) {
                int mid = (low + high) / 2;
                double midV = dataset.getXValue(series, mid);
                if (midV > xHigh) {
                    low = mid;
                }
                else {
                    high = mid;
                }
            }
            return high;
        }
        else {
            // we don't know anything about the ordering of the x-values,
            // but we can still skip any initial values that fall outside the
            // range...
            int index = 0;
            // skip any items that don't need including...
            double x = dataset.getXValue(series, index);
            while (index < itemCount && x < xLow) {
                index++;
                if (index < itemCount) {
                    x = dataset.getXValue(series, index);
                }
            }
            return Math.min(Math.max(0, index), itemCount - 1);
        }
    }

(startLine=168 endLine=244 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/renderer/RendererUtilities.java)
            double xLow, double xHigh) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        if (xLow >= xHigh) {
            throw new IllegalArgumentException("Requires xLow < xHigh.");
        }
        int itemCount = dataset.getItemCount(series);
        if (itemCount <= 1) {
            return 0;
        }
        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {
            int low = 0;
            int high = itemCount - 1;
            double lowValue = dataset.getXValue(series, low);
            if (lowValue > xHigh) {
                return low;
            }
            double highValue = dataset.getXValue(series, high);
            if (highValue <= xHigh) {
                return high;
            }
            int mid = (low + high) / 2;
            while (high - low > 1) {
                double midV = dataset.getXValue(series, mid);
                if (midV <= xHigh) {
                    low = mid;
                }
                else {
                    high = mid;
                }
                mid = (low + high) / 2;
            }
            return mid;
        }
        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {
            // when the x-values are descending, the upper bound is found by
            // comparing against xLow
            int low = 0;
            int high = itemCount - 1;
            int mid = (low + high) / 2;
            double lowValue = dataset.getXValue(series, low);
            if (lowValue < xLow) {
                return low;
            }
            double highValue = dataset.getXValue(series, high);
            if (highValue >= xLow) {
                return high;
            }
            while (high - low > 1) {
                double midV = dataset.getXValue(series, mid);
                if (midV >= xLow) {
                    low = mid;
                }
                else {
                    high = mid;
                }
                mid = (low + high) / 2;
            }
            return mid;
        }
        else {
            // we don't know anything about the ordering of the x-values,
            // but we can still skip any trailing values that fall outside the
            // range...
            int index = itemCount - 1;
            // skip any items that don't need including...
            double x = dataset.getXValue(series, index);
            while (index >= 0 && x > xHigh) {
                index--;
                if (index >= 0) {
                    x = dataset.getXValue(series, index);
                }
            }
            return Math.max(index, 0);
        }
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=102 endLine=147 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/renderer/xy/VectorRenderer.java)
    public Range findDomainBounds(XYDataset dataset) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        double minimum = Double.POSITIVE_INFINITY;
        double maximum = Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        double lvalue;
        double uvalue;
        if (dataset instanceof VectorXYDataset) {
            VectorXYDataset vdataset = (VectorXYDataset) dataset;
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double delta = vdataset.getVectorXValue(series, item);
                    if (delta < 0.0) {
                        uvalue = vdataset.getXValue(series, item);
                        lvalue = uvalue + delta;
                    }
                    else {
                        lvalue = vdataset.getXValue(series, item);
                        uvalue = lvalue + delta;
                    }
                    minimum = Math.min(minimum, lvalue);
                    maximum = Math.max(maximum, uvalue);
                }
            }
        }
        else {
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    lvalue = dataset.getXValue(series, item);
                    uvalue = lvalue;
                    minimum = Math.min(minimum, lvalue);
                    maximum = Math.max(maximum, uvalue);
                }
            }
        }
        if (minimum > maximum) {
            return null;
        }
        else {
            return new Range(minimum, maximum);
        }
    }

(startLine=158 endLine=203 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/renderer/xy/VectorRenderer.java)
    public Range findRangeBounds(XYDataset dataset) {
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        double minimum = Double.POSITIVE_INFINITY;
        double maximum = Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        double lvalue;
        double uvalue;
        if (dataset instanceof VectorXYDataset) {
            VectorXYDataset vdataset = (VectorXYDataset) dataset;
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double delta = vdataset.getVectorYValue(series, item);
                    if (delta < 0.0) {
                        uvalue = vdataset.getYValue(series, item);
                        lvalue = uvalue + delta;
                    }
                    else {
                        lvalue = vdataset.getYValue(series, item);
                        uvalue = lvalue + delta;
                    }
                    minimum = Math.min(minimum, lvalue);
                    maximum = Math.max(maximum, uvalue);
                }
            }
        }
        else {
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    lvalue = dataset.getYValue(series, item);
                    uvalue = lvalue;
                    minimum = Math.min(minimum, lvalue);
                    maximum = Math.max(maximum, uvalue);
                }
            }
        }
        if (minimum > maximum) {
            return null;
        }
        else {
            return new Range(minimum, maximum);
        }
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=111 endLine=128 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/urls/StandardCategoryURLGenerator.java)
                                        String categoryParameterName) {

        if (prefix == null) {
            throw new IllegalArgumentException("Null 'prefix' argument.");
        }
        if (seriesParameterName == null) {
            throw new IllegalArgumentException(
                    "Null 'seriesParameterName' argument.");
        }
        if (categoryParameterName == null) {
            throw new IllegalArgumentException(
                    "Null 'categoryParameterName' argument.");
        }
        this.prefix = prefix;
        this.seriesParameterName = seriesParameterName;
        this.categoryParameterName = categoryParameterName;

    }

(startLine=113 endLine=128 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/urls/StandardXYURLGenerator.java)
                                  String itemParameterName) {
        if (prefix == null) {
            throw new IllegalArgumentException("Null 'prefix' argument.");
        }
        if (seriesParameterName == null) {
            throw new IllegalArgumentException(
                    "Null 'seriesParameterName' argument.");
        }
        if (itemParameterName == null) {
            throw new IllegalArgumentException(
                    "Null 'itemParameterName' argument.");
        }
        this.prefix = prefix;
        this.seriesParameterName = seriesParameterName;
        this.itemParameterName = itemParameterName;
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=232 endLine=241 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/data/DataUtilities.java)
    public static Number[] createNumberArray(double[] data) {
        if (data == null) {
            throw new IllegalArgumentException("Null 'data' argument.");
        }
        Number[] result = new Number[data.length];
        for (int i = 0; i < data.length; i++) {
            result[i] = new Double(data[i]);
        }
        return result;
    }

(startLine=251 endLine=261 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/data/DataUtilities.java)
    public static Number[][] createNumberArray2D(double[][] data) {
        if (data == null) {
            throw new IllegalArgumentException("Null 'data' argument.");
        }
        int l1 = data.length;
        Number[][] result = new Number[l1][];
        for (int i = 0; i < l1; i++) {
            result[i] = createNumberArray(data[i]);
        }
        return result;
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=172 endLine=187 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/data/time/Hour.java)
    public Hour(Date time, TimeZone zone, Locale locale) {
        if (time == null) {
            throw new IllegalArgumentException("Null 'time' argument.");
        }
        if (zone == null) {
            throw new IllegalArgumentException("Null 'zone' argument.");
        }
        if (locale == null) {
            throw new IllegalArgumentException("Null 'locale' argument.");
        }
        Calendar calendar = Calendar.getInstance(zone, locale);
        calendar.setTime(time);
        this.hour = (byte) calendar.get(Calendar.HOUR_OF_DAY);
        this.day = new Day(time, zone, locale);
        peg(calendar);
    }

(startLine=163 endLine=180 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/data/time/Minute.java)
    public Minute(Date time, TimeZone zone, Locale locale) {
        if (time == null) {
            throw new IllegalArgumentException("Null 'time' argument.");
        }
        if (zone == null) {
            throw new IllegalArgumentException("Null 'zone' argument.");
        }
        if (locale == null) {
            throw new IllegalArgumentException("Null 'locale' argument.");
        }
        Calendar calendar = Calendar.getInstance(zone, locale);
        calendar.setTime(time);
        int min = calendar.get(Calendar.MINUTE);
        this.minute = (byte) min;
        this.hour = (byte) calendar.get(Calendar.HOUR_OF_DAY);
        this.day = new Day(time, zone, locale);
        peg(calendar);
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=127 endLine=139 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/entity/CategoryItemEntity.java)
                              int series, Object category, int categoryIndex) {

        super(area, toolTipText, urlText);
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        this.dataset = dataset;
        this.series = series;
        this.category = category;
        this.categoryIndex = categoryIndex;
        this.rowKey = dataset.getRowKey(series);
        this.columnKey = dataset.getColumnKey(categoryIndex);
    }

(startLine=154 endLine=167 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00289/source/org/jfree/chart/entity/CategoryItemEntity.java)
            CategoryDataset dataset, Comparable rowKey, Comparable columnKey) {
        super(area, toolTipText, urlText);
        if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
        this.dataset = dataset;
        this.rowKey = rowKey;
        this.columnKey = columnKey;

        // populate the deprecated fields
        this.series = dataset.getRowIndex(rowKey);
        this.category = columnKey;
        this.categoryIndex = dataset.getColumnIndex(columnKey);
    }

commonMethod: 
(startLine=50 endLine=67 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00290/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an <code>IllegalArgumentException</code> if the supplied 
     * <code>param</code> is <code>null</code>.
     *
     * @param param  the parameter to check (<code>null</code> permitted).
     * @param name  the name of the parameter (to use in the exception message
     *     if <code>param</code> is <code>null</code>).
     *
     * @throws IllegalArgumentException  if <code>param</code> is 
     *     <code>null</code>.
     *
     * @since 1.0.14
     */
    public static void nullNotPermitted(Object param, String name) {
        if (param == null) {
            throw new IllegalArgumentException("Null '" + name + "' argument");
        }
    }


, Instance #
frags: 
(startLine=140 endLine=153 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00315/tests/org/jfree/chart/ChartRenderingInfoTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ChartRenderingInfo i1 = new ChartRenderingInfo();
        i1.setChartArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));
        ChartRenderingInfo i2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        i2 = (ChartRenderingInfo) in.readObject();
        in.close();
        assertEquals(i1, i2);
    }

(startLine=158 endLine=173 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00315/tests/org/jfree/chart/ChartRenderingInfoTest.java)
    public void testSerialization2() throws IOException, ClassNotFoundException {
        ChartRenderingInfo i1 = new ChartRenderingInfo();
        i1.getPlotInfo().setDataArea(new Rectangle2D.Double(1.0, 2.0, 3.0,
                4.0));
        ChartRenderingInfo i2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        i2 = (ChartRenderingInfo) in.readObject();
        in.close();
        assertEquals(i1, i2);
        assertEquals(i2, i2.getPlotInfo().getOwner());
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00316/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=291 endLine=312 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00315/tests/org/jfree/chart/JFreeChartTest.java)
    public void testSerialization1() throws IOException, ClassNotFoundException {
        DefaultPieDataset data = new DefaultPieDataset();
        data.setValue("Type 1", 54.5);
        data.setValue("Type 2", 23.9);
        data.setValue("Type 3", 45.8);

        JFreeChart c1 = ChartFactory.createPieChart("Test", data, true, true,
                true);
        JFreeChart c2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(c1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        c2 = (JFreeChart) in.readObject();
        in.close();
        assertEquals(c1, c2);
        LegendTitle lt2 = c2.getLegend();
        assertTrue(lt2.getSources()[0] == c2.getPlot());
    }

(startLine=317 endLine=336 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00315/tests/org/jfree/chart/JFreeChartTest.java)
    public void testSerialization2() throws IOException, ClassNotFoundException {
        DefaultPieDataset data = new DefaultPieDataset();
        data.setValue("Type 1", 54.5);
        data.setValue("Type 2", 23.9);
        data.setValue("Type 3", 45.8);

        JFreeChart c1 = ChartFactory.createPieChart3D("Test", data, true, true,
                true);
        JFreeChart c2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(c1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        c2 = (JFreeChart) in.readObject();
        in.close();
        assertEquals(c1, c2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00316/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=172 endLine=185 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00316/tests/org/jfree/chart/PaintMapTest.java)
            ClassNotFoundException {
        PaintMap m1 = new PaintMap();
        PaintMap m2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(m1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        m2 = (PaintMap) in.readObject();
        in.close();
        assertEquals(m1, m2);
    }

(startLine=166 endLine=178 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00316/tests/org/jfree/chart/StrokeMapTest.java)
    public void testSerialization1() throws IOException, ClassNotFoundException {
        StrokeMap m1 = new StrokeMap();
        StrokeMap m2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(m1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        m2 = (StrokeMap) in.readObject();
        in.close();
        assertEquals(m1, m2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=193 endLine=207 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00316/tests/org/jfree/chart/annotations/XYShapeAnnotationTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYShapeAnnotation a1 = new XYShapeAnnotation(
                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0),
                new BasicStroke(1.2f), Color.red, Color.blue);
        XYShapeAnnotation a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        a2 = (XYShapeAnnotation) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=184 endLine=198 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00316/tests/org/jfree/chart/annotations/XYBoxAnnotationTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYBoxAnnotation a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0,
                new BasicStroke(1.2f), Color.red, Color.blue);
        XYBoxAnnotation a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (XYBoxAnnotation) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=200 endLine=214 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00316/tests/org/jfree/chart/annotations/CategoryPointerAnnotationTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CategoryPointerAnnotation a1 = new CategoryPointerAnnotation("Label",
                "A", 20.0, Math.PI);
        CategoryPointerAnnotation a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (CategoryPointerAnnotation) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=203 endLine=219 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00316/tests/org/jfree/chart/annotations/XYPointerAnnotationTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        XYPointerAnnotation a1 = new XYPointerAnnotation("Label", 10.0, 20.0,
                Math.PI);
        XYPointerAnnotation a2 = null;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (XYPointerAnnotation) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=198 endLine=211 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/CategoryLabelPositionsTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CategoryLabelPositions p1 = CategoryLabelPositions.STANDARD;
        CategoryLabelPositions p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (CategoryLabelPositions) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

(startLine=170 endLine=182 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/CategoryLabelPositionTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CategoryLabelPosition p1 = new CategoryLabelPosition();
        CategoryLabelPosition p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        p2 = (CategoryLabelPosition) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

(startLine=109 endLine=123 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/DateTickMarkPositionTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DateTickMarkPosition p1 = DateTickMarkPosition.MIDDLE;
        DateTickMarkPosition p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (DateTickMarkPosition) in.readObject();
        in.close();
        assertEquals(p1, p2);
        assertTrue(p1 == p2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=107 endLine=120 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/CategoryAnchorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CategoryAnchor a1 = CategoryAnchor.MIDDLE;
        CategoryAnchor a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        a2 = (CategoryAnchor) in.readObject();
        in.close();
        assertEquals(a1, a2);
        assertTrue(a1 == a2);
    }

(startLine=195 endLine=208 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/NumberAxisTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        NumberAxis a1 = new NumberAxis("Test Axis");
        NumberAxis a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (NumberAxis) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=304 endLine=317 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/DateAxisTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DateAxis a1 = new DateAxis("Test Axis");
        DateAxis a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (DateAxis) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=172 endLine=185 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/LogAxisTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        LogAxis a1 = new LogAxis("Test Axis");
        LogAxis a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (LogAxis) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=148 endLine=162 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/SubCategoryAxisTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        SubCategoryAxis a1 = new SubCategoryAxis("Test Axis");
        a1.addSubCategory("SubCategoryA");
        SubCategoryAxis a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (SubCategoryAxis) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=105 endLine=118 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/DateTickUnitTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DateTickUnit a1 = new DateTickUnit(DateTickUnit.DAY, 7);
        DateTickUnit a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        a2 = (DateTickUnit) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=128 endLine=141 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/ColorBarTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ColorBar a1 = new ColorBar("Test Axis");
        ColorBar a2 = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (ColorBar) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=94 endLine=106 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/CategoryAxis3DTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CategoryAxis3D a1 = new CategoryAxis3D("Test Axis");
        CategoryAxis3D a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        a2 = (CategoryAxis3D) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=163 endLine=176 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/CyclicNumberAxisTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CyclicNumberAxis a1 = new CyclicNumberAxis(10, 0, "Test Axis");
        CyclicNumberAxis a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (CyclicNumberAxis) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=127 endLine=140 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/LogarithmicAxisTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        LogarithmicAxis a1 = new LogarithmicAxis("Test Axis");
        LogarithmicAxis a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (LogarithmicAxis) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=83 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/NumberAxis3DTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        NumberAxis3D a1 = new NumberAxis3D("Test Axis");
        NumberAxis3D a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        a2 = (NumberAxis3D) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=92 endLine=105 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/StandardTickUnitSourceTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardTickUnitSource t1 = new StandardTickUnitSource();
        StandardTickUnitSource t2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(t1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        t2 = (StandardTickUnitSource) in.readObject();
        in.close();
        assertEquals(t1, t2);
    }

(startLine=84 endLine=97 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/TickUnitsTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        TickUnits t1 = (TickUnits) NumberAxis.createIntegerTickUnits();
        TickUnits t2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(t1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        t2 = (TickUnits) in.readObject();
        in.close();
        assertEquals(t1, t2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=173 endLine=188 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/ExtendedCategoryAxisTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ExtendedCategoryAxis a1 = new ExtendedCategoryAxis("Test");
        a1.setSubLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,
                4.0f, Color.blue));
        ExtendedCategoryAxis a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (ExtendedCategoryAxis) in.readObject();
        in.close();
        assertEquals(a1, a2);
    }

(startLine=224 endLine=240 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00317/tests/org/jfree/chart/axis/CategoryAxisTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CategoryAxis a1 = new CategoryAxis("Test Axis");
        a1.setTickLabelPaint("C1", new GradientPaint(1.0f, 2.0f, Color.red,
                3.0f, 4.0f, Color.white));
        CategoryAxis a2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(a1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        a2 = (CategoryAxis) in.readObject();
        in.close();

        assertEquals(a1, a2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=134 endLine=148 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/block/ColumnArrangementTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        FlowArrangement f1 = new FlowArrangement(HorizontalAlignment.LEFT,
                VerticalAlignment.TOP, 1.0, 2.0);
        FlowArrangement f2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(f1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        f2 = (FlowArrangement) in.readObject();
        in.close();
        assertEquals(f1, f2);
    }

(startLine=134 endLine=147 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/block/FlowArrangementTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        FlowArrangement f1 = new FlowArrangement(HorizontalAlignment.LEFT,
                VerticalAlignment.TOP, 1.0, 2.0);
        FlowArrangement f2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(f1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        f2 = (FlowArrangement) in.readObject();
        in.close();
        assertEquals(f1, f2);
    }

(startLine=119 endLine=131 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/block/GridArrangementTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        GridArrangement f1 = new GridArrangement(33, 44);
        GridArrangement f2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(f1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        f2 = (GridArrangement) in.readObject();
        in.close();
        assertEquals(f1, f2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00319/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=120 endLine=138 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/block/EmptyBlockTest.java)
    public void testSerialization() {
        EmptyBlock b1 = new EmptyBlock(1.0, 2.0);
        EmptyBlock b2 = null;
        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(b1);
            out.close();

            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            b2 = (EmptyBlock) in.readObject();
            in.close();
        }
        catch (Exception e) {
            fail(e.toString());
        }
        assertEquals(b1, b2);
    }

(startLine=137 endLine=155 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/block/BorderArrangementTest.java)
    public void testSerialization() {
        BorderArrangement b1 = new BorderArrangement();
        BorderArrangement b2 = null;
        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(b1);
            out.close();

            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            b2 = (BorderArrangement) in.readObject();
            in.close();
        }
        catch (Exception e) {
            fail(e.toString());
        }
        assertEquals(b1, b2);
    }

(startLine=167 endLine=185 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/block/AbstractBlockTest.java)
    public void testSerialization() {
        EmptyBlock b1 = new EmptyBlock(1.0, 2.0);
        EmptyBlock b2 = null;
        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(b1);
            out.close();

            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            b2 = (EmptyBlock) in.readObject();
            in.close();
        }
        catch (Exception e) {
            fail(e.toString());
        }
        assertEquals(b1, b2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00319/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=138 endLine=158 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/block/ColorBlockTest.java)
    public void testSerialization() {
        GradientPaint gp = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,
                Color.blue);
        ColorBlock b1 = new ColorBlock(gp, 1.0, 2.0);
        ColorBlock b2 = null;
        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(b1);
            out.close();

            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            b2 = (ColorBlock) in.readObject();
            in.close();
        }
        catch (Exception e) {
            fail(e.toString());
        }
        assertEquals(b1, b2);
    }

(startLine=123 endLine=143 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/block/BlockBorderTest.java)
    public void testSerialization() {
        BlockBorder b1 = new BlockBorder(new RectangleInsets(1.0, 2.0, 3.0,
                4.0), new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,
                Color.yellow));
        BlockBorder b2 = null;
        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(b1);
            out.close();

            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                    buffer.toByteArray()));
            b2 = (BlockBorder) in.readObject();
            in.close();
        }
        catch (Exception e) {
            fail(e.toString());
        }
        assertTrue(b1.equals(b2));
    }

(startLine=128 endLine=148 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00318/tests/org/jfree/chart/block/LineBorderTest.java)
    public void testSerialization() {
        LineBorder b1 = new LineBorder(new GradientPaint(1.0f, 2.0f, Color.red,
                3.0f, 4.0f, Color.yellow), new BasicStroke(1.0f),
                new RectangleInsets(1.0, 1.0, 1.0, 1.0));
        LineBorder b2 = null;
        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(b1);
            out.close();

            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                    buffer.toByteArray()));
            b2 = (LineBorder) in.readObject();
            in.close();
        }
        catch (Exception e) {
            fail(e.toString());
        }
        assertTrue(b1.equals(b2));
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00319/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=146 endLine=161 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00319/tests/org/jfree/chart/entity/PieSectionEntityTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        PieSectionEntity e1 = new PieSectionEntity(new Rectangle2D.Double(1.0,
                2.0, 3.0, 4.0), new DefaultPieDataset(), 1, 2, "Key",
                "ToolTip", "URL");
        PieSectionEntity e2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(e1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        e2 = (PieSectionEntity) in.readObject();
        in.close();
        assertEquals(e1, e2);
    }

(startLine=140 endLine=153 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00319/tests/org/jfree/chart/entity/LegendItemEntityTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        LegendItemEntity e1 = new LegendItemEntity(new Rectangle2D.Double(1.0,
                2.0, 3.0, 4.0));
        LegendItemEntity e2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(e1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        e2 = (LegendItemEntity) in.readObject();
        in.close();
        assertEquals(e1, e2);
    }

(startLine=129 endLine=142 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00319/tests/org/jfree/chart/entity/CategoryLabelEntityTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CategoryLabelEntity e1 = new CategoryLabelEntity("A",
                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), "ToolTip", "URL");
        CategoryLabelEntity e2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(e1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        e2 = (CategoryLabelEntity) in.readObject();
        in.close();
        assertEquals(e1, e2);
    }

(startLine=122 endLine=135 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00319/tests/org/jfree/chart/entity/TickLabelEntityTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        TickLabelEntity e1 = new TickLabelEntity(new Rectangle2D.Double(1.0,
                2.0, 3.0, 4.0), "ToolTip", "URL");
        TickLabelEntity e2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(e1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        e2 = (TickLabelEntity) in.readObject();
        in.close();
        assertEquals(e1, e2);
    }

(startLine=129 endLine=143 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00319/tests/org/jfree/chart/entity/ContourEntityTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ContourEntity e1 = new ContourEntity(new Rectangle2D.Double(1.0, 2.0, 
                3.0, 4.0), "ToolTip", "URL");
        ContourEntity e2 = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(e1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        e2 = (ContourEntity) in.readObject();
        in.close();
        assertEquals(e1, e2);
    }

(startLine=134 endLine=147 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00319/tests/org/jfree/chart/entity/XYItemEntityTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYItemEntity e1 = new XYItemEntity(new Rectangle2D.Double(1.0, 2.0,
                3.0, 4.0), new TimeSeriesCollection(), 1, 9, "ToolTip", "URL");
        XYItemEntity e2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(e1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        e2 = (XYItemEntity) in.readObject();
        in.close();
        assertEquals(e1, e2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=141 endLine=155 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/HighLowItemLabelGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        HighLowItemLabelGenerator g1 = new HighLowItemLabelGenerator();
        HighLowItemLabelGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (HighLowItemLabelGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);

    }

(startLine=149 endLine=164 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/IntervalCategoryItemLabelGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        IntervalCategoryItemLabelGenerator g1
                = new IntervalCategoryItemLabelGenerator("{3} - {4}",
                DateFormat.getInstance());
        IntervalCategoryItemLabelGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (IntervalCategoryItemLabelGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=198 endLine=210 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/StandardXYZToolTipGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardXYZToolTipGenerator g1 = new StandardXYZToolTipGenerator();
        StandardXYZToolTipGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardXYZToolTipGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=169 endLine=181 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/StandardPieToolTipGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardPieToolTipGenerator g1 = new StandardPieToolTipGenerator();
        StandardPieToolTipGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardPieToolTipGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=193 endLine=205 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/BubbleXYItemLabelGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        BubbleXYItemLabelGenerator g1 = new BubbleXYItemLabelGenerator();
        BubbleXYItemLabelGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (BubbleXYItemLabelGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=163 endLine=177 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/IntervalCategoryToolTipGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        IntervalCategoryToolTipGenerator g1
                = new IntervalCategoryToolTipGenerator("{3} - {4}",
                DateFormat.getInstance());
        IntervalCategoryToolTipGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (IntervalCategoryToolTipGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=213 endLine=225 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/StandardXYItemLabelGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardXYItemLabelGenerator g1 = new StandardXYItemLabelGenerator();
        StandardXYItemLabelGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardXYItemLabelGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=127 endLine=139 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/SymbolicXYItemLabelGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        SymbolicXYItemLabelGenerator g1 = new SymbolicXYItemLabelGenerator();
        SymbolicXYItemLabelGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (SymbolicXYItemLabelGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=182 endLine=196 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/StandardCategoryItemLabelGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardCategoryItemLabelGenerator g1
                = new StandardCategoryItemLabelGenerator("{2}",
                DateFormat.getInstance());
        StandardCategoryItemLabelGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardCategoryItemLabelGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=151 endLine=164 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/StandardXYSeriesLabelGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardXYSeriesLabelGenerator g1
                = new StandardXYSeriesLabelGenerator("Series {0}");
        StandardXYSeriesLabelGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardXYSeriesLabelGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=160 endLine=175 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/StandardCategoryToolTipGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardCategoryToolTipGenerator g1
                = new StandardCategoryToolTipGenerator("{2}",
                DateFormat.getInstance());
        StandardCategoryToolTipGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardCategoryToolTipGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=178 endLine=191 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/StandardXYToolTipGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        StandardXYToolTipGenerator g1 = new StandardXYToolTipGenerator();
        StandardXYToolTipGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardXYToolTipGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=175 endLine=188 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/StandardPieSectionLabelGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardPieSectionLabelGenerator g1
                = new StandardPieSectionLabelGenerator();
        StandardPieSectionLabelGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardPieSectionLabelGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=167 endLine=180 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/BoxAndWhiskerXYToolTipGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        BoxAndWhiskerXYToolTipGenerator g1
                = new BoxAndWhiskerXYToolTipGenerator();
        BoxAndWhiskerXYToolTipGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        g2 = (BoxAndWhiskerXYToolTipGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=152 endLine=166 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/StandardCategorySeriesLabelGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        StandardCategorySeriesLabelGenerator g1
                = new StandardCategorySeriesLabelGenerator("{2}");
        StandardCategorySeriesLabelGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardCategorySeriesLabelGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=83 endLine=98 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00320/tests/org/jfree/chart/labels/StandardContourToolTipGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardContourToolTipGenerator g1
            = new StandardContourToolTipGenerator();
        StandardContourToolTipGenerator g2 = null;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardContourToolTipGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00321/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=104 endLine=116 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00322/tests/org/jfree/chart/needle/MiddlePinNeedleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        MiddlePinNeedle n1 = new MiddlePinNeedle();
        MiddlePinNeedle n2 = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(n1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        n2 = (MiddlePinNeedle) in.readObject();
        in.close();
        assertTrue(n1.equals(n2));
    }

(startLine=103 endLine=115 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00322/tests/org/jfree/chart/needle/LineNeedleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        LineNeedle n1 = new LineNeedle();
        LineNeedle n2 = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(n1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        n2 = (LineNeedle) in.readObject();
        in.close();
        assertTrue(n1.equals(n2));
    }

(startLine=108 endLine=120 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00322/tests/org/jfree/chart/needle/ArrowNeedleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ArrowNeedle n1 = new ArrowNeedle(false);
        ArrowNeedle n2 = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(n1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        n2 = (ArrowNeedle) in.readObject();
        in.close();
        assertTrue(n1.equals(n2));
    }

(startLine=104 endLine=116 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00322/tests/org/jfree/chart/needle/ShipNeedleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ShipNeedle n1 = new ShipNeedle();
        ShipNeedle n2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(n1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        n2 = (ShipNeedle) in.readObject();
        in.close();
        assertTrue(n1.equals(n2));
    }

(startLine=104 endLine=116 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00322/tests/org/jfree/chart/needle/WindNeedleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        WindNeedle n1 = new WindNeedle();
        WindNeedle n2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(n1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        n2 = (WindNeedle) in.readObject();
        in.close();
        assertTrue(n1.equals(n2));
    }

(startLine=104 endLine=116 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00322/tests/org/jfree/chart/needle/PlumNeedleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        PlumNeedle n1 = new PlumNeedle();
        PlumNeedle n2 = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(n1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        n2 = (PlumNeedle) in.readObject();
        in.close();
        assertTrue(n1.equals(n2));
    }

(startLine=103 endLine=115 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00322/tests/org/jfree/chart/needle/PinNeedleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        PinNeedle n1 = new PinNeedle();
        PinNeedle n2 = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(n1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        n2 = (PinNeedle) in.readObject();
        in.close();
        assertTrue(n1.equals(n2));
    }

(startLine=103 endLine=115 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00322/tests/org/jfree/chart/needle/PointerNeedleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        PointerNeedle n1 = new PointerNeedle();
        PointerNeedle n2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(n1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        n2 = (PointerNeedle) in.readObject();
        in.close();
        assertTrue(n1.equals(n2));
    }

(startLine=103 endLine=115 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00322/tests/org/jfree/chart/needle/LongNeedleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        LongNeedle n1 = new LongNeedle();
        LongNeedle n2 = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(n1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        n2 = (LongNeedle) in.readObject();
        in.close();
        assertTrue(n1.equals(n2));
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=656 endLine=675 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/CategoryPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        CategoryAxis domainAxis = new CategoryAxis("Domain");
        NumberAxis rangeAxis = new NumberAxis("Range");
        BarRenderer renderer = new BarRenderer();
        CategoryPlot p1 = new CategoryPlot(dataset, domainAxis, rangeAxis,
                renderer);
        p1.setOrientation(PlotOrientation.HORIZONTAL);
        CategoryPlot p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (CategoryPlot) in.readObject();
        in.close();
        assertTrue(p1.equals(p2));
    }

(startLine=680 endLine=705 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/CategoryPlotTest.java)
    public void testSerialization2() {
        DefaultCategoryDataset data = new DefaultCategoryDataset();
        CategoryAxis domainAxis = new CategoryAxis("Domain");
        NumberAxis rangeAxis = new NumberAxis("Range");
        BarRenderer renderer = new BarRenderer();
        CategoryPlot p1 = new CategoryPlot(data, domainAxis, rangeAxis,
                renderer);
        p1.setOrientation(PlotOrientation.VERTICAL);
        CategoryPlot p2 = null;

        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(p1);
            out.close();

            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            p2 = (CategoryPlot) in.readObject();
            in.close();
        }
        catch (Exception e) {
            fail(e.toString());
        }
        assertEquals(p1, p2);
    }

(startLine=668 endLine=693 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/XYPlotTest.java)
    public void testSerialization1() {

        XYDataset data = new XYSeriesCollection();
        NumberAxis domainAxis = new NumberAxis("Domain");
        NumberAxis rangeAxis = new NumberAxis("Range");
        StandardXYItemRenderer renderer = new StandardXYItemRenderer();
        XYPlot p1 = new XYPlot(data, domainAxis, rangeAxis, renderer);
        XYPlot p2 = null;

        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(p1);
            out.close();

            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                    buffer.toByteArray()));
            p2 = (XYPlot) in.readObject();
            in.close();
        }
        catch (Exception e) {
            fail(e.toString());
        }
        assertEquals(p1, p2);

    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=279 endLine=299 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/PolarPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        PolarPlot p1 = new PolarPlot();
        p1.setAngleGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,
                4.0f, Color.blue));
        p1.setAngleLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,
                4.0f, Color.blue));
        p1.setRadiusGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,
                4.0f, Color.blue));
        PolarPlot p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        p2 = (PolarPlot) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

(startLine=139 endLine=158 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/CompassPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CompassPlot p1 = new CompassPlot(null);
        p1.setRosePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,
                Color.blue));
        p1.setRoseCenterPaint(new GradientPaint(4.0f, 3.0f, Color.red, 2.0f,
                1.0f, Color.green));
        p1.setRoseHighlightPaint(new GradientPaint(4.0f, 3.0f, Color.red, 2.0f,
                1.0f, Color.green));
        CompassPlot p2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (CompassPlot) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=320 endLine=332 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/SpiderWebPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        SpiderWebPlot p1 = new SpiderWebPlot(new DefaultCategoryDataset());
        SpiderWebPlot p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (SpiderWebPlot) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

(startLine=213 endLine=225 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/ThermometerPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ThermometerPlot p1 = new ThermometerPlot();
        ThermometerPlot p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (ThermometerPlot) in.readObject();
        in.close();
        assertTrue(p1.equals(p2));
    }

(startLine=556 endLine=569 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/PiePlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        PiePlot p1 = new PiePlot(null);
        PiePlot p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (PiePlot) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

(startLine=111 endLine=123 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/PiePlot3DTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        PiePlot3D p1 = new PiePlot3D(null);
        PiePlot3D p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (PiePlot3D) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

(startLine=277 endLine=290 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/MeterPlotTest.java)
    public void testSerialization2() throws IOException, ClassNotFoundException {
        MeterPlot p1 = new MeterPlot(new DefaultValueDataset(1.23));
        MeterPlot p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (MeterPlot) in.readObject();
        in.close();
        assertEquals(p1, p2);

    }

(startLine=83 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/ContourPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ContourPlot p1 = new ContourPlot(null, null, null, null);
        ContourPlot p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (ContourPlot) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

(startLine=139 endLine=152 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/PlotRenderingInfoTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        PlotRenderingInfo p1 = new PlotRenderingInfo(new ChartRenderingInfo());
        PlotRenderingInfo p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (PlotRenderingInfo) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=230 endLine=244 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/ThermometerPlotTest.java)
    public void testSerialization2() throws IOException, ClassNotFoundException {
        ThermometerPlot p1 = new ThermometerPlot();
        p1.setSubrangePaint(1, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,
                4.0f, Color.blue));
        ThermometerPlot p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (ThermometerPlot) in.readObject();
        in.close();
        assertTrue(p1.equals(p2));
    }

(startLine=153 endLine=169 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/RingPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        RingPlot p1 = new RingPlot(null);
        GradientPaint gp = new GradientPaint(1.0f, 2.0f, Color.yellow,
                3.0f, 4.0f, Color.red);
        p1.setSeparatorPaint(gp);
        RingPlot p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (RingPlot) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

(startLine=188 endLine=202 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/MultiplePiePlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        MultiplePiePlot p1 = new MultiplePiePlot(null);
        p1.setAggregatedItemsPaint(new GradientPaint(1.0f, 2.0f, Color.yellow,
                3.0f, 4.0f, Color.red));
        MultiplePiePlot p2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(p1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        p2 = (MultiplePiePlot) in.readObject();
        in.close();
        assertEquals(p1, p2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=142 endLine=155 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/IntervalMarkerTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        IntervalMarker m1 = new IntervalMarker(45.0, 50.0);
        IntervalMarker m2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(m1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        m2 = (IntervalMarker) in.readObject();
        in.close();
        boolean b = m1.equals(m2);
        assertTrue(b);
    }

(startLine=201 endLine=214 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/ValueMarkerTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ValueMarker m1 = new ValueMarker(25.0);
        ValueMarker m2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(m1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        m2 = (ValueMarker) in.readObject();
        in.close();
        boolean b = m1.equals(m2);
        assertTrue(b);
    }

(startLine=123 endLine=136 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/MeterIntervalTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        MeterInterval m1 = new MeterInterval("X", new Range(1.0, 2.0));
        MeterInterval m2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(m1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        m2 = (MeterInterval) in.readObject();
        in.close();
        boolean b = m1.equals(m2);
        assertTrue(b);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=710 endLine=735 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/CategoryPlotTest.java)
    public void testSerialization3() throws IOException, ClassNotFoundException {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        JFreeChart chart = ChartFactory.createBarChart(
                "Test Chart", "Category Axis", "Value Axis", dataset,
                PlotOrientation.VERTICAL, true, true, false);
        JFreeChart chart2;

        // serialize and deserialize the chart....
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(chart);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        chart2 = (JFreeChart) in.readObject();
        in.close();

        // now check that the chart is usable...
        try {
            chart2.createBufferedImage(300, 200);
        }
        catch (Exception e) {
            fail("No exception should be thrown.");
        }
    }

(startLine=736 endLine=768 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/XYPlotTest.java)
    public void testSerialization3() throws IOException, ClassNotFoundException {

        XYSeriesCollection dataset = new XYSeriesCollection();
        JFreeChart chart = ChartFactory.createXYLineChart(
            "Test Chart",
            "Domain Axis",
            "Range Axis",
            dataset,
            PlotOrientation.VERTICAL,
            true,
            true,
            false
        );
        JFreeChart chart2;

        // serialize and deserialize the chart....
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(chart);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        chart2 = (JFreeChart) in.readObject();
        in.close();

        assertEquals(chart, chart2);
        try {
            chart2.createBufferedImage(300, 200);
        }
        catch (Exception e) {
            fail("No exception should be thrown.");
        }
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=133 endLine=145 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/CombinedRangeCategoryPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CombinedRangeCategoryPlot plot1 = createPlot();
        CombinedRangeCategoryPlot plot2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(plot1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        plot2 = (CombinedRangeCategoryPlot) in.readObject();
        in.close();
        assertEquals(plot1, plot2);
    }

(startLine=159 endLine=172 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/CombinedDomainXYPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CombinedDomainXYPlot plot1 = createPlot();
        CombinedDomainXYPlot plot2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(plot1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        plot2 = (CombinedDomainXYPlot) in.readObject();
        in.close();
        assertEquals(plot1, plot2);
    }

(startLine=151 endLine=164 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/CombinedRangeXYPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CombinedRangeXYPlot plot1 = createPlot();
        CombinedRangeXYPlot plot2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(plot1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        plot2 = (CombinedRangeXYPlot) in.readObject();
        in.close();
        assertEquals(plot1, plot2);
    }

(startLine=149 endLine=161 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00323/tests/org/jfree/chart/plot/CombinedDomainCategoryPlotTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CombinedDomainCategoryPlot plot1 = createPlot();
        CombinedDomainCategoryPlot plot2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(plot1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        plot2 = (CombinedDomainCategoryPlot) in.readObject();
        in.close();
        assertEquals(plot1, plot2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=221 endLine=236 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/plot/dial/DialValueIndicatorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        // test a default instance
        DialValueIndicator i1 = new DialValueIndicator(0);
        DialValueIndicator i2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        i2 = (DialValueIndicator) in.readObject();
        in.close();
        assertEquals(i1, i2);
    }

(startLine=175 endLine=188 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/plot/dial/DialPointerTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        // test a default instance
        DialPointer i1 = new DialPointer.Pin(1);
        DialPointer i2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
        i2 = (DialPointer) in.readObject();
        in.close();
        assertEquals(i1, i2);
    }

(startLine=193 endLine=209 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/plot/dial/DialPointerTest.java)
    public void testSerialization2() throws IOException, ClassNotFoundException {
        // test a default instance
        DialPointer i1 = new DialPointer.Pointer(1);
        DialPointer i2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        i2 = (DialPointer) in.readObject();
        in.close();
        assertEquals(i1, i2);

        // test a custom instance
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=159 endLine=172 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/plot/dial/StandardDialFrameTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardDialFrame f1 = new StandardDialFrame();
        StandardDialFrame f2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(f1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        f2 = (StandardDialFrame) in.readObject();
        in.close();
        assertEquals(f1, f2);
    }

(startLine=177 endLine=190 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00324/tests/org/jfree/chart/plot/dial/ArcDialFrameTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ArcDialFrame f1 = new ArcDialFrame();
        ArcDialFrame f2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(f1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        f2 = (ArcDialFrame) in.readObject();
        in.close();
        assertEquals(f1, f2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=204 endLine=216 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/ScatterRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ScatterRenderer r1 = new ScatterRenderer();
        ScatterRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (ScatterRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=127 endLine=139 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/DefaultCategoryItemRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DefaultCategoryItemRenderer r1 = new DefaultCategoryItemRenderer();
        DefaultCategoryItemRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        r2 = (DefaultCategoryItemRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=235 endLine=248 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/BarRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        BarRenderer r1 = new BarRenderer();
        BarRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (BarRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=241 endLine=253 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/LineRenderer3DTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        LineRenderer3D r1 = new LineRenderer3D();
        LineRenderer3D r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (LineRenderer3D) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=170 endLine=184 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/StackedBarRenderer3DTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        StackedBarRenderer3D r1 = new StackedBarRenderer3D();
        StackedBarRenderer3D r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (StackedBarRenderer3D) in.readObject();
        in.close();
        assertEquals(r1, r2);

    }

(startLine=171 endLine=185 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/LevelRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        LevelRenderer r1 = new LevelRenderer();
        LevelRenderer r2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (LevelRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=181 endLine=195 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/BoxAndWhiskerRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();
        BoxAndWhiskerRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (BoxAndWhiskerRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);

    }

(startLine=133 endLine=146 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/StackedBarRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StackedBarRenderer r1 = new StackedBarRenderer();
        StackedBarRenderer r2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        r2 = (StackedBarRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=160 endLine=172 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/StackedAreaRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StackedAreaRenderer r1 = new StackedAreaRenderer();
        StackedAreaRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (StackedAreaRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=308 endLine=321 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/LineAndShapeRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        LineAndShapeRenderer r1 = new LineAndShapeRenderer();
        LineAndShapeRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (LineAndShapeRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=126 endLine=138 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/CategoryStepRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CategoryStepRenderer r1 = new CategoryStepRenderer();
        CategoryStepRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (CategoryStepRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=147 endLine=159 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/StatisticalBarRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StatisticalBarRenderer r1 = new StatisticalBarRenderer();
        StatisticalBarRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (StatisticalBarRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=130 endLine=146 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/LayeredBarRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        LayeredBarRenderer r1 = new LayeredBarRenderer();
        LayeredBarRenderer r2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (LayeredBarRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);

    }

(startLine=131 endLine=143 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/GroupedStackedBarRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer();
        GroupedStackedBarRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (GroupedStackedBarRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=151 endLine=164 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/category/MinMaxCategoryRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();
        MinMaxCategoryRenderer r2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        r2 = (MinMaxCategoryRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=128 endLine=140 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00325/tests/org/jfree/chart/renderer/DefaultPolarItemRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DefaultPolarItemRenderer r1 = new DefaultPolarItemRenderer();
        DefaultPolarItemRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (DefaultPolarItemRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=146 endLine=161 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYLine3DRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYLine3DRenderer r1 = new XYLine3DRenderer();
        r1.setWallPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,
                Color.blue));
        XYLine3DRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYLine3DRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=176 endLine=190 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYErrorRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYErrorRenderer r1 = new XYErrorRenderer();
        r1.setErrorPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f,
                Color.white));
        XYErrorRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYErrorRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=147 endLine=162 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/StackedXYBarRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StackedXYBarRenderer r1 = new StackedXYBarRenderer();
        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,
                4.0f, Color.yellow));
        StackedXYBarRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (StackedXYBarRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00327/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=158 endLine=172 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYStepAreaRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        XYStepAreaRenderer r1 = new XYStepAreaRenderer();
        XYStepAreaRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYStepAreaRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=169 endLine=182 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2Test.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StackedXYAreaRenderer2 r1 = new StackedXYAreaRenderer2();
        StackedXYAreaRenderer2 r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (StackedXYAreaRenderer2) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=216 endLine=228 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/CandlestickRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        CandlestickRenderer r1 = new CandlestickRenderer();
        CandlestickRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (CandlestickRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=167 endLine=180 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYBlockRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYBlockRenderer r1 = new XYBlockRenderer();
        XYBlockRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYBlockRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=197 endLine=210 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYAreaRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYAreaRenderer r1 = new XYAreaRenderer();
        XYAreaRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        r2 = (XYAreaRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=174 endLine=186 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYBoxAndWhiskerRenderer r1 = new XYBoxAndWhiskerRenderer();
        XYBoxAndWhiskerRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYBoxAndWhiskerRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=195 endLine=209 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYErrorRendererTest.java)
    public void testSerialization2() throws IOException, ClassNotFoundException {
        XYErrorRenderer r1 = new XYErrorRenderer();
        r1.setErrorStroke(new BasicStroke(1.5f));
        XYErrorRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYErrorRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=156 endLine=168 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYDotRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYDotRenderer r1 = new XYDotRenderer();
        XYDotRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYDotRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=135 endLine=147 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYSplineRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYSplineRenderer r1 = new XYSplineRenderer();
        XYSplineRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYSplineRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=233 endLine=246 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYBarRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYBarRenderer r1 = new XYBarRenderer();
        XYBarRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYBarRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=251 endLine=264 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYBarRendererTest.java)
    public void testSerialization2() throws IOException, ClassNotFoundException {
        XYBarRenderer r1 = new XYBarRenderer();
        r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition());
        XYBarRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYBarRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=166 endLine=181 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/HighLowRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        HighLowRenderer r1 = new HighLowRenderer();
        r1.setCloseTickPaint(Color.green);
        HighLowRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (HighLowRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);

    }

(startLine=251 endLine=263 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYLineAndShapeRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer();
        XYLineAndShapeRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYLineAndShapeRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=188 endLine=201 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYDifferenceRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYDifferenceRenderer r1 = new XYDifferenceRenderer(Color.red,
                Color.blue, false);
        XYDifferenceRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
        r2 = (XYDifferenceRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=137 endLine=150 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYBubbleRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYBubbleRenderer r1 = new XYBubbleRenderer();
        XYBubbleRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYBubbleRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=125 endLine=138 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/WindItemRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        WindItemRenderer r1 = new WindItemRenderer();
        WindItemRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        r2 = (WindItemRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=134 endLine=147 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/DeviationRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DeviationRenderer r1 = new DeviationRenderer();
        DeviationRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (DeviationRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=143 endLine=156 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYShapeRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYShapeRenderer r1 = new XYShapeRenderer();
        XYShapeRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYShapeRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=142 endLine=154 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/ClusteredXYBarRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ClusteredXYBarRenderer r1 = new ClusteredXYBarRenderer();
        ClusteredXYBarRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (ClusteredXYBarRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=144 endLine=158 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/XYStepRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYStepRenderer r1 = new XYStepRenderer();
        r1.setStepPoint(0.123);
        XYStepRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (XYStepRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=147 endLine=162 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/category/StatisticalLineAndShapeRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StatisticalLineAndShapeRenderer r1
            = new StatisticalLineAndShapeRenderer();
        StatisticalLineAndShapeRenderer r2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        r2 = (StatisticalLineAndShapeRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=167 endLine=181 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/category/WaterfallBarRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        WaterfallBarRenderer r1 = new WaterfallBarRenderer();
        WaterfallBarRenderer r2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (WaterfallBarRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=215 endLine=227 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/StandardXYItemRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardXYItemRenderer r1 = new StandardXYItemRenderer();
        StandardXYItemRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (StandardXYItemRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=134 endLine=146 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/VectorRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        VectorRenderer r1 = new VectorRenderer();
        VectorRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (VectorRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

(startLine=241 endLine=254 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00326/tests/org/jfree/chart/renderer/xy/YIntervalRendererTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        YIntervalRenderer r1 = new YIntervalRenderer();
        YIntervalRenderer r2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(r1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        r2 = (YIntervalRenderer) in.readObject();
        in.close();
        assertEquals(r1, r2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00327/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=179 endLine=192 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00327/tests/org/jfree/chart/title/TextTitleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        TextTitle t1 = new TextTitle("Test");
        TextTitle t2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(t1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        t2 = (TextTitle) in.readObject();
        in.close();
        assertEquals(t1, t2);
    }

(startLine=120 endLine=132 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00327/tests/org/jfree/chart/title/ShortTextTitleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        ShortTextTitle t1 = new ShortTextTitle("ABC");
        ShortTextTitle t2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(t1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        t2 = (ShortTextTitle) in.readObject();
        in.close();
        assertEquals(t1, t2);
    }

(startLine=139 endLine=152 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00327/tests/org/jfree/chart/title/DateTitleTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DateTitle t1 = new DateTitle();
        DateTitle t2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(t1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        t2 = (DateTitle) in.readObject();
        in.close();
        assertEquals(t1, t2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00328/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=85 endLine=98 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00328/tests/org/jfree/chart/urls/StandardXYURLGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        StandardXYURLGenerator g1 = new StandardXYURLGenerator("index.html?");
        StandardXYURLGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardXYURLGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=133 endLine=147 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00328/tests/org/jfree/chart/urls/StandardPieURLGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardPieURLGenerator g1 = new StandardPieURLGenerator(
                "index.html?", "cat");
        StandardPieURLGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardPieURLGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=143 endLine=156 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00328/tests/org/jfree/chart/urls/TimeSeriesURLGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        TimeSeriesURLGenerator g1 = new TimeSeriesURLGenerator();
        TimeSeriesURLGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (TimeSeriesURLGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=139 endLine=152 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00328/tests/org/jfree/chart/urls/StandardCategoryURLGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        StandardCategoryURLGenerator g1 = new StandardCategoryURLGenerator(
                "index.html?");
        StandardCategoryURLGenerator g2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (StandardCategoryURLGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00329/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=141 endLine=167 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00328/tests/org/jfree/chart/urls/CustomXYURLGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        List u1 = new java.util.ArrayList();
        u1.add("URL A1");
        u1.add("URL A2");
        u1.add("URL A3");

        List u2 = new java.util.ArrayList();
        u2.add("URL B1");
        u2.add("URL B2");
        u2.add("URL B3");

        CustomXYURLGenerator g1 = new CustomXYURLGenerator();
        CustomXYURLGenerator g2;

        g1.addURLSeries(u1);
        g1.addURLSeries(u2);
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (CustomXYURLGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

(startLine=138 endLine=165 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00328/tests/org/jfree/chart/urls/CustomCategoryURLGeneratorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        List u1 = new java.util.ArrayList();
        u1.add("URL A1");
        u1.add("URL A2");
        u1.add("URL A3");

        List u2 = new java.util.ArrayList();
        u2.add("URL B1");
        u2.add("URL B2");
        u2.add("URL B3");

        CustomCategoryURLGenerator g1 = new CustomCategoryURLGenerator();
        CustomCategoryURLGenerator g2;

        g1.addURLSeries(u1);
        g1.addURLSeries(u2);
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(g1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        g2 = (CustomCategoryURLGenerator) in.readObject();
        in.close();
        assertEquals(g1, g2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00329/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=98 endLine=116 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00329/tests/org/jfree/data/general/DefaultKeyedValuesDatasetTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DefaultKeyedValuesDataset d1 = new DefaultKeyedValuesDataset();
        d1.setValue("C1", new Double(234.2));
        d1.setValue("C2", null);
        d1.setValue("C3", new Double(345.9));
        d1.setValue("C4", new Double(452.7));

        KeyedValuesDataset d2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (KeyedValuesDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);
    }

(startLine=181 endLine=199 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00329/tests/org/jfree/data/general/DefaultPieDatasetTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DefaultPieDataset d1 = new DefaultPieDataset();
        d1.setValue("C1", new Double(234.2));
        d1.setValue("C2", null);
        d1.setValue("C3", new Double(345.9));
        d1.setValue("C4", new Double(452.7));

        DefaultPieDataset d2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (DefaultPieDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00330/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=109 endLine=121 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00329/tests/org/jfree/data/function/LineFunction2DTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        LineFunction2D f1 = new LineFunction2D(1.0, 2.0);
        LineFunction2D f2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(f1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        f2 = (LineFunction2D) in.readObject();
        in.close();
        assertEquals(f1, f2);
    }

(startLine=108 endLine=120 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00329/tests/org/jfree/data/function/PowerFunction2DTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        PowerFunction2D f1 = new PowerFunction2D(1.0, 2.0);
        PowerFunction2D f2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(f1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        f2 = (PowerFunction2D) in.readObject();
        in.close();
        assertEquals(f1, f2);
    }

(startLine=141 endLine=154 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00329/tests/org/jfree/data/function/PolynomialFunction2DTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        PolynomialFunction2D f1 = new PolynomialFunction2D(new double[] {1.0,
                2.0});
        PolynomialFunction2D f2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(f1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
               buffer.toByteArray()));
        f2 = (PolynomialFunction2D) in.readObject();
        in.close();
        assertEquals(f1, f2);
    }

(startLine=111 endLine=125 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00329/tests/org/jfree/data/function/NormalDistributionFunction2DTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        NormalDistributionFunction2D f1 = new NormalDistributionFunction2D(1.0,
                2.0);
        NormalDistributionFunction2D f2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(f1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        f2 = (NormalDistributionFunction2D) in.readObject();
        in.close();
        assertEquals(f1, f2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00330/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=115 endLine=127 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00330/tests/org/jfree/data/statistics/SimpleHistogramDatasetTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        SimpleHistogramDataset d1 = new SimpleHistogramDataset("D1");
        SimpleHistogramDataset d2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (SimpleHistogramDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);
    }

(startLine=200 endLine=215 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00330/tests/org/jfree/data/statistics/DefaultMultiValueCategoryDatasetTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DefaultMultiValueCategoryDataset d1
                = new DefaultMultiValueCategoryDataset();
        DefaultMultiValueCategoryDataset d2
                = new DefaultMultiValueCategoryDataset();
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (DefaultMultiValueCategoryDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00331/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=158 endLine=175 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00331/tests/org/jfree/data/time/TimePeriodValuesTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        TimePeriodValues s1 = new TimePeriodValues("A test");
        s1.add(new Year(2000), 13.75);
        s1.add(new Year(2001), 11.90);
        s1.add(new Year(2002), null);
        s1.add(new Year(2005), 19.32);
        s1.add(new Year(2007), 16.89);
        TimePeriodValues s2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(s1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        s2 = (TimePeriodValues) in.readObject();
        in.close();
        assertTrue(s1.equals(s2));
    }

(startLine=290 endLine=307 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00331/tests/org/jfree/data/time/TimeSeriesTest.java)
    public void testSerialization() throws ClassNotFoundException, IOException {
        TimeSeries s1 = new TimeSeries("A test");
        s1.add(new Year(2000), 13.75);
        s1.add(new Year(2001), 11.90);
        s1.add(new Year(2002), null);
        s1.add(new Year(2005), 19.32);
        s1.add(new Year(2007), 16.89);
        TimeSeries s2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(s1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        s2 = (TimeSeries) in.readObject();
        in.close();
        assertTrue(s1.equals(s2));
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=250 endLine=263 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00331/tests/org/jfree/data/time/TimeSeriesCollectionTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        TimeSeriesCollection c1 = new TimeSeriesCollection(createSeries());
        TimeSeriesCollection c2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(c1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        c2 = (TimeSeriesCollection) in.readObject();
        in.close();
        assertEquals(c1, c2);
    }

(startLine=149 endLine=162 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00331/tests/org/jfree/data/time/TimePeriodValuesCollectionTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();
        TimePeriodValuesCollection c2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(c1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        c2 = (TimePeriodValuesCollection) in.readObject();
        in.close();
        assertEquals(c1, c2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=173 endLine=186 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00331/tests/org/jfree/data/time/MillisecondTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        Millisecond m1 = new Millisecond();
        Millisecond m2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(m1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        m2 = (Millisecond) in.readObject();
        in.close();
        assertEquals(m1, m2);
    }

(startLine=87 endLine=99 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00331/tests/org/jfree/data/time/FixedMillisecondTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        FixedMillisecond m1 = new FixedMillisecond();
        FixedMillisecond m2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(m1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        m2 = (FixedMillisecond) in.readObject();
        in.close();
        assertEquals(m1, m2);
    }

(startLine=163 endLine=175 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00331/tests/org/jfree/data/time/MinuteTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        Minute m1 = new Minute();
        Minute m2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(m1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        m2 = (Minute) in.readObject();
        in.close();
        assertEquals(m1, m2);
    }

(startLine=252 endLine=264 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00331/tests/org/jfree/data/time/MonthTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        Month m1 = new Month(12, 1999);
        Month m2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(m1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        m2 = (Month) in.readObject();
        in.close();
        assertEquals(m1, m2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=137 endLine=150 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/VectorDataItemTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        VectorDataItem v1 = new VectorDataItem(1.0, 2.0, 3.0, 4.0);
        VectorDataItem v2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(v1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        v2 = (VectorDataItem) in.readObject();
        in.close();
        assertEquals(v1, v2);
    }

(startLine=124 endLine=136 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/XYCoordinateTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYCoordinate v1 = new XYCoordinate(1.0, 2.0);
        XYCoordinate v2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(v1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        v2 = (XYCoordinate) in.readObject();
        in.close();
        assertEquals(v1, v2);
    }

(startLine=124 endLine=137 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/VectorTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        Vector v1 = new Vector(1.0, 2.0);
        Vector v2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(v1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        v2 = (Vector) in.readObject();
        in.close();
        assertEquals(v1, v2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00333/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=121 endLine=134 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/time/ohlc/OHLCTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        OHLC i1 = new OHLC(2.0, 4.0, 1.0, 3.0);
        OHLC i2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        i2 = (OHLC) in.readObject();
        in.close();
        assertEquals(i1, i2);
    }

(startLine=113 endLine=128 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/XYDataItemTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        XYDataItem i1 = new XYDataItem(1.0, 1.1);
        XYDataItem i2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        i2 = (XYDataItem) in.readObject();
        in.close();
        assertEquals(i1, i2);

    }

(startLine=125 endLine=138 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/XYIntervalTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYInterval i1 = new XYInterval(1.0, 2.0, 3.0, 2.5, 3.5);
        XYInterval i2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        i2 = (XYInterval) in.readObject();
        in.close();
        assertEquals(i1, i2);
    }

(startLine=115 endLine=128 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/YIntervalTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        YInterval i1 = new YInterval(1.0, 0.5, 1.5);
        YInterval i2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        i2 = (YInterval) in.readObject();
        in.close();
        assertEquals(i1, i2);
    }

(startLine=114 endLine=127 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/YWithXIntervalTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        YWithXInterval i1 = new YWithXInterval(1.0, 0.5, 1.5);
        YWithXInterval i2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        i2 = (YWithXInterval) in.readObject();
        in.close();
        assertEquals(i1, i2);
    }

(startLine=108 endLine=123 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/OHLCDataItemTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        OHLCDataItem i1 = new OHLCDataItem(new Date(1L), 1.0, 2.0, 3.0, 4.0, 
                5.0);
        OHLCDataItem i2;

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(i1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        i2 = (OHLCDataItem) in.readObject();
        in.close();
        assertEquals(i1, i2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00333/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=143 endLine=172 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/DefaultXYDatasetTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        DefaultXYDataset d1 = new DefaultXYDataset();
        DefaultXYDataset d2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (DefaultXYDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);

        // try a dataset with some content...
        double[] x1 = new double[] {1.0, 2.0, 3.0};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[][] data1 = new double[][] {x1, y1};
        d1.addSeries("S1", data1);
        buffer = new ByteArrayOutputStream();
        out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();

        in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (DefaultXYDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);
    }

(startLine=146 endLine=176 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/DefaultXYZDatasetTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DefaultXYZDataset d1 = new DefaultXYZDataset();
        DefaultXYZDataset d2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (DefaultXYZDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);

        // try a dataset with some content...
        double[] x1 = new double[] {1.0, 2.0, 3.0};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[] z1 = new double[] {7.0, 8.0, 9.0};
        double[][] data1 = new double[][] {x1, y1, z1};
        d1.addSeries("S1", data1);
        buffer = new ByteArrayOutputStream();
        out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();

        in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (DefaultXYZDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00333/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=161 endLine=175 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/time/ohlc/OHLCSeriesTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        OHLCSeries s1 = new OHLCSeries("s1");
        s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0);
        OHLCSeries s2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(s1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        s2 = (OHLCSeries) in.readObject();
        in.close();
        assertEquals(s1, s2);
    }

(startLine=158 endLine=173 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/XYIntervalSeriesTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        XYIntervalSeries s1 = new XYIntervalSeries("s1");
        s1.add(1.0, 0.5, 1.5, 2.0, 1.9, 2.1);
        XYIntervalSeries s2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(s1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        s2 = (XYIntervalSeries) in.readObject();
        in.close();
        assertEquals(s1, s2);
    }

(startLine=158 endLine=173 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/XIntervalSeriesTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        XIntervalSeries s1 = new XIntervalSeries("s1");
        s1.add(1.0, 0.5, 1.5, 2.0);
        XIntervalSeries s2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(s1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        s2 = (XIntervalSeries) in.readObject();
        in.close();
        assertEquals(s1, s2);

    }

(startLine=157 endLine=173 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/YIntervalSeriesTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {

        YIntervalSeries s1 = new YIntervalSeries("s1");
        s1.add(1.0, 0.5, 1.5, 2.0);
        YIntervalSeries s2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(s1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        s2 = (YIntervalSeries) in.readObject();
        in.close();
        assertEquals(s1, s2);

    }

(startLine=159 endLine=172 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/VectorSeriesTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        VectorSeries s1 = new VectorSeries("s1");
        s1.add(1.0, 0.5, 1.5, 2.0);
        VectorSeries s2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(s1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        s2 = (VectorSeries) in.readObject();
        in.close();
        assertEquals(s1, s2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00333/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=140 endLine=156 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/time/ohlc/OHLCSeriesCollectionTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        OHLCSeriesCollection c1 = new OHLCSeriesCollection();
        OHLCSeries s1 = new OHLCSeries("Series");
        s1.add(new Year(2006), 1.0, 1.1, 1.2, 1.3);
        c1.addSeries(s1);
        OHLCSeriesCollection c2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(c1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        c2 = (OHLCSeriesCollection) in.readObject();
        in.close();
        assertEquals(c1, c2);
    }

(startLine=138 endLine=152 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/XIntervalSeriesCollectionTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XIntervalSeriesCollection c1 = new XIntervalSeriesCollection();
        XIntervalSeries s1 = new XIntervalSeries("Series");
        s1.add(1.0, 1.1, 1.2, 1.3);
        XIntervalSeriesCollection c2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(c1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        c2 = (XIntervalSeriesCollection) in.readObject();
        in.close();
        assertEquals(c1, c2);
    }

(startLine=171 endLine=187 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/XYSeriesCollectionTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYSeries s1 = new XYSeries("Series");
        s1.add(1.0, 1.1);
        XYSeriesCollection c1 = new XYSeriesCollection();
        c1.addSeries(s1);
        XYSeriesCollection c2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(c1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        c2 = (XYSeriesCollection) in.readObject();
        in.close();
        assertEquals(c1, c2);
    }

(startLine=135 endLine=151 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/VectorSeriesCollectionTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        VectorSeries s1 = new VectorSeries("Series");
        s1.add(1.0, 1.1, 1.2, 1.3);
        VectorSeriesCollection c1 = new VectorSeriesCollection();
        c1.addSeries(s1);
        VectorSeriesCollection c2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(c1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        c2 = (VectorSeriesCollection) in.readObject();
        in.close();
        assertEquals(c1, c2);
    }

(startLine=135 endLine=151 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/MatrixSeriesCollectionTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        MatrixSeries s1 = new MatrixSeries("Series", 2, 3);
        s1.update(0, 0, 1.1);
        MatrixSeriesCollection c1 = new MatrixSeriesCollection();
        c1.addSeries(s1);
        MatrixSeriesCollection c2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(c1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        c2 = (MatrixSeriesCollection) in.readObject();
        in.close();
        assertEquals(c1, c2);
    }

(startLine=138 endLine=153 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/YIntervalSeriesCollectionTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        YIntervalSeriesCollection c1 = new YIntervalSeriesCollection();
        YIntervalSeries s1 = new YIntervalSeries("Series");
        s1.add(1.0, 1.1, 1.2, 1.3);
        YIntervalSeriesCollection c2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(c1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        c2 = (YIntervalSeriesCollection) in.readObject();
        in.close();
        assertEquals(c1, c2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00333/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=128 endLine=155 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/DefaultWindDatasetTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DefaultWindDataset d1 = new DefaultWindDataset();
        DefaultWindDataset d2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (DefaultWindDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);

        // try a dataset with some content...
        d1 = createSampleDataset1();
        buffer = new ByteArrayOutputStream();
        out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();

        in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (DefaultWindDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);

    }

(startLine=288 endLine=314 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/DefaultIntervalXYDatasetTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        DefaultIntervalXYDataset d1 = new DefaultIntervalXYDataset();
        DefaultIntervalXYDataset d2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();

        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        d2 = (DefaultIntervalXYDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);

        // try a dataset with some content...
        d1 = createSampleDataset1();
        buffer = new ByteArrayOutputStream();
        out = new ObjectOutputStream(buffer);
        out.writeObject(d1);
        out.close();

        in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        d2 = (DefaultIntervalXYDataset) in.readObject();
        in.close();
        assertEquals(d1, d2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00333/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=150 endLine=162 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/time/ohlc/OHLCItemTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        OHLCItem item1 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0);
        OHLCItem item2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(item1);
        out.close();
        ObjectInput in = new ObjectInputStream(
                new ByteArrayInputStream(buffer.toByteArray()));
        item2 = (OHLCItem) in.readObject();
        in.close();
        assertEquals(item1, item2);
    }

(startLine=141 endLine=154 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/YIntervalDataItemTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        YIntervalDataItem item1 = new YIntervalDataItem(1.0, 2.0, 1.5, 2.5);
        YIntervalDataItem item2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(item1);
        out.close();

        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        item2 = (YIntervalDataItem) in.readObject();
        in.close();
        assertEquals(item1, item2);
    }

(startLine=142 endLine=154 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/XIntervalDataItemTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XIntervalDataItem item1 = new XIntervalDataItem(1.0, 2.0, 3.0, 4.0);
        XIntervalDataItem item2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(item1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        item2 = (XIntervalDataItem) in.readObject();
        in.close();
        assertEquals(item1, item2);
    }

(startLine=158 endLine=171 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00332/tests/org/jfree/data/xy/XYIntervalDataItemTest.java)
    public void testSerialization() throws IOException, ClassNotFoundException {
        XYIntervalDataItem item1 = new XYIntervalDataItem(1.0, 0.5, 1.5, 2.0,
                1.9, 2.1);
        XYIntervalDataItem item2;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(item1);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                buffer.toByteArray()));
        item2 = (XYIntervalDataItem) in.readObject();
        in.close();
        assertEquals(item1, item2);
    }

commonMethod: 
(startLine=78 endLine=96 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00333/tests/org/jfree/chart/TestUtilities.java)
    public static Object serialised(Object original) {
        Object result = null;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out;
        try {
            out = new ObjectOutputStream(buffer);
            out.writeObject(original);
            out.close();
            ObjectInput in = new ObjectInputStream(
                    new ByteArrayInputStream(buffer.toByteArray()));
            result = in.readObject();
            in.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return result;
    }


, Instance #
frags: 
(startLine=5034 endLine=5044 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00359/source/org/jfree/chart/plot/CategoryPlot.java)
        for (int i = 0; i < this.renderers.size(); i++) {
            CategoryItemRenderer renderer2 = (CategoryItemRenderer)
                    this.renderers.get(i);
            if (renderer2 instanceof PublicCloneable) {
                PublicCloneable pc = (PublicCloneable) renderer2;
                CategoryItemRenderer rc = (CategoryItemRenderer) pc.clone();
                clone.renderers.set(i, rc);
                rc.setPlot(clone);
                rc.addChangeListener(clone);
            }
        }

(startLine=5629 endLine=5638 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00359/source/org/jfree/chart/plot/XYPlot.java)
        for (int i = 0; i < this.renderers.size(); i++) {
            XYItemRenderer renderer2 = (XYItemRenderer) this.renderers.get(i);
            if (renderer2 instanceof PublicCloneable) {
                PublicCloneable pc = (PublicCloneable) renderer2;
                XYItemRenderer rc = (XYItemRenderer) pc.clone();
                clone.renderers.set(i, rc);
                rc.setPlot(clone);
                rc.addChangeListener(clone);
            }
        }

commonMethod: 
(startLine=81 endLine=107 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00360/source/org/jfree/chart/util/CloneUtils.java)
    /**
     * Returns a new map that contains the same keys and cloned copied of the
     * values.
     * 
     * @param source  the source map (<code>null</code> not permitted).
     * 
     * @return A new map. 
     * 
     * @since 1.0.18
     */
    public static Map cloneMapValues(Map source) {
        ParamChecks.nullNotPermitted(source, "source");
        Map result = new HashMap();
        for (Object key : source.keySet()) {
            Object value = source.get(key);
            if (value != null) {
                try {
                    result.put(key, ObjectUtilities.clone(value));
                } catch (CloneNotSupportedException ex) {
                    throw new RuntimeException(ex);
                }
            } else {
                result.put(key, null);
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=3402 endLine=3415 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/CategoryPlot.java)
        if (this.fixedDomainAxisSpace != null) {
            if (this.orientation == PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(
                    this.fixedDomainAxisSpace.getLeft(), RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),
                        RectangleEdge.RIGHT);
            }
            else if (this.orientation == PlotOrientation.VERTICAL) {
                space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),
                        RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),
                        RectangleEdge.BOTTOM);
            }
        }

(startLine=3457 endLine=3470 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/CategoryPlot.java)
        if (this.fixedRangeAxisSpace != null) {
            if (this.orientation == PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),
                        RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),
                        RectangleEdge.BOTTOM);
            }
            else if (this.orientation == PlotOrientation.VERTICAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),
                        RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),
                        RectangleEdge.RIGHT);
            }
        }

commonMethod: 
(startLine=79 endLine=89 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00365/source/org/jfree/chart/plot/PlotOrientation.java)
    /**
     * Returns <code>true</code> if this orientation is <code>HORIZONTAL</code>,
     * and <code>false</code> otherwise.  
     * 
     * @return A boolean.
     * 
     * @since 1.0.18
     */
    public boolean isHorizontal() {
        return this.equals(PlotOrientation.HORIZONTAL);
    }


, Instance #
frags: 
(startLine=1473 endLine=1489 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/CategoryPlot.java)
    public CategoryAxis getDomainAxisForDataset(int index) {
        if (index < 0) {
            throw new IllegalArgumentException("Negative 'index'.");
        }
        CategoryAxis axis;
        List axisIndices = (List) this.datasetToDomainAxesMap.get(
                new Integer(index));
        if (axisIndices != null) {
            // the first axis in the list is used for data <--> Java2D
            Integer axisIndex = (Integer) axisIndices.get(0);
            axis = getDomainAxis(axisIndex.intValue());
        }
        else {
            axis = getDomainAxis(0);
        }
        return axis;
    }

(startLine=1536 endLine=1552 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/CategoryPlot.java)
    public ValueAxis getRangeAxisForDataset(int index) {
        if (index < 0) {
            throw new IllegalArgumentException("Negative 'index'.");
        }
        ValueAxis axis = null;
        List axisIndices = (List) this.datasetToRangeAxesMap.get(
                new Integer(index));
        if (axisIndices != null) {
            // the first axis in the list is used for data <--> Java2D
            Integer axisIndex = (Integer) axisIndices.get(0);
            axis = getRangeAxis(axisIndex.intValue());
        }
        else {
            axis = getRangeAxis(0);
        }
        return axis;
    }

commonMethod: 
(startLine=69 endLine=82 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00365/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an {@code IllegalArgumentException} if {@code value} is negative.
     * 
     * @param value  the value.
     * @param name  the parameter name (for use in the exception message).
     * 
     * @since 1.0.18
     */
    public static void requireNonNegative(int value, String name) {
        if (value < 0) {
            throw new IllegalArgumentException("Require '" + name + "' (" 
                    + value + ") to be non-negative.");
        }
    }


, Instance #
frags: 
(startLine=1420 endLine=1429 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/CategoryPlot.java)
    public void mapDatasetToDomainAxes(int index, List axisIndices) {
        if (index < 0) {
            throw new IllegalArgumentException("Requires 'index' >= 0.");
        }
        checkAxisIndices(axisIndices);
        Integer key = new Integer(index);
        this.datasetToDomainAxesMap.put(key, new ArrayList(axisIndices));
        // fake a dataset change event to update axes...
        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));
    }

(startLine=1515 endLine=1524 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/CategoryPlot.java)
    public void mapDatasetToRangeAxes(int index, List axisIndices) {
        if (index < 0) {
            throw new IllegalArgumentException("Requires 'index' >= 0.");
        }
        checkAxisIndices(axisIndices);
        Integer key = new Integer(index);
        this.datasetToRangeAxesMap.put(key, new ArrayList(axisIndices));
        // fake a dataset change event to update axes...
        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));
    }

(startLine=1466 endLine=1475 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/XYPlot.java)
    public void mapDatasetToDomainAxes(int index, List axisIndices) {
        if (index < 0) {
            throw new IllegalArgumentException("Requires 'index' >= 0.");
        }
        checkAxisIndices(axisIndices);
        Integer key = new Integer(index);
        this.datasetToDomainAxesMap.put(key, new ArrayList(axisIndices));
        // fake a dataset change event to update axes...
        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));
    }

(startLine=1502 endLine=1511 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/XYPlot.java)
    public void mapDatasetToRangeAxes(int index, List axisIndices) {
        if (index < 0) {
            throw new IllegalArgumentException("Requires 'index' >= 0.");
        }
        checkAxisIndices(axisIndices);
        Integer key = new Integer(index);
        this.datasetToRangeAxesMap.put(key, new ArrayList(axisIndices));
        // fake a dataset change event to update axes...
        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));
    }

commonMethod: 
(startLine=69 endLine=82 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00365/source/org/jfree/chart/util/ParamChecks.java)
    /**
     * Throws an {@code IllegalArgumentException} if {@code value} is negative.
     * 
     * @param value  the value.
     * @param name  the parameter name (for use in the exception message).
     * 
     * @since 1.0.18
     */
    public static void requireNonNegative(int value, String name) {
        if (value < 0) {
            throw new IllegalArgumentException("Require '" + name + "' (" 
                    + value + ") to be non-negative.");
        }
    }


, Instance #
frags: 
(startLine=3293 endLine=3324 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/XYPlot.java)
        if (order == DatasetRenderingOrder.FORWARD) {

            // draw background annotations
            int rendererCount = this.renderers.size();
            for (int i = 0; i < rendererCount; i++) {
                XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.BACKGROUND, info);
                }
            }

            // render data items...
            for (int i = 0; i < getDatasetCount(); i++) {
                foundData = render(g2, dataArea, i, info, crosshairState)
                    || foundData;
            }

            // draw foreground annotations
            for (int i = 0; i < rendererCount; i++) {
                XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.FOREGROUND, info);
                }
            }

        }

(startLine=3325 endLine=3361 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/XYPlot.java)
        else if (order == DatasetRenderingOrder.REVERSE) {

            // draw background annotations
            int rendererCount = this.renderers.size();
            for (int i = rendererCount - 1; i >= 0; i--) {
                XYItemRenderer r = getRenderer(i);
                if (i >= getDatasetCount()) { // we need the dataset to make
                    continue;                 // a link to the axes
                }
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.BACKGROUND, info);
                }
            }

            for (int i = getDatasetCount() - 1; i >= 0; i--) {
                foundData = render(g2, dataArea, i, info, crosshairState)
                    || foundData;
            }

            // draw foreground annotations
            for (int i = rendererCount - 1; i >= 0; i--) {
                XYItemRenderer r = getRenderer(i);
                if (i >= getDatasetCount()) { // we need the dataset to make
                    continue;                 // a link to the axes
                }
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.FOREGROUND, info);
                }
            }

        }

commonMethod: 
(startLine=1406 endLine=1421 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00365/source/org/jfree/chart/plot/XYPlot.java)
    /**
     * Returns the index of the specified dataset, or {@code -1} if the
     * dataset does not belong to the plot.
     *
     * @param dataset  the dataset ({@code null} not permitted).
     *
     * @return The index or -1.
     */
    public int indexOf(XYDataset dataset) {
        for (Map.Entry<Integer, XYDataset> entry: this.datasets.entrySet()) {
            if (dataset == entry.getValue()) {
                return entry.getKey();
            }
        }
        return -1;
    }


, Instance #
frags: 
(startLine=3293 endLine=3324 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/XYPlot.java)
        if (order == DatasetRenderingOrder.FORWARD) {

            // draw background annotations
            int rendererCount = this.renderers.size();
            for (int i = 0; i < rendererCount; i++) {
                XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.BACKGROUND, info);
                }
            }

            // render data items...
            for (int i = 0; i < getDatasetCount(); i++) {
                foundData = render(g2, dataArea, i, info, crosshairState)
                    || foundData;
            }

            // draw foreground annotations
            for (int i = 0; i < rendererCount; i++) {
                XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.FOREGROUND, info);
                }
            }

        }

(startLine=3325 endLine=3361 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/XYPlot.java)
        else if (order == DatasetRenderingOrder.REVERSE) {

            // draw background annotations
            int rendererCount = this.renderers.size();
            for (int i = rendererCount - 1; i >= 0; i--) {
                XYItemRenderer r = getRenderer(i);
                if (i >= getDatasetCount()) { // we need the dataset to make
                    continue;                 // a link to the axes
                }
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.BACKGROUND, info);
                }
            }

            for (int i = getDatasetCount() - 1; i >= 0; i--) {
                foundData = render(g2, dataArea, i, info, crosshairState)
                    || foundData;
            }

            // draw foreground annotations
            for (int i = rendererCount - 1; i >= 0; i--) {
                XYItemRenderer r = getRenderer(i);
                if (i >= getDatasetCount()) { // we need the dataset to make
                    continue;                 // a link to the axes
                }
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.FOREGROUND, info);
                }
            }

        }

commonMethod: 
(startLine=3377 endLine=3389 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00365/source/org/jfree/chart/plot/XYPlot.java)
    private List<Integer> getRendererIndices(DatasetRenderingOrder order) {
        List<Integer> result = new ArrayList<Integer>();
        for (Entry<Integer, XYItemRenderer> entry : this.renderers.entrySet()) {
            if (entry.getValue() != null) {
                result.add(entry.getKey());
            }
        }
        Collections.sort(result);
        if (order == DatasetRenderingOrder.REVERSE) {
            Collections.reverse(result);
        }
        return result;        
    }


, Instance #
frags: 
(startLine=3293 endLine=3324 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/XYPlot.java)
        if (order == DatasetRenderingOrder.FORWARD) {

            // draw background annotations
            int rendererCount = this.renderers.size();
            for (int i = 0; i < rendererCount; i++) {
                XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.BACKGROUND, info);
                }
            }

            // render data items...
            for (int i = 0; i < getDatasetCount(); i++) {
                foundData = render(g2, dataArea, i, info, crosshairState)
                    || foundData;
            }

            // draw foreground annotations
            for (int i = 0; i < rendererCount; i++) {
                XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.FOREGROUND, info);
                }
            }

        }

(startLine=3325 endLine=3361 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00364/source/org/jfree/chart/plot/XYPlot.java)
        else if (order == DatasetRenderingOrder.REVERSE) {

            // draw background annotations
            int rendererCount = this.renderers.size();
            for (int i = rendererCount - 1; i >= 0; i--) {
                XYItemRenderer r = getRenderer(i);
                if (i >= getDatasetCount()) { // we need the dataset to make
                    continue;                 // a link to the axes
                }
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.BACKGROUND, info);
                }
            }

            for (int i = getDatasetCount() - 1; i >= 0; i--) {
                foundData = render(g2, dataArea, i, info, crosshairState)
                    || foundData;
            }

            // draw foreground annotations
            for (int i = rendererCount - 1; i >= 0; i--) {
                XYItemRenderer r = getRenderer(i);
                if (i >= getDatasetCount()) { // we need the dataset to make
                    continue;                 // a link to the axes
                }
                if (r != null) {
                    ValueAxis domainAxis = getDomainAxisForDataset(i);
                    ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,
                            Layer.FOREGROUND, info);
                }
            }

        }

commonMethod: 
(startLine=3356 endLine=3375 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00365/source/org/jfree/chart/plot/XYPlot.java)
    /**
     * Returns the indices of the non-null datasets in the specified order.
     * 
     * @param order  the order (<code>null</code> not permitted).
     * 
     * @return The list of indices. 
     */
    private List<Integer> getDatasetIndices(DatasetRenderingOrder order) {
        List<Integer> result = new ArrayList<Integer>();
        for (Entry<Integer, XYDataset> entry : this.datasets.entrySet()) {
            if (entry.getValue() != null) {
                result.add(entry.getKey());
            }
        }
        Collections.sort(result);
        if (order == DatasetRenderingOrder.REVERSE) {
            Collections.reverse(result);
        }
        return result;
    }


, Instance #
frags: 
(startLine=1148 endLine=1159 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00371/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java)
            if (label != null) {
                Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                Point2D coordinates = calculateDomainMarkerTextAnchorPoint(
                        g2, orientation, dataArea, line.getBounds2D(),
                        marker.getLabelOffset(),
                        LengthAdjustmentType.EXPAND, anchor);
                TextUtilities.drawAlignedString(label, g2,
                        (float) coordinates.getX(), (float) coordinates.getY(),
                        marker.getLabelTextAnchor());
            }

(startLine=1250 endLine=1261 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00371/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java)
            if (label != null) {
                Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                Point2D coordinates = calculateDomainMarkerTextAnchorPoint(
                        g2, orientation, dataArea, rect,
                        marker.getLabelOffset(), marker.getLabelOffsetType(),
                        anchor);
                TextUtilities.drawAlignedString(label, g2,
                        (float) coordinates.getX(), (float) coordinates.getY(),
                        marker.getLabelTextAnchor());
            }

(startLine=1345 endLine=1356 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00371/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java)
            if (label != null) {
                Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(
                        g2, orientation, dataArea, line.getBounds2D(),
                        marker.getLabelOffset(),
                        LengthAdjustmentType.EXPAND, anchor);
                TextUtilities.drawAlignedString(label, g2,
                        (float) coordinates.getX(), (float) coordinates.getY(),
                        marker.getLabelTextAnchor());
            }

(startLine=1447 endLine=1458 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00371/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java)
            if (label != null) {
                Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(
                        g2, orientation, dataArea, rect,
                        marker.getLabelOffset(), marker.getLabelOffsetType(),
                        anchor);
                TextUtilities.drawAlignedString(label, g2,
                        (float) coordinates.getX(), (float) coordinates.getY(),
                        marker.getLabelTextAnchor());
            }

commonMethod: 
(startLine=84 endLine=108 srcPath=/home/sonia/NewExperiment/jfreechartFilter/00372/source/org/jfree/chart/util/TextUtils.java)
    /**
     * Returns the bounds of an aligned string.
     * 
     * @param text  the string (<code>null</code> not permitted).
     * @param g2  the graphics target (<code>null</code> not permitted).
     * @param x  the x-coordinate.
     * @param y  the y-coordinate.
     * @param anchor  the anchor point that will be aligned to 
     *     <code>(x, y)</code> (<code>null</code> not permitted).
     * 
     * @return The text bounds (never <code>null</code>).
     * 
     * @since 1.3
     */
    public static Rectangle2D calcAlignedStringBounds(String text,
            Graphics2D g2, float x, float y, TextAnchor anchor) {

        Rectangle2D textBounds = new Rectangle2D.Double();
        float[] adjust = deriveTextBoundsAnchorOffsets(g2, text, anchor,
                textBounds);
        // adjust text bounds to match string position
        textBounds.setRect(x + adjust[0], y + adjust[1] + adjust[2],
            textBounds.getWidth(), textBounds.getHeight());
        return textBounds;
    }


]