[Instance #
frags: 
(startLine=761 endLine=779 srcPath=/root/NewExperiment/freecolFilter/00012/src/net/sf/freecol/common/model/Unit.java)
        if ((b) && (!armed)) {
            if (getGoodsDumpLocation() != null) {
                if (getGoodsDumpLocation().getGoodsCount(Goods.MUSKETS) < 50) {
                    return;
                }
                
                getGoodsDumpLocation().removeAmountAndTypeOfGoods(Goods.MUSKETS, 50);
                armed = true;
            } else if (location instanceof Europe) {
                if (((getOwner().getGold()) / (getGame().getMarket().costToBuy(Goods.MUSKETS))) < 50) {
                    return;
                }
                
                getGame().getMarket().buy(Goods.MUSKETS, 50, getOwner());
                armed = true;
            } else {
                logger.warning("Attempting to arm a soldier outside of a colony or Europe!");
            }
        } else if ((!b) && (armed)) {

(startLine=817 endLine=829 srcPath=/root/NewExperiment/freecolFilter/00012/src/net/sf/freecol/common/model/Unit.java)
        if ((b) && (!mounted)) {
            if (getGoodsDumpLocation() != null) {
               if (getGoodsDumpLocation().getGoodsCount(Goods.HORSES) < 50) return;
               getGoodsDumpLocation().removeAmountAndTypeOfGoods(Goods.HORSES, 50);
               mounted = true;
            } else if (location instanceof Europe) {
               if (((getOwner().getGold()) / (getGame().getMarket().costToBuy(Goods.HORSES))) < 50) return;
               getGame().getMarket().buy(Goods.HORSES, 50, getOwner());
               mounted = true;
            } else {
                logger.warning("Attempting to mount a colonist outside of a colony or Europe!");
            }
        } else if ((!b) && (mounted)) {

commonMethod: 
(startLine=987 endLine=997 srcPath=/root/NewExperiment/freecolFilter/00013/src/net/sf/freecol/common/model/Unit.java)
    /**
    * Checks if this <code>Unit</code> is a pioneer.
    * @return <i>true</i> if it is a pioneer and <i>false</i> otherwise.
    */
    public boolean isPioneer() {
        if (getNumberOfTools() > 0) {
            return true;
        } else {
            return false;
        }
    }


, Instance #
frags: 
(startLine=761 endLine=779 srcPath=/root/NewExperiment/freecolFilter/00012/src/net/sf/freecol/common/model/Unit.java)
        if ((b) && (!armed)) {
            if (getGoodsDumpLocation() != null) {
                if (getGoodsDumpLocation().getGoodsCount(Goods.MUSKETS) < 50) {
                    return;
                }
                
                getGoodsDumpLocation().removeAmountAndTypeOfGoods(Goods.MUSKETS, 50);
                armed = true;
            } else if (location instanceof Europe) {
                if (((getOwner().getGold()) / (getGame().getMarket().costToBuy(Goods.MUSKETS))) < 50) {
                    return;
                }
                
                getGame().getMarket().buy(Goods.MUSKETS, 50, getOwner());
                armed = true;
            } else {
                logger.warning("Attempting to arm a soldier outside of a colony or Europe!");
            }
        } else if ((!b) && (armed)) {

(startLine=817 endLine=829 srcPath=/root/NewExperiment/freecolFilter/00012/src/net/sf/freecol/common/model/Unit.java)
        if ((b) && (!mounted)) {
            if (getGoodsDumpLocation() != null) {
               if (getGoodsDumpLocation().getGoodsCount(Goods.HORSES) < 50) return;
               getGoodsDumpLocation().removeAmountAndTypeOfGoods(Goods.HORSES, 50);
               mounted = true;
            } else if (location instanceof Europe) {
               if (((getOwner().getGold()) / (getGame().getMarket().costToBuy(Goods.HORSES))) < 50) return;
               getGame().getMarket().buy(Goods.HORSES, 50, getOwner());
               mounted = true;
            } else {
                logger.warning("Attempting to mount a colonist outside of a colony or Europe!");
            }
        } else if ((!b) && (mounted)) {

commonMethod: 
(startLine=865 endLine=890 srcPath=/root/NewExperiment/freecolFilter/00013/src/net/sf/freecol/common/model/Unit.java)
    /**
    * Sets the unit to be a missionary.
    *
    * @param b <i>true</i> if the unit should be a missionary and <i>false</i> otherwise.
    */
    public void setMissionary(boolean b) {
        if (!(getLocation() instanceof Europe) && !getTile().getColony().getBuilding(Building.CHURCH).isBuilt()) {
            throw new IllegalStateException("Can only dress as a missionary when the unit is located in Europe or a Colony with a church.");
        }

        if (b) {
            if (isPioneer()) {
                setNumberOfTools(0);
            }

            if (isArmed()) {
                setArmed(false);
            }

            if (isMounted()) {
                setMounted(false);
            }
        }

        missionary = b;
    }


, Instance #
frags: 
(startLine=288 endLine=319 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
    private void loadUnits(GraphicsConfiguration gc, Class resourceLocator, boolean doLookup) throws FreeColException {
        units = new Vector(UNIT_GRAPHICS_COUNT);

        for (int i = 0; i < UNIT_GRAPHICS_COUNT; i++) {
            String filePath = dataDirectory + path + unitsDirectory + unitsName + i + extension;
            ImageIcon tempImage;
            if (doLookup) {
                URL url = resourceLocator.getResource(filePath);
                if (url == null) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(url);
            } else {
                File tmpFile = new File(filePath);
                if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(filePath);
            }
            units.add(tempImage);
        }

        /*
        If all units are patched together in one graphics file then this is the way to load
        them into different images:

        Image unitsImage = new ImageIcon(url).getImage();
        BufferedImage tempImage = gc.createCompatibleImage(42, 63, Transparency.TRANSLUCENT);
        tempImage.getGraphics().drawImage(unitsImage, 0, 0, null);
        units.add(tempImage);
        */
    }

(startLine=408 endLine=429 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
    private void loadMisc(GraphicsConfiguration gc, Class resourceLocator, boolean doLookup) throws FreeColException {
        misc = new Vector(MISC_COUNT);

        for (int i = 0; i < MISC_COUNT; i++) {
            String filePath = dataDirectory + path + miscDirectory + miscName + i + extension;
            ImageIcon tempImage;
            if (doLookup) {
                URL url = resourceLocator.getResource(filePath);
                if (url == null) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(url);
            } else {
                File tmpFile = new File(filePath);
                if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(filePath);
            }
            misc.add(tempImage);
        }
    }

(startLine=467 endLine=485 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
            for(int j = 0; j < UNIT_BUTTON_COUNT; j++) {
                String filePath = dataDirectory + path + unitButtonDirectory + subDirectory + unitButtonName + j + extension;
                ImageIcon tempImage;
                if (doLookup) {
                    URL url = resourceLocator.getResource(filePath);
                    if (url == null) {
                        throw new FreeColException("The data file \"" + filePath + "\" could not be fonud.");
                    }
                    tempImage = new ImageIcon(url);
                }
                else {
                    File tmpFile = new File(filePath);
                    if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                        throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                    }
                    tempImage = new ImageIcon(filePath);
                }
                unitButtons[i].add(tempImage);
            }

(startLine=500 endLine=522 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
    private void loadColonies(GraphicsConfiguration gc, Class resourceLocator, boolean doLookup) throws FreeColException {
        colonies = new Vector(COLONY_COUNT);

        for(int i = 0; i < COLONY_COUNT; i++) {
            String filePath = dataDirectory + path + colonyDirectory + colonyName + i + extension;
            ImageIcon tempImage;
            if (doLookup) {
                URL url = resourceLocator.getResource(filePath);
                if (url == null) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be fonud.");
                }
                tempImage = new ImageIcon(url);
            }
            else {
                File tmpFile = new File(filePath);
                if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(filePath);
            }
            colonies.add(tempImage);
        }
    }

(startLine=535 endLine=557 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
    private void loadIndians(GraphicsConfiguration gc, Class resourceLocator, boolean doLookup) throws FreeColException {
        indians = new Vector(INDIAN_COUNT);

        for(int i = 0; i < INDIAN_COUNT; i++) {
            String filePath = dataDirectory + path + indianDirectory + indianName + i + extension;
            ImageIcon tempImage;
            if (doLookup) {
                URL url = resourceLocator.getResource(filePath);
                if (url == null) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be fonud.");
                }
                tempImage = new ImageIcon(url);
            }
            else {
                File tmpFile = new File(filePath);
                if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(filePath);
            }
            indians.add(tempImage);
        }
    }

(startLine=570 endLine=601 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
    private void loadGoods(GraphicsConfiguration gc, Class resourceLocator, boolean doLookup) throws FreeColException {
        goods = new Vector(GOODS_COUNT);

        for (int i = 0; i < GOODS_COUNT; i++) {
            String filePath = dataDirectory + path + goodsDirectory + goodsName + i + extension;
            ImageIcon tempImage;
            if (doLookup) {
                URL url = resourceLocator.getResource(filePath);
                if (url == null) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(url);
            } else {
                File tmpFile = new File(filePath);
                if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(filePath);
            }
            goods.add(tempImage);
        }

        /*
        If all units are patched together in one graphics file then this is the way to load
        them into different images:

        Image unitsImage = new ImageIcon(url).getImage();
        BufferedImage tempImage = gc.createCompatibleImage(42, 63, Transparency.TRANSLUCENT);
        tempImage.getGraphics().drawImage(unitsImage, 0, 0, null);
        units.add(tempImage);
        */
    }

commonMethod: 
(startLine=278 endLine=299 srcPath=/root/NewExperiment/freecolFilter/00033/src/net/sf/freecol/client/gui/ImageLibrary.java)
    /**
    * Finds the image file in the given <code>filePath</code>.
    *
    * @doLookup If <i>true</i> then the <code>resourceLocator</code>
    *           is used when searching for the image file.
    * @return An ImageIcon with data loaded from the image file.
    */
    private ImageIcon findImage(String filePath, Class resourceLocator, boolean doLookup) throws FreeColException {
        if (doLookup) {
            URL url = resourceLocator.getResource(filePath);
            if (url != null) {
                return new ImageIcon(url);
            }
        }

        File tmpFile = new File(filePath);
        if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
            throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
        }
        
        return new ImageIcon(filePath);
    }


, Instance #
frags: 
(startLine=300 endLine=306 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
            } else {
                File tmpFile = new File(filePath);
                if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(filePath);
            }

(startLine=365 endLine=371 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
                } else {
                    File tmpFile = new File(filePath);
                    if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                        throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                    }
                    tempImage = new ImageIcon(filePath);
                }

(startLine=382 endLine=388 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
                } else {
                    File tmpFile = new File(filePath);
                    if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                        throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                    }
                    tempImage = new ImageIcon(filePath);
                }

(startLine=420 endLine=426 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
            } else {
                File tmpFile = new File(filePath);
                if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(filePath);
            }

(startLine=477 endLine=483 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
                else {
                    File tmpFile = new File(filePath);
                    if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                        throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                    }
                    tempImage = new ImageIcon(filePath);
                }

(startLine=513 endLine=519 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
            else {
                File tmpFile = new File(filePath);
                if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(filePath);
            }

(startLine=548 endLine=554 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
            else {
                File tmpFile = new File(filePath);
                if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(filePath);
            }

(startLine=582 endLine=588 srcPath=/root/NewExperiment/freecolFilter/00032/src/net/sf/freecol/client/gui/ImageLibrary.java)
            } else {
                File tmpFile = new File(filePath);
                if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
                    throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
                }
                tempImage = new ImageIcon(filePath);
            }

commonMethod: 
(startLine=278 endLine=299 srcPath=/root/NewExperiment/freecolFilter/00033/src/net/sf/freecol/client/gui/ImageLibrary.java)
    /**
    * Finds the image file in the given <code>filePath</code>.
    *
    * @doLookup If <i>true</i> then the <code>resourceLocator</code>
    *           is used when searching for the image file.
    * @return An ImageIcon with data loaded from the image file.
    */
    private ImageIcon findImage(String filePath, Class resourceLocator, boolean doLookup) throws FreeColException {
        if (doLookup) {
            URL url = resourceLocator.getResource(filePath);
            if (url != null) {
                return new ImageIcon(url);
            }
        }

        File tmpFile = new File(filePath);
        if ((tmpFile == null) || !tmpFile.exists() || !tmpFile.isFile() || !tmpFile.canRead()) {
            throw new FreeColException("The data file \"" + filePath + "\" could not be found.");
        }
        
        return new ImageIcon(filePath);
    }


, Instance #
frags: 
(startLine=2474 endLine=2483 srcPath=/root/NewExperiment/freecolFilter/00056/src/net/sf/freecol/common/model/Unit.java)
                if (getOwner().isEuropean()) {
                    int plunderGold = (int) (newTile.getSettlement().getOwner().getGold() * 0.1); // 10% of their gold
                    getOwner().modifyGold(plunderGold);
                    newTile.getSettlement().getOwner().modifyGold(-plunderGold);

                    targetcolony = (Colony)(newTile.getSettlement());
                    targetcolony.setOwner(getOwner()); // This also changes over all of the units...
                    setLocation(newTile);
                    addModelMessage(this, "model.unit.colonyCaptured", new String[][] {{"%colony%", newTile.getColony().getName()}, {"%amount%", Integer.toString(plunderGold)}});
                } else { // Indian:

(startLine=2484 endLine=2490 srcPath=/root/NewExperiment/freecolFilter/00056/src/net/sf/freecol/common/model/Unit.java)
                    if (newTile.getSettlement() instanceof Colony && newTile.getColony().getUnitCount() <= 1) {
                        int plunderGold = (int) (newTile.getSettlement().getOwner().getGold() * 0.1); // 10% of their gold
                        getOwner().modifyGold(plunderGold);
                        newTile.getSettlement().getOwner().modifyGold(-plunderGold);
                        addModelMessage(newTile.getSettlement().getOwner(), "model.unit.colonyBurning", new String[][] {{"%colony%", newTile.getColony().getName()}, {"%amount%", Integer.toString(plunderGold)}});
                        newTile.getSettlement().dispose();
                    } else {

commonMethod: 
(startLine=1753 endLine=1785 srcPath=/root/NewExperiment/freecolFilter/00057/src/net/sf/freecol/common/model/Unit.java)
    /**
    * Moves this unit to europe.
    * @exception IllegalStateException If the move is illegal.
    */
    public void moveToEurope() {

        // Check if this move is illegal or not:
        if (!(getLocation() instanceof Europe)) {
            boolean ok = false;

            Vector surroundingTiles = getGame().getMap().getSurroundingTiles(getTile(), 1);
            if (surroundingTiles.size() != 8) {
                ok = true;
            } else {
                for (int i=0; i<surroundingTiles.size(); i++) {
                    Tile tile = (Tile) surroundingTiles.get(i);
                    if (tile == null || tile.getType() == Tile.HIGH_SEAS) {
                        ok = true;
                        break;
                    }
                }
            }

            if (!ok) {
                throw new IllegalStateException("It is not allowed to move units to europe from the tile where this unit is located.");
            }

            setEntryLocation(getLocation());
        }

        setState(TO_EUROPE);
        setLocation(getOwner().getEurope());
    }


, Instance #
frags: 
(startLine=481 endLine=489 srcPath=/root/NewExperiment/freecolFilter/00056/src/net/sf/freecol/server/control/InGameInputHandler.java)
                    if (!enemyPlayer.canSee(oldTile)) {
                        Element updateElement = Message.createNewRootElement("update");
                        updateElement.appendChild(oldTile.toXMLElement(enemyPlayer, updateElement.getOwnerDocument()));
                        try {
                            enemyPlayer.getConnection().send(updateElement);
                        } catch (IOException e) {
                            logger.warning("Could not send message to: " + enemyPlayer.getName() + " with connection " + enemyPlayer.getConnection());
                        }
                    } else if (!enemyPlayer.canSee(newTile)) {

(startLine=489 endLine=497 srcPath=/root/NewExperiment/freecolFilter/00056/src/net/sf/freecol/server/control/InGameInputHandler.java)
                    } else if (!enemyPlayer.canSee(newTile)) {
                        Element updateElement = Message.createNewRootElement("update");
                        updateElement.appendChild(newTile.toXMLElement(enemyPlayer, updateElement.getOwnerDocument()));
                        try {
                            enemyPlayer.getConnection().send(updateElement);
                        } catch (IOException e) {
                            logger.warning("Could not send message to: " + enemyPlayer.getName() + " with connection " + enemyPlayer.getConnection());
                        }
                    }

commonMethod: 
(startLine=519 endLine=570 srcPath=/root/NewExperiment/freecolFilter/00057/src/net/sf/freecol/server/control/InGameInputHandler.java)
    /**
    * Generates a result of an attack.
    */
    private int generateAttackResult(Unit unit, Unit defender) {
        int attackPower = unit.getOffensePower(defender);
        int totalProbability = attackPower + defender.getDefensePower(unit);
        int result;
        int r = attackCalculator.nextInt(totalProbability+1);
        if (r > attackPower) {
            result = Unit.ATTACK_LOSS;
        } else if(r == attackPower) {
            if (defender.isNaval()) {
                result = Unit.ATTACK_EVADES;
            } else {
                result = Unit.ATTACK_WIN;
            }
        } else { // (r < attackPower)
            result = Unit.ATTACK_WIN;
        }

        if (result == Unit.ATTACK_WIN) {
            int diff = defender.getDefensePower(unit)*2-attackPower;
            int r2 = attackCalculator.nextInt((diff<3) ? 3 : diff);

            if (r2 == 0) {
                result = Unit.ATTACK_GREAT_WIN;
            } else {
                result = Unit.ATTACK_WIN;
            }
        }
        
        if (result == Unit.ATTACK_LOSS) {
            int diff = attackPower*2-defender.getDefensePower(unit);
            int r2 = attackCalculator.nextInt((diff<3) ? 3 : diff);

            if (r2 == 0) {
                result = Unit.ATTACK_GREAT_LOSS;
            } else {
                result = Unit.ATTACK_LOSS;
            }
        }

        if ((result == Unit.ATTACK_WIN || result == Unit.ATTACK_GREAT_WIN) && (
                defender.getTile().getSettlement() != null && defender.getTile().getSettlement() instanceof IndianSettlement
                && ((IndianSettlement) defender.getTile().getSettlement()).getUnitCount()+defender.getTile().getUnitCount() <= 1
                || defender.getTile().getColony() != null && !defender.isArmed() && !defender.isMounted() && defender.getType() != Unit.ARTILLERY
                && defender.getType() != Unit.DAMAGED_ARTILLERY && !defender.isMounted())) {
            result = Unit.ATTACK_DONE_SETTLEMENT;
        }

        return result;
    }


, Instance #
frags: 
(startLine=481 endLine=489 srcPath=/root/NewExperiment/freecolFilter/00056/src/net/sf/freecol/server/control/InGameInputHandler.java)
                    if (!enemyPlayer.canSee(oldTile)) {
                        Element updateElement = Message.createNewRootElement("update");
                        updateElement.appendChild(oldTile.toXMLElement(enemyPlayer, updateElement.getOwnerDocument()));
                        try {
                            enemyPlayer.getConnection().send(updateElement);
                        } catch (IOException e) {
                            logger.warning("Could not send message to: " + enemyPlayer.getName() + " with connection " + enemyPlayer.getConnection());
                        }
                    } else if (!enemyPlayer.canSee(newTile)) {

(startLine=489 endLine=497 srcPath=/root/NewExperiment/freecolFilter/00056/src/net/sf/freecol/server/control/InGameInputHandler.java)
                    } else if (!enemyPlayer.canSee(newTile)) {
                        Element updateElement = Message.createNewRootElement("update");
                        updateElement.appendChild(newTile.toXMLElement(enemyPlayer, updateElement.getOwnerDocument()));
                        try {
                            enemyPlayer.getConnection().send(updateElement);
                        } catch (IOException e) {
                            logger.warning("Could not send message to: " + enemyPlayer.getName() + " with connection " + enemyPlayer.getConnection());
                        }
                    }

commonMethod: 
(startLine=808 endLine=814 srcPath=/root/NewExperiment/freecolFilter/00057/src/net/sf/freecol/common/model/Unit.java)
    /**
    * Checks if this unit is visible to the given player.
    */
    public boolean isVisibleTo(Player player) {
        return (getTile() != null && player.canSee(getTile()) && (getTile().getSettlement() == null
                || getTile().getSettlement().getOwner() == player));
    }


, Instance #
frags: 
(startLine=704 endLine=719 srcPath=/root/NewExperiment/freecolFilter/00071/src/net/sf/freecol/common/model/Colony.java)
    public ColonyTile getVacantColonyTileFor(Unit unit, int goodsType) {
        ColonyTile bestPick = null;
        int highestProduction = 0;

        Iterator colonyTileIterator = getColonyTileIterator();
        while (colonyTileIterator.hasNext()) {
            ColonyTile colonyTile = (ColonyTile) colonyTileIterator.next();
            if (colonyTile.canAdd(unit) && unit.getFarmedPotential(goodsType, colonyTile.getWorkTile()) > highestProduction
                    && (colonyTile.getWorkTile().isLand() || getBuilding(Building.DOCK).isBuilt())) {
                highestProduction = unit.getFarmedPotential(goodsType, colonyTile.getWorkTile());
                bestPick = colonyTile;
            }
        }

        return bestPick;
    }

(startLine=727 endLine=740 srcPath=/root/NewExperiment/freecolFilter/00071/src/net/sf/freecol/common/model/Colony.java)
    public int getVacantColonyTileProductionFor(Unit unit, int goodsType) {
        int highestProduction = 0;

        Iterator colonyTileIterator = getColonyTileIterator();
        while (colonyTileIterator.hasNext()) {
            ColonyTile colonyTile = (ColonyTile) colonyTileIterator.next();
            if (colonyTile.canAdd(unit) && unit.getFarmedPotential(goodsType, colonyTile.getWorkTile()) > highestProduction
                    && (colonyTile.getWorkTile().isLand() || getBuilding(Building.DOCK).isBuilt())) {
                highestProduction = unit.getFarmedPotential(goodsType, colonyTile.getWorkTile());
            }
        }

        return highestProduction;
    }

commonMethod: 
(startLine=1537 endLine=1545 srcPath=/root/NewExperiment/freecolFilter/00072/src/net/sf/freecol/common/model/Unit.java)
    /**
    * Gets the nation the unit is serving. One of {DUTCH , ENGLISH, FRENCH,
    * SPANISH}.
    *
    * @return The nation the unit is serving.
    */
    public int getNation() {
        return owner.getNation();
    }


, Instance #
frags: 
(startLine=780 endLine=788 srcPath=/root/NewExperiment/freecolFilter/00091/src/net/sf/freecol/common/model/Colony.java)
        while (colonyTileIterator.hasNext()) {
            ColonyTile colonyTile = (ColonyTile) colonyTileIterator.next();
            if (colonyTile.canAdd(unit) && unit.getFarmedPotential(goodsType, colonyTile.getWorkTile()) > highestProduction
                    && (colonyTile.getWorkTile().isLand() || getBuilding(Building.DOCK).isBuilt())
                    && (colonyTile.getWorkTile().getNationOwner() == Player.NO_NATION || colonyTile.getWorkTile().getNationOwner() == unit.getNation())) {
                highestProduction = unit.getFarmedPotential(goodsType, colonyTile.getWorkTile());
                bestPick = colonyTile;
            }
        }

(startLine=803 endLine=810 srcPath=/root/NewExperiment/freecolFilter/00091/src/net/sf/freecol/common/model/Colony.java)
        while (colonyTileIterator.hasNext()) {
            ColonyTile colonyTile = (ColonyTile) colonyTileIterator.next();
            if (colonyTile.canAdd(unit) && unit.getFarmedPotential(goodsType, colonyTile.getWorkTile()) > highestProduction
                    && (colonyTile.getWorkTile().isLand() || getBuilding(Building.DOCK).isBuilt())
                    && (colonyTile.getWorkTile().getNationOwner() == Player.NO_NATION || colonyTile.getWorkTile().getNationOwner() == unit.getNation())) {
                highestProduction = unit.getFarmedPotential(goodsType, colonyTile.getWorkTile());
            }
        }

commonMethod: 
(startLine=872 endLine=886 srcPath=/root/NewExperiment/freecolFilter/00092/src/net/sf/freecol/common/model/Colony.java)
    /**
	 *
	 * @param unit
	 * @param colonyTile
	 * @return
	 * 
	 * @date Oct 1, 2005 9:13:41 PM by chris
	 */
	public boolean verifyWorkerCanWorkLand(Unit unit, ColonyTile colonyTile) {
		final boolean spaceForWorker = colonyTile.canAdd(unit);		// CHRIS
		final boolean landIsAccessible = (colonyTile.getWorkTile().isLand() || getBuilding(Building.DOCK).isBuilt());
		final boolean workerAllowedToWorkLand = (colonyTile.getWorkTile().getNationOwner() == Player.NO_NATION || colonyTile.getWorkTile().getNationOwner() == unit.getNation());
		final boolean workable = spaceForWorker && landIsAccessible && workerAllowedToWorkLand;
		return workable;
	}


, Instance #
frags: 
(startLine=123 endLine=129 srcPath=/root/NewExperiment/freecolFilter/00097/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    } else {
                        if (tempUnit.getTile() == null) { // -> in Europe
                            menuItem = new JMenuItem( Messages.message("arm") + " (" + tempUnit.getGame().getMarket().getBidPrice(Goods.MUSKETS, 50) + " gold)");
                        } else {
                            menuItem = new JMenuItem( Messages.message("arm") );
                        }
                    }

(startLine=138 endLine=144 srcPath=/root/NewExperiment/freecolFilter/00097/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    } else {
                        if (tempUnit.getTile() == null) { // -> in Europe
                            menuItem = new JMenuItem( Messages.message("mount") + " (" + tempUnit.getGame().getMarket().getBidPrice(Goods.HORSES, 50) + " gold)" );
                        } else {
                            menuItem = new JMenuItem( Messages.message("mount") );
                        }
                    }

commonMethod: 
(startLine=324 endLine=341 srcPath=/root/NewExperiment/freecolFilter/00098/src/net/sf/freecol/common/model/Colony.java)
    /**
    * Gets a <code>Building</code> of the specified type.
    *
    * @param type The type of building to get.
    * @return The <code>Building</code>.
    */
    public Building getBuilding(int type) {
        Iterator buildingIterator = getBuildingIterator();

        while (buildingIterator.hasNext()) {
            Building building = (Building) buildingIterator.next();
            if (building.isType(type)) {
                return building;
            }
        }

        return null;
    }


, Instance #
frags: 
(startLine=2904 endLine=2920 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (isMounted()) {
                    setMounted(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setMounted(true, true);
                    }
                } else if (getType() == ARTILLERY) {
                    setType(DAMAGED_ARTILLERY);
                } else if ((getType() == KINGS_REGULAR) || (getType() == DAMAGED_ARTILLERY)) {
                    dispose();
                } else {
                    setArmed(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setArmed(true, true);
                    }
                }
            }

(startLine=3065 endLine=3081 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (defender.isMounted()) {
                    defender.setMounted(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setMounted(true, true);
                    }
                } else if ((defender.getType() == ARTILLERY)) {
                    defender.setType(DAMAGED_ARTILLERY);
                } else if ((defender.getType() == KINGS_REGULAR) || (defender.getType() == DAMAGED_ARTILLERY)) {
                    defender.dispose();
                } else {
                    defender.setArmed(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setArmed(true, true);
                    }
                }
            }

commonMethod: 
(startLine=3184 endLine=3221 srcPath=/root/NewExperiment/freecolFilter/00103/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Captures an enemy colony and plunders gold.
     *
     * @param colony The enemy colony to capture.
     * @param plunderGold The amount of gold to plunder.
     */
    public void captureColony(Colony colony, int plunderGold) {
        Player enemy = colony.getOwner();
        Player myPlayer = getOwner();
        enemy.modifyTension(getOwner(), Player.TENSION_ADD_MAJOR);

        if (myPlayer.isEuropean()) {
            myPlayer.modifyGold(plunderGold);
            enemy.modifyGold(-plunderGold);

            colony.setOwner(myPlayer); // This also changes over all of the units...
            setLocation(colony.getTile());
            addModelMessage(this, "model.unit.colonyCaptured",
                            new String[][] {{"%colony%", colony.getName()},
                                            {"%amount%", Integer.toString(plunderGold)}});
        } else { // Indian:
            if (colony.getUnitCount() <= 1) {
                myPlayer.modifyGold(plunderGold);
                enemy.modifyGold(-plunderGold);
                addModelMessage(colony, "model.unit.colonyBurning",
                                new String[][] {{"%colony%", colony.getName()},
                                                {"%amount%", Integer.toString(plunderGold)}});
                colony.dispose();
            } else {
                Unit victim = colony.getRandomUnit();
                addModelMessage(colony, "model.unit.colonistSlaughtered",
                                new String[][] {{"%colony%", colony.getName()},
                                                {"%unit%", victim.getName()}});
                victim.dispose();
            }
        }

    }


, Instance #
frags: 
(startLine=2904 endLine=2920 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (isMounted()) {
                    setMounted(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setMounted(true, true);
                    }
                } else if (getType() == ARTILLERY) {
                    setType(DAMAGED_ARTILLERY);
                } else if ((getType() == KINGS_REGULAR) || (getType() == DAMAGED_ARTILLERY)) {
                    dispose();
                } else {
                    setArmed(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setArmed(true, true);
                    }
                }
            }

(startLine=3065 endLine=3081 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (defender.isMounted()) {
                    defender.setMounted(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setMounted(true, true);
                    }
                } else if ((defender.getType() == ARTILLERY)) {
                    defender.setType(DAMAGED_ARTILLERY);
                } else if ((defender.getType() == KINGS_REGULAR) || (defender.getType() == DAMAGED_ARTILLERY)) {
                    defender.dispose();
                } else {
                    defender.setArmed(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setArmed(true, true);
                    }
                }
            }

commonMethod: 
(startLine=2954 endLine=2973 srcPath=/root/NewExperiment/freecolFilter/00103/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Sets the damage to this ship and sends it to its repair
     * location.
     */
    private void shipDamaged() {
        String nation = owner.getNationAsString();
        Location repairLocation = getOwner().getRepairLocation(this);
        String repairLocationName = Messages.message("menuBar.view.europe");
        if (repairLocation instanceof Colony) {
            repairLocationName = ((Colony) repairLocation).getName();
        }
        addModelMessage(this, "model.unit.shipDamaged",
                        new String [][] {{"%ship%", getName()},
                                         {"%repairLocation%", repairLocationName},
                                         {"%nation%", nation}});
        setHitpoints(1);
        getUnitContainer().disposeAllUnits();
        goodsContainer.removeAbove(0);
        sendToRepairLocation();
    }


, Instance #
frags: 
(startLine=2904 endLine=2920 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (isMounted()) {
                    setMounted(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setMounted(true, true);
                    }
                } else if (getType() == ARTILLERY) {
                    setType(DAMAGED_ARTILLERY);
                } else if ((getType() == KINGS_REGULAR) || (getType() == DAMAGED_ARTILLERY)) {
                    dispose();
                } else {
                    setArmed(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setArmed(true, true);
                    }
                }
            }

(startLine=3065 endLine=3081 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (defender.isMounted()) {
                    defender.setMounted(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setMounted(true, true);
                    }
                } else if ((defender.getType() == ARTILLERY)) {
                    defender.setType(DAMAGED_ARTILLERY);
                } else if ((defender.getType() == KINGS_REGULAR) || (defender.getType() == DAMAGED_ARTILLERY)) {
                    defender.dispose();
                } else {
                    defender.setArmed(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setArmed(true, true);
                    }
                }
            }

commonMethod: 
(startLine=3043 endLine=3067 srcPath=/root/NewExperiment/freecolFilter/00103/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Promotes this unit.
     */
    public void promote() {
        String oldName = getName();
        String nation = owner.getNationAsString();

        if (getType() == PETTY_CRIMINAL) {
            setType(INDENTURED_SERVANT);
        } else if (getType() == INDENTURED_SERVANT) {
            setType(FREE_COLONIST);
        } else if (getType() == FREE_COLONIST) {
            setType(VETERAN_SOLDIER);
        } else if (getType() == VETERAN_SOLDIER && getOwner().getRebellionState() > 1) {
            setType(COLONIAL_REGULAR);
        }

        String newName = getName();
        if (!newName.equals(oldName)) {
            addModelMessage(this, "model.unit.unitImproved",
                            new String[][] {{"%oldName%", oldName},
                                            {"%newName%", getName()},
                                            {"%nation%", nation}});
        }
    }


, Instance #
frags: 
(startLine=2904 endLine=2920 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (isMounted()) {
                    setMounted(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setMounted(true, true);
                    }
                } else if (getType() == ARTILLERY) {
                    setType(DAMAGED_ARTILLERY);
                } else if ((getType() == KINGS_REGULAR) || (getType() == DAMAGED_ARTILLERY)) {
                    dispose();
                } else {
                    setArmed(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setArmed(true, true);
                    }
                }
            }

(startLine=3065 endLine=3081 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (defender.isMounted()) {
                    defender.setMounted(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setMounted(true, true);
                    }
                } else if ((defender.getType() == ARTILLERY)) {
                    defender.setType(DAMAGED_ARTILLERY);
                } else if ((defender.getType() == KINGS_REGULAR) || (defender.getType() == DAMAGED_ARTILLERY)) {
                    defender.dispose();
                } else {
                    defender.setArmed(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setArmed(true, true);
                    }
                }
            }

commonMethod: 
(startLine=2986 endLine=3041 srcPath=/root/NewExperiment/freecolFilter/00103/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Demotes this unit. A unit that can not be further demoted is
     * destroyed. The enemy may plunder horses and muskets.
     *
     * @param enemyUnit The unit we are fighting against.
     */
    public void demote(Unit enemyUnit) {
        String oldName = getName();
        String messageID = "model.unit.unitDemoted";
        String nation = owner.getNationAsString();
        if (isMounted()) {
            if (isArmed() && getType() != BRAVE) {
                // dragoon
                setMounted(false);
                if (enemyUnit.getType() == BRAVE) {
                    addModelMessage(this, "model.unit.braveMounted",
                                    new String [][] {{"%nation%", enemyUnit.getOwner().getNationAsString()}});
                    enemyUnit.setMounted(true, true);
                }
            } else {
                // scout, brave?
                messageID = "model.unit.unitSlaughtered";
                dispose();
            }
        } else if (isArmed()) {
            // soldier
            setArmed(false);
            if (enemyUnit.getType() == BRAVE) {
                addModelMessage(this, "model.unit.braveArmed",
                                new String [][] {{"%nation%", enemyUnit.getOwner().getNationAsString()}});
                enemyUnit.setArmed(true, true);
            }
        } else if (getType() == ARTILLERY) {
            messageID = "model.unit.artilleryDamaged";
            setType(DAMAGED_ARTILLERY);
        } else if (getType() == DAMAGED_ARTILLERY ||
                   getType() == KINGS_REGULAR) {
            messageID = "model.unit.unitDestroyed";
            dispose();
        } else {
            // civilians
            if (enemyUnit.getOwner().isEuropean()) {
                messageID = "model.unit.unitCaptured";
                setHitpoints(getInitialHitpoints(enemyUnit.getType()));
                setLocation(enemyUnit.getTile());
                setOwner(enemyUnit.getOwner());
            }
            messageID = "model.unit.unitSlaughtered";
            dispose();
        }
        String newName = getName();
        addModelMessage(this, messageID,
                        new String [][] {{"%oldName%", oldName},
                                         {"%newName%", newName},
                                         {"%nation%", nation}});
    }


, Instance #
frags: 
(startLine=2904 endLine=2920 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (isMounted()) {
                    setMounted(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setMounted(true, true);
                    }
                } else if (getType() == ARTILLERY) {
                    setType(DAMAGED_ARTILLERY);
                } else if ((getType() == KINGS_REGULAR) || (getType() == DAMAGED_ARTILLERY)) {
                    dispose();
                } else {
                    setArmed(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setArmed(true, true);
                    }
                }
            }

(startLine=3065 endLine=3081 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (defender.isMounted()) {
                    defender.setMounted(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setMounted(true, true);
                    }
                } else if ((defender.getType() == ARTILLERY)) {
                    defender.setType(DAMAGED_ARTILLERY);
                } else if ((defender.getType() == KINGS_REGULAR) || (defender.getType() == DAMAGED_ARTILLERY)) {
                    defender.dispose();
                } else {
                    defender.setArmed(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setArmed(true, true);
                    }
                }
            }

commonMethod: 
(startLine=3142 endLine=3182 srcPath=/root/NewExperiment/freecolFilter/00103/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Destroys an Indian settlement.
     *
     * @param settlement The Indian settlement to destroy.
     */
    public void destroySettlement(IndianSettlement settlement) {            
        Player enemy = settlement.getOwner();
        boolean wasCapital = settlement.isCapital();
        Tile newTile = settlement.getTile();
        settlement.dispose();

        enemy.modifyTension(getOwner(), Player.TENSION_ADD_MAJOR);

        int randomTreasure = getGame().
            getModelController().getRandom(getID() + "indianTreasureRandom" +
                                           getID(), 11);
        Unit tTrain = getGame().getModelController().
            createUnit(getID() + "indianTreasure" + getID(),
                       newTile, getOwner(), Unit.TREASURE_TRAIN);

        // Larger treasure if Hernan Cortes is present in the congress:
        int bonus = (getOwner().hasFather(FoundingFather.HERNAN_CORTES)) ? 2 : 1;

        // Incan and Aztecs give more gold
        if (enemy.getNation() == Player.INCA ||
            enemy.getNation() == Player.AZTEC) {
            tTrain.setTreasureAmount(randomTreasure * 500 * bonus + 10000);
        } else {
            tTrain.setTreasureAmount(randomTreasure * 50 * bonus + 300);
        }

        // capitals give more gold
        if (wasCapital) {
            tTrain.setTreasureAmount((tTrain.getTreasureAmount()*3)/2);
        }

        addModelMessage(this, "model.unit.indianTreasure",
                        new String[][] {{"%indian%", enemy.getNationAsString()},
                                        {"%amount%", Integer.toString(tTrain.getTreasureAmount())}});
        setLocation(newTile);
    }


, Instance #
frags: 
(startLine=2904 endLine=2920 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (isMounted()) {
                    setMounted(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setMounted(true, true);
                    }
                } else if (getType() == ARTILLERY) {
                    setType(DAMAGED_ARTILLERY);
                } else if ((getType() == KINGS_REGULAR) || (getType() == DAMAGED_ARTILLERY)) {
                    dispose();
                } else {
                    setArmed(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setArmed(true, true);
                    }
                }
            }

(startLine=3065 endLine=3081 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (defender.isMounted()) {
                    defender.setMounted(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setMounted(true, true);
                    }
                } else if ((defender.getType() == ARTILLERY)) {
                    defender.setType(DAMAGED_ARTILLERY);
                } else if ((defender.getType() == KINGS_REGULAR) || (defender.getType() == DAMAGED_ARTILLERY)) {
                    defender.dispose();
                } else {
                    defender.setArmed(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setArmed(true, true);
                    }
                }
            }

commonMethod: 
(startLine=1213 endLine=1249 srcPath=/root/NewExperiment/freecolFilter/00103/src/net/sf/freecol/common/model/Player.java)
    /**
    * Returns the closest <code>Location</code> in which the given ship can get repaired.
    * This is the closest {@link Colony} with a drydock, or {@link Europe} if this
    * player has no colonies with a drydock.
    *
    * @param unit The ship that needs a location to be repaired.
    * @return The closest <code>Location</code> in which the ship can be repaired.
    * @exception IllegalArgumentException if the <code>unit</code> is not a ship.
    */
    public Location getRepairLocation(Unit unit) {
        if (!unit.isNaval()) {
            throw new IllegalArgumentException();
        }

        Location closestLocation = null;
        int shortestDistance = Integer.MAX_VALUE;

        Iterator colonyIterator = getColonyIterator();
        while (colonyIterator.hasNext()) {
            Colony colony = (Colony) colonyIterator.next();
            if (colony == null || colony.getBuilding(Building.DOCK) == null) {
                continue; // This has happened before, oddly ~ smelenchuk
            } 
            int distance;
            if (colony.getBuilding(Building.DOCK).getLevel() >= Building.SHOP &&
                    (distance = unit.getTile().getDistanceTo(colony.getTile())) < shortestDistance) {
                closestLocation = colony;
                shortestDistance = distance;
            }
        }

        if (closestLocation != null) {
            return closestLocation;
        } else {
            return getEurope();
        }
    }


, Instance #
frags: 
(startLine=2904 endLine=2920 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (isMounted()) {
                    setMounted(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setMounted(true, true);
                    }
                } else if (getType() == ARTILLERY) {
                    setType(DAMAGED_ARTILLERY);
                } else if ((getType() == KINGS_REGULAR) || (getType() == DAMAGED_ARTILLERY)) {
                    dispose();
                } else {
                    setArmed(false, true);
                    if (defender.getType() == BRAVE && result == ATTACK_GREAT_LOSS) {
                        defender.setArmed(true, true);
                    }
                }
            }

(startLine=3065 endLine=3081 srcPath=/root/NewExperiment/freecolFilter/00102/src/net/sf/freecol/common/model/Unit.java)
            } else {
                if (defender.isMounted()) {
                    defender.setMounted(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setMounted(true, true);
                    }
                } else if ((defender.getType() == ARTILLERY)) {
                    defender.setType(DAMAGED_ARTILLERY);
                } else if ((defender.getType() == KINGS_REGULAR) || (defender.getType() == DAMAGED_ARTILLERY)) {
                    defender.dispose();
                } else {
                    defender.setArmed(false, true);
                    if (getType() == BRAVE && result == ATTACK_GREAT_WIN) {
                        setArmed(true, true);
                    }
                }
            }

commonMethod: 
(startLine=3069 endLine=3107 srcPath=/root/NewExperiment/freecolFilter/00103/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Adjusts the tension and alarm levels of the enemy unit's owner
     * according to the type of attack.
     *
     * @param enemyUnit The unit we are attacking.
     */
    public void adjustTension(Unit enemyUnit) {
        Player myPlayer = getOwner();
        Player enemy = enemyUnit.getOwner();
        myPlayer.modifyTension(enemy, -Player.TENSION_ADD_MINOR);
        if (getIndianSettlement() != null) {
            getIndianSettlement().modifyAlarm(enemy, -IndianSettlement.ADD_ALARM_UNIT_DESTROYED/2);
        }

        // Increases the enemy's tension levels:
        if (enemy.isAI()) {
            Settlement settlement = enemyUnit.getTile().getSettlement();
            IndianSettlement homeTown = enemyUnit.getIndianSettlement();
            if (settlement != null) {
                // we are attacking a settlement
                if (settlement instanceof IndianSettlement &&
                    ((IndianSettlement) settlement).isCapital()) {
                    enemy.modifyTension(myPlayer, Player.TENSION_ADD_MAJOR);
                } else {
                    enemy.modifyTension(myPlayer, Player.TENSION_ADD_NORMAL);
                }
                if (homeTown != null) {
                    homeTown.modifyAlarm(myPlayer, IndianSettlement.ADD_ALARM_SETTLEMENT_ATTACKED);
                }
            } else {
                // we are attacking an enemy unit in the open
                enemy.modifyTension(myPlayer, Player.TENSION_ADD_MINOR);
                if (homeTown != null) {
                    homeTown.modifyAlarm(myPlayer, IndianSettlement.ADD_ALARM_UNIT_DESTROYED);
                }
            }
        }

    }


, Instance #
frags: 
(startLine=412 endLine=433 srcPath=/root/NewExperiment/freecolFilter/00135/src/net/sf/freecol/client/gui/Canvas.java)
                    (source instanceof Colony || source instanceof WorkLocation) && !colonyPanel.isShowing()) {

                FreeColDialog confirmDialog = FreeColDialog.createConfirmDialog(message, okText, cancelText);
                confirmDialog.setLocation(getWidth() / 2 - confirmDialog.getWidth() / 2,
                                          getHeight() / 2 - confirmDialog.getHeight() / 2);
                add(confirmDialog, MODEL_MESSAGE_LAYER);
                confirmDialog.requestFocus();

                if (!confirmDialog.getResponseBoolean()) {
                    remove(confirmDialog);
                    if (source instanceof Europe) {
                        showEuropePanel();
                    } else if (source instanceof Colony) {
                        showColonyPanel((Colony) source);
                    } else if (source instanceof WorkLocation) {
                        showColonyPanel(((WorkLocation) source).getColony());
                    }
                } else {
                    remove(confirmDialog);
                    freeColClient.getInGameController().nextModelMessage();
                }
            } else {

(startLine=475 endLine=496 srcPath=/root/NewExperiment/freecolFilter/00135/src/net/sf/freecol/client/gui/Canvas.java)
            !colonyPanel.isShowing()) {

            FreeColDialog confirmDialog = FreeColDialog.createConfirmDialog(messageText, okText, cancelText);
            confirmDialog.setLocation(getWidth() / 2 - confirmDialog.getWidth() / 2,
                                      getHeight() / 2 - confirmDialog.getHeight() / 2);
            add(confirmDialog, MODEL_MESSAGE_LAYER);
            confirmDialog.requestFocus();

            if (!confirmDialog.getResponseBoolean()) {
                remove(confirmDialog);
                if (source instanceof Europe) {
                    showEuropePanel();
                } else if (source instanceof Colony) {
                    showColonyPanel((Colony) source);
                } else if (source instanceof WorkLocation) {
                    showColonyPanel(((WorkLocation) source).getColony());
                }
            } else {
                remove(confirmDialog);
                freeColClient.getInGameController().nextModelMessage();
            }
        } else {

commonMethod: 
(startLine=1359 endLine=1369 srcPath=/root/NewExperiment/freecolFilter/00136/src/net/sf/freecol/client/gui/Canvas.java)
    /**
     * Adds a component centered on this Canvas. Removes the statuspanel if visible
     * (and <code>comp != statusPanel</code>).
     * @param comp The component to add to this ToEuropePanel.
     * @param i The layer to add the component to (see JLayeredPane).
     */
    public void addCentered(Component comp, Integer i) { 
        comp.setLocation(getWidth() / 2 - comp.getWidth() / 2,
                (getHeight() + getMenuBarHeight()) / 2 - comp.getHeight() / 2);
        add(comp, i);
    }


, Instance #
frags: 
(startLine=433 endLine=443 srcPath=/root/NewExperiment/freecolFilter/00135/src/net/sf/freecol/client/gui/Canvas.java)
            } else {
                FreeColDialog informationDialog = FreeColDialog.createInformationDialog(message, okText);
                informationDialog.setLocation(getWidth() / 2 - informationDialog.getWidth() / 2, getHeight() / 2 - informationDialog.getHeight() / 2);
                add(informationDialog, MODEL_MESSAGE_LAYER);
                informationDialog.requestFocus();

                informationDialog.getResponse();
                remove(informationDialog);

                freeColClient.getInGameController().nextModelMessage();
            }

(startLine=496 endLine=507 srcPath=/root/NewExperiment/freecolFilter/00135/src/net/sf/freecol/client/gui/Canvas.java)
        } else {
            FreeColDialog informationDialog = FreeColDialog.createInformationDialog(messageText);
            informationDialog.setLocation(getWidth() / 2 - informationDialog.getWidth() / 2,
                                          getHeight() / 2 - informationDialog.getHeight() / 2);
            add(informationDialog, MODEL_MESSAGE_LAYER);
            informationDialog.requestFocus();

            informationDialog.getResponse();
            remove(informationDialog);

            freeColClient.getInGameController().nextModelMessage();
        }

commonMethod: 
(startLine=1359 endLine=1369 srcPath=/root/NewExperiment/freecolFilter/00136/src/net/sf/freecol/client/gui/Canvas.java)
    /**
     * Adds a component centered on this Canvas. Removes the statuspanel if visible
     * (and <code>comp != statusPanel</code>).
     * @param comp The component to add to this ToEuropePanel.
     * @param i The layer to add the component to (see JLayeredPane).
     */
    public void addCentered(Component comp, Integer i) { 
        comp.setLocation(getWidth() / 2 - comp.getWidth() / 2,
                (getHeight() + getMenuBarHeight()) / 2 - comp.getHeight() / 2);
        add(comp, i);
    }


, Instance #
frags: 
(startLine=433 endLine=443 srcPath=/root/NewExperiment/freecolFilter/00135/src/net/sf/freecol/client/gui/Canvas.java)
            } else {
                FreeColDialog informationDialog = FreeColDialog.createInformationDialog(message, okText);
                informationDialog.setLocation(getWidth() / 2 - informationDialog.getWidth() / 2, getHeight() / 2 - informationDialog.getHeight() / 2);
                add(informationDialog, MODEL_MESSAGE_LAYER);
                informationDialog.requestFocus();

                informationDialog.getResponse();
                remove(informationDialog);

                freeColClient.getInGameController().nextModelMessage();
            }

(startLine=496 endLine=507 srcPath=/root/NewExperiment/freecolFilter/00135/src/net/sf/freecol/client/gui/Canvas.java)
        } else {
            FreeColDialog informationDialog = FreeColDialog.createInformationDialog(messageText);
            informationDialog.setLocation(getWidth() / 2 - informationDialog.getWidth() / 2,
                                          getHeight() / 2 - informationDialog.getHeight() / 2);
            add(informationDialog, MODEL_MESSAGE_LAYER);
            informationDialog.requestFocus();

            informationDialog.getResponse();
            remove(informationDialog);

            freeColClient.getInGameController().nextModelMessage();
        }

commonMethod: 
(startLine=1634 endLine=1640 srcPath=/root/NewExperiment/freecolFilter/00136/src/net/sf/freecol/client/gui/Canvas.java)
    /**
    * Returns the image provider that is being used by this canvas.
    * @return The image provider that is being used by this canvas.
    */
    public ImageProvider getImageProvider() {
        return gui.getImageLibrary();
    }


, Instance #
frags: 
(startLine=947 endLine=964 srcPath=/root/NewExperiment/freecolFilter/00137/src/net/sf/freecol/common/model/Building.java)
        for (int i=0; i<unitNodeList.getLength(); i++) {
            Node node = unitNodeList.item(i);
            if (!(node instanceof Element)) {
                continue;
            }
            Element unitElement = (Element) node;

            Unit unit = (Unit) getGame().getFreeColGameObject(unitElement.getAttribute("ID"));
            if (unit != null) {
                unit.readFromXMLElement(unitElement);
                if (!units.contains(unit)) {
                    units.add(unit);
                }
            } else {
                unit = new Unit(getGame(), unitElement);
                units.add(unit);
            }
        }

(startLine=251 endLine=271 srcPath=/root/NewExperiment/freecolFilter/00137/src/net/sf/freecol/common/model/UnitContainer.java)
        for (int i=0; i<unitNodeList.getLength(); i++) {
            Node node = unitNodeList.item(i);
            if (!(node instanceof Element)) {
                continue;
            }
            Element unitElement = (Element) node;

            // Check if the unit is already here -> only update:
            Unit u = (Unit) getGame().getFreeColGameObject(unitElement.getAttribute("ID"));

            if (u != null) {
                u.readFromXMLElement(unitElement);
                if (!units.contains(u)) {
                    units.add(u);
                }
                //u.setLocation(parent);
            } else {
                u = new Unit(getGame(), unitElement);
                units.add(u);
            }
        }

commonMethod: 
(startLine=434 endLine=443 srcPath=/root/NewExperiment/freecolFilter/00138/src/net/sf/freecol/common/model/FreeColGameObject.java)
    /**
     * Initialize this object from an XML-representation of this object.
     * @param in The input stream containing the XML.
     * @throws XMLStreamException if a problem was encountered
     *      during parsing.
     */
    public final void readFromXML(XMLStreamReader in) throws XMLStreamException {
        uninitialized = false;
        readFromXMLImpl(in);
    }


, Instance #
frags: 
(startLine=924 endLine=935 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    if (carrier.getLocation() instanceof Europe) {
                        Element sellGoodsElement = Message.createNewRootElement("sellGoods");
                        sellGoodsElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), sellGoodsElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(sellGoodsElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"sellGoodsElement\"-message!");
                        }
                    } else {

(startLine=935 endLine=946 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    } else {
                        Element unloadCargoElement = Message.createNewRootElement("unloadCargo");
                        unloadCargoElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), unloadCargoElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(unloadCargoElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"unloadCargoElement\"-message!");
                        }
                    }

commonMethod: 
(startLine=74 endLine=80 srcPath=/root/NewExperiment/freecolFilter/00143/src/net/sf/freecol/server/ai/AIObject.java)
    /**
     * Returns the main AI-object.
     * @return The <code>AIMain</code>.
     */
    public AIMain getAIMain() {
        return aiMain;
    }


, Instance #
frags: 
(startLine=924 endLine=935 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    if (carrier.getLocation() instanceof Europe) {
                        Element sellGoodsElement = Message.createNewRootElement("sellGoods");
                        sellGoodsElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), sellGoodsElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(sellGoodsElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"sellGoodsElement\"-message!");
                        }
                    } else {

(startLine=935 endLine=946 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    } else {
                        Element unloadCargoElement = Message.createNewRootElement("unloadCargo");
                        unloadCargoElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), unloadCargoElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(unloadCargoElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"unloadCargoElement\"-message!");
                        }
                    }

commonMethod: 
(startLine=623 endLine=629 srcPath=/root/NewExperiment/freecolFilter/00143/src/net/sf/freecol/server/FreeColServer.java)
    /**
    * Checks if the user is playing in singleplayer mode.
    * @return <i>true</i> if the user is playing in singleplayer mode, <i>false</i> otherwise.
    */
    public boolean isSingleplayer() {
        return singleplayer;
    }


, Instance #
frags: 
(startLine=924 endLine=935 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    if (carrier.getLocation() instanceof Europe) {
                        Element sellGoodsElement = Message.createNewRootElement("sellGoods");
                        sellGoodsElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), sellGoodsElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(sellGoodsElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"sellGoodsElement\"-message!");
                        }
                    } else {

(startLine=935 endLine=946 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    } else {
                        Element unloadCargoElement = Message.createNewRootElement("unloadCargo");
                        unloadCargoElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), unloadCargoElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(unloadCargoElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"unloadCargoElement\"-message!");
                        }
                    }

commonMethod: 
(startLine=1201 endLine=1207 srcPath=/root/NewExperiment/freecolFilter/00143/src/net/sf/freecol/common/model/Player.java)
    /**
    * Determines whether this player is an AI player.
    * @return Whether this player is an AI player.
    */
    public boolean isAI() {
        return ai;
    }


, Instance #
frags: 
(startLine=924 endLine=935 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    if (carrier.getLocation() instanceof Europe) {
                        Element sellGoodsElement = Message.createNewRootElement("sellGoods");
                        sellGoodsElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), sellGoodsElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(sellGoodsElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"sellGoodsElement\"-message!");
                        }
                    } else {

(startLine=935 endLine=946 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    } else {
                        Element unloadCargoElement = Message.createNewRootElement("unloadCargo");
                        unloadCargoElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), unloadCargoElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(unloadCargoElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"unloadCargoElement\"-message!");
                        }
                    }

commonMethod: 
(startLine=109 endLine=115 srcPath=/root/NewExperiment/freecolFilter/00143/src/net/sf/freecol/server/ai/AIMain.java)
    /**
     * Gets the main controller object for the server.
     * @return The <code>FreeColServer</code>-object.
     */
    public FreeColServer getFreeColServer() {
        return freeColServer;
    }


, Instance #
frags: 
(startLine=924 endLine=935 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    if (carrier.getLocation() instanceof Europe) {
                        Element sellGoodsElement = Message.createNewRootElement("sellGoods");
                        sellGoodsElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), sellGoodsElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(sellGoodsElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"sellGoodsElement\"-message!");
                        }
                    } else {

(startLine=935 endLine=946 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    } else {
                        Element unloadCargoElement = Message.createNewRootElement("unloadCargo");
                        unloadCargoElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), unloadCargoElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(unloadCargoElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"unloadCargoElement\"-message!");
                        }
                    }

commonMethod: 
(startLine=272 endLine=274 srcPath=/root/NewExperiment/freecolFilter/00143/src/net/sf/freecol/common/model/Market.java)
    public int getSalePrice(Goods goods) {
        return getSalePrice(goods.getType(), goods.getAmount());
    }


, Instance #
frags: 
(startLine=924 endLine=935 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    if (carrier.getLocation() instanceof Europe) {
                        Element sellGoodsElement = Message.createNewRootElement("sellGoods");
                        sellGoodsElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), sellGoodsElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(sellGoodsElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"sellGoodsElement\"-message!");
                        }
                    } else {

(startLine=935 endLine=946 srcPath=/root/NewExperiment/freecolFilter/00142/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    } else {
                        Element unloadCargoElement = Message.createNewRootElement("unloadCargo");
                        unloadCargoElement.appendChild(ag.getGoods().toXMLElement(carrier.getOwner(), unloadCargoElement.getOwnerDocument()));
                        try {
                            connection.sendAndWait(unloadCargoElement);
                            tli.remove();
                            ag.dispose();
                            transportListChanged = true;
                        } catch (IOException e) {
                            logger.warning("Could not send \"unloadCargoElement\"-message!");
                        }
                    }

commonMethod: 
(startLine=236 endLine=242 srcPath=/root/NewExperiment/freecolFilter/00143/src/net/sf/freecol/common/model/Game.java)
    /**
    * Returns this Game's Market.
    * @return This game's Market.
    */
    public Market getMarket() {
        return market;
    }


, Instance #
frags: 
(startLine=53 endLine=159 srcPath=/root/NewExperiment/freecolFilter/00159/src/net/sf/freecol/client/gui/panel/ReportMilitaryPanel.java)
    public void initialize() {
        Player player = parent.getClient().getMyPlayer();

        List colonies = player.getSettlements();
        Collections.sort(colonies, parent.getClient().getClientOptions().getColonyComparator());
        ArrayList colonyNames = new ArrayList();
        Iterator colonyIterator = colonies.iterator();
        while (colonyIterator.hasNext()) {
            colonyNames.add(((Colony) colonyIterator.next()).getName());
        }

        ArrayList otherNames = new ArrayList();

        HashMap<String, List<Unit>> locations = new HashMap<String, List<Unit>>();

        // Display Panel
        reportPanel.removeAll();

        Iterator units = player.getUnitIterator();
        while (units.hasNext()) {
            Unit unit = (Unit) units.next();
            int type = unit.getType();

            if (unit.getType() == Unit.ARTILLERY ||
                unit.getType() == Unit.DAMAGED_ARTILLERY ||
                unit.isArmed()) {

                Location location = unit.getLocation();
                String locationName = null;
                if (unit.getDestination() != null) {
                    locationName = Messages.message("goingTo", new String[][] {{"%location%", unit.getDestination().getLocationName()}});
                } else {
                    locationName = location.getLocationName();
                } 
                if (locationName != null) {
                    List unitList = locations.get(locationName);
                    if (unitList == null) {
                        unitList = new ArrayList();
                        locations.put(locationName, unitList);
                    }
                    unitList.add(unit);
                    if (!(colonyNames.contains(locationName) ||
                          otherNames.contains(locationName))) {
                        otherNames.add(locationName);
                    }
                }
            }
        }

        Collections.sort(otherNames);
        colonyNames.addAll(otherNames);

        int[] widths = new int[] {0, 12, 0};
        int[] heights = new int[colonyNames.size() + 2];
        heights[1] = 12;
        int row = 1;

        int colonyColumn = 1;
        int unitColumn = 3;

        reportPanel.setLayout(new HIGLayout(widths, heights));
        HIGConstraints higConst = new HIGConstraints();

        // REF
        Player refPlayer = player.getREFPlayer();
        int[] ref = player.getMonarch().getREF();
        int[] refUnitType = new int[] {
            Monarch.ARTILLERY,
            Monarch.DRAGOON,
            Monarch.INFANTRY };
        int[] libraryUnitType = new int[] {
            ImageLibrary.ARTILLERY,
            ImageLibrary.KINGS_CAVALRY,
            ImageLibrary.KINGS_REGULAR };
        JPanel refPanel = new JPanel(new GridLayout(0, 12));
        refPanel.setBorder(BorderFactory.createTitledBorder(refPlayer.getNationAsString()));
        for (int index = 0; index < refUnitType.length; index++) {
            for (int count = 0; count < ref[refUnitType[index]]; count++) {
                refPanel.add(buildUnitLabel(libraryUnitType[index], 0.66f));
            }
        }
        reportPanel.add(refPanel, higConst.rcwh(row, colonyColumn, widths.length, 1));

        row += 2;

        colonyIterator = colonyNames.iterator();
        while (colonyIterator.hasNext()) {
            String colony = (String) colonyIterator.next();
            JLabel colonyLabel = new JLabel(colony);
            reportPanel.add(colonyLabel, higConst.rc(row, colonyColumn));
            JPanel unitPanel = new JPanel(new GridLayout(0, 10));
            List unitList = locations.get(colony);
            if (unitList == null) {
                colonyLabel.setForeground(Color.GRAY);
            } else {       
                Collections.sort(unitList, getUnitTypeComparator());
                Iterator unitIterator = unitList.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = (Unit) unitIterator.next();
                    unitPanel.add(new UnitLabel(unit, parent, true));
                }
                reportPanel.add(unitPanel, higConst.rc(row, unitColumn, "l"));
            }
            row++;
        }

    }

(startLine=53 endLine=156 srcPath=/root/NewExperiment/freecolFilter/00159/src/net/sf/freecol/client/gui/panel/ReportNavalPanel.java)
    public void initialize() {
        Player player = parent.getClient().getMyPlayer();

        List colonies = player.getSettlements();
        Collections.sort(colonies, parent.getClient().getClientOptions().getColonyComparator());
        ArrayList colonyNames = new ArrayList();
        Iterator colonyIterator = colonies.iterator();
        while (colonyIterator.hasNext()) {
            colonyNames.add(((Colony) colonyIterator.next()).getName());
        }

        ArrayList otherNames = new ArrayList();

        HashMap<String, List<Unit>> locations = new HashMap<String, List<Unit>>();

        // Display Panel
        reportPanel.removeAll();

        int capacity = 0;
        Iterator units = player.getUnitIterator();
        while (units.hasNext()) {
            Unit unit = (Unit) units.next();
            int type = unit.getType();

            if (unit.isNaval()) {

                capacity += unit.getInitialSpaceLeft();
                Location location = unit.getLocation();
                String locationName = null;
                if (unit.getState() == Unit.TO_AMERICA) {
                    locationName = Messages.message("goingToAmerica");
                } else if (unit.getState() == Unit.TO_EUROPE) {
                    locationName = Messages.message("goingToEurope");
                } else if (unit.getDestination() != null) {
                    locationName = Messages.message("sailingTo", new String[][] {{"%location%", unit.getDestination().getLocationName()}});
                } else {
                    locationName = location.getLocationName();
                } 
                if (locationName != null) {
                    List unitList = locations.get(locationName);
                    if (unitList == null) {
                        unitList = new ArrayList();
                        locations.put(locationName, unitList);
                    }
                    unitList.add(unit);
                    if (!(colonyNames.contains(locationName) ||
                          otherNames.contains(locationName))) {
                        otherNames.add(locationName);
                    }
                }
            }
        }

        Collections.sort(otherNames);
        colonyNames.addAll(otherNames);

        int[] widths = new int[] {0, 12, 0};
        int[] heights = new int[locations.keySet().size() + 2];
        heights[1] = 12;
        int row = 1;

        int colonyColumn = 1;
        int unitColumn = 3;

        reportPanel.setLayout(new HIGLayout(widths, heights));
        HIGConstraints higConst = new HIGConstraints();

        // REF
        Player refPlayer = player.getREFPlayer();
        int[] ref = player.getMonarch().getREF();
        JPanel refPanel = new JPanel(new GridLayout(0, 10));
        refPanel.setBorder(BorderFactory.createTitledBorder(refPlayer.getNationAsString()));
        for (int count = 0; count < ref[Monarch.MAN_OF_WAR]; count++) {
            refPanel.add(buildUnitLabel(ImageLibrary.MAN_O_WAR, 0.66f));
        }
        reportPanel.add(refPanel, higConst.rcwh(row, colonyColumn, widths.length, 1));

        row += 2;

        Iterator locationIterator = colonyNames.iterator();
        while (locationIterator.hasNext()) {
            String location = (String) locationIterator.next();
            List unitList = locations.get(location);
            if (unitList != null) {
                JLabel locationLabel = new JLabel(location);
                reportPanel.add(locationLabel, higConst.rc(row, colonyColumn));
                JPanel unitPanel = new JPanel(new GridLayout(0, 7));
                Collections.sort(unitList, getUnitTypeComparator());
                Iterator unitIterator = unitList.iterator();
                while (unitIterator.hasNext()) {
                    UnitLabel unitLabel = new UnitLabel((Unit) unitIterator.next(), parent, true);
                    // this is necessary because UnitLabel deselects carriers
                    unitLabel.setSelected(true);
                    unitPanel.add(unitLabel);
                }
                reportPanel.add(unitPanel, higConst.rc(row, unitColumn, "l"));
                locations.remove(location);
                row++;
            }
        }

        

    }

commonMethod: 
(startLine=92 endLine=227 srcPath=/root/NewExperiment/freecolFilter/00160/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
    /**
     * Prepares this panel to be displayed.
     */
    public void initialize() {
        Player player = parent.getClient().getMyPlayer();

        locations = new HashMap<String, ArrayList<Unit>>();
        colonies = player.getSettlements();
        Collections.sort(colonies, parent.getClient().getClientOptions().getColonyComparator());
        ArrayList<String> colonyNames = new ArrayList();
        Iterator colonyIterator = colonies.iterator();
        String colonyName;
        while (colonyIterator.hasNext()) {
            colonyName = ((Colony) colonyIterator.next()).getName();
            colonyNames.add(colonyName);
            //locations.put(colonyName, null);
        }
        //locations.put(player.getEurope().getLocationName(), null);

        ArrayList<String> otherNames = new ArrayList<String>();


        // Display Panel
        removeAll();

        // reset row
        row = 1;
        // reset location index
        locationIndex = 0;

        // total cargo capacity of fleet (currently unused)
        int capacity = 0;

        Iterator<Unit> units = player.getUnitIterator();
        while (units.hasNext()) {
            Unit unit = (Unit) units.next();
            int type = unit.getType();
            String locationName = null;

            if (isNaval && unit.isNaval()) {

                capacity += unit.getInitialSpaceLeft();
                Location location = unit.getLocation();
                if (unit.getState() == Unit.TO_AMERICA) {
                    locationName = Messages.message("goingToAmerica");
                } else if (unit.getState() == Unit.TO_EUROPE) {
                    locationName = Messages.message("goingToEurope");
                } else if (unit.getDestination() != null) {
                    locationName = Messages.message("sailingTo", new String[][] {{"%location%", unit.getDestination().getLocationName()}});
                } else {
                    locationName = location.getLocationName();
                } 
            } else if (!isNaval && (unit.getType() == Unit.ARTILLERY ||
                                    unit.getType() == Unit.DAMAGED_ARTILLERY ||
                                    unit.isArmed())) {

                Location location = unit.getLocation();
                if (unit.getDestination() != null) {
                    locationName = Messages.message("goingTo", new String[][] {{"%location%", unit.getDestination().getLocationName()}});
                } else {
                    locationName = location.getLocationName();
                } 
            }

            if (locationName != null) {
                ArrayList<Unit> unitList = locations.get(locationName);
                if (unitList == null) {
                    unitList = new ArrayList<Unit>();
                    locations.put(locationName, unitList);
                }
                unitList.add(unit);
                if (!(colonyNames.contains(locationName) ||
                      otherNames.contains(locationName))) {
                    otherNames.add(locationName);
                }
            }
        }

        heights = new int[colonies.size() + otherNames.size() + extraRows];
        heights[1] = separator;

        setLayout(new HIGLayout(widths, heights));

        // REF
        if (player.getMonarch() != null) {
            Player refPlayer = player.getREFPlayer();
            int[] ref = player.getMonarch().getREF();
            JPanel refPanel;
            if (isNaval) {
                refPanel = new JPanel(new GridLayout(0, 7));
                for (int count = 0; count < ref[Monarch.MAN_OF_WAR]; count++) {
                    refPanel.add(reportPanel.buildUnitLabel(ImageLibrary.MAN_O_WAR, 0.66f));
                }
            } else {
                int[] refUnitType = new int[] {
                    Monarch.ARTILLERY,
                    Monarch.DRAGOON,
                    Monarch.INFANTRY };
                int[] libraryUnitType = new int[] {
                    ImageLibrary.ARTILLERY,
                    ImageLibrary.KINGS_CAVALRY,
                    ImageLibrary.KINGS_REGULAR };
                refPanel = new JPanel(new GridLayout(0, 12));
                refPanel.setBorder(BorderFactory.createTitledBorder(refPlayer.getNationAsString()));
                for (int index = 0; index < refUnitType.length; index++) {
                    for (int count = 0; count < ref[refUnitType[index]]; count++) {
                        refPanel.add(reportPanel.buildUnitLabel(libraryUnitType[index], 0.66f));
                    }
                }
            }
            refPanel.setBorder(BorderFactory.createTitledBorder(refPlayer.getNationAsString()));
            add(refPanel, higConst.rc(row, unitColumn));
        }

        row += 2; // add separator

        // colonies first, sorted according to user preferences
        Iterator<String> locationIterator = colonyNames.iterator();
        while (locationIterator.hasNext()) {
            handleLocation((String) locationIterator.next(), true);
        }

        // Europe next
        if (locations.get(player.getEurope().getLocationName()) != null) {
            handleLocation(player.getEurope().getLocationName(), true);
        }
        otherNames.remove(player.getEurope().getLocationName());

        // finally all other locations, sorted alphabetically
        Collections.sort(otherNames);
        locationIterator = otherNames.iterator();
        while (locationIterator.hasNext()) {
            handleLocation((String) locationIterator.next(), false);
        }

    }


, Instance #
frags: 
(startLine=354 endLine=368 srcPath=/root/NewExperiment/freecolFilter/00176/src/net/sf/freecol/client/gui/panel/FreeColDialog.java)
        for (int index = 0; index < offense.size(); index++) {
            Modifier modifier = offense.get(index);
            preCombatDialog.add(new JLabel(Messages.message(modifier.id)), 
                                higConst.rc(row, labelColumn));
            String value;
            if (modifier.addend == 0 && modifier.numerator != 0) {
                value = String.valueOf(modifier.numerator) + "/" + 
                        String.valueOf(modifier.denominator);
            } else {
                value = String.valueOf(modifier.addend);
            }
            preCombatDialog.add(new JLabel(value),
                                higConst.rc(row, valueColumn, "r"));
            row += 2;
        }

(startLine=381 endLine=395 srcPath=/root/NewExperiment/freecolFilter/00176/src/net/sf/freecol/client/gui/panel/FreeColDialog.java)
        for (int index = 0; index < defense.size(); index++) {
            Modifier modifier = defense.get(index);
            preCombatDialog.add(new JLabel(Messages.message(modifier.id)), 
                                higConst.rc(row, labelColumn));
            String value;
            if (modifier.addend == 0) {
                value = String.valueOf(modifier.numerator) + "/" + 
                        String.valueOf(modifier.denominator);
            } else {
                value = String.valueOf(modifier.addend);
            }
            preCombatDialog.add(new JLabel(value),
                                higConst.rc(row, valueColumn, "r"));
            row += 2;
        }

commonMethod: 
(startLine=607 endLine=643 srcPath=/root/NewExperiment/freecolFilter/00177/src/net/sf/freecol/client/gui/Canvas.java)
    public ImageIcon getImageIcon(Object display) {
        ImageLibrary imageLibrary = (ImageLibrary) getImageProvider();
        ImageIcon imageIcon = null;
        if (display == null) {
            return imageIcon;
        } else if (display instanceof Goods) {
            Goods goods = (Goods) display;
            try {
                imageIcon = imageLibrary.getGoodsImageIcon(goods.getType());
            } catch(Exception e) {
                logger.warning("could not find image for goods " + goods.getName());
            }
        } else if (display instanceof Unit) {
            Unit unit = (Unit) display;
            try {
                int unitType = imageLibrary.getUnitGraphicsType(unit);
                imageIcon = imageLibrary.getUnitImageIcon(unitType);
            } catch(Exception e) {
                logger.warning("could not find image for unit " + unit.getName());
            }
        } else if (display instanceof Settlement) {
            Settlement settlement = (Settlement) display;
            try {                
                int settlementType = imageLibrary.getSettlementGraphicsType(settlement);
                imageIcon = new ImageIcon(imageLibrary.getColonyImage(settlementType));
            } catch(Exception e) {
                logger.warning("could not find image for settlement " + settlement);
            }
        } else if (display instanceof LostCityRumour) {
            try {
                imageIcon = new ImageIcon(imageLibrary.getMiscImage(ImageLibrary.LOST_CITY_RUMOUR));
            } catch(Exception e) {
                logger.warning("could not find image for lost city rumour");
            }
        }
        return imageIcon;
    }


, Instance #
frags: 
(startLine=354 endLine=368 srcPath=/root/NewExperiment/freecolFilter/00176/src/net/sf/freecol/client/gui/panel/FreeColDialog.java)
        for (int index = 0; index < offense.size(); index++) {
            Modifier modifier = offense.get(index);
            preCombatDialog.add(new JLabel(Messages.message(modifier.id)), 
                                higConst.rc(row, labelColumn));
            String value;
            if (modifier.addend == 0 && modifier.numerator != 0) {
                value = String.valueOf(modifier.numerator) + "/" + 
                        String.valueOf(modifier.denominator);
            } else {
                value = String.valueOf(modifier.addend);
            }
            preCombatDialog.add(new JLabel(value),
                                higConst.rc(row, valueColumn, "r"));
            row += 2;
        }

(startLine=381 endLine=395 srcPath=/root/NewExperiment/freecolFilter/00176/src/net/sf/freecol/client/gui/panel/FreeColDialog.java)
        for (int index = 0; index < defense.size(); index++) {
            Modifier modifier = defense.get(index);
            preCombatDialog.add(new JLabel(Messages.message(modifier.id)), 
                                higConst.rc(row, labelColumn));
            String value;
            if (modifier.addend == 0) {
                value = String.valueOf(modifier.numerator) + "/" + 
                        String.valueOf(modifier.denominator);
            } else {
                value = String.valueOf(modifier.addend);
            }
            preCombatDialog.add(new JLabel(value),
                                higConst.rc(row, valueColumn, "r"));
            row += 2;
        }

commonMethod: 
(startLine=2115 endLine=2183 srcPath=/root/NewExperiment/freecolFilter/00177/src/net/sf/freecol/common/model/Unit.java)
    /**
    * Returns the name of a unit in a human readable format. The return
    * value can be used when communicating with the user.
    *
    * @return The given unit type as a String
    * @throws IllegalArgumentException
    */
    public String getName() {
        if (name != null) {
            return name;
        }
        String name = "";
        boolean addP = false;

        if (isPioneer() && getType() != HARDY_PIONEER) {
            name = Messages.message("model.unit.pioneer") + " (";
            addP = true;
        } else if (isArmed() && getType() != KINGS_REGULAR && getType() != COLONIAL_REGULAR && getType() != BRAVE && getType() != VETERAN_SOLDIER) {
            if (!isMounted()) {
                name = Messages.message("model.unit.soldier") + " (";
            } else {
                name = Messages.message("model.unit.dragoon") + " (";
            }
            addP = true;
        } else if (isMounted() && getType() != SEASONED_SCOUT && getType() != BRAVE) {
            name = Messages.message("model.unit.scout") +  " (";
            addP = true;
        } else if (isMissionary() && getType() != JESUIT_MISSIONARY) {
            name = Messages.message("model.unit.missionary") + " (";
            addP = true;
        }

        if (!isArmed() && !isMounted() && (getType() == KINGS_REGULAR || getType() == COLONIAL_REGULAR || getType() == VETERAN_SOLDIER)) {
            name = Messages.message("model.unit.unarmed") + " ";
        }

        if (getType() == BRAVE) {
            name = getOwner().getNationAsString() + " ";
            if (isArmed() && !isMounted()) {
                name += Messages.message("model.unit.armed") + " ";
            } else if (isMounted()) {
                name += Messages.message("model.unit.mounted") + " ";
            }            
        }

        name += getName(getType());

        if (isArmed() && isMounted()) {
            if (getType() == KINGS_REGULAR) {
                name = Messages.message("model.unit.kingsCavalry");
                addP = false;
            } else if (getType() == COLONIAL_REGULAR) {
                name = Messages.message("model.unit.colonialCavalry");
                addP = false;
            } else if (getType() == VETERAN_SOLDIER) {
                name = Messages.message("model.unit.veteranDragoon");
                addP = false;
            } else if (getType() == BRAVE) {
                name = getOwner().getNationAsString() + " " + Messages.message("model.unit.indianDragoon");
                addP = false;
            }
        }

        if (addP) {
            name += ")";
        }

        return name;
    }


, Instance #
frags: 
(startLine=354 endLine=368 srcPath=/root/NewExperiment/freecolFilter/00176/src/net/sf/freecol/client/gui/panel/FreeColDialog.java)
        for (int index = 0; index < offense.size(); index++) {
            Modifier modifier = offense.get(index);
            preCombatDialog.add(new JLabel(Messages.message(modifier.id)), 
                                higConst.rc(row, labelColumn));
            String value;
            if (modifier.addend == 0 && modifier.numerator != 0) {
                value = String.valueOf(modifier.numerator) + "/" + 
                        String.valueOf(modifier.denominator);
            } else {
                value = String.valueOf(modifier.addend);
            }
            preCombatDialog.add(new JLabel(value),
                                higConst.rc(row, valueColumn, "r"));
            row += 2;
        }

(startLine=381 endLine=395 srcPath=/root/NewExperiment/freecolFilter/00176/src/net/sf/freecol/client/gui/panel/FreeColDialog.java)
        for (int index = 0; index < defense.size(); index++) {
            Modifier modifier = defense.get(index);
            preCombatDialog.add(new JLabel(Messages.message(modifier.id)), 
                                higConst.rc(row, labelColumn));
            String value;
            if (modifier.addend == 0) {
                value = String.valueOf(modifier.numerator) + "/" + 
                        String.valueOf(modifier.denominator);
            } else {
                value = String.valueOf(modifier.addend);
            }
            preCombatDialog.add(new JLabel(value),
                                higConst.rc(row, valueColumn, "r"));
            row += 2;
        }

commonMethod: 
(startLine=294 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00177/src/net/sf/freecol/common/model/Modifier.java)
    /**
     * Return the defensive modifier that applies to defenders in the
     * given settlement versus the attacker.
     *
     * @param attacker an <code>Unit</code> value
     * @param settlement a <code>Settlement</code> value
     * @return a <code>Modifier</code>
     */
    public static Modifier getSettlementModifier(Unit attacker, Settlement settlement) {

        if (settlement instanceof Colony) {
            // Colony defensive bonus.
            Colony colony = (Colony) settlement;
            switch(colony.getBuilding(Building.STOCKADE).getLevel()) {
            case Building.NOT_BUILT:
            default:
                // 50% colony bonus
                return new Modifier("modifiers.inColony", 3, 2);
            case Building.HOUSE:
                // 100% stockade bonus
                return new Modifier("modifiers.stockade", 4, 2);
            case Building.SHOP:
                // 150% fort bonus
                return new Modifier("modifiers.fort", 5, 2);
            case Building.FACTORY:
                // 200% fortress bonus
                return new Modifier("modifiers.fortress", 6, 2);
            }
        } else if (settlement instanceof IndianSettlement) {
            // Indian settlement defensive bonus.
            return new Modifier("modifiers.inSettlement", 3, 2);
        } else {
            return new Modifier(null, 0);
        }
    }


, Instance #
frags: 
(startLine=354 endLine=368 srcPath=/root/NewExperiment/freecolFilter/00176/src/net/sf/freecol/client/gui/panel/FreeColDialog.java)
        for (int index = 0; index < offense.size(); index++) {
            Modifier modifier = offense.get(index);
            preCombatDialog.add(new JLabel(Messages.message(modifier.id)), 
                                higConst.rc(row, labelColumn));
            String value;
            if (modifier.addend == 0 && modifier.numerator != 0) {
                value = String.valueOf(modifier.numerator) + "/" + 
                        String.valueOf(modifier.denominator);
            } else {
                value = String.valueOf(modifier.addend);
            }
            preCombatDialog.add(new JLabel(value),
                                higConst.rc(row, valueColumn, "r"));
            row += 2;
        }

(startLine=381 endLine=395 srcPath=/root/NewExperiment/freecolFilter/00176/src/net/sf/freecol/client/gui/panel/FreeColDialog.java)
        for (int index = 0; index < defense.size(); index++) {
            Modifier modifier = defense.get(index);
            preCombatDialog.add(new JLabel(Messages.message(modifier.id)), 
                                higConst.rc(row, labelColumn));
            String value;
            if (modifier.addend == 0) {
                value = String.valueOf(modifier.numerator) + "/" + 
                        String.valueOf(modifier.denominator);
            } else {
                value = String.valueOf(modifier.addend);
            }
            preCombatDialog.add(new JLabel(value),
                                higConst.rc(row, valueColumn, "r"));
            row += 2;
        }

commonMethod: 
(startLine=330 endLine=353 srcPath=/root/NewExperiment/freecolFilter/00177/src/net/sf/freecol/common/model/Modifier.java)
    /**
     * Return a formatted string appropriate for the value this
     * modifier represents.
     *
     * @return a <code>String</code> value
     */
    public String getFormattedResult() {
        if (isAdditive) {
            if (addend == Integer.MIN_VALUE) {
                return "?";
            } else if (addend > 0) {
                return "+" + String.valueOf(addend);
            } else {
                return String.valueOf(addend);
            }
        } else {
            float modifier = (100 * numerator / denominator) - 100;
            if (modifier > 0) {
                return "+" + String.valueOf(modifier) + "%";
            } else {
                return String.valueOf(modifier) + "%";
            }
        }
    }


, Instance #
frags: 
(startLine=1045 endLine=1056 srcPath=/root/NewExperiment/freecolFilter/00176/src/net/sf/freecol/client/gui/GUI.java)
                    if (temp.getTurns() == 0) {
                        g.setColor(Color.GREEN);                        
                        image = getPathImage(activeUnit);
                        if (activeUnit != null 
                                && tile.isExplored()
                                && activeUnit.isNaval()
                                && tile.isLand() 
                                && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {
                            image = getPathImage(activeUnit.getFirstUnit());
                        }
                        textColor = Color.BLACK;
                    } else {

(startLine=1056 endLine=1067 srcPath=/root/NewExperiment/freecolFilter/00176/src/net/sf/freecol/client/gui/GUI.java)
                    } else {
                        g.setColor(Color.RED);
                        image = getPathNextTurnImage(activeUnit);
                        if (activeUnit != null
                                && tile.isExplored()
                                && activeUnit.isNaval()
                                && tile.isLand() 
                                && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {
                            image = getPathNextTurnImage(activeUnit.getFirstUnit());
                        }
                        textColor = Color.WHITE;
                    }                

commonMethod: 
(startLine=821 endLine=868 srcPath=/root/NewExperiment/freecolFilter/00177/src/net/sf/freecol/client/gui/GUI.java)
    private void displayDragPath(Graphics2D g, PathNode dragPath) {
        if (dragPath != null) {
            PathNode temp = dragPath;
            while (temp != null) {
                Point p = getTilePosition(temp.getTile());
                if (p != null) {
                    Tile tile = temp.getTile();
                    Image image;
                    final Color textColor; 
                    if (temp.getTurns() == 0) {
                        g.setColor(Color.GREEN);                        
                        image = getPathImage(activeUnit);
                        if (activeUnit != null 
                                && tile.isExplored()
                                && activeUnit.isNaval()
                                && tile.isLand() 
                                && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {
                            image = getPathImage(activeUnit.getFirstUnit());
                        }
                        textColor = Color.BLACK;
                    } else {
                        g.setColor(Color.RED);
                        image = getPathNextTurnImage(activeUnit);
                        if (activeUnit != null
                                && tile.isExplored()
                                && activeUnit.isNaval()
                                && tile.isLand() 
                                && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {
                            image = getPathNextTurnImage(activeUnit.getFirstUnit());
                        }
                        textColor = Color.WHITE;
                    }                
                    if (image != null) {
                        g.drawImage(image, p.x + (tileWidth - image.getWidth(null))/2, p.y + (tileHeight - image.getHeight(null))/2, null);
                    } else {
                        g.fillOval(p.x + tileWidth/2, p.y + tileHeight/2, 10, 10);
                        g.setColor(Color.BLACK);
                        g.drawOval(p.x + tileWidth/2, p.y + tileHeight/2, 10, 10);
                    }                
                    if (temp.getTurns() > 0) {
                        BufferedImage stringImage = createStringImage(g, Integer.toString(temp.getTurns()), textColor, tileWidth, 12);
                        g.drawImage(stringImage, p.x + (tileWidth - stringImage.getWidth(null))/2, p.y + (tileHeight - stringImage.getHeight()) / 2, null);
                    }
                }                    
                temp = temp.next;
            }
        }
    }


, Instance #
frags: 
(startLine=95 endLine=118 srcPath=/root/NewExperiment/freecolFilter/00187/src/net/sf/freecol/client/gui/panel/GameOptionsDialog.java)
    public void initialize(boolean editable) {
        removeAll();

        // Header:
        header = new JLabel(freeColClient.getGame().getGameOptions().getName(), JLabel.CENTER);
        header.setFont(((Font) UIManager.get("HeaderFont")).deriveFont(0, 48));
        header.setBorder(new EmptyBorder(20, 0, 0, 0));
        add(header, BorderLayout.NORTH);

        // Options:
        JPanel uiPanel = new JPanel(new BorderLayout());
        uiPanel.setOpaque(false);
        ui = new OptionMapUI(freeColClient.getGame().getGameOptions(), editable);
        uiPanel.add(ui, BorderLayout.CENTER);
        uiPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        add(uiPanel, BorderLayout.CENTER);

        // Buttons:
        add(buttons, BorderLayout.SOUTH);
        
        ok.setEnabled(editable);
        save.setEnabled(editable);
        load.setEnabled(editable);
    }

(startLine=79 endLine=102 srcPath=/root/NewExperiment/freecolFilter/00187/src/net/sf/freecol/client/gui/panel/MapGeneratorOptionsDialog.java)
    public void initialize(boolean editable) {
        removeAll();

        final MapGeneratorOptions mgo = freeColClient.getPreGameController().getMapGeneratorOptions();
        
        // Header:
        header = new JLabel(mgo.getName(), JLabel.CENTER);
        header.setFont(((Font) UIManager.get("HeaderFont")).deriveFont(0, 48));
        header.setBorder(new EmptyBorder(20, 0, 0, 0));
        add(header, BorderLayout.NORTH);

        // Options:
        JPanel uiPanel = new JPanel(new BorderLayout());
        uiPanel.setOpaque(false);
        ui = new OptionMapUI(mgo, editable);
        uiPanel.add(ui, BorderLayout.CENTER);
        uiPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        add(uiPanel, BorderLayout.CENTER);

        // Buttons:
        add(buttons, BorderLayout.SOUTH);
        
        ok.setEnabled(editable);
    }

commonMethod: 
(startLine=122 endLine=133 srcPath=/root/NewExperiment/freecolFilter/00188/src/net/sf/freecol/client/gui/panel/FreeColPanel.java)
    /**
     * Returns the default header for panels.
     *
     * @param text a <code>String</code> value
     * @return a <code>JLabel</code> value
     */
    public static JLabel getDefaultHeader(String text) {
        JLabel header = new JLabel(text, JLabel.CENTER);
        header.setFont(bigHeaderFont);
        header.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        return header;
    }


, Instance #
frags: 
(startLine=55 endLine=84 srcPath=/root/NewExperiment/freecolFilter/00187/src/net/sf/freecol/client/gui/panel/ReportPanel.java)
    public ReportPanel(Canvas parent, String title) {
        super(new FlowLayout(FlowLayout.CENTER, 1000, 10));
        this.parent = parent;
        this.library = (ImageLibrary) parent.getImageProvider();

        setLayout(new BorderLayout());
        
        header = new JLabel(title, JLabel.CENTER);
        header.setFont(((Font) UIManager.get("HeaderFont")).deriveFont(0, 48));
        header.setBorder(new EmptyBorder(20, 0, 20, 0));
        add(header, BorderLayout.NORTH);

        reportPanel = new JPanel();
        reportPanel.setOpaque(true);
        reportPanel.setBorder(new EmptyBorder(20, 20, 20, 20));

        scrollPane = new JScrollPane(reportPanel,
                                     JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                                     JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        add(scrollPane, BorderLayout.CENTER);

        ok = new JButton(Messages.message("ok"));
        ok.setActionCommand(String.valueOf(OK));
        ok.addActionListener(this);
        enterPressesWhenFocused(ok);
        setCancelComponent(ok);
        add(ok, BorderLayout.SOUTH);

        setSize(850, 600);
    }

(startLine=97 endLine=127 srcPath=/root/NewExperiment/freecolFilter/00187/src/net/sf/freecol/client/gui/panel/ColopediaPanel.java)
    public ColopediaPanel(Canvas parent) {
        super(new FlowLayout(FlowLayout.CENTER, 1000, 10));
        this.parent = parent;
        this.library = (ImageLibrary) parent.getImageProvider();
        
        setLayout(new BorderLayout());
        
        header = new JLabel(Messages.message("menuBar.colopedia"), SwingConstants.CENTER);
        header.setFont(((Font) UIManager.get("HeaderFont")).deriveFont(0, 48));
        header.setBorder(new EmptyBorder(20, 0, 0, 0));
        add(header, BorderLayout.NORTH);

        listPanel = new JPanel();
        listPanel.setOpaque(false);
        //listPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        add(listPanel, BorderLayout.WEST);

        detailPanel = new JPanel();
        detailPanel.setOpaque(false);
        detailPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        add(detailPanel, BorderLayout.CENTER);

        ok = new JButton(Messages.message("ok"));
        ok.setActionCommand(String.valueOf(OK));
        ok.addActionListener(this);
        enterPressesWhenFocused(ok);
        setCancelComponent(ok);
        add(ok, BorderLayout.SOUTH);

        setSize(850, 600);
    }

commonMethod: 
(startLine=122 endLine=133 srcPath=/root/NewExperiment/freecolFilter/00188/src/net/sf/freecol/client/gui/panel/FreeColPanel.java)
    /**
     * Returns the default header for panels.
     *
     * @param text a <code>String</code> value
     * @return a <code>JLabel</code> value
     */
    public static JLabel getDefaultHeader(String text) {
        JLabel header = new JLabel(text, JLabel.CENTER);
        header.setFont(bigHeaderFont);
        header.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        return header;
    }


, Instance #
frags: 
(startLine=1445 endLine=1459 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
    public void clearSpeciality(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        
        Client client = freeColClient.getClient();

        Element clearSpecialityElement = Message.createNewRootElement("clearSpeciality");
        clearSpecialityElement.setAttribute("unit", unit.getID());

        unit.clearSpeciality();

        client.sendAndWait(clearSpecialityElement);
    }

(startLine=1467 endLine=1481 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
    public void leaveShip(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        
        Client client = freeColClient.getClient();

        unit.leaveShip();

        Element leaveShipElement = Message.createNewRootElement("leaveShip");
        leaveShipElement.setAttribute("unit", unit.getID());

        client.sendAndWait(leaveShipElement);
    }

(startLine=2290 endLine=2304 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
    public void moveToAmerica(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        
        Client client = freeColClient.getClient();

        unit.moveToAmerica();

        Element moveToAmericaElement = Message.createNewRootElement("moveToAmerica");
        moveToAmericaElement.setAttribute("unit", unit.getID());

        client.sendAndWait(moveToAmericaElement);
    }

commonMethod: 
(startLine=2858 endLine=2868 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Unit.java)
	/**
	 * Returns the Tile where this Unit is located. Or null if its location is
	 * Europe.
	 * 
	 * @return The Tile where this Unit is located. Or null if its location is
	 *         Europe.
	 */
	public Tile getTile() {

		return (location != null) ? location.getTile() : null;
	}


, Instance #
frags: 
(startLine=1445 endLine=1459 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
    public void clearSpeciality(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        
        Client client = freeColClient.getClient();

        Element clearSpecialityElement = Message.createNewRootElement("clearSpeciality");
        clearSpecialityElement.setAttribute("unit", unit.getID());

        unit.clearSpeciality();

        client.sendAndWait(clearSpecialityElement);
    }

(startLine=1467 endLine=1481 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
    public void leaveShip(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        
        Client client = freeColClient.getClient();

        unit.leaveShip();

        Element leaveShipElement = Message.createNewRootElement("leaveShip");
        leaveShipElement.setAttribute("unit", unit.getID());

        client.sendAndWait(leaveShipElement);
    }

commonMethod: 
(startLine=422 endLine=430 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Game.java)
    /**
    * Gets the <code>Map</code> that is beeing used in this game.
    *
    * @return The <code>Map</code> that is beeing used in this game
    *         or <i>null</i> if no <code>Map</code> has been created.
    */
    public Map getMap() {
        return map;
    }


, Instance #
frags: 
(startLine=1445 endLine=1459 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
    public void clearSpeciality(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        
        Client client = freeColClient.getClient();

        Element clearSpecialityElement = Message.createNewRootElement("clearSpeciality");
        clearSpecialityElement.setAttribute("unit", unit.getID());

        unit.clearSpeciality();

        client.sendAndWait(clearSpecialityElement);
    }

(startLine=1467 endLine=1481 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
    public void leaveShip(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        
        Client client = freeColClient.getClient();

        unit.leaveShip();

        Element leaveShipElement = Message.createNewRootElement("leaveShip");
        leaveShipElement.setAttribute("unit", unit.getID());

        client.sendAndWait(leaveShipElement);
    }

commonMethod: 
(startLine=920 endLine=929 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Map.java)
    /**
     * Returns the neighbouring Tile of the given Tile in the given direction.
     *
     * @param direction The direction in which the neighbour is located given t.
     * @param t The Tile to get a neighbour of.
     * @return The neighbouring Tile of the given Tile in the given direction.
     */
    public Tile getNeighbourOrNull(int direction, Tile t) {
        return getNeighbourOrNull(direction, t.getX(), t.getY());
    }


, Instance #
frags: 
(startLine=2269 endLine=2283 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
    public void moveToEurope(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        
        Client client = freeColClient.getClient();

        unit.moveToEurope();

        Element moveToEuropeElement = Message.createNewRootElement("moveToEurope");
        moveToEuropeElement.setAttribute("unit", unit.getID());

        client.sendAndWait(moveToEuropeElement);
    }

(startLine=2290 endLine=2304 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
    public void moveToAmerica(Unit unit) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        
        Client client = freeColClient.getClient();

        unit.moveToAmerica();

        Element moveToAmericaElement = Message.createNewRootElement("moveToAmerica");
        moveToAmericaElement.setAttribute("unit", unit.getID());

        client.sendAndWait(moveToAmericaElement);
    }

commonMethod: 
(startLine=97 endLine=114 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/client/networking/Client.java)
    /**
    * Sends the specified message to the server and returns the reply.
    *
    * @param element The element (root element in a DOM-parsed XML tree) 
    *       that holds all the information
    * @return The answer from the server or <code>null</code> if either
    *       an error occured or the server did not send a reply.
    * @see #sendAndWait
    * @see #send
    */
    public Element ask(Element element) {
        try {
            return c.ask(element);
        } catch (IOException e) {
            logger.log(Level.WARNING, "Client.ask could not send " + element, e);
        }
        return null;
    }


, Instance #
frags: 
(startLine=2334 endLine=2343 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
        if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
            Element unitElement = (Element) reply.getChildNodes().item(0);
            Unit unit = (Unit) game.getFreeColGameObject(unitElement.getAttribute("ID"));
            if (unit == null) {
                unit = new Unit(game, unitElement);
            } else {
                unit.readFromXMLElement(unitElement);
            }
            europe.train(unit);
        } else {

(startLine=2410 endLine=2419 srcPath=/root/NewExperiment/freecolFilter/00199/src/net/sf/freecol/client/control/InGameController.java)
        if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
            Element unitElement = (Element) reply.getChildNodes().item(0);
            Unit unit = (Unit) game.getFreeColGameObject(unitElement.getAttribute("ID"));
            if (unit == null) {
                unit = new Unit(game, unitElement);
            } else {
                unit.readFromXMLElement(unitElement);
            }
            europe.recruit(slot, unit, Integer.parseInt(reply.getAttribute("newRecruitable")));
        } else {

commonMethod: 
(startLine=4338 endLine=4356 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Unit.java)
	/**
	 * Removes all references to this object.
	 */
	public void dispose() {
		if (isCarrier()) {
			unitContainer.dispose();
			goodsContainer.dispose();
		}

		if (location != null) {
			location.remove(this);
		}

		setIndianSettlement(null);

		getOwner().invalidateCanSeeTiles();

		super.dispose();
	}


, Instance #
frags: 
(startLine=1554 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, "model.colony.SoLIncrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            } else {

(startLine=1561 endLine=1568 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, "model.colony.SoLDecrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            }

commonMethod: 
(startLine=271 endLine=281 srcPath=/root/NewExperiment/freecolFilter/00201/src/net/sf/freecol/common/model/Market.java)
    /**
     * Gets the price of a given goods when the <code>Player</code> buys.
     *
     * @param type The type of goods.
     * @param amount The amount of goods.
     * @return The bid price of the given goods.
     */
    public int getBidPrice(int type, int amount) {
        Data data = dataForGoodType[type];
        return (amount * data.costToBuy);
    }


, Instance #
frags: 
(startLine=1554 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, "model.colony.SoLIncrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            } else {

(startLine=1561 endLine=1568 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, "model.colony.SoLDecrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            }

commonMethod: 
(startLine=1394 endLine=1428 srcPath=/root/NewExperiment/freecolFilter/00201/src/net/sf/freecol/common/model/Colony.java)
	/**
	 * Returns the price for the remaining hammers and tools for the
	 * {@link Building} that is currently being built.
	 * 
	 * @return The price.
	 * @see #payForBuilding
	 */
	public int getPriceForBuilding() {
		// Any changes in this method should also be reflected in
		// "payForBuilding()"

		int hammersRemaining = 0;
		int toolsRemaining = 0;
		if (getCurrentlyBuilding() >= Colony.BUILDING_UNIT_ADDITION) {
			int unitType = getCurrentlyBuilding() - BUILDING_UNIT_ADDITION;
			hammersRemaining = Math.max(
					Unit.getNextHammers(unitType) - hammers, 0);
			toolsRemaining = Math.max(Unit.getNextTools(unitType)
					- getGoodsCount(Goods.TOOLS), 0);
		} else if (getCurrentlyBuilding() != -1) {
			hammersRemaining = Math.max(getBuilding(currentlyBuilding)
					.getNextHammers()
					- hammers, 0);
			toolsRemaining = Math.max(getBuilding(currentlyBuilding)
					.getNextTools()
					- getGoodsCount(Goods.TOOLS), 0);
		}

		int price = hammersRemaining
				* getGameOptions().getInteger(GameOptions.HAMMER_PRICE)
				+ (getGame().getMarket().getBidPrice(Goods.TOOLS,
						toolsRemaining) * 110) / 100;

		return price;
	}


, Instance #
frags: 
(startLine=1554 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, "model.colony.SoLIncrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            } else {

(startLine=1561 endLine=1568 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, "model.colony.SoLDecrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            }

commonMethod: 
(startLine=293 endLine=309 srcPath=/root/NewExperiment/freecolFilter/00201/src/net/sf/freecol/common/model/Building.java)
    /**
     * Gets the number of tools required for the improved 
     * building of the same type.
     *
     * @return The number of tools required for the improved 
     *      building of the same type, or <code>-1</code> if 
     *      the building does not exist.
     */
    public int getNextTools() {
        if (!canBuildNext()) {
            return -1;
        }

        return level < buildingType.numberOfLevels() 
                ? buildingType.level(level).toolsRequired 
                : -1;
    }


, Instance #
frags: 
(startLine=1554 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, "model.colony.SoLIncrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            } else {

(startLine=1561 endLine=1568 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, "model.colony.SoLDecrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            }

commonMethod: 
(startLine=109 endLine=127 srcPath=/root/NewExperiment/freecolFilter/00201/src/net/sf/freecol/common/option/OptionMap.java)
    /**
    * Gets the integer value of an option.
    *
    * @param id The id of the option.
    * @return The value.
    * @exception IllegalArgumentException If there is no integer
    *            value associated with the specified option.
    * @exception NullPointerException if the given <code>Option</code> does not exist.
    */
    public int getInteger(String id) {
    	Option o = (Option) values.get(id);
    	if (o instanceof IntegerOption) {
    		return ((IntegerOption) o).getValue();
    	} else if (o instanceof SelectOption) {
    		return ((SelectOption) o).getValue();
    	} else {
            throw new IllegalArgumentException("No integer value associated with the specified option.");
        }
    }


, Instance #
frags: 
(startLine=1554 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, "model.colony.SoLIncrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            } else {

(startLine=1561 endLine=1568 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, "model.colony.SoLDecrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            }

commonMethod: 
(startLine=1282 endLine=1301 srcPath=/root/NewExperiment/freecolFilter/00201/src/net/sf/freecol/common/model/Player.java)
    /**
     * Modifies the amount of gold that this player has. The argument can be
     * both positive and negative.
     * 
     * @param amount The amount of gold that should be added to this player's
     *            gold amount (can be negative!).
     * @exception IllegalArgumentException if the player gets a negative amount
     *                of gold after adding <code>amount</code>.
     */
    public void modifyGold(int amount) {
        if (this.gold == -1) {
            return;
        }
        if ((gold + amount) >= 0) {
            gold += amount;
        } else {
            /* REMEMBER: The opponents' amount of gold is hidden for the clients */
            throw new IllegalArgumentException("The resulting amount would be negative.");
        }
    }


, Instance #
frags: 
(startLine=1554 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, "model.colony.SoLIncrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            } else {

(startLine=1561 endLine=1568 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, "model.colony.SoLDecrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            }

commonMethod: 
(startLine=4314 endLine=4324 srcPath=/root/NewExperiment/freecolFilter/00201/src/net/sf/freecol/common/model/Unit.java)
	public static int getNextHammers(int type) {

		UnitType unitType = FreeCol.specification.unitType(type);

		if (unitType.canBeBuilt()) {

			return unitType.hammersRequired;
		}

		return -1;
	}


, Instance #
frags: 
(startLine=1554 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, "model.colony.SoLIncrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            } else {

(startLine=1561 endLine=1568 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, "model.colony.SoLDecrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            }

commonMethod: 
(startLine=4326 endLine=4336 srcPath=/root/NewExperiment/freecolFilter/00201/src/net/sf/freecol/common/model/Unit.java)
	public static int getNextTools(int type) {

		UnitType unitType = FreeCol.specification.unitType(type);

		if (unitType.canBeBuilt()) {

			return unitType.toolsRequired;
		}

		return -1;
	}


, Instance #
frags: 
(startLine=1554 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, "model.colony.SoLIncrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            } else {

(startLine=1561 endLine=1568 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, "model.colony.SoLDecrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            }

commonMethod: 
(startLine=275 endLine=291 srcPath=/root/NewExperiment/freecolFilter/00201/src/net/sf/freecol/common/model/Building.java)
    /**
     * Gets the number of hammers required for the improved 
     * building of the same type.
     *
     * @return The number of hammers required for the improved 
     *      building of the same type, or <code>-1</code> if 
     *      the building does not exist.
     */
    public int getNextHammers() {
        if (!canBuildNext()) {
            return -1;
        }

        return level < buildingType.numberOfLevels() 
                ? buildingType.level(level).hammersRequired 
                : -1;
    }


, Instance #
frags: 
(startLine=1554 endLine=1561 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, "model.colony.SoLIncrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            } else {

(startLine=1561 endLine=1568 srcPath=/root/NewExperiment/freecolFilter/00200/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, "model.colony.SoLDecrease",
                                new String [][] {{"%oldSoL%", String.valueOf(oldSonsOfLiberty)},
                                                 {"%newSoL%", String.valueOf(sonsOfLiberty)},
                                                 {"%colony%", getName()}},
                                ModelMessage.SONS_OF_LIBERTY,
                                new Goods(Goods.BELLS));
            }

commonMethod: 
(startLine=199 endLine=220 srcPath=/root/NewExperiment/freecolFilter/00201/src/net/sf/freecol/common/model/Market.java)
    /**
     * Buys a particular amount of a particular type of good with the cost
     * being met by a particular player.
     *
     * @param  type  the type of good that is being bought
     * @param  amount      the number of units of goods that are being bought
     * @param  player      the player buying the goods
     * @throws IllegalStateException If the <code>player</code> cannot afford
     *                               to buy the goods.
     */
    public void buy(int type, int amount, Player player) {
        if (getBidPrice(type, amount) > player.getGold()) {
            throw new IllegalStateException();
        }

        int price = getBidPrice(type, amount);
        player.modifyGold(-price);
        player.modifySales(type, -amount);
        player.modifyIncomeBeforeTaxes(type, -price);
        player.modifyIncomeAfterTaxes(type, -price);
        remove(type, ((player.getNation() == Player.DUTCH) ? (amount / 2) : amount));
    }


, Instance #
frags: 
(startLine=1676 endLine=1685 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			if (sonsOfLiberty > oldSonsOfLiberty) {
				addModelMessage(
						this,
						"model.colony.SoLIncrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			} else {

(startLine=1685 endLine=1694 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			} else {
				addModelMessage(
						this,
						"model.colony.SoLDecrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			}

commonMethod: 
(startLine=3586 endLine=3619 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/model/Unit.java)
	/**
	 * Sets the damage to this ship and sends it to its repair location.
	 * 
	 * @param colony
	 *            The colony that opened fire on this unit.
	 * @param building
	 *            The building that opened fire on this unit.
	 */
	public void shipDamaged(Colony colony, Building building) {
		String nation = owner.getNationAsString();
		Location repairLocation = getOwner().getRepairLocation(this);
		String repairLocationName = repairLocation.getLocationName();
		/*
		 * if (repairLocation instanceof Colony) { repairLocationName =
		 * ((Colony) repairLocation).getName(); }
		 */
		if (colony != null) {
			addModelMessage(this, "model.unit.shipDamagedByBombardment",
					new String[][] { { "%colony%", colony.getName() },
							{ "%building%", building.getName() },
							{ "%ship%", getName() },
							{ "%repairLocation%", repairLocationName },
							{ "%nation%", nation } }, ModelMessage.UNIT_DEMOTED);
		} else {
			addModelMessage(this, "model.unit.shipDamaged", new String[][] {
					{ "%ship%", getName() },
					{ "%repairLocation%", repairLocationName },
					{ "%nation%", nation } }, ModelMessage.UNIT_DEMOTED);
		}
		setHitpoints(1);
		getUnitContainer().disposeAllUnits();
		goodsContainer.removeAll();
		sendToRepairLocation();
	}


, Instance #
frags: 
(startLine=1676 endLine=1685 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			if (sonsOfLiberty > oldSonsOfLiberty) {
				addModelMessage(
						this,
						"model.colony.SoLIncrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			} else {

(startLine=1685 endLine=1694 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			} else {
				addModelMessage(
						this,
						"model.colony.SoLDecrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			}

commonMethod: 
(startLine=4309 endLine=4319 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/model/Unit.java)
	public static int getNextHammers(int type) {

		UnitType unitType = FreeCol.specification.unitType(type);

		if (unitType.canBeBuilt()) {

			return unitType.hammersRequired;
		}

		return -1;
	}


, Instance #
frags: 
(startLine=1676 endLine=1685 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			if (sonsOfLiberty > oldSonsOfLiberty) {
				addModelMessage(
						this,
						"model.colony.SoLIncrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			} else {

(startLine=1685 endLine=1694 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			} else {
				addModelMessage(
						this,
						"model.colony.SoLDecrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			}

commonMethod: 
(startLine=262 endLine=275 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/model/Building.java)
    /**
     * Gets the number of tools required for the improved building of the same
     * type.
     * 
     * @return The number of tools required for the improved building of the
     *         same type, or <code>-1</code> if the building does not exist.
     */
    public int getNextTools() {
        if (!canBuildNext()) {
            return -1;
        }

        return level < buildingType.numberOfLevels() ? buildingType.level(level).toolsRequired : -1;
    }


, Instance #
frags: 
(startLine=1676 endLine=1685 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			if (sonsOfLiberty > oldSonsOfLiberty) {
				addModelMessage(
						this,
						"model.colony.SoLIncrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			} else {

(startLine=1685 endLine=1694 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			} else {
				addModelMessage(
						this,
						"model.colony.SoLDecrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			}

commonMethod: 
(startLine=4321 endLine=4331 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/model/Unit.java)
	public static int getNextTools(int type) {

		UnitType unitType = FreeCol.specification.unitType(type);

		if (unitType.canBeBuilt()) {

			return unitType.toolsRequired;
		}

		return -1;
	}


, Instance #
frags: 
(startLine=1676 endLine=1685 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			if (sonsOfLiberty > oldSonsOfLiberty) {
				addModelMessage(
						this,
						"model.colony.SoLIncrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			} else {

(startLine=1685 endLine=1694 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			} else {
				addModelMessage(
						this,
						"model.colony.SoLDecrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			}

commonMethod: 
(startLine=3628 endLine=3650 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/model/Unit.java)
	/**
	 * Sinks this ship.
	 * 
	 * @param colony
	 *            The colony that opened fire on this unit.
	 * @param building
	 *            The building that opened fire on this unit.
	 */
	public void shipSunk(Colony colony, Building building) {
		String nation = owner.getNationAsString();
		if (colony != null) {
			addModelMessage(this, "model.unit.shipSunkByBombardment",
					new String[][] { { "%colony%", colony.getName() },
							{ "%building%", building.getName() },
							{ "%ship%", getName() }, { "%nation%", nation } },
					ModelMessage.UNIT_LOST);
		} else {
			addModelMessage(this, "model.unit.shipSunk", new String[][] {
					{ "%ship%", getName() }, { "%nation%", nation } },
					ModelMessage.UNIT_LOST);
		}
		dispose();
	}


, Instance #
frags: 
(startLine=1676 endLine=1685 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			if (sonsOfLiberty > oldSonsOfLiberty) {
				addModelMessage(
						this,
						"model.colony.SoLIncrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			} else {

(startLine=1685 endLine=1694 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			} else {
				addModelMessage(
						this,
						"model.colony.SoLDecrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			}

commonMethod: 
(startLine=109 endLine=127 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/option/OptionMap.java)
    /**
    * Gets the integer value of an option.
    *
    * @param id The id of the option.
    * @return The value.
    * @exception IllegalArgumentException If there is no integer
    *            value associated with the specified option.
    * @exception NullPointerException if the given <code>Option</code> does not exist.
    */
    public int getInteger(String id) {
    	Option o = values.get(id);
    	if (o instanceof IntegerOption) {
    		return ((IntegerOption) o).getValue();
    	} else if (o instanceof SelectOption) {
    		return ((SelectOption) o).getValue();
    	} else {
            throw new IllegalArgumentException("No integer value associated with the specified option.");
        }
    }


, Instance #
frags: 
(startLine=1676 endLine=1685 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			if (sonsOfLiberty > oldSonsOfLiberty) {
				addModelMessage(
						this,
						"model.colony.SoLIncrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			} else {

(startLine=1685 endLine=1694 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			} else {
				addModelMessage(
						this,
						"model.colony.SoLDecrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			}

commonMethod: 
(startLine=199 endLine=220 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/model/Market.java)
    /**
     * Buys a particular amount of a particular type of good with the cost
     * being met by a particular player.
     *
     * @param  type  the type of good that is being bought
     * @param  amount      the number of units of goods that are being bought
     * @param  player      the player buying the goods
     * @throws IllegalStateException If the <code>player</code> cannot afford
     *                               to buy the goods.
     */
    public void buy(int type, int amount, Player player) {
        if (getBidPrice(type, amount) > player.getGold()) {
            throw new IllegalStateException();
        }

        int price = getBidPrice(type, amount);
        player.modifyGold(-price);
        player.modifySales(type, -amount);
        player.modifyIncomeBeforeTaxes(type, -price);
        player.modifyIncomeAfterTaxes(type, -price);
        remove(type, ((player.getNation() == Player.DUTCH) ? (amount / 2) : amount));
    }


, Instance #
frags: 
(startLine=1676 endLine=1685 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			if (sonsOfLiberty > oldSonsOfLiberty) {
				addModelMessage(
						this,
						"model.colony.SoLIncrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			} else {

(startLine=1685 endLine=1694 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			} else {
				addModelMessage(
						this,
						"model.colony.SoLDecrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			}

commonMethod: 
(startLine=247 endLine=260 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/model/Building.java)
    /**
     * Gets the number of hammers required for the improved building of the same
     * type.
     * 
     * @return The number of hammers required for the improved building of the
     *         same type, or <code>-1</code> if the building does not exist.
     */
    public int getNextHammers() {
        if (!canBuildNext()) {
            return -1;
        }

        return level < buildingType.numberOfLevels() ? buildingType.level(level).hammersRequired : -1;
    }


, Instance #
frags: 
(startLine=1676 endLine=1685 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			if (sonsOfLiberty > oldSonsOfLiberty) {
				addModelMessage(
						this,
						"model.colony.SoLIncrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			} else {

(startLine=1685 endLine=1694 srcPath=/root/NewExperiment/freecolFilter/00212/src/net/sf/freecol/common/model/Colony.java)
			} else {
				addModelMessage(
						this,
						"model.colony.SoLDecrease",
						new String[][] {
								{ "%oldSoL%", String.valueOf(oldSonsOfLiberty) },
								{ "%newSoL%", String.valueOf(sonsOfLiberty) },
								{ "%colony%", getName() } },
						ModelMessage.SONS_OF_LIBERTY, new Goods(Goods.BELLS));
			}

commonMethod: 
(startLine=1282 endLine=1301 srcPath=/root/NewExperiment/freecolFilter/00213/src/net/sf/freecol/common/model/Player.java)
    /**
     * Modifies the amount of gold that this player has. The argument can be
     * both positive and negative.
     * 
     * @param amount The amount of gold that should be added to this player's
     *            gold amount (can be negative!).
     * @exception IllegalArgumentException if the player gets a negative amount
     *                of gold after adding <code>amount</code>.
     */
    public void modifyGold(int amount) {
        if (this.gold == -1) {
            return;
        }
        if ((gold + amount) >= 0) {
            gold += amount;
        } else {
            /* REMEMBER: The opponents' amount of gold is hidden for the clients */
            throw new IllegalArgumentException("The resulting amount would be negative.");
        }
    }


, Instance #
frags: 
(startLine=385 endLine=399 srcPath=/root/NewExperiment/freecolFilter/00217/src/net/sf/freecol/client/control/InGameInputHandler.java)
            if (unit.isNaval()) {
                if (colony == null) {
                    canvas.showInformationMessage("model.unit.shipEvaded",
                                                  new String [][] {{"%ship%", defender.getName()},
                                                                   {"%nation%",
                                                                    defender.getOwner().getNationAsString()}});
                } else {
                    canvas.showInformationMessage("model.unit.shipEvadedBombardment",
                                                  new String [][] {{"%colony%", colony.getName()},
                                                                   {"%building%", building.getName()},
                                                                   {"%ship%", defender.getName()},
                                                                   {"%nation%",
                                                                    defender.getOwner().getNationAsString()}});
                }
            }

(startLine=402 endLine=416 srcPath=/root/NewExperiment/freecolFilter/00217/src/net/sf/freecol/client/control/InGameInputHandler.java)
            if (unit.isNaval()) {
                if (colony == null) {
                    canvas.showInformationMessage("model.unit.enemyShipDamaged",
                                                  new String [][] {{"%ship%", unit.getName()},
                                                                   {"%nation%",
                                                                    unit.getOwner().getNationAsString()}});
                } else {
                    canvas.showInformationMessage("model.unit.enemyShipDamagedByBombardment",
                                                  new String [][] {{"%colony%", colony.getName()},
                                                                   {"%building%", building.getName()},
                                                                   {"%ship%", unit.getName()},
                                                                   {"%nation%",
                                                                    unit.getOwner().getNationAsString()}});
                }
            }

(startLine=419 endLine=433 srcPath=/root/NewExperiment/freecolFilter/00217/src/net/sf/freecol/client/control/InGameInputHandler.java)
            if (unit.isNaval()) {
                if (colony == null) {
                    canvas.showInformationMessage("model.unit.shipSunk",
                                                  new String [][] {{"%ship%", unit.getName()},
                                                                   {"%nation%",
                                                                    unit.getOwner().getNationAsString()}});
                } else {
                    canvas.showInformationMessage("model.unit.shipSunkByBombardment",
                                                  new String [][] {{"%colony%", colony.getName()},
                                                                   {"%building%", building.getName()},
                                                                   {"%ship%", unit.getName()},
                                                                   {"%nation%",
                                                                    unit.getOwner().getNationAsString()}});
                }
            }

commonMethod: 
(startLine=403 endLine=416 srcPath=/root/NewExperiment/freecolFilter/00218/src/net/sf/freecol/common/model/Game.java)
    /**
     * Get the {@link FreeColGameObject} with the given id or null.
     * This method does NOT throw if the id is invalid.
     * 
     * @param id The id, may be null or invalid.
     * @return game object with id or null.
     */
    public FreeColGameObject getFreeColGameObjectSafely(String id) {
        if(id != null) {
            return freeColGameObjects.get(id);
        } else {
            return null;
        }
    }


, Instance #
frags: 
(startLine=848 endLine=870 srcPath=/root/NewExperiment/freecolFilter/00222/src/net/sf/freecol/common/model/Building.java)
    public int getProduction() {
        if (getGoodsOutputType() == -1) {
            return 0;
        }

        int goodsOutput = getMaximumProduction();

        if ((getGoodsInputType() > -1) && (colony.getGoodsCount(getGoodsInputType()) < goodsOutput)) { // Not
                                                                                                        // enough
                                                                                                        // goods
                                                                                                        // to
                                                                                                        // do
                                                                                                        // this?
            int goodsInput = colony.getGoodsCount(getGoodsInputType());
            if (level < FACTORY) {
                goodsOutput = goodsInput;
            } else {
                goodsOutput = (goodsInput * 3) / 2;
            }
        }

        return goodsOutput;
    }

(startLine=878 endLine=897 srcPath=/root/NewExperiment/freecolFilter/00222/src/net/sf/freecol/common/model/Building.java)
    public int getProductionNextTurn() {
        if (getGoodsOutputType() == -1) {
            return 0;
        }

        int goodsOutput = getMaximumProduction();

        if (getGoodsInputType() > -1) {
            int goodsInput = colony.getGoodsCount(getGoodsInputType()) + colony.getProductionOf(getGoodsInputType());
            if (goodsInput < goodsOutput) {
                if (level < FACTORY) {
                    goodsOutput = goodsInput;
                } else {
                    goodsOutput = (goodsInput * 3) / 2;
                }
            }
        }

        return goodsOutput;
    }

commonMethod: 
(startLine=839 endLine=869 srcPath=/root/NewExperiment/freecolFilter/00223/src/net/sf/freecol/common/model/Building.java)
     /**
      * Calculates and returns the output of this building from the input.
      *
      * @return The production of this building from the input.
      * @see getProduction
      * @see getProductionNextTurn
      */
     public int calculateOutput(int goodsInput) {
         int goodsOutput = 0;
         if (level < FACTORY) {
             goodsOutput = goodsInput;
         } else {
             if (getGameOptions().getBoolean(GameOptions.EXPERTS_HAVE_CONNECTIONS)) {
                 int minimumProduction = 0;
                 Iterator i = getUnitIterator();
                 while (i.hasNext()) {
                     Unit unit = (Unit)i.next();
                     if (unit.getType() == getExpertUnitType()) {
                         minimumProduction += 4;
                     }
                 }
                 goodsOutput = (goodsInput * 3) / 2;
                 if (goodsOutput < minimumProduction) {
                     goodsOutput = minimumProduction;
                 }
             } else {
                 goodsOutput = (goodsInput * 3) / 2;
             }
         }
         return goodsOutput;
     }


, Instance #
frags: 
(startLine=3543 endLine=3556 srcPath=/root/NewExperiment/freecolFilter/00234/src/net/sf/freecol/common/model/Unit.java)
        if (enemyUnit.isUndead()) {
            // this unit is captured, don't show old owner's messages to new
            // owner
            Iterator<ModelMessage> i = getGame().getModelMessageIterator(getOwner());
            while (i.hasNext()) {
                i.next().setBeenDisplayed(true);
            }
            messageID = "model.unit.unitCaptured";
            type = ModelMessage.UNIT_LOST;
            setHitpoints(getInitialHitpoints(enemyUnit.getType()));
            setLocation(enemyUnit.getTile());
            setOwner(enemyUnit.getOwner());
            setType(UNDEAD);
        } else if (getType() == ARTILLERY) {

(startLine=3592 endLine=3604 srcPath=/root/NewExperiment/freecolFilter/00234/src/net/sf/freecol/common/model/Unit.java)
            if (enemyUnit.getOwner().isEuropean()) {
                // this unit is captured, don't show old owner's messages to new
                // owner
                Iterator<ModelMessage> i = getGame().getModelMessageIterator(getOwner());
                while (i.hasNext()) {
                    i.next().setBeenDisplayed(true);
                }
                messageID = "model.unit.unitCaptured";
                type = ModelMessage.UNIT_LOST;
                setHitpoints(getInitialHitpoints(enemyUnit.getType()));
                setLocation(enemyUnit.getTile());
                setOwner(enemyUnit.getOwner());
            } else {

commonMethod: 
(startLine=766 endLine=768 srcPath=/root/NewExperiment/freecolFilter/00235/src/net/sf/freecol/common/model/Game.java)
    public ArrayList<ModelMessage> getModelMessages(Player player) {
        return modelMessages.get(player);
    }


, Instance #
frags: 
(startLine=7 endLine=24 srcPath=/root/NewExperiment/freecolFilter/00236/test/src/net/sf/freecol/common/model/BuildingTest.java)
    public void test_canBuildNext_FalseAboveMaxLevel() {
       
        Game game = getStandardGame();
        Player dutch = game.getPlayer(Player.DUTCH);

        Map map = getTestMap(Tile.PLAINS);
        game.setMap(map);
        map.getTile(5, 8).setExploredBy(dutch, true);
       
        Colony colony = new Colony(game, dutch, "New Amsterdam",
                                   map.getTile(5, 8));
       
        Building new_building = new Building(game, colony,
                                             Building.BLACKSMITH,
                                             Building.MAX_LEVEL +  1);
       
        assertFalse(new_building.canBuildNext());
    }

(startLine=26 endLine=44 srcPath=/root/NewExperiment/freecolFilter/00236/test/src/net/sf/freecol/common/model/BuildingTest.java)
    public void test_canBuildNext_FalseAboveFactoryLevel() throws Exception {

        Game game = getStandardGame();
        Player dutch = game.getPlayer(Player.DUTCH);

        Map map = getTestMap(Tile.PLAINS);
        game.setMap(map);
        map.getTile(5, 8).setExploredBy(dutch, true);
       
        Colony colony = new Colony(game, dutch, "New Amsterdam",
                                   map.getTile(5, 8));
       
        int level = Building.FACTORY + 1;

        Building new_building = new Building(game, colony, Building.BLACKSMITH, level);
       
        assertFalse(new_building.canBuildNext());

    }

commonMethod: 
(startLine=146 endLine=181 srcPath=/root/NewExperiment/freecolFilter/00237/test/src/net/sf/freecol/util/test/FreeColTestCase.java)
    /**
     * Get a colony with the given number of settlers
     * 
     * @param numberOfSettlers The number of settlers to put into the colony.
     *            Must be >= 1.
     * 
     * @return
     */
    public Colony getStandardColony(int numberOfSettlers) {

        if (numberOfSettlers < 1)
            throw new IllegalArgumentException();

        Game game = getStandardGame();
        Player dutch = game.getPlayer(Player.DUTCH);

        Map map = getTestMap(Tile.PLAINS, true);
        game.setMap(map);

        Colony colony = new Colony(game, dutch, "New Amsterdam", map.getTile(5, 8));

        Unit soldier = new Unit(game, map.getTile(5, 8), dutch, Unit.FREE_COLONIST, Unit.ACTIVE, true, false, 0, false);

        soldier.setWorkType(Goods.FOOD);
        soldier.buildColony(colony);

        for (int i = 1; i < numberOfSettlers; i++) {
            Unit settler = new Unit(game, map.getTile(5, 8), dutch, Unit.FREE_COLONIST, Unit.ACTIVE, true, false, 0,
                    false);
            settler.setLocation(colony);
        }

        assertEquals(numberOfSettlers, colony.getUnitCount());

        return colony;
    }


, Instance #
frags: 
(startLine=292 endLine=298 srcPath=/root/NewExperiment/freecolFilter/00239/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
            for (int index = 0; index < unitTypes.length; index++) {
                int count = unitCounts[unitTypes[index]][0];
                int graphicsType = reportPanel.getLibrary().getUnitGraphicsType(unitTypes[index], true, false, 0, false);
                JLabel unitLabel = reportPanel.buildUnitLabel(graphicsType, 0.66f);
                unitLabel.setText(String.valueOf(count));
                unitPanel.add(unitLabel);
            }

(startLine=307 endLine=313 srcPath=/root/NewExperiment/freecolFilter/00239/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
            for (int index = 0; index < 2; index++) {
                int count = unitCounts[unitTypes[index]][0];
                int graphicsType = reportPanel.getLibrary().getUnitGraphicsType(unitTypes[index], true, false, 0, false);
                JLabel unitLabel = reportPanel.buildUnitLabel(graphicsType, 0.66f);
                unitLabel.setText(String.valueOf(count));
                unitPanel.add(unitLabel);
            }

(startLine=315 endLine=323 srcPath=/root/NewExperiment/freecolFilter/00239/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
            for (int mounted = 1; mounted >= 0; mounted--) {
                for (int index = 2; index < unitTypes.length; index++) {
                    int count = unitCounts[unitTypes[index]][mounted];
                    int graphicsType = reportPanel.getLibrary().getUnitGraphicsType(unitTypes[index], true, (mounted == 1), 0, false);
                    JLabel unitLabel = reportPanel.buildUnitLabel(graphicsType, 0.66f);
                    unitLabel.setText(String.valueOf(count));
                    unitPanel.add(unitLabel);
                }
            }

commonMethod: 
(startLine=376 endLine=423 srcPath=/root/NewExperiment/freecolFilter/00240/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
    private JLabel createUnitTypeLabel(int unitType, boolean mounted, int count) {
        int graphicsType = reportPanel.getLibrary().getUnitGraphicsType(unitType, true, mounted, 0, false);
        JLabel unitLabel = reportPanel.buildUnitLabel(graphicsType, 0.66f);
        unitLabel.setText(String.valueOf(count));
        if (count == 0) {
            unitLabel.setForeground(Color.GRAY);
        }
        switch (unitType) {
        case Unit.ARTILLERY:
        case Unit.DAMAGED_ARTILLERY:
        case Unit.CARAVEL:
        case Unit.MERCHANTMAN:
        case Unit.GALLEON:
        case Unit.FRIGATE:
        case Unit.MAN_O_WAR:
        case Unit.PRIVATEER:
            unitLabel.setToolTipText(Unit.getName(unitType));
            break;
        case Unit.VETERAN_SOLDIER:
            if (mounted) {
                unitLabel.setToolTipText(Messages.message("model.unit.veteranDragoon"));
            } else {
                unitLabel.setToolTipText(Messages.message("model.unit.veteranSoldier"));
            }
            break;
        case Unit.COLONIAL_REGULAR:
            if (mounted) {
                unitLabel.setToolTipText(Messages.message("model.unit.colonialCavalry"));
            } else {
                unitLabel.setToolTipText(Messages.message("model.unit.colonialRegular"));
            }
            break;
        case Unit.KINGS_REGULAR:
            if (mounted) {
                unitLabel.setToolTipText(Messages.message("model.unit.kingsCavalry"));
            } else {
                unitLabel.setToolTipText(Messages.message("model.unit.kingsRegular"));
            }
            break;
        default:
            if (mounted) {
                unitLabel.setToolTipText(Messages.message("model.unit.dragoon"));
            } else {
                unitLabel.setToolTipText(Messages.message("model.unit.soldier"));
            }
        }
        return unitLabel;
    }


, Instance #
frags: 
(startLine=479 endLine=488 srcPath=/root/NewExperiment/freecolFilter/00254/src/net/sf/freecol/common/model/Market.java)
                if (oldPrices[typeOfGoods] > dataForGoodType[typeOfGoods].costToBuy) {
                    addModelMessage(owner.getEurope(), "model.market.priceDecrease",
                                    new String[][] {
                                        {"%europe%", owner.getEurope().getName()},
                                        {"%goods%", Goods.getName(typeOfGoods)},
                                        {"%buy%", String.valueOf(dataForGoodType[typeOfGoods].costToBuy)},
                                        {"%sell%", String.valueOf(dataForGoodType[typeOfGoods].paidForSale)}},
                                    ModelMessage.MARKET_PRICES,
                                    new Goods(typeOfGoods));
                } else if (oldPrices[typeOfGoods] < dataForGoodType[typeOfGoods].costToBuy) {

(startLine=488 endLine=497 srcPath=/root/NewExperiment/freecolFilter/00254/src/net/sf/freecol/common/model/Market.java)
                } else if (oldPrices[typeOfGoods] < dataForGoodType[typeOfGoods].costToBuy) {
                    addModelMessage(owner.getEurope(), "model.market.priceIncrease",
                                    new String[][] {
                                        {"%europe%", owner.getEurope().getName()},
                                        {"%goods%", Goods.getName(typeOfGoods)},
                                        {"%buy%", String.valueOf(dataForGoodType[typeOfGoods].costToBuy)},
                                        {"%sell%", String.valueOf(dataForGoodType[typeOfGoods].paidForSale)}},
                                    ModelMessage.MARKET_PRICES,
                                    new Goods(typeOfGoods));
                }

commonMethod: 
(startLine=752 endLine=776 srcPath=/root/NewExperiment/freecolFilter/00255/src/net/sf/freecol/common/model/FreeColGameObject.java)
    /**
     * Reads an XML-representation of an array.
     * 
     * @param tagName The tagname for the <code>Element</code>
     *       representing the array.
     * @param in The input stream with the XML.
     * @param arrayType The type of array to be read.
     * @return The array.
     * @throws XMLStreamException if a problem was encountered
     *      during parsing.
     */               
    protected static int[] readFromArrayElement(String tagName, XMLStreamReader in, int[] arrayType) throws XMLStreamException {
        if (!in.getLocalName().equals(tagName)) {
            in.nextTag();
        }
        
        int[] array = new int[Integer.parseInt(in.getAttributeValue(null, "xLength"))];
        
        for (int x=0; x<array.length; x++) {
            array[x] = Integer.parseInt(in.getAttributeValue(null, "x" + Integer.toString(x)));
        }
        
        in.nextTag();
        return array;
    }


, Instance #
frags: 
(startLine=373 endLine=384 srcPath=/root/NewExperiment/freecolFilter/00257/src/net/sf/freecol/client/control/InGameInputHandler.java)
            if (unit.isNaval()) {
                if (colony == null) {
                    new ShowInformationMessageSwingTask("model.unit.shipEvaded", new String[][] {
                            { "%ship%", defender.getName() }, { "%nation%", defender.getOwner().getNationAsString() } })
                            .show();
                } else {
                    new ShowInformationMessageSwingTask("model.unit.shipEvadedBombardment", new String[][] {
                            { "%colony%", colony.getName() }, { "%building%", building.getName() },
                            { "%ship%", defender.getName() }, { "%nation%", defender.getOwner().getNationAsString() } })
                            .show();
                }
            }

(startLine=387 endLine=396 srcPath=/root/NewExperiment/freecolFilter/00257/src/net/sf/freecol/client/control/InGameInputHandler.java)
            if (unit.isNaval()) {
                if (colony == null) {
                    new ShowInformationMessageSwingTask("model.unit.enemyShipDamaged", new String[][] {
                            { "%ship%", unit.getName() }, { "%nation%", unit.getOwner().getNationAsString() } }).show();
                } else {
                    new ShowInformationMessageSwingTask("model.unit.enemyShipDamagedByBombardment", new String[][] {
                            { "%colony%", colony.getName() }, { "%building%", building.getName() },
                            { "%ship%", unit.getName() }, { "%nation%", unit.getOwner().getNationAsString() } }).show();
                }
            }

(startLine=399 endLine=408 srcPath=/root/NewExperiment/freecolFilter/00257/src/net/sf/freecol/client/control/InGameInputHandler.java)
            if (unit.isNaval()) {
                if (colony == null) {
                    new ShowInformationMessageSwingTask("model.unit.shipSunk", new String[][] {
                            { "%ship%", unit.getName() }, { "%nation%", unit.getOwner().getNationAsString() } }).show();
                } else {
                    new ShowInformationMessageSwingTask("model.unit.shipSunkByBombardment", new String[][] {
                            { "%colony%", colony.getName() }, { "%building%", building.getName() },
                            { "%ship%", unit.getName() }, { "%nation%", unit.getOwner().getNationAsString() } }).show();
                }
            }

commonMethod: 
(startLine=1329 endLine=1380 srcPath=/root/NewExperiment/freecolFilter/00258/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Bombard a unit with the given outcome.
     * 
     * @param defender The <code>Unit</code> defending against bombardment.
     * @param result The result of the bombardment.
     */
    public void bombard(Unit defender, int result) {
        if (defender == null) {
            throw new NullPointerException();
        }
        Building building = getBuilding(Building.STOCKADE);
        switch (result) {
        case Unit.ATTACK_EVADES:
            // send message to both parties
            addModelMessage(this, "model.unit.shipEvadedBombardment",
                            new String[][] {
                                { "%colony%", getName() },
                                { "%building%", building.getName() },
                                { "%unit%", defender.getName() },
                                { "%nation%", defender.getOwner().getNationAsString() } }, 
                            ModelMessage.DEFAULT, this);
            addModelMessage(defender, "model.unit.shipEvadedBombardment",
                            new String[][] { { "%colony%", getName() },
                                             { "%building%", building.getName() },
                                             { "%unit%", defender.getName() },
                                             { "%nation%", defender.getOwner().getNationAsString() } }, 
                            ModelMessage.DEFAULT, this);
            break;
        case Unit.ATTACK_WIN:
            defender.shipDamaged(this, building);
            addModelMessage(this, "model.unit.enemyShipDamagedByBombardment",
                            new String[][] {
                                { "%colony%", getName() },
                                { "%building%", building.getName() },
                                { "%unit%", defender.getName() },
                                { "%nation%", defender.getOwner().getNationAsString() } }, ModelMessage.UNIT_DEMOTED);
            break;
        case Unit.ATTACK_GREAT_WIN:
            defender.shipSunk(this, building);
            addModelMessage(this, "model.unit.shipSunkByBombardment",
                            new String[][] {
                                { "%colony%", getName() },
                                { "%building%", building.getName() },
                                { "%unit%", defender.getName() },
                                { "%nation%", defender.getOwner().getNationAsString() } },
                            ModelMessage.UNIT_DEMOTED);
            break;
        default:
            logger.warning("Illegal result of bombardment!");
            throw new IllegalArgumentException("Illegal result of bombardment!");
        }
    }


, Instance #
frags: 
(startLine=1252 endLine=1272 srcPath=/root/NewExperiment/freecolFilter/00260/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            if (horses != 0) {
                goodsIcon =
                        getCanvas().getImageProvider().getGoodsImageIcon(
                                Goods.HORSES);
                if (horses > 2 || horses == 1) {
                    productionImage =
                            getCanvas().getGUI().createProductionImage(
                                    goodsIcon, horses,
                                    goodsIcon.getIconWidth(), getHeight(), 2);
                    add = goodsIcon.getIconWidth();
                } else {
                    productionImage =
                            getCanvas().getGUI().createProductionImage(
                                    goodsIcon, horses,
                                    goodsIcon.getIconWidth() * 2, getHeight(),
                                    2);
                    add = goodsIcon.getIconWidth() * 2;
                }
                g.drawImage(productionImage, nextX, 0, null);
                nextX += productionImage.getWidth() / 4 + add;
            }

(startLine=1275 endLine=1295 srcPath=/root/NewExperiment/freecolFilter/00260/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            if (bells != 0) {
                goodsIcon =
                        getCanvas().getImageProvider().getGoodsImageIcon(
                                Goods.BELLS);
                if (bells > 6 || bells == 1) {
                    productionImage =
                            getCanvas().getGUI().createProductionImage(
                                    goodsIcon, bells, goodsIcon.getIconWidth(),
                                    getHeight(), 6);
                    add = goodsIcon.getIconWidth();
                } else {
                    productionImage =
                            getCanvas().getGUI().createProductionImage(
                                    goodsIcon, bells,
                                    goodsIcon.getIconWidth() * 2, getHeight(),
                                    6);
                    add = goodsIcon.getIconWidth() * 2;
                }
                g.drawImage(productionImage, nextX, 0, null);
                nextX += productionImage.getWidth() / 4 + add;
            }

(startLine=1298 endLine=1317 srcPath=/root/NewExperiment/freecolFilter/00260/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            if (crosses != 0) {
                goodsIcon =
                        getCanvas().getImageProvider().getGoodsImageIcon(
                                Goods.CROSSES);
                if (crosses > 6 || crosses == 1) {
                    productionImage =
                            getCanvas().getGUI().createProductionImage(
                                    goodsIcon, crosses,
                                    goodsIcon.getIconWidth(), getHeight(), 6);
                    add = goodsIcon.getIconWidth();
                } else {
                    productionImage =
                            getCanvas().getGUI().createProductionImage(
                                    goodsIcon, crosses,
                                    goodsIcon.getIconWidth() * 2, getHeight(),
                                    6);
                    add = goodsIcon.getIconWidth() * 2;
                }
                g.drawImage(productionImage, nextX, 0, null);
            }

commonMethod: 
(startLine=1124 endLine=1171 srcPath=/root/NewExperiment/freecolFilter/00261/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
        /**
         * Paints the icons for the used food and the food surplus.
         * 
         * @param g the graphics device to draw on
         * @param usedFood the food that is being used. (if not enough is
         *            produced, this is the complete production as it is being
         *            used - not the consumption.)
         * @param surplus the surplus on food.
         * @return the position to put the next image at.
         */
        private int paintFood(Graphics g, int usedFood, int surplus) {
            ImageIcon goodsIcon = getCanvas().getImageProvider().getGoodsImageIcon(Goods.FOOD);
            BufferedImage productionImage;
            int nextX = 0;
            int add = 0;
            // Food production:
            if (usedFood != 0) {
                nextX = (usedFood > 12) ? goodsIcon.getIconWidth() : Math.min(usedFood, 4) * goodsIcon.getIconWidth();
                productionImage = getCanvas().getGUI().createProductionImage(goodsIcon, usedFood, nextX, getHeight(),
                        12);
                g.drawImage(productionImage, BORDER_CORRECT, 0, null);
                nextX += goodsIcon.getIconWidth() / 4;
            }

            // Food surplus:
            if (surplus != 0) {
                if (surplus > 6 || surplus < 0 || surplus == 1) {
                    productionImage = getCanvas().getGUI().createProductionImage(goodsIcon, surplus,
                            goodsIcon.getIconWidth(), getHeight(), 6, true);
                    add = goodsIcon.getIconWidth();
                } else {
                    productionImage = getCanvas().getGUI().createProductionImage(goodsIcon, surplus,
                            goodsIcon.getIconWidth() * 2, getHeight(), 6, true);
                    add = goodsIcon.getIconWidth() * 3;
                }

                g.drawImage(productionImage, nextX, 0, null);
                nextX += productionImage.getWidth() / 4 + add;
            } else {
                // Show it even if zero surplus
                productionImage = getCanvas().getGUI().createProductionImage(goodsIcon, surplus,
                        goodsIcon.getIconWidth(), getHeight(), -1, 1, -1, true);
                add = goodsIcon.getIconWidth();
                g.drawImage(productionImage, nextX, 0, null);
                nextX += productionImage.getWidth() / 4 + add;
            }
            return nextX;
        }


, Instance #
frags: 
(startLine=1198 endLine=1211 srcPath=/root/NewExperiment/freecolFilter/00263/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            if (bells != 0) {
                goodsIcon = getCanvas().getImageProvider().getGoodsImageIcon(Goods.BELLS);
                if (bells > 6 || bells == 1) {
                    productionImage = getCanvas().getGUI().createProductionImage(goodsIcon, bells,
                            goodsIcon.getIconWidth(), getHeight(), 6);
                    add = goodsIcon.getIconWidth();
                } else {
                    productionImage = getCanvas().getGUI().createProductionImage(goodsIcon, bells,
                            goodsIcon.getIconWidth() * 2, getHeight(), 6);
                    add = goodsIcon.getIconWidth() * 2;
                }
                g.drawImage(productionImage, nextX, 0, null);
                nextX += productionImage.getWidth() / 4 + add;
            }

(startLine=1214 endLine=1226 srcPath=/root/NewExperiment/freecolFilter/00263/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            if (crosses != 0) {
                goodsIcon = getCanvas().getImageProvider().getGoodsImageIcon(Goods.CROSSES);
                if (crosses > 6 || crosses == 1) {
                    productionImage = getCanvas().getGUI().createProductionImage(goodsIcon, crosses,
                            goodsIcon.getIconWidth(), getHeight(), 6);
                    add = goodsIcon.getIconWidth();
                } else {
                    productionImage = getCanvas().getGUI().createProductionImage(goodsIcon, crosses,
                            goodsIcon.getIconWidth() * 2, getHeight(), 6);
                    add = goodsIcon.getIconWidth() * 2;
                }
                g.drawImage(productionImage, nextX, 0, null);
            }

commonMethod: 
(startLine=334 endLine=393 srcPath=/root/NewExperiment/freecolFilter/00264/src/net/sf/freecol/client/gui/panel/ProductionLabel.java)
    /**
     * Paints this ProductionLabel.
     * 
     * @param g The graphics context in which to do the painting.
     */
    public void paintComponent(Graphics g) {

        if (goodsIcon == null || production == 0) {
            return;
        }

        int drawImageCount = Math.min(Math.abs(production), maxIcons);

        int iconWidth = goodsIcon.getIconWidth();
        int pixelsPerIcon = iconWidth / 2;
        if (pixelsPerIcon - iconWidth < 0) {
            pixelsPerIcon = (compressedWidth - iconWidth) / drawImageCount;
        }
        int maxSpacing = iconWidth;

        /* TODO Tune this: all icons are the same width, but many
         * do not take up the whole width, eg. bells
         */
        boolean iconsTooFarApart = pixelsPerIcon > maxSpacing;
        if (iconsTooFarApart) {
            pixelsPerIcon = maxSpacing;
        }
        int coverage = pixelsPerIcon * (drawImageCount - 1) + iconWidth;
        int leftOffset = 0;

        boolean needToCenterImages = centered && coverage < getWidth();
        if (needToCenterImages) {
            leftOffset = (getWidth() - coverage)/2;
        }

        int width = Math.max(getWidth(), coverage);
        int height = Math.max(getHeight(), goodsIcon.getImage().getHeight(null));
        setSize(new Dimension(width, height));


        // Draw the icons onto the image:
        for (int i = 0; i < drawImageCount; i++) {
            goodsIcon.paintIcon(null, g, leftOffset + i*pixelsPerIcon, 0);
        }

        if (production >= displayNumber || maxIcons < production) {
            String number = Integer.toString(production);
            if (production >= 0 && drawPlus) {
                number = "+" + number;
            }
            if (maxProduction > production) {
                number = number + "/" + String.valueOf(maxProduction);
            }
            BufferedImage stringImage = parent.getGUI().createStringImage(this, number, getForeground(), width, 12);
            int textOffset = leftOffset + (coverage - stringImage.getWidth())/2;
            textOffset = (textOffset >= 0) ? textOffset : 0;
            g.drawImage(stringImage, textOffset,
                    goodsIcon.getIconHeight()/2 - stringImage.getHeight()/2, null);
        }
    }


, Instance #
frags: 
(startLine=159 endLine=169 srcPath=/root/NewExperiment/freecolFilter/00264/src/net/sf/freecol/client/gui/panel/DragListener.java)
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                menuItem = new JMenuItem(Messages.message("arm") + " ("
                                        + tempUnit.getOwner().getMarket().getBidPrice(Goods.MUSKETS, 50) + " gold)",
                                        unitLabel.getCanvas().getImageProvider().getGoodsImageIcon(
                                                ImageLibrary.GOODS_MUSKETS));
                            } else {
                                menuItem = new JMenuItem(Messages.message("arm"), unitLabel.getCanvas()
                                        .getImageProvider().getGoodsImageIcon(ImageLibrary.GOODS_MUSKETS));
                            }
                        }

(startLine=179 endLine=189 srcPath=/root/NewExperiment/freecolFilter/00264/src/net/sf/freecol/client/gui/panel/DragListener.java)
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                menuItem = new JMenuItem(Messages.message("mount") + " ("
                                        + tempUnit.getOwner().getMarket().getBidPrice(Goods.HORSES, 50) + " gold)",
                                        unitLabel.getCanvas().getImageProvider().getGoodsImageIcon(
                                                ImageLibrary.GOODS_HORSES));
                            } else {
                                menuItem = new JMenuItem(Messages.message("mount"), unitLabel.getCanvas()
                                        .getImageProvider().getGoodsImageIcon(ImageLibrary.GOODS_HORSES));
                            }
                        }

commonMethod: 
(startLine=4114 endLine=4132 srcPath=/root/NewExperiment/freecolFilter/00265/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Given a type of goods to produce in a building, returns the unit's
     * potential to do so.
     * 
     * @param goods The type of goods to be produced.
     * @return The potential amount of goods to be manufactured.
     */
    public int getProducedAmount(int goods) {
        int base = 0;

        base = getProductionUsing(getType(), goods, base);

        if (base == 0) {
            return 0;
        }

        // base += getTile().getColony().getProductionBonus();
        return Math.max(base, 1);
    }


, Instance #
frags: 
(startLine=462 endLine=489 srcPath=/root/NewExperiment/freecolFilter/00272/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testTeachPettyCriminals() {
        Colony colony = getStandardColony(2);

        Iterator<Unit> units = colony.getUnitIterator();

        Unit criminal = units.next();
        criminal.setType(Unit.PETTY_CRIMINAL);

        Unit teacher = units.next();
        teacher.setType(Unit.EXPERT_ORE_MINER);

        Building school = colony.getBuilding(Building.SCHOOLHOUSE);
        school.setLevel(Building.SHOP);

        teacher.setLocation(school);

        // PETTY_CRIMINALS become INDENTURED_SERVANTS
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(0, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        assertEquals(Unit.INDENTURED_SERVANT, criminal.getType());
    }

(startLine=495 endLine=527 srcPath=/root/NewExperiment/freecolFilter/00272/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testTeachPettyCriminalsByMaster() {
        Colony colony = getStandardColony(2);

        Iterator<Unit> units = colony.getUnitIterator();

        Unit criminal = units.next();
        criminal.setType(Unit.PETTY_CRIMINAL);

        Unit teacher = units.next();
        teacher.setType(Unit.MASTER_BLACKSMITH);

        Building school = colony.getBuilding(Building.SCHOOLHOUSE);
        school.setLevel(Building.SHOP);

        teacher.setLocation(school);

        // It takes two turns longer to train a petty criminal by a master than
        // by an expert!
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(0, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        assertEquals(Unit.INDENTURED_SERVANT, criminal.getType());
    }

(startLine=533 endLine=561 srcPath=/root/NewExperiment/freecolFilter/00272/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testTeachIndenturedServants() {
        Colony colony = getStandardColony(2);

        Iterator<Unit> units = colony.getUnitIterator();

        Unit indenturedServant = units.next();
        indenturedServant.setType(Unit.INDENTURED_SERVANT);

        Unit teacher = units.next();
        teacher.setType(Unit.EXPERT_ORE_MINER);

        Building school = colony.getBuilding(Building.SCHOOLHOUSE);
        school.setLevel(Building.SHOP);

        teacher.setLocation(school);

        // Train to become free colonist
        assertEquals(1, colony.getUnitList(Unit.INDENTURED_SERVANT).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.INDENTURED_SERVANT).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.INDENTURED_SERVANT).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.INDENTURED_SERVANT).size());
        school.newTurn();
        assertEquals(0, colony.getUnitList(Unit.INDENTURED_SERVANT).size());

        assertEquals(Unit.FREE_COLONIST, indenturedServant.getType());
    }

commonMethod: 
(startLine=20 endLine=26 srcPath=/root/NewExperiment/freecolFilter/00273/test/src/net/sf/freecol/common/model/SchoolTest.java)
    private void trainForTurns(Colony colony, int requiredTurns, int unitType) {
        for (int turn = 0; turn < requiredTurns; turn++) {
            assertEquals("wrong number of units in turn " + turn + ": " + Unit.getName(unitType),
                         1, colony.getUnitList(unitType).size());
            colony.getBuilding(Building.SCHOOLHOUSE).newTurn();
        }
    }


, Instance #
frags: 
(startLine=462 endLine=489 srcPath=/root/NewExperiment/freecolFilter/00272/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testTeachPettyCriminals() {
        Colony colony = getStandardColony(2);

        Iterator<Unit> units = colony.getUnitIterator();

        Unit criminal = units.next();
        criminal.setType(Unit.PETTY_CRIMINAL);

        Unit teacher = units.next();
        teacher.setType(Unit.EXPERT_ORE_MINER);

        Building school = colony.getBuilding(Building.SCHOOLHOUSE);
        school.setLevel(Building.SHOP);

        teacher.setLocation(school);

        // PETTY_CRIMINALS become INDENTURED_SERVANTS
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(0, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        assertEquals(Unit.INDENTURED_SERVANT, criminal.getType());
    }

(startLine=495 endLine=527 srcPath=/root/NewExperiment/freecolFilter/00272/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testTeachPettyCriminalsByMaster() {
        Colony colony = getStandardColony(2);

        Iterator<Unit> units = colony.getUnitIterator();

        Unit criminal = units.next();
        criminal.setType(Unit.PETTY_CRIMINAL);

        Unit teacher = units.next();
        teacher.setType(Unit.MASTER_BLACKSMITH);

        Building school = colony.getBuilding(Building.SCHOOLHOUSE);
        school.setLevel(Building.SHOP);

        teacher.setLocation(school);

        // It takes two turns longer to train a petty criminal by a master than
        // by an expert!
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        school.newTurn();
        assertEquals(0, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        assertEquals(Unit.INDENTURED_SERVANT, criminal.getType());
    }

(startLine=533 endLine=561 srcPath=/root/NewExperiment/freecolFilter/00272/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testTeachIndenturedServants() {
        Colony colony = getStandardColony(2);

        Iterator<Unit> units = colony.getUnitIterator();

        Unit indenturedServant = units.next();
        indenturedServant.setType(Unit.INDENTURED_SERVANT);

        Unit teacher = units.next();
        teacher.setType(Unit.EXPERT_ORE_MINER);

        Building school = colony.getBuilding(Building.SCHOOLHOUSE);
        school.setLevel(Building.SHOP);

        teacher.setLocation(school);

        // Train to become free colonist
        assertEquals(1, colony.getUnitList(Unit.INDENTURED_SERVANT).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.INDENTURED_SERVANT).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.INDENTURED_SERVANT).size());
        school.newTurn();
        assertEquals(1, colony.getUnitList(Unit.INDENTURED_SERVANT).size());
        school.newTurn();
        assertEquals(0, colony.getUnitList(Unit.INDENTURED_SERVANT).size());

        assertEquals(Unit.FREE_COLONIST, indenturedServant.getType());
    }

commonMethod: 
(startLine=20 endLine=26 srcPath=/root/NewExperiment/freecolFilter/00273/test/src/net/sf/freecol/common/model/SchoolTest.java)
    private void trainForTurns(Colony colony, int requiredTurns, int unitType) {
        for (int turn = 0; turn < requiredTurns; turn++) {
            assertEquals("wrong number of units in turn " + turn + ": " + Unit.getName(unitType),
                         1, colony.getUnitList(unitType).size());
            colony.getBuilding(Building.SCHOOLHOUSE).newTurn();
        }
    }


, Instance #
frags: 
(startLine=364 endLine=397 srcPath=/root/NewExperiment/freecolFilter/00272/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testTwoTeachersOfSameKind() {
        
        Colony colony = getStandardColony(3);

        Iterator<Unit> units = colony.getUnitIterator();

        Unit colonist1 = units.next();
        colonist1.setType(Unit.FREE_COLONIST);

        Unit lumberjack1 = units.next();
        lumberjack1.setType(Unit.EXPERT_LUMBER_JACK);

        Unit lumberjack2 = units.next();
        lumberjack2.setType(Unit.EXPERT_LUMBER_JACK);

        Building school = colony.getBuilding(Building.SCHOOLHOUSE);

        school.setLevel(Building.SHOP);

        lumberjack1.setLocation(school);
        lumberjack2.setLocation(school);

        assertEquals(1, colony.getUnitList(Unit.FREE_COLONIST).size());
        school.newTurn(); // 1
        assertEquals(1, colony.getUnitList(Unit.FREE_COLONIST).size());
        school.newTurn(); // 2
        assertEquals(1, colony.getUnitList(Unit.FREE_COLONIST).size());
        school.newTurn(); // 3
        assertEquals(1, colony.getUnitList(Unit.FREE_COLONIST).size());
        school.newTurn(); // 4

        assertEquals(0, colony.getUnitList(Unit.FREE_COLONIST).size());
        assertEquals(3, colony.getUnitList(Unit.EXPERT_LUMBER_JACK).size());
    }

(startLine=815 endLine=844 srcPath=/root/NewExperiment/freecolFilter/00272/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testSonsOfLiberty() {
        Colony colony = getStandardColony(2);
        colony.addSoL(100);
        colony.newTurn();

        Iterator<Unit> units = colony.getUnitIterator();

        Unit colonist1 = units.next();
        colonist1.setType(Unit.FREE_COLONIST);

        Unit lumberjack = units.next();
        lumberjack.setType(Unit.EXPERT_LUMBER_JACK);

        Building school = colony.getBuilding(Building.SCHOOLHOUSE);
        school.setLevel(Building.SHOP);

        lumberjack.setLocation(school);

        assertEquals(1, colony.getUnitList(Unit.FREE_COLONIST).size());
        school.newTurn(); // 1
        assertEquals(1, colony.getUnitList(Unit.FREE_COLONIST).size());
        school.newTurn(); // 2
        assertEquals(1, colony.getUnitList(Unit.FREE_COLONIST).size());
        school.newTurn(); // 3
        assertEquals(1, colony.getUnitList(Unit.FREE_COLONIST).size());
        school.newTurn(); // 4

        assertEquals(0, colony.getUnitList(Unit.FREE_COLONIST).size());
        assertEquals(2, colony.getUnitList(Unit.EXPERT_LUMBER_JACK).size());
    }

commonMethod: 
(startLine=16 endLine=18 srcPath=/root/NewExperiment/freecolFilter/00273/test/src/net/sf/freecol/common/model/SchoolTest.java)
    private void trainForTurns(Colony colony, int requiredTurns) {
        trainForTurns(colony, requiredTurns, Unit.FREE_COLONIST);
    }


, Instance #
frags: 
(startLine=129 endLine=147 srcPath=/root/NewExperiment/freecolFilter/00285/src/net/sf/freecol/server/ai/GoodsWish.java)
     protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {        
         id = in.getAttributeValue(null, "ID");
         destination = (Location) getAIMain().getFreeColGameObject(in.getAttributeValue(null, "destination"));
         
         final String transportableStr = in.getAttributeValue(null, "transportable");
         if (transportableStr != null) {
             transportable = (Transportable) getAIMain().getAIObject(transportableStr);
             if (transportable == null) {
                 transportable = new AIGoods(getAIMain(), transportableStr);
             }
         } else {
             transportable = null;
         }
         value = Integer.parseInt(in.getAttributeValue(null, "value"));
         
         goodsType = Integer.parseInt(in.getAttributeValue(null, "goodsType"));
         
         in.nextTag();
     }

(startLine=151 endLine=169 srcPath=/root/NewExperiment/freecolFilter/00285/src/net/sf/freecol/server/ai/WorkerWish.java)
    protected void readFromXMLImpl(XMLStreamReader in) throws XMLStreamException {        
        id = in.getAttributeValue(null, "ID");
        destination = (Location) getAIMain().getFreeColGameObject(in.getAttributeValue(null, "destination"));
        
        final String transportableStr = in.getAttributeValue(null, "transportable"); 
        if (transportableStr != null) {
            transportable = (Transportable) getAIMain().getAIObject(transportableStr);
            if (transportable == null) {
                transportable = new AIUnit(getAIMain(), transportableStr);
            }
        } else {
            transportable = null;
        }
        value = Integer.parseInt(in.getAttributeValue(null, "value"));

        unitType = Integer.parseInt(in.getAttributeValue(null, "unitType"));
        expertNeeded = Boolean.valueOf(in.getAttributeValue(null, "expertNeeded")).booleanValue();
        in.nextTag();
    }

commonMethod: 
(startLine=288 endLine=298 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/FreeCol.java)
    /**
     * Returns the specification object for Freecol. 
     * 
     * @return the specification to be used by all other classes.
     */
    public static Specification getSpecification() {
        if (specification == null){
            specification = new Specification();
        }
        return specification;
    }


, Instance #
frags: 
(startLine=193 endLine=243 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/DetermineHighSeasAction.java)
    private void scaleMapTo(final int width, final int height) {
        /*
         * This implementation uses a simple linear scaling, and
         * the isometric shape is not taken into account.
         * 
         * TODO: Find a better method for choosing a group of
         *       adjacent tiles. This group can then be merged into
         *       a common tile by using the average value (for
         *       example: are there a majority of ocean tiles?).
         */
        
        final Game game = freeColClient.getGame();
        final Map oldMap = game.getMap();

        final int oldWidth = oldMap.getWidth();
        final int oldHeight = oldMap.getHeight();
        
        Vector<Vector<Tile>> columns = new Vector<Vector<Tile>>(width);
        for (int i = 0; i < width; i++) {
            Vector<Tile> v = new Vector<Tile>(height);
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile importTile = oldMap.getTile(oldX, oldY);
                Tile t = new Tile(game, importTile.getType(), i, j);
                t.setForested(importTile.isForested());
                t.setAddition(importTile.getAddition());
                t.setBonus(importTile.hasBonus());
                v.add(t);
            }
            columns.add(v);
        }

        Map map = new Map(game, columns);
        game.setMap(map);
        
        // Update river directions
        for (Tile t : map.getAllTiles()) {
            int addition = t.getAddition();
            t.setAddition(Tile.ADD_NONE);
            t.addRiver(addition);
            t.setAddition(addition);
        }
        
        freeColClient.getGUI().setSelectedTile(new Position(0, 0));
        freeColClient.getCanvas().refresh();
    }

(startLine=196 endLine=248 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/ScaleMapAction.java)
    private void scaleMapTo(final int width, final int height) {
        /*
         * This implementation uses a simple linear scaling, and
         * the isometric shape is not taken into account.
         * 
         * TODO: Find a better method for choosing a group of
         *       adjacent tiles. This group can then be merged into
         *       a common tile by using the average value (for
         *       example: are there a majority of ocean tiles?).
         */
        
        final Game game = freeColClient.getGame();
        final Map oldMap = game.getMap();

        final int oldWidth = oldMap.getWidth();
        final int oldHeight = oldMap.getHeight();
        
        Vector<Vector<Tile>> columns = new Vector<Vector<Tile>>(width);
        for (int i = 0; i < width; i++) {
            Vector<Tile> v = new Vector<Tile>(height);
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile oldTile = oldMap.getTile(oldX, oldY);
                
                // Copy values to the new tile:
                Tile t = new Tile(game, oldTile.getType(), i, j);
                t.setForested(oldTile.isForested());
                t.setAddition(oldTile.getAddition());
                t.setBonus(oldTile.hasBonus());
                v.add(t);
            }
            columns.add(v);
        }

        Map map = new Map(game, columns);
        game.setMap(map);
        
        // Update river directions
        for (Tile t : map.getAllTiles()) {
            int addition = t.getAddition();
            t.setAddition(Tile.ADD_NONE);
            t.addRiver(addition);
            t.setAddition(addition);
        }
        
        freeColClient.getGUI().setSelectedTile(new Position(0, 0));
        freeColClient.getCanvas().refresh();
    }

commonMethod: 
(startLine=306 endLine=308 srcPath=/root/NewExperiment/freecolFilter/00287/src/net/sf/freecol/common/model/TileItemContainer.java)
    public void copyFrom(TileItemContainer tic) {
        copyFrom(tic, true);
    }


, Instance #
frags: 
(startLine=193 endLine=243 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/DetermineHighSeasAction.java)
    private void scaleMapTo(final int width, final int height) {
        /*
         * This implementation uses a simple linear scaling, and
         * the isometric shape is not taken into account.
         * 
         * TODO: Find a better method for choosing a group of
         *       adjacent tiles. This group can then be merged into
         *       a common tile by using the average value (for
         *       example: are there a majority of ocean tiles?).
         */
        
        final Game game = freeColClient.getGame();
        final Map oldMap = game.getMap();

        final int oldWidth = oldMap.getWidth();
        final int oldHeight = oldMap.getHeight();
        
        Vector<Vector<Tile>> columns = new Vector<Vector<Tile>>(width);
        for (int i = 0; i < width; i++) {
            Vector<Tile> v = new Vector<Tile>(height);
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile importTile = oldMap.getTile(oldX, oldY);
                Tile t = new Tile(game, importTile.getType(), i, j);
                t.setForested(importTile.isForested());
                t.setAddition(importTile.getAddition());
                t.setBonus(importTile.hasBonus());
                v.add(t);
            }
            columns.add(v);
        }

        Map map = new Map(game, columns);
        game.setMap(map);
        
        // Update river directions
        for (Tile t : map.getAllTiles()) {
            int addition = t.getAddition();
            t.setAddition(Tile.ADD_NONE);
            t.addRiver(addition);
            t.setAddition(addition);
        }
        
        freeColClient.getGUI().setSelectedTile(new Position(0, 0));
        freeColClient.getCanvas().refresh();
    }

(startLine=196 endLine=248 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/ScaleMapAction.java)
    private void scaleMapTo(final int width, final int height) {
        /*
         * This implementation uses a simple linear scaling, and
         * the isometric shape is not taken into account.
         * 
         * TODO: Find a better method for choosing a group of
         *       adjacent tiles. This group can then be merged into
         *       a common tile by using the average value (for
         *       example: are there a majority of ocean tiles?).
         */
        
        final Game game = freeColClient.getGame();
        final Map oldMap = game.getMap();

        final int oldWidth = oldMap.getWidth();
        final int oldHeight = oldMap.getHeight();
        
        Vector<Vector<Tile>> columns = new Vector<Vector<Tile>>(width);
        for (int i = 0; i < width; i++) {
            Vector<Tile> v = new Vector<Tile>(height);
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile oldTile = oldMap.getTile(oldX, oldY);
                
                // Copy values to the new tile:
                Tile t = new Tile(game, oldTile.getType(), i, j);
                t.setForested(oldTile.isForested());
                t.setAddition(oldTile.getAddition());
                t.setBonus(oldTile.hasBonus());
                v.add(t);
            }
            columns.add(v);
        }

        Map map = new Map(game, columns);
        game.setMap(map);
        
        // Update river directions
        for (Tile t : map.getAllTiles()) {
            int addition = t.getAddition();
            t.setAddition(Tile.ADD_NONE);
            t.addRiver(addition);
            t.setAddition(addition);
        }
        
        freeColClient.getGUI().setSelectedTile(new Position(0, 0));
        freeColClient.getCanvas().refresh();
    }

commonMethod: 
(startLine=490 endLine=504 srcPath=/root/NewExperiment/freecolFilter/00287/src/net/sf/freecol/common/model/TileItemContainer.java)
    public void updateRiver() {
        if (river == null) {
            return;
        }
        int[] directions = {Map.NE, Map.SE, Map.SW, Map.NW};
        int[] base = Map.getBase(directions, 3);
        int style = 0;
        for (int i = 0; i < directions.length; i++) {
            Tile t = getTile().getMap().getNeighbourOrNull(directions[i], getTile());
            if (t == null) {
                continue;
            }
            style += base[i] * t.getRiverStyle();
        }
    }


, Instance #
frags: 
(startLine=211 endLine=228 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/DetermineHighSeasAction.java)
        for (int i = 0; i < width; i++) {
            Vector<Tile> v = new Vector<Tile>(height);
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile importTile = oldMap.getTile(oldX, oldY);
                Tile t = new Tile(game, importTile.getType(), i, j);
                t.setForested(importTile.isForested());
                t.setAddition(importTile.getAddition());
                t.setBonus(importTile.hasBonus());
                v.add(t);
            }
            columns.add(v);
        }

(startLine=214 endLine=233 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/ScaleMapAction.java)
        for (int i = 0; i < width; i++) {
            Vector<Tile> v = new Vector<Tile>(height);
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile oldTile = oldMap.getTile(oldX, oldY);
                
                // Copy values to the new tile:
                Tile t = new Tile(game, oldTile.getType(), i, j);
                t.setForested(oldTile.isForested());
                t.setAddition(oldTile.getAddition());
                t.setBonus(oldTile.hasBonus());
                v.add(t);
            }
            columns.add(v);
        }

commonMethod: 
(startLine=306 endLine=308 srcPath=/root/NewExperiment/freecolFilter/00287/src/net/sf/freecol/common/model/TileItemContainer.java)
    public void copyFrom(TileItemContainer tic) {
        copyFrom(tic, true);
    }


, Instance #
frags: 
(startLine=211 endLine=228 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/DetermineHighSeasAction.java)
        for (int i = 0; i < width; i++) {
            Vector<Tile> v = new Vector<Tile>(height);
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile importTile = oldMap.getTile(oldX, oldY);
                Tile t = new Tile(game, importTile.getType(), i, j);
                t.setForested(importTile.isForested());
                t.setAddition(importTile.getAddition());
                t.setBonus(importTile.hasBonus());
                v.add(t);
            }
            columns.add(v);
        }

(startLine=214 endLine=233 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/ScaleMapAction.java)
        for (int i = 0; i < width; i++) {
            Vector<Tile> v = new Vector<Tile>(height);
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile oldTile = oldMap.getTile(oldX, oldY);
                
                // Copy values to the new tile:
                Tile t = new Tile(game, oldTile.getType(), i, j);
                t.setForested(oldTile.isForested());
                t.setAddition(oldTile.getAddition());
                t.setBonus(oldTile.hasBonus());
                v.add(t);
            }
            columns.add(v);
        }

commonMethod: 
(startLine=490 endLine=504 srcPath=/root/NewExperiment/freecolFilter/00287/src/net/sf/freecol/common/model/TileItemContainer.java)
    public void updateRiver() {
        if (river == null) {
            return;
        }
        int[] directions = {Map.NE, Map.SE, Map.SW, Map.NW};
        int[] base = Map.getBase(directions, 3);
        int style = 0;
        for (int i = 0; i < directions.length; i++) {
            Tile t = getTile().getMap().getNeighbourOrNull(directions[i], getTile());
            if (t == null) {
                continue;
            }
            style += base[i] * t.getRiverStyle();
        }
    }


, Instance #
frags: 
(startLine=213 endLine=226 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/DetermineHighSeasAction.java)
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile importTile = oldMap.getTile(oldX, oldY);
                Tile t = new Tile(game, importTile.getType(), i, j);
                t.setForested(importTile.isForested());
                t.setAddition(importTile.getAddition());
                t.setBonus(importTile.hasBonus());
                v.add(t);
            }

(startLine=216 endLine=231 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/ScaleMapAction.java)
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile oldTile = oldMap.getTile(oldX, oldY);
                
                // Copy values to the new tile:
                Tile t = new Tile(game, oldTile.getType(), i, j);
                t.setForested(oldTile.isForested());
                t.setAddition(oldTile.getAddition());
                t.setBonus(oldTile.hasBonus());
                v.add(t);
            }

commonMethod: 
(startLine=306 endLine=308 srcPath=/root/NewExperiment/freecolFilter/00287/src/net/sf/freecol/common/model/TileItemContainer.java)
    public void copyFrom(TileItemContainer tic) {
        copyFrom(tic, true);
    }


, Instance #
frags: 
(startLine=213 endLine=226 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/DetermineHighSeasAction.java)
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile importTile = oldMap.getTile(oldX, oldY);
                Tile t = new Tile(game, importTile.getType(), i, j);
                t.setForested(importTile.isForested());
                t.setAddition(importTile.getAddition());
                t.setBonus(importTile.hasBonus());
                v.add(t);
            }

(startLine=216 endLine=231 srcPath=/root/NewExperiment/freecolFilter/00286/src/net/sf/freecol/client/gui/action/ScaleMapAction.java)
            for (int j = 0; j < height; j++) {
                final int oldX = (i * oldWidth) / width;
                final int oldY = (j * oldHeight) / height;
                /*
                 * TODO: This tile should be based on the average as
                 *       mentioned at the top of this method.
                 */
                Tile oldTile = oldMap.getTile(oldX, oldY);
                
                // Copy values to the new tile:
                Tile t = new Tile(game, oldTile.getType(), i, j);
                t.setForested(oldTile.isForested());
                t.setAddition(oldTile.getAddition());
                t.setBonus(oldTile.hasBonus());
                v.add(t);
            }

commonMethod: 
(startLine=490 endLine=504 srcPath=/root/NewExperiment/freecolFilter/00287/src/net/sf/freecol/common/model/TileItemContainer.java)
    public void updateRiver() {
        if (river == null) {
            return;
        }
        int[] directions = {Map.NE, Map.SE, Map.SW, Map.NW};
        int[] base = Map.getBase(directions, 3);
        int style = 0;
        for (int i = 0; i < directions.length; i++) {
            Tile t = getTile().getMap().getNeighbourOrNull(directions[i], getTile());
            if (t == null) {
                continue;
            }
            style += base[i] * t.getRiverStyle();
        }
    }


, Instance #
frags: 
(startLine=1171 endLine=1181 srcPath=/root/NewExperiment/freecolFilter/00288/src/net/sf/freecol/client/gui/GUI.java)
    private Image getPathImage(Unit u) {
        if (u == null || u.isNaval()) {
            return (Image) UIManager.get("path.naval.image");
        } else if (u.isMounted()) {
            return (Image) UIManager.get("path.horse.image");
        } else if (u.getType() == Unit.WAGON_TRAIN || u.getType() == Unit.TREASURE_TRAIN || u.getType() == Unit.ARTILLERY || u.getType() == Unit.DAMAGED_ARTILLERY) {
            return (Image) UIManager.get("path.wagon.image");
        } else {
            return (Image) UIManager.get("path.foot.image");
        }
    }

(startLine=1208 endLine=1218 srcPath=/root/NewExperiment/freecolFilter/00288/src/net/sf/freecol/client/gui/GUI.java)
    private Image getPathNextTurnImage(Unit u) {
        if (u == null || u.isNaval()) {
            return (Image) UIManager.get("path.naval.nextTurn.image");
        } else if (u.isMounted()) {
            return (Image) UIManager.get("path.horse.nextTurn.image");
        } else if (u.getType() == Unit.WAGON_TRAIN || u.getType() == Unit.TREASURE_TRAIN || u.getType() == Unit.ARTILLERY || u.getType() == Unit.DAMAGED_ARTILLERY) {
            return (Image) UIManager.get("path.wagon.nextTurn.image");
        } else {
            return (Image) UIManager.get("path.foot.nextTurn.image");
        }
    }

commonMethod: 
(startLine=4754 endLine=4765 srcPath=/root/NewExperiment/freecolFilter/00289/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Return the type of the image which will be used to draw the path
     *
     * @returns a <code>String</code> to form the resource key
     */
    public String getPathTypeImage() {
        if (isMounted()) {
            return "horse";
        } else {
            return unitType.getPathImage();
        }
    }


, Instance #
frags: 
(startLine=312 endLine=322 srcPath=/root/NewExperiment/freecolFilter/00288/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
        if (reportType == CARGO) {
            int[] unitTypes = new int[] {
                Unit.WAGON_TRAIN, Unit.CARAVEL, Unit.MERCHANTMAN, Unit.GALLEON,
                Unit.FRIGATE, Unit.MAN_O_WAR, Unit.PRIVATEER
            };
            unitPanel = new JPanel(new GridLayout(1, unitTypes.length));
            for (int index = 0; index < unitTypes.length; index++) {
                int count = unitCounts[unitTypes[index]][0];
                unitPanel.add(createUnitTypeLabel(unitTypes[index], false, count));
            }
        } else if (reportType == NAVAL) {

(startLine=322 endLine=332 srcPath=/root/NewExperiment/freecolFilter/00288/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
        } else if (reportType == NAVAL) {
            int[] unitTypes = new int[] {
                Unit.CARAVEL, Unit.MERCHANTMAN, Unit.GALLEON,
                Unit.FRIGATE, Unit.MAN_O_WAR, Unit.PRIVATEER
            };
            unitPanel = new JPanel(new GridLayout(1, unitTypes.length));
            for (int index = 0; index < unitTypes.length; index++) {
                int count = unitCounts[unitTypes[index]][0];
                unitPanel.add(createUnitTypeLabel(unitTypes[index], false, count));
            }
        } else if (reportType == MILITARY) {

commonMethod: 
(startLine=445 endLine=447 srcPath=/root/NewExperiment/freecolFilter/00289/src/net/sf/freecol/common/Specification.java)
    public UnitType getUnitType(int unitTypeIndex) {
        return unitTypeList.get(unitTypeIndex);
    }


, Instance #
frags: 
(startLine=312 endLine=322 srcPath=/root/NewExperiment/freecolFilter/00288/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
        if (reportType == CARGO) {
            int[] unitTypes = new int[] {
                Unit.WAGON_TRAIN, Unit.CARAVEL, Unit.MERCHANTMAN, Unit.GALLEON,
                Unit.FRIGATE, Unit.MAN_O_WAR, Unit.PRIVATEER
            };
            unitPanel = new JPanel(new GridLayout(1, unitTypes.length));
            for (int index = 0; index < unitTypes.length; index++) {
                int count = unitCounts[unitTypes[index]][0];
                unitPanel.add(createUnitTypeLabel(unitTypes[index], false, count));
            }
        } else if (reportType == NAVAL) {

(startLine=322 endLine=332 srcPath=/root/NewExperiment/freecolFilter/00288/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
        } else if (reportType == NAVAL) {
            int[] unitTypes = new int[] {
                Unit.CARAVEL, Unit.MERCHANTMAN, Unit.GALLEON,
                Unit.FRIGATE, Unit.MAN_O_WAR, Unit.PRIVATEER
            };
            unitPanel = new JPanel(new GridLayout(1, unitTypes.length));
            for (int index = 0; index < unitTypes.length; index++) {
                int count = unitCounts[unitTypes[index]][0];
                unitPanel.add(createUnitTypeLabel(unitTypes[index], false, count));
            }
        } else if (reportType == MILITARY) {

commonMethod: 
(startLine=288 endLine=298 srcPath=/root/NewExperiment/freecolFilter/00289/src/net/sf/freecol/FreeCol.java)
    /**
     * Returns the specification object for Freecol. 
     * 
     * @return the specification to be used by all other classes.
     */
    public static Specification getSpecification() {
        if (specification == null){
            specification = new Specification();
        }
        return specification;
    }


, Instance #
frags: 
(startLine=312 endLine=322 srcPath=/root/NewExperiment/freecolFilter/00288/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
        if (reportType == CARGO) {
            int[] unitTypes = new int[] {
                Unit.WAGON_TRAIN, Unit.CARAVEL, Unit.MERCHANTMAN, Unit.GALLEON,
                Unit.FRIGATE, Unit.MAN_O_WAR, Unit.PRIVATEER
            };
            unitPanel = new JPanel(new GridLayout(1, unitTypes.length));
            for (int index = 0; index < unitTypes.length; index++) {
                int count = unitCounts[unitTypes[index]][0];
                unitPanel.add(createUnitTypeLabel(unitTypes[index], false, count));
            }
        } else if (reportType == NAVAL) {

(startLine=322 endLine=332 srcPath=/root/NewExperiment/freecolFilter/00288/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
        } else if (reportType == NAVAL) {
            int[] unitTypes = new int[] {
                Unit.CARAVEL, Unit.MERCHANTMAN, Unit.GALLEON,
                Unit.FRIGATE, Unit.MAN_O_WAR, Unit.PRIVATEER
            };
            unitPanel = new JPanel(new GridLayout(1, unitTypes.length));
            for (int index = 0; index < unitTypes.length; index++) {
                int count = unitCounts[unitTypes[index]][0];
                unitPanel.add(createUnitTypeLabel(unitTypes[index], false, count));
            }
        } else if (reportType == MILITARY) {

commonMethod: 
(startLine=471 endLine=488 srcPath=/root/NewExperiment/freecolFilter/00289/src/net/sf/freecol/common/Specification.java)
    /**
     * Return the unit types which have any of the given abilities
     *
     * @param abilities The abilities for the search
     * @return a <code>List</code> of <code>UnitType</code>
     */
    public List<UnitType> getUnitTypesWithAnyAbility(String[] abilities) {
        ArrayList<UnitType> unitTypes = new ArrayList<UnitType>();
        for (UnitType unitType : getUnitTypeList()) {
            for (int i = 0; i < abilities.length; i++) {
                if (unitType.hasAbility(abilities[i])) {
                    unitTypes.add(unitType);
                    break;
                }
            }
        }
        return unitTypes;
    }


, Instance #
frags: 
(startLine=312 endLine=322 srcPath=/root/NewExperiment/freecolFilter/00288/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
        if (reportType == CARGO) {
            int[] unitTypes = new int[] {
                Unit.WAGON_TRAIN, Unit.CARAVEL, Unit.MERCHANTMAN, Unit.GALLEON,
                Unit.FRIGATE, Unit.MAN_O_WAR, Unit.PRIVATEER
            };
            unitPanel = new JPanel(new GridLayout(1, unitTypes.length));
            for (int index = 0; index < unitTypes.length; index++) {
                int count = unitCounts[unitTypes[index]][0];
                unitPanel.add(createUnitTypeLabel(unitTypes[index], false, count));
            }
        } else if (reportType == NAVAL) {

(startLine=322 endLine=332 srcPath=/root/NewExperiment/freecolFilter/00288/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
        } else if (reportType == NAVAL) {
            int[] unitTypes = new int[] {
                Unit.CARAVEL, Unit.MERCHANTMAN, Unit.GALLEON,
                Unit.FRIGATE, Unit.MAN_O_WAR, Unit.PRIVATEER
            };
            unitPanel = new JPanel(new GridLayout(1, unitTypes.length));
            for (int index = 0; index < unitTypes.length; index++) {
                int count = unitCounts[unitTypes[index]][0];
                unitPanel.add(createUnitTypeLabel(unitTypes[index], false, count));
            }
        } else if (reportType == MILITARY) {

commonMethod: 
(startLine=490 endLine=492 srcPath=/root/NewExperiment/freecolFilter/00289/src/net/sf/freecol/common/Specification.java)
    public List<UnitType> getUnitTypesWithAbility(String ability) {
        return getUnitTypesWithAnyAbility(new String[] { ability });
    }


, Instance #
frags: 
(startLine=411 endLine=431 srcPath=/root/NewExperiment/freecolFilter/00308/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testTeachPettyCriminals() {
        Colony colony = getStandardColony(2);

        Iterator<Unit> units = colony.getUnitIterator();

        Unit criminal = units.next();
        criminal.setType(Unit.PETTY_CRIMINAL);

        Unit teacher = units.next();
        teacher.setType(Unit.EXPERT_ORE_MINER);

        Building school = colony.getBuilding(spec().getBuildingType("model.building.Schoolhouse"));
        school.upgrade();school.upgrade();

        teacher.setLocation(school);

        // PETTY_CRIMINALS become INDENTURED_SERVANTS
        trainForTurns(colony, teacher.getNeededTurnsOfTraining(), Unit.PETTY_CRIMINAL);
        assertEquals(0, colony.getUnitList(Unit.PETTY_CRIMINAL).size());
        assertEquals(Unit.INDENTURED_SERVANT, criminal.getType());
    }

(startLine=437 endLine=456 srcPath=/root/NewExperiment/freecolFilter/00308/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testTeachPettyCriminalsByMaster() {
        Colony colony = getStandardColony(2);

        Iterator<Unit> units = colony.getUnitIterator();

        Unit criminal = units.next();
        criminal.setType(Unit.PETTY_CRIMINAL);

        Unit teacher = units.next();
        teacher.setType(Unit.MASTER_BLACKSMITH);

        Building school = colony.getBuilding(spec().getBuildingType("model.building.Schoolhouse"));
        school.upgrade();school.upgrade();

        teacher.setLocation(school);

        assertEquals(teacher.getNeededTurnsOfTraining(), 4);
        trainForTurns(colony, teacher.getNeededTurnsOfTraining(), Unit.PETTY_CRIMINAL);
        assertEquals(Unit.INDENTURED_SERVANT, criminal.getType());
    }

(startLine=462 endLine=482 srcPath=/root/NewExperiment/freecolFilter/00308/test/src/net/sf/freecol/common/model/SchoolTest.java)
    public void testTeachIndenturedServants() {
        Colony colony = getStandardColony(2);

        Iterator<Unit> units = colony.getUnitIterator();

        Unit indenturedServant = units.next();
        indenturedServant.setType(Unit.INDENTURED_SERVANT);

        Unit teacher = units.next();
        //teacher.setType(Unit.EXPERT_ORE_MINER);
        teacher.setType(Unit.MASTER_BLACKSMITH);

        Building school = colony.getBuilding(spec().getBuildingType("model.building.Schoolhouse"));
        school.upgrade();school.upgrade();

        teacher.setLocation(school);
        assertEquals(teacher.getNeededTurnsOfTraining(), 4);
        trainForTurns(colony, teacher.getNeededTurnsOfTraining(), Unit.INDENTURED_SERVANT);
        // Train to become free colonist
        assertEquals(Unit.FREE_COLONIST, indenturedServant.getType());
    }

commonMethod: 
(startLine=278 endLine=294 srcPath=/root/NewExperiment/freecolFilter/00309/test/src/net/sf/freecol/common/model/SchoolTest.java)
    /**
     * Return a colony with a university and 10 elder statesmen
     * @return
     */
    public Colony getUniversityColony(){
    	Colony colony = getStandardColony(10);

        for (Unit u : colony.getUnitList()){
        	u.setType(Unit.ELDER_STATESMAN);
        }

        Building school = colony.getBuilding(spec().getBuildingType("model.building.Schoolhouse"));
        school.upgrade();
        school.upgrade();
        school.upgrade();
        return colony;
    }


, Instance #
frags: 
(startLine=839 endLine=873 srcPath=/root/NewExperiment/freecolFilter/00324/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
    private void updateCargoPanel() {
        cargoPanel.removeAll();

        if (selectedUnit != null) {
            selectedUnit.setSelected(true);
            Unit selUnit = selectedUnit.getUnit();

            Iterator<Unit> unitIterator = selUnit.getUnitIterator();
            while (unitIterator.hasNext()) {
                Unit unit = unitIterator.next();

                UnitLabel label = new UnitLabel(unit, parent);
                if (isEditable()) {
                    label.setTransferHandler(defaultTransferHandler);
                    label.addMouseListener(pressListener);
                }

                cargoPanel.add(label, false);
            }

            Iterator<Goods> goodsIterator = selUnit.getGoodsIterator();
            while (goodsIterator.hasNext()) {
                Goods g = goodsIterator.next();

                GoodsLabel label = new GoodsLabel(g, parent);
                if (isEditable()) {
                    label.setTransferHandler(defaultTransferHandler);
                    label.addMouseListener(pressListener);
                }

                cargoPanel.add(label, false);
            }

        }
    }

(startLine=557 endLine=587 srcPath=/root/NewExperiment/freecolFilter/00324/src/net/sf/freecol/client/gui/panel/EuropePanel.java)
    private void updateCargoPanel() {
        cargoPanel.removeAll();

        if (selectedUnit != null) {
            selectedUnit.setSelected(true);
            Unit selUnit = selectedUnit.getUnit();

            Iterator<Unit> unitIterator = selUnit.getUnitIterator();
            while (unitIterator.hasNext()) {
                Unit unit = unitIterator.next();

                UnitLabel label = new UnitLabel(unit, parent);
                label.setTransferHandler(defaultTransferHandler);
                label.addMouseListener(pressListener);

                cargoPanel.add(label, false);
            }

            Iterator<Goods> goodsIterator = selUnit.getGoodsIterator();
            while (goodsIterator.hasNext()) {
                Goods g = goodsIterator.next();

                GoodsLabel label = new GoodsLabel(g, parent);
                label.setTransferHandler(defaultTransferHandler);
                label.addMouseListener(pressListener);

                cargoPanel.add(label, false);
            }
        }

    }

commonMethod: 
(startLine=134 endLine=172 srcPath=/root/NewExperiment/freecolFilter/00325/src/net/sf/freecol/client/gui/panel/CargoPanel.java)
    public void initialize() {
        removeAll();

        if (carrier != null) {

            Iterator<Unit> unitIterator = carrier.getUnitIterator();
            while (unitIterator.hasNext()) {
                Unit unit = unitIterator.next();

                UnitLabel label = new UnitLabel(unit, parent);
                if (isEditable()) {
                    label.setTransferHandler(defaultTransferHandler);
                    label.addMouseListener(pressListener);
                }

                add(label, false);
            }

            Iterator<Goods> goodsIterator = carrier.getGoodsIterator();
            while (goodsIterator.hasNext()) {
                Goods g = goodsIterator.next();

                GoodsLabel label = new GoodsLabel(g, parent);
                if (isEditable()) {
                    label.setTransferHandler(defaultTransferHandler);
                    label.addMouseListener(pressListener);
                }

                add(label, false);
            }

            border.setTitle(Messages.message("cargoOnCarrierLong", 
                                             "%name%", carrier.getName(),
                                             "%space%", String.valueOf(carrier.getSpaceLeft())));
        } else {
            border.setTitle(Messages.message("cargoOnCarrier"));
        }

    }


, Instance #
frags: 
(startLine=188 endLine=206 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    if (tempUnit.canBeArmed()) {
                        if (tempUnit.isArmed()) {
                            menuItem = new JMenuItem(Messages.message("disarm"));
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.MUSKETS, 50);
                                menuItem = new JMenuItem(Messages.message("arm") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("arm"));
                            }
                        }
                        menuItem.setIcon(imageLibrary.getScaledGoodsImageIcon(Goods.MUSKETS, 0.66f));
                        menuItem.setActionCommand(String.valueOf(UnitLabel.ARM));
                        menuItem.addActionListener(unitLabel);
                        menu.add(menuItem);
                        separatorNeeded = true;
                    }

(startLine=208 endLine=226 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    if (tempUnit.canBeMounted()) {
                        if (tempUnit.isMounted()) {
                            menuItem = new JMenuItem(Messages.message("removeHorses"));
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.HORSES, 50);
                                menuItem = new JMenuItem(Messages.message("mount") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("mount"));
                            }
                        }
                        menuItem.setIcon(imageLibrary.getScaledGoodsImageIcon(Goods.HORSES, 0.66f));
                        menuItem.setActionCommand(String.valueOf(UnitLabel.MOUNT));
                        menuItem.addActionListener(unitLabel);
                        menu.add(menuItem);
                        separatorNeeded = true;
                    }

commonMethod: 
(startLine=2028 endLine=2060 srcPath=/root/NewExperiment/freecolFilter/00340/src/net/sf/freecol/common/model/Unit.java)
    public boolean canBeEquippedWith(EquipmentType equipmentType) {
        for (Entry<String, Boolean> entry : equipmentType.getUnitAbilitiesRequired().entrySet()) {
            if (hasAbility(entry.getKey()) != entry.getValue()) {
                return false;
            }
        }
        if (!equipmentType.getLocationAbilitiesRequired().isEmpty()) {
            if (isInEurope()) {
                return true;
            } else {
                Colony colony = getColony();
                if (colony == null) {
                    return false;
                } else {
                    for (Entry<String, Boolean> entry : equipmentType.getLocationAbilitiesRequired().entrySet()) {
                        if (colony.hasAbility(entry.getKey()) != entry.getValue()) {
                            return false;
                        }
                    }
                }
            }
        }
        int count = 1;
        for (EquipmentType oldType : equipment) {
            if (oldType == equipmentType) {
                count++;
            }
        }
        if (count > equipmentType.getMaximumCount()) {
            return false;
        }
        return true;
    }


, Instance #
frags: 
(startLine=188 endLine=206 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    if (tempUnit.canBeArmed()) {
                        if (tempUnit.isArmed()) {
                            menuItem = new JMenuItem(Messages.message("disarm"));
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.MUSKETS, 50);
                                menuItem = new JMenuItem(Messages.message("arm") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("arm"));
                            }
                        }
                        menuItem.setIcon(imageLibrary.getScaledGoodsImageIcon(Goods.MUSKETS, 0.66f));
                        menuItem.setActionCommand(String.valueOf(UnitLabel.ARM));
                        menuItem.addActionListener(unitLabel);
                        menu.add(menuItem);
                        separatorNeeded = true;
                    }

(startLine=208 endLine=226 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    if (tempUnit.canBeMounted()) {
                        if (tempUnit.isMounted()) {
                            menuItem = new JMenuItem(Messages.message("removeHorses"));
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.HORSES, 50);
                                menuItem = new JMenuItem(Messages.message("mount") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("mount"));
                            }
                        }
                        menuItem.setIcon(imageLibrary.getScaledGoodsImageIcon(Goods.HORSES, 0.66f));
                        menuItem.setActionCommand(String.valueOf(UnitLabel.MOUNT));
                        menuItem.addActionListener(unitLabel);
                        menu.add(menuItem);
                        separatorNeeded = true;
                    }

commonMethod: 
(startLine=777 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00340/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Returns true if the Unit, or its owner has the ability
     * identified by <code>id</code>.
     *
     * @param id a <code>String</code> value
     * @return a <code>boolean</code> value
     */
    public boolean hasAbility(String id) {
        ArrayList<Ability> result = new ArrayList<Ability>();
        result.add(getUnitType().getAbility(id));
        result.add(getOwner().getAbility(id));
        for (EquipmentType equipmentType : equipment) {
            result.add(equipmentType.getAbility(id));
        }
        Ability combinedResult = Ability.combine(result.toArray(new Ability[0]));
        if (combinedResult == null) {
            return false;
        } else {
            return combinedResult.getValue();
        }
    }


, Instance #
frags: 
(startLine=188 endLine=206 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    if (tempUnit.canBeArmed()) {
                        if (tempUnit.isArmed()) {
                            menuItem = new JMenuItem(Messages.message("disarm"));
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.MUSKETS, 50);
                                menuItem = new JMenuItem(Messages.message("arm") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("arm"));
                            }
                        }
                        menuItem.setIcon(imageLibrary.getScaledGoodsImageIcon(Goods.MUSKETS, 0.66f));
                        menuItem.setActionCommand(String.valueOf(UnitLabel.ARM));
                        menuItem.addActionListener(unitLabel);
                        menu.add(menuItem);
                        separatorNeeded = true;
                    }

(startLine=208 endLine=226 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    if (tempUnit.canBeMounted()) {
                        if (tempUnit.isMounted()) {
                            menuItem = new JMenuItem(Messages.message("removeHorses"));
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.HORSES, 50);
                                menuItem = new JMenuItem(Messages.message("mount") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("mount"));
                            }
                        }
                        menuItem.setIcon(imageLibrary.getScaledGoodsImageIcon(Goods.HORSES, 0.66f));
                        menuItem.setActionCommand(String.valueOf(UnitLabel.MOUNT));
                        menuItem.addActionListener(unitLabel);
                        menu.add(menuItem);
                        separatorNeeded = true;
                    }

commonMethod: 
(startLine=344 endLine=369 srcPath=/root/NewExperiment/freecolFilter/00340/src/net/sf/freecol/client/gui/panel/UnitLabel.java)
    public void updateIcon() {
        int unitIndex = parent.getGUI().getImageLibrary().getUnitGraphicsType(unit);
        setIcon(parent.getGUI().getImageLibrary().getUnitImageIcon(unitIndex));
        setDisabledIcon(parent.getGUI().getImageLibrary().getUnitImageIcon(unitIndex, true));

        Component uc = getParent();
        while (uc != null) {
            if (uc instanceof ColonyPanel) {
                if (unit.getColony() == null) {
                    parent.remove(uc);
                    parent.getClient().getActionManager().update();
                } else {
                    ((ColonyPanel) uc).reinitialize();
                }

                break;
            } else if (uc instanceof EuropePanel) {
                break;
            }

            uc = uc.getParent();
        }

        // repaint(0, 0, getWidth(), getHeight());
        // uc.refresh();
    }


, Instance #
frags: 
(startLine=188 endLine=206 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    if (tempUnit.canBeArmed()) {
                        if (tempUnit.isArmed()) {
                            menuItem = new JMenuItem(Messages.message("disarm"));
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.MUSKETS, 50);
                                menuItem = new JMenuItem(Messages.message("arm") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("arm"));
                            }
                        }
                        menuItem.setIcon(imageLibrary.getScaledGoodsImageIcon(Goods.MUSKETS, 0.66f));
                        menuItem.setActionCommand(String.valueOf(UnitLabel.ARM));
                        menuItem.addActionListener(unitLabel);
                        menu.add(menuItem);
                        separatorNeeded = true;
                    }

(startLine=208 endLine=226 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    if (tempUnit.canBeMounted()) {
                        if (tempUnit.isMounted()) {
                            menuItem = new JMenuItem(Messages.message("removeHorses"));
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.HORSES, 50);
                                menuItem = new JMenuItem(Messages.message("mount") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("mount"));
                            }
                        }
                        menuItem.setIcon(imageLibrary.getScaledGoodsImageIcon(Goods.HORSES, 0.66f));
                        menuItem.setActionCommand(String.valueOf(UnitLabel.MOUNT));
                        menuItem.addActionListener(unitLabel);
                        menu.add(menuItem);
                        separatorNeeded = true;
                    }

commonMethod: 
(startLine=2062 endLine=2069 srcPath=/root/NewExperiment/freecolFilter/00340/src/net/sf/freecol/common/model/Unit.java)
    public boolean equipmentCanBeBuilt(EquipmentType equipmentType) {
        for (AbstractGoods requiredGoods : equipmentType.getGoodsRequired()) {
            if (!canBeEquipped(requiredGoods.getType(), requiredGoods.getAmount())) {
                return false;
            }
        }
        return true;
    }


, Instance #
frags: 
(startLine=188 endLine=206 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    if (tempUnit.canBeArmed()) {
                        if (tempUnit.isArmed()) {
                            menuItem = new JMenuItem(Messages.message("disarm"));
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.MUSKETS, 50);
                                menuItem = new JMenuItem(Messages.message("arm") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("arm"));
                            }
                        }
                        menuItem.setIcon(imageLibrary.getScaledGoodsImageIcon(Goods.MUSKETS, 0.66f));
                        menuItem.setActionCommand(String.valueOf(UnitLabel.ARM));
                        menuItem.addActionListener(unitLabel);
                        menu.add(menuItem);
                        separatorNeeded = true;
                    }

(startLine=208 endLine=226 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                    if (tempUnit.canBeMounted()) {
                        if (tempUnit.isMounted()) {
                            menuItem = new JMenuItem(Messages.message("removeHorses"));
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.HORSES, 50);
                                menuItem = new JMenuItem(Messages.message("mount") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("mount"));
                            }
                        }
                        menuItem.setIcon(imageLibrary.getScaledGoodsImageIcon(Goods.HORSES, 0.66f));
                        menuItem.setActionCommand(String.valueOf(UnitLabel.MOUNT));
                        menuItem.addActionListener(unitLabel);
                        menu.add(menuItem);
                        separatorNeeded = true;
                    }

commonMethod: 
(startLine=2141 endLine=2204 srcPath=/root/NewExperiment/freecolFilter/00340/src/net/sf/freecol/client/control/InGameController.java)
    /**
     * Equips or unequips a <code>Unit</code> with a certain type of
     * <code>Goods</code>.
     * 
     * @param unit The <code>Unit</code>.
     * @param type an <code>EquipmentType</code> value
     * @param amount How many of these goods the unit should have.
     */
    public void equipUnit(Unit unit, EquipmentType type, int amount) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        if (amount == 0) {
            // no changes
            return;
        }

        Client client = freeColClient.getClient();
        Player myPlayer = freeColClient.getMyPlayer();

        Unit carrier = null;
        if (unit.getLocation() instanceof Unit) {
            carrier = (Unit) unit.getLocation();
            leaveShip(unit);
        }

        Element equipUnitElement = Message.createNewRootElement("equipUnit");
        equipUnitElement.setAttribute("unit", unit.getId());
        equipUnitElement.setAttribute("type", type.getId());
        equipUnitElement.setAttribute("amount", Integer.toString(amount));

        if (amount > 0) {
            for (AbstractGoods requiredGoods : type.getGoodsRequired()) {
                GoodsType goodsType = requiredGoods.getType();
                if (unit.isInEurope()) {
                    if (!myPlayer.canTrade(goodsType)) {
                        payArrears(goodsType);
                        if (!myPlayer.canTrade(goodsType)) {
                            return; // The user cancelled the action.
                        }
                    }
                }
            }
            for (int count = 0; count < amount; count++) {
                unit.equipWith(type);
            }
        } else {
            for (int count = 0; count > amount; count--) {
                unit.removeEquipment(type);
            }
        }

        freeColClient.getCanvas().updateGoldLabel();

        client.sendAndWait(equipUnitElement);

        if (unit.getLocation() instanceof Colony || unit.getLocation() instanceof Building
                || unit.getLocation() instanceof ColonyTile) {
            putOutsideColony(unit);
        } else if (carrier != null) {
            boardShip(unit, carrier);
        }
    }


, Instance #
frags: 
(startLine=191 endLine=200 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.MUSKETS, 50);
                                menuItem = new JMenuItem(Messages.message("arm") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("arm"));
                            }
                        }

(startLine=211 endLine=220 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.HORSES, 50);
                                menuItem = new JMenuItem(Messages.message("mount") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("mount"));
                            }
                        }

commonMethod: 
(startLine=777 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00340/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Returns true if the Unit, or its owner has the ability
     * identified by <code>id</code>.
     *
     * @param id a <code>String</code> value
     * @return a <code>boolean</code> value
     */
    public boolean hasAbility(String id) {
        ArrayList<Ability> result = new ArrayList<Ability>();
        result.add(getUnitType().getAbility(id));
        result.add(getOwner().getAbility(id));
        for (EquipmentType equipmentType : equipment) {
            result.add(equipmentType.getAbility(id));
        }
        Ability combinedResult = Ability.combine(result.toArray(new Ability[0]));
        if (combinedResult == null) {
            return false;
        } else {
            return combinedResult.getValue();
        }
    }


, Instance #
frags: 
(startLine=191 endLine=200 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.MUSKETS, 50);
                                menuItem = new JMenuItem(Messages.message("arm") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("arm"));
                            }
                        }

(startLine=211 endLine=220 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.HORSES, 50);
                                menuItem = new JMenuItem(Messages.message("mount") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("mount"));
                            }
                        }

commonMethod: 
(startLine=344 endLine=369 srcPath=/root/NewExperiment/freecolFilter/00340/src/net/sf/freecol/client/gui/panel/UnitLabel.java)
    public void updateIcon() {
        int unitIndex = parent.getGUI().getImageLibrary().getUnitGraphicsType(unit);
        setIcon(parent.getGUI().getImageLibrary().getUnitImageIcon(unitIndex));
        setDisabledIcon(parent.getGUI().getImageLibrary().getUnitImageIcon(unitIndex, true));

        Component uc = getParent();
        while (uc != null) {
            if (uc instanceof ColonyPanel) {
                if (unit.getColony() == null) {
                    parent.remove(uc);
                    parent.getClient().getActionManager().update();
                } else {
                    ((ColonyPanel) uc).reinitialize();
                }

                break;
            } else if (uc instanceof EuropePanel) {
                break;
            }

            uc = uc.getParent();
        }

        // repaint(0, 0, getWidth(), getHeight());
        // uc.refresh();
    }


, Instance #
frags: 
(startLine=191 endLine=200 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.MUSKETS, 50);
                                menuItem = new JMenuItem(Messages.message("arm") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("arm"));
                            }
                        }

(startLine=211 endLine=220 srcPath=/root/NewExperiment/freecolFilter/00339/src/net/sf/freecol/client/gui/panel/DragListener.java)
                        } else {
                            if (tempUnit.getTile() == null) { // -> in Europe
                                int price = tempUnit.getOwner().getMarket().getBidPrice(Goods.HORSES, 50);
                                menuItem = new JMenuItem(Messages.message("mount") + " (" +
                                                         Messages.message("goldAmount", "%amount%",
                                                                          String.valueOf(price)) + ")");
                            } else {
                                menuItem = new JMenuItem(Messages.message("mount"));
                            }
                        }

commonMethod: 
(startLine=2141 endLine=2204 srcPath=/root/NewExperiment/freecolFilter/00340/src/net/sf/freecol/client/control/InGameController.java)
    /**
     * Equips or unequips a <code>Unit</code> with a certain type of
     * <code>Goods</code>.
     * 
     * @param unit The <code>Unit</code>.
     * @param type an <code>EquipmentType</code> value
     * @param amount How many of these goods the unit should have.
     */
    public void equipUnit(Unit unit, EquipmentType type, int amount) {
        if (freeColClient.getGame().getCurrentPlayer() != freeColClient.getMyPlayer()) {
            freeColClient.getCanvas().showInformationMessage("notYourTurn");
            return;
        }
        if (amount == 0) {
            // no changes
            return;
        }

        Client client = freeColClient.getClient();
        Player myPlayer = freeColClient.getMyPlayer();

        Unit carrier = null;
        if (unit.getLocation() instanceof Unit) {
            carrier = (Unit) unit.getLocation();
            leaveShip(unit);
        }

        Element equipUnitElement = Message.createNewRootElement("equipUnit");
        equipUnitElement.setAttribute("unit", unit.getId());
        equipUnitElement.setAttribute("type", type.getId());
        equipUnitElement.setAttribute("amount", Integer.toString(amount));

        if (amount > 0) {
            for (AbstractGoods requiredGoods : type.getGoodsRequired()) {
                GoodsType goodsType = requiredGoods.getType();
                if (unit.isInEurope()) {
                    if (!myPlayer.canTrade(goodsType)) {
                        payArrears(goodsType);
                        if (!myPlayer.canTrade(goodsType)) {
                            return; // The user cancelled the action.
                        }
                    }
                }
            }
            for (int count = 0; count < amount; count++) {
                unit.equipWith(type);
            }
        } else {
            for (int count = 0; count > amount; count--) {
                unit.removeEquipment(type);
            }
        }

        freeColClient.getCanvas().updateGoldLabel();

        client.sendAndWait(equipUnitElement);

        if (unit.getLocation() instanceof Colony || unit.getLocation() instanceof Building
                || unit.getLocation() instanceof ColonyTile) {
            putOutsideColony(unit);
        } else if (carrier != null) {
            boardShip(unit, carrier);
        }
    }


, Instance #
frags: 
(startLine=120 endLine=148 srcPath=/root/NewExperiment/freecolFilter/00347/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
        if (!hasGift()) {
            if (getUnit().getTile() != getUnit().getIndianSettlement().getTile()) {
                // Move to the owning settlement:
                int r = moveTowards(connection, getUnit().getIndianSettlement().getTile());
                if (r >= 0) {
                    final int mt = getUnit().getMoveType(r);
                    if (mt != Unit.ILLEGAL_MOVE && mt != Unit.ATTACK) {
                        move(connection, r);
                    }
                }
            } else {
                // Load the goods:
                ArrayList<Goods> goodsList = new ArrayList<Goods>();
                GoodsContainer gc = getUnit().getIndianSettlement().getGoodsContainer();
                // Come back to clean up - takes SUGAR, TOBACCO, COTTON, FURS
                for (int i = 1; i <= 4; i++) {
                    if (gc.getGoodsCount(i) >= IndianSettlement.KEEP_RAW_MATERIAL + 25) {
                        goodsList.add(new Goods(getGame(), getUnit().getIndianSettlement(), 
                                FreeCol.getSpecification().getGoodsType(i),
                                getRandom().nextInt(15) + 10));
                    }
                }

                if (goodsList.size() > 0) {
                    Goods goods = goodsList.get(getRandom().nextInt(goodsList.size()));
                    goods.setLocation(getUnit());
                }
            }
        } else {

(startLine=132 endLine=160 srcPath=/root/NewExperiment/freecolFilter/00347/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
        if (!hasGift()) {
            if (getUnit().getTile() != getUnit().getIndianSettlement().getTile()) {
                // Move to the owning settlement:
                int r = moveTowards(connection, getUnit().getIndianSettlement().getTile());
                if (r >= 0) {
                    final int mt = getUnit().getMoveType(r);
                    if (mt != Unit.ILLEGAL_MOVE && mt != Unit.ATTACK) {
                        move(connection, r);
                    }
                }
            } else {
                // Load the goods:
                List<Goods> goodsList = new ArrayList<Goods>();
                GoodsContainer gc = getUnit().getIndianSettlement().getGoodsContainer();
                // Come back to change - takes SUGAR, TOBACCO, COTTON, FURS
                for (int i = 1; i <= 4; i++) {
                    if (gc.getGoodsCount(i) >= IndianSettlement.KEEP_RAW_MATERIAL + 25) {
                        goodsList.add(new Goods(getGame(), getUnit().getIndianSettlement(),
                                FreeCol.getSpecification().getGoodsType(i),
                                getRandom().nextInt(15) + 10));
                    }
                }

                if (goodsList.size() > 0) {
                    Goods goods = goodsList.get(getRandom().nextInt(goodsList.size()));
                    goods.setLocation(getUnit());
                }
            }
        } else {

commonMethod: 
(startLine=162 endLine=169 srcPath=/root/NewExperiment/freecolFilter/00348/src/net/sf/freecol/server/ai/mission/Mission.java)
    protected void moveButDontAttack(Connection connection, int direction) {
        if (direction >= 0) {
            final MoveType mt = getUnit().getMoveType(direction);
            if (mt != MoveType.ILLEGAL_MOVE && mt != MoveType.ATTACK) {
                move(connection, direction);                    
            }
        }
    }


, Instance #
frags: 
(startLine=226 endLine=247 srcPath=/root/NewExperiment/freecolFilter/00348/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
        while (unit.getMovesLeft() > 0) {
            int direction = (int) (Math.random() * 8);
            int j;
            for (j = 8; j > 0
                    && ((unit.getGame().getMap().getNeighbourOrNull(direction, thisTile) == null) || (unit
                            .getMoveType(direction) != MoveType.MOVE)); j--) {
                direction = (int) (Math.random() * 8);
            }
            if (j == 0)
                break;
            thisTile = unit.getGame().getMap().getNeighbourOrNull(direction, thisTile);

            Element moveElement = Message.createNewRootElement("move");
            moveElement.setAttribute("unit", unit.getId());
            moveElement.setAttribute("direction", Integer.toString(direction));

            try {
                connection.sendAndWait(moveElement);
            } catch (IOException e) {
                logger.warning("Could not send \"move\"-message!");
            }
        }

(startLine=181 endLine=204 srcPath=/root/NewExperiment/freecolFilter/00348/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
        while (unit.getMovesLeft() > 0) {
            int direction = (int) (Math.random() * 8);
            int j;
            for (j = 8; j > 0
                    && ((unit.getGame().getMap().getNeighbourOrNull(direction, thisTile) == null)
                    || (unit.getMoveType(direction) == MoveType.ILLEGAL_MOVE)
                    || (unit.getMoveType(direction) == MoveType.ATTACK)
                    ); j--) {
                direction = (int) (Math.random() * 8);
            }
            if (j == 0)
                break;
            thisTile = unit.getGame().getMap().getNeighbourOrNull(direction, thisTile);

            Element moveElement = Message.createNewRootElement("move");
            moveElement.setAttribute("unit", unit.getId());
            moveElement.setAttribute("direction", Integer.toString(direction));

            try {
                connection.sendAndWait(moveElement);
            } catch (IOException e) {
                logger.warning("Could not send \"move\"-message!");
            }
        }

(startLine=94 endLine=120 srcPath=/root/NewExperiment/freecolFilter/00348/src/net/sf/freecol/server/ai/mission/UnitWanderMission.java)
    public void doMission(Connection connection) {
        Tile thisTile = getUnit().getTile();
        Unit unit = getUnit();
        
        while(unit.getMovesLeft() > 0) {
            int direction = (int) (Math.random() * 8);
            int j;
            for (j = 8; j > 0 && ((unit.getGame().getMap().getNeighbourOrNull(direction, thisTile) == null)
                    || (unit.getMoveType(direction) != MoveType.MOVE)
                        && (unit.getMoveType(direction) != MoveType.DISEMBARK));
                    j--) {
                direction = (int) (Math.random() * 8);
            }
            if (j == 0) break;
            thisTile = unit.getGame().getMap().getNeighbourOrNull(direction, thisTile);

            Element moveElement = Message.createNewRootElement("move");
            moveElement.setAttribute("unit", unit.getId());
            moveElement.setAttribute("direction", Integer.toString(direction));
            
            try {
                connection.sendAndWait(moveElement);
            } catch (IOException e) {
                logger.warning("Could not send \"move\"-message!");
            }
        }
    }

commonMethod: 
(startLine=143 endLine=171 srcPath=/root/NewExperiment/freecolFilter/00349/src/net/sf/freecol/server/ai/mission/Mission.java)
    protected void moveRandomly(Connection connection) {
        Tile thisTile = getUnit().getTile();
        Unit unit = getUnit();
        Direction[] randomDirections = unit.getGame().getMap().getRandomDirectionArray();
        while (unit.getMovesLeft() > 0) {
            Direction direction = Direction.N;
            int j;
            for (j = 0; j < randomDirections.length; j++) {
                direction = randomDirections[j];
                if (unit.getGame().getMap().getNeighbourOrNull(direction, thisTile) != null &&
                    unit.getMoveType(direction) == MoveType.MOVE) {
                    break;
                }
            }
            if (j == randomDirections.length)
                break;
            thisTile = unit.getGame().getMap().getNeighbourOrNull(direction, thisTile);

            Element moveElement = Message.createNewRootElement("move");
            moveElement.setAttribute("unit", unit.getId());
            moveElement.setAttribute("direction", direction.toString());

            try {
                connection.sendAndWait(moveElement);
            } catch (IOException e) {
                logger.warning("Could not send \"move\"-message!");
            }
        }
    }


, Instance #
frags: 
(startLine=662 endLine=723 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
    private AIUnit getUnitInEurope(Connection connection, UnitType unitType) {
        AIPlayer aiPlayer = (AIPlayer) getAIMain().getAIObject(getUnit().getOwner().getId());
        Player player = aiPlayer.getPlayer();
        Europe europe = player.getEurope();

        if (!(getUnit().getLocation() instanceof Europe)) {
            throw new IllegalStateException("Carrier not in Europe");
        }

        // Check if the given type of unit appear on the docks:
        Iterator<Unit> ui = europe.getUnitIterator();
        while (ui.hasNext()) {
            Unit u = ui.next();
            if (unitType == null || unitType == u.getType()) {
                return (AIUnit) getAIMain().getAIObject(u.getId());
            }
        }

        // Try recruiting the unit:
        // TODO: Check if it will be cheaper to train the unit instead.
        if (player.getGold() >= player.getRecruitPrice()) {
            for (int i = 0; i < 3; i++) {
                // Note, used to be 1-3 but the method expects 0-2
                if (europe.getRecruitable(i) == unitType) {
                    Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
                    recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(i));
                    try {
                        Element reply = connection.ask(recruitUnitInEuropeElement);
                        if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                            return (AIUnit) getAIMain().getAIObject(
                                    ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                        } else {
                            logger.warning("Could not recruit the specified unit in europe.");
                            continue;
                        }
                    } catch (IOException e) {
                        logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
                    }
                }
            }
        }

        // Try training the unit:
        if (unitType.hasPrice() && europe.getUnitPrice(unitType) >= 0 &&
                player.getGold() >= europe.getUnitPrice(unitType)) {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", Integer.toString(unitType.getIndex()));
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
            }
        }

        return null;
    }

(startLine=732 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
    private AIUnit getCheapestUnitInEurope(Connection connection) {
        AIPlayer aiPlayer = (AIPlayer) getAIMain().getAIObject(getUnit().getOwner().getId());
        Player player = aiPlayer.getPlayer();
        Europe europe = player.getEurope();

        if (!(getUnit().getLocation() instanceof Europe)) {
            throw new IllegalStateException("Carrier not in Europe");
        }

        // Check if there are any units on the docks:
        Iterator<Unit> ui = europe.getUnitIterator();
        while (ui.hasNext()) {
            Unit u = ui.next();
            if (!u.isCarrier() && ((AIUnit) getAIMain().getAIObject(u)).getTransport() == null) {
                return (AIUnit) getAIMain().getAIObject(u.getId());
            }
        }

        int priceTrained = 0;
        UnitType cheapestTrained = null;
        List<UnitType> unitTypes = FreeCol.getSpecification().getUnitTypesTrainedInEurope();
        for (UnitType unitType : unitTypes) {
            int price = europe.getUnitPrice(unitType);
            if (cheapestTrained == null || price < priceTrained) {
            	cheapestTrained = unitType;
            	priceTrained = price;
            }
        }
        // Try recruiting the unit:
        if (player.getGold() >= player.getRecruitPrice() && cheapestTrained != null
                && player.getRecruitPrice() < priceTrained) {
            Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
            // TODO: Take the best unit (Seasoned scout, pioneer, soldier etc):
            recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(1));
            try {
                Element reply = connection.ask(recruitUnitInEuropeElement);
                if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not recruit the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
            }
        }

        // Try training the unit:
        if (cheapestTrained != null && player.getGold() >= priceTrained) {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", Integer.toString(cheapestTrained.getIndex()));
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
            }
        }

        return null;
    }

commonMethod: 
(startLine=348 endLine=373 srcPath=/root/NewExperiment/freecolFilter/00366/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Ask the server to recruit a unit in Europe on behalf of the AIPlayer
     */
    public AIUnit recruitAIUnitInEurope(int slot) {
        
        AIUnit unit = null;
        Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
        recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(slot));
        try {
            Element reply = this.getConnection().ask(recruitUnitInEuropeElement);
            if (reply!=null && reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not recruit the specified AI unit in europe");
                }
                return unit;
            } else {
                logger.warning("Could not recruit the specified AI unit in europe.");
            }
        } catch (IOException e) {
            logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
        }
        return unit;
    }


, Instance #
frags: 
(startLine=662 endLine=723 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
    private AIUnit getUnitInEurope(Connection connection, UnitType unitType) {
        AIPlayer aiPlayer = (AIPlayer) getAIMain().getAIObject(getUnit().getOwner().getId());
        Player player = aiPlayer.getPlayer();
        Europe europe = player.getEurope();

        if (!(getUnit().getLocation() instanceof Europe)) {
            throw new IllegalStateException("Carrier not in Europe");
        }

        // Check if the given type of unit appear on the docks:
        Iterator<Unit> ui = europe.getUnitIterator();
        while (ui.hasNext()) {
            Unit u = ui.next();
            if (unitType == null || unitType == u.getType()) {
                return (AIUnit) getAIMain().getAIObject(u.getId());
            }
        }

        // Try recruiting the unit:
        // TODO: Check if it will be cheaper to train the unit instead.
        if (player.getGold() >= player.getRecruitPrice()) {
            for (int i = 0; i < 3; i++) {
                // Note, used to be 1-3 but the method expects 0-2
                if (europe.getRecruitable(i) == unitType) {
                    Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
                    recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(i));
                    try {
                        Element reply = connection.ask(recruitUnitInEuropeElement);
                        if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                            return (AIUnit) getAIMain().getAIObject(
                                    ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                        } else {
                            logger.warning("Could not recruit the specified unit in europe.");
                            continue;
                        }
                    } catch (IOException e) {
                        logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
                    }
                }
            }
        }

        // Try training the unit:
        if (unitType.hasPrice() && europe.getUnitPrice(unitType) >= 0 &&
                player.getGold() >= europe.getUnitPrice(unitType)) {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", Integer.toString(unitType.getIndex()));
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
            }
        }

        return null;
    }

(startLine=732 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
    private AIUnit getCheapestUnitInEurope(Connection connection) {
        AIPlayer aiPlayer = (AIPlayer) getAIMain().getAIObject(getUnit().getOwner().getId());
        Player player = aiPlayer.getPlayer();
        Europe europe = player.getEurope();

        if (!(getUnit().getLocation() instanceof Europe)) {
            throw new IllegalStateException("Carrier not in Europe");
        }

        // Check if there are any units on the docks:
        Iterator<Unit> ui = europe.getUnitIterator();
        while (ui.hasNext()) {
            Unit u = ui.next();
            if (!u.isCarrier() && ((AIUnit) getAIMain().getAIObject(u)).getTransport() == null) {
                return (AIUnit) getAIMain().getAIObject(u.getId());
            }
        }

        int priceTrained = 0;
        UnitType cheapestTrained = null;
        List<UnitType> unitTypes = FreeCol.getSpecification().getUnitTypesTrainedInEurope();
        for (UnitType unitType : unitTypes) {
            int price = europe.getUnitPrice(unitType);
            if (cheapestTrained == null || price < priceTrained) {
            	cheapestTrained = unitType;
            	priceTrained = price;
            }
        }
        // Try recruiting the unit:
        if (player.getGold() >= player.getRecruitPrice() && cheapestTrained != null
                && player.getRecruitPrice() < priceTrained) {
            Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
            // TODO: Take the best unit (Seasoned scout, pioneer, soldier etc):
            recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(1));
            try {
                Element reply = connection.ask(recruitUnitInEuropeElement);
                if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not recruit the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
            }
        }

        // Try training the unit:
        if (cheapestTrained != null && player.getGold() >= priceTrained) {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", Integer.toString(cheapestTrained.getIndex()));
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
            }
        }

        return null;
    }

commonMethod: 
(startLine=317 endLine=345 srcPath=/root/NewExperiment/freecolFilter/00366/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Ask the server to train a unit in Europe on behalf of the AIPlayer
     */
    public AIUnit trainAIUnitInEurope(UnitType unitType) {
        
        if (unitType==null) {
            throw new IllegalArgumentException("Invalid UnitType.");
        }
        
        AIUnit unit = null;
        try {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", unitType.getId());
            Element reply = this.getConnection().ask(trainUnitInEuropeElement);
            if (reply!=null && reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not train the specified AI unit "+unitType.getId()+" in europe.");
                }
            } else {
                logger.warning("Could not train the specified AI unit "+unitType.getId()+" in europe.");
            }
        } catch (IOException e) {
            logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
        }
        return unit;
    }


, Instance #
frags: 
(startLine=682 endLine=702 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
        if (player.getGold() >= player.getRecruitPrice()) {
            for (int i = 0; i < 3; i++) {
                // Note, used to be 1-3 but the method expects 0-2
                if (europe.getRecruitable(i) == unitType) {
                    Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
                    recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(i));
                    try {
                        Element reply = connection.ask(recruitUnitInEuropeElement);
                        if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                            return (AIUnit) getAIMain().getAIObject(
                                    ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                        } else {
                            logger.warning("Could not recruit the specified unit in europe.");
                            continue;
                        }
                    } catch (IOException e) {
                        logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
                    }
                }
            }
        }

(startLine=706 endLine=720 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                player.getGold() >= europe.getUnitPrice(unitType)) {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", Integer.toString(unitType.getIndex()));
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
            }
        }

(startLine=762 endLine=777 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                && player.getRecruitPrice() < priceTrained) {
            Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
            // TODO: Take the best unit (Seasoned scout, pioneer, soldier etc):
            recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(1));
            try {
                Element reply = connection.ask(recruitUnitInEuropeElement);
                if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not recruit the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
            }
        }

(startLine=780 endLine=794 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
        if (cheapestTrained != null && player.getGold() >= priceTrained) {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", Integer.toString(cheapestTrained.getIndex()));
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
            }
        }

commonMethod: 
(startLine=348 endLine=373 srcPath=/root/NewExperiment/freecolFilter/00366/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Ask the server to recruit a unit in Europe on behalf of the AIPlayer
     */
    public AIUnit recruitAIUnitInEurope(int slot) {
        
        AIUnit unit = null;
        Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
        recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(slot));
        try {
            Element reply = this.getConnection().ask(recruitUnitInEuropeElement);
            if (reply!=null && reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not recruit the specified AI unit in europe");
                }
                return unit;
            } else {
                logger.warning("Could not recruit the specified AI unit in europe.");
            }
        } catch (IOException e) {
            logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
        }
        return unit;
    }


, Instance #
frags: 
(startLine=682 endLine=702 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
        if (player.getGold() >= player.getRecruitPrice()) {
            for (int i = 0; i < 3; i++) {
                // Note, used to be 1-3 but the method expects 0-2
                if (europe.getRecruitable(i) == unitType) {
                    Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
                    recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(i));
                    try {
                        Element reply = connection.ask(recruitUnitInEuropeElement);
                        if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                            return (AIUnit) getAIMain().getAIObject(
                                    ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                        } else {
                            logger.warning("Could not recruit the specified unit in europe.");
                            continue;
                        }
                    } catch (IOException e) {
                        logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
                    }
                }
            }
        }

(startLine=706 endLine=720 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                player.getGold() >= europe.getUnitPrice(unitType)) {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", Integer.toString(unitType.getIndex()));
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
            }
        }

(startLine=762 endLine=777 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                && player.getRecruitPrice() < priceTrained) {
            Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
            // TODO: Take the best unit (Seasoned scout, pioneer, soldier etc):
            recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(1));
            try {
                Element reply = connection.ask(recruitUnitInEuropeElement);
                if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not recruit the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
            }
        }

(startLine=780 endLine=794 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
        if (cheapestTrained != null && player.getGold() >= priceTrained) {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", Integer.toString(cheapestTrained.getIndex()));
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {
                logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
            }
        }

commonMethod: 
(startLine=317 endLine=345 srcPath=/root/NewExperiment/freecolFilter/00366/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Ask the server to train a unit in Europe on behalf of the AIPlayer
     */
    public AIUnit trainAIUnitInEurope(UnitType unitType) {
        
        if (unitType==null) {
            throw new IllegalArgumentException("Invalid UnitType.");
        }
        
        AIUnit unit = null;
        try {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", unitType.getId());
            Element reply = this.getConnection().ask(trainUnitInEuropeElement);
            if (reply!=null && reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not train the specified AI unit "+unitType.getId()+" in europe.");
                }
            } else {
                logger.warning("Could not train the specified AI unit "+unitType.getId()+" in europe.");
            }
        } catch (IOException e) {
            logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
        }
        return unit;
    }


, Instance #
frags: 
(startLine=688 endLine=697 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    try {
                        Element reply = connection.ask(recruitUnitInEuropeElement);
                        if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                            return (AIUnit) getAIMain().getAIObject(
                                    ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                        } else {
                            logger.warning("Could not recruit the specified unit in europe.");
                            continue;
                        }
                    } catch (IOException e) {

(startLine=709 endLine=717 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {

(startLine=766 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            try {
                Element reply = connection.ask(recruitUnitInEuropeElement);
                if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not recruit the specified unit in europe.");
                }
            } catch (IOException e) {

(startLine=783 endLine=791 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {

commonMethod: 
(startLine=348 endLine=373 srcPath=/root/NewExperiment/freecolFilter/00366/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Ask the server to recruit a unit in Europe on behalf of the AIPlayer
     */
    public AIUnit recruitAIUnitInEurope(int slot) {
        
        AIUnit unit = null;
        Element recruitUnitInEuropeElement = Message.createNewRootElement("recruitUnitInEurope");
        recruitUnitInEuropeElement.setAttribute("slot", Integer.toString(slot));
        try {
            Element reply = this.getConnection().ask(recruitUnitInEuropeElement);
            if (reply!=null && reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not recruit the specified AI unit in europe");
                }
                return unit;
            } else {
                logger.warning("Could not recruit the specified AI unit in europe.");
            }
        } catch (IOException e) {
            logger.warning("Could not send \"recruitUnitInEurope\"-message to the server.");
        }
        return unit;
    }


, Instance #
frags: 
(startLine=688 endLine=697 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    try {
                        Element reply = connection.ask(recruitUnitInEuropeElement);
                        if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                            return (AIUnit) getAIMain().getAIObject(
                                    ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                        } else {
                            logger.warning("Could not recruit the specified unit in europe.");
                            continue;
                        }
                    } catch (IOException e) {

(startLine=709 endLine=717 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {

(startLine=766 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            try {
                Element reply = connection.ask(recruitUnitInEuropeElement);
                if (reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not recruit the specified unit in europe.");
                }
            } catch (IOException e) {

(startLine=783 endLine=791 srcPath=/root/NewExperiment/freecolFilter/00365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
            try {
                Element reply = connection.ask(trainUnitInEuropeElement);
                if (reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                    return (AIUnit) getAIMain().getAIObject(
                            ((Element) reply.getChildNodes().item(0)).getAttribute("ID"));
                } else {
                    logger.warning("Could not train the specified unit in europe.");
                }
            } catch (IOException e) {

commonMethod: 
(startLine=317 endLine=345 srcPath=/root/NewExperiment/freecolFilter/00366/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Ask the server to train a unit in Europe on behalf of the AIPlayer
     */
    public AIUnit trainAIUnitInEurope(UnitType unitType) {
        
        if (unitType==null) {
            throw new IllegalArgumentException("Invalid UnitType.");
        }
        
        AIUnit unit = null;
        try {
            Element trainUnitInEuropeElement = Message.createNewRootElement("trainUnitInEurope");
            trainUnitInEuropeElement.setAttribute("unitType", unitType.getId());
            Element reply = this.getConnection().ask(trainUnitInEuropeElement);
            if (reply!=null && reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not train the specified AI unit "+unitType.getId()+" in europe.");
                }
            } else {
                logger.warning("Could not train the specified AI unit "+unitType.getId()+" in europe.");
            }
        } catch (IOException e) {
            logger.warning("Could not send \"trainUnitInEurope\"-message to the server.");
        }
        return unit;
    }


, Instance #
frags: 
(startLine=195 endLine=212 srcPath=/root/NewExperiment/freecolFilter/00373/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if (attacker.isNaval()) {
            int goodsCount = attacker.getGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                // TODO: shouldn't this be -cargo/capacity?
                percentage = -12.5f * goodsCount;
                result.add(new Modifier("modifiers.cargoPenalty", percentage, Modifier.Type.PERCENTAGE));
                totalPercentage += percentage;
            }
            if (attacker.hasAbility("model.ability.piracy")) {
                Modifier piracyBonus = attacker.getModifier("model.modifier.piracyBonus");
                if (piracyBonus != null) {
                    // Drake grants 50% power bonus (in colonization gives for attack and defence)
                    result.add(piracyBonus);
                    totalPercentage += piracyBonus.getValue();
                }
            }
        } else {

(startLine=356 endLine=373 srcPath=/root/NewExperiment/freecolFilter/00373/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if (defender.isNaval()) {
            int goodsCount = defender.getVisibleGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                // TODO: shouldn't this be -cargo/capacity?
                percentage =  -12.5f * goodsCount;
                result.add(new Modifier("modifiers.cargoPenalty", percentage, Modifier.Type.PERCENTAGE));
                totalPercentage += percentage;
            }
            if (defender.hasAbility("model.ability.piracy")) {
                Modifier piracyBonus = defender.getModifier("model.modifier.piracyBonus");
                if (piracyBonus != null) {
                    // Drake grants 50% power bonus (in colonization gives for attack and defence)
                    result.add(piracyBonus);
                    totalPercentage += piracyBonus.getValue();
                }
            }
        } else {

commonMethod: 
(startLine=151 endLine=159 srcPath=/root/NewExperiment/freecolFilter/00374/src/net/sf/freecol/common/model/FeatureContainer.java)
    /**
     * Returns a Set of Abilities with the given ID.
     *
     * @param id a <code>String</code> value
     * @return a <code>Set<Feature></code> value
     */
    public Set<Modifier> getModifierSet(String id) {
        return getModifierSet(id, null, null);
    }


, Instance #
frags: 
(startLine=195 endLine=212 srcPath=/root/NewExperiment/freecolFilter/00373/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if (attacker.isNaval()) {
            int goodsCount = attacker.getGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                // TODO: shouldn't this be -cargo/capacity?
                percentage = -12.5f * goodsCount;
                result.add(new Modifier("modifiers.cargoPenalty", percentage, Modifier.Type.PERCENTAGE));
                totalPercentage += percentage;
            }
            if (attacker.hasAbility("model.ability.piracy")) {
                Modifier piracyBonus = attacker.getModifier("model.modifier.piracyBonus");
                if (piracyBonus != null) {
                    // Drake grants 50% power bonus (in colonization gives for attack and defence)
                    result.add(piracyBonus);
                    totalPercentage += piracyBonus.getValue();
                }
            }
        } else {

(startLine=356 endLine=373 srcPath=/root/NewExperiment/freecolFilter/00373/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if (defender.isNaval()) {
            int goodsCount = defender.getVisibleGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                // TODO: shouldn't this be -cargo/capacity?
                percentage =  -12.5f * goodsCount;
                result.add(new Modifier("modifiers.cargoPenalty", percentage, Modifier.Type.PERCENTAGE));
                totalPercentage += percentage;
            }
            if (defender.hasAbility("model.ability.piracy")) {
                Modifier piracyBonus = defender.getModifier("model.modifier.piracyBonus");
                if (piracyBonus != null) {
                    // Drake grants 50% power bonus (in colonization gives for attack and defence)
                    result.add(piracyBonus);
                    totalPercentage += piracyBonus.getValue();
                }
            }
        } else {

commonMethod: 
(startLine=327 endLine=334 srcPath=/root/NewExperiment/freecolFilter/00374/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Get the <code>Equipment</code> value.
     *
     * @return a <code>List<EquipmentType></code> value
     */
    public final List<EquipmentType> getEquipment() {
        return equipment;
    }


, Instance #
frags: 
(startLine=195 endLine=212 srcPath=/root/NewExperiment/freecolFilter/00373/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if (attacker.isNaval()) {
            int goodsCount = attacker.getGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                // TODO: shouldn't this be -cargo/capacity?
                percentage = -12.5f * goodsCount;
                result.add(new Modifier("modifiers.cargoPenalty", percentage, Modifier.Type.PERCENTAGE));
                totalPercentage += percentage;
            }
            if (attacker.hasAbility("model.ability.piracy")) {
                Modifier piracyBonus = attacker.getModifier("model.modifier.piracyBonus");
                if (piracyBonus != null) {
                    // Drake grants 50% power bonus (in colonization gives for attack and defence)
                    result.add(piracyBonus);
                    totalPercentage += piracyBonus.getValue();
                }
            }
        } else {

(startLine=356 endLine=373 srcPath=/root/NewExperiment/freecolFilter/00373/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        if (defender.isNaval()) {
            int goodsCount = defender.getVisibleGoodsCount();
            if (goodsCount > 0) {
                // -12.5% penalty for every unit of cargo.
                // TODO: shouldn't this be -cargo/capacity?
                percentage =  -12.5f * goodsCount;
                result.add(new Modifier("modifiers.cargoPenalty", percentage, Modifier.Type.PERCENTAGE));
                totalPercentage += percentage;
            }
            if (defender.hasAbility("model.ability.piracy")) {
                Modifier piracyBonus = defender.getModifier("model.modifier.piracyBonus");
                if (piracyBonus != null) {
                    // Drake grants 50% power bonus (in colonization gives for attack and defence)
                    result.add(piracyBonus);
                    totalPercentage += piracyBonus.getValue();
                }
            }
        } else {

commonMethod: 
(startLine=788 endLine=806 srcPath=/root/NewExperiment/freecolFilter/00374/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Get a modifier that applies to this Unit.
     *
     * @param id a <code>String</code> value
     * @return a <code>Modifier</code> value
     */
    public Set<Modifier> getModifierSet(String id) {
        Set<Modifier> result = new HashSet<Modifier>();
        // UnitType modifiers always apply
        result.addAll(unitType.getFeatureContainer().getModifierSet(id));
        // the player's modifiers may not apply
        result.addAll(getOwner().getFeatureContainer()
                      .getModifierSet(id, unitType, getGame().getTurn()));
        // EquipmentType modifiers always apply
        for (EquipmentType equipmentType : equipment) {
            result.addAll(equipmentType.getFeatureContainer().getModifierSet(id));
        }
        return result;
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=1616 endLine=1634 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/client/gui/Canvas.java)
    /**
     * Displays the <code>EuropePanel</code>.
     * 
     * @see EuropePanel
     */
    public void showEuropePanel() {
        closeMenus();

        if (freeColClient.getGame() == null) {
            errorMessage("europe.noGame");
        } else {
            europePanel.initialize(freeColClient.getMyPlayer().getEurope(), freeColClient.getGame());
            JInternalFrame f = addAsSimpleFrame(europePanel);
            f.setBorder(null);
            f.setSize(getWidth(), getHeight() - getMenuBarHeight());
            f.setLocation(0, getMenuBarHeight());
            f.moveToBack();
        }
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=666 endLine=675 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
    private JButton createButton(String name, ActionListener listener) {
        JButton button = new JButton(name);
        button.setMargin(new Insets(0, 0, 0, 0));
        button.setOpaque(false);
        button.setHorizontalAlignment(SwingConstants.LEADING);
        button.setForeground(LINK_COLOR);
        button.setBorder(LEFTCELLBORDER);
        button.addActionListener(listener);
        return button;
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=1172 endLine=1180 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/client/gui/ImageLibrary.java)
    /**
     * Returns the goods-image for a goods type.
     * 
     * @param g The type of the goods-image to return.
     * @return The goods-image at the given index.
     */
    public ImageIcon getGoodsImageIcon(GoodsType g) {
        return goods.get(g.getId());
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=304 endLine=319 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns the building for producing the given type of goods.
     * 
     * @param goodsType The type of goods.
     * @return The <code>Building</code> which produces the given type of
     *         goods, or <code>null</code> if such a building cannot be found.
     */
    public Building getBuildingForProducing(GoodsType goodsType) {
        // TODO: it should search for more than one building?
        for (Building building : buildingMap.values()) {
            if (building.getGoodsOutputType() == goodsType) {
                return building;
            }
        }
        return null;
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=589 endLine=597 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
    private JLabel createNumberLabel(int number, String toolTipKey) {
        JLabel label = new JLabel(String.valueOf(number));
        label.setHorizontalAlignment(SwingConstants.TRAILING);
        label.setBorder(CELLBORDER);
        if (toolTipKey != null) {
            label.setToolTipText(Messages.message(toolTipKey));
        }
        return label;
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=200 endLine=218 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/client/gui/panel/LabourData.java)
        /**
         * in the summary for all unit types, some rows are skipped
         *
         * @return the rows to display the unit data
         */
        public int getRowCount() {
            boolean isSummary = getUnitData().isSummary();

            int rows = 0;
            if (workingProfessionals.getColonists() > 0) rows++;
            if (workingAmateurs > 0) rows++;
            if (!isSummary && otherWorkingAmateurs.getColonists() > 0) rows++;
            if (teachers > 0) rows++;
            if (students > 0) rows++;
            if (!isSummary && otherStudents > 0) rows++;
            if (notWorking > 0) rows++;

            return rows;
        }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=386 endLine=393 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/common/model/Colony.java)
    public Building getBuilding(String ability) {
        for (Building building : buildingMap.values()) {
            if (building.getType().hasAbility(ability)) {
                return building;
            }
        }
        return null;
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=676 endLine=693 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Gets the UnitType which a teacher is teaching to a student.
     * This value is only meaningful for teachers that can be put in a
     * school.
     * 
     * @param typeTeacher the unit type of the teacher
     * @param typeStudent the unit type of the student
     * @return an <code>UnitType</code> value
     * @see #getTurnsOfTraining
     *
     */
    public static UnitType getUnitTypeTeaching(UnitType typeTeacher, UnitType typeStudent) {
        if (typeStudent.canBeUpgraded(typeTeacher, UpgradeType.EDUCATION)) {
            return typeTeacher;
        } else {
            return typeStudent.getEducationUnit(0);
        }
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=128 endLine=137 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
    private ImageIcon getUnitIcon(UnitType unit) {
        Unit.Role role = Unit.Role.DEFAULT;
        if (unit.hasAbility("model.ability.expertPioneer")) {
            role = Unit.Role.PIONEER;
        } else if (unit.hasAbility("model.ability.expertMissionary")) {
            role = Unit.Role.MISSIONARY;
        }

        return getLibrary().getUnitImageIcon(unit, role);
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=583 endLine=587 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
    private JLabel createNonCountedLabel(int otherAmateurs) {
        JLabel label = createNumberLabel(otherAmateurs, "report.labour.notCounted.tooltip");
        label.setForeground(Color.GRAY);
        return label;
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=189 endLine=194 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/client/gui/panel/LabourData.java)
        public int getTotalColonists() {
            //count as if the unit was already teached, this makes teaching easier to plan
            //other working amateurs are not counted per default
            return workingAmateurs + workingProfessionals.getColonists() + notWorking +
                teachers + otherStudents - students;
        }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=269 endLine=273 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
    private JLabel createEmptyLabel() {
        JLabel empty = new JLabel("");
        empty.setBorder(CELLBORDER);
        return empty;
    }


, Instance #
frags: 
(startLine=297 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitOnLand[unitIndex] > 0) {
            JLabel onLandLabel = new JLabel(Messages.message("report.onLand"));
            onLandLabel.setForeground(Color.GRAY);
            detailPanel.add(onLandLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitOnLand[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel,
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

(startLine=313 endLine=328 srcPath=/root/NewExperiment/freecolFilter/00380/src/net/sf/freecol/client/gui/panel/ReportLabourPanel.java)
        if (unitAtSea[unitIndex] > 0) {
            JLabel atSeaLabel = new JLabel(Messages.message("report.atSea"));
            atSeaLabel.setForeground(Color.GRAY);
            detailPanel.add(atSeaLabel,
                            higConst.rc(row, column * columnsPerColumn + colonyColumn, "l"));
            JLabel countLabel = new JLabel(String.valueOf(unitAtSea[unitIndex]));
            countLabel.setForeground(Color.GRAY);
            detailPanel.add(countLabel, 
                            higConst.rc(row, column * columnsPerColumn + countColumn, "r"));
            if (row == heights.length) {
                row = startRow;
                column++;
            } else {
                row++;
            }
        }

commonMethod: 
(startLine=636 endLine=644 srcPath=/root/NewExperiment/freecolFilter/00381/src/net/sf/freecol/common/model/Colony.java)
    public List<Unit> getTeachers() {
        List<Unit> teachers = new ArrayList<Unit>();
        for (Building building : buildingMap.values()) {
            if (building.getType().hasAbility("model.ability.teach")) {
                teachers.addAll(building.getUnitList());
            }
        }
        return teachers;
    }


, Instance #
frags: 
(startLine=122 endLine=145 srcPath=/root/NewExperiment/freecolFilter/00400/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
        if (!hasGift()) {
            if (getUnit().getTile() != getUnit().getIndianSettlement().getTile()) {
                // Move to the owning settlement:
                Direction r = moveTowards(connection, getUnit().getIndianSettlement().getTile());
                moveButDontAttack(connection, r);
            } else {
                // Load the goods:
                ArrayList<Goods> goodsList = new ArrayList<Goods>();
                GoodsContainer gc = getUnit().getIndianSettlement().getGoodsContainer();
                // Come back to clean up - takes SUGAR, TOBACCO, COTTON, FURS
                for (GoodsType goodsType : new GoodsType[] {Goods.SUGAR, Goods.TOBACCO, Goods.COTTON, Goods.FURS}) {
                    if (gc.getGoodsCount(goodsType) >= IndianSettlement.KEEP_RAW_MATERIAL + 25) {
                        goodsList.add(new Goods(getGame(), getUnit().getIndianSettlement(),
                                                goodsType,
                                                getRandom().nextInt(15) + 10));
                    }
                }

                if (goodsList.size() > 0) {
                    Goods goods = goodsList.get(getRandom().nextInt(goodsList.size()));
                    goods.setLocation(getUnit());
                }
            }
        } else {

(startLine=136 endLine=159 srcPath=/root/NewExperiment/freecolFilter/00400/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
        if (!hasGift()) {
            if (getUnit().getTile() != getUnit().getIndianSettlement().getTile()) {
                // Move to the owning settlement:
                Direction r = moveTowards(connection, getUnit().getIndianSettlement().getTile());
                moveButDontAttack(connection, r);
            } else {
                // Load the goods:
                List<Goods> goodsList = new ArrayList<Goods>();
                GoodsContainer gc = getUnit().getIndianSettlement().getGoodsContainer();
                // Come back to change - takes SUGAR, TOBACCO, COTTON, FURS
                for (GoodsType goodsType : new GoodsType[] {Goods.SUGAR, Goods.TOBACCO, Goods.COTTON, Goods.FURS}) {
                    if (gc.getGoodsCount(goodsType) >= IndianSettlement.KEEP_RAW_MATERIAL + 25) {
                        goodsList.add(new Goods(getGame(), getUnit().getIndianSettlement(),
                                                goodsType,
                                                getRandom().nextInt(15) + 10));
                    }
                }

                if (goodsList.size() > 0) {
                    Goods goods = goodsList.get(getRandom().nextInt(goodsList.size()));
                    goods.setLocation(getUnit());
                }
            }
        } else {

commonMethod: 
(startLine=460 endLine=467 srcPath=/root/NewExperiment/freecolFilter/00401/src/net/sf/freecol/FreeCol.java)
    /**
     * Returns the specification object for Freecol. 
     * 
     * @return the specification to be used by all other classes.
     */
    public static Specification getSpecification() {
        return Specification.getSpecification();
    }


, Instance #
frags: 
(startLine=122 endLine=145 srcPath=/root/NewExperiment/freecolFilter/00400/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
        if (!hasGift()) {
            if (getUnit().getTile() != getUnit().getIndianSettlement().getTile()) {
                // Move to the owning settlement:
                Direction r = moveTowards(connection, getUnit().getIndianSettlement().getTile());
                moveButDontAttack(connection, r);
            } else {
                // Load the goods:
                ArrayList<Goods> goodsList = new ArrayList<Goods>();
                GoodsContainer gc = getUnit().getIndianSettlement().getGoodsContainer();
                // Come back to clean up - takes SUGAR, TOBACCO, COTTON, FURS
                for (GoodsType goodsType : new GoodsType[] {Goods.SUGAR, Goods.TOBACCO, Goods.COTTON, Goods.FURS}) {
                    if (gc.getGoodsCount(goodsType) >= IndianSettlement.KEEP_RAW_MATERIAL + 25) {
                        goodsList.add(new Goods(getGame(), getUnit().getIndianSettlement(),
                                                goodsType,
                                                getRandom().nextInt(15) + 10));
                    }
                }

                if (goodsList.size() > 0) {
                    Goods goods = goodsList.get(getRandom().nextInt(goodsList.size()));
                    goods.setLocation(getUnit());
                }
            }
        } else {

(startLine=136 endLine=159 srcPath=/root/NewExperiment/freecolFilter/00400/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
        if (!hasGift()) {
            if (getUnit().getTile() != getUnit().getIndianSettlement().getTile()) {
                // Move to the owning settlement:
                Direction r = moveTowards(connection, getUnit().getIndianSettlement().getTile());
                moveButDontAttack(connection, r);
            } else {
                // Load the goods:
                List<Goods> goodsList = new ArrayList<Goods>();
                GoodsContainer gc = getUnit().getIndianSettlement().getGoodsContainer();
                // Come back to change - takes SUGAR, TOBACCO, COTTON, FURS
                for (GoodsType goodsType : new GoodsType[] {Goods.SUGAR, Goods.TOBACCO, Goods.COTTON, Goods.FURS}) {
                    if (gc.getGoodsCount(goodsType) >= IndianSettlement.KEEP_RAW_MATERIAL + 25) {
                        goodsList.add(new Goods(getGame(), getUnit().getIndianSettlement(),
                                                goodsType,
                                                getRandom().nextInt(15) + 10));
                    }
                }

                if (goodsList.size() > 0) {
                    Goods goods = goodsList.get(getRandom().nextInt(goodsList.size()));
                    goods.setLocation(getUnit());
                }
            }
        } else {

commonMethod: 
(startLine=432 endLine=434 srcPath=/root/NewExperiment/freecolFilter/00401/src/net/sf/freecol/common/Specification.java)
    public List<GoodsType> getNewWorldGoodsTypeList() {
        return newWorldGoodsTypeList;
    }


, Instance #
frags: 
(startLine=127 endLine=144 srcPath=/root/NewExperiment/freecolFilter/00400/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
            } else {
                // Load the goods:
                ArrayList<Goods> goodsList = new ArrayList<Goods>();
                GoodsContainer gc = getUnit().getIndianSettlement().getGoodsContainer();
                // Come back to clean up - takes SUGAR, TOBACCO, COTTON, FURS
                for (GoodsType goodsType : new GoodsType[] {Goods.SUGAR, Goods.TOBACCO, Goods.COTTON, Goods.FURS}) {
                    if (gc.getGoodsCount(goodsType) >= IndianSettlement.KEEP_RAW_MATERIAL + 25) {
                        goodsList.add(new Goods(getGame(), getUnit().getIndianSettlement(),
                                                goodsType,
                                                getRandom().nextInt(15) + 10));
                    }
                }

                if (goodsList.size() > 0) {
                    Goods goods = goodsList.get(getRandom().nextInt(goodsList.size()));
                    goods.setLocation(getUnit());
                }
            }

(startLine=141 endLine=158 srcPath=/root/NewExperiment/freecolFilter/00400/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
            } else {
                // Load the goods:
                List<Goods> goodsList = new ArrayList<Goods>();
                GoodsContainer gc = getUnit().getIndianSettlement().getGoodsContainer();
                // Come back to change - takes SUGAR, TOBACCO, COTTON, FURS
                for (GoodsType goodsType : new GoodsType[] {Goods.SUGAR, Goods.TOBACCO, Goods.COTTON, Goods.FURS}) {
                    if (gc.getGoodsCount(goodsType) >= IndianSettlement.KEEP_RAW_MATERIAL + 25) {
                        goodsList.add(new Goods(getGame(), getUnit().getIndianSettlement(),
                                                goodsType,
                                                getRandom().nextInt(15) + 10));
                    }
                }

                if (goodsList.size() > 0) {
                    Goods goods = goodsList.get(getRandom().nextInt(goodsList.size()));
                    goods.setLocation(getUnit());
                }
            }

commonMethod: 
(startLine=460 endLine=467 srcPath=/root/NewExperiment/freecolFilter/00401/src/net/sf/freecol/FreeCol.java)
    /**
     * Returns the specification object for Freecol. 
     * 
     * @return the specification to be used by all other classes.
     */
    public static Specification getSpecification() {
        return Specification.getSpecification();
    }


, Instance #
frags: 
(startLine=127 endLine=144 srcPath=/root/NewExperiment/freecolFilter/00400/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
            } else {
                // Load the goods:
                ArrayList<Goods> goodsList = new ArrayList<Goods>();
                GoodsContainer gc = getUnit().getIndianSettlement().getGoodsContainer();
                // Come back to clean up - takes SUGAR, TOBACCO, COTTON, FURS
                for (GoodsType goodsType : new GoodsType[] {Goods.SUGAR, Goods.TOBACCO, Goods.COTTON, Goods.FURS}) {
                    if (gc.getGoodsCount(goodsType) >= IndianSettlement.KEEP_RAW_MATERIAL + 25) {
                        goodsList.add(new Goods(getGame(), getUnit().getIndianSettlement(),
                                                goodsType,
                                                getRandom().nextInt(15) + 10));
                    }
                }

                if (goodsList.size() > 0) {
                    Goods goods = goodsList.get(getRandom().nextInt(goodsList.size()));
                    goods.setLocation(getUnit());
                }
            }

(startLine=141 endLine=158 srcPath=/root/NewExperiment/freecolFilter/00400/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
            } else {
                // Load the goods:
                List<Goods> goodsList = new ArrayList<Goods>();
                GoodsContainer gc = getUnit().getIndianSettlement().getGoodsContainer();
                // Come back to change - takes SUGAR, TOBACCO, COTTON, FURS
                for (GoodsType goodsType : new GoodsType[] {Goods.SUGAR, Goods.TOBACCO, Goods.COTTON, Goods.FURS}) {
                    if (gc.getGoodsCount(goodsType) >= IndianSettlement.KEEP_RAW_MATERIAL + 25) {
                        goodsList.add(new Goods(getGame(), getUnit().getIndianSettlement(),
                                                goodsType,
                                                getRandom().nextInt(15) + 10));
                    }
                }

                if (goodsList.size() > 0) {
                    Goods goods = goodsList.get(getRandom().nextInt(goodsList.size()));
                    goods.setLocation(getUnit());
                }
            }

commonMethod: 
(startLine=432 endLine=434 srcPath=/root/NewExperiment/freecolFilter/00401/src/net/sf/freecol/common/Specification.java)
    public List<GoodsType> getNewWorldGoodsTypeList() {
        return newWorldGoodsTypeList;
    }


, Instance #
frags: 
(startLine=305 endLine=323 srcPath=/root/NewExperiment/freecolFilter/00400/src/net/sf/freecol/server/control/InGameController.java)
        if (go.getBoolean(GameOptions.VICTORY_DEFEAT_EUROPEANS)) {
            Player winner = null;
            Iterator<Player> playerIterator = getGame().getPlayerIterator();
            while (playerIterator.hasNext()) {
                Player p = playerIterator.next();
                if (!p.isDead() && p.isEuropean() && !p.isREF()) {
                    if (winner != null) {
                        // There is more than one european player alive:
                        winner = null;
                        break;
                    } else {
                        winner = p;
                    }
                }
            }
            if (winner != null) {
                return winner;
            }
        }

(startLine=324 endLine=342 srcPath=/root/NewExperiment/freecolFilter/00400/src/net/sf/freecol/server/control/InGameController.java)
        if (go.getBoolean(GameOptions.VICTORY_DEFEAT_HUMANS)) {
            Player winner = null;
            Iterator<Player> playerIterator = getGame().getPlayerIterator();
            while (playerIterator.hasNext()) {
                Player p = playerIterator.next();
                if (!p.isDead() && !p.isAI()) {
                    if (winner != null) {
                        // There is more than one human player alive:
                        winner = null;
                        break;
                    } else {
                        winner = p;
                    }
                }
            }
            if (winner != null) {
                return winner;
            }
        }

commonMethod: 
(startLine=728 endLine=736 srcPath=/root/NewExperiment/freecolFilter/00401/src/net/sf/freecol/common/model/Game.java)
    /**
     * Gets an <code>Vector</code> containing every <code>Player</code> in
     * this game.
     * 
     * @return The <code>Vector</code>.
     */
    public List<Player> getPlayers() {
        return players;
    }


, Instance #
frags: 
(startLine=3536 endLine=3550 srcPath=/root/NewExperiment/freecolFilter/00405/src/net/sf/freecol/common/model/Unit.java)
            if (in.getLocalName().equals(UNITS_TAG_NAME)) {
                units = new ArrayList<Unit>();
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    if (in.getLocalName().equals(Unit.getXMLElementTagName())) {
                        Unit unit = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, ID_ATTRIBUTE));
                        if (unit != null) {
                            unit.readFromXML(in);
                            units.add(unit);
                        } else {
                            unit = new Unit(getGame(), in);
                            units.add(unit);
                        }
                    }
                }
            } else if (in.getLocalName().equals(GoodsContainer.getXMLElementTagName())) {

(startLine=658 endLine=672 srcPath=/root/NewExperiment/freecolFilter/00405/src/net/sf/freecol/common/model/Europe.java)
            if (in.getLocalName().equals(UNITS_TAG_NAME)) {
                units = new ArrayList<Unit>();
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    if (in.getLocalName().equals(Unit.getXMLElementTagName())) {
                        Unit unit = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
                        if (unit != null) {
                            unit.readFromXML(in);
                            units.add(unit);
                        } else {
                            unit = new Unit(getGame(), in);
                            units.add(unit);
                        }
                    }
                }
            } else if (in.getLocalName().equals("unitPrice")) {

(startLine=1682 endLine=1696 srcPath=/root/NewExperiment/freecolFilter/00405/src/net/sf/freecol/common/model/Tile.java)
            } else if (in.getLocalName().equals(UNITS_TAG_NAME)) {
                units = new ArrayList<Unit>();
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    if (in.getLocalName().equals(Unit.getXMLElementTagName())) {
                        Unit unit = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, ID_ATTRIBUTE));
                        if (unit != null) {
                            unit.readFromXML(in);
                            units.add(unit);
                        } else {
                            unit = new Unit(getGame(), in);
                            units.add(unit);
                        }
                    }
                }
            } else if (in.getLocalName().equals(TileItemContainer.getXMLElementTagName())) {

(startLine=1274 endLine=1288 srcPath=/root/NewExperiment/freecolFilter/00405/src/net/sf/freecol/common/model/IndianSettlement.java)
            } else if (UNITS_TAG_NAME.equals(in.getLocalName())) {
                units = new ArrayList<Unit>();
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    if (in.getLocalName().equals(Unit.getXMLElementTagName())) {
                        Unit unit = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, ID_ATTRIBUTE));
                        if (unit != null) {
                            unit.readFromXML(in);
                            units.add(unit);
                        } else {
                            unit = new Unit(getGame(), in);
                            units.add(unit);
                        }
                    }
                }
            } else if (OWNED_UNITS_TAG_NAME.equals(in.getLocalName())) {

commonMethod: 
(startLine=517 endLine=536 srcPath=/root/NewExperiment/freecolFilter/00406/src/net/sf/freecol/common/model/FreeColGameObject.java)
    public <T extends FreeColGameObject> T updateFreeColGameObject(XMLStreamReader in, Class<T> returnClass) {
        final String attributeString = in.getAttributeValue(null, ID_ATTRIBUTE);
        if (attributeString == null) {
            return null;
        } else {
            T returnValue = returnClass.cast(getGame().getFreeColGameObject(attributeString));
            try {
                if (returnValue == null) {
                    Constructor c = returnClass.getConstructor(Game.class, XMLStreamReader.class);
                    returnValue = returnClass.cast(c.newInstance(getGame(), in));
                } else {
                    returnValue.readFromXML(in);
                }
                return returnValue;
            } catch(Exception e) {
                logger.warning("Failed to update FreeColGameObject with ID " + attributeString);
                return null;
            }
        }
    }


, Instance #
frags: 
(startLine=3538 endLine=3549 srcPath=/root/NewExperiment/freecolFilter/00405/src/net/sf/freecol/common/model/Unit.java)
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    if (in.getLocalName().equals(Unit.getXMLElementTagName())) {
                        Unit unit = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, ID_ATTRIBUTE));
                        if (unit != null) {
                            unit.readFromXML(in);
                            units.add(unit);
                        } else {
                            unit = new Unit(getGame(), in);
                            units.add(unit);
                        }
                    }
                }

(startLine=660 endLine=671 srcPath=/root/NewExperiment/freecolFilter/00405/src/net/sf/freecol/common/model/Europe.java)
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    if (in.getLocalName().equals(Unit.getXMLElementTagName())) {
                        Unit unit = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
                        if (unit != null) {
                            unit.readFromXML(in);
                            units.add(unit);
                        } else {
                            unit = new Unit(getGame(), in);
                            units.add(unit);
                        }
                    }
                }

(startLine=1684 endLine=1695 srcPath=/root/NewExperiment/freecolFilter/00405/src/net/sf/freecol/common/model/Tile.java)
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    if (in.getLocalName().equals(Unit.getXMLElementTagName())) {
                        Unit unit = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, ID_ATTRIBUTE));
                        if (unit != null) {
                            unit.readFromXML(in);
                            units.add(unit);
                        } else {
                            unit = new Unit(getGame(), in);
                            units.add(unit);
                        }
                    }
                }

(startLine=1276 endLine=1287 srcPath=/root/NewExperiment/freecolFilter/00405/src/net/sf/freecol/common/model/IndianSettlement.java)
                while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
                    if (in.getLocalName().equals(Unit.getXMLElementTagName())) {
                        Unit unit = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, ID_ATTRIBUTE));
                        if (unit != null) {
                            unit.readFromXML(in);
                            units.add(unit);
                        } else {
                            unit = new Unit(getGame(), in);
                            units.add(unit);
                        }
                    }
                }

(startLine=1079 endLine=1090 srcPath=/root/NewExperiment/freecolFilter/00405/src/net/sf/freecol/common/model/Building.java)
        while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
            Unit unit = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
            if (unit == null) {
                unit = new Unit(getGame(), in);
                units.add(unit);
            } else {
                unit.readFromXML(in);
                if (!units.contains(unit)) {
                    units.add(unit);
                }
            }
        }

(startLine=602 endLine=612 srcPath=/root/NewExperiment/freecolFilter/00405/src/net/sf/freecol/common/model/ColonyTile.java)
        while (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
            if (in.getLocalName().equals(Unit.getXMLElementTagName())) {
                Unit unit = (Unit) getGame().getFreeColGameObject(in.getAttributeValue(null, "ID"));
                if (unit != null) {
                    unit.readFromXML(in);
                    this.unit = unit;
                } else {
                    this.unit = new Unit(getGame(), in);
                } 
            }
        }

commonMethod: 
(startLine=517 endLine=536 srcPath=/root/NewExperiment/freecolFilter/00406/src/net/sf/freecol/common/model/FreeColGameObject.java)
    public <T extends FreeColGameObject> T updateFreeColGameObject(XMLStreamReader in, Class<T> returnClass) {
        final String attributeString = in.getAttributeValue(null, ID_ATTRIBUTE);
        if (attributeString == null) {
            return null;
        } else {
            T returnValue = returnClass.cast(getGame().getFreeColGameObject(attributeString));
            try {
                if (returnValue == null) {
                    Constructor c = returnClass.getConstructor(Game.class, XMLStreamReader.class);
                    returnValue = returnClass.cast(c.newInstance(getGame(), in));
                } else {
                    returnValue.readFromXML(in);
                }
                return returnValue;
            } catch(Exception e) {
                logger.warning("Failed to update FreeColGameObject with ID " + attributeString);
                return null;
            }
        }
    }


, Instance #
frags: 
(startLine=330 endLine=342 srcPath=/root/NewExperiment/freecolFilter/00432/src/net/sf/freecol/client/gui/panel/ReportProductionPanel.java)
    private JButton createColonyButton(int index) {

        JButton button = new JButton(colonies.get(index).getName());
        button.setMargin(new Insets(0,0,0,0));
        button.setOpaque(false);
        button.setForeground(FreeColPanel.LINK_COLOR);
        button.setAlignmentY(0.8f);
        button.setHorizontalAlignment(SwingConstants.LEADING);
        button.setBorder(FreeColPanel.LEFTCELLBORDER);
        button.setActionCommand(String.valueOf(index));
        button.addActionListener(this);
        return button;
    }

(startLine=199 endLine=211 srcPath=/root/NewExperiment/freecolFilter/00432/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
    private JButton createColonyButton(int index) {

        JButton button = new JButton(colonies.get(index).getName());
        button.setFont(smallHeaderFont);
        button.setMargin(new Insets(0,0,0,0));
        button.setOpaque(false);
        button.setForeground(LINK_COLOR);
        button.setAlignmentY(0.8f);
        button.setBorder(BorderFactory.createEmptyBorder());
        button.setActionCommand(String.valueOf(index));
        button.addActionListener(this);
        return button;
    }

(startLine=305 endLine=318 srcPath=/root/NewExperiment/freecolFilter/00432/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
    private JButton createColonyButton(Colony colony, String info, boolean headline) {
        JButton button = new JButton(colony.getName() + info);
        if (headline) {
            button.setFont(smallHeaderFont);
        }
        button.setMargin(new Insets(0,0,0,0));
        button.setOpaque(false);
        button.setForeground(LINK_COLOR);
        button.setAlignmentY(0.8f);
        button.setBorder(BorderFactory.createEmptyBorder());
        button.setActionCommand(colony.getId());
        button.addActionListener(this);
        return button;
    }

commonMethod: 
(startLine=239 endLine=248 srcPath=/root/NewExperiment/freecolFilter/00433/src/net/sf/freecol/client/gui/panel/FreeColPanel.java)
    public static JButton getLinkButton(String text, Icon icon, String action) {
        JButton button = new JButton(text, icon);
        button.setMargin(emptyMargin);
        button.setOpaque(false);
        button.setForeground(LINK_COLOR);
        button.setAlignmentY(0.8f);
        button.setBorder(BorderFactory.createEmptyBorder());
        button.setActionCommand(action);
        return button;
    }


, Instance #
frags: 
(startLine=544 endLine=558 srcPath=/root/NewExperiment/freecolFilter/00440/src/net/sf/freecol/common/model/SimpleCombatModel.java)
            if (attacker.isNaval()) {
                Location repairLocation = attackingPlayer.getRepairLocation(attacker);
                damageShip(attacker, null, defender);
                attacker.addModelMessage(attacker, ModelMessage.MessageType.UNIT_DEMOTED,
                                         "model.unit.shipDamaged",
                                         "%unit%", attacker.getName(),
                                         "%repairLocation%", repairLocation.getLocationName(),
                                         "%enemyUnit%", defender.getName(),
                                         "%enemyNation%", defendingPlayer.getNationAsString());
                defender.addModelMessage(defender, ModelMessage.MessageType.COMBAT_RESULT,
                                         "model.unit.enemyShipDamaged",
                                         "%unit%", defender.getName(),
                                         "%enemyUnit%", attacker.getName(),
                                         "%enemyNation%", attackingPlayer.getNationAsString());
            } else {

(startLine=595 endLine=612 srcPath=/root/NewExperiment/freecolFilter/00440/src/net/sf/freecol/common/model/SimpleCombatModel.java)
            if (attacker.isNaval()) {
                Location repairLocation = defendingPlayer.getRepairLocation(defender);
                attacker.captureGoods(defender);
                damageShip(defender, null, attacker);
                attacker.addModelMessage(attacker, ModelMessage.MessageType.COMBAT_RESULT,
                                         "model.unit.enemyShipDamaged",
                                         "%unit%", attacker.getName(),
                                         "%enemyUnit%", defender.getName(),
                                         "%enemyNation%", defendingPlayer.getNationAsString());
                if (repairLocation != null ) {
                    defender.addModelMessage(defender, ModelMessage.MessageType.UNIT_DEMOTED,
                                             "model.unit.shipDamaged",
                                             "%unit%", defender.getName(),
                                             "%repairLocation%", repairLocation.getLocationName(),
                                             "%enemyUnit%", attacker.getName(),
                                             "%enemyNation%", attackingPlayer.getNationAsString());
                }
            } else if (attacker.hasAbility("model.ability.pillageUnprotectedColony") && 

commonMethod: 
(startLine=919 endLine=957 srcPath=/root/NewExperiment/freecolFilter/00441/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    /**
     * Evade a naval engagement.
     *
     * @param defender A naval unit that evades the attacker
     * @param colony A colony that may have bombarded the defender
     * @param attacker A unit that may have attacked the defender
     **/
    private void evade(Unit defender, Colony attackerColony, Unit attackerUnit) {
        String nation = defender.getOwner().getNationAsString();

        if (attackerColony != null) {
            attackerColony.addModelMessage(attackerColony,
                                           ModelMessage.MessageType.COMBAT_RESULT,
                                           "model.unit.shipEvadedBombardment",
                                           "%colony%", attackerColony.getName(),
                                           "%unit%", defender.getName(),
                                           "%nation%", nation);
            defender.addModelMessage(defender,
                                     ModelMessage.MessageType.COMBAT_RESULT, 
                                     "model.unit.shipEvadedBombardment",
                                     "%colony%", attackerColony.getName(),
                                     "%unit%", defender.getName(),
                                     "%nation%", nation);
        } else if (attackerUnit != null) {
            String attackerNation = attackerUnit.getOwner().getNationAsString();
            attackerUnit.addModelMessage(attackerUnit,
                                         ModelMessage.MessageType.COMBAT_RESULT,
                                         "model.unit.enemyShipEvaded",
                                         "%unit%", attackerUnit.getName(),
                                         "%enemyUnit%", defender.getName(),
                                         "%enemyNation%", nation);
            defender.addModelMessage(defender,
                                     ModelMessage.MessageType.COMBAT_RESULT,
                                     "model.unit.shipEvaded",
                                     "%unit%", defender.getName(),
                                     "%enemyUnit%", attackerUnit.getName(),
                                     "%enemyNation%", attackerNation);
        }
    }


, Instance #
frags: 
(startLine=527 endLine=539 srcPath=/root/NewExperiment/freecolFilter/00440/src/net/sf/freecol/common/model/SimpleCombatModel.java)
            if (attacker.isNaval()) {
                // send message to both parties
                attacker.addModelMessage(attacker, ModelMessage.MessageType.COMBAT_RESULT, attacker,
                                         "model.unit.enemyShipEvaded",
                                         "%unit%", attacker.getName(),
                                         "%enemyUnit%", defender.getName(),
                                         "%enemyNation%", defendingPlayer.getNationAsString());
                defender.addModelMessage(defender, ModelMessage.MessageType.COMBAT_RESULT, defender,
                                         "model.unit.shipEvaded",
                                         "%unit%", defender.getName(),
                                         "%enemyUnit%", attacker.getName(),
                                         "%enemyNation%", attackingPlayer.getNationAsString());
            } else {

(startLine=566 endLine=578 srcPath=/root/NewExperiment/freecolFilter/00440/src/net/sf/freecol/common/model/SimpleCombatModel.java)
            if (attacker.isNaval()) {
                sinkShip(attacker, null, defender);
                attacker.addModelMessage(attacker, ModelMessage.MessageType.UNIT_LOST,
                                         "model.unit.shipSunk",
                                         "%unit%", attacker.getName(),
                                         "%enemyUnit%", defender.getName(),
                                         "%enemyNation%", defendingPlayer.getNationAsString());
                defender.addModelMessage(defender, ModelMessage.MessageType.COMBAT_RESULT,
                                         "model.unit.enemyShipSunk",
                                         "%unit%", defender.getName(),
                                         "%enemyUnit%", attacker.getName(),
                                         "%enemyNation%", attackingPlayer.getNationAsString());
            } else {

(startLine=630 endLine=643 srcPath=/root/NewExperiment/freecolFilter/00440/src/net/sf/freecol/common/model/SimpleCombatModel.java)
            if (attacker.isNaval()) {
                attacker.captureGoods(defender);
                sinkShip(defender, null, attacker);
                attacker.addModelMessage(attacker, ModelMessage.MessageType.COMBAT_RESULT,
                                         "model.unit.enemyShipSunk",
                                         "%unit%", attacker.getName(),
                                         "%enemyUnit%", defender.getName(),
                                         "%enemyNation%", defendingPlayer.getNationAsString());
                defender.addModelMessage(defender, ModelMessage.MessageType.UNIT_LOST,
                                         "model.unit.shipSunk",
                                         "%unit%", defender.getName(),
                                         "%enemyUnit%", attacker.getName(),
                                         "%enemyNation%", attackingPlayer.getNationAsString());
            } else {

commonMethod: 
(startLine=919 endLine=957 srcPath=/root/NewExperiment/freecolFilter/00441/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    /**
     * Evade a naval engagement.
     *
     * @param defender A naval unit that evades the attacker
     * @param colony A colony that may have bombarded the defender
     * @param attacker A unit that may have attacked the defender
     **/
    private void evade(Unit defender, Colony attackerColony, Unit attackerUnit) {
        String nation = defender.getOwner().getNationAsString();

        if (attackerColony != null) {
            attackerColony.addModelMessage(attackerColony,
                                           ModelMessage.MessageType.COMBAT_RESULT,
                                           "model.unit.shipEvadedBombardment",
                                           "%colony%", attackerColony.getName(),
                                           "%unit%", defender.getName(),
                                           "%nation%", nation);
            defender.addModelMessage(defender,
                                     ModelMessage.MessageType.COMBAT_RESULT, 
                                     "model.unit.shipEvadedBombardment",
                                     "%colony%", attackerColony.getName(),
                                     "%unit%", defender.getName(),
                                     "%nation%", nation);
        } else if (attackerUnit != null) {
            String attackerNation = attackerUnit.getOwner().getNationAsString();
            attackerUnit.addModelMessage(attackerUnit,
                                         ModelMessage.MessageType.COMBAT_RESULT,
                                         "model.unit.enemyShipEvaded",
                                         "%unit%", attackerUnit.getName(),
                                         "%enemyUnit%", defender.getName(),
                                         "%enemyNation%", nation);
            defender.addModelMessage(defender,
                                     ModelMessage.MessageType.COMBAT_RESULT,
                                     "model.unit.shipEvaded",
                                     "%unit%", defender.getName(),
                                     "%enemyUnit%", attackerUnit.getName(),
                                     "%enemyNation%", attackerNation);
        }
    }


, Instance #
frags: 
(startLine=1066 endLine=1084 srcPath=/root/NewExperiment/freecolFilter/00447/src/net/sf/freecol/server/FreeColServer.java)
    public void sendUpdatedTileToAll(Tile newTile, Player player) {
        // TODO: can Player be null?
        for (Player enemy : getGame().getPlayers()) {
            ServerPlayer enemyPlayer = (ServerPlayer) enemy;
            if (player != null && player.equals(enemyPlayer) || enemyPlayer.getConnection() == null) {
                continue;
            }
            try {
                if (enemyPlayer.canSee(newTile)) {
                    Element updateElement = Message.createNewRootElement("update");
                    updateElement.appendChild(newTile.toXMLElement(enemyPlayer, updateElement.getOwnerDocument()));
                    enemyPlayer.getConnection().send(updateElement);
                }
            } catch (IOException e) {
                logger.warning("Could not send message to: " + enemyPlayer.getName() + " with connection "
                        + enemyPlayer.getConnection());
            }
        }
    }

(startLine=3081 endLine=3100 srcPath=/root/NewExperiment/freecolFilter/00447/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private void sendUpdatedTileToAll(Tile newTile, Player player) {
        // TODO: can Player be null?
        Iterator<Player> enemyPlayerIterator = getGame().getPlayerIterator();
        while (enemyPlayerIterator.hasNext()) {
            ServerPlayer enemyPlayer = (ServerPlayer) enemyPlayerIterator.next();
            if (player != null && player.equals(enemyPlayer) || enemyPlayer.getConnection() == null) {
                continue;
            }
            try {
                if (enemyPlayer.canSee(newTile)) {
                    Element updateElement = Message.createNewRootElement("update");
                    updateElement.appendChild(newTile.toXMLElement(enemyPlayer, updateElement.getOwnerDocument()));
                    enemyPlayer.getConnection().send(updateElement);
                }
            } catch (IOException e) {
                logger.warning("Could not send message to: " + enemyPlayer.getName() + " with connection "
                        + enemyPlayer.getConnection());
            }
        }
    }

commonMethod: 
(startLine=423 endLine=435 srcPath=/root/NewExperiment/freecolFilter/00448/src/net/sf/freecol/common/networking/Connection.java)
    /**
     * Sends the given message over this <code>Connection</code> and waits for
     * confirmation of receiveval before returning.
     * 
     * @param element The element (root element in a DOM-parsed XML tree) that
     *            holds all the information
     * @throws IOException If an error occur while sending the message.
     * @see #send(Element)
     * @see #ask(Element)
     */
    public void sendAndWait(Element element) throws IOException {
        ask(element);
    }


, Instance #
frags: 
(startLine=10 endLine=44 srcPath=/root/NewExperiment/freecolFilter/00447/test/src/net/sf/freecol/common/model/IndianSettlementTest.java)
	public void testFoodConsumption(){
		Game game = getStandardGame();

        Player indianPlayer = game.getPlayer("model.nation.tupi");

        Map map = getEmptyMap();
        game.setMap(map);
        
        //////////////////////
        // Setting test settlement and brave
        Tile settlementTile = map.getTile(5, 8);
        UnitType skillToTeach = FreeCol.getSpecification().getUnitType("model.unit.masterCottonPlanter");
        boolean isCapital = true;
        boolean isVisited = false;
        Unit residentMissionary = null;
        IndianSettlement camp = new IndianSettlement(game,indianPlayer,settlementTile,isCapital,skillToTeach,isVisited,residentMissionary);
        
        UnitType indianBraveType = FreeCol.getSpecification().getUnitType("model.unit.brave");
        Unit brave = new Unit(game, camp, indianPlayer, indianBraveType, UnitState.ACTIVE,
                indianBraveType.getDefaultEquipment());
        camp.addOwnedUnit(brave);
        
        assertEquals(1, camp.getUnitCount());
        assertEquals(0, camp.getFoodCount());

        GoodsType foodType = FreeCol.getSpecification().getGoodsType("model.goods.food");
        int foodProduced = camp.getProductionOf(foodType);
        int foodConsumed = camp.getFoodConsumption();
        assertTrue("Food Produced should be more the food consumed",foodProduced > foodConsumed);
        
        camp.newTurn();
        int foodRemaining = Math.max(foodProduced - foodConsumed, 0);
        
        assertEquals("Unexpected value for remaining food, ", foodRemaining,camp.getFoodCount());      
	}

(startLine=101 endLine=146 srcPath=/root/NewExperiment/freecolFilter/00447/test/src/net/sf/freecol/common/model/IndianSettlementTest.java)
	public void testHorseBreeding(){
		GoodsType horsesType = FreeCol.getSpecification().getGoodsType("model.goods.horses");
        GoodsType foodType = FreeCol.getSpecification().getGoodsType("model.goods.food");
        
		Game game = getStandardGame();

        Player indianPlayer = game.getPlayer("model.nation.tupi");

        Map map = getEmptyMap();
        game.setMap(map);
        
        //////////////////////
        // Setting test settlement and brave
        Tile settlementTile = map.getTile(5, 8);
        UnitType skillToTeach = FreeCol.getSpecification().getUnitType("model.unit.masterCottonPlanter");
        boolean isCapital = true;
        boolean isVisited = false;
        Unit residentMissionary = null;
        IndianSettlement camp = new IndianSettlement(game,indianPlayer,settlementTile,isCapital,skillToTeach,isVisited,residentMissionary);
        
        UnitType indianBraveType = FreeCol.getSpecification().getUnitType("model.unit.brave");
        Unit brave = new Unit(game, camp, indianPlayer, indianBraveType, UnitState.ACTIVE,
                indianBraveType.getDefaultEquipment());
        camp.addOwnedUnit(brave);
        
        assertEquals(1, camp.getUnitCount());
        assertEquals(0, camp.getFoodCount());

        //add horses
        int initialHorses = 2;
        camp.addGoods(horsesType, initialHorses);
        
        // verify that there is food production for the horses
        int foodProduced = camp.getProductionOf(foodType);
        int foodConsumed = camp.getFoodConsumption();
        int foodAvail = foodProduced - foodConsumed;
        assertTrue("Food Produced should be more the food consumed",foodProduced > foodConsumed);
        
        camp.newTurn();
        
        int expectedHorseProd = Math.min(IndianSettlement.MAX_HORSES_PER_TURN, foodAvail);
        assertTrue("Horses should breed", expectedHorseProd > 0);
        
        int horsesBreeded = camp.getGoodsCount(horsesType) - initialHorses;
        assertEquals("Wrong number of horses breeded",expectedHorseProd,horsesBreeded);
	}

(startLine=148 endLine=186 srcPath=/root/NewExperiment/freecolFilter/00447/test/src/net/sf/freecol/common/model/IndianSettlementTest.java)
	public void testHorseBreedingNoHorsesAvail(){
		GoodsType horsesType = FreeCol.getSpecification().getGoodsType("model.goods.horses");
        GoodsType foodType = FreeCol.getSpecification().getGoodsType("model.goods.food");
        
		Game game = getStandardGame();

        Player indianPlayer = game.getPlayer("model.nation.tupi");

        Map map = getEmptyMap();
        game.setMap(map);
        
        //////////////////////
        // Setting test settlement and brave
        Tile settlementTile = map.getTile(5, 8);
        UnitType skillToTeach = FreeCol.getSpecification().getUnitType("model.unit.masterCottonPlanter");
        boolean isCapital = true;
        boolean isVisited = false;
        Unit residentMissionary = null;
        IndianSettlement camp = new IndianSettlement(game,indianPlayer,settlementTile,isCapital,skillToTeach,isVisited,residentMissionary);
        
        UnitType indianBraveType = FreeCol.getSpecification().getUnitType("model.unit.brave");
        Unit brave = new Unit(game, camp, indianPlayer, indianBraveType, UnitState.ACTIVE,
                indianBraveType.getDefaultEquipment());
        camp.addOwnedUnit(brave);
        
        assertEquals(1, camp.getUnitCount());
        assertEquals(0, camp.getFoodCount());
        
        // verify that there is food production for the horses
        int foodProduced = camp.getProductionOf(foodType);
        int foodConsumed = camp.getFoodConsumption();
        assertTrue("Food Produced should be more the food consumed",foodProduced > foodConsumed);
        
        camp.newTurn();
        
        int expectedHorses = 0;
        int horsesAvail = camp.getGoodsCount(horsesType);
        assertEquals("No horses should be in settlement",expectedHorses,horsesAvail);
	}

commonMethod: 
(startLine=346 endLine=377 srcPath=/root/NewExperiment/freecolFilter/00448/test/src/net/sf/freecol/util/test/FreeColTestCase.java)
    	public IndianSettlement build(){
    		UnitType skillToTeach = FreeCol.getSpecification().getUnitType(skillTaught);
    		UnitType indianBraveType = FreeCol.getSpecification().getUnitType("model.unit.brave");
    		
    		// indianPlayer not set, get default
    		if(indianPlayer == null){
    			indianPlayer = game.getPlayer(defaultIndianPlayer);
    			if(indianPlayer == null){
    				throw new IllegalArgumentException("Default Indian player " + defaultIndianPlayer + " not in game");
    			}
    		}
    		
    		// settlement tile no set, get default
    		// indianPlayer not set, get default
    		if(settlementTile == null){
    			settlementTile = game.getMap().getTile(5, 8);
    			if(settlementTile == null){
    				throw new IllegalArgumentException("Default tile not in game");
    			}
    		}
    		
    		IndianSettlement camp = new IndianSettlement(game,indianPlayer,settlementTile,isCapital,skillToTeach,isVisited,residentMissionary);
            
    		// Add braves
            for(int i=0; i < initialBravesInCamp; i++){
            	Unit brave = new Unit(game, camp, indianPlayer, indianBraveType, UnitState.ACTIVE,
                    indianBraveType.getDefaultEquipment());
            	camp.addOwnedUnit(brave);
            }
            
            return camp;
    	}


, Instance #
frags: 
(startLine=46 endLine=99 srcPath=/root/NewExperiment/freecolFilter/00447/test/src/net/sf/freecol/common/model/IndianSettlementTest.java)
	public void testDeathByStarvation(){
		Game game = getStandardGame();

        Player indianPlayer = game.getPlayer("model.nation.tupi");

        TileType desertType = FreeCol.getSpecification().getTileType("model.tile.desert");
        Map map = getTestMap(desertType);
        game.setMap(map);
        
        //////////////////////
        // Setting test settlement and braves
        Tile settlementTile = map.getTile(5, 8);
        UnitType skillToTeach = FreeCol.getSpecification().getUnitType("model.unit.masterCottonPlanter");
        boolean isCapital = false;
        boolean isVisited = false;
        Unit residentMissionary = null;
        IndianSettlement camp1 = new IndianSettlement(game,indianPlayer,settlementTile,isCapital,skillToTeach,isVisited,residentMissionary);
        
        int initialBravesInCamp = 3;
        
        for(int i=0; i < initialBravesInCamp; i++){
        	UnitType indianBraveType = FreeCol.getSpecification().getUnitType("model.unit.brave");
        	Unit brave = new Unit(game, camp1, indianPlayer, indianBraveType, UnitState.ACTIVE,
                indianBraveType.getDefaultEquipment());
        	camp1.addOwnedUnit(brave);
        }

        assertEquals(initialBravesInCamp, camp1.getUnitCount());
        assertEquals(0, camp1.getFoodCount());
        
        //////////////////////
        // Simulate that only the center tile is owned by camp 1
        IndianSettlement camp2 = new IndianSettlement(game,indianPlayer,settlementTile,isCapital,skillToTeach,isVisited,residentMissionary);
        
        CircleIterator tilesAroundCamp = map.getCircleIterator(settlementTile.getPosition(), true, camp1.getRadius());
        
        while(tilesAroundCamp.hasNext()){
        	Position p = tilesAroundCamp.next();
        	Tile t = map.getTile(p);
        	t.setOwningSettlement(camp2);
        	
        }
           
        GoodsType foodType = FreeCol.getSpecification().getGoodsType("model.goods.food");
        int foodProduced = camp1.getProductionOf(foodType);
        int foodConsumed = camp1.getFoodConsumption();
        assertTrue("Food Produced should be less the food consumed",foodProduced < foodConsumed);
        
        camp1.newTurn();
        int foodRemaining = 0;
        
        assertEquals("Unexpected value for remaining food, ", foodRemaining,camp1.getFoodCount());
        assertFalse("Some braves should have died of starvation",camp1.getUnitCount() < initialBravesInCamp);
	}

(startLine=188 endLine=247 srcPath=/root/NewExperiment/freecolFilter/00447/test/src/net/sf/freecol/common/model/IndianSettlementTest.java)
	public void testHorseBreedingFoodAvail(){
		GoodsType horsesType = FreeCol.getSpecification().getGoodsType("model.goods.horses");
		GoodsType foodType = FreeCol.getSpecification().getGoodsType("model.goods.food");
		
		Game game = getStandardGame();

        Player indianPlayer = game.getPlayer("model.nation.tupi");

        TileType desertType = FreeCol.getSpecification().getTileType("model.tile.desert");
        Map map = getTestMap(desertType);
        game.setMap(map);
        
        //////////////////////
        // Setting test settlement and braves
        Tile settlementTile = map.getTile(5, 8);
        UnitType skillToTeach = FreeCol.getSpecification().getUnitType("model.unit.masterCottonPlanter");
        boolean isCapital = false;
        boolean isVisited = false;
        Unit residentMissionary = null;
        IndianSettlement camp1 = new IndianSettlement(game,indianPlayer,settlementTile,isCapital,skillToTeach,isVisited,residentMissionary);
        
        int initialBravesInCamp = 3;
        
        for(int i=0; i < initialBravesInCamp; i++){
        	UnitType indianBraveType = FreeCol.getSpecification().getUnitType("model.unit.brave");
        	Unit brave = new Unit(game, camp1, indianPlayer, indianBraveType, UnitState.ACTIVE,
                indianBraveType.getDefaultEquipment());
        	camp1.addOwnedUnit(brave);
        }

        assertEquals(initialBravesInCamp, camp1.getUnitCount());
        assertEquals(0, camp1.getFoodCount());
        
        //////////////////////
        // Simulate that only the center tile is owned by camp 1
        IndianSettlement camp2 = new IndianSettlement(game,indianPlayer,settlementTile,isCapital,skillToTeach,isVisited,residentMissionary);
        
        CircleIterator tilesAroundCamp = map.getCircleIterator(settlementTile.getPosition(), true, camp1.getRadius());
        
        while(tilesAroundCamp.hasNext()){
        	Position p = tilesAroundCamp.next();
        	Tile t = map.getTile(p);
        	t.setOwningSettlement(camp2);
        	
        }
           
        int foodProduced = camp1.getProductionOf(foodType);
        int foodConsumed = camp1.getFoodConsumption();
        assertTrue("Food Produced should be less the food consumed",foodProduced < foodConsumed);
        
        //add horses
        int initialHorses = 2;
        camp1.addGoods(horsesType, initialHorses);
        
        camp1.newTurn();
        
        int expectedHorsesBreeded = 0;
        int horsesBreeded = camp1.getGoodsCount(horsesType) - initialHorses;
        assertEquals("No horses should be bred",expectedHorsesBreeded,horsesBreeded);
	}

commonMethod: 
(startLine=346 endLine=377 srcPath=/root/NewExperiment/freecolFilter/00448/test/src/net/sf/freecol/util/test/FreeColTestCase.java)
    	public IndianSettlement build(){
    		UnitType skillToTeach = FreeCol.getSpecification().getUnitType(skillTaught);
    		UnitType indianBraveType = FreeCol.getSpecification().getUnitType("model.unit.brave");
    		
    		// indianPlayer not set, get default
    		if(indianPlayer == null){
    			indianPlayer = game.getPlayer(defaultIndianPlayer);
    			if(indianPlayer == null){
    				throw new IllegalArgumentException("Default Indian player " + defaultIndianPlayer + " not in game");
    			}
    		}
    		
    		// settlement tile no set, get default
    		// indianPlayer not set, get default
    		if(settlementTile == null){
    			settlementTile = game.getMap().getTile(5, 8);
    			if(settlementTile == null){
    				throw new IllegalArgumentException("Default tile not in game");
    			}
    		}
    		
    		IndianSettlement camp = new IndianSettlement(game,indianPlayer,settlementTile,isCapital,skillToTeach,isVisited,residentMissionary);
            
    		// Add braves
            for(int i=0; i < initialBravesInCamp; i++){
            	Unit brave = new Unit(game, camp, indianPlayer, indianBraveType, UnitState.ACTIVE,
                    indianBraveType.getDefaultEquipment());
            	camp.addOwnedUnit(brave);
            }
            
            return camp;
    	}


, Instance #
frags: 
(startLine=2809 endLine=2839 srcPath=/root/NewExperiment/freecolFilter/00453/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element buyProposition(Connection connection, Element element) {
        ServerPlayer player = getFreeColServer().getPlayer(connection);
        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute("unit"));
        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));
        IndianSettlement settlement = (IndianSettlement) goods.getLocation();
        int gold = -1;
        if (element.hasAttribute("gold")) {
            gold = Integer.parseInt(element.getAttribute("gold"));
        }
        if (goods.getAmount() > 100) {
            throw new IllegalArgumentException();
        }
        if (unit == null) {
            throw new IllegalArgumentException("Could not find 'Unit' with specified ID: "
                    + element.getAttribute("unit"));
        }
        if (settlement == null) {
            throw new IllegalArgumentException("Goods are not in a settlement");
        }
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        if (unit.getTile().getDistanceTo(settlement.getTile()) > 1) {
            throw new IllegalStateException("Not adjacent to settlemen!");
        }
        int returnGold = ((AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner()))
                .buyProposition(unit, goods, gold);
        Element tpaElement = Message.createNewRootElement("buyPropositionAnswer");
        tpaElement.setAttribute("gold", Integer.toString(returnGold));
        return tpaElement;
    }

(startLine=2848 endLine=2881 srcPath=/root/NewExperiment/freecolFilter/00453/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element buy(Connection connection, Element element) {
        ServerPlayer player = getFreeColServer().getPlayer(connection);
        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute("unit"));
        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));
        IndianSettlement settlement = (IndianSettlement) goods.getLocation();
        int gold = Integer.parseInt(element.getAttribute("gold"));
        if (gold <= 0) {
            throw new IllegalArgumentException();
        }
        if (goods.getAmount() > 100) {
            throw new IllegalArgumentException();
        }
        if (unit == null) {
            throw new IllegalArgumentException("Could not find 'Unit' with specified ID: "
                    + element.getAttribute("unit"));
        }
        if (settlement == null) {
            throw new IllegalArgumentException("Goods are not in a settlement");
        }
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        if (unit.getTile().getDistanceTo(settlement.getTile()) > 1) {
            throw new IllegalStateException("Not adjacent to settlemen!");
        }
        int returnGold = ((AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner()))
                .buyProposition(unit, goods, gold);
        if (returnGold != gold) {
            throw new IllegalArgumentException("This was not the price we agreed upon! Cheater?");
        }
        unit.buy(settlement, goods, gold);
        
        return null;
    }

commonMethod: 
(startLine=2781 endLine=2808 srcPath=/root/NewExperiment/freecolFilter/00454/src/net/sf/freecol/server/control/InGameInputHandler.java)
    /**
     * Checks general conditions for several types of trade queries
     * 
     * @param element
     * @param player
     * @param unit
     * @param settlement
     * @param goods
     */
    private void checkGeneralCondForTradeQuery(Element element, Player player, Unit unit, Settlement settlement, Goods goods){
        if (goods != null && goods.getAmount() > 100) {
            throw new IllegalArgumentException("Amount of goods exceeds 100: " + goods.getAmount());
        }
        if (unit == null) {
            throw new IllegalArgumentException("Could not find 'Unit' with specified ID: "
                    + element.getAttribute("unit"));
        }
        if (settlement == null) {
            throw new IllegalArgumentException("Could not find 'Settlement' with specified ID: "
                    + element.getAttribute("settlement"));
        }
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        if (unit.getTile().getDistanceTo(settlement.getTile()) > 1) {
            throw new IllegalStateException("Not adjacent to settlement!");
        }        
    }


, Instance #
frags: 
(startLine=2809 endLine=2839 srcPath=/root/NewExperiment/freecolFilter/00453/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element buyProposition(Connection connection, Element element) {
        ServerPlayer player = getFreeColServer().getPlayer(connection);
        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute("unit"));
        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));
        IndianSettlement settlement = (IndianSettlement) goods.getLocation();
        int gold = -1;
        if (element.hasAttribute("gold")) {
            gold = Integer.parseInt(element.getAttribute("gold"));
        }
        if (goods.getAmount() > 100) {
            throw new IllegalArgumentException();
        }
        if (unit == null) {
            throw new IllegalArgumentException("Could not find 'Unit' with specified ID: "
                    + element.getAttribute("unit"));
        }
        if (settlement == null) {
            throw new IllegalArgumentException("Goods are not in a settlement");
        }
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        if (unit.getTile().getDistanceTo(settlement.getTile()) > 1) {
            throw new IllegalStateException("Not adjacent to settlemen!");
        }
        int returnGold = ((AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner()))
                .buyProposition(unit, goods, gold);
        Element tpaElement = Message.createNewRootElement("buyPropositionAnswer");
        tpaElement.setAttribute("gold", Integer.toString(returnGold));
        return tpaElement;
    }

(startLine=2848 endLine=2881 srcPath=/root/NewExperiment/freecolFilter/00453/src/net/sf/freecol/server/control/InGameInputHandler.java)
    private Element buy(Connection connection, Element element) {
        ServerPlayer player = getFreeColServer().getPlayer(connection);
        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute("unit"));
        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));
        IndianSettlement settlement = (IndianSettlement) goods.getLocation();
        int gold = Integer.parseInt(element.getAttribute("gold"));
        if (gold <= 0) {
            throw new IllegalArgumentException();
        }
        if (goods.getAmount() > 100) {
            throw new IllegalArgumentException();
        }
        if (unit == null) {
            throw new IllegalArgumentException("Could not find 'Unit' with specified ID: "
                    + element.getAttribute("unit"));
        }
        if (settlement == null) {
            throw new IllegalArgumentException("Goods are not in a settlement");
        }
        if (unit.getOwner() != player) {
            throw new IllegalStateException("Not your unit!");
        }
        if (unit.getTile().getDistanceTo(settlement.getTile()) > 1) {
            throw new IllegalStateException("Not adjacent to settlemen!");
        }
        int returnGold = ((AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner()))
                .buyProposition(unit, goods, gold);
        if (returnGold != gold) {
            throw new IllegalArgumentException("This was not the price we agreed upon! Cheater?");
        }
        unit.buy(settlement, goods, gold);
        
        return null;
    }

commonMethod: 
(startLine=985 endLine=1021 srcPath=/root/NewExperiment/freecolFilter/00454/src/net/sf/freecol/server/control/InGameController.java)
    public java.util.Map<String,Object> getTransactionSession(Unit unit, Settlement settlement){
        java.util.Map<String, java.util.Map<String,Object>> unitTransactions = null;
        java.util.Map<String,java.util.Map<String,java.util.Map>> transaction = null;
        if(transactionSessions.containsKey(unit.getId())){
            unitTransactions = transactionSessions.get(unit.getId());
            if(unitTransactions.containsKey(settlement.getId())){
                return unitTransactions.get(settlement.getId());
            }
        }
        // Session does not exist, create, store, and return it
        java.util.Map<String,Object> session = new HashMap<String,Object>();
        // default values
        session.put("canGift", true);
        session.put("canSell", true);
        session.put("canBuy", true);
        session.put("actionTaken", false);
        session.put("unitMoves", unit.getMovesLeft());
        if(settlement.getOwner().getStance(unit.getOwner()) == Stance.WAR){
            session.put("canSell", false);
            session.put("canBuy", false);
        }
        else{
            if(unit.getSpaceLeft() == 0){
                session.put("canBuy", false);
            }
            if(unit.getSpaceTaken() == 0){
                session.put("canSell", false);
            }
        }
        // unit has no open transactions
        if(unitTransactions == null){
            unitTransactions = new HashMap<String,java.util.Map<String, Object>>();
            transactionSessions.put(unit.getId(), unitTransactions);
        }
        unitTransactions.put(settlement.getId(), session);
        return session;
    }


, Instance #
frags: 
(startLine=479 endLine=565 srcPath=/root/NewExperiment/freecolFilter/00480/src/net/sf/freecol/client/gui/panel/ProductionMultiplesLabel.java)
    public void paintComponent(Graphics g) {

        if (goodsIcon == null || (totalProduction == 0 && stockNumber<0) ) {
            return;
        }

        int drawImageCount = Math.min(Math.abs(totalProduction), maxIcons);
        if (drawImageCount==0) {
            drawImageCount=1;
        }

        int iconWidth = getMaximumIconWidth();
        int pixelsPerIcon = iconWidth / 2;
        if (pixelsPerIcon - iconWidth < 0) {
            pixelsPerIcon = (compressedWidth - iconWidth) / drawImageCount;
        }
        int maxSpacing = iconWidth;

        /* TODO Tune this: all icons are the same width, but many
         * do not take up the whole width, eg. bells
         */
        boolean iconsTooFarApart = pixelsPerIcon > maxSpacing;
        if (iconsTooFarApart) {
            pixelsPerIcon = maxSpacing;
        }
        int coverage = pixelsPerIcon * (drawImageCount - 1) + iconWidth;
        int leftOffset = 0;

        boolean needToCenterImages = centered && coverage < getWidth();
        if (needToCenterImages) {
            leftOffset = (getWidth() - coverage)/2;
        }

        int width = Math.max(getWidth(), coverage);
        int height = Math.max(getHeight(), getMaximumIconHeight());
        setSize(new Dimension(width, height));

        // Go through all icons for this label
        int countImages = 0;
        int leftImageOffset = 0;
        for( int indexGoods = 0; indexGoods < goodsIcon.length; indexGoods++ ) {
            // Draw the icons onto the image:
            for (int i = 0; i < Math.abs(production[indexGoods]); i++) {
//                goodsIcon[indexGoods].paintIcon(null, g, leftOffset + i*pixelsPerIcon, 0);
                goodsIcon[indexGoods].paintIcon(null, g, leftOffset + leftImageOffset, 0);
            	leftImageOffset += pixelsPerIcon;
                if( ++countImages >= drawImageCount ) {
                	indexGoods = goodsIcon.length;
                	break;
                }
            }
        }
        

        if (totalProduction >= displayNumber || totalProduction < 0 || maxIcons < totalProduction || stockNumber>0) {
            String number = "";
            if (stockNumber >= 0 ) {
                number = Integer.toString(stockNumber);  // Show stored items in ReportColonyPanel
                drawPlus = true;
            }
            if (totalProduction >=0 && drawPlus ) {
                number = number + "+" + Integer.toString(totalProduction);
            } else {
                number = number + Integer.toString(totalProduction);
            }
            if (maximumProduction > totalProduction && totalProduction > 0) {
                number = number + "/" + String.valueOf(maximumProduction);
            }
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                                 RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_RENDERING,
                                 RenderingHints.VALUE_RENDER_QUALITY);

            TextLayout layout = new TextLayout(number, parent.getGUI().getTextFont(),
                                               g2d.getFontRenderContext());
            Shape outline = layout.getOutline(null);
            double textOffset = leftOffset + (coverage - layout.getBounds().getWidth())/2;
            double heightOffset = (getMaximumIconHeight() - layout.getBounds().getHeight())/2
                + layout.getAscent();
            g2d.setColor(getForeground());
            g2d.translate(textOffset, heightOffset);
            g2d.fill(outline);
            g2d.setColor(Color.BLACK);
            g2d.draw(outline);
        }
    }

(startLine=417 endLine=493 srcPath=/root/NewExperiment/freecolFilter/00480/src/net/sf/freecol/client/gui/panel/ProductionLabel.java)
    public void paintComponent(Graphics g) {

        if (goodsIcon == null || (production == 0 && stockNumber<0) ) {
            return;
        }

        int drawImageCount = Math.min(Math.abs(production), maxIcons);
        if (drawImageCount==0) {
            drawImageCount=1;
        }

        int iconWidth = goodsIcon.getIconWidth();
        int pixelsPerIcon = iconWidth / 2;
        if (pixelsPerIcon - iconWidth < 0) {
            pixelsPerIcon = (compressedWidth - iconWidth) / drawImageCount;
        }
        int maxSpacing = iconWidth;

        /* TODO Tune this: all icons are the same width, but many
         * do not take up the whole width, eg. bells
         */
        boolean iconsTooFarApart = pixelsPerIcon > maxSpacing;
        if (iconsTooFarApart) {
            pixelsPerIcon = maxSpacing;
        }
        int coverage = pixelsPerIcon * (drawImageCount - 1) + iconWidth;
        int leftOffset = 0;

        boolean needToCenterImages = centered && coverage < getWidth();
        if (needToCenterImages) {
            leftOffset = (getWidth() - coverage)/2;
        }

        int width = Math.max(getWidth(), coverage);
        int height = Math.max(getHeight(), goodsIcon.getImage().getHeight(null));
        setSize(new Dimension(width, height));


        // Draw the icons onto the image:
        for (int i = 0; i < drawImageCount; i++) {
            goodsIcon.paintIcon(null, g, leftOffset + i*pixelsPerIcon, 0);
        }

        if (production >= displayNumber || production < 0 || maxIcons < production || stockNumber > 0
            || (maximumProduction > production && production > 0)) {
            String number = "";
            if (stockNumber >= 0 ) {
                number = Integer.toString(stockNumber);  // Show stored items in ReportColonyPanel
                drawPlus = true;
            }
            if (production >=0 && drawPlus ) {
                number = number + "+" + Integer.toString(production);
            } else {
                number = number + Integer.toString(production);
            }
            if (maximumProduction > production && production > 0) {
                number = number + "/" + String.valueOf(maximumProduction);
            }
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                                 RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_RENDERING,
                                 RenderingHints.VALUE_RENDER_QUALITY);

            TextLayout layout = new TextLayout(number, parent.getGUI().getTextFont(),
                                               g2d.getFontRenderContext());
            Shape outline = layout.getOutline(null);
            double textOffset = leftOffset + (coverage - layout.getBounds().getWidth())/2;
            double heightOffset = (goodsIcon.getIconHeight() - layout.getBounds().getHeight())/2
                + layout.getAscent();
            g2d.setColor(getForeground());
            g2d.translate(textOffset, heightOffset);
            g2d.fill(outline);
            g2d.setColor(Color.BLACK);
            g2d.draw(outline);
        }
    }

commonMethod: 
(startLine=1391 endLine=1408 srcPath=/root/NewExperiment/freecolFilter/00481/src/net/sf/freecol/client/gui/GUI.java)
    /**
     * Creates an image with a string of a given color and with 
     * a black border around the glyphs.
     *
     * @param c A <code>JComponent</code>-object for getting a
     *       <code>Font</code>.
     * @param nameString The <code>String</code> to make an image of.
     * @param color The <code>Color</code> to use when displaying 
     *       the <code>nameString</code>.
     * @param maxWidth The maximum width of the image. The size of 
     *       the <code>Font</code> will be adjusted if the image gets 
     *       larger than this value.
     * @param preferredFontSize The preferred font size.
     * @return The image that was created.
     */
    public BufferedImage createStringImage(JComponent c, String nameString, Color color, int maxWidth, int preferredFontSize) {
        return createStringImage(c, null, nameString, color, maxWidth, preferredFontSize);
    }    


, Instance #
frags: 
(startLine=533 endLine=564 srcPath=/root/NewExperiment/freecolFilter/00480/src/net/sf/freecol/client/gui/panel/ProductionMultiplesLabel.java)
        if (totalProduction >= displayNumber || totalProduction < 0 || maxIcons < totalProduction || stockNumber>0) {
            String number = "";
            if (stockNumber >= 0 ) {
                number = Integer.toString(stockNumber);  // Show stored items in ReportColonyPanel
                drawPlus = true;
            }
            if (totalProduction >=0 && drawPlus ) {
                number = number + "+" + Integer.toString(totalProduction);
            } else {
                number = number + Integer.toString(totalProduction);
            }
            if (maximumProduction > totalProduction && totalProduction > 0) {
                number = number + "/" + String.valueOf(maximumProduction);
            }
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                                 RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_RENDERING,
                                 RenderingHints.VALUE_RENDER_QUALITY);

            TextLayout layout = new TextLayout(number, parent.getGUI().getTextFont(),
                                               g2d.getFontRenderContext());
            Shape outline = layout.getOutline(null);
            double textOffset = leftOffset + (coverage - layout.getBounds().getWidth())/2;
            double heightOffset = (getMaximumIconHeight() - layout.getBounds().getHeight())/2
                + layout.getAscent();
            g2d.setColor(getForeground());
            g2d.translate(textOffset, heightOffset);
            g2d.fill(outline);
            g2d.setColor(Color.BLACK);
            g2d.draw(outline);
        }

(startLine=461 endLine=492 srcPath=/root/NewExperiment/freecolFilter/00480/src/net/sf/freecol/client/gui/panel/ProductionLabel.java)
            || (maximumProduction > production && production > 0)) {
            String number = "";
            if (stockNumber >= 0 ) {
                number = Integer.toString(stockNumber);  // Show stored items in ReportColonyPanel
                drawPlus = true;
            }
            if (production >=0 && drawPlus ) {
                number = number + "+" + Integer.toString(production);
            } else {
                number = number + Integer.toString(production);
            }
            if (maximumProduction > production && production > 0) {
                number = number + "/" + String.valueOf(maximumProduction);
            }
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                                 RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_RENDERING,
                                 RenderingHints.VALUE_RENDER_QUALITY);

            TextLayout layout = new TextLayout(number, parent.getGUI().getTextFont(),
                                               g2d.getFontRenderContext());
            Shape outline = layout.getOutline(null);
            double textOffset = leftOffset + (coverage - layout.getBounds().getWidth())/2;
            double heightOffset = (goodsIcon.getIconHeight() - layout.getBounds().getHeight())/2
                + layout.getAscent();
            g2d.setColor(getForeground());
            g2d.translate(textOffset, heightOffset);
            g2d.fill(outline);
            g2d.setColor(Color.BLACK);
            g2d.draw(outline);
        }

commonMethod: 
(startLine=1391 endLine=1408 srcPath=/root/NewExperiment/freecolFilter/00481/src/net/sf/freecol/client/gui/GUI.java)
    /**
     * Creates an image with a string of a given color and with 
     * a black border around the glyphs.
     *
     * @param c A <code>JComponent</code>-object for getting a
     *       <code>Font</code>.
     * @param nameString The <code>String</code> to make an image of.
     * @param color The <code>Color</code> to use when displaying 
     *       the <code>nameString</code>.
     * @param maxWidth The maximum width of the image. The size of 
     *       the <code>Font</code> will be adjusted if the image gets 
     *       larger than this value.
     * @param preferredFontSize The preferred font size.
     * @return The image that was created.
     */
    public BufferedImage createStringImage(JComponent c, String nameString, Color color, int maxWidth, int preferredFontSize) {
        return createStringImage(c, null, nameString, color, maxWidth, preferredFontSize);
    }    


, Instance #
frags: 
(startLine=125 endLine=154 srcPath=/root/NewExperiment/freecolFilter/00501/src/net/sf/freecol/client/gui/panel/PreCombatDialog.java)
        for (Modifier modifier : offence) {
            FreeColGameObjectType source = modifier.getSource();
            String sourceName;
            if (source == null) {
                sourceName = "???";
            } else {
                sourceName = source.getName();
            }
            add(new JLabel(sourceName), higConst.rc(row, offenceLabelColumn));
            String bonus = getModifierFormat().format(modifier.getValue());
            switch(modifier.getType()) {
            case ADDITIVE:
                if (modifier.getValue() > 0) {
                    bonus = "+" + bonus;
                }
                break;
            case PERCENTAGE:
                if (modifier.getValue() > 0) {
                    bonus = "+" + bonus;
                }
                add(new JLabel("%"), higConst.rc(row, offencePercentageColumn));
                break;
            case MULTIPLICATIVE:
                bonus = "\u00D7" + bonus;
                break;
            default:
            }                
            add(new JLabel(bonus), higConst.rc(row, offenceValueColumn, "r"));
            row += 2;
        }

(startLine=185 endLine=218 srcPath=/root/NewExperiment/freecolFilter/00501/src/net/sf/freecol/client/gui/panel/PreCombatDialog.java)
        for (Modifier modifier : defence) {
            FreeColGameObjectType source = modifier.getSource();
            String sourceString = null;
            if (source == null) {
                sourceString = "???";
            } else {
                sourceString = Messages.message(source.getName());
            }
            add(new JLabel(sourceString),
                higConst.rc(row, defenceLabelColumn));
            String bonus = getModifierFormat().format(modifier.getValue());
            if (modifier.getValue() == Modifier.UNKNOWN) {
                bonus = "???";
            }
            switch(modifier.getType()) {
            case ADDITIVE:
                if (modifier.getValue() > 0) {
                    bonus = "+" + bonus;
                }
                break;
            case PERCENTAGE:
                if (modifier.getValue() > 0) {
                    bonus = "+" + bonus;
                }
                add(new JLabel("%"), higConst.rc(row, defencePercentageColumn));
                break;
            case MULTIPLICATIVE:
                bonus = "\u00D7" + bonus;
                break;
            default:
            }                
            add(new JLabel(bonus), higConst.rc(row, defenceValueColumn, "r"));
            row += 2;
        }

commonMethod: 
(startLine=177 endLine=219 srcPath=/root/NewExperiment/freecolFilter/00502/src/net/sf/freecol/client/gui/panel/PreCombatDialog.java)
    private boolean addModifier(Modifier modifier, boolean newline, int skip) {
        String constraint = null;
        if (newline) {
            constraint = "newline";
        }
        if (skip > 0) {
            if (constraint == null) {
                constraint = "skip " + skip;
            } else {
                constraint += ", skip " + skip;
            }
        }
        FreeColGameObjectType source = modifier.getSource();
        String sourceName = "???";
        if (source != null) {
            sourceName = source.getName();
        }
        add(new JLabel(sourceName), constraint);
        String bonus = getModifierFormat().format(modifier.getValue());
        boolean percent = false;
        switch(modifier.getType()) {
        case ADDITIVE:
            if (modifier.getValue() > 0) {
                bonus = "+" + bonus;
            }
            break;
        case PERCENTAGE:
            if (modifier.getValue() > 0) {
                bonus = "+" + bonus;
            }
            percent = true;
            break;
        case MULTIPLICATIVE:
            bonus = "\u00D7" + bonus;
            break;
        default:
        }                
        add(new JLabel(bonus));
        if (percent) {
            add(new JLabel("%"));
        }
        return percent;
    }


, Instance #
frags: 
(startLine=265 endLine=274 srcPath=/root/NewExperiment/freecolFilter/00516/src/net/sf/freecol/client/gui/panel/ReportProductionPanel.java)
                if (newValue > 0 && percentage < 50) {
                    int required = (Colony.LIBERTY_PER_REBEL * count) / 2;
                    int turns = required / newValue;
                    if (required % newValue > 0) {
                        turns++;
                    }
                    newLabel = new JLabel(String.valueOf(turns), JLabel.TRAILING);
                    newLabel.setBorder(FreeColPanel.CELLBORDER);
                    add(newLabel, higConst.rc(row, percent50Column));
                } else {

(startLine=279 endLine=288 srcPath=/root/NewExperiment/freecolFilter/00516/src/net/sf/freecol/client/gui/panel/ReportProductionPanel.java)
                if (newValue > 0 && percentage < 100) {
                    int required = Colony.LIBERTY_PER_REBEL * count;
                    int turns = required / newValue;
                    if (required % newValue > 0) {
                        turns++;
                    }
                    newLabel = new JLabel(String.valueOf(turns), JLabel.TRAILING);
                    newLabel.setBorder(FreeColPanel.CELLBORDER);
                    add(newLabel, higConst.rc(row, percent100Column));
                } else {

commonMethod: 
(startLine=251 endLine=260 srcPath=/root/NewExperiment/freecolFilter/00517/src/net/sf/freecol/client/gui/panel/FreeColPanel.java)
    public static JButton getLinkButton(String text, Icon icon, String action) {
        JButton button = new JButton(text, icon);
        button.setMargin(emptyMargin);
        button.setOpaque(false);
        button.setForeground(LINK_COLOR);
        button.setAlignmentY(0.8f);
        button.setBorder(BorderFactory.createEmptyBorder());
        button.setActionCommand(action);
        return button;
    }


, Instance #
frags: 
(startLine=265 endLine=274 srcPath=/root/NewExperiment/freecolFilter/00516/src/net/sf/freecol/client/gui/panel/ReportProductionPanel.java)
                if (newValue > 0 && percentage < 50) {
                    int required = (Colony.LIBERTY_PER_REBEL * count) / 2;
                    int turns = required / newValue;
                    if (required % newValue > 0) {
                        turns++;
                    }
                    newLabel = new JLabel(String.valueOf(turns), JLabel.TRAILING);
                    newLabel.setBorder(FreeColPanel.CELLBORDER);
                    add(newLabel, higConst.rc(row, percent50Column));
                } else {

(startLine=279 endLine=288 srcPath=/root/NewExperiment/freecolFilter/00516/src/net/sf/freecol/client/gui/panel/ReportProductionPanel.java)
                if (newValue > 0 && percentage < 100) {
                    int required = Colony.LIBERTY_PER_REBEL * count;
                    int turns = required / newValue;
                    if (required % newValue > 0) {
                        turns++;
                    }
                    newLabel = new JLabel(String.valueOf(turns), JLabel.TRAILING);
                    newLabel.setBorder(FreeColPanel.CELLBORDER);
                    add(newLabel, higConst.rc(row, percent100Column));
                } else {

commonMethod: 
(startLine=64 endLine=70 srcPath=/root/NewExperiment/freecolFilter/00517/src/net/sf/freecol/common/model/BuildingType.java)
    public BuildingType getFirstLevel() {
        BuildingType buildingType = this;
        while (buildingType.getUpgradesFrom() != null) {
            buildingType = buildingType.getUpgradesFrom();
        }
        return buildingType;
    }


, Instance #
frags: 
(startLine=265 endLine=274 srcPath=/root/NewExperiment/freecolFilter/00516/src/net/sf/freecol/client/gui/panel/ReportProductionPanel.java)
                if (newValue > 0 && percentage < 50) {
                    int required = (Colony.LIBERTY_PER_REBEL * count) / 2;
                    int turns = required / newValue;
                    if (required % newValue > 0) {
                        turns++;
                    }
                    newLabel = new JLabel(String.valueOf(turns), JLabel.TRAILING);
                    newLabel.setBorder(FreeColPanel.CELLBORDER);
                    add(newLabel, higConst.rc(row, percent50Column));
                } else {

(startLine=279 endLine=288 srcPath=/root/NewExperiment/freecolFilter/00516/src/net/sf/freecol/client/gui/panel/ReportProductionPanel.java)
                if (newValue > 0 && percentage < 100) {
                    int required = Colony.LIBERTY_PER_REBEL * count;
                    int turns = required / newValue;
                    if (required % newValue > 0) {
                        turns++;
                    }
                    newLabel = new JLabel(String.valueOf(turns), JLabel.TRAILING);
                    newLabel.setBorder(FreeColPanel.CELLBORDER);
                    add(newLabel, higConst.rc(row, percent100Column));
                } else {

commonMethod: 
(startLine=99 endLine=198 srcPath=/root/NewExperiment/freecolFilter/00517/src/net/sf/freecol/client/gui/panel/ReportProductionPanel.java)
    private void update() {

        List<GoodsType> selectedTypes = new ArrayList<GoodsType>();

        reportPanel.removeAll();

        reportPanel.add(selectLabel, "span, split " + (NUMBER_OF_GOODS + 2));

        for (int index = 0; index < NUMBER_OF_GOODS; index++) {
            reportPanel.add(boxes[index]);
            int selectedIndex = boxes[index].getSelectedIndex();
            if (selectedIndex > 0) {
                selectedTypes.add(goodsTypes.get(selectedIndex - 1));
            }
        }

        reportPanel.add(selectButton, "wrap 20");

        if (!selectedTypes.isEmpty()) {
            Player player = getCanvas().getClient().getMyPlayer();
            List<Colony> colonies = new ArrayList<Colony>(player.getColonies());

            TypeCountMap<BuildingType> buildingCount = new TypeCountMap<BuildingType>();
            List<List<BuildingType>> basicBuildingTypes = new ArrayList<List<BuildingType>>();
            for (GoodsType goodsType : selectedTypes) {
                List<BuildingType> buildingTypes = new ArrayList<BuildingType>();
                for (BuildingType buildingType : FreeCol.getSpecification().getBuildingTypeList()) {
                    if (goodsType.equals(buildingType.getProducedGoodsType())
                        || !buildingType.getModifierSet(goodsType.getId()).isEmpty()) {
                        BuildingType firstLevel = buildingType.getFirstLevel();
                        if (!buildingTypes.contains(firstLevel)) {
                            buildingTypes.add(firstLevel);
                        }
                    }
                }
                basicBuildingTypes.add(buildingTypes);
            }

            JLabel newLabel;

            // labels
            newLabel = new JLabel(Messages.message("Colony"));
            newLabel.setBorder(FreeColPanel.TOPLEFTCELLBORDER);
            reportPanel.add(newLabel, "newline 20");

            for (int index = 0; index < selectedTypes.size(); index++) {
                newLabel = new JLabel(selectedTypes.get(index).getName());
                newLabel.setBorder(FreeColPanel.TOPCELLBORDER);
                reportPanel.add(newLabel);

                for (BuildingType buildingType : basicBuildingTypes.get(index)) {
                    newLabel = new JLabel(buildingType.getName());
                    newLabel.setBorder(FreeColPanel.TOPCELLBORDER);
                    reportPanel.add(newLabel);
                }
            }


            Collections.sort(colonies, getCanvas().getClient().getClientOptions().getColonyComparator());

            int[] totalProduction = new int[selectedTypes.size()];

            for (Colony colony : colonies) {

                // colonyButton
                JButton colonyButton = getLinkButton(colony.getName(), null, colony.getId());
                colonyButton.setBorder(FreeColPanel.LEFTCELLBORDER);
                reportPanel.add(colonyButton, "newline");

                // production
                for (int index = 0; index < selectedTypes.size(); index++) {
                    GoodsType goodsType = selectedTypes.get(index);
                    int newValue = colony.getProductionNetOf(goodsType);
                    totalProduction[index] += newValue;
                    Goods goods = new Goods(colony.getGame(), colony, goodsType, newValue);
                    GoodsLabel goodsLabel = new GoodsLabel(goods, getCanvas());
                    goodsLabel.setHorizontalAlignment(JLabel.LEADING);
                    goodsLabel.setBorder(FreeColPanel.CELLBORDER);
                    reportPanel.add(goodsLabel);

                    for (BuildingType buildingType : basicBuildingTypes.get(index)) {
                        Building building = colony.getBuilding(buildingType);
                        if (building == null) {
                            newLabel = new JLabel();
                            newLabel.setBorder(FreeColPanel.CELLBORDER);
                            reportPanel.add(newLabel);
                        } else {
                            buildingCount.incrementCount(building.getType(), 1);
                            BuildingPanel buildingPanel = new BuildingPanel(building, getCanvas());
                            buildingPanel.setBorder(FreeColPanel.CELLBORDER);
                            reportPanel.add(buildingPanel);
                        }
                    }
                }
            }

        }
        revalidate();
        repaint();
    }


, Instance #
frags: 
(startLine=426 endLine=434 srcPath=/root/NewExperiment/freecolFilter/00538/src/net/sf/freecol/common/model/Market.java)
                if (data.getOldPrice() > data.getCostToBuy()) {
                    addModelMessage(owner.getEurope(), ModelMessage.MessageType.MARKET_PRICES, goodsType,
                                    "model.market.priceDecrease",
                                    "%europe%", owner.getEurope().getName(),
                                    "%goods%", goodsType.getName(),
                                    "%buy%", String.valueOf(data.getCostToBuy()),
                                    "%sell%", String.valueOf(data.getPaidForSale()));
                             
                } else if (data.getOldPrice() < data.getCostToBuy()) {

(startLine=434 endLine=441 srcPath=/root/NewExperiment/freecolFilter/00538/src/net/sf/freecol/common/model/Market.java)
                } else if (data.getOldPrice() < data.getCostToBuy()) {
                    addModelMessage(owner.getEurope(), ModelMessage.MessageType.MARKET_PRICES, goodsType,
                                    "model.market.priceIncrease",
                                    "%europe%", owner.getEurope().getName(),
                                    "%goods%", goodsType.getName(),
                                    "%buy%", String.valueOf(data.getCostToBuy()),
                                    "%sell%", String.valueOf(data.getPaidForSale()));
                }

commonMethod: 
(startLine=582 endLine=594 srcPath=/root/NewExperiment/freecolFilter/00539/src/net/sf/freecol/common/model/Player.java)
    /**
     * What is the name of the player's market?
     * Following a declaration of independence we are assumed to trade
     * broadly with any European market rather than a specific port.
     *
     * @return A name for the player's market.
     */
    public String getMarketName() {
        Europe europe = getEurope();

        return (europe == null) ? Messages.message("model.market.independent")
            : europe.getName();
    }


, Instance #
frags: 
(startLine=157 endLine=167 srcPath=/root/NewExperiment/freecolFilter/00553/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMission.java)
                        || ((Ownable) target).getOwner() == enemy) {
                        Element element = Message.createNewRootElement("attack");
                        element.setAttribute("unit", unit.getId());
                        element.setAttribute("direction", direction.toString());

                        try {
                            connection.ask(element);
                        } catch (IOException e) {
                            logger.warning("Could not send message!");
                        }
                    }

(startLine=202 endLine=213 srcPath=/root/NewExperiment/freecolFilter/00553/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
                    if (unitTension >= Tension.Level.CONTENT.getLimit()) {
                        // if we didn't get what we wanted, attack
                        Element element = Message.createNewRootElement("attack");
                        element.setAttribute("unit", unit.getId());
                        element.setAttribute("direction", r.toString());

                        try {
                            connection.ask(element);
                        } catch (IOException e) {
                            logger.warning("Could not send message!");
                        }
                    }

(startLine=118 endLine=129 srcPath=/root/NewExperiment/freecolFilter/00553/src/net/sf/freecol/server/ai/mission/UnitWanderHostileMission.java)
                unit.getMoveType(direction) == MoveType.ATTACK) {
                Element element = Message.createNewRootElement("attack");
                element.setAttribute("unit", unit.getId());
                element.setAttribute("direction", direction.toString());

                try {
                    connection.ask(element);
                } catch (IOException e) {
                    logger.warning("Could not send message!");
                }

            }

(startLine=161 endLine=175 srcPath=/root/NewExperiment/freecolFilter/00553/src/net/sf/freecol/server/ai/mission/DefendSettlementMission.java)
            if (bestTarget != null) {
                // this must be true, since it is the only way to get
                // a bestTarget
                assert bestDirection != null;
                Element element = Message.createNewRootElement("attack");
                element.setAttribute("unit", unit.getId());
                element.setAttribute("direction", bestDirection.toString());

                try {
                    connection.ask(element);
                } catch (IOException e) {
                    logger.warning("Could not send message!");
                }               
                return;
            }

commonMethod: 
(startLine=502 endLine=513 srcPath=/root/NewExperiment/freecolFilter/00554/src/net/sf/freecol/server/ai/mission/Mission.java)
    public void attack(Connection connection, Unit unit, Direction direction) {
        assert direction != null;
        Element element = Message.createNewRootElement("attack");
        element.setAttribute("unit", unit.getId());
        element.setAttribute("direction", direction.toString());
    
        try {
            connection.ask(element);
        } catch (IOException e) {
            logger.warning("Could not send message!");
        }
    }


, Instance #
frags: 
(startLine=1234 endLine=1459 srcPath=/root/NewExperiment/freecolFilter/00569/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void secureColony(Colony colony) {
        final EquipmentType muskets = FreeCol.getSpecification().getEquipmentType("model.equipment.muskets");
        final EquipmentType horses = FreeCol.getSpecification().getEquipmentType("model.equipment.horses");

        Map map = getPlayer().getGame().getMap();
        int olddefenders = 0;
        int defenders = 0;
        int threat = 0;
        int worstThreat = 0;
        Location bestTarget = null;
        Iterator<Unit> ui = colony.getTile().getUnitIterator();
        while (ui.hasNext()) {
            if ((ui.next()).isDefensiveUnit()) {
                defenders++;
            }
        }
        Iterator<Position> positionIterator = map.getCircleIterator(colony.getTile().getPosition(), true, 5);
        while (positionIterator.hasNext()) {
            Tile t = map.getTile(positionIterator.next());
            if (t.getFirstUnit() != null) {
                if (t.getFirstUnit().getOwner() == getPlayer()) {
                    Iterator<Unit> uit = t.getUnitIterator();
                    while (uit.hasNext()) {
                        if (uit.next().isOffensiveUnit()) {
                            defenders++;
                        }
                    }
                } else {
                    int thisThreat = 0;
                    if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MAJOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat += 2;
                            }
                        }
                    } else if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MINOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat++;
                            }
                        }
                    }
                    threat += thisThreat;
                    if (thisThreat > worstThreat) {
                        if (t.getSettlement() != null) {
                            bestTarget = t.getSettlement();
                        } else {
                            bestTarget = t.getFirstUnit();
                        }
                        worstThreat = thisThreat;
                    }
                }
            }
        }
        olddefenders = defenders;
        if (colony.hasStockade()) {
            defenders += (defenders * (colony.getStockade().getLevel()) / 2);
        }
        if (threat > defenders) {
            // We're under attack! Man the stockade!
            ArrayList<Unit> recruits = new ArrayList<Unit>();
            ArrayList<Unit> others = new ArrayList<Unit>();
            int inColonyCount = 0;
            // Let's make some more soldiers, if we can.
            // First, find some people we can recruit.
            ui = colony.getUnitIterator();
            while (ui.hasNext()) {
                Unit u = (ui.next());
                if (u.isOffensiveUnit()) {
                    continue; // don't bother dealing with current
                    // soldiers at the moment
                }
                if (u.getLocation() != colony.getTile()) {
                    // If we are not on the tile we are in the colony.
                    inColonyCount++;
                }
                if (u.hasAbility("model.ability.expertSoldier")) {
                    recruits.add(u);
                } else if (u.hasAbility("model.ability.canBeEquipped")) {
                    others.add(u);
                }
            }
            // ATTENTION: skill may be Integer.MIN_VALUE!
            Collections.sort(others, new Comparator<Unit>() {
                    public int compare(Unit unit1, Unit unit2) {
                        if (unit1.getSkillLevel() < unit2.getSkillLevel()) {
                            return -1;
                        } else if (unit1.getSkillLevel() > unit2.getSkillLevel()) {
                            return 1;
                        } else {
                            return 0;
                        }
                    }});
            recruits.addAll(others);
            // Don't overdo it - leave at least one person behind.
            int recruitCount = threat - defenders;
            if (recruitCount > recruits.size() - 1) {
                recruitCount = recruits.size() - 1;
            }
            if (recruitCount > inColonyCount - 1) {
                recruitCount = inColonyCount - 1;
            }
            // Actually go through and arm our people.
            boolean needMuskets = false;
            boolean needHorses = false;
            ui = recruits.iterator();
            while (ui.hasNext() && recruitCount > 0) {
                Unit u = (ui.next());
                if (!u.isArmed() && u.canBeEquippedWith(muskets)) {
                    recruitCount--;
                    Element equipUnitElement = Message.createNewRootElement("equipUnit");
                    equipUnitElement.setAttribute("unit", u.getId());
                    equipUnitElement.setAttribute("type", muskets.getId());
                    equipUnitElement.setAttribute("amount", "1");
                    u.equipWith(muskets);
                    sendAndWaitSafely(equipUnitElement);
                    Element putOutsideColonyElement = Message.createNewRootElement("putOutsideColony");
                    putOutsideColonyElement.setAttribute("unit", u.getId());
                    u.putOutsideColony();
                    sendAndWaitSafely(putOutsideColonyElement);
                    // Check if the unit can fortify before sending the order
                    if (u.checkSetState(UnitState.FORTIFYING)) {
                        Element changeStateElement = Message.createNewRootElement("changeState");
                        changeStateElement.setAttribute("unit", u.getId());
                        changeStateElement.setAttribute("state", UnitState.FORTIFYING.toString());
                        sendAndWaitSafely(changeStateElement);
                    }
                    olddefenders++;
                    if (!u.isMounted() && u.canBeEquippedWith(horses)) {
                        equipUnitElement = Message.createNewRootElement("equipUnit");
                        equipUnitElement.setAttribute("unit", u.getId());
                        equipUnitElement.setAttribute("type", horses.getId());
                        equipUnitElement.setAttribute("amount", "1");
                        sendAndWaitSafely(equipUnitElement);
                    } else {
                        needHorses = true;
                    }
                } else {
                    needMuskets = true;
                    break;
                }
            }
            AIColony ac = null;
            if (needMuskets || needHorses) {
                Iterator<AIColony> aIterator = getAIColonyIterator();
                while (aIterator.hasNext()) {
                    AIColony temp = aIterator.next();
                    if (temp != null && temp.getColony() == colony) {
                        ac = temp;
                        break;
                    }
                }
            }
            if (needMuskets && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == Goods.MUSKETS) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac
                            .addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - olddefenders) * 50,
                                    Goods.MUSKETS));
                }
            }
            if (needHorses && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == Goods.HORSES) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac.addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - defenders) * 50, Goods.HORSES));
                }
            }
            defenders = olddefenders;
            if (colony.hasStockade()) {
                defenders += (defenders * (colony.getStockade().getLevel()) / 2);
            }
        }
        if (defenders > (threat * 2)) {
            // We're so big and tough, we can go wipe out this threat.
            // Pick someone to go make it happen.
            Unit u = null;
            Iterator<Unit> uit = colony.getUnitIterator();
            while (uit.hasNext()) {
                Unit candidate = uit.next();
                if (candidate.isOffensiveUnit() && candidate.getState() == UnitState.FORTIFIED) {
                    u = candidate;
                    break;
                }
            }
            if (u != null) {
                u.setState(UnitState.ACTIVE);
                u.setLocation(colony.getTile());
                AIUnit newDefenderAI = (AIUnit) getAIMain().getAIObject(u);
                if (bestTarget != null) {
                    newDefenderAI.setMission(new UnitSeekAndDestroyMission(getAIMain(), newDefenderAI, bestTarget));
                } else {
                    newDefenderAI.setMission(new UnitWanderHostileMission(getAIMain(), newDefenderAI));
                }
            }
        }
    }

(startLine=238 endLine=460 srcPath=/root/NewExperiment/freecolFilter/00569/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    protected void secureColony(Colony colony) {
        Map map = getPlayer().getGame().getMap();
        int olddefenders = 0;
        int defenders = 0;
        int threat = 0;
        int worstThreat = 0;
        Location bestTarget = null;
        Iterator<Unit> ui = colony.getTile().getUnitIterator();
        while (ui.hasNext()) {
            if ((ui.next()).isDefensiveUnit()) {
                defenders++;
            }
        }
        Iterator<Position> positionIterator = map.getCircleIterator(colony.getTile().getPosition(), true, 5);
        while (positionIterator.hasNext()) {
            Tile t = map.getTile(positionIterator.next());
            if (t.getFirstUnit() != null) {
                if (t.getFirstUnit().getOwner() == getPlayer()) {
                    Iterator<Unit> uit = t.getUnitIterator();
                    while (uit.hasNext()) {
                        if (uit.next().isOffensiveUnit()) {
                            defenders++;
                        }
                    }
                } else {
                    int thisThreat = 0;
                    if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MAJOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat += 2;
                            }
                        }
                    } else if (getPlayer().getTension(t.getFirstUnit().getOwner()).getValue() >= Tension.TENSION_ADD_MINOR) {
                        Iterator<Unit> uit = t.getUnitIterator();
                        while (uit.hasNext()) {
                            if (uit.next().isOffensiveUnit()) {
                                thisThreat++;
                            }
                        }
                    }
                    threat += thisThreat;
                    if (thisThreat > worstThreat) {
                        if (t.getSettlement() != null) {
                            bestTarget = t.getSettlement();
                        } else {
                            bestTarget = t.getFirstUnit();
                        }
                        worstThreat = thisThreat;
                    }
                }
            }
        }
        olddefenders = defenders;
        if (colony.hasStockade()) {
            defenders += (defenders * (colony.getStockade().getLevel()) / 2);
        }
        if (threat > defenders) {
            // We're under attack! Man the stockade!
            ArrayList<Unit> recruits = new ArrayList<Unit>();
            ArrayList<Unit> others = new ArrayList<Unit>();
            int inColonyCount = 0;
            // Let's make some more soldiers, if we can.
            // First, find some people we can recruit.
            ui = colony.getUnitIterator();
            while (ui.hasNext()) {
                Unit u = (ui.next());
                if (u.isOffensiveUnit()) {
                    continue; // don't bother dealing with current
                    // soldiers at the moment
                }
                if (u.getLocation() != colony.getTile()) {
                    // If we are not on the tile we are in the colony.
                    inColonyCount++;
                }
                if (u.hasAbility("model.ability.expertSoldier")) {
                    recruits.add(u);
                } else if (u.hasAbility("model.ability.canBeEquipped")) {
                    others.add(u);
                }
            }
            // ATTENTION: skill may be Integer.MIN_VALUE!
            Collections.sort(others, new Comparator<Unit>() {
                    public int compare(Unit unit1, Unit unit2) {
                        if (unit1.getSkillLevel() < unit2.getSkillLevel()) {
                            return -1;
                        } else if (unit1.getSkillLevel() > unit2.getSkillLevel()) {
                            return 1;
                        } else {
                            return 0;
                        }
                    }});
            recruits.addAll(others);
            // Don't overdo it - leave at least one person behind.
            int recruitCount = threat - defenders;
            if (recruitCount > recruits.size() - 1) {
                recruitCount = recruits.size() - 1;
            }
            if (recruitCount > inColonyCount - 1) {
                recruitCount = inColonyCount - 1;
            }
            // Actually go through and arm our people.
            boolean needMuskets = false;
            boolean needHorses = false;
            ui = recruits.iterator();
            while (ui.hasNext() && recruitCount > 0) {
                Unit u = (ui.next());
                if (!u.isArmed() && u.canBeEquippedWith(muskets)) {
                    recruitCount--;
                    Element equipUnitElement = Message.createNewRootElement("equipUnit");
                    equipUnitElement.setAttribute("unit", u.getId());
                    equipUnitElement.setAttribute("type", muskets.getId());
                    equipUnitElement.setAttribute("amount", "1");
                    u.equipWith(muskets);
                    sendAndWaitSafely(equipUnitElement);
                    Element putOutsideColonyElement = Message.createNewRootElement("putOutsideColony");
                    putOutsideColonyElement.setAttribute("unit", u.getId());
                    u.putOutsideColony();
                    sendAndWaitSafely(putOutsideColonyElement);
                    // Check if the unit can fortify before sending the order
                    if (u.checkSetState(UnitState.FORTIFYING)) {
                        Element changeStateElement = Message.createNewRootElement("changeState");
                        changeStateElement.setAttribute("unit", u.getId());
                        changeStateElement.setAttribute("state", UnitState.FORTIFYING.toString());
                        sendAndWaitSafely(changeStateElement);
                    }
                    olddefenders++;
                    if (!u.isMounted() && u.canBeEquippedWith(horses)) {
                        equipUnitElement = Message.createNewRootElement("equipUnit");
                        equipUnitElement.setAttribute("unit", u.getId());
                        equipUnitElement.setAttribute("type", horses.getId());
                        equipUnitElement.setAttribute("amount", "1");
                        sendAndWaitSafely(equipUnitElement);
                    } else {
                        needHorses = true;
                    }
                } else {
                    needMuskets = true;
                    break;
                }
            }
            AIColony ac = null;
            if (needMuskets || needHorses) {
                Iterator<AIColony> aIterator = getAIColonyIterator();
                while (aIterator.hasNext()) {
                    AIColony temp = aIterator.next();
                    if (temp != null && temp.getColony() == colony) {
                        ac = temp;
                        break;
                    }
                }
            }
            if (needMuskets && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == Goods.MUSKETS) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac
                        .addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - olddefenders) * 50,
                                                    Goods.MUSKETS));
                }
            }
            if (needHorses && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == Goods.HORSES) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac.addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - defenders) * 50, Goods.HORSES));
                }
            }
            defenders = olddefenders;
            if (colony.hasStockade()) {
                defenders += (defenders * (colony.getStockade().getLevel()) / 2);
            }
        }
        if (defenders > (threat * 2)) {
            // We're so big and tough, we can go wipe out this threat.
            // Pick someone to go make it happen.
            Unit u = null;
            Iterator<Unit> uit = colony.getUnitIterator();
            while (uit.hasNext()) {
                Unit candidate = uit.next();
                if (candidate.isOffensiveUnit() && candidate.getState() == UnitState.FORTIFIED) {
                    u = candidate;
                    break;
                }
            }
            if (u != null) {
                u.setState(UnitState.ACTIVE);
                u.setLocation(colony.getTile());
                AIUnit newDefenderAI = (AIUnit) getAIMain().getAIObject(u);
                if (bestTarget != null) {
                    newDefenderAI.setMission(new UnitSeekAndDestroyMission(getAIMain(), newDefenderAI, bestTarget));
                } else {
                    newDefenderAI.setMission(new UnitWanderHostileMission(getAIMain(), newDefenderAI));
                }
            }
        }
    }

commonMethod: 
(startLine=693 endLine=713 srcPath=/root/NewExperiment/freecolFilter/00570/src/net/sf/freecol/common/model/Unit.java)
    public static Comparator<Unit> getSkillLevelComparator(){
        if(skillLevelComp != null){
            return skillLevelComp;
        }
        
        // Create comparator to sort units by skill level
        // Prefer unit with less qualifications
        skillLevelComp = new Comparator<Unit>(){
            public int compare(Unit u1,Unit u2){
                if(u1.getSkillLevel() < u2.getSkillLevel()){
                    return -1;
                }
                if(u1.getSkillLevel() > u2.getSkillLevel()){
                    return 1;
                }
                return 0;
            }
        };
        
        return skillLevelComp;
    }


, Instance #
frags: 
(startLine=1294 endLine=1435 srcPath=/root/NewExperiment/freecolFilter/00569/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
        if (threat > defenders) {
            // We're under attack! Man the stockade!
            ArrayList<Unit> recruits = new ArrayList<Unit>();
            ArrayList<Unit> others = new ArrayList<Unit>();
            int inColonyCount = 0;
            // Let's make some more soldiers, if we can.
            // First, find some people we can recruit.
            ui = colony.getUnitIterator();
            while (ui.hasNext()) {
                Unit u = (ui.next());
                if (u.isOffensiveUnit()) {
                    continue; // don't bother dealing with current
                    // soldiers at the moment
                }
                if (u.getLocation() != colony.getTile()) {
                    // If we are not on the tile we are in the colony.
                    inColonyCount++;
                }
                if (u.hasAbility("model.ability.expertSoldier")) {
                    recruits.add(u);
                } else if (u.hasAbility("model.ability.canBeEquipped")) {
                    others.add(u);
                }
            }
            // ATTENTION: skill may be Integer.MIN_VALUE!
            Collections.sort(others, new Comparator<Unit>() {
                    public int compare(Unit unit1, Unit unit2) {
                        if (unit1.getSkillLevel() < unit2.getSkillLevel()) {
                            return -1;
                        } else if (unit1.getSkillLevel() > unit2.getSkillLevel()) {
                            return 1;
                        } else {
                            return 0;
                        }
                    }});
            recruits.addAll(others);
            // Don't overdo it - leave at least one person behind.
            int recruitCount = threat - defenders;
            if (recruitCount > recruits.size() - 1) {
                recruitCount = recruits.size() - 1;
            }
            if (recruitCount > inColonyCount - 1) {
                recruitCount = inColonyCount - 1;
            }
            // Actually go through and arm our people.
            boolean needMuskets = false;
            boolean needHorses = false;
            ui = recruits.iterator();
            while (ui.hasNext() && recruitCount > 0) {
                Unit u = (ui.next());
                if (!u.isArmed() && u.canBeEquippedWith(muskets)) {
                    recruitCount--;
                    Element equipUnitElement = Message.createNewRootElement("equipUnit");
                    equipUnitElement.setAttribute("unit", u.getId());
                    equipUnitElement.setAttribute("type", muskets.getId());
                    equipUnitElement.setAttribute("amount", "1");
                    u.equipWith(muskets);
                    sendAndWaitSafely(equipUnitElement);
                    Element putOutsideColonyElement = Message.createNewRootElement("putOutsideColony");
                    putOutsideColonyElement.setAttribute("unit", u.getId());
                    u.putOutsideColony();
                    sendAndWaitSafely(putOutsideColonyElement);
                    // Check if the unit can fortify before sending the order
                    if (u.checkSetState(UnitState.FORTIFYING)) {
                        Element changeStateElement = Message.createNewRootElement("changeState");
                        changeStateElement.setAttribute("unit", u.getId());
                        changeStateElement.setAttribute("state", UnitState.FORTIFYING.toString());
                        sendAndWaitSafely(changeStateElement);
                    }
                    olddefenders++;
                    if (!u.isMounted() && u.canBeEquippedWith(horses)) {
                        equipUnitElement = Message.createNewRootElement("equipUnit");
                        equipUnitElement.setAttribute("unit", u.getId());
                        equipUnitElement.setAttribute("type", horses.getId());
                        equipUnitElement.setAttribute("amount", "1");
                        sendAndWaitSafely(equipUnitElement);
                    } else {
                        needHorses = true;
                    }
                } else {
                    needMuskets = true;
                    break;
                }
            }
            AIColony ac = null;
            if (needMuskets || needHorses) {
                Iterator<AIColony> aIterator = getAIColonyIterator();
                while (aIterator.hasNext()) {
                    AIColony temp = aIterator.next();
                    if (temp != null && temp.getColony() == colony) {
                        ac = temp;
                        break;
                    }
                }
            }
            if (needMuskets && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == Goods.MUSKETS) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac
                            .addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - olddefenders) * 50,
                                    Goods.MUSKETS));
                }
            }
            if (needHorses && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == Goods.HORSES) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac.addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - defenders) * 50, Goods.HORSES));
                }
            }
            defenders = olddefenders;
            if (colony.hasStockade()) {
                defenders += (defenders * (colony.getStockade().getLevel()) / 2);
            }
        }

(startLine=295 endLine=436 srcPath=/root/NewExperiment/freecolFilter/00569/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (threat > defenders) {
            // We're under attack! Man the stockade!
            ArrayList<Unit> recruits = new ArrayList<Unit>();
            ArrayList<Unit> others = new ArrayList<Unit>();
            int inColonyCount = 0;
            // Let's make some more soldiers, if we can.
            // First, find some people we can recruit.
            ui = colony.getUnitIterator();
            while (ui.hasNext()) {
                Unit u = (ui.next());
                if (u.isOffensiveUnit()) {
                    continue; // don't bother dealing with current
                    // soldiers at the moment
                }
                if (u.getLocation() != colony.getTile()) {
                    // If we are not on the tile we are in the colony.
                    inColonyCount++;
                }
                if (u.hasAbility("model.ability.expertSoldier")) {
                    recruits.add(u);
                } else if (u.hasAbility("model.ability.canBeEquipped")) {
                    others.add(u);
                }
            }
            // ATTENTION: skill may be Integer.MIN_VALUE!
            Collections.sort(others, new Comparator<Unit>() {
                    public int compare(Unit unit1, Unit unit2) {
                        if (unit1.getSkillLevel() < unit2.getSkillLevel()) {
                            return -1;
                        } else if (unit1.getSkillLevel() > unit2.getSkillLevel()) {
                            return 1;
                        } else {
                            return 0;
                        }
                    }});
            recruits.addAll(others);
            // Don't overdo it - leave at least one person behind.
            int recruitCount = threat - defenders;
            if (recruitCount > recruits.size() - 1) {
                recruitCount = recruits.size() - 1;
            }
            if (recruitCount > inColonyCount - 1) {
                recruitCount = inColonyCount - 1;
            }
            // Actually go through and arm our people.
            boolean needMuskets = false;
            boolean needHorses = false;
            ui = recruits.iterator();
            while (ui.hasNext() && recruitCount > 0) {
                Unit u = (ui.next());
                if (!u.isArmed() && u.canBeEquippedWith(muskets)) {
                    recruitCount--;
                    Element equipUnitElement = Message.createNewRootElement("equipUnit");
                    equipUnitElement.setAttribute("unit", u.getId());
                    equipUnitElement.setAttribute("type", muskets.getId());
                    equipUnitElement.setAttribute("amount", "1");
                    u.equipWith(muskets);
                    sendAndWaitSafely(equipUnitElement);
                    Element putOutsideColonyElement = Message.createNewRootElement("putOutsideColony");
                    putOutsideColonyElement.setAttribute("unit", u.getId());
                    u.putOutsideColony();
                    sendAndWaitSafely(putOutsideColonyElement);
                    // Check if the unit can fortify before sending the order
                    if (u.checkSetState(UnitState.FORTIFYING)) {
                        Element changeStateElement = Message.createNewRootElement("changeState");
                        changeStateElement.setAttribute("unit", u.getId());
                        changeStateElement.setAttribute("state", UnitState.FORTIFYING.toString());
                        sendAndWaitSafely(changeStateElement);
                    }
                    olddefenders++;
                    if (!u.isMounted() && u.canBeEquippedWith(horses)) {
                        equipUnitElement = Message.createNewRootElement("equipUnit");
                        equipUnitElement.setAttribute("unit", u.getId());
                        equipUnitElement.setAttribute("type", horses.getId());
                        equipUnitElement.setAttribute("amount", "1");
                        sendAndWaitSafely(equipUnitElement);
                    } else {
                        needHorses = true;
                    }
                } else {
                    needMuskets = true;
                    break;
                }
            }
            AIColony ac = null;
            if (needMuskets || needHorses) {
                Iterator<AIColony> aIterator = getAIColonyIterator();
                while (aIterator.hasNext()) {
                    AIColony temp = aIterator.next();
                    if (temp != null && temp.getColony() == colony) {
                        ac = temp;
                        break;
                    }
                }
            }
            if (needMuskets && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == Goods.MUSKETS) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac
                        .addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - olddefenders) * 50,
                                                    Goods.MUSKETS));
                }
            }
            if (needHorses && ac != null) {
                // Check and see if we have already made a GoodsWish for
                // here.
                Iterator<Wish> wishes = ac.getWishIterator();
                boolean made = false;
                while (wishes.hasNext()) {
                    Wish w = wishes.next();
                    if (!(w instanceof GoodsWish)) {
                        continue;
                    }
                    GoodsWish gw = (GoodsWish) w;
                    if (gw.getGoodsType() == Goods.HORSES) {
                        made = true;
                    }
                }
                if (made == false) {
                    // Add a new GoodsWish onto the stack.
                    ac.addGoodsWish(new GoodsWish(getAIMain(), colony, (threat - defenders) * 50, Goods.HORSES));
                }
            }
            defenders = olddefenders;
            if (colony.hasStockade()) {
                defenders += (defenders * (colony.getStockade().getLevel()) / 2);
            }
        }

commonMethod: 
(startLine=693 endLine=713 srcPath=/root/NewExperiment/freecolFilter/00570/src/net/sf/freecol/common/model/Unit.java)
    public static Comparator<Unit> getSkillLevelComparator(){
        if(skillLevelComp != null){
            return skillLevelComp;
        }
        
        // Create comparator to sort units by skill level
        // Prefer unit with less qualifications
        skillLevelComp = new Comparator<Unit>(){
            public int compare(Unit u1,Unit u2){
                if(u1.getSkillLevel() < u2.getSkillLevel()){
                    return -1;
                }
                if(u1.getSkillLevel() > u2.getSkillLevel()){
                    return 1;
                }
                return 0;
            }
        };
        
        return skillLevelComp;
    }


, Instance #
frags: 
(startLine=585 endLine=659 srcPath=/root/NewExperiment/freecolFilter/00589/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    private void cheat() {
        logger.finest("Entering method cheat");
        // TODO-AI-CHEATING: REMOVE WHEN THE AI IS GOOD ENOUGH:
        for (GoodsType goodsType : FreeCol.getSpecification().getGoodsTypeList()) {
            getPlayer().resetArrears(goodsType);
        }
        
        //TODO: This seems to buy units the AIPlayer can't possibly use (see BR#2566180)
        if (getAIMain().getFreeColServer().isSingleplayer() && getPlayer().isAI()
                && getPlayer().getPlayerType() == PlayerType.COLONIAL) {
            Europe europe = getPlayer().getEurope();
            List<UnitType> unitTypes = FreeCol.getSpecification().getUnitTypeList();
            
            if (getRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    unit = this.trainAIUnitInEurope(unitToTrain).getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.MUSKETS, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.HORSES, 50));
                    
                    Element clearSpecialityElement = Message.createNewRootElement("clearSpeciality");
                    clearSpecialityElement.setAttribute("unit", unit.getId());
                    sendAndWaitSafely(clearSpecialityElement);
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }
            if (getRandom().nextInt(40) == 21) {
                int total = 0;
                ArrayList<UnitType> navalUnits = new ArrayList<UnitType>();
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasAbility("model.ability.navalUnit") && unitType.hasPrice()) {
                        navalUnits.add(unitType);
                        total += europe.getUnitPrice(unitType);
                    }
                }
                
                UnitType unitToPurchase = null;
                int random = getRandom().nextInt(total);
                total = 0;
                for (UnitType unitType : navalUnits) {
                    total += unitType.getPrice();
                    if (random < total) {
                        unitToPurchase = unitType;
                        break;
                    }
                }
                getPlayer().modifyGold(europe.getUnitPrice(unitToPurchase));
                this.trainAIUnitInEurope(unitToPurchase);
            }
        }
    }

(startLine=680 endLine=756 srcPath=/root/NewExperiment/freecolFilter/00589/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void cheat() {
        logger.finest("Entering method cheat");
        // TODO-AI-CHEATING: REMOVE WHEN THE AI IS GOOD ENOUGH:
        for (GoodsType goodsType : FreeCol.getSpecification().getGoodsTypeList()) {
            getPlayer().resetArrears(goodsType);
        }

        //TODO: This seems to buy units the AIPlayer can't possibly use (see BR#2566180)
        if (getAIMain().getFreeColServer().isSingleplayer() && getPlayer().isEuropean() && !getPlayer().isREF() && getPlayer().isAI()
                && getPlayer().getPlayerType() == PlayerType.COLONIAL) {
            Europe europe = getPlayer().getEurope();
            List<UnitType> unitTypes = FreeCol.getSpecification().getUnitTypeList();

            if (getRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    AIUnit aiUnit = this.trainAIUnitInEurope(unitToTrain);
                    if (aiUnit != null) unit = aiUnit.getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.MUSKETS, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.HORSES, 50));

                    Element clearSpecialityElement = Message.createNewRootElement("clearSpeciality");
                    clearSpecialityElement.setAttribute("unit", unit.getId());
                    sendAndWaitSafely(clearSpecialityElement);
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }
            if (getRandom().nextInt(40) == 21) {
                int total = 0;
                ArrayList<UnitType> navalUnits = new ArrayList<UnitType>();
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasAbility("model.ability.navalUnit") && unitType.hasPrice()) {
                        navalUnits.add(unitType);
                        total += europe.getUnitPrice(unitType);
                    }
                }

                UnitType unitToPurchase = null;
                int random = getRandom().nextInt(total);
                total = 0;
                for (UnitType unitType : navalUnits) {
                    total += unitType.getPrice();
                    if (random < total) {
                        unitToPurchase = unitType;
                        break;
                    }
                }
                getPlayer().modifyGold(europe.getUnitPrice(unitToPurchase));
                this.trainAIUnitInEurope(unitToPurchase);
            }
        }
    }

commonMethod: 
(startLine=100 endLine=109 srcPath=/root/NewExperiment/freecolFilter/00590/src/net/sf/freecol/common/networking/ClearSpecialityMessage.java)
    /**
     * Convert this ClearSpecialityMessage to XML.
     *
     * @return The XML representation of this message.
     */
    public Element toXMLElement() {
        Element result = createNewRootElement(getXMLElementTagName());
        result.setAttribute("unit", unitId);
        return result;
    }


, Instance #
frags: 
(startLine=598 endLine=634 srcPath=/root/NewExperiment/freecolFilter/00589/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            if (getRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    unit = this.trainAIUnitInEurope(unitToTrain).getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.MUSKETS, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.HORSES, 50));
                    
                    Element clearSpecialityElement = Message.createNewRootElement("clearSpeciality");
                    clearSpecialityElement.setAttribute("unit", unit.getId());
                    sendAndWaitSafely(clearSpecialityElement);
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }

(startLine=693 endLine=731 srcPath=/root/NewExperiment/freecolFilter/00589/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (getRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    AIUnit aiUnit = this.trainAIUnitInEurope(unitToTrain);
                    if (aiUnit != null) unit = aiUnit.getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.MUSKETS, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.HORSES, 50));

                    Element clearSpecialityElement = Message.createNewRootElement("clearSpeciality");
                    clearSpecialityElement.setAttribute("unit", unit.getId());
                    sendAndWaitSafely(clearSpecialityElement);
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }

commonMethod: 
(startLine=100 endLine=109 srcPath=/root/NewExperiment/freecolFilter/00590/src/net/sf/freecol/common/networking/ClearSpecialityMessage.java)
    /**
     * Convert this ClearSpecialityMessage to XML.
     *
     * @return The XML representation of this message.
     */
    public Element toXMLElement() {
        Element result = createNewRootElement(getXMLElementTagName());
        result.setAttribute("unit", unitId);
        return result;
    }


, Instance #
frags: 
(startLine=615 endLine=633 srcPath=/root/NewExperiment/freecolFilter/00589/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.MUSKETS, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.HORSES, 50));
                    
                    Element clearSpecialityElement = Message.createNewRootElement("clearSpeciality");
                    clearSpecialityElement.setAttribute("unit", unit.getId());
                    sendAndWaitSafely(clearSpecialityElement);
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }

(startLine=711 endLine=730 srcPath=/root/NewExperiment/freecolFilter/00589/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.MUSKETS, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(Goods.HORSES, 50));

                    Element clearSpecialityElement = Message.createNewRootElement("clearSpeciality");
                    clearSpecialityElement.setAttribute("unit", unit.getId());
                    sendAndWaitSafely(clearSpecialityElement);
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }

commonMethod: 
(startLine=100 endLine=109 srcPath=/root/NewExperiment/freecolFilter/00590/src/net/sf/freecol/common/networking/ClearSpecialityMessage.java)
    /**
     * Convert this ClearSpecialityMessage to XML.
     *
     * @return The XML representation of this message.
     */
    public Element toXMLElement() {
        Element result = createNewRootElement(getXMLElementTagName());
        result.setAttribute("unit", unitId);
        return result;
    }


, Instance #
frags: 
(startLine=731 endLine=739 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/client/control/InGameInputHandler.java)
                } else {
                    m = new ModelMessage(colony, ModelMessage.MessageType.ACCEPTED_DEMANDS,
                                         unit,
                                         "indianDemand.other.text",
                                         "%nation%", unit.getOwner().getNationAsString(),
                                         "%colony%", colony.getName(),
                                         "%amount%", String.valueOf(goods.getAmount()),
                                         "%goods%", goods.getName());
                }

(startLine=750 endLine=758 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/client/control/InGameInputHandler.java)
                } else {
                    m = new ModelMessage(colony, ModelMessage.MessageType.REJECTED_DEMANDS,
                                         unit,
                                         "indianDemand.other.text",
                                         "%nation%", unit.getOwner().getNationAsString(),
                                         "%colony%", colony.getName(),
                                         "%amount%", String.valueOf(goods.getAmount()),
                                         "%goods%", goods.getName());
                }

(startLine=724 endLine=731 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    m = new ModelMessage(colony, ModelMessage.MessageType.ACCEPTED_DEMANDS,
                                         unit,
                                         "indianDemand.food.text",
                                         "%nation%", unit.getOwner().getNationAsString(),
                                         "%colony%", colony.getName(),
                                         "%amount%", String.valueOf(goods.getAmount()));
                } else {

(startLine=743 endLine=750 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    m = new ModelMessage(colony, ModelMessage.MessageType.REJECTED_DEMANDS,
                                         unit,
                                         "indianDemand.food.text",
                                         "%nation%", unit.getOwner().getNationAsString(),
                                         "%colony%", colony.getName(),
                                         "%amount%", String.valueOf(goods.getAmount()));
                } else {

commonMethod: 
(startLine=311 endLine=323 srcPath=/root/NewExperiment/freecolFilter/00615/src/net/sf/freecol/common/model/ModelMessage.java)
    /**
     * Add a new key and replacement to the ModelMessage. The
     * replacement must be a proper name. This is only possible if the
     * ModelMessage is of type TEMPLATE.
     *
     * @param key a <code>String</code> value
     * @param value a <code>String</code> value
     * @return a <code>ModelMessage</code> value
     */
    public ModelMessage addName(String key, String value) {
        super.addName(key, value);
        return this;
    }


, Instance #
frags: 
(startLine=731 endLine=739 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/client/control/InGameInputHandler.java)
                } else {
                    m = new ModelMessage(colony, ModelMessage.MessageType.ACCEPTED_DEMANDS,
                                         unit,
                                         "indianDemand.other.text",
                                         "%nation%", unit.getOwner().getNationAsString(),
                                         "%colony%", colony.getName(),
                                         "%amount%", String.valueOf(goods.getAmount()),
                                         "%goods%", goods.getName());
                }

(startLine=750 endLine=758 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/client/control/InGameInputHandler.java)
                } else {
                    m = new ModelMessage(colony, ModelMessage.MessageType.REJECTED_DEMANDS,
                                         unit,
                                         "indianDemand.other.text",
                                         "%nation%", unit.getOwner().getNationAsString(),
                                         "%colony%", colony.getName(),
                                         "%amount%", String.valueOf(goods.getAmount()),
                                         "%goods%", goods.getName());
                }

(startLine=724 endLine=731 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    m = new ModelMessage(colony, ModelMessage.MessageType.ACCEPTED_DEMANDS,
                                         unit,
                                         "indianDemand.food.text",
                                         "%nation%", unit.getOwner().getNationAsString(),
                                         "%colony%", colony.getName(),
                                         "%amount%", String.valueOf(goods.getAmount()));
                } else {

(startLine=743 endLine=750 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    m = new ModelMessage(colony, ModelMessage.MessageType.REJECTED_DEMANDS,
                                         unit,
                                         "indianDemand.food.text",
                                         "%nation%", unit.getOwner().getNationAsString(),
                                         "%colony%", colony.getName(),
                                         "%amount%", String.valueOf(goods.getAmount()));
                } else {

commonMethod: 
(startLine=286 endLine=297 srcPath=/root/NewExperiment/freecolFilter/00615/src/net/sf/freecol/common/model/ModelMessage.java)
    /**
     * Add a new key and replacement to the ModelMessage. This is
     * only possible if the ModelMessage is of type TEMPLATE.
     *
     * @param key a <code>String</code> value
     * @param value a <code>String</code> value
     * @return a <code>ModelMessage</code> value
     */
    public ModelMessage add(String key, String value) {
        super.add(key, value);
        return this;
    }


, Instance #
frags: 
(startLine=1911 endLine=1918 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, ModelMessage.MessageType.SONS_OF_LIBERTY,
                                FreeCol.getSpecification().getGoodsType("model.goods.bells"),
                                "model.colony.SoLIncrease", 
                                "%oldSoL%", String.valueOf(oldSonsOfLiberty),
                                "%newSoL%", String.valueOf(sonsOfLiberty),
                                "%colony%", getName());
            } else {

(startLine=1918 endLine=1926 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, ModelMessage.MessageType.SONS_OF_LIBERTY,
                                FreeCol.getSpecification().getGoodsType("model.goods.bells"),
                                "model.colony.SoLDecrease", 
                                "%oldSoL%", String.valueOf(oldSonsOfLiberty),
                                "%newSoL%", String.valueOf(sonsOfLiberty),
                                "%colony%", getName());

            }

commonMethod: 
(startLine=311 endLine=323 srcPath=/root/NewExperiment/freecolFilter/00615/src/net/sf/freecol/common/model/ModelMessage.java)
    /**
     * Add a new key and replacement to the ModelMessage. The
     * replacement must be a proper name. This is only possible if the
     * ModelMessage is of type TEMPLATE.
     *
     * @param key a <code>String</code> value
     * @param value a <code>String</code> value
     * @return a <code>ModelMessage</code> value
     */
    public ModelMessage addName(String key, String value) {
        super.addName(key, value);
        return this;
    }


, Instance #
frags: 
(startLine=1911 endLine=1918 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/common/model/Colony.java)
            if (sonsOfLiberty > oldSonsOfLiberty) {
                addModelMessage(this, ModelMessage.MessageType.SONS_OF_LIBERTY,
                                FreeCol.getSpecification().getGoodsType("model.goods.bells"),
                                "model.colony.SoLIncrease", 
                                "%oldSoL%", String.valueOf(oldSonsOfLiberty),
                                "%newSoL%", String.valueOf(sonsOfLiberty),
                                "%colony%", getName());
            } else {

(startLine=1918 endLine=1926 srcPath=/root/NewExperiment/freecolFilter/00614/src/net/sf/freecol/common/model/Colony.java)
            } else {
                addModelMessage(this, ModelMessage.MessageType.SONS_OF_LIBERTY,
                                FreeCol.getSpecification().getGoodsType("model.goods.bells"),
                                "model.colony.SoLDecrease", 
                                "%oldSoL%", String.valueOf(oldSonsOfLiberty),
                                "%newSoL%", String.valueOf(sonsOfLiberty),
                                "%colony%", getName());

            }

commonMethod: 
(startLine=338 endLine=349 srcPath=/root/NewExperiment/freecolFilter/00615/src/net/sf/freecol/common/model/ModelMessage.java)
    /**
     * Add a key and an integer value to replace it to this
     * StringTemplate.
     *
     * @param key a <code>String</code> value
     * @param amount an <code>int</code> value
     * @return a <code>ModelMessage</code> value
     */
    public ModelMessage addAmount(String key, int amount) {
        super.addAmount(key, amount);
        return this;
    }


, Instance #
frags: 
(startLine=970 endLine=998 srcPath=/root/NewExperiment/freecolFilter/00615/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    private void evade(Unit defender, Colony attackerColony, Unit attackerUnit) {
        String nation = defender.getApparentOwnerName();

        if (attackerColony != null) {
            attackerColony.addModelMessage(new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                                                            "model.unit.shipEvadedBombardment", attackerColony)
                                           .addName("%colony%", attackerColony.getName())
                                           .addName("%unit%", defender.getName())
                                           .addName("%nation%", nation));
            defender.addModelMessage(new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT, 
                                                      "model.unit.shipEvadedBombardment", defender)
                                     .addName("%colony%", attackerColony.getName())
                                     .addName("%unit%", defender.getName())
                                     .addName("%nation%", nation));
        } else if (attackerUnit != null) {
            String attackerNation = attackerUnit.getApparentOwnerName();

            attackerUnit.addModelMessage(new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                                                          "model.unit.enemyShipEvaded", attackerUnit)
                                         .addName("%unit%", attackerUnit.getName())
                                         .addName("%enemyUnit%", defender.getName())
                                         .addName("%enemyNation%", nation));
            defender.addModelMessage(new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                                                      "model.unit.shipEvaded", defender)
                                     .addName("%unit%", defender.getName())
                                     .addName("%enemyUnit%", attackerUnit.getName())
                                     .addName("%enemyNation%", attackerNation));
        }
    }

(startLine=1058 endLine=1092 srcPath=/root/NewExperiment/freecolFilter/00615/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    private void sinkShip(Unit sinkingShip, Colony attackerColony, Unit attackerUnit) {
        String nation = sinkingShip.getApparentOwnerName();

        if (attackerColony != null) {
            attackerColony.addModelMessage(new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                                                            "model.unit.shipSunkByBombardment",
                                                            attackerColony)
                                           .addName("%colony%", attackerColony.getName())
                                           .addName("%unit%", sinkingShip.getName())
                                           .addName("%nation%", nation));
            sinkingShip.addModelMessage(new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                                                         "model.unit.shipSunkByBombardment",
                                                         sinkingShip)
                                        .addName("%colony%", attackerColony.getName())
                                        .addName("%unit%", sinkingShip.getName()));
        } else if (attackerUnit != null) {
            String attackerNation = attackerUnit.getApparentOwnerName();

            attackerUnit.addModelMessage(new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                                                          "model.unit.enemyShipSunk",
                                                          attackerUnit)
                                         .addName("%unit%", attackerUnit.getName())
                                         .addName("%enemyUnit%", sinkingShip.getName())
                                         .addName("%enemyNation%", nation));
            sinkingShip.addModelMessage(new ModelMessage(ModelMessage.MessageType.COMBAT_RESULT,
                                                         "model.unit.shipSunk",
                                                         sinkingShip)
                                        .addName("%unit%", sinkingShip.getName())
                                        .addName("%enemyUnit%", attackerUnit.getName())
                                        .addName("%enemyNation%", attackerNation));
        }
        sinkingShip.getOwner().divertModelMessages(sinkingShip,
                                                   sinkingShip.getTile());
        sinkingShip.dispose();
    }

commonMethod: 
(startLine=351 endLine=362 srcPath=/root/NewExperiment/freecolFilter/00616/src/net/sf/freecol/common/model/ModelMessage.java)
    /**
     * Add a key and a StringTemplate to replace it to this
     * StringTemplate.
     *
     * @param key a <code>String</code> value
     * @param template a <code>StringTemplate</code> value
     * @return a <code>ModelMessage</code> value
     */
    public ModelMessage addStringTemplate(String key, StringTemplate template) {
        super.addStringTemplate(key, template);
	return this;
    }


, Instance #
frags: 
(startLine=2516 endLine=2536 srcPath=/root/NewExperiment/freecolFilter/00634/src/net/sf/freecol/client/gui/GUI.java)
            if (tile.getNameKey() != null) {
                String tileName = Messages.message(tile.getNameKey());
                g.setColor(Color.BLACK);
                int b = getBreakingPoint(tileName);
                if (b == -1) {
                    g.drawString(tileName, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName))/2, y + (lib.getTerrainImageHeight(tile.getType())/2));
                    /* Takes to much resources:
                       BufferedImage stringImage = createStringImage(g, tileName, Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - stringImage.getHeight()/2, null);
                    */
                } else {
                    g.drawString(tileName.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);
                    g.drawString(tileName.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);
                    /* Takes to much resources:
                       BufferedImage stringImage = createStringImage(g, tileName.substring(0, b), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - (stringImage.getHeight()) - 5, null);
                       stringImage = createStringImage(g, tileName.substring(b+1), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - 5, null);
                    */
                }
            }

(startLine=2539 endLine=2559 srcPath=/root/NewExperiment/freecolFilter/00634/src/net/sf/freecol/client/gui/GUI.java)
            if (tile.getOwner() != null) {
                String tileOwner = Messages.message(tile.getOwner().getNationName());
                g.setColor(Color.BLACK);
                int b = getBreakingPoint(tileOwner);
                if (b == -1) {
                    g.drawString(tileOwner, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner))/2, y + (lib.getTerrainImageHeight(tile.getType())/2));
                    /* Takes to much resources:
                       BufferedImage stringImage = createStringImage(g, tileOwner, Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - stringImage.getHeight()/2, null);
                    */
                } else {
                    g.drawString(tileOwner.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);
                    g.drawString(tileOwner.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);
                    /* Takes to much resources:
                       BufferedImage stringImage = createStringImage(g, tileOwner.substring(0, b), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - (stringImage.getHeight()) - 5, null);
                       stringImage = createStringImage(g, tileOwner.substring(b+1), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - 5, null);
                    */
                }
            }

(startLine=2562 endLine=2582 srcPath=/root/NewExperiment/freecolFilter/00634/src/net/sf/freecol/client/gui/GUI.java)
            if (tile.getRegion() != null) {
                String regionString = Messages.message(tile.getRegion().getLabel());
                g.setColor(Color.BLACK);
                int b = getBreakingPoint(regionString);
                if (b == -1) {
                    g.drawString(regionString, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString))/2, y + (lib.getTerrainImageHeight(tile.getType())/2));
                    /* Takes to much resources:
                       BufferedImage stringImage = createStringImage(g, tileOwner, Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - stringImage.getHeight()/2, null);
                    */
                } else {
                    g.drawString(regionString.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);
                    g.drawString(regionString.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);
                    /* Takes to much resources:
                       BufferedImage stringImage = createStringImage(g, tileOwner.substring(0, b), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - (stringImage.getHeight()) - 5, null);
                       stringImage = createStringImage(g, tileOwner.substring(b+1), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - 5, null);
                    */
                }
            }

commonMethod: 
(startLine=2570 endLine=2578 srcPath=/root/NewExperiment/freecolFilter/00635/src/net/sf/freecol/client/gui/GUI.java)
    private void centerString(Graphics2D g, String text, int x, int y) {
        g.setColor(Color.BLACK);
        g.setFont(((Font)UIManager.get("NormalFont")).deriveFont(12.0f));
        g.drawString(text,
                     x + (tileWidth
                          - g.getFontMetrics().stringWidth(text))/2,
                     y + (tileHeight
                          - g.getFontMetrics().getAscent())/2);
    }


, Instance #
frags: 
(startLine=2526 endLine=2535 srcPath=/root/NewExperiment/freecolFilter/00634/src/net/sf/freecol/client/gui/GUI.java)
                } else {
                    g.drawString(tileName.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);
                    g.drawString(tileName.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);
                    /* Takes to much resources:
                       BufferedImage stringImage = createStringImage(g, tileName.substring(0, b), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - (stringImage.getHeight()) - 5, null);
                       stringImage = createStringImage(g, tileName.substring(b+1), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - 5, null);
                    */
                }

(startLine=2549 endLine=2558 srcPath=/root/NewExperiment/freecolFilter/00634/src/net/sf/freecol/client/gui/GUI.java)
                } else {
                    g.drawString(tileOwner.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);
                    g.drawString(tileOwner.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);
                    /* Takes to much resources:
                       BufferedImage stringImage = createStringImage(g, tileOwner.substring(0, b), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - (stringImage.getHeight()) - 5, null);
                       stringImage = createStringImage(g, tileOwner.substring(b+1), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - 5, null);
                    */
                }

(startLine=2572 endLine=2581 srcPath=/root/NewExperiment/freecolFilter/00634/src/net/sf/freecol/client/gui/GUI.java)
                } else {
                    g.drawString(regionString.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);
                    g.drawString(regionString.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);
                    /* Takes to much resources:
                       BufferedImage stringImage = createStringImage(g, tileOwner.substring(0, b), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - (stringImage.getHeight()) - 5, null);
                       stringImage = createStringImage(g, tileOwner.substring(b+1), Color.BLACK, lib.getTerrainImageWidth(tile.getType().getIndex()), 10);
                       g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType().getIndex()) - stringImage.getWidth())/2 + 1, y + lib.getTerrainImageHeight(tile.getType().getIndex())/2 - 5, null);
                    */
                }

commonMethod: 
(startLine=2570 endLine=2578 srcPath=/root/NewExperiment/freecolFilter/00635/src/net/sf/freecol/client/gui/GUI.java)
    private void centerString(Graphics2D g, String text, int x, int y) {
        g.setColor(Color.BLACK);
        g.setFont(((Font)UIManager.get("NormalFont")).deriveFont(12.0f));
        g.drawString(text,
                     x + (tileWidth
                          - g.getFontMetrics().stringWidth(text))/2,
                     y + (tileHeight
                          - g.getFontMetrics().getAscent())/2);
    }


, Instance #
frags: 
(startLine=165 endLine=178 srcPath=/root/NewExperiment/freecolFilter/00645/src/net/sf/freecol/client/gui/option/OptionGroupUI.java)
            } else if (o instanceof SelectOption) {
                final SelectOptionUI soi = new SelectOptionUI((SelectOption) o, editable);
                if (soi.getLabel().getText().length() > 30) {
                    add(soi.getLabel(), "newline, span 3, right");
                } else {
                    add(soi.getLabel(), "right");
                }
                add(soi);
                ou.add(soi);
                buttonAdded = false;
                if (!o.getId().equals(Option.NO_ID)) {
                    optionUIs.put(o.getId(), soi);
                }
            } else if (o instanceof LanguageOption) {

(startLine=178 endLine=191 srcPath=/root/NewExperiment/freecolFilter/00645/src/net/sf/freecol/client/gui/option/OptionGroupUI.java)
            } else if (o instanceof LanguageOption) {
                final LanguageOptionUI soi = new LanguageOptionUI((LanguageOption) o, editable);
                if (soi.getLabel().getText().length() > 30) {
                    add(soi.getLabel(), "newline, span 3");
                } else {
                    add(soi.getLabel());
                }
                add(soi);
                ou.add(soi);
                buttonAdded = false;
                if (!o.getId().equals(Option.NO_ID)) {
                    optionUIs.put(o.getId(), soi);
                }
            } else if (o instanceof AudioMixerOption) {

(startLine=191 endLine=204 srcPath=/root/NewExperiment/freecolFilter/00645/src/net/sf/freecol/client/gui/option/OptionGroupUI.java)
            } else if (o instanceof AudioMixerOption) {
                final AudioMixerOptionUI soi = new AudioMixerOptionUI((AudioMixerOption) o, editable);
                if (soi.getLabel().getText().length() > 30) {
                    add(soi.getLabel(), "newline, span 3");
                } else {
                    add(soi.getLabel());
                }
                add(soi);
                ou.add(soi);
                buttonAdded = false;
                if (!o.getId().equals(Option.NO_ID)) {
                    optionUIs.put(o.getId(), soi);
                }
            } else if (o instanceof FreeColAction) {

commonMethod: 
(startLine=90 endLine=197 srcPath=/root/NewExperiment/freecolFilter/00646/src/net/sf/freecol/client/gui/option/OptionGroupUI.java)
    private void addOptionUI(Option o, boolean editable, int level, Map<String, JComponent> optionUIs) {
        if (o instanceof OptionGroup) {
            add(new JLabel(o.getName()), "span, split 2");
            add(new JSeparator(), "growx");
            Iterator<Option> it = ((OptionGroup) o).iterator();
            while (it.hasNext()) {
                Option option = it.next();
                addOptionUI(option, editable, level, optionUIs);
            }
        } else if (o instanceof BooleanOption) {                
            final BooleanOptionUI boi = new BooleanOptionUI((BooleanOption) o, editable);
            optionUpdaters.add(boi);
            if (boi.getText().length() > 40) {
                add(boi, "newline, span");
            } else {
                add(boi, "span 2");
            }
            if (!o.getId().equals(Option.NO_ID)) {
                optionUIs.put(o.getId(), boi);
            }
        } else if (o instanceof PercentageOption) {
            final PercentageOptionUI soi = new PercentageOptionUI((PercentageOption) o, editable);
            add(soi, "newline, span");
            optionUpdaters.add(soi);
            if (!o.getId().equals(Option.NO_ID)) {
                optionUIs.put(o.getId(), soi);
            }
        } else if (o instanceof ListOption) {
            @SuppressWarnings("unchecked")
            final ListOptionUI soi = new ListOptionUI((ListOption) o, editable);
            add(soi);
            optionUpdaters.add(soi);
            if (!o.getId().equals(Option.NO_ID)) {
                optionUIs.put(o.getId(), soi);
            }
        } else if (o instanceof IntegerOption) {
            final IntegerOptionUI iou = new IntegerOptionUI((IntegerOption) o, editable);
            if (iou.getLabel().getText().length() > 30) {
                add(iou.getLabel(), "newline, span 3, right");
            } else {
                add(iou.getLabel(), "right");
            }
            add(iou);
            optionUpdaters.add(iou);
            if (!o.getId().equals(Option.NO_ID)) {
                optionUIs.put(o.getId(), iou);
            }
        } else if (o instanceof FileOption) {
            final FileOptionUI iou = new FileOptionUI((FileOption) o, editable);
            add(iou, "newline, span");
            optionUpdaters.add(iou);
            if (!o.getId().equals(Option.NO_ID)) {
                optionUIs.put(o.getId(), iou);
            }
        } else if (o instanceof RangeOption) {
            final RangeOptionUI soi = new RangeOptionUI((RangeOption) o, editable);
            add(soi, "newline, span");
            optionUpdaters.add(soi);
            if (!o.getId().equals(Option.NO_ID)) {
                optionUIs.put(o.getId(), soi);
            }
        } else if (o instanceof SelectOption) {
            final SelectOptionUI soi = new SelectOptionUI((SelectOption) o, editable);
            if (soi.getLabel().getText().length() > 30) {
                add(soi.getLabel(), "newline, span 3, right");
            } else {
                add(soi.getLabel(), "right");
            }
            add(soi);
            optionUpdaters.add(soi);
            if (!o.getId().equals(Option.NO_ID)) {
                optionUIs.put(o.getId(), soi);
            }
        } else if (o instanceof LanguageOption) {
            final LanguageOptionUI soi = new LanguageOptionUI((LanguageOption) o, editable);
            if (soi.getLabel().getText().length() > 30) {
                add(soi.getLabel(), "newline, span 3");
            } else {
                add(soi.getLabel());
            }
            add(soi);
            optionUpdaters.add(soi);
            if (!o.getId().equals(Option.NO_ID)) {
                optionUIs.put(o.getId(), soi);
            }
        } else if (o instanceof AudioMixerOption) {
            final AudioMixerOptionUI soi = new AudioMixerOptionUI((AudioMixerOption) o, editable);
            if (soi.getLabel().getText().length() > 30) {
                add(soi.getLabel(), "newline, span 3");
            } else {
                add(soi.getLabel());
            }
            add(soi);
            optionUpdaters.add(soi);
            if (!o.getId().equals(Option.NO_ID)) {
                optionUIs.put(o.getId(), soi);
            }
        } else if (o instanceof FreeColAction) {
            final FreeColActionUI fau = new FreeColActionUI((FreeColAction) o, this);
            optionUpdaters.add(fau);
            add(fau, "newline, span");
            if (!o.getId().equals(Option.NO_ID)) {
                optionUIs.put(o.getId(), fau);
            }
        } else {
            logger.warning("Unknown option.");
        }
    }


, Instance #
frags: 
(startLine=49 endLine=59 srcPath=/root/NewExperiment/freecolFilter/00654/src/net/sf/freecol/client/gui/action/FortifyAction.java)
    FortifyAction(FreeColClient freeColClient) {
        super(freeColClient, "unit.state.2", null, KeyStroke.getKeyStroke('F', 0));
        putValue(BUTTON_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_FORTIFY,
                0));
        putValue(BUTTON_ROLLOVER_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_FORTIFY, 1));
        putValue(BUTTON_PRESSED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_FORTIFY, 2));
        putValue(BUTTON_DISABLED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_FORTIFY, 3));
    }

(startLine=48 endLine=57 srcPath=/root/NewExperiment/freecolFilter/00654/src/net/sf/freecol/client/gui/action/WaitAction.java)
    WaitAction(FreeColClient freeColClient) {
        super(freeColClient, "unit.state.0", null, KeyStroke.getKeyStroke('W', 0));
        putValue(BUTTON_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_WAIT, 0));
        putValue(BUTTON_ROLLOVER_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_WAIT, 1));
        putValue(BUTTON_PRESSED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_WAIT, 2));
        putValue(BUTTON_DISABLED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_WAIT, 3));
    }

(startLine=49 endLine=58 srcPath=/root/NewExperiment/freecolFilter/00654/src/net/sf/freecol/client/gui/action/SkipUnitAction.java)
    SkipUnitAction(FreeColClient freeColClient) {
        super(freeColClient, "unit.state.1", null, KeyStroke.getKeyStroke(' ', 0));
        putValue(BUTTON_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_DONE, 0));
        putValue(BUTTON_ROLLOVER_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_DONE, 1));
        putValue(BUTTON_PRESSED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_DONE, 2));
        putValue(BUTTON_DISABLED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_DONE, 3));
    }

(startLine=49 endLine=55 srcPath=/root/NewExperiment/freecolFilter/00654/src/net/sf/freecol/client/gui/action/MiniMapZoomInAction.java)
    MiniMapZoomInAction(FreeColClient freeColClient) {
        super(freeColClient, "unit.state.9", null, KeyEvent.VK_PLUS, KeyStroke.getKeyStroke('+', 0));
        putValue(BUTTON_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_ZOOM_IN, 0));
        putValue(BUTTON_ROLLOVER_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_ZOOM_IN, 1));
        putValue(BUTTON_PRESSED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_ZOOM_IN, 2));
        putValue(BUTTON_DISABLED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_ZOOM_IN, 3));
    }

(startLine=47 endLine=53 srcPath=/root/NewExperiment/freecolFilter/00654/src/net/sf/freecol/client/gui/action/SentryAction.java)
    public SentryAction(FreeColClient freeColClient) {
        super(freeColClient, "unit.state.3", null, KeyStroke.getKeyStroke('S', 0));
        putValue(BUTTON_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_SENTRY, 0));
        putValue(BUTTON_ROLLOVER_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_SENTRY, 1));
        putValue(BUTTON_PRESSED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_SENTRY, 2));
        putValue(BUTTON_DISABLED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_SENTRY, 3));        
    }

(startLine=49 endLine=59 srcPath=/root/NewExperiment/freecolFilter/00654/src/net/sf/freecol/client/gui/action/BuildColonyAction.java)
    BuildColonyAction(FreeColClient freeColClient) {
        super(freeColClient, "unit.state.7", null, KeyStroke.getKeyStroke('B', 0));
        putValue(BUTTON_IMAGE, freeColClient.getImageLibrary()
                .getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_BUILD, 0));
        putValue(BUTTON_ROLLOVER_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_BUILD, 1));
        putValue(BUTTON_PRESSED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_BUILD, 2));
        putValue(BUTTON_DISABLED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_BUILD, 3));
    }

(startLine=49 endLine=55 srcPath=/root/NewExperiment/freecolFilter/00654/src/net/sf/freecol/client/gui/action/MiniMapZoomOutAction.java)
    MiniMapZoomOutAction(FreeColClient freeColClient) {
        super(freeColClient, "unit.state.10", null, KeyEvent.VK_PLUS, KeyStroke.getKeyStroke('+', 0));
        putValue(BUTTON_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_ZOOM_OUT, 0));
        putValue(BUTTON_ROLLOVER_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_ZOOM_OUT, 1));
        putValue(BUTTON_PRESSED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_ZOOM_OUT, 2));
        putValue(BUTTON_DISABLED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_ZOOM_OUT, 3));
    }

(startLine=48 endLine=58 srcPath=/root/NewExperiment/freecolFilter/00654/src/net/sf/freecol/client/gui/action/DisbandUnitAction.java)
    DisbandUnitAction(FreeColClient freeColClient) {
        super(freeColClient, "unit.state.8", null, KeyStroke.getKeyStroke('D', 0));
        putValue(BUTTON_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(ImageLibrary.UNIT_BUTTON_DISBAND,
                0));
        putValue(BUTTON_ROLLOVER_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_DISBAND, 1));
        putValue(BUTTON_PRESSED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_DISBAND, 2));
        putValue(BUTTON_DISABLED_IMAGE, freeColClient.getImageLibrary().getUnitButtonImageIcon(
                ImageLibrary.UNIT_BUTTON_DISBAND, 3));
    }

commonMethod: 
(startLine=198 endLine=207 srcPath=/root/NewExperiment/freecolFilter/00655/src/net/sf/freecol/client/gui/action/FreeColAction.java)
    protected void addImageIcons(String key) {
        putValue(BUTTON_IMAGE,
                 new ImageIcon(ResourceManager.getImage("orderButton.normal." + key)));
        putValue(BUTTON_ROLLOVER_IMAGE,
                 new ImageIcon(ResourceManager.getImage("orderButton.highlighted." + key)));
        putValue(BUTTON_PRESSED_IMAGE,
                 new ImageIcon(ResourceManager.getImage("orderButton.pressed." + key)));
        putValue(BUTTON_DISABLED_IMAGE,
                 new ImageIcon(ResourceManager.getImage("orderButton.disabled." + key)));
    }


, Instance #
frags: 
(startLine=503 endLine=512 srcPath=/root/NewExperiment/freecolFilter/00692/src/net/sf/freecol/common/model/GoodsContainer.java)
        if (!storedGoods.isEmpty()) {
            out.writeStartElement(STORED_GOODS_TAG);
            for (Map.Entry<GoodsType, Integer> entry : storedGoods.entrySet()) {
                out.writeStartElement(Goods.getXMLElementTagName());
                out.writeAttribute("type", entry.getKey().getId());
                out.writeAttribute("amount", entry.getValue().toString());
                out.writeEndElement();
            }
            out.writeEndElement();
        }

(startLine=513 endLine=522 srcPath=/root/NewExperiment/freecolFilter/00692/src/net/sf/freecol/common/model/GoodsContainer.java)
        if (!oldStoredGoods.isEmpty()) {
            out.writeStartElement(OLD_STORED_GOODS_TAG);
            for (Map.Entry<GoodsType, Integer> entry : oldStoredGoods.entrySet()) {
                out.writeStartElement(Goods.getXMLElementTagName());
                out.writeAttribute("type", entry.getKey().getId());
                out.writeAttribute("amount", entry.getValue().toString());
                out.writeEndElement();
            }
            out.writeEndElement();
        }

commonMethod: 
(startLine=508 endLine=520 srcPath=/root/NewExperiment/freecolFilter/00693/src/net/sf/freecol/common/model/GoodsContainer.java)
    private void writeStorage(XMLStreamWriter out, String tag, Map<GoodsType, Integer> storage)
        throws XMLStreamException {
        if (!storage.isEmpty()) {
            out.writeStartElement(tag);
            for (Map.Entry<GoodsType, Integer> entry : storage.entrySet()) {
                out.writeStartElement(Goods.getXMLElementTagName());
                out.writeAttribute("type", entry.getKey().getId());
                out.writeAttribute("amount", entry.getValue().toString());
                out.writeEndElement();
            }
            out.writeEndElement();
        }
    }


, Instance #
frags: 
(startLine=553 endLine=560 srcPath=/root/NewExperiment/freecolFilter/00693/src/net/sf/freecol/FreeCol.java)
        if (mainUserDirectory.exists()) {
            if (mainUserDirectory.isFile()) {
                System.out.println("Could not create " + freeColDirectoryName + " under "
                        + userHome + " because there "
                        + "already exists a regular file with the same name.");
                return null;
            }
        } else {

(startLine=566 endLine=573 srcPath=/root/NewExperiment/freecolFilter/00693/src/net/sf/freecol/FreeCol.java)
        if (saveDirectory.exists()) {
            if (saveDirectory.isFile()) {
                System.out.println("Could not create freecol/save under "
                        + userHome + " because there "
                        + "already exists a regular file with the same name.");
                return null;
            }
        } else {

(startLine=578 endLine=585 srcPath=/root/NewExperiment/freecolFilter/00693/src/net/sf/freecol/FreeCol.java)
        if (autoSaveDirectory.exists()) {
            if (autoSaveDirectory.isFile()) {
                System.out.println("Could not create freecol/save/autosave under "
                                   + System.getProperty("user.home") + " because there "
                                   + "already exists a regular file with the same name.");
                return null;
            }
        } else {

(startLine=590 endLine=597 srcPath=/root/NewExperiment/freecolFilter/00693/src/net/sf/freecol/FreeCol.java)
        if (tcUserDirectory.exists()) {
            if (tcUserDirectory.isFile()) {
                System.out.println("Could not create freecol/" + tc + " under "
                        + userHome + " because there "
                        + "already exists a regular file with the same name.");
                return null;
            }
        } else {

commonMethod: 
(startLine=516 endLine=531 srcPath=/root/NewExperiment/freecolFilter/00694/src/net/sf/freecol/FreeCol.java)
    /**
     * Try to make a directory.
     *
     * @param file A <code>File</code> specifying where to make the directory.
     * @return True if the directory is there after the call.
     */
    private static boolean insistDirectory(File file) {
        if (file.exists()) {
            if (file.isDirectory()) return true;
            System.out.println("Could not create directory " + file.getName()
                + " under " + file.getParentFile().getName()
                + " because a non-directory with that name is already there.");
            return false;
        }
        return file.mkdir();
    }


, Instance #
frags: 
(startLine=45 endLine=63 srcPath=/root/NewExperiment/freecolFilter/00695/src/net/sf/freecol/client/gui/plaf/FreeColBrightPanelUI.java)
    public void paint(java.awt.Graphics g, javax.swing.JComponent c) {
        if (c.isOpaque()) {
            int width = c.getWidth();
            int height = c.getHeight();

            Image tempImage = ResourceManager.getImage("BackgroundImage2");

            if (tempImage != null) {
                for (int x=0; x<width; x+=tempImage.getWidth(null)) {
                    for (int y=0; y<height; y+=tempImage.getHeight(null)) {
                        g.drawImage(tempImage, x, y, null);
                    }
                }
            } else {
                g.setColor(c.getBackground());
                g.fillRect(0, 0, width, height);
            }
        }
    }

(startLine=45 endLine=63 srcPath=/root/NewExperiment/freecolFilter/00695/src/net/sf/freecol/client/gui/plaf/FreeColPopupMenuUI.java)
    public void paint(java.awt.Graphics g, javax.swing.JComponent c) {
        if (c.isOpaque()) {
            int width = c.getWidth();
            int height = c.getHeight();

            Image tempImage = ResourceManager.getImage("BackgroundImage");

            if (tempImage != null) {
                for (int x=0; x<width; x+=tempImage.getWidth(null)) {
                    for (int y=0; y<height; y+=tempImage.getHeight(null)) {
                        g.drawImage(tempImage, x, y, null);
                    }
                }
            } else {
                g.setColor(c.getBackground());
                g.fillRect(0, 0, width, height);
            }
        }
    }

(startLine=53 endLine=74 srcPath=/root/NewExperiment/freecolFilter/00695/src/net/sf/freecol/client/gui/plaf/FreeColTextAreaUI.java)
    public void paintBackground(java.awt.Graphics g) {
        JComponent c = getComponent();

        if (c.isOpaque()) {
            int width = c.getWidth();
            int height = c.getHeight();

            Image tempImage = ResourceManager.getImage("BackgroundImage2");

            if (tempImage != null) {
                for (int x=0; x<width; x+=tempImage.getWidth(null)) {
                    for (int y=0; y<height; y+=tempImage.getHeight(null)) {
                        g.drawImage(tempImage, x, y, null);
                    }
                }
            } else {
                g.setColor(c.getBackground());
                g.fillRect(0, 0, width, height);
            }
        }

    }

(startLine=45 endLine=63 srcPath=/root/NewExperiment/freecolFilter/00695/src/net/sf/freecol/client/gui/plaf/FreeColMenuBarUI.java)
    public void paint(java.awt.Graphics g, javax.swing.JComponent c) {
        if (c.isOpaque()) {
            int width = c.getWidth();
            int height = c.getHeight();

            Image tempImage = ResourceManager.getImage("BackgroundImage");

            if (tempImage != null) {
                for (int x=0; x<width; x+=tempImage.getWidth(null)) {
                    for (int y=0; y<height; y+=tempImage.getHeight(null)) {
                        g.drawImage(tempImage, x, y, null);
                    }
                }
            } else {
                g.setColor(c.getBackground());
                g.fillRect(0, 0, width, height);
            }
        }
    }

(startLine=48 endLine=67 srcPath=/root/NewExperiment/freecolFilter/00695/src/net/sf/freecol/client/gui/plaf/FreeColListUI.java)
    public void paint(Graphics g, JComponent c) {
        int width = c.getWidth();
        int height = c.getHeight();

        Image tempImage = ResourceManager.getImage("BackgroundImage2");

        if (tempImage != null) {
            for (int x=0; x<width; x+=tempImage.getWidth(null)) {
                for (int y=0; y<height; y+=tempImage.getHeight(null)) {
                    g.drawImage(tempImage, x, y, null);
                }
            }
        } else {
            g.setColor(c.getBackground());
            g.fillRect(0, 0, width, height);
        }
         
        LAFUtilities.setProperties(g, c);
        super.paint(g, c);
    }

(startLine=54 endLine=75 srcPath=/root/NewExperiment/freecolFilter/00695/src/net/sf/freecol/client/gui/plaf/FreeColTextFieldUI.java)
    public void paintBackground(java.awt.Graphics g) {
        JComponent c = getComponent();

        if (c.isOpaque()) {
            int width = c.getWidth();
            int height = c.getHeight();

            Image tempImage = ResourceManager.getImage("BackgroundImage2");

            if (tempImage != null) {
                for (int x=0; x<width; x+=tempImage.getWidth(null)) {
                    for (int y=0; y<height; y+=tempImage.getHeight(null)) {
                        g.drawImage(tempImage, x, y, null);
                    }
                }
            } else {
                g.setColor(c.getBackground());
                g.fillRect(0, 0, width, height);
            }
        }

    }

(startLine=59 endLine=75 srcPath=/root/NewExperiment/freecolFilter/00695/src/net/sf/freecol/client/gui/plaf/FreeColToolTipUI.java)
        if (c.isOpaque()) {
            int width = c.getWidth();
            int height = c.getHeight();

            Image tempImage = ResourceManager.getImage("BackgroundImage");

            if (tempImage != null) {
                for (int x=0; x<width; x+=tempImage.getWidth(null)) {
                    for (int y=0; y<height; y+=tempImage.getHeight(null)) {
                        g.drawImage(tempImage, x, y, null);
                    }
                }
            } else {
                g.setColor(c.getBackground());
                g.fillRect(0, 0, width, height);
            }
        }

(startLine=62 endLine=78 srcPath=/root/NewExperiment/freecolFilter/00695/src/net/sf/freecol/client/gui/plaf/FreeColButtonUI.java)
        if (b.isOpaque()) {
            int width = b.getWidth();
            int height = b.getHeight();
            
            Image tempImage = ResourceManager.getImage("BackgroundImage");
            
            if (tempImage != null) {
                for (int x=0; x<width; x+=tempImage.getWidth(null)) {
                    for (int y=0; y<height; y+=tempImage.getHeight(null)) {
                        g.drawImage(tempImage, x, y, null);
                    }
                }
            } else {
                g.setColor(b.getBackground());
                g.fillRect(0, 0, width, height);
            }
        }

(startLine=46 endLine=64 srcPath=/root/NewExperiment/freecolFilter/00695/src/net/sf/freecol/client/gui/plaf/FreeColPanelUI.java)
    public void paint(java.awt.Graphics g, javax.swing.JComponent c) {
        if (c.isOpaque()) {
            int width = c.getWidth();
            int height = c.getHeight();

            Image tempImage = ResourceManager.getImage("BackgroundImage");
            
            if (tempImage != null) {
                for (int x=0; x<width; x+=tempImage.getWidth(null)) {
                    for (int y=0; y<height; y+=tempImage.getHeight(null)) {
                        g.drawImage(tempImage, x, y, null);
                    }
                }
            } else {
                g.setColor(c.getBackground());
                g.fillRect(0, 0, width, height);
            }
        }
    }

commonMethod: 
(startLine=701 endLine=742 srcPath=/root/NewExperiment/freecolFilter/00696/src/net/sf/freecol/client/gui/ImageLibrary.java)
    /**
     * Draw a (usually small) background image into a (usually larger)
     * space specified by a component, tiling the image to fill up the
     * space.  If the image is not available, just fill with the background
     * colour.
     *
     * @param resource The name of the <code>ImageResource</code> to tile with.
     * @param g The <code>Graphics</code> to draw to.
     * @param c The <code>JComponent</code> that defines the space.
     * @param insets Optional <code>Insets</code> to apply.
     */
    public static void drawTiledImage(String resource, Graphics g,
                                      JComponent c, Insets insets) {
        int width = c.getWidth();
        int height = c.getHeight();
        Image image = ResourceManager.getImage(resource);
        int dx, dy, xmin, ymin;

        if (insets == null) {
            xmin = 0;
            ymin = 0;
        } else {
            xmin = insets.left;
            ymin = insets.top;
            width -= insets.left + insets.right;
            height -= insets.top + insets.bottom;
        }
        if (image != null && (dx = image.getWidth(null)) > 0
            && (dy = image.getHeight(null)) > 0) {
            int xmax, ymax;
            xmax = xmin + width;
            ymax = ymin + height;
            for (int x = xmin; x < xmax; x += dx) {
                for (int y = ymin; y < ymax; y += dy) {
                    g.drawImage(image, x, y, null);
                }
            }
        } else {
            g.setColor(c.getBackground());
            g.fillRect(xmin, ymin, width, height);
        }
    }


, Instance #
frags: 
(startLine=3476 endLine=3512 srcPath=/root/NewExperiment/freecolFilter/00697/src/net/sf/freecol/server/control/InGameController.java)
                                              IndianNationType nationType) {
        List<RandomChoice<UnitType>> skills = nationType.getSkills();
        java.util.Map<GoodsType, Integer> scale
            = new HashMap<GoodsType, Integer>();

        for (RandomChoice<UnitType> skill : skills) {
            scale.put(skill.getObject().getExpertProduction(), 1);
        }

        Iterator<Position> iter = map.getAdjacentIterator(tile.getPosition());
        while (iter.hasNext()) {
            Map.Position p = iter.next();
            Tile t = map.getTile(p);
            for (GoodsType goodsType : scale.keySet()) {
                scale.put(goodsType, scale.get(goodsType).intValue()
                          + t.potential(goodsType, null));
            }
        }

        List<RandomChoice<UnitType>> scaledSkills
            = new ArrayList<RandomChoice<UnitType>>();
        for (RandomChoice<UnitType> skill : skills) {
            UnitType unitType = skill.getObject();
            int scaleValue = scale.get(unitType.getExpertProduction()).intValue();
            scaledSkills.add(new RandomChoice<UnitType>(unitType, skill.getProbability() * scaleValue));
        }

        UnitType skill = RandomChoice.getWeightedRandom(random, scaledSkills);
        if (skill == null) {
            // Seasoned Scout
            Specification spec = getGame().getSpecification();
            List<UnitType> unitList
                = spec.getUnitTypesWithAbility("model.ability.expertScout");
            return unitList.get(random.nextInt(unitList.size()));
        }
        return skill;
    }

(startLine=592 endLine=622 srcPath=/root/NewExperiment/freecolFilter/00697/src/net/sf/freecol/server/generator/MapGenerator.java)
    private UnitType generateSkillForLocation(Map map, Tile tile, NationType nationType) {
        List<RandomChoice<UnitType>> skills = ((IndianNationType) nationType).getSkills();
        java.util.Map<GoodsType, Integer> scale = new HashMap<GoodsType, Integer>();
        for (RandomChoice<UnitType> skill : skills) {
            scale.put(skill.getObject().getExpertProduction(), 1);
        }

        Iterator<Position> iter = map.getAdjacentIterator(tile.getPosition());
        while (iter.hasNext()) {
            Map.Position p = iter.next();
            Tile t = map.getTile(p);
            for (GoodsType goodsType : scale.keySet()) {
                scale.put(goodsType, scale.get(goodsType).intValue() + t.potential(goodsType, null));
            }
        }

        List<RandomChoice<UnitType>> scaledSkills = new ArrayList<RandomChoice<UnitType>>();
        for (RandomChoice<UnitType> skill : skills) {
            UnitType unitType = skill.getObject();
            int scaleValue = scale.get(unitType.getExpertProduction()).intValue();
            scaledSkills.add(new RandomChoice<UnitType>(unitType, skill.getProbability() * scaleValue));
        }
        UnitType skill = RandomChoice.getWeightedRandom(random, scaledSkills);
        if (skill == null) {
            // Seasoned Scout
            List<UnitType> unitList = map.getSpecification().getUnitTypesWithAbility("model.ability.expertScout");
            return unitList.get(random.nextInt(unitList.size()));
        } else {
            return skill;
        }
    }

commonMethod: 
(startLine=1918 endLine=1954 srcPath=/root/NewExperiment/freecolFilter/00698/src/net/sf/freecol/common/model/Tile.java)
     /**
      * Returns all the tiles surrounding the given tile within the
      * given range. The center tile itself is not included.
      *
      * @param t
      *            The tile that lies on the center of the tiles to return.
      * @param range
      *            How far away do we need to go starting from the center tile.
      * @return The tiles surrounding the given tile.
      */
     public Iterable<Tile> getSurroundingTiles(final int range) {
         return new Iterable<Tile>(){
             public Iterator<Tile> iterator(){
                 final Iterator<Position> m;

                 if (range == 1)
                     m = getMap().getAdjacentIterator(getPosition());
                 else
                     m = getMap().getCircleIterator(getPosition(), true, range);

                 return new Iterator<Tile>(){
                     public boolean hasNext() {
                         return m.hasNext();
}

                     public Tile next() {
                         return getMap().getTile(m.next());
         }

                     public void remove() {
                         m.remove();
     }
                 };
             }
         };

     }


, Instance #
frags: 
(startLine=211 endLine=264 srcPath=/root/NewExperiment/freecolFilter/00698/src/net/sf/freecol/server/ai/IndianAIPlayer.java)
    private void bringGifts() {
        logger.finest("Entering method bringGifts");
        if (!getPlayer().isIndian()) {
            return;
        }
        for (IndianSettlement indianSettlement : getPlayer().getIndianSettlements()) {
            // Do not bring gifts all the time:
            if (getAIRandom().nextInt(10) != 1) {
                continue;
            }
            int alreadyAssignedUnits = 0;
            Iterator<Unit> ownedUnits = indianSettlement.getOwnedUnitsIterator();
            while (ownedUnits.hasNext()) {
                if (((AIUnit) getAIMain().getAIObject(ownedUnits.next())).getMission() instanceof IndianBringGiftMission) {
                    alreadyAssignedUnits++;
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_GIFTS_BEING_DELIVERED) {
                continue;
            }
            // Creates a list of nearby colonies:
            ArrayList<Colony> nearbyColonies = new ArrayList<Colony>();
            Iterator<Position> it = getGame().getMap().getCircleIterator(indianSettlement.getTile().getPosition(), true,
                                                                         MAX_DISTANCE_TO_BRING_GIFT);
            while (it.hasNext()) {
                Tile t = getGame().getMap().getTile(it.next());
                if (t.getColony() != null
                    && IndianBringGiftMission.isValidMission(getPlayer(), t.getColony().getOwner())) {
                    nearbyColonies.add(t.getColony());
                }
            }
            if (nearbyColonies.size() > 0) {
                Colony target = nearbyColonies.get(getAIRandom().nextInt(nearbyColonies.size()));
                Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                AIUnit chosenOne = null;
                while (it2.hasNext()) {
                    chosenOne = (AIUnit) getAIMain().getAIObject(it2.next());
                    if (!(chosenOne.getUnit().getLocation() instanceof Tile)) {
                        chosenOne = null;
                    } else if (chosenOne.getMission() == null
                               || chosenOne.getMission() instanceof UnitWanderHostileMission) {
                        break;
                    }
                }
                if (chosenOne != null) {
                    // Check that the colony can be reached:
                    PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(), target.getTile());
                    if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_BRING_GIFT) {
                        chosenOne.setMission(new IndianBringGiftMission(getAIMain(), chosenOne, target));
                    }
                }
            }
        }
    }

(startLine=1681 endLine=1732 srcPath=/root/NewExperiment/freecolFilter/00698/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void bringGifts() {
        logger.finest("Entering method bringGifts");
        if (!getPlayer().isIndian()) {
            return;
        }
        for (IndianSettlement indianSettlement : getPlayer().getIndianSettlements()) {
            // Do not bring gifts all the time:
            if (getAIRandom().nextInt(10) != 1) {
                continue;
            }
            int alreadyAssignedUnits = 0;
            Iterator<Unit> ownedUnits = indianSettlement.getOwnedUnitsIterator();
            while (ownedUnits.hasNext()) {
                if (((AIUnit) getAIMain().getAIObject(ownedUnits.next())).getMission() instanceof IndianBringGiftMission) {
                    alreadyAssignedUnits++;
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_GIFTS_BEING_DELIVERED) {
                continue;
            }
            // Creates a list of nearby colonies:
            ArrayList<Colony> nearbyColonies = new ArrayList<Colony>();
            Iterator<Position> it = getGame().getMap().getCircleIterator(indianSettlement.getTile().getPosition(), true,
                    MAX_DISTANCE_TO_BRING_GIFT);
            while (it.hasNext()) {
                Tile t = getGame().getMap().getTile(it.next());
                if (t.getColony() != null
                        && IndianBringGiftMission.isValidMission(getPlayer(), t.getColony().getOwner())) {
                    nearbyColonies.add(t.getColony());
                }
            }
            if (nearbyColonies.size() > 0) {
                Colony target = nearbyColonies.get(getAIRandom().nextInt(nearbyColonies.size()));
                Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                AIUnit chosenOne = null;
                while (it2.hasNext()) {
                    chosenOne = (AIUnit) getAIMain().getAIObject(it2.next());
                    if (chosenOne.getUnit().getLocation() instanceof Tile
                        && (chosenOne.getMission() == null
                            || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                        // Check that the colony can be reached:
                        PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                   target.getTile());
                        if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_BRING_GIFT) {
                            chosenOne.setMission(new IndianBringGiftMission(getAIMain(), chosenOne, target));
                            break;
                        }
                    }
                }
            }
        }
    }

commonMethod: 
(startLine=1916 endLine=1952 srcPath=/root/NewExperiment/freecolFilter/00699/src/net/sf/freecol/common/model/Tile.java)
     /**
      * Returns all the tiles surrounding the given tile within the
      * given range. The center tile itself is not included.
      *
      * @param t
      *            The tile that lies on the center of the tiles to return.
      * @param range
      *            How far away do we need to go starting from the center tile.
      * @return The tiles surrounding the given tile.
      */
     public Iterable<Tile> getSurroundingTiles(final int range) {
         return new Iterable<Tile>(){
             public Iterator<Tile> iterator(){
                 final Iterator<Position> m;

                 if (range == 1)
                     m = getMap().getAdjacentIterator(getPosition());
                 else
                     m = getMap().getCircleIterator(getPosition(), true, range);

                 return new Iterator<Tile>(){
                     public boolean hasNext() {
                         return m.hasNext();
}

                     public Tile next() {
                         return getMap().getTile(m.next());
         }

                     public void remove() {
                         m.remove();
     }
                 };
             }
         };

     }


, Instance #
frags: 
(startLine=269 endLine=343 srcPath=/root/NewExperiment/freecolFilter/00698/src/net/sf/freecol/server/ai/IndianAIPlayer.java)
    private void demandTribute() {
        logger.finest("Entering method demandTribute");
        if (!getPlayer().isIndian()) {
            return;
        }
        for (IndianSettlement indianSettlement : getPlayer().getIndianSettlements()) {
            // Do not demand goods all the time:
            if (getAIRandom().nextInt(10) != 1) {
                continue;
            }
            int alreadyAssignedUnits = 0;
            Iterator<Unit> ownedUnits = indianSettlement.getOwnedUnitsIterator();
            while (ownedUnits.hasNext()) {
                if (((AIUnit) getAIMain().getAIObject(ownedUnits.next())).getMission() instanceof IndianDemandMission) {
                    alreadyAssignedUnits++;
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_DEMANDS) {
                continue;
            }
            // Creates a list of nearby colonies:
            ArrayList<Colony> nearbyColonies = new ArrayList<Colony>();
            Iterator<Position> it = getGame().getMap().getCircleIterator(indianSettlement.getTile().getPosition(), true,
                                                                         MAX_DISTANCE_TO_MAKE_DEMANDS);
            while (it.hasNext()) {
                Tile t = getGame().getMap().getTile(it.next());
                if (t.getColony() != null) {
                    nearbyColonies.add(t. getColony());
                }
            }
            if (nearbyColonies.size() > 0) {
                int targetTension = Integer.MIN_VALUE;
                Colony target = null;
                for (int i = 0; i < nearbyColonies.size(); i++) {
                    Colony t = nearbyColonies.get(i);
                    Player to = t.getOwner();
                    if (!getPlayer().hasContacted(to)
                        || !indianSettlement.hasContactedSettlement(to)) {
                        continue;
                    }
                    int tension = 1 + getPlayer().getTension(to).getValue() + indianSettlement.getAlarm(to).getValue();
                    tension = getAIRandom().nextInt(tension);
                    if (tension > targetTension) {
                        targetTension = tension;
                        target = t;
                    }
                }
                Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                AIUnit chosenOne = null;
                while (it2.hasNext()) {
                    chosenOne = (AIUnit) getAIMain().getAIObject(it2.next());
                    if (!(chosenOne.getUnit().getLocation() instanceof Tile)) {
                        chosenOne = null;
                    } else if (chosenOne.getMission() == null
                               || chosenOne.getMission() instanceof UnitWanderHostileMission) {
                        break;
                    }
                }
                if (chosenOne != null && target != null) {
                    // Check that the colony can be reached:
                    PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(), target.getTile());
                    if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                        // Make it less probable that nice players get targeted
                        // for a demand mission:
                        Player tp = target.getOwner();
                        int tension = 1 + getPlayer().getTension(tp).getValue()
                            + indianSettlement.getAlarm(tp).getValue();
                        if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                            chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne, target));
                        }
                    }
                }
            }
        }
    }

(startLine=1737 endLine=1813 srcPath=/root/NewExperiment/freecolFilter/00698/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void demandTribute() {
        logger.finest("Entering method demandTribute");
        if (!getPlayer().isIndian()) {
            return;
        }
        for (IndianSettlement indianSettlement : getPlayer().getIndianSettlements()) {
            // Do not demand goods all the time:
            if (getAIRandom().nextInt(10) != 1) {
                continue;
            }
            int alreadyAssignedUnits = 0;
            Iterator<Unit> ownedUnits = indianSettlement.getOwnedUnitsIterator();
            while (ownedUnits.hasNext()) {
                if (((AIUnit) getAIMain().getAIObject(ownedUnits.next())).getMission() instanceof IndianDemandMission) {
                    alreadyAssignedUnits++;
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_DEMANDS) {
                continue;
            }
            // Creates a list of nearby colonies:
            ArrayList<Colony> nearbyColonies = new ArrayList<Colony>();
            Iterator<Position> it = getGame().getMap().getCircleIterator(indianSettlement.getTile().getPosition(), true,
                    MAX_DISTANCE_TO_MAKE_DEMANDS);
            while (it.hasNext()) {
                Tile t = getGame().getMap().getTile(it.next());
                if (t.getColony() != null) {
                    nearbyColonies.add(t. getColony());
                }
            }
            if (nearbyColonies.size() > 0) {
                int targetTension = Integer.MIN_VALUE;
                Colony target = null;
                for (int i = 0; i < nearbyColonies.size(); i++) {
                    Colony t = nearbyColonies.get(i);
                    Player to = t.getOwner();
                    if (!getPlayer().hasContacted(to)
                        || !indianSettlement.hasContactedSettlement(to)) {
                        continue;
                    }
                    int tension = 1 + getPlayer().getTension(to).getValue()
                        + indianSettlement.getAlarm(to).getValue();
                    tension = getAIRandom().nextInt(tension);
                    if (tension > targetTension) {
                        targetTension = tension;
                        target = t;
                    }
                }
                if (target != null) {
                    Iterator<Unit> it2 = indianSettlement.getOwnedUnitsIterator();
                    AIUnit chosenOne = null;
                    while (it2.hasNext()) {
                        chosenOne = (AIUnit) getAIMain().getAIObject(it2.next());
                        if (chosenOne.getUnit().getLocation() instanceof Tile
                            && (chosenOne.getMission() == null
                                || chosenOne.getMission() instanceof UnitWanderHostileMission)) {
                            // Check that the colony can be reached:
                            PathNode pn = chosenOne.getUnit().findPath(indianSettlement.getTile(),
                                                                       target.getTile());
                            if (pn != null && pn.getTotalTurns() <= MAX_DISTANCE_TO_MAKE_DEMANDS) {
                                // Make it less probable that nice players get targeted
                                // for a demand mission:
                                Player tp = target.getOwner();
                                int tension = 1 + getPlayer().getTension(tp).getValue()
                                    + indianSettlement.getAlarm(tp).getValue();
                                if (getAIRandom().nextInt(tension) > Tension.Level.HAPPY.getLimit()) {
                                    chosenOne.setMission(new IndianDemandMission(getAIMain(), chosenOne,
                                                                                 target));
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

commonMethod: 
(startLine=1916 endLine=1952 srcPath=/root/NewExperiment/freecolFilter/00699/src/net/sf/freecol/common/model/Tile.java)
     /**
      * Returns all the tiles surrounding the given tile within the
      * given range. The center tile itself is not included.
      *
      * @param t
      *            The tile that lies on the center of the tiles to return.
      * @param range
      *            How far away do we need to go starting from the center tile.
      * @return The tiles surrounding the given tile.
      */
     public Iterable<Tile> getSurroundingTiles(final int range) {
         return new Iterable<Tile>(){
             public Iterator<Tile> iterator(){
                 final Iterator<Position> m;

                 if (range == 1)
                     m = getMap().getAdjacentIterator(getPosition());
                 else
                     m = getMap().getCircleIterator(getPosition(), true, range);

                 return new Iterator<Tile>(){
                     public boolean hasNext() {
                         return m.hasNext();
}

                     public Tile next() {
                         return getMap().getTile(m.next());
         }

                     public void remove() {
                         m.remove();
     }
                 };
             }
         };

     }


, Instance #
frags: 
(startLine=209 endLine=214 srcPath=/root/NewExperiment/freecolFilter/00698/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
                for (int index = 0; index < severalExperts.size() - 1; index++) {
                    Colony colony = severalExperts.get(index);
                    StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
                    doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
                    doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
                }

(startLine=225 endLine=230 srcPath=/root/NewExperiment/freecolFilter/00698/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
                for (int index = 0; index < canTrainExperts.size() - 1; index++) {
                    Colony colony = canTrainExperts.get(index);
                    StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
                    doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
                    doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
                }

commonMethod: 
(startLine=132 endLine=134 srcPath=/root/NewExperiment/freecolFilter/00699/src/net/sf/freecol/common/model/GoodsType.java)
    public final String getWorkingAsKey() {
        return getId() + ".workingAs";
    }


, Instance #
frags: 
(startLine=209 endLine=214 srcPath=/root/NewExperiment/freecolFilter/00698/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
                for (int index = 0; index < severalExperts.size() - 1; index++) {
                    Colony colony = severalExperts.get(index);
                    StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
                    doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
                    doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
                }

(startLine=225 endLine=230 srcPath=/root/NewExperiment/freecolFilter/00698/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
                for (int index = 0; index < canTrainExperts.size() - 1; index++) {
                    Colony colony = canTrainExperts.get(index);
                    StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
                    doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
                    doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
                }

commonMethod: 
(startLine=787 endLine=795 srcPath=/root/NewExperiment/freecolFilter/00699/src/net/sf/freecol/common/model/Colony.java)
    public List<Unit> getUnitList() {
        ArrayList<Unit> units = new ArrayList<Unit>();
        for (WorkLocation wl : getWorkLocations()) {
            for (Unit unit : wl.getUnitList()) {
                units.add(unit);
            }
        }
        return units;
    }


, Instance #
frags: 
(startLine=587 endLine=661 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    private void cheat() {
        logger.finest("Entering method cheat");
        // TODO-AI-CHEATING: REMOVE WHEN THE AI IS GOOD ENOUGH:
        for (GoodsType goodsType : getGame().getSpecification().getGoodsTypeList()) {
            getPlayer().getMarket().setArrears(goodsType, 0);
        }
        
        //TODO: This seems to buy units the AIPlayer can't possibly use (see BR#2566180)
        if (getAIMain().getFreeColServer().isSingleplayer() && getPlayer().isAI()
                && getPlayer().getPlayerType() == PlayerType.COLONIAL) {
            Europe europe = getPlayer().getEurope();
            List<UnitType> unitTypes = getGame().getSpecification().getUnitTypeList();
            
            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    unit = this.trainAIUnitInEurope(unitToTrain).getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    GoodsType muskets = getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));
                    
                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }
            if (getAIRandom().nextInt(40) == 21) {
                int total = 0;
                ArrayList<UnitType> navalUnits = new ArrayList<UnitType>();
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasAbility("model.ability.navalUnit") && unitType.hasPrice()) {
                        navalUnits.add(unitType);
                        total += europe.getUnitPrice(unitType);
                    }
                }
                
                UnitType unitToPurchase = null;
                int random = getAIRandom().nextInt(total);
                total = 0;
                for (UnitType unitType : navalUnits) {
                    total += unitType.getPrice();
                    if (random < total) {
                        unitToPurchase = unitType;
                        break;
                    }
                }
                getPlayer().modifyGold(europe.getUnitPrice(unitToPurchase));
                this.trainAIUnitInEurope(unitToPurchase);
            }
        }
    }

(startLine=681 endLine=757 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void cheat() {
        logger.finest("Entering method cheat");
        // TODO-AI-CHEATING: REMOVE WHEN THE AI IS GOOD ENOUGH:
        for (GoodsType goodsType : getAIMain().getGame().getSpecification().getGoodsTypeList()) {
            getPlayer().getMarket().setArrears(goodsType, 0);
        }

        //TODO: This seems to buy units the AIPlayer can't possibly use (see BR#2566180)
        if (getAIMain().getFreeColServer().isSingleplayer() && getPlayer().isEuropean() && !getPlayer().isREF() && getPlayer().isAI()
                && getPlayer().getPlayerType() == PlayerType.COLONIAL) {
            Europe europe = getPlayer().getEurope();
            List<UnitType> unitTypes = getAIMain().getGame().getSpecification().getUnitTypeList();

            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    AIUnit aiUnit = this.trainAIUnitInEurope(unitToTrain);
                    if (aiUnit != null) unit = aiUnit.getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    GoodsType muskets = getAIMain().getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getAIMain().getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));

                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }
            if (getAIRandom().nextInt(40) == 21) {
                int total = 0;
                ArrayList<UnitType> navalUnits = new ArrayList<UnitType>();
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasAbility("model.ability.navalUnit") && unitType.hasPrice()) {
                        navalUnits.add(unitType);
                        total += europe.getUnitPrice(unitType);
                    }
                }

                UnitType unitToPurchase = null;
                int random = getAIRandom().nextInt(total);
                total = 0;
                for (UnitType unitType : navalUnits) {
                    total += unitType.getPrice();
                    if (random < total) {
                        unitToPurchase = unitType;
                        break;
                    }
                }
                getPlayer().modifyGold(europe.getUnitPrice(unitToPurchase));
                this.trainAIUnitInEurope(unitToPurchase);
            }
        }
    }

commonMethod: 
(startLine=919 endLine=921 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/common/model/Specification.java)
    public EquipmentType getEquipmentType(String id) {
        return getType(id, EquipmentType.class);
    }


, Instance #
frags: 
(startLine=587 endLine=661 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    private void cheat() {
        logger.finest("Entering method cheat");
        // TODO-AI-CHEATING: REMOVE WHEN THE AI IS GOOD ENOUGH:
        for (GoodsType goodsType : getGame().getSpecification().getGoodsTypeList()) {
            getPlayer().getMarket().setArrears(goodsType, 0);
        }
        
        //TODO: This seems to buy units the AIPlayer can't possibly use (see BR#2566180)
        if (getAIMain().getFreeColServer().isSingleplayer() && getPlayer().isAI()
                && getPlayer().getPlayerType() == PlayerType.COLONIAL) {
            Europe europe = getPlayer().getEurope();
            List<UnitType> unitTypes = getGame().getSpecification().getUnitTypeList();
            
            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    unit = this.trainAIUnitInEurope(unitToTrain).getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    GoodsType muskets = getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));
                    
                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }
            if (getAIRandom().nextInt(40) == 21) {
                int total = 0;
                ArrayList<UnitType> navalUnits = new ArrayList<UnitType>();
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasAbility("model.ability.navalUnit") && unitType.hasPrice()) {
                        navalUnits.add(unitType);
                        total += europe.getUnitPrice(unitType);
                    }
                }
                
                UnitType unitToPurchase = null;
                int random = getAIRandom().nextInt(total);
                total = 0;
                for (UnitType unitType : navalUnits) {
                    total += unitType.getPrice();
                    if (random < total) {
                        unitToPurchase = unitType;
                        break;
                    }
                }
                getPlayer().modifyGold(europe.getUnitPrice(unitToPurchase));
                this.trainAIUnitInEurope(unitToPurchase);
            }
        }
    }

(startLine=681 endLine=757 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void cheat() {
        logger.finest("Entering method cheat");
        // TODO-AI-CHEATING: REMOVE WHEN THE AI IS GOOD ENOUGH:
        for (GoodsType goodsType : getAIMain().getGame().getSpecification().getGoodsTypeList()) {
            getPlayer().getMarket().setArrears(goodsType, 0);
        }

        //TODO: This seems to buy units the AIPlayer can't possibly use (see BR#2566180)
        if (getAIMain().getFreeColServer().isSingleplayer() && getPlayer().isEuropean() && !getPlayer().isREF() && getPlayer().isAI()
                && getPlayer().getPlayerType() == PlayerType.COLONIAL) {
            Europe europe = getPlayer().getEurope();
            List<UnitType> unitTypes = getAIMain().getGame().getSpecification().getUnitTypeList();

            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    AIUnit aiUnit = this.trainAIUnitInEurope(unitToTrain);
                    if (aiUnit != null) unit = aiUnit.getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    GoodsType muskets = getAIMain().getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getAIMain().getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));

                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }
            if (getAIRandom().nextInt(40) == 21) {
                int total = 0;
                ArrayList<UnitType> navalUnits = new ArrayList<UnitType>();
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasAbility("model.ability.navalUnit") && unitType.hasPrice()) {
                        navalUnits.add(unitType);
                        total += europe.getUnitPrice(unitType);
                    }
                }

                UnitType unitToPurchase = null;
                int random = getAIRandom().nextInt(total);
                total = 0;
                for (UnitType unitType : navalUnits) {
                    total += unitType.getPrice();
                    if (random < total) {
                        unitToPurchase = unitType;
                        break;
                    }
                }
                getPlayer().modifyGold(europe.getUnitPrice(unitToPurchase));
                this.trainAIUnitInEurope(unitToPurchase);
            }
        }
    }

commonMethod: 
(startLine=135 endLine=149 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/server/ai/AIMessage.java)
    /**
     * Change the equipment of a unit.
     *
     * @param aiUnit The <code>AIUnit</code> to equip.
     * @param type The <code>EquipmentType</code> to equip with.
     * @param amount The amount to change the equipment by.
     * @return True if the message was sent, and a non-error reply returned.
     */
    public static boolean askEquipUnit(AIUnit aiUnit, EquipmentType type,
                                       int amount) {
        AIPlayer owner = aiUnit.getOwner();
        return sendMessage(owner.getConnection(),
                           new EquipUnitMessage(aiUnit.getUnit(), type,
                                                amount));
    }


, Instance #
frags: 
(startLine=587 endLine=661 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    private void cheat() {
        logger.finest("Entering method cheat");
        // TODO-AI-CHEATING: REMOVE WHEN THE AI IS GOOD ENOUGH:
        for (GoodsType goodsType : getGame().getSpecification().getGoodsTypeList()) {
            getPlayer().getMarket().setArrears(goodsType, 0);
        }
        
        //TODO: This seems to buy units the AIPlayer can't possibly use (see BR#2566180)
        if (getAIMain().getFreeColServer().isSingleplayer() && getPlayer().isAI()
                && getPlayer().getPlayerType() == PlayerType.COLONIAL) {
            Europe europe = getPlayer().getEurope();
            List<UnitType> unitTypes = getGame().getSpecification().getUnitTypeList();
            
            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    unit = this.trainAIUnitInEurope(unitToTrain).getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    GoodsType muskets = getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));
                    
                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }
            if (getAIRandom().nextInt(40) == 21) {
                int total = 0;
                ArrayList<UnitType> navalUnits = new ArrayList<UnitType>();
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasAbility("model.ability.navalUnit") && unitType.hasPrice()) {
                        navalUnits.add(unitType);
                        total += europe.getUnitPrice(unitType);
                    }
                }
                
                UnitType unitToPurchase = null;
                int random = getAIRandom().nextInt(total);
                total = 0;
                for (UnitType unitType : navalUnits) {
                    total += unitType.getPrice();
                    if (random < total) {
                        unitToPurchase = unitType;
                        break;
                    }
                }
                getPlayer().modifyGold(europe.getUnitPrice(unitToPurchase));
                this.trainAIUnitInEurope(unitToPurchase);
            }
        }
    }

(startLine=681 endLine=757 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void cheat() {
        logger.finest("Entering method cheat");
        // TODO-AI-CHEATING: REMOVE WHEN THE AI IS GOOD ENOUGH:
        for (GoodsType goodsType : getAIMain().getGame().getSpecification().getGoodsTypeList()) {
            getPlayer().getMarket().setArrears(goodsType, 0);
        }

        //TODO: This seems to buy units the AIPlayer can't possibly use (see BR#2566180)
        if (getAIMain().getFreeColServer().isSingleplayer() && getPlayer().isEuropean() && !getPlayer().isREF() && getPlayer().isAI()
                && getPlayer().getPlayerType() == PlayerType.COLONIAL) {
            Europe europe = getPlayer().getEurope();
            List<UnitType> unitTypes = getAIMain().getGame().getSpecification().getUnitTypeList();

            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    AIUnit aiUnit = this.trainAIUnitInEurope(unitToTrain);
                    if (aiUnit != null) unit = aiUnit.getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    GoodsType muskets = getAIMain().getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getAIMain().getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));

                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }
            if (getAIRandom().nextInt(40) == 21) {
                int total = 0;
                ArrayList<UnitType> navalUnits = new ArrayList<UnitType>();
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasAbility("model.ability.navalUnit") && unitType.hasPrice()) {
                        navalUnits.add(unitType);
                        total += europe.getUnitPrice(unitType);
                    }
                }

                UnitType unitToPurchase = null;
                int random = getAIRandom().nextInt(total);
                total = 0;
                for (UnitType unitType : navalUnits) {
                    total += unitType.getPrice();
                    if (random < total) {
                        unitToPurchase = unitType;
                        break;
                    }
                }
                getPlayer().modifyGold(europe.getUnitPrice(unitToPurchase));
                this.trainAIUnitInEurope(unitToPurchase);
            }
        }
    }

commonMethod: 
(startLine=172 endLine=174 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/server/ai/AIPlayer.java)
    protected AIUnit getAIUnit(Unit unit) {
        return (AIUnit) getAIMain().getAIObject(unit);
    }


, Instance #
frags: 
(startLine=600 endLine=636 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    unit = this.trainAIUnitInEurope(unitToTrain).getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    GoodsType muskets = getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));
                    
                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }

(startLine=694 endLine=732 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    AIUnit aiUnit = this.trainAIUnitInEurope(unitToTrain);
                    if (aiUnit != null) unit = aiUnit.getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    GoodsType muskets = getAIMain().getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getAIMain().getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));

                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }

commonMethod: 
(startLine=919 endLine=921 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/common/model/Specification.java)
    public EquipmentType getEquipmentType(String id) {
        return getType(id, EquipmentType.class);
    }


, Instance #
frags: 
(startLine=600 endLine=636 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    unit = this.trainAIUnitInEurope(unitToTrain).getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    GoodsType muskets = getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));
                    
                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }

(startLine=694 endLine=732 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    AIUnit aiUnit = this.trainAIUnitInEurope(unitToTrain);
                    if (aiUnit != null) unit = aiUnit.getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    GoodsType muskets = getAIMain().getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getAIMain().getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));

                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }

commonMethod: 
(startLine=135 endLine=149 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/server/ai/AIMessage.java)
    /**
     * Change the equipment of a unit.
     *
     * @param aiUnit The <code>AIUnit</code> to equip.
     * @param type The <code>EquipmentType</code> to equip with.
     * @param amount The amount to change the equipment by.
     * @return True if the message was sent, and a non-error reply returned.
     */
    public static boolean askEquipUnit(AIUnit aiUnit, EquipmentType type,
                                       int amount) {
        AIPlayer owner = aiUnit.getOwner();
        return sendMessage(owner.getConnection(),
                           new EquipUnitMessage(aiUnit.getUnit(), type,
                                                amount));
    }


, Instance #
frags: 
(startLine=600 endLine=636 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    unit = this.trainAIUnitInEurope(unitToTrain).getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    GoodsType muskets = getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));
                    
                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }

(startLine=694 endLine=732 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (getAIRandom().nextInt(10) == 1) {
                int price = 0;
                UnitType unitToTrain = null;
                for (UnitType unitType : unitTypes) {
                    if (unitType.hasPrice()) {
                        int unitPrice = europe.getUnitPrice(unitType);
                        if (unitToTrain == null || unitPrice < price) {
                            unitToTrain = unitType;
                            price = unitPrice;
                        }
                    }
                }
                Unit unit = null;
                if (unitToTrain != null) {
                    getPlayer().modifyGold(price);
                    AIUnit aiUnit = this.trainAIUnitInEurope(unitToTrain);
                    if (aiUnit != null) unit = aiUnit.getUnit();
                }
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    GoodsType muskets = getAIMain().getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getAIMain().getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));

                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }
            }

commonMethod: 
(startLine=172 endLine=174 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/server/ai/AIPlayer.java)
    protected AIUnit getAIUnit(Unit unit) {
        return (AIUnit) getAIMain().getAIObject(unit);
    }


, Instance #
frags: 
(startLine=617 endLine=635 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    GoodsType muskets = getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));
                    
                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }

(startLine=712 endLine=731 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    GoodsType muskets = getAIMain().getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getAIMain().getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));

                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }

commonMethod: 
(startLine=919 endLine=921 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/common/model/Specification.java)
    public EquipmentType getEquipmentType(String id) {
        return getType(id, EquipmentType.class);
    }


, Instance #
frags: 
(startLine=617 endLine=635 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    GoodsType muskets = getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));
                    
                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }

(startLine=712 endLine=731 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    GoodsType muskets = getAIMain().getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getAIMain().getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));

                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }

commonMethod: 
(startLine=135 endLine=149 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/server/ai/AIMessage.java)
    /**
     * Change the equipment of a unit.
     *
     * @param aiUnit The <code>AIUnit</code> to equip.
     * @param type The <code>EquipmentType</code> to equip with.
     * @param amount The amount to change the equipment by.
     * @return True if the message was sent, and a non-error reply returned.
     */
    public static boolean askEquipUnit(AIUnit aiUnit, EquipmentType type,
                                       int amount) {
        AIPlayer owner = aiUnit.getOwner();
        return sendMessage(owner.getConnection(),
                           new EquipUnitMessage(aiUnit.getUnit(), type,
                                                amount));
    }


, Instance #
frags: 
(startLine=617 endLine=635 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    GoodsType muskets = getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));
                    
                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(50));
                    sendAndWaitSafely(equipHorsesElement);
                }

(startLine=712 endLine=731 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
                if (unit != null && unit.isColonist()) {
                    // no need to equip artillery units with muskets or horses
                    // TODO: cleanup magic numbers 50 and 1
                    GoodsType muskets = getAIMain().getGame().getSpecification().getGoodsType("model.goods.muskets");
                    GoodsType horses = getAIMain().getGame().getSpecification().getGoodsType("model.goods.horses");
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(muskets, 50));
                    getPlayer().modifyGold(getPlayer().getMarket().getBidPrice(horses, 50));

                    sendAndWaitSafely(new ClearSpecialityMessage(unit).toXMLElement());
                    Element equipMusketsElement = Message.createNewRootElement("equipUnit");
                    equipMusketsElement.setAttribute("unit", unit.getId());
                    equipMusketsElement.setAttribute("type", "model.equipment.muskets");
                    equipMusketsElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipMusketsElement);
                    Element equipHorsesElement = Message.createNewRootElement("equipUnit");
                    equipHorsesElement.setAttribute("unit", unit.getId());
                    equipHorsesElement.setAttribute("type", "model.equipment.horses");
                    equipHorsesElement.setAttribute("amount", Integer.toString(1));
                    sendAndWaitSafely(equipHorsesElement);
                }

commonMethod: 
(startLine=172 endLine=174 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/server/ai/AIPlayer.java)
    protected AIUnit getAIUnit(Unit unit) {
        return (AIUnit) getAIMain().getAIObject(unit);
    }


, Instance #
frags: 
(startLine=846 endLine=877 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/AIColony.java)
            for (int i = 0; i < workLocationPlans.size() && food < 2; i++) {
                WorkLocationPlan wlp = workLocationPlans.get(i);
                WorkLocation wl = wlp.getWorkLocation();
                if (wlp.getGoodsType() == foodType
                    && (((ColonyTile) wl).getWorkTile().isLand()
                        || colony.hasAbility("model.ability.produceInWater"))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {
                        //use work() instead of setLocation()
                        //to make sure that unitState is properly updated!
                        bestUnit.work(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }
            }

(startLine=879 endLine=914 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/AIColony.java)
            if (food >= 2) {
                for (int i = 0; i < workLocationPlans.size(); i++) {
                    WorkLocationPlan wlp = workLocationPlans.get(i);
                    if (wlp.getGoodsType() != foodType) {
                        Unit bestUnit = null;
                        int bestProduction = 0;
                        Iterator<Unit> unitIterator = units.iterator();
                        while (unitIterator.hasNext()) {
                            Unit unit = unitIterator.next();
                            int production = 0;
                            WorkLocation location = wlp.getWorkLocation();
                            if (location instanceof ColonyTile) {
                                production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                                  wlp.getGoodsType());
                            } else if (location instanceof Building) {
                                production = ((Building) location).getUnitProductivity(unit);
                            }
                            if (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel()) {
                                bestUnit = unit;
                                bestProduction = production;
                            }
                        }
                        if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {
                            //use work() instead of setLocation()
                            //to make sure that unitState is properly updated!
                            bestUnit.work(wlp.getWorkLocation());
                            bestUnit.setWorkType(wlp.getGoodsType());
                            units.remove(bestUnit);
                            workLocationPlans.remove(wlp);
                            workerAdded = true;
                            food = colony.getFoodProduction() - colony.getFoodConsumption();
                        }
                    }
                }
            }

commonMethod: 
(startLine=136 endLine=138 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/server/ai/AIColony.java)
    protected AIUnit getAIUnit(Unit unit) {
        return (AIUnit) getAIMain().getAIObject(unit);
    }


, Instance #
frags: 
(startLine=846 endLine=877 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/AIColony.java)
            for (int i = 0; i < workLocationPlans.size() && food < 2; i++) {
                WorkLocationPlan wlp = workLocationPlans.get(i);
                WorkLocation wl = wlp.getWorkLocation();
                if (wlp.getGoodsType() == foodType
                    && (((ColonyTile) wl).getWorkTile().isLand()
                        || colony.hasAbility("model.ability.produceInWater"))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {
                        //use work() instead of setLocation()
                        //to make sure that unitState is properly updated!
                        bestUnit.work(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }
            }

(startLine=879 endLine=914 srcPath=/root/NewExperiment/freecolFilter/00725/src/net/sf/freecol/server/ai/AIColony.java)
            if (food >= 2) {
                for (int i = 0; i < workLocationPlans.size(); i++) {
                    WorkLocationPlan wlp = workLocationPlans.get(i);
                    if (wlp.getGoodsType() != foodType) {
                        Unit bestUnit = null;
                        int bestProduction = 0;
                        Iterator<Unit> unitIterator = units.iterator();
                        while (unitIterator.hasNext()) {
                            Unit unit = unitIterator.next();
                            int production = 0;
                            WorkLocation location = wlp.getWorkLocation();
                            if (location instanceof ColonyTile) {
                                production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                                  wlp.getGoodsType());
                            } else if (location instanceof Building) {
                                production = ((Building) location).getUnitProductivity(unit);
                            }
                            if (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel()) {
                                bestUnit = unit;
                                bestProduction = production;
                            }
                        }
                        if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {
                            //use work() instead of setLocation()
                            //to make sure that unitState is properly updated!
                            bestUnit.work(wlp.getWorkLocation());
                            bestUnit.setWorkType(wlp.getGoodsType());
                            units.remove(bestUnit);
                            workLocationPlans.remove(wlp);
                            workerAdded = true;
                            food = colony.getFoodProduction() - colony.getFoodConsumption();
                        }
                    }
                }
            }

commonMethod: 
(startLine=164 endLine=175 srcPath=/root/NewExperiment/freecolFilter/00726/src/net/sf/freecol/server/ai/AIMessage.java)
    /**
     * Set a unit to work in a work location.
     *
     * @param aiUnit The <code>AIUnit</code> to work.
     * @param workLocation The <code>WorkLocation</code> to work in.
     * @return True if the message was sent, and a non-error reply returned.
     */
    public static boolean askWork(AIUnit aiUnit, WorkLocation workLocation) {
        AIPlayer owner = aiUnit.getOwner();
        return sendMessage(owner.getConnection(),
                           new WorkMessage(aiUnit.getUnit(), workLocation));
    }


, Instance #
frags: 
(startLine=696 endLine=702 srcPath=/root/NewExperiment/freecolFilter/00731/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    m = new ModelMessage(ModelMessage.MessageType.ACCEPTED_DEMANDS,
                            "indianDemand.food.text", colony, unit)
                            .addStringTemplate("%nation%", unit.getOwner().getNationName())
                            .addName("%colony%", colony.getName())
                            .addName("%amount%", String.valueOf(goods.getAmount()));
                } else {

(startLine=713 endLine=719 srcPath=/root/NewExperiment/freecolFilter/00731/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    m = new ModelMessage(ModelMessage.MessageType.REJECTED_DEMANDS,
                            "indianDemand.food.text", colony, unit)
                            .addStringTemplate("%nation%", unit.getOwner().getNationName())
                            .addName("%colony%", colony.getName())
                            .addName("%amount%", String.valueOf(goods.getAmount()));
                } else {

commonMethod: 
(startLine=111 endLine=116 srcPath=/root/NewExperiment/freecolFilter/00732/src/net/sf/freecol/common/networking/IndianDemandMessage.java)
    /**
     * Client-side convenience function to get the gold in this message.
     */
    public int getGold() {
        return (goldString == null) ? 0 : Integer.parseInt(goldString);
    }


, Instance #
frags: 
(startLine=696 endLine=702 srcPath=/root/NewExperiment/freecolFilter/00731/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    m = new ModelMessage(ModelMessage.MessageType.ACCEPTED_DEMANDS,
                            "indianDemand.food.text", colony, unit)
                            .addStringTemplate("%nation%", unit.getOwner().getNationName())
                            .addName("%colony%", colony.getName())
                            .addName("%amount%", String.valueOf(goods.getAmount()));
                } else {

(startLine=713 endLine=719 srcPath=/root/NewExperiment/freecolFilter/00731/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    m = new ModelMessage(ModelMessage.MessageType.REJECTED_DEMANDS,
                            "indianDemand.food.text", colony, unit)
                            .addStringTemplate("%nation%", unit.getOwner().getNationName())
                            .addName("%colony%", colony.getName())
                            .addName("%amount%", String.valueOf(goods.getAmount()));
                } else {

commonMethod: 
(startLine=86 endLine=93 srcPath=/root/NewExperiment/freecolFilter/00732/src/net/sf/freecol/common/networking/IndianDemandMessage.java)
    /**
     * Client-side convenience function to get the unit in this message.
     *
     * @param game The <code>Game</code> to look for the unit in.
     */
    public Unit getUnit(Game game) {
        return (Unit) game.getFreeColGameObjectSafely(unitId);
    }


, Instance #
frags: 
(startLine=696 endLine=702 srcPath=/root/NewExperiment/freecolFilter/00731/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    m = new ModelMessage(ModelMessage.MessageType.ACCEPTED_DEMANDS,
                            "indianDemand.food.text", colony, unit)
                            .addStringTemplate("%nation%", unit.getOwner().getNationName())
                            .addName("%colony%", colony.getName())
                            .addName("%amount%", String.valueOf(goods.getAmount()));
                } else {

(startLine=713 endLine=719 srcPath=/root/NewExperiment/freecolFilter/00731/src/net/sf/freecol/client/control/InGameInputHandler.java)
                if (goods.getType().isFoodType()) {
                    m = new ModelMessage(ModelMessage.MessageType.REJECTED_DEMANDS,
                            "indianDemand.food.text", colony, unit)
                            .addStringTemplate("%nation%", unit.getOwner().getNationName())
                            .addName("%colony%", colony.getName())
                            .addName("%amount%", String.valueOf(goods.getAmount()));
                } else {

commonMethod: 
(startLine=95 endLine=102 srcPath=/root/NewExperiment/freecolFilter/00732/src/net/sf/freecol/common/networking/IndianDemandMessage.java)
    /**
     * Client-side convenience function to get the colony in this message.
     *
     * @param game The <code>Game</code> to look for the colony in.
     */
    public Colony getColony(Game game) {
        return (Colony) game.getFreeColGameObjectSafely(colonyId);
    }


, Instance #
frags: 
(startLine=67 endLine=108 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/ContactTest.java)
    public void testEuropeanMeetsEuropean() throws Exception {
        if (server == null) {
            server = ServerTestHelper.startServer(false, true);
        }
        Map map = getTestMap(plains);
        server.setMapGenerator(new MockMapGenerator(map));
        Controller c = server.getController();
        PreGameController pgc = (PreGameController)c;
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }
        Game game = server.getGame();
        FreeColTestCase.setGame(game);

        ServerPlayer dutch = (ServerPlayer) game.getPlayer("model.nation.dutch");
        ServerPlayer french = (ServerPlayer) game.getPlayer("model.nation.french");
        Tile tile1 = map.getTile(6, 8);
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(french, false);
        Tile tile2 = map.getTile(5, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);
        Tile tile3 = map.getTile(4, 8);
        tile3.setExploredBy(dutch, false);
        tile3.setExploredBy(french, true);

        assertFalse(french.hasContacted(dutch));
        assertFalse(dutch.hasContacted(french));

        @SuppressWarnings("unused")
        Unit colonist = new Unit(game, tile1, dutch, colonistType, UnitState.FORTIFIED);
        Unit soldier = new Unit(game, tile3, french, colonistType, UnitState.ACTIVE);
        InGameController igc = (InGameController) server.getController();
        igc.move(french, soldier, tile2);

        assertTrue(french.hasContacted(dutch));
        assertTrue(dutch.hasContacted(french));
        assertEquals(Stance.PEACE, french.getStance(dutch));
        assertEquals(Stance.PEACE, dutch.getStance(french));
    }

(startLine=110 endLine=154 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/ContactTest.java)
    public void testEuropeanMeetsNative() throws Exception {
        if (server == null) {
            server = ServerTestHelper.startServer(false, true);
        }
        Map map = getTestMap(plains);
        server.setMapGenerator(new MockMapGenerator(map));
        Controller c = server.getController();
        PreGameController pgc = (PreGameController)c;
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }
        Game game = server.getGame();
        FreeColTestCase.setGame(game);

        ServerPlayer dutch = (ServerPlayer) game.getPlayer("model.nation.dutch");
        ServerPlayer iroquois = (ServerPlayer) game.getPlayer("model.nation.iroquois");
        Tile tile1 = map.getTile(6, 8);
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(iroquois, false);
        Tile tile2 = map.getTile(5, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(iroquois, true);
        Tile tile3 = map.getTile(4, 8);
        tile3.setExploredBy(dutch, false);
        tile3.setExploredBy(iroquois, true);

        assertFalse(iroquois.hasContacted(dutch));
        assertFalse(dutch.hasContacted(iroquois));

        Unit colonist = new Unit(game, tile1, dutch, colonistType, UnitState.FORTIFIED);
        @SuppressWarnings("unused")
        Unit soldier = new Unit(game, tile3, iroquois, braveType, UnitState.ACTIVE);

        InGameController igc = (InGameController) server.getController();
        igc.move(dutch, colonist, tile2);

        assertTrue(iroquois.hasContacted(dutch));
        assertTrue(dutch.hasContacted(iroquois));
        assertEquals(Stance.PEACE, iroquois.getStance(dutch));
        assertEquals(Stance.PEACE, dutch.getStance(iroquois));

        assertNotNull(iroquois.getTension(dutch));
    }

(startLine=156 endLine=197 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/ContactTest.java)
    public void testEuropeanMeetsColony() throws Exception {
        if (server == null) {
            server = ServerTestHelper.startServer(false, true);
        }
        Map map = getTestMap(plains);
        server.setMapGenerator(new MockMapGenerator(map));
        Controller c = server.getController();
        PreGameController pgc = (PreGameController)c;
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }
        Game game = server.getGame();
        FreeColTestCase.setGame(game);

        ServerPlayer dutch = (ServerPlayer) game.getPlayer("model.nation.dutch");
        ServerPlayer french = (ServerPlayer) game.getPlayer("model.nation.french");
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(french, false);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);
        Tile tile3 = map.getTile(3, 8);
        tile3.setExploredBy(dutch, false);
        tile3.setExploredBy(french, true);

        assertFalse(french.hasContacted(dutch));
        assertFalse(dutch.hasContacted(french));

        @SuppressWarnings("unused")
        Colony colony = getStandardColony(1, 5, 8);
        Unit soldier = new Unit(game, tile3, french, colonistType, UnitState.ACTIVE);
        InGameController igc = (InGameController) server.getController();
        igc.move(french, soldier, tile2);

        assertTrue(french.hasContacted(dutch));
        assertTrue(dutch.hasContacted(french));
        assertEquals(Stance.PEACE, french.getStance(dutch));
        assertEquals(Stance.PEACE, dutch.getStance(french));
    }

(startLine=199 endLine=243 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/ContactTest.java)
    public void testEuropeanMeetsIndianSettlement() throws Exception {
        if (server == null) {
            server = ServerTestHelper.startServer(false, true);
        }
        Map map = getTestMap(plains);
        server.setMapGenerator(new MockMapGenerator(map));
        Controller c = server.getController();
        PreGameController pgc = (PreGameController)c;
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }
        Game game = server.getGame();
        FreeColTestCase.setGame(game);

        ServerPlayer dutch = (ServerPlayer) game.getPlayer("model.nation.dutch");
        ServerPlayer iroquois = (ServerPlayer) game.getPlayer("model.nation.iroquois");
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(iroquois, false);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(iroquois, true);
        Tile tile3 = map.getTile(3, 8);
        tile3.setExploredBy(dutch, false);
        tile3.setExploredBy(iroquois, true);

        assertFalse(iroquois.hasContacted(dutch));
        assertFalse(dutch.hasContacted(iroquois));

        FreeColTestCase.IndianSettlementBuilder builder = new FreeColTestCase.IndianSettlementBuilder(game);
        IndianSettlement settlement = builder.player(iroquois).settlementTile(tile3).skillToTeach(null).build();
        Unit colonist = new Unit(game, tile1, dutch, colonistType, UnitState.FORTIFIED);
        InGameController igc = (InGameController) server.getController();
        igc.move(dutch, colonist, tile2);

        assertTrue(iroquois.hasContacted(dutch));
        assertTrue(dutch.hasContacted(iroquois));
        assertEquals(Stance.PEACE, iroquois.getStance(dutch));
        assertEquals(Stance.PEACE, dutch.getStance(iroquois));

        assertNotNull(iroquois.getTension(dutch));
        assertNotNull(settlement.getAlarm(dutch));
    }

(startLine=245 endLine=286 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/ContactTest.java)
    public void testNativeMeetsEuropean() throws Exception {
        if (server == null) {
            server = ServerTestHelper.startServer(false, true);
        }
        Map map = getTestMap(plains);
        server.setMapGenerator(new MockMapGenerator(map));
        Controller c = server.getController();
        PreGameController pgc = (PreGameController)c;
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }
        Game game = server.getGame();
        FreeColTestCase.setGame(game);

        ServerPlayer apache = (ServerPlayer) game.getPlayer("model.nation.apache");
        ServerPlayer french = (ServerPlayer) game.getPlayer("model.nation.french");
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(apache, true);
        tile1.setExploredBy(french, false);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(apache, true);
        tile2.setExploredBy(french, true);
        Tile tile3 = map.getTile(3, 8);
        tile3.setExploredBy(apache, false);
        tile3.setExploredBy(french, true);

        assertFalse(french.hasContacted(apache));
        assertFalse(apache.hasContacted(french));

        Unit brave = new Unit(game, tile1, apache, braveType, UnitState.FORTIFIED);
        @SuppressWarnings("unused")
        Unit colonist = new Unit(game, tile3, french, colonistType, UnitState.ACTIVE);
        InGameController igc = (InGameController) server.getController();
        igc.move(apache, brave, tile2);

        assertTrue(french.hasContacted(apache));
        assertTrue(apache.hasContacted(french));
        assertEquals(Stance.PEACE, french.getStance(apache));
        assertEquals(Stance.PEACE, apache.getStance(french));
    }

(startLine=288 endLine=332 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/ContactTest.java)
    public void testNativeMeetsNative() throws Exception {
        if (server == null) {
            server = ServerTestHelper.startServer(false, true);
        }
        Map map = getTestMap(plains);
        server.setMapGenerator(new MockMapGenerator(map));
        Controller c = server.getController();
        PreGameController pgc = (PreGameController)c;
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }
        Game game = server.getGame();
        FreeColTestCase.setGame(game);

        ServerPlayer apache = (ServerPlayer) game.getPlayer("model.nation.apache");
        ServerPlayer iroquois = (ServerPlayer) game.getPlayer("model.nation.iroquois");
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(apache, true);
        tile1.setExploredBy(iroquois, false);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(apache, true);
        tile2.setExploredBy(iroquois, true);
        Tile tile3 = map.getTile(3, 8);
        tile3.setExploredBy(apache, false);
        tile3.setExploredBy(iroquois, true);

        assertFalse(iroquois.hasContacted(apache));
        assertFalse(apache.hasContacted(iroquois));

        Unit brave1 = new Unit(game, tile1, apache, braveType, UnitState.FORTIFIED);
        @SuppressWarnings("unused")
        Unit brave2 = new Unit(game, tile3, iroquois, braveType, UnitState.ACTIVE);
        InGameController igc = (InGameController) server.getController();
        igc.move(apache, brave1, tile2);

        assertTrue(iroquois.hasContacted(apache));
        assertTrue(apache.hasContacted(iroquois));
        assertEquals(Stance.PEACE, iroquois.getStance(apache));
        assertEquals(Stance.PEACE, apache.getStance(iroquois));

        // TODO: do we need this?
        // assertNotNull(iroquois.getTension(apache));
    }

(startLine=334 endLine=375 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/ContactTest.java)
    public void testNativeMeetsColony() throws Exception {
        if (server == null) {
            server = ServerTestHelper.startServer(false, true);
        }
        Map map = getTestMap(plains);
        server.setMapGenerator(new MockMapGenerator(map));
        Controller c = server.getController();
        PreGameController pgc = (PreGameController)c;
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }
        Game game = server.getGame();
        FreeColTestCase.setGame(game);

        ServerPlayer apache = (ServerPlayer) game.getPlayer("model.nation.apache");
        ServerPlayer dutch = (ServerPlayer) game.getPlayer("model.nation.dutch");
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(apache, false);
        tile1.setExploredBy(dutch, true);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(apache, true);
        tile2.setExploredBy(dutch, true);
        Tile tile3 = map.getTile(3, 8);
        tile3.setExploredBy(apache, true);
        tile3.setExploredBy(dutch, false);

        assertFalse(dutch.hasContacted(apache));
        assertFalse(apache.hasContacted(dutch));

        @SuppressWarnings("unused")
        Colony colony = getStandardColony(1, 5, 8);
        Unit brave = new Unit(game, tile3, apache, braveType, UnitState.ACTIVE);
        InGameController igc = (InGameController) server.getController();
        igc.move(apache, brave, tile2);

        assertTrue(dutch.hasContacted(apache));
        assertTrue(apache.hasContacted(dutch));
        assertEquals(Stance.PEACE, dutch.getStance(apache));
        assertEquals(Stance.PEACE, apache.getStance(dutch));
    }

(startLine=377 endLine=423 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/ContactTest.java)
    public void testNativeMeetsIndianSettlement() throws Exception {
        if (server == null) {
            server = ServerTestHelper.startServer(false, true);
        }
        Map map = getTestMap(plains);
        server.setMapGenerator(new MockMapGenerator(map));
        Controller c = server.getController();
        PreGameController pgc = (PreGameController)c;
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }
        Game game = server.getGame();
        FreeColTestCase.setGame(game);

        ServerPlayer apache = (ServerPlayer) game.getPlayer("model.nation.apache");
        ServerPlayer iroquois = (ServerPlayer) game.getPlayer("model.nation.iroquois");
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(apache, true);
        tile1.setExploredBy(iroquois, false);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(apache, true);
        tile2.setExploredBy(iroquois, true);
        Tile tile3 = map.getTile(3, 8);
        tile3.setExploredBy(apache, false);
        tile3.setExploredBy(iroquois, true);

        assertFalse(iroquois.hasContacted(apache));
        assertFalse(apache.hasContacted(iroquois));

        // build settlement
        FreeColTestCase.IndianSettlementBuilder builder = new FreeColTestCase.IndianSettlementBuilder(game);
        builder.player(iroquois).settlementTile(tile3).skillToTeach(null).build();
        Unit brave = new Unit(game, tile1, apache, braveType, UnitState.FORTIFIED);
        InGameController igc = (InGameController) server.getController();
        igc.move(apache, brave, tile2);

        assertTrue(iroquois.hasContacted(apache));
        assertTrue(apache.hasContacted(iroquois));
        assertEquals(Stance.PEACE, iroquois.getStance(apache));
        assertEquals(Stance.PEACE, apache.getStance(iroquois));

        // TODO: do we need this?
        // assertNotNull(iroquois.getTension(apache));
        // assertNotNull(settlement.getAlarm(iroquois));
    }

(startLine=425 endLine=467 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/ContactTest.java)
    public void testShipMeetsShip() throws Exception {
        if (server == null) {
            server = ServerTestHelper.startServer(false, true);
        }
        Map map = getTestMap(ocean);
        server.setMapGenerator(new MockMapGenerator(map));
        Controller c = server.getController();
        PreGameController pgc = (PreGameController)c;
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }
        Game game = server.getGame();
        FreeColTestCase.setGame(game);


        ServerPlayer dutch = (ServerPlayer) game.getPlayer("model.nation.dutch");
        ServerPlayer french = (ServerPlayer) game.getPlayer("model.nation.french");
        Tile tile1 = map.getTile(5, 8);
        tile1.setExploredBy(dutch, true);
        tile1.setExploredBy(french, false);
        Tile tile2 = map.getTile(4, 8);
        tile2.setExploredBy(dutch, true);
        tile2.setExploredBy(french, true);
        Tile tile3 = map.getTile(3, 8);
        tile3.setExploredBy(dutch, false);
        tile3.setExploredBy(french, true);

        assertFalse(french.hasContacted(dutch));
        assertFalse(dutch.hasContacted(french));

        Unit ship1 = new Unit(game, tile1, dutch, galleonType, UnitState.FORTIFIED);
        @SuppressWarnings("unused")
        Unit ship2 = new Unit(game, tile3, french, galleonType, UnitState.ACTIVE);
        InGameController igc = (InGameController) server.getController();
        igc.move(dutch, ship1, tile2);

        assertFalse(french.hasContacted(dutch));
        assertFalse(dutch.hasContacted(french));
        assertEquals(Stance.UNCONTACTED, french.getStance(dutch));
        assertEquals(Stance.UNCONTACTED, dutch.getStance(french));
    }

commonMethod: 
(startLine=158 endLine=176 srcPath=/root/NewExperiment/freecolFilter/00748/test/src/net/sf/freecol/server/ServerTestHelper.java)
    public static Game startServerGame(Map map) {
        stopServerGame();
        FreeColServer serv = startServer(false, true);
        serv.setMapGenerator(new MockMapGenerator(map));
        PreGameController pgc = (PreGameController) serv.getController();
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }

        Game game = serv.getGame();
        FreeColTestCase.setGame(game);
        if (game.getCurrentPlayer() == null) {
            game.setCurrentPlayer(game.getFirstPlayer());
        }
        random = new Random();
        return game;
    }


, Instance #
frags: 
(startLine=277 endLine=336 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/StandardAIPlayerTest.java)
    public void testEquipBraves(){
        Game game = start(getTestMap());
        AIMain aiMain = server.getAIMain();

        GoodsType horsesType = spec().getGoodsType("model.goods.horses");
        GoodsType musketsType = spec().getGoodsType("model.goods.muskets");

        FreeColTestCase.IndianSettlementBuilder builder = new FreeColTestCase.IndianSettlementBuilder(game);
        IndianSettlement camp = builder.initialBravesInCamp(3).build();
        StandardAIPlayer player = (StandardAIPlayer) aiMain.getAIObject(camp.getOwner());
        game.setCurrentPlayer(camp.getOwner());

        int bravesToEquip = camp.getUnitCount();
        int horsesReqPerUnit = spec().getEquipmentType("model.equipment.indian.horses").getAmountRequiredOf(horsesType);
        int musketsReqPerUnit = spec().getEquipmentType("model.equipment.indian.muskets").getAmountRequiredOf(musketsType);
        int totalHorsesReq = bravesToEquip * horsesReqPerUnit;
        int totalMusketsReq = bravesToEquip * musketsReqPerUnit;
        int totalHorsesAvail = totalHorsesReq*2;
        int totalMusketsAvail = totalMusketsReq*2;

        // Verify initial conditions
        assertEquals("No horses should exist in camp",0,camp.getGoodsCount(horsesType));
        assertEquals("No muskets should exist in camp",0,camp.getGoodsCount(musketsType));

        for(Unit unit : camp.getUnitList()){
            if(unit.isMounted()){
                fail("Indian should not have mounted braves");
            }
            if(unit.isArmed()){
                fail("Indian should not have armed braves");
            }
        }

        // Setup
        camp.addGoods(horsesType,totalHorsesAvail);
        camp.addGoods(musketsType,totalMusketsAvail);

        assertEquals("Wrong initial number of horses in Indian camp",totalHorsesAvail,camp.getGoodsCount(horsesType));
        assertEquals("Wrong initial number of muskets in Indian camp",totalMusketsAvail,camp.getGoodsCount(musketsType));

        // Exercise SUT
        player.equipBraves(camp);

        // Verify results
        assertEquals("Wrong final number of horses in Indian camp",totalHorsesReq,camp.getGoodsCount(horsesType));
        assertEquals("Wrong final number of muskets in Indian camp",totalMusketsReq,camp.getGoodsCount(musketsType));

        int mounted = 0;
        int armed = 0;
        for(Unit unit : camp.getUnitList()){
            if(unit.isMounted()){
                mounted++;
            }
            if(unit.isArmed()){
                armed++;
            }
        }
        assertEquals("Wrong number of units armed",camp.getUnitCount(),armed);
        assertEquals("Wrong number of units mounted",camp.getUnitCount(),mounted);
    }

(startLine=338 endLine=395 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/StandardAIPlayerTest.java)
    public void testEquipBravesNotEnoughReqGoods(){
        Game game = start(getTestMap());
        AIMain aiMain = server.getAIMain();

        GoodsType horsesType = spec().getGoodsType("model.goods.horses");
        GoodsType musketsType = spec().getGoodsType("model.goods.muskets");

        FreeColTestCase.IndianSettlementBuilder builder = new FreeColTestCase.IndianSettlementBuilder(game);
        IndianSettlement camp = builder.initialBravesInCamp(3).build();
        StandardAIPlayer player = (StandardAIPlayer) aiMain.getAIObject(camp.getOwner());
        game.setCurrentPlayer(camp.getOwner());

        int bravesToEquip = camp.getUnitCount() - 1;
        int horsesReqPerUnit = spec().getEquipmentType("model.equipment.indian.horses").getAmountRequiredOf(horsesType);
        int musketsReqPerUnit = spec().getEquipmentType("model.equipment.indian.muskets").getAmountRequiredOf(musketsType);
        int totalHorsesAvail = bravesToEquip * horsesReqPerUnit;
        int totalMusketsAvail = bravesToEquip * musketsReqPerUnit;

        // Verify initial conditions
        assertEquals("No horses should exist in camp",0,camp.getGoodsCount(horsesType));
        assertEquals("No muskets should exist in camp",0,camp.getGoodsCount(musketsType));

        for(Unit unit : camp.getUnitList()){
            if(unit.isMounted()){
                fail("Indian should not have mounted braves");
            }
            if(unit.isArmed()){
                fail("Indian should not have armed braves");
            }
        }

        // Setup
        camp.addGoods(horsesType,totalHorsesAvail);
        camp.addGoods(musketsType,totalMusketsAvail);

        assertEquals("Wrong initial number of horses in Indian camp",totalHorsesAvail,camp.getGoodsCount(horsesType));
        assertEquals("Wrong initial number of muskets in Indian camp",totalMusketsAvail,camp.getGoodsCount(musketsType));

        // Exercise SUT
        player.equipBraves(camp);

        // Verify results
        assertEquals("Wrong final number of horses in Indian camp",0,camp.getGoodsCount(horsesType));
        assertEquals("Wrong final number of muskets in Indian camp",0,camp.getGoodsCount(musketsType));

        int mounted = 0;
        int armed = 0;
        for(Unit unit : camp.getUnitList()){
            if(unit.isMounted()){
                mounted++;
            }
            if(unit.isArmed()){
                armed++;
            }
        }
        assertEquals("Wrong number of units armed",bravesToEquip,armed);
        assertEquals("Wrong number of units mounted",bravesToEquip,mounted);
    }

commonMethod: 
(startLine=158 endLine=176 srcPath=/root/NewExperiment/freecolFilter/00748/test/src/net/sf/freecol/server/ServerTestHelper.java)
    public static Game startServerGame(Map map) {
        stopServerGame();
        FreeColServer serv = startServer(false, true);
        serv.setMapGenerator(new MockMapGenerator(map));
        PreGameController pgc = (PreGameController) serv.getController();
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }

        Game game = serv.getGame();
        FreeColTestCase.setGame(game);
        if (game.getCurrentPlayer() == null) {
            game.setCurrentPlayer(game.getFirstPlayer());
        }
        random = new Random();
        return game;
    }


, Instance #
frags: 
(startLine=71 endLine=110 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMissionTest.java)
    public void testCapturedUnitsLoseMission() {
        setupServer();
        
        Game game = server.getGame();
        Map map = game.getMap();
        AIMain aiMain = server.getAIMain();
        
        UnitType veteranType = spec().getUnitType("model.unit.veteranSoldier");
        EquipmentType muskets = spec().getEquipmentType("model.equipment.muskets");

        // Create attacking player and unit
        ServerPlayer player1 = (ServerPlayer) game.getPlayer("model.nation.dutch");
        Tile tile1 = map.getTile(2, 2);
        Unit attacker = new Unit(game, tile1, player1, veteranType, UnitState.ACTIVE);
        AIUnit aiUnit = (AIUnit) aiMain.getAIObject(attacker);
        assertNotNull(aiUnit);
        
        // Create defending player and unit
        ServerPlayer player2 = (ServerPlayer) game.getPlayer("model.nation.french");
        Tile tile2 = map.getTile(2, 1);
        Unit defender = new Unit(game, tile2, player2, veteranType,
                                 UnitState.ACTIVE, muskets);
        
        player1.setStance(player2, Stance.WAR);
        player2.setStance(player1, Stance.WAR);
        
        UnitSeekAndDestroyMission mission = new UnitSeekAndDestroyMission(aiMain,aiUnit,defender);
        aiUnit.setMission(mission);
        boolean isSeekAndDestroyMission = aiUnit.getMission() instanceof UnitSeekAndDestroyMission;
        assertTrue("Attacker should have a UnitSeekAndDestroyMission", isSeekAndDestroyMission);
                
        // simulate capture
        attacker.setOwner(player2);
        assertTrue("Attacking unit should have been captured", attacker.getOwner() == player2);
        
        // re-check unit mission
        aiUnit = (AIUnit) aiMain.getAIObject(attacker);
        assertFalse("Captured unit should lose previous mission", aiUnit.getMission() == null);
        
    }

(startLine=112 endLine=148 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMissionTest.java)
    public void testDoNotPursueUnitsInColonies(){
        setupServer();
		
        Game game = server.getGame();
        Map map = game.getMap();
        AIMain aiMain = server.getAIMain();
		
        UnitType veteranType = spec().getUnitType("model.unit.veteranSoldier");
        EquipmentType muskets = spec().getEquipmentType("model.equipment.muskets");

        // Create attacking player and unit
        ServerPlayer player1 = (ServerPlayer) game.getPlayer("model.nation.dutch");
        Tile tile1 = map.getTile(2, 2);
        Unit attacker = new Unit(game, tile1, player1, veteranType, UnitState.ACTIVE);
        AIUnit aiUnit = (AIUnit) aiMain.getAIObject(attacker);
        assertNotNull(aiUnit);
        
        // Create defending player and unit
        ServerPlayer player2 = (ServerPlayer) game.getPlayer("model.nation.french");
        Tile defenderTile = map.getTile(2, 1);
        Unit defender = new Unit(game, defenderTile, player2, veteranType,
                                 UnitState.ACTIVE, muskets);
        
        player1.setStance(player2, Stance.WAR);
        player2.setStance(player1, Stance.WAR);
        
        UnitSeekAndDestroyMission mission = new UnitSeekAndDestroyMission(aiMain,aiUnit,defender);
        aiUnit.setMission(mission);
        boolean isSeekAndDestroyMission = aiUnit.getMission() instanceof UnitSeekAndDestroyMission;
        assertTrue("Attacker should have a UnitSeekAndDestroyMission", isSeekAndDestroyMission);
        assertTrue("UnitSeekAndDestroyMission should be valid", aiUnit.getMission().isValid());
        
        // add colony to the defender tile, to simulate the unit entering it
        getStandardColony(1, defenderTile.getX(),defenderTile.getY());
        String errMsg = "UnitSeekAndDestroyMission should NOT be valid anymore, defender in colony";
        assertFalse(errMsg, aiUnit.getMission().isValid());
    }

commonMethod: 
(startLine=160 endLine=173 srcPath=/root/NewExperiment/freecolFilter/00748/test/src/net/sf/freecol/util/test/FreeColTestCase.java)
    /**
     * Creates a standardized map on which all fields have the plains type.
     * 
     * Uses the getGame() method to access the currently running game.
     * 
     * Does not call Game.setMap(Map) with the returned map. The map
     * is unexplored.
     * 
     * @return The map created as described above.
     */
    public static Map getTestMap() {
        MapBuilder builder = new MapBuilder(getGame());
        return builder.build();
    }


, Instance #
frags: 
(startLine=71 endLine=110 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMissionTest.java)
    public void testCapturedUnitsLoseMission() {
        setupServer();
        
        Game game = server.getGame();
        Map map = game.getMap();
        AIMain aiMain = server.getAIMain();
        
        UnitType veteranType = spec().getUnitType("model.unit.veteranSoldier");
        EquipmentType muskets = spec().getEquipmentType("model.equipment.muskets");

        // Create attacking player and unit
        ServerPlayer player1 = (ServerPlayer) game.getPlayer("model.nation.dutch");
        Tile tile1 = map.getTile(2, 2);
        Unit attacker = new Unit(game, tile1, player1, veteranType, UnitState.ACTIVE);
        AIUnit aiUnit = (AIUnit) aiMain.getAIObject(attacker);
        assertNotNull(aiUnit);
        
        // Create defending player and unit
        ServerPlayer player2 = (ServerPlayer) game.getPlayer("model.nation.french");
        Tile tile2 = map.getTile(2, 1);
        Unit defender = new Unit(game, tile2, player2, veteranType,
                                 UnitState.ACTIVE, muskets);
        
        player1.setStance(player2, Stance.WAR);
        player2.setStance(player1, Stance.WAR);
        
        UnitSeekAndDestroyMission mission = new UnitSeekAndDestroyMission(aiMain,aiUnit,defender);
        aiUnit.setMission(mission);
        boolean isSeekAndDestroyMission = aiUnit.getMission() instanceof UnitSeekAndDestroyMission;
        assertTrue("Attacker should have a UnitSeekAndDestroyMission", isSeekAndDestroyMission);
                
        // simulate capture
        attacker.setOwner(player2);
        assertTrue("Attacking unit should have been captured", attacker.getOwner() == player2);
        
        // re-check unit mission
        aiUnit = (AIUnit) aiMain.getAIObject(attacker);
        assertFalse("Captured unit should lose previous mission", aiUnit.getMission() == null);
        
    }

(startLine=112 endLine=148 srcPath=/root/NewExperiment/freecolFilter/00747/test/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMissionTest.java)
    public void testDoNotPursueUnitsInColonies(){
        setupServer();
		
        Game game = server.getGame();
        Map map = game.getMap();
        AIMain aiMain = server.getAIMain();
		
        UnitType veteranType = spec().getUnitType("model.unit.veteranSoldier");
        EquipmentType muskets = spec().getEquipmentType("model.equipment.muskets");

        // Create attacking player and unit
        ServerPlayer player1 = (ServerPlayer) game.getPlayer("model.nation.dutch");
        Tile tile1 = map.getTile(2, 2);
        Unit attacker = new Unit(game, tile1, player1, veteranType, UnitState.ACTIVE);
        AIUnit aiUnit = (AIUnit) aiMain.getAIObject(attacker);
        assertNotNull(aiUnit);
        
        // Create defending player and unit
        ServerPlayer player2 = (ServerPlayer) game.getPlayer("model.nation.french");
        Tile defenderTile = map.getTile(2, 1);
        Unit defender = new Unit(game, defenderTile, player2, veteranType,
                                 UnitState.ACTIVE, muskets);
        
        player1.setStance(player2, Stance.WAR);
        player2.setStance(player1, Stance.WAR);
        
        UnitSeekAndDestroyMission mission = new UnitSeekAndDestroyMission(aiMain,aiUnit,defender);
        aiUnit.setMission(mission);
        boolean isSeekAndDestroyMission = aiUnit.getMission() instanceof UnitSeekAndDestroyMission;
        assertTrue("Attacker should have a UnitSeekAndDestroyMission", isSeekAndDestroyMission);
        assertTrue("UnitSeekAndDestroyMission should be valid", aiUnit.getMission().isValid());
        
        // add colony to the defender tile, to simulate the unit entering it
        getStandardColony(1, defenderTile.getX(),defenderTile.getY());
        String errMsg = "UnitSeekAndDestroyMission should NOT be valid anymore, defender in colony";
        assertFalse(errMsg, aiUnit.getMission().isValid());
    }

commonMethod: 
(startLine=158 endLine=176 srcPath=/root/NewExperiment/freecolFilter/00748/test/src/net/sf/freecol/server/ServerTestHelper.java)
    public static Game startServerGame(Map map) {
        stopServerGame();
        FreeColServer serv = startServer(false, true);
        serv.setMapGenerator(new MockMapGenerator(map));
        PreGameController pgc = (PreGameController) serv.getController();
        try {
            pgc.startGame();
        } catch (FreeColException e) {
            fail("Failed to start game");
        }

        Game game = serv.getGame();
        FreeColTestCase.setGame(game);
        if (game.getCurrentPlayer() == null) {
            game.setCurrentPlayer(game.getFirstPlayer());
        }
        random = new Random();
        return game;
    }


, Instance #
frags: 
(startLine=131 endLine=144 srcPath=/root/NewExperiment/freecolFilter/00785/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        try {
            Element reply = this.getConnection().ask(recruitUnitInEuropeElement);
            if (reply!=null && reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not recruit the specified AI unit in europe");
                }
                return unit;
            } else {
                logger.warning("Could not recruit the specified AI unit in europe.");
            }
        } catch (IOException e) {

(startLine=302 endLine=315 srcPath=/root/NewExperiment/freecolFilter/00785/src/net/sf/freecol/server/ai/AIPlayer.java)
        try {
            Element reply = this.getConnection().ask(recruitUnitInEuropeElement);
            if (reply!=null && reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not recruit the specified AI unit in europe");
                }
                return unit;
            } else {
                logger.warning("Could not recruit the specified AI unit in europe.");
            }
        } catch (IOException e) {

commonMethod: 
(startLine=251 endLine=261 srcPath=/root/NewExperiment/freecolFilter/00786/src/net/sf/freecol/server/ai/AIMessage.java)
    /**
     * A unit in Europe emigrates.
     *
     * @param connection The <code>Connection</code> to the server.
     * @param slot The slot to emigrate from.
     * @return True if the message was sent, and a non-error reply returned.
     */
    public static boolean askEmigrate(Connection connection, int slot) {
        return sendMessage(connection,
                           new EmigrateUnitMessage(slot));
    }


, Instance #
frags: 
(startLine=106 endLine=113 srcPath=/root/NewExperiment/freecolFilter/00785/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            if (reply!=null && reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not train the specified AI unit "+unitType.getId()+" in europe.");
                }
            } else {

(startLine=272 endLine=279 srcPath=/root/NewExperiment/freecolFilter/00785/src/net/sf/freecol/server/ai/AIPlayer.java)
            if (reply!=null && reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not train the specified AI unit "+unitType.getId()+" in europe.");
                }
            } else {

commonMethod: 
(startLine=368 endLine=379 srcPath=/root/NewExperiment/freecolFilter/00786/src/net/sf/freecol/server/ai/AIMessage.java)
    /**
     * Train unit in Europe.
     *
     * @param connection The <code>Connection</code> to the server.
     * @param unitType The <code>UnitType</code> to train.
     * @return True if the message was sent, and a non-error reply returned.
     */
    public static boolean askTrainUnitInEurope(Connection connection,
                                               UnitType type) {
        return sendMessage(connection,
                           new TrainUnitInEuropeMessage(type));
    }


, Instance #
frags: 
(startLine=106 endLine=113 srcPath=/root/NewExperiment/freecolFilter/00785/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            if (reply!=null && reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not train the specified AI unit "+unitType.getId()+" in europe.");
                }
            } else {

(startLine=133 endLine=141 srcPath=/root/NewExperiment/freecolFilter/00785/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            if (reply!=null && reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not recruit the specified AI unit in europe");
                }
                return unit;
            } else {

(startLine=272 endLine=279 srcPath=/root/NewExperiment/freecolFilter/00785/src/net/sf/freecol/server/ai/AIPlayer.java)
            if (reply!=null && reply.getTagName().equals("trainUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not train the specified AI unit "+unitType.getId()+" in europe.");
                }
            } else {

(startLine=304 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00785/src/net/sf/freecol/server/ai/AIPlayer.java)
            if (reply!=null && reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not recruit the specified AI unit in europe");
                }
                return unit;
            } else {

commonMethod: 
(startLine=298 endLine=307 srcPath=/root/NewExperiment/freecolFilter/00786/src/net/sf/freecol/common/model/Europe.java)
    /**
     * Gets a <code>List</code> of every <code>Unit</code> directly located
     * in this <code>Europe</code>. This does not include <code>Unit</code>s
     * on ships.
     *
     * @return The <code>List</code>.
     */
    public List<Unit> getUnitList() {
        return units;
    }


, Instance #
frags: 
(startLine=133 endLine=141 srcPath=/root/NewExperiment/freecolFilter/00785/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            if (reply!=null && reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not recruit the specified AI unit in europe");
                }
                return unit;
            } else {

(startLine=304 endLine=312 srcPath=/root/NewExperiment/freecolFilter/00785/src/net/sf/freecol/server/ai/AIPlayer.java)
            if (reply!=null && reply.getTagName().equals("recruitUnitInEuropeConfirmed")) {
                Element unitElement = (Element) reply.getChildNodes().item(0);
                String unitID = unitElement.getAttribute("ID");
                unit = (AIUnit) getAIMain().getAIObject(unitID);
                if (unit==null) {
                    logger.warning("Could not recruit the specified AI unit in europe");
                }
                return unit;
            } else {

commonMethod: 
(startLine=251 endLine=261 srcPath=/root/NewExperiment/freecolFilter/00786/src/net/sf/freecol/server/ai/AIMessage.java)
    /**
     * A unit in Europe emigrates.
     *
     * @param connection The <code>Connection</code> to the server.
     * @param slot The slot to emigrate from.
     * @return True if the message was sent, and a non-error reply returned.
     */
    public static boolean askEmigrate(Connection connection, int slot) {
        return sendMessage(connection,
                           new EmigrateUnitMessage(slot));
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=543 endLine=552 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Checks if this is an offensive unit.  That is, one that can
     * attack other units.
     *
     * @return <code>true</code> if this is an offensive unit.
     */
    public boolean isOffensiveUnit() {
        return unitType.getOffence() > UnitType.DEFAULT_OFFENCE
            || isArmed() || isMounted();
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=1878 endLine=1945 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Sets the location of this Unit.
     * 
     * @param newLocation The new Location of the Unit.
     */
    public void setLocation(Location newLocation) {

        Location oldLocation = location;
        Colony oldColony = this.getColony();
        Colony newColony = null;
        
        if (location != null) {
            location.remove(this);
        }
        location = newLocation;
        if (newLocation != null) {
            newLocation.add(this);
            newColony = newLocation.getColony();
        }
        getOwner().setExplored(this);

        // Ugly hooks that should be moved to WorkLocation.add/remove
        // if there was one.
        if (oldLocation instanceof WorkLocation
            && !(newLocation instanceof WorkLocation)) {
            getOwner().modifyScore(-getType().getScoreValue());
            oldColony.updatePopulation(-1);

            if (teacher != null) {
                teacher.setStudent(null);
                teacher = null;
            }
        }
        if (newLocation instanceof WorkLocation
            && !(oldLocation instanceof WorkLocation)) {
            // entering colony
            UnitType newType = unitType.getUnitTypeChange(ChangeType.ENTER_COLONY, owner);
            if (newType == null) {
                getOwner().modifyScore(getType().getScoreValue());
            } else {
                String oldName = unitType.getId() + ".name";
                getOwner().modifyScore(-getType().getScoreValue());
                setType(newType);
                getOwner().modifyScore(getType().getScoreValue() * 2);
                String newName = newType.getId() + ".name";
                newColony.firePropertyChange(ColonyChangeEvent.UNIT_TYPE_CHANGE.toString(),
                                             oldName, newName);
            }
            newColony.updatePopulation(1);
            if (getState() != UnitState.IN_COLONY) {
                logger.warning("Adding unit " + getId() + " with state==" + getState()
                               + " (should be IN_COLONY) to WorkLocation in "
                               + newLocation.getColony().getName() + ". Fixing: ");
                setState(UnitState.IN_COLONY);
            }

            // Find a teacher if available.
            Unit potentialTeacher = newColony.findTeacher(this);
            if (potentialTeacher != null) {
                potentialTeacher.setStudent(this);
                this.setTeacher(potentialTeacher);
            }
        }

        if (newColony != oldColony) {
            setTurnsOfTraining(0); // Reset training when leaving colony
        }
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=121 endLine=131 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Tension.java)
    /** 
     * Get the current tension level.
     *
     * @return The current level.
     */
    public Level getLevel() {
        for (Level level : Level.values()) {
            if (value <= level.getLimit()) return level;
        }
        return Level.HATEFUL;
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=717 endLine=730 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Game.java)
    /**
     * Returns all the European players known by the player of this game.
     *
     * @return All the European players known by the player of this game.
     */
    public List<Player> getEuropeanPlayers() {
        List<Player> europeans = new ArrayList<Player>();
        for (Player player : players) {
            if (player.isEuropean()) {
                europeans.add(player);
            }
        }
        return europeans;
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=181 endLine=190 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Market.java)
    /**
     * Has a type of goods been traded in this market?
     *
     * @param type The type of goods to consider.
     * @return True if the goods type has been traded.
     */
    public boolean hasBeenTraded(GoodsType type) {
        MarketData data = getMarketData(type);
        return data != null && data.getTraded();
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=885 endLine=906 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/IndianSettlement.java)
    public boolean checkForNewMissionaryConvert() {

        /* Increase convert progress and generate convert if needed. */
        if (missionary != null && getGame().getViewOwner() == null) {
            int increment = 8;

            // Update increment if missionary is an expert.
            if (missionary.hasAbility("model.ability.expertMissionary")) {
                increment = 13;
            }

            // Increase increment if alarm level is high.
            increment += 2 * getAlarm(missionary.getOwner()).getValue() / 100;
            convertProgress += increment;

            if (convertProgress >= 100 && getUnitCount() > 2) {
                convertProgress = 0;
                return true;
            }
        }
        return false;
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=1142 endLine=1163 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/server/model/ServerPlayer.java)
    /**
     * All player colonies bombard all available targets.
     *
     * @param random A random number source.
     * @param cs A <code>ChangeSet</code> to update.
     */
    private void csBombardEnemyShips(Random random, ChangeSet cs) {
        for (Colony colony : getColonies()) {
            if (colony.canBombardEnemyShip()) {
                for (Tile tile : colony.getTile().getSurroundingTiles(1)) {
                    if (!tile.isLand() && tile.getFirstUnit() != null) {
                        for (Unit unit : new ArrayList<Unit>(tile.getUnitList())) {
                            if (atWarWith(unit.getOwner())
                                || unit.hasAbility("model.ability.piracy")) {
                                csCombat(colony, unit, null, random, cs);
                            }
                        }
                    }
                }
            }
        }
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=2145 endLine=2195 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Sets the owner of this Unit.
     * 
     * @param owner The new owner of this Unit.
     */
    public void setOwner(Player owner) {
        Player oldOwner = this.owner;
        
        // safeguard
        if (oldOwner == owner) {
            return;
        } else if (oldOwner == null) {
            logger.warning("Unit " + getId() + " had no previous owner");
        }

        // Clear trade route and goto orders if changing owner.
        if (getTradeRoute() != null) {
            setTradeRoute(null);
        }
        if (getDestination() != null) {
            setDestination(null);
        }

        // This need to be set right away
        this.owner = owner;
        // If its a carrier, we need to update the units it has loaded 
        //before finishing with it
        for (Unit unit : getUnitList()) {
            unit.setOwner(owner);
        }
                
        if(oldOwner != null){
            oldOwner.removeUnit(this);
            oldOwner.modifyScore(-getType().getScoreValue());
            // for speed optimizations
            if(!isOnCarrier()){
                oldOwner.invalidateCanSeeTiles();
            }
        }
        owner.setUnit(this);
        owner.modifyScore(getType().getScoreValue());

        // for speed optimizations
        if(!isOnCarrier()){
            getOwner().setExplored(this);
        }

        if (getGame().getFreeColGameObjectListener() != null) {
            getGame().getFreeColGameObjectListener().ownerChanged(this, oldOwner, owner);
        }
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=391 endLine=401 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Market.java)
    /**
     * Clear any price changes for a type of goods.
     *
     * @param goodsType The type of goods to consider.
     */
    public void flushPriceChange(GoodsType goodsType) {
        MarketData data = getMarketData(goodsType);
        if (data != null) {
            data.setOldPrice(data.getCostToBuy());
        }
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=1867 endLine=1889 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Tile.java)
    /**
     * Finds the nearest settlement to this tile.
     *
     * @param owner If non-null, the settlement should be owned by this player.
     * @param radius The maximum radius of the search.
     * @return The nearest settlement, or null if none.
     */
    public Settlement getNearestSettlement(Player owner, int radius) {
        if (radius <= 0) radius = INFINITY;
        Map map = getGame().getMap();
        Iterator<Position> iter = map.getCircleIterator(getPosition(), true,
                                                        radius);
        while (iter.hasNext()) {
            Tile t = map.getTile(iter.next());
            if (t == this) continue;
            Settlement settlement = t.getSettlement();
            if (settlement != null
                && (owner == null || settlement.getOwner() == owner)) {
                return settlement;
            }
        }
        return null;
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=1165 endLine=1203 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/server/model/ServerPlayer.java)
    /**
     * Remove a standard yearly amount of storable goods, and
     * a random extra amount of a random type.
     *
     * @param random A pseudo-random number source.
     * @param cs A <code>ChangeSet</code> to update.
     */
    public void csYearlyGoodsRemoval(Random random, ChangeSet cs) {
        List<GoodsType> goodsTypes = getGame().getSpecification()
            .getGoodsTypeList();
        Market market = getMarket();

        // Pick a random type of storable goods to remove an extra amount of.
        GoodsType removeType;
        for (;;) {
            removeType = Utils.getRandomMember(logger, "Choose goods type",
                                               goodsTypes, random);
            if (removeType.isStorable()) break;
        }
        // Remove standard amount, and the extra amount.
        for (GoodsType type : goodsTypes) {
            if (type.isStorable() && market.hasBeenTraded(type)) {
                int amount = getGame().getTurn().getNumber() / 10;
                if (type == removeType && amount > 0) {
                    amount += Utils.randomInt(logger, "Remove from market",
                                              random, 2 * amount + 1);
                }
                if (amount > 0) {
                    market.addGoodsToMarket(type, -amount);
                }
            }
            if (market.hasPriceChanged(type)) {
                cs.add(See.only(this), market.getMarketData(type));
                cs.addMessage(See.only(this),
                              market.makePriceChangeMessage(type));
                market.flushPriceChange(type);
            }
        }
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=2216 endLine=2233 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Player.java)
    /**
     * Gets the hostility this player has against the given player.
     *
     * @param player The <code>Player</code>.
     * @return An object representing the tension level.
     */
    public Tension getTension(Player player) {
        if (player == null) {
            throw new IllegalStateException("Null player.");
        } else {
            Tension newTension = tension.get(player);
            if (newTension == null) {
                newTension = new Tension(Tension.TENSION_MIN);
            }
            tension.put(player, newTension);
            return newTension;
        }
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=2197 endLine=2225 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Sets the type of the unit.
     * 
     * @param newUnitType The new type of the unit.
     */
    public void setType(UnitType newUnitType) {
        if (newUnitType.isAvailableTo(owner)) {
            if (unitType == null) {
                owner.modifyScore(newUnitType.getScoreValue());
            } else {
                owner.modifyScore(newUnitType.getScoreValue() - unitType.getScoreValue());
            }
            this.unitType = newUnitType;
            naval = unitType.hasAbility("model.ability.navalUnit");
            if (getMovesLeft() > getInitialMovesLeft()) {
                setMovesLeft(getInitialMovesLeft());
            }
            hitpoints = unitType.getHitPoints();
            if (getTeacher() != null && !canBeStudent(getTeacher())) {
                getTeacher().setStudent(null);
                setTeacher(null);
            }
        } else {
            // ColonialRegulars only available after independence is declared
            logger.warning("Units of type: " + newUnitType
                           + " are not available to " + owner.getPlayerType()
                           + " player " + owner.getName());
        }
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=379 endLine=389 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Market.java)
    /**
     * Has the price of a type of goods changed in this market?
     *
     * @param goodsType The type of goods to consider.
     * @return True if the price has changed.
     */
    public boolean hasPriceChanged(GoodsType goodsType) {
        MarketData data = getMarketData(goodsType);
        return data != null && data.getOldPrice() != 0
            && data.getOldPrice() != data.getCostToBuy();
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=121 endLine=133 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/util/Utils.java)
    /**
     * Gets a random member of a list.
     *
     * @param logger The <code>Logger</code> to log to.
     * @param logMe A string to log with the result.
     * @param list The list.
     * @param random A random number source.
     * @return A random member from the list.
     */
    public static <T> T getRandomMember(Logger logger, String logMe,
                                        List<T> list, Random random) {
        return list.get(randomInt(logger, logMe, random, list.size()));
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=750 endLine=765 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns a list of all IndianSettlements this player owns.
     *
     * @return The indian settlements this player owns.
     */
    public List<IndianSettlement> getIndianSettlements() {
        ArrayList<IndianSettlement> indianSettlements = new ArrayList<IndianSettlement>();
        for (Settlement s : settlements) {
            if (s instanceof IndianSettlement) {
                indianSettlements.add((IndianSettlement) s);
            } else {
                throw new RuntimeException("getIndianSettlements can only be called for players whose settlements are IndianSettlements.");
            }
        }
        return indianSettlements;
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=1920 endLine=1930 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns the nation of this player as a String.
     *
     * @return The nation of this player as a String.
     */
    public StringTemplate getNationName() {
        return (playerType == PlayerType.REBEL
                || playerType == PlayerType.INDEPENDENT)
            ? StringTemplate.name(independentNationName)
            : StringTemplate.key(nationID + ".name");
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=216 endLine=230 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Market.java)
    /**
     * Add (or remove) some goods to this market.
     * 
     * @param goodsType The <code>GoodsType</code> to add.
     * @param amount The amount of goods.
     */
    public void addGoodsToMarket(GoodsType goodsType, int amount) {
        MarketData data = requireMarketData(goodsType);

        // Markets are bottomless, amount can not go below the threshold
        data.setAmountInMarket(Math.max(MINIMUM_AMOUNT,
                                        data.getAmountInMarket() + amount));
        data.setTraded(true);
        data.price();
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=86 endLine=102 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/util/Utils.java)
    /**
     * Convenience to aid logging uses of Randoms.
     *
     * @param logger The <code>Logger</code> to log to.
     * @param logMe A string to log with the result.
     * @param random A pseudo-<code>Random</code> number source.
     * @param n The exclusive maximum integer to return.
     * @return A pseudo-random integer r, 0 <= r < n.
     */
    public static int randomInt(Logger logger, String logMe, Random random,
                                int n) {
        int ret = random.nextInt(n);
        if (logger != null) {
            logger.finest(logMe + " random(" + n + ") = " + ret);
        }
        return ret;
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=331 endLine=356 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/IndianSettlement.java)
    /**
     * Modifies the alarm level towards the given player due to an event
     * at this settlement, and propagate the alarm upwards through the
     * tribe.
     *
     * @param player The <code>Player</code>.
     * @param addToAlarm The amount to add to the current alarm level.
     * @return A list of settlements whose alarm level has changed.
     */
    public List<FreeColGameObject> modifyAlarm(Player player, int addToAlarm) {
        boolean change = makeContactSettlement(player);
        Level oldLevel = getAlarm(player).getLevel();
        change |= changeAlarm(player, addToAlarm);

        // Propagate alarm upwards.  Capital has a greater impact.
        List<FreeColGameObject> modified = owner.modifyTension(player,
                ((isCapital()) ? addToAlarm : addToAlarm/2), this);
        if (change) {
            modified.add(this);
        }
        logger.finest("Alarm at " + getName()
            + " toward " + player.getName()
            + " modified by " + Integer.toString(addToAlarm)
            + " now = " + Integer.toString(getAlarm(player).getValue()));
        return modified;
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=737 endLine=759 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Returns true if the Unit, or its owner has the ability
     * identified by <code>id</code>.
     *
     * @param id a <code>String</code> value
     * @return a <code>boolean</code> value
     */
    public boolean hasAbility(String id) {
        Set<Ability> result = new HashSet<Ability>();
        // UnitType abilities always apply
        result.addAll(unitType.getFeatureContainer().getAbilitySet(id));
        // the player's abilities may not apply
        result.addAll(getOwner().getFeatureContainer()
                      .getAbilitySet(id, unitType, getGame().getTurn()));
        // EquipmentType abilities always apply
        for (EquipmentType equipmentType : equipment.keySet()) {
            result.addAll(equipmentType.getFeatureContainer().getAbilitySet(id));
            // player abilities may also apply to equipment (missionary) 
            result.addAll(getOwner().getFeatureContainer()
                          .getAbilitySet(id, equipmentType, getGame().getTurn()));
        }
        return FeatureContainer.hasAbility(result);
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=403 endLine=424 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Market.java)
    /**
     * Make up a <code>ModelMessage</code> describing the change in this
     * <code>Market</code> for a specified type of goods.
     *
     * @param goodsType The <code>GoodsType</code> that has changed price.
     * @return A message describing the change.
     */
    public ModelMessage makePriceChangeMessage(GoodsType goodsType) {
        MarketData data = getMarketData(goodsType);
        int oldPrice = data.getOldPrice();
        int newPrice = data.getCostToBuy();
        return (oldPrice == newPrice) ? null
            : new ModelMessage(ModelMessage.MessageType.MARKET_PRICES,
                               ((newPrice > oldPrice)
                                ? "model.market.priceIncrease"
                                : "model.market.priceDecrease"),
                               this, goodsType)
            .addStringTemplate("%market%", owner.getMarketName())
            .add("%goods%", goodsType.getNameKey())
            .addAmount("%buy%", newPrice)
            .addAmount("%sell%", data.getPaidForSale());
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=708 endLine=723 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets the number of units at this colony.  Units are located in a
     * {@link WorkLocation}s.
     *
     * @return The number of <code>Unit</code>s in this colony.
     */
    public int getUnitCount() {
        int count = 0;
        if (unitCount != -1) {
            return unitCount;
        }
        for (WorkLocation w : getWorkLocations()) {
            count += w.getUnitCount();
        }
        return count;
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=252 endLine=263 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/FeatureContainer.java)
    /**
     * Applies a Set of Modifiers with the given ID which match the
     * given FreeColGameObjectType and Turn to the given float value.
     *
     * @param number a <code>float</code> value
     * @param id a <code>String</code> value
     * @param objectType a <code>FreeColGameObjectType</code> value
     * @param turn a <code>Turn</code> value
     */
    public float applyModifier(float number, String id, FreeColGameObjectType objectType, Turn turn) {
        return applyModifierSet(number, turn, getModifierSet(id, objectType, turn));
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=1205 endLine=1356 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/server/model/ServerPlayer.java)
    /**
     * Adds a founding father to a players continental congress.
     *
     * @param father The <code>FoundingFather</code> to add.
     * @param random A pseudo-random number source.
     * @param cs A <code>ChangeSet</code> to update.
     */
    public void csAddFoundingFather(FoundingFather father, Random random,
                                    ChangeSet cs) {
        Game game = getGame();
        Specification spec = game.getSpecification();
        Europe europe = getEurope();
        boolean europeDirty = false;

        // TODO: We do not want to have to update the whole player
        // just to get the FF into the client.  Use this hack until
        // the client gets proper containers.
        cs.addFather(this, father);

        cs.addMessage(See.only(this),
            new ModelMessage(ModelMessage.MessageType.SONS_OF_LIBERTY,
                             "model.player.foundingFatherJoinedCongress",
                             this)
                      .add("%foundingFather%", father.getNameKey())
                      .add("%description%", father.getDescriptionKey()));
        cs.addHistory(this,
            new HistoryEvent(getGame().getTurn(),
                             HistoryEvent.EventType.FOUNDING_FATHER)
                      .add("%father%", father.getNameKey()));

        List<AbstractUnit> units = father.getUnits();
        if (units != null && !units.isEmpty() && europe != null) {
            createUnits(father.getUnits());
            europeDirty = true;
        }

        java.util.Map<UnitType, UnitType> upgrades = father.getUpgrades();
        if (upgrades != null) {
            for (Unit u : getUnits()) {
                UnitType newType = upgrades.get(u.getType());
                if (newType != null) {
                    u.setType(newType);
                    cs.add(See.perhaps(), u);
                }
            }
        }

        for (Ability ability : father.getFeatureContainer().getAbilities()) {
            if ("model.ability.addTaxToBells".equals(ability.getId())) {
                // Provoke a tax/liberty recalculation
                setTax(getTax());
                cs.addPartial(See.only(this), this, "tax");
            }
        }

        for (Event event : father.getEvents()) {
            String eventId = event.getId();
            if (eventId.equals("model.event.resetNativeAlarm")) {
                for (Player p : game.getPlayers()) {
                    if (!p.isEuropean() && p.hasContacted(this)) {
                        p.setTension(this, new Tension(Tension.TENSION_MIN));
                        for (IndianSettlement is : p.getIndianSettlements()) {
                            if (is.hasContactedSettlement(this)) {
                                is.setAlarm(this,
                                            new Tension(Tension.TENSION_MIN));
                                cs.add(See.only(this), is);
                            }
                        }
                    }
                }

            } else if (eventId.equals("model.event.boycottsLifted")) {
                Market market = getMarket();
                for (GoodsType goodsType : spec.getGoodsTypeList()) {
                    if (market.getArrears(goodsType) > 0) {
                        market.setArrears(goodsType, 0);
                        cs.add(See.only(this), market.getMarketData(goodsType));
                    }
                }

            } else if (eventId.equals("model.event.freeBuilding")) {
                BuildingType type = spec.getBuildingType(event.getValue());
                for (Colony colony : getColonies()) {
                    if (colony.canBuild(type)) {
                        colony.addBuilding(new ServerBuilding(game, colony, type));
                        colony.getBuildQueue().remove(type);
                        cs.add(See.only(this), colony);
                    }
                }

            } else if (eventId.equals("model.event.seeAllColonies")) {
                for (Tile t : game.getMap().getAllTiles()) {
                    Colony colony = t.getColony();
                    if (colony != null
                        && (ServerPlayer) colony.getOwner() != this) {
                        if (!t.isExploredBy(this)) {
                            t.setExploredBy(this, true);
                            t.updatePlayerExploredTile(this);
                            cs.add(See.only(this), t);
                        }
                        for (Tile x : t.getSurroundingTiles(1)) {
                            if (!x.isExploredBy(this)) {
                                x.setExploredBy(this, true);
                                x.updatePlayerExploredTile(this);
                                cs.add(See.only(this), x);
                            }
                        }
                    }
                }

            } else if (eventId.equals("model.event.increaseSonsOfLiberty")) {
                int value = Integer.parseInt(event.getValue());
                GoodsType bells = spec.getLibertyGoodsTypeList().get(0);
                for (Colony colony : getColonies()) {
                    int requiredLiberty = ((colony.getSoL() + value)
                                           * Colony.LIBERTY_PER_REBEL
                                           * colony.getUnitCount()) / 100;
                    GoodsContainer container = colony.getGoodsContainer();
                    container.saveState();
                    colony.addGoods(bells, requiredLiberty
                                    - colony.getGoodsCount(bells));
                    cs.add(See.only(this), container);
                }

            } else if (eventId.equals("model.event.newRecruits")
                       && europe != null) {
                List<RandomChoice<UnitType>> recruits
                    = generateRecruitablesList();
                FeatureContainer fc = getFeatureContainer();
                for (int i = 0; i < Europe.RECRUIT_COUNT; i++) {
                    if (!fc.hasAbility("model.ability.canRecruitUnit",
                                       europe.getRecruitable(i))) {
                        UnitType newType = RandomChoice
                            .getWeightedRandom(logger,
                                "Replace recruit", random, recruits);
                        europe.setRecruitable(i, newType);
                        europeDirty = true;
                    }
                }

            } else if (eventId.equals("model.event.movementChange")) {
                for (Unit u : getUnits()) {
                    if (u.getMovesLeft() > 0) {
                        u.setMovesLeft(u.getInitialMovesLeft());
                        cs.addPartial(See.only(this), u, "movesLeft");
                    }
                }
            }
        }

        if (europeDirty) cs.add(See.only(this), europe);
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=704 endLine=719 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns a list of all Colonies this player owns.
     *
     * @return The colonies this player owns.
     */
    public List<Colony> getColonies() {
        ArrayList<Colony> colonies = new ArrayList<Colony>();
        for (Settlement s : settlements) {
            if (s instanceof Colony) {
                colonies.add((Colony) s);
            } else {
                throw new RuntimeException("getColonies can only be called for players whose settlements are colonies.");
            }
        }
        return colonies;
    }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=1708 endLine=1744 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Tile.java)
     /**
      * Returns all the tiles surrounding the given tile within the
      * given range. The center tile itself is not included.
      *
      * @param t
      *            The tile that lies on the center of the tiles to return.
      * @param range
      *            How far away do we need to go starting from the center tile.
      * @return The tiles surrounding the given tile.
      */
     public Iterable<Tile> getSurroundingTiles(final int range) {
         return new Iterable<Tile>(){
             public Iterator<Tile> iterator(){
                 final Iterator<Position> m;

                 if (range == 1)
                     m = getMap().getAdjacentIterator(getPosition());
                 else
                     m = getMap().getCircleIterator(getPosition(), true, range);

                 return new Iterator<Tile>(){
                     public boolean hasNext() {
                         return m.hasNext();
}

                     public Tile next() {
                         return getMap().getTile(m.next());
         }

                     public void remove() {
                         m.remove();
     }
                 };
             }
         };

     }


, Instance #
frags: 
(startLine=757 endLine=774 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=775 endLine=792 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=545 endLine=563 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/server/model/ServerPlayer.java)
    /**
     * Checks whether the current founding father has been recruited.
     *
     * @return The new founding father, or null if none available or ready.
     */
    public FoundingFather checkFoundingFather() {
        FoundingFather father = null;
        if (currentFather != null) {
            int extraLiberty = getRemainingFoundingFatherCost();
            if (extraLiberty <= 0) {
                boolean overflow = getSpecification()
                    .getBoolean(GameOptions.SAVE_PRODUCTION_OVERFLOW);
                setLiberty((overflow) ? -extraLiberty : 0);
                father = currentFather;
                currentFather = null;
            }
        }
        return father;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=543 endLine=552 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Checks if this is an offensive unit.  That is, one that can
     * attack other units.
     *
     * @return <code>true</code> if this is an offensive unit.
     */
    public boolean isOffensiveUnit() {
        return unitType.getOffence() > UnitType.DEFAULT_OFFENCE
            || isArmed() || isMounted();
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=1878 endLine=1945 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Sets the location of this Unit.
     * 
     * @param newLocation The new Location of the Unit.
     */
    public void setLocation(Location newLocation) {

        Location oldLocation = location;
        Colony oldColony = this.getColony();
        Colony newColony = null;
        
        if (location != null) {
            location.remove(this);
        }
        location = newLocation;
        if (newLocation != null) {
            newLocation.add(this);
            newColony = newLocation.getColony();
        }
        getOwner().setExplored(this);

        // Ugly hooks that should be moved to WorkLocation.add/remove
        // if there was one.
        if (oldLocation instanceof WorkLocation
            && !(newLocation instanceof WorkLocation)) {
            getOwner().modifyScore(-getType().getScoreValue());
            oldColony.updatePopulation(-1);

            if (teacher != null) {
                teacher.setStudent(null);
                teacher = null;
            }
        }
        if (newLocation instanceof WorkLocation
            && !(oldLocation instanceof WorkLocation)) {
            // entering colony
            UnitType newType = unitType.getUnitTypeChange(ChangeType.ENTER_COLONY, owner);
            if (newType == null) {
                getOwner().modifyScore(getType().getScoreValue());
            } else {
                String oldName = unitType.getId() + ".name";
                getOwner().modifyScore(-getType().getScoreValue());
                setType(newType);
                getOwner().modifyScore(getType().getScoreValue() * 2);
                String newName = newType.getId() + ".name";
                newColony.firePropertyChange(ColonyChangeEvent.UNIT_TYPE_CHANGE.toString(),
                                             oldName, newName);
            }
            newColony.updatePopulation(1);
            if (getState() != UnitState.IN_COLONY) {
                logger.warning("Adding unit " + getId() + " with state==" + getState()
                               + " (should be IN_COLONY) to WorkLocation in "
                               + newLocation.getColony().getName() + ". Fixing: ");
                setState(UnitState.IN_COLONY);
            }

            // Find a teacher if available.
            Unit potentialTeacher = newColony.findTeacher(this);
            if (potentialTeacher != null) {
                potentialTeacher.setStudent(this);
                this.setTeacher(potentialTeacher);
            }
        }

        if (newColony != oldColony) {
            setTurnsOfTraining(0); // Reset training when leaving colony
        }
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=121 endLine=131 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Tension.java)
    /** 
     * Get the current tension level.
     *
     * @return The current level.
     */
    public Level getLevel() {
        for (Level level : Level.values()) {
            if (value <= level.getLimit()) return level;
        }
        return Level.HATEFUL;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=717 endLine=730 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Game.java)
    /**
     * Returns all the European players known by the player of this game.
     *
     * @return All the European players known by the player of this game.
     */
    public List<Player> getEuropeanPlayers() {
        List<Player> europeans = new ArrayList<Player>();
        for (Player player : players) {
            if (player.isEuropean()) {
                europeans.add(player);
            }
        }
        return europeans;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=1049 endLine=1059 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/server/control/ChangeSet.java)
    /**
     * Helper function to add a message to a ChangeSet.
     *
     * @param see The visibility of this change.
     * @param message The <code>ModelMessage</code> to add.
     * @return The updated <code>ChangeSet</code>.
     */
    public ChangeSet addMessage(See see, ModelMessage message) {
        changes.add(new OwnedChange(see, message));
        return this;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=181 endLine=190 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Market.java)
    /**
     * Has a type of goods been traded in this market?
     *
     * @param type The type of goods to consider.
     * @return True if the goods type has been traded.
     */
    public boolean hasBeenTraded(GoodsType type) {
        MarketData data = getMarketData(type);
        return data != null && data.getTraded();
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=885 endLine=906 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/IndianSettlement.java)
    public boolean checkForNewMissionaryConvert() {

        /* Increase convert progress and generate convert if needed. */
        if (missionary != null && getGame().getViewOwner() == null) {
            int increment = 8;

            // Update increment if missionary is an expert.
            if (missionary.hasAbility("model.ability.expertMissionary")) {
                increment = 13;
            }

            // Increase increment if alarm level is high.
            increment += 2 * getAlarm(missionary.getOwner()).getValue() / 100;
            convertProgress += increment;

            if (convertProgress >= 100 && getUnitCount() > 2) {
                convertProgress = 0;
                return true;
            }
        }
        return false;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=1142 endLine=1163 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/server/model/ServerPlayer.java)
    /**
     * All player colonies bombard all available targets.
     *
     * @param random A random number source.
     * @param cs A <code>ChangeSet</code> to update.
     */
    private void csBombardEnemyShips(Random random, ChangeSet cs) {
        for (Colony colony : getColonies()) {
            if (colony.canBombardEnemyShip()) {
                for (Tile tile : colony.getTile().getSurroundingTiles(1)) {
                    if (!tile.isLand() && tile.getFirstUnit() != null) {
                        for (Unit unit : new ArrayList<Unit>(tile.getUnitList())) {
                            if (atWarWith(unit.getOwner())
                                || unit.hasAbility("model.ability.piracy")) {
                                csCombat(colony, unit, null, random, cs);
                            }
                        }
                    }
                }
            }
        }
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=2145 endLine=2195 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Sets the owner of this Unit.
     * 
     * @param owner The new owner of this Unit.
     */
    public void setOwner(Player owner) {
        Player oldOwner = this.owner;
        
        // safeguard
        if (oldOwner == owner) {
            return;
        } else if (oldOwner == null) {
            logger.warning("Unit " + getId() + " had no previous owner");
        }

        // Clear trade route and goto orders if changing owner.
        if (getTradeRoute() != null) {
            setTradeRoute(null);
        }
        if (getDestination() != null) {
            setDestination(null);
        }

        // This need to be set right away
        this.owner = owner;
        // If its a carrier, we need to update the units it has loaded 
        //before finishing with it
        for (Unit unit : getUnitList()) {
            unit.setOwner(owner);
        }
                
        if(oldOwner != null){
            oldOwner.removeUnit(this);
            oldOwner.modifyScore(-getType().getScoreValue());
            // for speed optimizations
            if(!isOnCarrier()){
                oldOwner.invalidateCanSeeTiles();
            }
        }
        owner.setUnit(this);
        owner.modifyScore(getType().getScoreValue());

        // for speed optimizations
        if(!isOnCarrier()){
            getOwner().setExplored(this);
        }

        if (getGame().getFreeColGameObjectListener() != null) {
            getGame().getFreeColGameObjectListener().ownerChanged(this, oldOwner, owner);
        }
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=391 endLine=401 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Market.java)
    /**
     * Clear any price changes for a type of goods.
     *
     * @param goodsType The type of goods to consider.
     */
    public void flushPriceChange(GoodsType goodsType) {
        MarketData data = getMarketData(goodsType);
        if (data != null) {
            data.setOldPrice(data.getCostToBuy());
        }
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=1867 endLine=1889 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Tile.java)
    /**
     * Finds the nearest settlement to this tile.
     *
     * @param owner If non-null, the settlement should be owned by this player.
     * @param radius The maximum radius of the search.
     * @return The nearest settlement, or null if none.
     */
    public Settlement getNearestSettlement(Player owner, int radius) {
        if (radius <= 0) radius = INFINITY;
        Map map = getGame().getMap();
        Iterator<Position> iter = map.getCircleIterator(getPosition(), true,
                                                        radius);
        while (iter.hasNext()) {
            Tile t = map.getTile(iter.next());
            if (t == this) continue;
            Settlement settlement = t.getSettlement();
            if (settlement != null
                && (owner == null || settlement.getOwner() == owner)) {
                return settlement;
            }
        }
        return null;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=1165 endLine=1203 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/server/model/ServerPlayer.java)
    /**
     * Remove a standard yearly amount of storable goods, and
     * a random extra amount of a random type.
     *
     * @param random A pseudo-random number source.
     * @param cs A <code>ChangeSet</code> to update.
     */
    public void csYearlyGoodsRemoval(Random random, ChangeSet cs) {
        List<GoodsType> goodsTypes = getGame().getSpecification()
            .getGoodsTypeList();
        Market market = getMarket();

        // Pick a random type of storable goods to remove an extra amount of.
        GoodsType removeType;
        for (;;) {
            removeType = Utils.getRandomMember(logger, "Choose goods type",
                                               goodsTypes, random);
            if (removeType.isStorable()) break;
        }
        // Remove standard amount, and the extra amount.
        for (GoodsType type : goodsTypes) {
            if (type.isStorable() && market.hasBeenTraded(type)) {
                int amount = getGame().getTurn().getNumber() / 10;
                if (type == removeType && amount > 0) {
                    amount += Utils.randomInt(logger, "Remove from market",
                                              random, 2 * amount + 1);
                }
                if (amount > 0) {
                    market.addGoodsToMarket(type, -amount);
                }
            }
            if (market.hasPriceChanged(type)) {
                cs.add(See.only(this), market.getMarketData(type));
                cs.addMessage(See.only(this),
                              market.makePriceChangeMessage(type));
                market.flushPriceChange(type);
            }
        }
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=2216 endLine=2233 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Player.java)
    /**
     * Gets the hostility this player has against the given player.
     *
     * @param player The <code>Player</code>.
     * @return An object representing the tension level.
     */
    public Tension getTension(Player player) {
        if (player == null) {
            throw new IllegalStateException("Null player.");
        } else {
            Tension newTension = tension.get(player);
            if (newTension == null) {
                newTension = new Tension(Tension.TENSION_MIN);
            }
            tension.put(player, newTension);
            return newTension;
        }
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=2197 endLine=2225 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Sets the type of the unit.
     * 
     * @param newUnitType The new type of the unit.
     */
    public void setType(UnitType newUnitType) {
        if (newUnitType.isAvailableTo(owner)) {
            if (unitType == null) {
                owner.modifyScore(newUnitType.getScoreValue());
            } else {
                owner.modifyScore(newUnitType.getScoreValue() - unitType.getScoreValue());
            }
            this.unitType = newUnitType;
            naval = unitType.hasAbility("model.ability.navalUnit");
            if (getMovesLeft() > getInitialMovesLeft()) {
                setMovesLeft(getInitialMovesLeft());
            }
            hitpoints = unitType.getHitPoints();
            if (getTeacher() != null && !canBeStudent(getTeacher())) {
                getTeacher().setStudent(null);
                setTeacher(null);
            }
        } else {
            // ColonialRegulars only available after independence is declared
            logger.warning("Units of type: " + newUnitType
                           + " are not available to " + owner.getPlayerType()
                           + " player " + owner.getName());
        }
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=379 endLine=389 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Market.java)
    /**
     * Has the price of a type of goods changed in this market?
     *
     * @param goodsType The type of goods to consider.
     * @return True if the price has changed.
     */
    public boolean hasPriceChanged(GoodsType goodsType) {
        MarketData data = getMarketData(goodsType);
        return data != null && data.getOldPrice() != 0
            && data.getOldPrice() != data.getCostToBuy();
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=121 endLine=133 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/util/Utils.java)
    /**
     * Gets a random member of a list.
     *
     * @param logger The <code>Logger</code> to log to.
     * @param logMe A string to log with the result.
     * @param list The list.
     * @param random A random number source.
     * @return A random member from the list.
     */
    public static <T> T getRandomMember(Logger logger, String logMe,
                                        List<T> list, Random random) {
        return list.get(randomInt(logger, logMe, random, list.size()));
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=750 endLine=765 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns a list of all IndianSettlements this player owns.
     *
     * @return The indian settlements this player owns.
     */
    public List<IndianSettlement> getIndianSettlements() {
        ArrayList<IndianSettlement> indianSettlements = new ArrayList<IndianSettlement>();
        for (Settlement s : settlements) {
            if (s instanceof IndianSettlement) {
                indianSettlements.add((IndianSettlement) s);
            } else {
                throw new RuntimeException("getIndianSettlements can only be called for players whose settlements are IndianSettlements.");
            }
        }
        return indianSettlements;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=1920 endLine=1930 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns the nation of this player as a String.
     *
     * @return The nation of this player as a String.
     */
    public StringTemplate getNationName() {
        return (playerType == PlayerType.REBEL
                || playerType == PlayerType.INDEPENDENT)
            ? StringTemplate.name(independentNationName)
            : StringTemplate.key(nationID + ".name");
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=216 endLine=230 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Market.java)
    /**
     * Add (or remove) some goods to this market.
     * 
     * @param goodsType The <code>GoodsType</code> to add.
     * @param amount The amount of goods.
     */
    public void addGoodsToMarket(GoodsType goodsType, int amount) {
        MarketData data = requireMarketData(goodsType);

        // Markets are bottomless, amount can not go below the threshold
        data.setAmountInMarket(Math.max(MINIMUM_AMOUNT,
                                        data.getAmountInMarket() + amount));
        data.setTraded(true);
        data.price();
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=86 endLine=102 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/util/Utils.java)
    /**
     * Convenience to aid logging uses of Randoms.
     *
     * @param logger The <code>Logger</code> to log to.
     * @param logMe A string to log with the result.
     * @param random A pseudo-<code>Random</code> number source.
     * @param n The exclusive maximum integer to return.
     * @return A pseudo-random integer r, 0 <= r < n.
     */
    public static int randomInt(Logger logger, String logMe, Random random,
                                int n) {
        int ret = random.nextInt(n);
        if (logger != null) {
            logger.finest(logMe + " random(" + n + ") = " + ret);
        }
        return ret;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=331 endLine=356 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/IndianSettlement.java)
    /**
     * Modifies the alarm level towards the given player due to an event
     * at this settlement, and propagate the alarm upwards through the
     * tribe.
     *
     * @param player The <code>Player</code>.
     * @param addToAlarm The amount to add to the current alarm level.
     * @return A list of settlements whose alarm level has changed.
     */
    public List<FreeColGameObject> modifyAlarm(Player player, int addToAlarm) {
        boolean change = makeContactSettlement(player);
        Level oldLevel = getAlarm(player).getLevel();
        change |= changeAlarm(player, addToAlarm);

        // Propagate alarm upwards.  Capital has a greater impact.
        List<FreeColGameObject> modified = owner.modifyTension(player,
                ((isCapital()) ? addToAlarm : addToAlarm/2), this);
        if (change) {
            modified.add(this);
        }
        logger.finest("Alarm at " + getName()
            + " toward " + player.getName()
            + " modified by " + Integer.toString(addToAlarm)
            + " now = " + Integer.toString(getAlarm(player).getValue()));
        return modified;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=737 endLine=759 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Returns true if the Unit, or its owner has the ability
     * identified by <code>id</code>.
     *
     * @param id a <code>String</code> value
     * @return a <code>boolean</code> value
     */
    public boolean hasAbility(String id) {
        Set<Ability> result = new HashSet<Ability>();
        // UnitType abilities always apply
        result.addAll(unitType.getFeatureContainer().getAbilitySet(id));
        // the player's abilities may not apply
        result.addAll(getOwner().getFeatureContainer()
                      .getAbilitySet(id, unitType, getGame().getTurn()));
        // EquipmentType abilities always apply
        for (EquipmentType equipmentType : equipment.keySet()) {
            result.addAll(equipmentType.getFeatureContainer().getAbilitySet(id));
            // player abilities may also apply to equipment (missionary) 
            result.addAll(getOwner().getFeatureContainer()
                          .getAbilitySet(id, equipmentType, getGame().getTurn()));
        }
        return FeatureContainer.hasAbility(result);
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=403 endLine=424 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Market.java)
    /**
     * Make up a <code>ModelMessage</code> describing the change in this
     * <code>Market</code> for a specified type of goods.
     *
     * @param goodsType The <code>GoodsType</code> that has changed price.
     * @return A message describing the change.
     */
    public ModelMessage makePriceChangeMessage(GoodsType goodsType) {
        MarketData data = getMarketData(goodsType);
        int oldPrice = data.getOldPrice();
        int newPrice = data.getCostToBuy();
        return (oldPrice == newPrice) ? null
            : new ModelMessage(ModelMessage.MessageType.MARKET_PRICES,
                               ((newPrice > oldPrice)
                                ? "model.market.priceIncrease"
                                : "model.market.priceDecrease"),
                               this, goodsType)
            .addStringTemplate("%market%", owner.getMarketName())
            .add("%goods%", goodsType.getNameKey())
            .addAmount("%buy%", newPrice)
            .addAmount("%sell%", data.getPaidForSale());
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=708 endLine=723 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets the number of units at this colony.  Units are located in a
     * {@link WorkLocation}s.
     *
     * @return The number of <code>Unit</code>s in this colony.
     */
    public int getUnitCount() {
        int count = 0;
        if (unitCount != -1) {
            return unitCount;
        }
        for (WorkLocation w : getWorkLocations()) {
            count += w.getUnitCount();
        }
        return count;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=252 endLine=263 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/FeatureContainer.java)
    /**
     * Applies a Set of Modifiers with the given ID which match the
     * given FreeColGameObjectType and Turn to the given float value.
     *
     * @param number a <code>float</code> value
     * @param id a <code>String</code> value
     * @param objectType a <code>FreeColGameObjectType</code> value
     * @param turn a <code>Turn</code> value
     */
    public float applyModifier(float number, String id, FreeColGameObjectType objectType, Turn turn) {
        return applyModifierSet(number, turn, getModifierSet(id, objectType, turn));
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=1205 endLine=1356 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/server/model/ServerPlayer.java)
    /**
     * Adds a founding father to a players continental congress.
     *
     * @param father The <code>FoundingFather</code> to add.
     * @param random A pseudo-random number source.
     * @param cs A <code>ChangeSet</code> to update.
     */
    public void csAddFoundingFather(FoundingFather father, Random random,
                                    ChangeSet cs) {
        Game game = getGame();
        Specification spec = game.getSpecification();
        Europe europe = getEurope();
        boolean europeDirty = false;

        // TODO: We do not want to have to update the whole player
        // just to get the FF into the client.  Use this hack until
        // the client gets proper containers.
        cs.addFather(this, father);

        cs.addMessage(See.only(this),
            new ModelMessage(ModelMessage.MessageType.SONS_OF_LIBERTY,
                             "model.player.foundingFatherJoinedCongress",
                             this)
                      .add("%foundingFather%", father.getNameKey())
                      .add("%description%", father.getDescriptionKey()));
        cs.addHistory(this,
            new HistoryEvent(getGame().getTurn(),
                             HistoryEvent.EventType.FOUNDING_FATHER)
                      .add("%father%", father.getNameKey()));

        List<AbstractUnit> units = father.getUnits();
        if (units != null && !units.isEmpty() && europe != null) {
            createUnits(father.getUnits());
            europeDirty = true;
        }

        java.util.Map<UnitType, UnitType> upgrades = father.getUpgrades();
        if (upgrades != null) {
            for (Unit u : getUnits()) {
                UnitType newType = upgrades.get(u.getType());
                if (newType != null) {
                    u.setType(newType);
                    cs.add(See.perhaps(), u);
                }
            }
        }

        for (Ability ability : father.getFeatureContainer().getAbilities()) {
            if ("model.ability.addTaxToBells".equals(ability.getId())) {
                // Provoke a tax/liberty recalculation
                setTax(getTax());
                cs.addPartial(See.only(this), this, "tax");
            }
        }

        for (Event event : father.getEvents()) {
            String eventId = event.getId();
            if (eventId.equals("model.event.resetNativeAlarm")) {
                for (Player p : game.getPlayers()) {
                    if (!p.isEuropean() && p.hasContacted(this)) {
                        p.setTension(this, new Tension(Tension.TENSION_MIN));
                        for (IndianSettlement is : p.getIndianSettlements()) {
                            if (is.hasContactedSettlement(this)) {
                                is.setAlarm(this,
                                            new Tension(Tension.TENSION_MIN));
                                cs.add(See.only(this), is);
                            }
                        }
                    }
                }

            } else if (eventId.equals("model.event.boycottsLifted")) {
                Market market = getMarket();
                for (GoodsType goodsType : spec.getGoodsTypeList()) {
                    if (market.getArrears(goodsType) > 0) {
                        market.setArrears(goodsType, 0);
                        cs.add(See.only(this), market.getMarketData(goodsType));
                    }
                }

            } else if (eventId.equals("model.event.freeBuilding")) {
                BuildingType type = spec.getBuildingType(event.getValue());
                for (Colony colony : getColonies()) {
                    if (colony.canBuild(type)) {
                        colony.addBuilding(new ServerBuilding(game, colony, type));
                        colony.getBuildQueue().remove(type);
                        cs.add(See.only(this), colony);
                    }
                }

            } else if (eventId.equals("model.event.seeAllColonies")) {
                for (Tile t : game.getMap().getAllTiles()) {
                    Colony colony = t.getColony();
                    if (colony != null
                        && (ServerPlayer) colony.getOwner() != this) {
                        if (!t.isExploredBy(this)) {
                            t.setExploredBy(this, true);
                            t.updatePlayerExploredTile(this);
                            cs.add(See.only(this), t);
                        }
                        for (Tile x : t.getSurroundingTiles(1)) {
                            if (!x.isExploredBy(this)) {
                                x.setExploredBy(this, true);
                                x.updatePlayerExploredTile(this);
                                cs.add(See.only(this), x);
                            }
                        }
                    }
                }

            } else if (eventId.equals("model.event.increaseSonsOfLiberty")) {
                int value = Integer.parseInt(event.getValue());
                GoodsType bells = spec.getLibertyGoodsTypeList().get(0);
                for (Colony colony : getColonies()) {
                    int requiredLiberty = ((colony.getSoL() + value)
                                           * Colony.LIBERTY_PER_REBEL
                                           * colony.getUnitCount()) / 100;
                    GoodsContainer container = colony.getGoodsContainer();
                    container.saveState();
                    colony.addGoods(bells, requiredLiberty
                                    - colony.getGoodsCount(bells));
                    cs.add(See.only(this), container);
                }

            } else if (eventId.equals("model.event.newRecruits")
                       && europe != null) {
                List<RandomChoice<UnitType>> recruits
                    = generateRecruitablesList();
                FeatureContainer fc = getFeatureContainer();
                for (int i = 0; i < Europe.RECRUIT_COUNT; i++) {
                    if (!fc.hasAbility("model.ability.canRecruitUnit",
                                       europe.getRecruitable(i))) {
                        UnitType newType = RandomChoice
                            .getWeightedRandom(logger,
                                "Replace recruit", random, recruits);
                        europe.setRecruitable(i, newType);
                        europeDirty = true;
                    }
                }

            } else if (eventId.equals("model.event.movementChange")) {
                for (Unit u : getUnits()) {
                    if (u.getMovesLeft() > 0) {
                        u.setMovesLeft(u.getInitialMovesLeft());
                        cs.addPartial(See.only(this), u, "movesLeft");
                    }
                }
            }
        }

        if (europeDirty) cs.add(See.only(this), europe);
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=704 endLine=719 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns a list of all Colonies this player owns.
     *
     * @return The colonies this player owns.
     */
    public List<Colony> getColonies() {
        ArrayList<Colony> colonies = new ArrayList<Colony>();
        for (Settlement s : settlements) {
            if (s instanceof Colony) {
                colonies.add((Colony) s);
            } else {
                throw new RuntimeException("getColonies can only be called for players whose settlements are colonies.");
            }
        }
        return colonies;
    }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=1708 endLine=1744 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/common/model/Tile.java)
     /**
      * Returns all the tiles surrounding the given tile within the
      * given range. The center tile itself is not included.
      *
      * @param t
      *            The tile that lies on the center of the tiles to return.
      * @param range
      *            How far away do we need to go starting from the center tile.
      * @return The tiles surrounding the given tile.
      */
     public Iterable<Tile> getSurroundingTiles(final int range) {
         return new Iterable<Tile>(){
             public Iterator<Tile> iterator(){
                 final Iterator<Position> m;

                 if (range == 1)
                     m = getMap().getAdjacentIterator(getPosition());
                 else
                     m = getMap().getCircleIterator(getPosition(), true, range);

                 return new Iterator<Tile>(){
                     public boolean hasNext() {
                         return m.hasNext();
}

                     public Tile next() {
                         return getMap().getTile(m.next());
         }

                     public void remove() {
                         m.remove();
     }
                 };
             }
         };

     }


, Instance #
frags: 
(startLine=758 endLine=771 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer);
                change = true;
                logger.finest("Stance change " + getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + otherPlayer.getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

(startLine=776 endLine=789 srcPath=/root/NewExperiment/freecolFilter/00789/src/net/sf/freecol/server/model/ServerPlayer.java)
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                cs.addStance(See.perhaps(), otherPlayer, stance, this);
                change = true;
                logger.finest("Stance change " + otherPlayer.getName()
                              + " " + old.toString()
                              + " -> " + stance.toString()
                              + " wrt " + getName());
            } catch (IllegalStateException e) { // Catch illegal transitions

commonMethod: 
(startLine=545 endLine=563 srcPath=/root/NewExperiment/freecolFilter/00790/src/net/sf/freecol/server/model/ServerPlayer.java)
    /**
     * Checks whether the current founding father has been recruited.
     *
     * @return The new founding father, or null if none available or ready.
     */
    public FoundingFather checkFoundingFather() {
        FoundingFather father = null;
        if (currentFather != null) {
            int extraLiberty = getRemainingFoundingFatherCost();
            if (extraLiberty <= 0) {
                boolean overflow = getSpecification()
                    .getBoolean(GameOptions.SAVE_PRODUCTION_OVERFLOW);
                setLiberty((overflow) ? -extraLiberty : 0);
                father = currentFather;
                currentFather = null;
            }
        }
        return father;
    }


, Instance #
frags: 
(startLine=994 endLine=1002 srcPath=/root/NewExperiment/freecolFilter/00826/src/net/sf/freecol/client/control/InGameController.java)
        if (present == toUnload) {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                                 "traderoute.unload", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%location%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .add("%goods%", type.getNameKey());
        } else if (toUnload > atStop) {

(startLine=1002 endLine=1011 srcPath=/root/NewExperiment/freecolFilter/00826/src/net/sf/freecol/client/control/InGameController.java)
        } else if (toUnload > atStop) {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                                 "traderoute.overflow", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%colony%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .addName("%overflow%", Integer.toString(toUnload - atStop))
                .add("%goods%", type.getNameKey());
        } else {

(startLine=1011 endLine=1020 srcPath=/root/NewExperiment/freecolFilter/00826/src/net/sf/freecol/client/control/InGameController.java)
        } else {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                                 "traderoute.nounload", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%location%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .addName("%overflow%", Integer.toString(present - atStop))
                .add("%goods%", type.getNameKey());
        }

commonMethod: 
(startLine=346 endLine=357 srcPath=/root/NewExperiment/freecolFilter/00827/src/net/sf/freecol/common/model/ModelMessage.java)
    /**
     * Add a key and an integer value to replace it to this
     * StringTemplate.
     *
     * @param key a <code>String</code> value
     * @param amount an <code>int</code> value
     * @return a <code>ModelMessage</code> value
     */
    public ModelMessage addAmount(String key, int amount) {
        super.addAmount(key, amount);
        return this;
    }


, Instance #
frags: 
(startLine=1263 endLine=1283 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/control/InGameController.java)
                                  Goods goods, int price) {
        TransactionSession session
            = TransactionSession.lookup(unit, settlement);
        if (session == null) {
            return Message.clientError("Proposing to buy without opening a transaction session?!");
        }
        if (!(Boolean) session.get("canBuy")) {
            return Message.clientError("Proposing to buy in a session where buying is not allowed.");
        }

        // AI considers the proposition, return with a gold value
        AIPlayer ai = (AIPlayer) getFreeColServer().getAIMain()
            .getAIObject(settlement.getOwner());
        int gold = ai.buyProposition(unit, settlement, goods, price);

        // Others can not see proposals.
        ChangeSet cs = new ChangeSet();
        cs.addAttribute(See.only(serverPlayer),
                        "gold", Integer.toString(gold));
        return cs.build(serverPlayer);
    }

(startLine=1297 endLine=1317 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/control/InGameController.java)
                                   Goods goods, int price) {
        TransactionSession session
            = TransactionSession.lookup(unit, settlement);
        if (session == null) {
            return Message.clientError("Proposing to sell without opening a transaction session");
        }
        if (!(Boolean) session.get("canSell")) {
            return Message.clientError("Proposing to sell in a session where selling is not allowed.");
        }

        // AI considers the proposition, return with a gold value
        AIPlayer ai = (AIPlayer) getFreeColServer().getAIMain()
            .getAIObject(settlement.getOwner());
        int gold = ai.sellProposition(unit, settlement, goods, price);

        // Others can not see proposals.
        ChangeSet cs = new ChangeSet();
        cs.addAttribute(See.only(serverPlayer),
                        "gold", Integer.toString(gold));
        return cs.build(serverPlayer);
    }

commonMethod: 
(startLine=1360 endLine=1368 srcPath=/root/NewExperiment/freecolFilter/00838/src/net/sf/freecol/server/FreeColServer.java)
    /**
     * Gets the AI player corresponding to a given player.
     *
     * @param player The <code>Player</code> to look up.
     * @return The corresponding AI player, or null if not found.
     */
    public AIPlayer getAIPlayer(Player player) {
        return getAIMain().getAIPlayer(player);
    }


, Instance #
frags: 
(startLine=769 endLine=960 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
    private void giveNormalMissions() {
        logger.finest("Entering method giveNormalMissions");

        // Create a datastructure for the worker wishes:
        java.util.Map<UnitType, ArrayList<Wish>> workerWishes = new HashMap<UnitType, ArrayList<Wish>>();

        Iterator<AIColony> aIterator = getAIColonyIterator();
        while (aIterator.hasNext()) {
            Iterator<Wish> wIterator = aIterator.next().getWishIterator();
            while (wIterator.hasNext()) {
                Wish w = wIterator.next();
                if (w instanceof WorkerWish && w.getTransportable() == null) {
                    UnitType unitType = ((WorkerWish) w).getUnitType();
                    ArrayList<Wish> wishes = workerWishes.get(unitType);
                    if (wishes == null) {
                        wishes = new ArrayList<Wish>();
                        workerWishes.put(unitType, wishes);
                    }
                    wishes.add(w);
                }
            }
        }


        final boolean fewColonies = hasFewColonies();
        boolean isPioneerReq = PioneeringMission.getPlayerPioneers(this).size() == 0;
        Iterator<AIUnit> aiUnitsIterator = getAIUnitIterator();
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();

            if (aiUnit.hasMission()) {
                continue;
            }

            Unit unit = aiUnit.getUnit();

            if (unit.isUninitialized()) {
                logger.warning("Trying to assign a mission to an uninitialized object: " + unit.getId());
                continue;
            }

            // Setup as a pioneer if unit is:
            //      - already with tools, or
            //      - an expert pioneer, or
            //      - a non-expert unit and there are no other units assigned as pioneers
            boolean isPioneer = unit.hasAbility("model.ability.improveTerrain")
                                || unit.hasAbility("model.ability.expertPioneer");
            boolean isExpert = unit.getSkillLevel() > 0;
            if ((isPioneer || (isPioneerReq && !isExpert)) && PioneeringMission.isValid(aiUnit)) {
                aiUnit.setMission(new PioneeringMission(getAIMain(), aiUnit));
                isPioneerReq = false;
                continue;
            }

            if (unit.canCarryTreasure()) {
                aiUnit.setMission(new CashInTreasureTrainMission(getAIMain(), aiUnit));
            } else if (unit.hasAbility("model.ability.scoutIndianSettlement") &&
                       ScoutingMission.isValid(aiUnit)) {
                aiUnit.setMission(new ScoutingMission(getAIMain(), aiUnit));
            } else if ((unit.isOffensiveUnit() || unit.isDefensiveUnit())
                       && (!unit.isColonist() || unit.hasAbility("model.ability.expertSoldier") ||
                        getGame().getTurn().getNumber() > 5)) {
                giveMilitaryMission(aiUnit);
            } else if (unit.isColonist()) {
                /*
                 * Motivated by (speed) performance: This map stores the
                 * distance between the unit and the destination of a Wish:
                 */
                HashMap<Location, Integer> distances = new HashMap<Location, Integer>(121);
                for (ArrayList<Wish> al : workerWishes.values()) {
                    for (Wish w : al) {
                        if (!distances.containsKey(w.getDestination())) {
                            distances.put(w.getDestination(), unit.getTurnsToReach(w.getDestination()));
                        }
                    }
                }

                // Check if this unit is needed as an expert (using:
                // "WorkerWish"):
                ArrayList<Wish> wishList = workerWishes.get(unit.getType());
                WorkerWish bestWish = null;
                int bestTurns = Integer.MAX_VALUE;
                for (int i = 0; i < wishList.size(); i++) {
                    WorkerWish ww = (WorkerWish) wishList.get(i);
                    if (ww.getTransportable() != null) {
                        wishList.remove(i);
                        i--;
                        continue;
                    }
                    int turns = distances.get(ww.getDestination());
                    if (turns == Integer.MAX_VALUE) {
                        if (ww.getDestination().getTile() == null) {
                            turns = 5;
                        } else {
                            turns = 10;
                        }
                    } else if (turns > 5) {
                        turns = 5;
                    }
                    if (bestWish == null
                            || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                        bestWish = ww;
                        bestTurns = turns;
                    }
                }
                if (bestWish != null) {
                    bestWish.setTransportable(aiUnit);
                    aiUnit.setMission(new WishRealizationMission(getAIMain(), aiUnit, bestWish));
                    continue;
                }
                // Find a site for a new colony:
                Tile colonyTile = null;
                if (getPlayer().canBuildColonies()) {
                    colonyTile = BuildColonyMission.findColonyLocation(aiUnit.getUnit());
                }
                if (colonyTile != null) {
                    bestTurns = unit.getTurnsToReach(colonyTile);
                }

                // Check if we can find a better site to work than a new colony:
                if (!fewColonies || colonyTile == null || bestTurns > 10) {
                    for (int i = 0; i < workerWishes.size(); i++) {
                        wishList = workerWishes.get(i);
                        for (int j = 0; j < wishList.size(); j++) {
                            WorkerWish ww = (WorkerWish) wishList.get(j);
                            if (ww.getTransportable() != null) {
                                wishList.remove(j);
                                j--;
                                continue;
                            }
                            int turns = distances.get(ww.getDestination());
                            if (turns == Integer.MAX_VALUE) {
                                if (ww.getDestination().getTile() == null) {
                                    turns = 5;
                                } else {
                                    turns = 10;
                                }
                            } else if (turns > 5) {
                                turns = 5;
                            }
                            // TODO: Choose to build colony if the value of the
                            // wish is low.
                            if (bestWish == null
                                    || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                                bestWish = ww;
                                bestTurns = turns;
                            }
                        }
                    }
                }
                if (bestWish != null) {
                    bestWish.setTransportable(aiUnit);
                    aiUnit.setMission(new WishRealizationMission(getAIMain(), aiUnit, bestWish));
                    continue;
                }
                // Choose to build a new colony:
                if (colonyTile != null) {
                	Mission mission = new BuildColonyMission(getAIMain(),
                							aiUnit,
                							colonyTile,
                							getPlayer().getColonyValue(colonyTile));
                    aiUnit.setMission(mission);

                    boolean isUnitOnCarrier = aiUnit.getUnit().isOnCarrier();
                    if (isUnitOnCarrier) {
                        AIUnit carrier = (AIUnit) getAIMain().getAIObject(
                                (FreeColGameObject) aiUnit.getUnit().getLocation());

                        //make verification of carrier mission
                        Mission carrierMission = carrier.getMission();

                        boolean isCarrierMissionToTransport = carrierMission instanceof TransportMission;
                        if(!isCarrierMissionToTransport){
                        	throw new IllegalStateException("Carrier carrying unit not on a transport mission");
                        }
                        //transport unit to carrier destination (is this what is truly wanted?)
                        ((TransportMission) carrierMission).addToTransportList(aiUnit);
                    }
                    continue;
                }
            }
            if (!aiUnit.hasMission()) {
                if (aiUnit.getUnit().isOffensiveUnit()) {
                    aiUnit.setMission(new UnitWanderHostileMission(getAIMain(), aiUnit));
                } else {
                    //non-offensive units should take shelter in a nearby colony,
                    //not try to be hostile
                    aiUnit.setMission(new IdleAtColonyMission(getAIMain(), aiUnit));
                }
            }
        }
    }

(startLine=1495 endLine=1711 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
    private void giveNormalMissions() {
        logger.finest("Entering method giveNormalMissions");

        // Create a datastructure for the worker wishes:
        java.util.Map<UnitType, ArrayList<Wish>> workerWishes =
            new HashMap<UnitType, ArrayList<Wish>>();
        for (UnitType unitType : getAIMain().getGame().getSpecification().getUnitTypeList()) {
            workerWishes.put(unitType, new ArrayList<Wish>());
        }
        if (getPlayer().isEuropean()) {
            Iterator<AIColony> aIterator = getAIColonyIterator();
            while (aIterator.hasNext()) {
                Iterator<Wish> wIterator = aIterator.next().getWishIterator();
                while (wIterator.hasNext()) {
                    Wish w = wIterator.next();
                    if (w instanceof WorkerWish && w.getTransportable() == null) {
                        workerWishes.get(((WorkerWish) w).getUnitType()).add(w);
                    }
                }
            }
        }

        final boolean fewColonies = hasFewColonies();
        boolean isPioneerReq = PioneeringMission.getPlayerPioneers(this).size() == 0;
        Iterator<AIUnit> aiUnitsIterator = getAIUnitIterator();
        while (aiUnitsIterator.hasNext()) {
            AIUnit aiUnit = aiUnitsIterator.next();

            if (aiUnit.hasMission()) {
                continue;
            }

            Unit unit = aiUnit.getUnit();

            if (unit.isUninitialized()) {
                logger.warning("Trying to assign a mission to an uninitialized object: " + unit.getId());
                continue;
            }

            if (unit.getState() == UnitState.IN_COLONY
                && unit.getSettlement().getUnitCount() <= 1) {
                // The unit has its hand full keeping the colony alive.
                continue;
            }
            
            // only processing naval units
            if(unit.isNaval()){
            	continue;
            }

            if (unit.canCarryTreasure()) {
                aiUnit.setMission(new CashInTreasureTrainMission(getAIMain(), aiUnit));
                continue;
            }

            if (unit.hasAbility("model.ability.scoutIndianSettlement") &&
                       ScoutingMission.isValid(aiUnit)) {
                aiUnit.setMission(new ScoutingMission(getAIMain(), aiUnit));
                continue;
            }

            if (unit.isOffensiveUnit() || unit.isDefensiveUnit()){
            	Player owner = unit.getOwner();
            	boolean isPastStart = getGame().getTurn().getNumber() > 5
            			&& !owner.getSettlements().isEmpty();
            
            	if(!unit.isColonist() 
            			|| isPastStart
            			|| owner.isIndian()
            			|| owner.isREF()){
            		giveMilitaryMission(aiUnit);
            		continue;
            	}
            }

            // Setup as a pioneer if unit is:
            //      - already with tools, or
            //      - an expert pioneer, or
            //      - a non-expert unit and there are no other units assigned as pioneers
            boolean isPioneer = unit.hasAbility("model.ability.improveTerrain")
                                || unit.hasAbility("model.ability.expertPioneer");
            boolean isExpert = unit.getSkillLevel() > 0;
            if ((isPioneer || (isPioneerReq && !isExpert)) && PioneeringMission.isValid(aiUnit)) {
                aiUnit.setMission(new PioneeringMission(getAIMain(), aiUnit));
                isPioneerReq = false;
                continue;
            }

            if (unit.isColonist() && unit.getOwner().isEuropean()) {
                /*
                 * Motivated by (speed) performance: This map stores the
                 * distance between the unit and the destination of a Wish:
                 */
                HashMap<Location, Integer> distances = new HashMap<Location, Integer>(121);
                for (ArrayList<Wish> al : workerWishes.values()) {
                    for (Wish w : al) {
                        if (!distances.containsKey(w.getDestination())) {
                            distances.put(w.getDestination(), unit.getTurnsToReach(w.getDestination()));
                        }
                    }
                }

                // Check if this unit is needed as an expert (using:
                // "WorkerWish"):
                ArrayList<Wish> wishList = workerWishes.get(unit.getType());
                WorkerWish bestWish = null;
                int bestTurns = Integer.MAX_VALUE;
                for (int i = 0; i < wishList.size(); i++) {
                    WorkerWish ww = (WorkerWish) wishList.get(i);
                    if (ww.getTransportable() != null) {
                        wishList.remove(i);
                        i--;
                        continue;
                    }
                    int turns = distances.get(ww.getDestination());
                    if (turns == Integer.MAX_VALUE) {
                        if (ww.getDestination().getTile() == null) {
                            turns = 5;
                        } else {
                            turns = 10;
                        }
                    } else if (turns > 5) {
                        turns = 5;
                    }
                    if (bestWish == null
                            || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                        bestWish = ww;
                        bestTurns = turns;
                    }
                }
                if (bestWish != null) {
                    bestWish.setTransportable(aiUnit);
                    aiUnit.setMission(new WishRealizationMission(getAIMain(), aiUnit, bestWish));
                    continue;
                }
                // Find a site for a new colony:
                Tile colonyTile = null;
                if (getPlayer().canBuildColonies()) {
                    colonyTile = BuildColonyMission.findColonyLocation(aiUnit.getUnit());
                    if (colonyTile != null) {
                        bestTurns = unit.getTurnsToReach(colonyTile);
                    }
                }

                // Check if we can find a better site to work than a new colony:
                if (!fewColonies || colonyTile == null || bestTurns > 10) {
                    for (List<Wish> wishes : workerWishes.values()) {
                        for (int j = 0; j < wishes.size(); j++) {
                            WorkerWish ww = (WorkerWish) wishes.get(j);
                            if (ww.getTransportable() != null) {
                                wishes.remove(j);
                                j--;
                                continue;
                            }
                            int turns = distances.get(ww.getDestination());
                            if (turns == Integer.MAX_VALUE) {
                                if (ww.getDestination().getTile() == null) {
                                    turns = 5;
                                } else {
                                    turns = 10;
                                }
                            } else if (turns > 5) {
                                turns = 5;
                            }
                            // TODO: Choose to build colony if the value of the
                            // wish is low.
                            if (bestWish == null
                                    || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                                bestWish = ww;
                                bestTurns = turns;
                            }
                        }
                    }
                }
                if (bestWish != null) {
                    bestWish.setTransportable(aiUnit);
                    aiUnit.setMission(new WishRealizationMission(getAIMain(), aiUnit, bestWish));
                    continue;
                }
                // Choose to build a new colony:
                if (colonyTile != null) {
                    Mission mission = new BuildColonyMission(getAIMain(),
                                                             aiUnit,
                                                             colonyTile,
                                                             getPlayer().getColonyValue(colonyTile));
                    aiUnit.setMission(mission);

                    boolean isUnitOnCarrier = aiUnit.getUnit().isOnCarrier();
                    if (isUnitOnCarrier) {
                        AIUnit carrier = (AIUnit) getAIMain().getAIObject(
                                (FreeColGameObject) aiUnit.getUnit().getLocation());

                        //make verification of carrier mission
                        Mission carrierMission = carrier.getMission();

                        boolean isCarrierMissionToTransport = carrierMission instanceof TransportMission;
                        if(!isCarrierMissionToTransport){
                        	throw new IllegalStateException("Carrier carrying unit not on a transport mission");
                        }
                        //transport unit to carrier destination (is this what is truly wanted?)
                        ((TransportMission) carrierMission).addToTransportList(aiUnit);
                    }
                    continue;
                }
            }

            if (!aiUnit.hasMission()) {
                if (aiUnit.getUnit().isOffensiveUnit()) {
                    aiUnit.setMission(new UnitWanderHostileMission(getAIMain(), aiUnit));
                } else {
                    //non-offensive units should take shelter in a nearby colony,
                    //not try to be hostile
                    aiUnit.setMission(new IdleAtColonyMission(getAIMain(), aiUnit));
                }
            }
        }
    }

commonMethod: 
(startLine=213 endLine=221 srcPath=/root/NewExperiment/freecolFilter/00838/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Gets the AI unit corresponding to a given unit, if any.
     *
     * @param unit The <code>Unit</code> to look up.
     * @return The corresponding AI unit or null if not found.
     */
    protected AIUnit getAIUnit(Unit unit) {
        return getAIMain().getAIUnit(unit);
    }


, Instance #
frags: 
(startLine=832 endLine=949 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
            } else if (unit.isColonist()) {
                /*
                 * Motivated by (speed) performance: This map stores the
                 * distance between the unit and the destination of a Wish:
                 */
                HashMap<Location, Integer> distances = new HashMap<Location, Integer>(121);
                for (ArrayList<Wish> al : workerWishes.values()) {
                    for (Wish w : al) {
                        if (!distances.containsKey(w.getDestination())) {
                            distances.put(w.getDestination(), unit.getTurnsToReach(w.getDestination()));
                        }
                    }
                }

                // Check if this unit is needed as an expert (using:
                // "WorkerWish"):
                ArrayList<Wish> wishList = workerWishes.get(unit.getType());
                WorkerWish bestWish = null;
                int bestTurns = Integer.MAX_VALUE;
                for (int i = 0; i < wishList.size(); i++) {
                    WorkerWish ww = (WorkerWish) wishList.get(i);
                    if (ww.getTransportable() != null) {
                        wishList.remove(i);
                        i--;
                        continue;
                    }
                    int turns = distances.get(ww.getDestination());
                    if (turns == Integer.MAX_VALUE) {
                        if (ww.getDestination().getTile() == null) {
                            turns = 5;
                        } else {
                            turns = 10;
                        }
                    } else if (turns > 5) {
                        turns = 5;
                    }
                    if (bestWish == null
                            || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                        bestWish = ww;
                        bestTurns = turns;
                    }
                }
                if (bestWish != null) {
                    bestWish.setTransportable(aiUnit);
                    aiUnit.setMission(new WishRealizationMission(getAIMain(), aiUnit, bestWish));
                    continue;
                }
                // Find a site for a new colony:
                Tile colonyTile = null;
                if (getPlayer().canBuildColonies()) {
                    colonyTile = BuildColonyMission.findColonyLocation(aiUnit.getUnit());
                }
                if (colonyTile != null) {
                    bestTurns = unit.getTurnsToReach(colonyTile);
                }

                // Check if we can find a better site to work than a new colony:
                if (!fewColonies || colonyTile == null || bestTurns > 10) {
                    for (int i = 0; i < workerWishes.size(); i++) {
                        wishList = workerWishes.get(i);
                        for (int j = 0; j < wishList.size(); j++) {
                            WorkerWish ww = (WorkerWish) wishList.get(j);
                            if (ww.getTransportable() != null) {
                                wishList.remove(j);
                                j--;
                                continue;
                            }
                            int turns = distances.get(ww.getDestination());
                            if (turns == Integer.MAX_VALUE) {
                                if (ww.getDestination().getTile() == null) {
                                    turns = 5;
                                } else {
                                    turns = 10;
                                }
                            } else if (turns > 5) {
                                turns = 5;
                            }
                            // TODO: Choose to build colony if the value of the
                            // wish is low.
                            if (bestWish == null
                                    || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                                bestWish = ww;
                                bestTurns = turns;
                            }
                        }
                    }
                }
                if (bestWish != null) {
                    bestWish.setTransportable(aiUnit);
                    aiUnit.setMission(new WishRealizationMission(getAIMain(), aiUnit, bestWish));
                    continue;
                }
                // Choose to build a new colony:
                if (colonyTile != null) {
                	Mission mission = new BuildColonyMission(getAIMain(),
                							aiUnit,
                							colonyTile,
                							getPlayer().getColonyValue(colonyTile));
                    aiUnit.setMission(mission);

                    boolean isUnitOnCarrier = aiUnit.getUnit().isOnCarrier();
                    if (isUnitOnCarrier) {
                        AIUnit carrier = (AIUnit) getAIMain().getAIObject(
                                (FreeColGameObject) aiUnit.getUnit().getLocation());

                        //make verification of carrier mission
                        Mission carrierMission = carrier.getMission();

                        boolean isCarrierMissionToTransport = carrierMission instanceof TransportMission;
                        if(!isCarrierMissionToTransport){
                        	throw new IllegalStateException("Carrier carrying unit not on a transport mission");
                        }
                        //transport unit to carrier destination (is this what is truly wanted?)
                        ((TransportMission) carrierMission).addToTransportList(aiUnit);
                    }
                    continue;
                }
            }

(startLine=1583 endLine=1699 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
            if (unit.isColonist() && unit.getOwner().isEuropean()) {
                /*
                 * Motivated by (speed) performance: This map stores the
                 * distance between the unit and the destination of a Wish:
                 */
                HashMap<Location, Integer> distances = new HashMap<Location, Integer>(121);
                for (ArrayList<Wish> al : workerWishes.values()) {
                    for (Wish w : al) {
                        if (!distances.containsKey(w.getDestination())) {
                            distances.put(w.getDestination(), unit.getTurnsToReach(w.getDestination()));
                        }
                    }
                }

                // Check if this unit is needed as an expert (using:
                // "WorkerWish"):
                ArrayList<Wish> wishList = workerWishes.get(unit.getType());
                WorkerWish bestWish = null;
                int bestTurns = Integer.MAX_VALUE;
                for (int i = 0; i < wishList.size(); i++) {
                    WorkerWish ww = (WorkerWish) wishList.get(i);
                    if (ww.getTransportable() != null) {
                        wishList.remove(i);
                        i--;
                        continue;
                    }
                    int turns = distances.get(ww.getDestination());
                    if (turns == Integer.MAX_VALUE) {
                        if (ww.getDestination().getTile() == null) {
                            turns = 5;
                        } else {
                            turns = 10;
                        }
                    } else if (turns > 5) {
                        turns = 5;
                    }
                    if (bestWish == null
                            || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                        bestWish = ww;
                        bestTurns = turns;
                    }
                }
                if (bestWish != null) {
                    bestWish.setTransportable(aiUnit);
                    aiUnit.setMission(new WishRealizationMission(getAIMain(), aiUnit, bestWish));
                    continue;
                }
                // Find a site for a new colony:
                Tile colonyTile = null;
                if (getPlayer().canBuildColonies()) {
                    colonyTile = BuildColonyMission.findColonyLocation(aiUnit.getUnit());
                    if (colonyTile != null) {
                        bestTurns = unit.getTurnsToReach(colonyTile);
                    }
                }

                // Check if we can find a better site to work than a new colony:
                if (!fewColonies || colonyTile == null || bestTurns > 10) {
                    for (List<Wish> wishes : workerWishes.values()) {
                        for (int j = 0; j < wishes.size(); j++) {
                            WorkerWish ww = (WorkerWish) wishes.get(j);
                            if (ww.getTransportable() != null) {
                                wishes.remove(j);
                                j--;
                                continue;
                            }
                            int turns = distances.get(ww.getDestination());
                            if (turns == Integer.MAX_VALUE) {
                                if (ww.getDestination().getTile() == null) {
                                    turns = 5;
                                } else {
                                    turns = 10;
                                }
                            } else if (turns > 5) {
                                turns = 5;
                            }
                            // TODO: Choose to build colony if the value of the
                            // wish is low.
                            if (bestWish == null
                                    || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                                bestWish = ww;
                                bestTurns = turns;
                            }
                        }
                    }
                }
                if (bestWish != null) {
                    bestWish.setTransportable(aiUnit);
                    aiUnit.setMission(new WishRealizationMission(getAIMain(), aiUnit, bestWish));
                    continue;
                }
                // Choose to build a new colony:
                if (colonyTile != null) {
                    Mission mission = new BuildColonyMission(getAIMain(),
                                                             aiUnit,
                                                             colonyTile,
                                                             getPlayer().getColonyValue(colonyTile));
                    aiUnit.setMission(mission);

                    boolean isUnitOnCarrier = aiUnit.getUnit().isOnCarrier();
                    if (isUnitOnCarrier) {
                        AIUnit carrier = (AIUnit) getAIMain().getAIObject(
                                (FreeColGameObject) aiUnit.getUnit().getLocation());

                        //make verification of carrier mission
                        Mission carrierMission = carrier.getMission();

                        boolean isCarrierMissionToTransport = carrierMission instanceof TransportMission;
                        if(!isCarrierMissionToTransport){
                        	throw new IllegalStateException("Carrier carrying unit not on a transport mission");
                        }
                        //transport unit to carrier destination (is this what is truly wanted?)
                        ((TransportMission) carrierMission).addToTransportList(aiUnit);
                    }
                    continue;
                }
            }

commonMethod: 
(startLine=213 endLine=221 srcPath=/root/NewExperiment/freecolFilter/00838/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Gets the AI unit corresponding to a given unit, if any.
     *
     * @param unit The <code>Unit</code> to look up.
     * @return The corresponding AI unit or null if not found.
     */
    protected AIUnit getAIUnit(Unit unit) {
        return getAIMain().getAIUnit(unit);
    }


, Instance #
frags: 
(startLine=925 endLine=948 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
                if (colonyTile != null) {
                	Mission mission = new BuildColonyMission(getAIMain(),
                							aiUnit,
                							colonyTile,
                							getPlayer().getColonyValue(colonyTile));
                    aiUnit.setMission(mission);

                    boolean isUnitOnCarrier = aiUnit.getUnit().isOnCarrier();
                    if (isUnitOnCarrier) {
                        AIUnit carrier = (AIUnit) getAIMain().getAIObject(
                                (FreeColGameObject) aiUnit.getUnit().getLocation());

                        //make verification of carrier mission
                        Mission carrierMission = carrier.getMission();

                        boolean isCarrierMissionToTransport = carrierMission instanceof TransportMission;
                        if(!isCarrierMissionToTransport){
                        	throw new IllegalStateException("Carrier carrying unit not on a transport mission");
                        }
                        //transport unit to carrier destination (is this what is truly wanted?)
                        ((TransportMission) carrierMission).addToTransportList(aiUnit);
                    }
                    continue;
                }

(startLine=1675 endLine=1698 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
                if (colonyTile != null) {
                    Mission mission = new BuildColonyMission(getAIMain(),
                                                             aiUnit,
                                                             colonyTile,
                                                             getPlayer().getColonyValue(colonyTile));
                    aiUnit.setMission(mission);

                    boolean isUnitOnCarrier = aiUnit.getUnit().isOnCarrier();
                    if (isUnitOnCarrier) {
                        AIUnit carrier = (AIUnit) getAIMain().getAIObject(
                                (FreeColGameObject) aiUnit.getUnit().getLocation());

                        //make verification of carrier mission
                        Mission carrierMission = carrier.getMission();

                        boolean isCarrierMissionToTransport = carrierMission instanceof TransportMission;
                        if(!isCarrierMissionToTransport){
                        	throw new IllegalStateException("Carrier carrying unit not on a transport mission");
                        }
                        //transport unit to carrier destination (is this what is truly wanted?)
                        ((TransportMission) carrierMission).addToTransportList(aiUnit);
                    }
                    continue;
                }

commonMethod: 
(startLine=213 endLine=221 srcPath=/root/NewExperiment/freecolFilter/00838/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Gets the AI unit corresponding to a given unit, if any.
     *
     * @param unit The <code>Unit</code> to look up.
     * @return The corresponding AI unit or null if not found.
     */
    protected AIUnit getAIUnit(Unit unit) {
        return getAIMain().getAIUnit(unit);
    }


, Instance #
frags: 
(startLine=933 endLine=946 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/ColonialAIPlayer.java)
                    if (isUnitOnCarrier) {
                        AIUnit carrier = (AIUnit) getAIMain().getAIObject(
                                (FreeColGameObject) aiUnit.getUnit().getLocation());

                        //make verification of carrier mission
                        Mission carrierMission = carrier.getMission();

                        boolean isCarrierMissionToTransport = carrierMission instanceof TransportMission;
                        if(!isCarrierMissionToTransport){
                        	throw new IllegalStateException("Carrier carrying unit not on a transport mission");
                        }
                        //transport unit to carrier destination (is this what is truly wanted?)
                        ((TransportMission) carrierMission).addToTransportList(aiUnit);
                    }

(startLine=1683 endLine=1696 srcPath=/root/NewExperiment/freecolFilter/00837/src/net/sf/freecol/server/ai/StandardAIPlayer.java)
                    if (isUnitOnCarrier) {
                        AIUnit carrier = (AIUnit) getAIMain().getAIObject(
                                (FreeColGameObject) aiUnit.getUnit().getLocation());

                        //make verification of carrier mission
                        Mission carrierMission = carrier.getMission();

                        boolean isCarrierMissionToTransport = carrierMission instanceof TransportMission;
                        if(!isCarrierMissionToTransport){
                        	throw new IllegalStateException("Carrier carrying unit not on a transport mission");
                        }
                        //transport unit to carrier destination (is this what is truly wanted?)
                        ((TransportMission) carrierMission).addToTransportList(aiUnit);
                    }

commonMethod: 
(startLine=213 endLine=221 srcPath=/root/NewExperiment/freecolFilter/00838/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Gets the AI unit corresponding to a given unit, if any.
     *
     * @param unit The <code>Unit</code> to look up.
     * @return The corresponding AI unit or null if not found.
     */
    protected AIUnit getAIUnit(Unit unit) {
        return getAIMain().getAIUnit(unit);
    }


, Instance #
frags: 
(startLine=85 endLine=120 srcPath=/root/NewExperiment/freecolFilter/00838/src/net/sf/freecol/common/networking/ScoutIndianSettlementMessage.java)
                          Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit unit;
        try {
            unit = server.getUnitSafely(unitId, serverPlayer);
        } catch (Exception e) {
            return Message.clientError(e.getMessage());
        }
        if (unit.getTile() == null) {
            return Message.clientError("Unit is not on the map: " + unitId);
        }
        Direction direction = Enum.valueOf(Direction.class, directionString);
        Tile tile = unit.getTile().getNeighbourOrNull(direction);
        if (tile == null) {
            return Message.clientError("Could not find tile"
                                       + " in direction: " + direction
                                       + " from unit: " + unitId);
        }
        Settlement settlement = tile.getSettlement();
        if (settlement == null || !(settlement instanceof IndianSettlement)) {
            return Message.clientError("There is no native settlement at: "
                                       + tile.getId());
        }
        MoveType type = unit.getMoveType(settlement.getTile());
        if (type != MoveType.ENTER_INDIAN_SETTLEMENT_WITH_SCOUT) {
            return Message.clientError("Unable to enter "
                                       + settlement.getName()
                                       + ": " + type.whyIllegal());
        }

        // Valid request, do the scouting.
        return server.getInGameController()
            .scoutIndianSettlement(serverPlayer, unit,
                                   (IndianSettlement) settlement);
    }

(startLine=85 endLine=123 srcPath=/root/NewExperiment/freecolFilter/00838/src/net/sf/freecol/common/networking/LearnSkillMessage.java)
                          Connection connection) {
        ServerPlayer serverPlayer = server.getPlayer(connection);

        Unit unit;
        try {
            unit = server.getUnitSafely(unitId, serverPlayer);
        } catch (Exception e) {
            return Message.clientError(e.getMessage());
        }
        if (unit.getTile() == null) {
            return Message.clientError("Unit is not on the map: " + unitId);
        }
        Direction direction = Enum.valueOf(Direction.class, directionString);
        Tile tile = unit.getTile().getNeighbourOrNull(direction);
        if (tile == null) {
            return Message.clientError("Could not find tile"
                                       + " in direction: " + direction
                                       + " from unit: " + unitId);
        }
        Settlement settlement = tile.getSettlement();
        if (settlement == null || !(settlement instanceof IndianSettlement)) {
            return Message.clientError("There is no native settlement at: "
                                       + tile.getId());
        }
        // Do not use getMoveType (checking moves left) as the preceding
        // AskLearnSkill transaction will have already zeroed the moves.
        // TODO: use a transaction, so that declining restores the moves?
        MoveType type = unit.getSimpleMoveType(settlement.getTile());
        if (type != MoveType.ENTER_INDIAN_SETTLEMENT_WITH_FREE_COLONIST) {
            return Message.clientError("Unable to enter "
                                       + settlement.getName()
                                       + ": " + type.whyIllegal());
        }

        // Learn the skill if possible.
        return server.getInGameController()
            .learnFromIndianSettlement(serverPlayer, unit,
                                       (IndianSettlement) settlement);
    }

commonMethod: 
(startLine=780 endLine=794 srcPath=/root/NewExperiment/freecolFilter/00839/src/net/sf/freecol/common/model/Tile.java)
    /**
     * Gets the <code>IndianSettlement</code> located on this
     * <code>Tile</code>. Only a convenience method for {@link
     * #getSettlement} that makes sure that the settlement is a native
     * settlement.
     *
     * @return The <code>IndianSettlement</code> that is located on this
     *         <code>Tile</code> or <i>null</i> if none found.
     * @see #getSettlement
     */
    public IndianSettlement getIndianSettlement() {
        return (settlement != null && settlement instanceof IndianSettlement)
            ? (IndianSettlement) settlement
            : null;
    }


, Instance #
frags: 
(startLine=276 endLine=291 srcPath=/root/NewExperiment/freecolFilter/00846/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
            if (!misusedExperts.isEmpty()) {
                doc.insertString(doc.getLength(), "\n"
                                 + Messages.message(StringTemplate.template("report.requirements.misusedExperts")
                                                    .addName("%unit%", workType)
                                                    .add("%work%", goodsType.getWorkingAsKey())) + " ",
                                 doc.getStyle("regular"));
                int lastExpertsIndex = misusedExperts.size() - 1;
                for (int index = 0; index <= lastExpertsIndex; index++) {
                    Colony colony = misusedExperts.get(index);
                    StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
                    doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
                    if (index != lastExpertsIndex) {
                        doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
                    }
                }
            }

(startLine=293 endLine=307 srcPath=/root/NewExperiment/freecolFilter/00846/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
            if (!severalExperts.isEmpty()) {
                doc.insertString(doc.getLength(),
                                 "\n" + Messages.message(StringTemplate.template("report.requirements.severalExperts")
                                                         .addName("%unit%", workType)) + " ",
                        doc.getStyle("regular"));
                int lastExpertsIndex = severalExperts.size() - 1;
                for (int index = 0; index <= lastExpertsIndex; index++) {
                    Colony colony = severalExperts.get(index);
                    StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
                    doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
                    if (index != lastExpertsIndex) {
                        doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
                    }
                }
            }

(startLine=309 endLine=323 srcPath=/root/NewExperiment/freecolFilter/00846/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
            if (!canTrainExperts.isEmpty()) {
                doc.insertString(doc.getLength(),
                                 "\n" + Messages.message(StringTemplate.template("report.requirements.canTrainExperts")
                                                         .addName("%unit%", workType)) + " ",
                        doc.getStyle("regular"));
                int lastExpertsIndex = canTrainExperts.size() - 1;
                for (int index = 0; index <= lastExpertsIndex; index++) {
                    Colony colony = canTrainExperts.get(index);
                    StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
                    doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
                    if (index != lastExpertsIndex) {
                        doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
                    }
                }
            }

commonMethod: 
(startLine=311 endLine=318 srcPath=/root/NewExperiment/freecolFilter/00847/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
    private void insertColonyButtons(StyledDocument doc, List<Colony> colonies) throws Exception {
        for (Colony colony : colonies) {
            StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
            doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
            doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
        }
        doc.remove(doc.getLength() - 2, 2);
    }


, Instance #
frags: 
(startLine=283 endLine=290 srcPath=/root/NewExperiment/freecolFilter/00846/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
                for (int index = 0; index <= lastExpertsIndex; index++) {
                    Colony colony = misusedExperts.get(index);
                    StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
                    doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
                    if (index != lastExpertsIndex) {
                        doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
                    }
                }

(startLine=299 endLine=306 srcPath=/root/NewExperiment/freecolFilter/00846/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
                for (int index = 0; index <= lastExpertsIndex; index++) {
                    Colony colony = severalExperts.get(index);
                    StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
                    doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
                    if (index != lastExpertsIndex) {
                        doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
                    }
                }

(startLine=315 endLine=322 srcPath=/root/NewExperiment/freecolFilter/00846/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
                for (int index = 0; index <= lastExpertsIndex; index++) {
                    Colony colony = canTrainExperts.get(index);
                    StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
                    doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
                    if (index != lastExpertsIndex) {
                        doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
                    }
                }

commonMethod: 
(startLine=311 endLine=318 srcPath=/root/NewExperiment/freecolFilter/00847/src/net/sf/freecol/client/gui/panel/ReportRequirementsPanel.java)
    private void insertColonyButtons(StyledDocument doc, List<Colony> colonies) throws Exception {
        for (Colony colony : colonies) {
            StyleConstants.setComponent(doc.getStyle("button"), createColonyButton(colony, false));
            doc.insertString(doc.getLength(), " ", doc.getStyle("button"));
            doc.insertString(doc.getLength(), ", ", doc.getStyle("regular"));
        }
        doc.remove(doc.getLength() - 2, 2);
    }


, Instance #
frags: 
(startLine=2171 endLine=2220 srcPath=/root/NewExperiment/freecolFilter/00856/src/net/sf/freecol/server/control/InGameController.java)
                                     Goods goods, int amount) {
        settlement.makeContactSettlement(serverPlayer);
        speakToChief(serverPlayer, settlement, false);

        TransactionSession session
            = TransactionSession.lookup(unit, settlement);
        if (session == null) {
            return Message.clientError("Trying to buy without opening a transaction session");
        }
        if (!(Boolean) session.get("canBuy")) {
            return Message.clientError("Trying to buy in a session where buying is not allowed.");
        }
        if (unit.getSpaceLeft() <= 0) {
            return Message.clientError("Unit is full, unable to buy.");
        }

        // Check that this is the agreement that was made
        AIPlayer ai = getFreeColServer().getAIPlayer(settlement.getOwner());
        int returnGold = ai.buyProposition(unit, settlement, goods, amount);
        if (returnGold != amount) {
            return Message.clientError("This was not the price we agreed upon! Cheater?");
        }
        if (!serverPlayer.checkGold(amount)) { // Check this is funded.
            return Message.clientError("Insufficient gold to buy.");
        }

        ChangeSet cs = new ChangeSet();
        // Valid, make the trade.
        moveGoods(goods, unit);
        cs.add(See.perhaps(), unit);

        Player settlementPlayer = settlement.getOwner();
        Tile tile = settlement.getTile();
        settlement.updateWantedGoods();
        settlementPlayer.modifyGold(amount);
        serverPlayer.modifyGold(-amount);
        cs.add(See.only(serverPlayer),
            settlement.modifyAlarm(serverPlayer, -amount / 50));
        tile.updatePlayerExploredTile(serverPlayer, true);
        cs.add(See.only(serverPlayer), tile);
        cs.addPartial(See.only(serverPlayer), serverPlayer, "gold");
        session.put("actionTaken", true);
        session.put("canBuy", false);
        logger.finest(serverPlayer.getName() + " " + unit + " buys " + goods
                      + " at " + settlement.getName() + " for " + amount);

        // Others can see the unit capacity.
        sendToOthers(serverPlayer, cs);
        return cs.build(serverPlayer);
    }

(startLine=2234 endLine=2279 srcPath=/root/NewExperiment/freecolFilter/00856/src/net/sf/freecol/server/control/InGameController.java)
                                    Goods goods, int amount) {
        settlement.makeContactSettlement(serverPlayer);
        speakToChief(serverPlayer, settlement, false);

        TransactionSession session
            = TransactionSession.lookup(unit, settlement);
        if (session == null) {
            return Message.clientError("Trying to sell without opening a transaction session");
        }
        if (!(Boolean) session.get("canSell")) {
            return Message.clientError("Trying to sell in a session where selling is not allowed.");
        }

        // Check that the gold is the agreed amount
        AIPlayer ai = getFreeColServer().getAIPlayer(settlement.getOwner());
        int returnGold = ai.sellProposition(unit, settlement, goods, amount);
        if (returnGold != amount) {
            return Message.clientError("This was not the price we agreed upon! Cheater?");
        }

        ChangeSet cs = new ChangeSet();
        // Valid, make the trade.
        moveGoods(goods, settlement);
        cs.add(See.perhaps(), unit);

        Player settlementPlayer = settlement.getOwner();
        settlementPlayer.modifyGold(-amount);
        serverPlayer.modifyGold(amount);
        cs.add(See.only(serverPlayer), settlement.modifyAlarm(serverPlayer,
                -amount / 500));
        Tile tile = settlement.getTile();
        settlement.updateWantedGoods();
        tile.updatePlayerExploredTile(serverPlayer, true);
        cs.add(See.only(serverPlayer), tile);
        cs.addPartial(See.only(serverPlayer), serverPlayer, "gold");
        session.put("actionTaken", true);
        session.put("canSell", false);
        cs.addSale(serverPlayer, settlement, goods.getType(),
                   (int) Math.round((float) amount / goods.getAmount()));
        logger.finest(serverPlayer.getName() + " " + unit + " sells " + goods
                      + " at " + settlement.getName() + " for " + amount);

        // Others can see the unit capacity.
        sendToOthers(serverPlayer, cs);
        return cs.build(serverPlayer);
    }

commonMethod: 
(startLine=487 endLine=511 srcPath=/root/NewExperiment/freecolFilter/00857/src/net/sf/freecol/server/control/InGameController.java)
    /**
     * Speaks to a chief in a native settlement, but only if it is as
     * a result of a scout actually asking to speak to the chief, or
     * for other settlement-contacting events such as missionary
     * actions, demanding tribute, learning skills and trading if the
     * settlementActionsContactChief game option is enabled.
     * It is still unclear what Col1 did here.
     *
     * @param serverPlayer The <code>ServerPlayer</code> that is contacting
     *     the settlement.
     * @param is The <code>IndianSettlement</code> to contact.
     * @param scout True if this contact is due to a scout asking to
     *     speak to the chief.
     * @param cs A <code>ChangeSet</code> to update.
     */
    private void csSpeakToChief(ServerPlayer serverPlayer, IndianSettlement is,
                                boolean scout, ChangeSet cs) {
        serverPlayer.csContact((ServerPlayer) is.getOwner(), null, cs);
        is.makeContactSettlement(serverPlayer);
        if (scout || getGame().getSpecification()
            .getBooleanOption("model.option.settlementActionsContactChief")
            .getValue()) {
            is.setSpokenToChief(serverPlayer);
        }
    }


, Instance #
frags: 
(startLine=939 endLine=957 srcPath=/root/NewExperiment/freecolFilter/00860/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                setStance(otherPlayer, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps((ServerPlayer) otherPlayer),
                           modifyTension(otherPlayer, modifier));
                }
                cs.addStance(See.perhaps(), this, stance, otherPlayer,
                             stance == Stance.WAR || old == Stance.WAR);
                logger.info("Stance change " + getName()
                            + " " + old.toString()
                            + " -> " + stance.toString()
                            + " wrt " + otherPlayer.getName());
                change = true;
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

(startLine=958 endLine=980 srcPath=/root/NewExperiment/freecolFilter/00860/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            try {
                int modifier = old.getTensionModifier(stance);
                otherPlayer.setStance(this, stance);
                if (modifier != 0) {
                    cs.add(See.only(null).perhaps(this),
                           otherPlayer.modifyTension(this, modifier));
                }
                if (!change) {
                    cs.addStance(See.perhaps(), otherPlayer, stance, this,
                                 stance == Stance.WAR || old == Stance.WAR);
                }
                logger.info("Stance change " + otherPlayer.getName()
                            + " " + old.toString()
                            + " -> " + stance.toString()
                            + " wrt " + getName()
                            + " (symmetric)"
                            + ((change) ? "(suppressed)" : ""));
                change = true;
            } catch (IllegalStateException e) { // Catch illegal transitions
                logger.log(Level.WARNING, "Illegal stance transition", e);
            }
        }

commonMethod: 
(startLine=951 endLine=958 srcPath=/root/NewExperiment/freecolFilter/00861/src/net/sf/freecol/server/model/ServerPlayer.java)
    /**
     * Adds a player to the list of players for whom the stance has changed.
     *
     * @param other The <code>ServerPlayer</code> to add.
     */
    public void addStanceChange(ServerPlayer other) {
        if (!stanceDirty.contains(other)) stanceDirty.add(other);
    }


, Instance #
frags: 
(startLine=376 endLine=384 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                    if (amount < low) {
                        int turns = amount / p + 1;
                        c = Color.RED;
                        tip = Messages.message(StringTemplate
                            .template("report.colony.production.low.description")
                                .add("%goods%", g.getNameKey())
                                .addAmount("%amount%", p)
                                .addAmount("%turns%", turns));
                    } else {

(startLine=401 endLine=410 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (g != foodType && amount > high) {
                    int turns = 1 + (colony.getWarehouseCapacity() - amount)
                        / p;
                    c = Color.RED;
                    tip = Messages.message(StringTemplate
                        .template("report.colony.production.high.description")
                            .add("%goods%", g.getNameKey())
                            .addAmount("%amount%", p)
                            .addAmount("%turns%", turns));
                } else {

commonMethod: 
(startLine=230 endLine=248 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/common/model/StringTemplate.java)
    /**
     * Add a new key and replacement to the StringTemplate. The
     * replacement must be a proper name. This is only possible if the
     * StringTemplate is of type TEMPLATE.
     *
     * @param key a <code>String</code> value
     * @param value a <code>String</code> value
     * @return a <code>StringTemplate</code> value
     */
    public StringTemplate addName(String key, String value) {
        if (templateType == TemplateType.TEMPLATE) {
            keys.add(key);
            replacements.add(new StringTemplate(value, TemplateType.NAME));
        } else {
            throw new IllegalArgumentException("Cannot add key-value pair to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }


, Instance #
frags: 
(startLine=376 endLine=384 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                    if (amount < low) {
                        int turns = amount / p + 1;
                        c = Color.RED;
                        tip = Messages.message(StringTemplate
                            .template("report.colony.production.low.description")
                                .add("%goods%", g.getNameKey())
                                .addAmount("%amount%", p)
                                .addAmount("%turns%", turns));
                    } else {

(startLine=401 endLine=410 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (g != foodType && amount > high) {
                    int turns = 1 + (colony.getWarehouseCapacity() - amount)
                        / p;
                    c = Color.RED;
                    tip = Messages.message(StringTemplate
                        .template("report.colony.production.high.description")
                            .add("%goods%", g.getNameKey())
                            .addAmount("%amount%", p)
                            .addAmount("%turns%", turns));
                } else {

commonMethod: 
(startLine=1320 endLine=1334 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns the production of the given type of goods.
     *
     * @param goodsType The type of goods to get the production for.
     * @return The production of the given type of goods the current turn by all
     *         of the <code>Colony</code>'s {@link Building buildings} and
     *         {@link ColonyTile tiles}.
     */
    public int getProductionOf(GoodsType goodsType) {
        int amount = 0;
        for (WorkLocation workLocation : getWorkLocations()) {
            amount += workLocation.getProductionOf(goodsType);
        }
        return amount;
    }


, Instance #
frags: 
(startLine=376 endLine=384 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                    if (amount < low) {
                        int turns = amount / p + 1;
                        c = Color.RED;
                        tip = Messages.message(StringTemplate
                            .template("report.colony.production.low.description")
                                .add("%goods%", g.getNameKey())
                                .addAmount("%amount%", p)
                                .addAmount("%turns%", turns));
                    } else {

(startLine=401 endLine=410 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (g != foodType && amount > high) {
                    int turns = 1 + (colony.getWarehouseCapacity() - amount)
                        / p;
                    c = Color.RED;
                    tip = Messages.message(StringTemplate
                        .template("report.colony.production.high.description")
                            .add("%goods%", g.getNameKey())
                            .addAmount("%amount%", p)
                            .addAmount("%turns%", turns));
                } else {

commonMethod: 
(startLine=808 endLine=847 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
    /**
     * Is it a good idea to produce goods at this work location using a
     * better unit type?
     *
     * Always true for colony tiles, but for buildings we need to be
     * more conservative or we will end up recommending packing each
     * building to capacity.
     *
     * FTM then:
     * - assume that if we have upgraded the building we really do
     *   want to use it
     * - we should produce hammers if we are not, or if we can upgrade
     *   and existing unit
     * - we should produce liberty until we max out the colony SoL
     *
     * @param wl The <code>WorkLocation</code> where production is to occur.
     * @param goodsType The <code>GoodsType</code> to produce.
     * @param unit The <code>Unit</code> that is doing the job at present,
     *     which may be null if none is at work.
     * @param expert The expert <code>UnitType</code> to put to work.
     * @return True if it is a good idea to use the expert.
     */
    private boolean wantGoods(WorkLocation wl, GoodsType goodsType,
                              Unit unit, UnitType expert) {
        boolean ret = false;
        if (wl instanceof ColonyTile) {
            ret = true;
        } else if (wl instanceof Building) {
            Building bu = (Building) wl;
            Colony colony = wl.getColony();
            ret = bu.canAdd(expert)
                && (bu.getLevel() > 1
                    || ("model.goods.hammers".equals(goodsType.getId())
                        && (colony.getProductionOf(goodsType) == 0
                            || (unit != null && unit.getType() != expert)))
                    || (goodsType.isLibertyType()
                        && colony.getSoL() < 100));
        }
        return ret;
    }


, Instance #
frags: 
(startLine=376 endLine=384 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                    if (amount < low) {
                        int turns = amount / p + 1;
                        c = Color.RED;
                        tip = Messages.message(StringTemplate
                            .template("report.colony.production.low.description")
                                .add("%goods%", g.getNameKey())
                                .addAmount("%amount%", p)
                                .addAmount("%turns%", turns));
                    } else {

(startLine=401 endLine=410 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (g != foodType && amount > high) {
                    int turns = 1 + (colony.getWarehouseCapacity() - amount)
                        / p;
                    c = Color.RED;
                    tip = Messages.message(StringTemplate
                        .template("report.colony.production.high.description")
                            .add("%goods%", g.getNameKey())
                            .addAmount("%amount%", p)
                            .addAmount("%turns%", turns));
                } else {

commonMethod: 
(startLine=798 endLine=806 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
    private void addSuggestion(HashMap<UnitType, Suggestion> suggestions,
                               UnitType old, UnitType expert,
                               GoodsType work, int amount) {
        Suggestion suggestion = suggestions.get(expert);
        // Keep it simple for now.
        if (suggestion == null || suggestion.amount < amount) {
            suggestions.put(expert, new Suggestion(old, expert, work, amount));
        }
    }


, Instance #
frags: 
(startLine=376 endLine=384 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                    if (amount < low) {
                        int turns = amount / p + 1;
                        c = Color.RED;
                        tip = Messages.message(StringTemplate
                            .template("report.colony.production.low.description")
                                .add("%goods%", g.getNameKey())
                                .addAmount("%amount%", p)
                                .addAmount("%turns%", turns));
                    } else {

(startLine=401 endLine=410 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (g != foodType && amount > high) {
                    int turns = 1 + (colony.getWarehouseCapacity() - amount)
                        / p;
                    c = Color.RED;
                    tip = Messages.message(StringTemplate
                        .template("report.colony.production.high.description")
                            .add("%goods%", g.getNameKey())
                            .addAmount("%amount%", p)
                            .addAmount("%turns%", turns));
                } else {

commonMethod: 
(startLine=489 endLine=500 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets a <code>List</code> of every {@link WorkLocation} in this
     * <code>Colony</code>.
     *
     * @return The <code>List</code>.
     * @see WorkLocation
     */
    public List<WorkLocation> getWorkLocations() {
        List<WorkLocation> result = new ArrayList<WorkLocation>(colonyTiles);
        result.addAll(buildingMap.values());
        return result;
    }


, Instance #
frags: 
(startLine=533 endLine=541 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (turns >= 0) {
                    turns++;
                    name += " " + Integer.toString(turns);
                    b = colourButton(name, action, Color.BLUE);
                    b.setToolTipText(Messages.message(StringTemplate
                        .template("report.colony.making.constructing.description")
                            .add("%buildable%", build.getNameKey())
                            .addAmount("%turns%", turns)));
                } else if (turns < 0) {

(startLine=541 endLine=549 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (turns < 0) {
                    turns = -turns;
                    name += " " + Integer.toString(turns);
                    b = colourButton(name, action, Color.RED);
                    b.setToolTipText(Messages.message(StringTemplate
                        .template("report.colony.making.block.description")
                            .add("%buildable%", build.getNameKey())
                            .addAmount("%turns%", turns)));
                }

commonMethod: 
(startLine=230 endLine=248 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/common/model/StringTemplate.java)
    /**
     * Add a new key and replacement to the StringTemplate. The
     * replacement must be a proper name. This is only possible if the
     * StringTemplate is of type TEMPLATE.
     *
     * @param key a <code>String</code> value
     * @param value a <code>String</code> value
     * @return a <code>StringTemplate</code> value
     */
    public StringTemplate addName(String key, String value) {
        if (templateType == TemplateType.TEMPLATE) {
            keys.add(key);
            replacements.add(new StringTemplate(value, TemplateType.NAME));
        } else {
            throw new IllegalArgumentException("Cannot add key-value pair to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }


, Instance #
frags: 
(startLine=533 endLine=541 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (turns >= 0) {
                    turns++;
                    name += " " + Integer.toString(turns);
                    b = colourButton(name, action, Color.BLUE);
                    b.setToolTipText(Messages.message(StringTemplate
                        .template("report.colony.making.constructing.description")
                            .add("%buildable%", build.getNameKey())
                            .addAmount("%turns%", turns)));
                } else if (turns < 0) {

(startLine=541 endLine=549 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (turns < 0) {
                    turns = -turns;
                    name += " " + Integer.toString(turns);
                    b = colourButton(name, action, Color.RED);
                    b.setToolTipText(Messages.message(StringTemplate
                        .template("report.colony.making.block.description")
                            .add("%buildable%", build.getNameKey())
                            .addAmount("%turns%", turns)));
                }

commonMethod: 
(startLine=1320 endLine=1334 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns the production of the given type of goods.
     *
     * @param goodsType The type of goods to get the production for.
     * @return The production of the given type of goods the current turn by all
     *         of the <code>Colony</code>'s {@link Building buildings} and
     *         {@link ColonyTile tiles}.
     */
    public int getProductionOf(GoodsType goodsType) {
        int amount = 0;
        for (WorkLocation workLocation : getWorkLocations()) {
            amount += workLocation.getProductionOf(goodsType);
        }
        return amount;
    }


, Instance #
frags: 
(startLine=533 endLine=541 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (turns >= 0) {
                    turns++;
                    name += " " + Integer.toString(turns);
                    b = colourButton(name, action, Color.BLUE);
                    b.setToolTipText(Messages.message(StringTemplate
                        .template("report.colony.making.constructing.description")
                            .add("%buildable%", build.getNameKey())
                            .addAmount("%turns%", turns)));
                } else if (turns < 0) {

(startLine=541 endLine=549 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (turns < 0) {
                    turns = -turns;
                    name += " " + Integer.toString(turns);
                    b = colourButton(name, action, Color.RED);
                    b.setToolTipText(Messages.message(StringTemplate
                        .template("report.colony.making.block.description")
                            .add("%buildable%", build.getNameKey())
                            .addAmount("%turns%", turns)));
                }

commonMethod: 
(startLine=808 endLine=847 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
    /**
     * Is it a good idea to produce goods at this work location using a
     * better unit type?
     *
     * Always true for colony tiles, but for buildings we need to be
     * more conservative or we will end up recommending packing each
     * building to capacity.
     *
     * FTM then:
     * - assume that if we have upgraded the building we really do
     *   want to use it
     * - we should produce hammers if we are not, or if we can upgrade
     *   and existing unit
     * - we should produce liberty until we max out the colony SoL
     *
     * @param wl The <code>WorkLocation</code> where production is to occur.
     * @param goodsType The <code>GoodsType</code> to produce.
     * @param unit The <code>Unit</code> that is doing the job at present,
     *     which may be null if none is at work.
     * @param expert The expert <code>UnitType</code> to put to work.
     * @return True if it is a good idea to use the expert.
     */
    private boolean wantGoods(WorkLocation wl, GoodsType goodsType,
                              Unit unit, UnitType expert) {
        boolean ret = false;
        if (wl instanceof ColonyTile) {
            ret = true;
        } else if (wl instanceof Building) {
            Building bu = (Building) wl;
            Colony colony = wl.getColony();
            ret = bu.canAdd(expert)
                && (bu.getLevel() > 1
                    || ("model.goods.hammers".equals(goodsType.getId())
                        && (colony.getProductionOf(goodsType) == 0
                            || (unit != null && unit.getType() != expert)))
                    || (goodsType.isLibertyType()
                        && colony.getSoL() < 100));
        }
        return ret;
    }


, Instance #
frags: 
(startLine=533 endLine=541 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (turns >= 0) {
                    turns++;
                    name += " " + Integer.toString(turns);
                    b = colourButton(name, action, Color.BLUE);
                    b.setToolTipText(Messages.message(StringTemplate
                        .template("report.colony.making.constructing.description")
                            .add("%buildable%", build.getNameKey())
                            .addAmount("%turns%", turns)));
                } else if (turns < 0) {

(startLine=541 endLine=549 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (turns < 0) {
                    turns = -turns;
                    name += " " + Integer.toString(turns);
                    b = colourButton(name, action, Color.RED);
                    b.setToolTipText(Messages.message(StringTemplate
                        .template("report.colony.making.block.description")
                            .add("%buildable%", build.getNameKey())
                            .addAmount("%turns%", turns)));
                }

commonMethod: 
(startLine=798 endLine=806 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
    private void addSuggestion(HashMap<UnitType, Suggestion> suggestions,
                               UnitType old, UnitType expert,
                               GoodsType work, int amount) {
        Suggestion suggestion = suggestions.get(expert);
        // Keep it simple for now.
        if (suggestion == null || suggestion.amount < amount) {
            suggestions.put(expert, new Suggestion(old, expert, work, amount));
        }
    }


, Instance #
frags: 
(startLine=533 endLine=541 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (turns >= 0) {
                    turns++;
                    name += " " + Integer.toString(turns);
                    b = colourButton(name, action, Color.BLUE);
                    b.setToolTipText(Messages.message(StringTemplate
                        .template("report.colony.making.constructing.description")
                            .add("%buildable%", build.getNameKey())
                            .addAmount("%turns%", turns)));
                } else if (turns < 0) {

(startLine=541 endLine=549 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else if (turns < 0) {
                    turns = -turns;
                    name += " " + Integer.toString(turns);
                    b = colourButton(name, action, Color.RED);
                    b.setToolTipText(Messages.message(StringTemplate
                        .template("report.colony.making.block.description")
                            .add("%buildable%", build.getNameKey())
                            .addAmount("%turns%", turns)));
                }

commonMethod: 
(startLine=489 endLine=500 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets a <code>List</code> of every {@link WorkLocation} in this
     * <code>Colony</code>.
     *
     * @return The <code>List</code>.
     * @see WorkLocation
     */
    public List<WorkLocation> getWorkLocations() {
        List<WorkLocation> result = new ArrayList<WorkLocation>(colonyTiles);
        result.addAll(buildingMap.values());
        return result;
    }


, Instance #
frags: 
(startLine=556 endLine=563 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                if (left <= 0) {
                    teach = newLabel(Integer.toString(0),
                        lib.getUnitImageIcon(u.getType(), Role.DEFAULT,
                            true, 0.333), Color.RED,
                        Messages.message(StringTemplate
                            .template("report.colony.making.noteach.description")
                            .addStringTemplate("%teacher%", u.getLabel())));
                } else {

(startLine=563 endLine=571 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else {
                    teach = newLabel(Integer.toString(left),
                        lib.getUnitImageIcon(u.getType(), Role.DEFAULT,
                            true, 0.333), Color.BLACK,
                        Messages.message(StringTemplate
                            .template("report.colony.making.educating.description")
                            .addStringTemplate("%teacher%", u.getLabel())
                            .addAmount("%turns%", left)));
                }

commonMethod: 
(startLine=230 endLine=248 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/common/model/StringTemplate.java)
    /**
     * Add a new key and replacement to the StringTemplate. The
     * replacement must be a proper name. This is only possible if the
     * StringTemplate is of type TEMPLATE.
     *
     * @param key a <code>String</code> value
     * @param value a <code>String</code> value
     * @return a <code>StringTemplate</code> value
     */
    public StringTemplate addName(String key, String value) {
        if (templateType == TemplateType.TEMPLATE) {
            keys.add(key);
            replacements.add(new StringTemplate(value, TemplateType.NAME));
        } else {
            throw new IllegalArgumentException("Cannot add key-value pair to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }


, Instance #
frags: 
(startLine=556 endLine=563 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                if (left <= 0) {
                    teach = newLabel(Integer.toString(0),
                        lib.getUnitImageIcon(u.getType(), Role.DEFAULT,
                            true, 0.333), Color.RED,
                        Messages.message(StringTemplate
                            .template("report.colony.making.noteach.description")
                            .addStringTemplate("%teacher%", u.getLabel())));
                } else {

(startLine=563 endLine=571 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else {
                    teach = newLabel(Integer.toString(left),
                        lib.getUnitImageIcon(u.getType(), Role.DEFAULT,
                            true, 0.333), Color.BLACK,
                        Messages.message(StringTemplate
                            .template("report.colony.making.educating.description")
                            .addStringTemplate("%teacher%", u.getLabel())
                            .addAmount("%turns%", left)));
                }

commonMethod: 
(startLine=808 endLine=847 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
    /**
     * Is it a good idea to produce goods at this work location using a
     * better unit type?
     *
     * Always true for colony tiles, but for buildings we need to be
     * more conservative or we will end up recommending packing each
     * building to capacity.
     *
     * FTM then:
     * - assume that if we have upgraded the building we really do
     *   want to use it
     * - we should produce hammers if we are not, or if we can upgrade
     *   and existing unit
     * - we should produce liberty until we max out the colony SoL
     *
     * @param wl The <code>WorkLocation</code> where production is to occur.
     * @param goodsType The <code>GoodsType</code> to produce.
     * @param unit The <code>Unit</code> that is doing the job at present,
     *     which may be null if none is at work.
     * @param expert The expert <code>UnitType</code> to put to work.
     * @return True if it is a good idea to use the expert.
     */
    private boolean wantGoods(WorkLocation wl, GoodsType goodsType,
                              Unit unit, UnitType expert) {
        boolean ret = false;
        if (wl instanceof ColonyTile) {
            ret = true;
        } else if (wl instanceof Building) {
            Building bu = (Building) wl;
            Colony colony = wl.getColony();
            ret = bu.canAdd(expert)
                && (bu.getLevel() > 1
                    || ("model.goods.hammers".equals(goodsType.getId())
                        && (colony.getProductionOf(goodsType) == 0
                            || (unit != null && unit.getType() != expert)))
                    || (goodsType.isLibertyType()
                        && colony.getSoL() < 100));
        }
        return ret;
    }


, Instance #
frags: 
(startLine=556 endLine=563 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                if (left <= 0) {
                    teach = newLabel(Integer.toString(0),
                        lib.getUnitImageIcon(u.getType(), Role.DEFAULT,
                            true, 0.333), Color.RED,
                        Messages.message(StringTemplate
                            .template("report.colony.making.noteach.description")
                            .addStringTemplate("%teacher%", u.getLabel())));
                } else {

(startLine=563 endLine=571 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else {
                    teach = newLabel(Integer.toString(left),
                        lib.getUnitImageIcon(u.getType(), Role.DEFAULT,
                            true, 0.333), Color.BLACK,
                        Messages.message(StringTemplate
                            .template("report.colony.making.educating.description")
                            .addStringTemplate("%teacher%", u.getLabel())
                            .addAmount("%turns%", left)));
                }

commonMethod: 
(startLine=798 endLine=806 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
    private void addSuggestion(HashMap<UnitType, Suggestion> suggestions,
                               UnitType old, UnitType expert,
                               GoodsType work, int amount) {
        Suggestion suggestion = suggestions.get(expert);
        // Keep it simple for now.
        if (suggestion == null || suggestion.amount < amount) {
            suggestions.put(expert, new Suggestion(old, expert, work, amount));
        }
    }


, Instance #
frags: 
(startLine=556 endLine=563 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                if (left <= 0) {
                    teach = newLabel(Integer.toString(0),
                        lib.getUnitImageIcon(u.getType(), Role.DEFAULT,
                            true, 0.333), Color.RED,
                        Messages.message(StringTemplate
                            .template("report.colony.making.noteach.description")
                            .addStringTemplate("%teacher%", u.getLabel())));
                } else {

(startLine=563 endLine=571 srcPath=/root/NewExperiment/freecolFilter/00867/src/net/sf/freecol/client/gui/panel/ReportColonyPanel.java)
                } else {
                    teach = newLabel(Integer.toString(left),
                        lib.getUnitImageIcon(u.getType(), Role.DEFAULT,
                            true, 0.333), Color.BLACK,
                        Messages.message(StringTemplate
                            .template("report.colony.making.educating.description")
                            .addStringTemplate("%teacher%", u.getLabel())
                            .addAmount("%turns%", left)));
                }

commonMethod: 
(startLine=489 endLine=500 srcPath=/root/NewExperiment/freecolFilter/00868/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets a <code>List</code> of every {@link WorkLocation} in this
     * <code>Colony</code>.
     *
     * @return The <code>List</code>.
     * @see WorkLocation
     */
    public List<WorkLocation> getWorkLocations() {
        List<WorkLocation> result = new ArrayList<WorkLocation>(colonyTiles);
        result.addAll(buildingMap.values());
        return result;
    }


, Instance #
frags: 
(startLine=862 endLine=871 srcPath=/root/NewExperiment/freecolFilter/00899/src/net/sf/freecol/client/control/InGameController.java)
        if (toLoad < atStop) {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                "traderoute.loadImportLimited", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%location%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .add("%goods%", type.getNameKey())
                .addName("%more%", Integer.toString(atStop - toLoad));
        } else if (present > atStop && toLoad > atStop) {

(startLine=871 endLine=880 srcPath=/root/NewExperiment/freecolFilter/00899/src/net/sf/freecol/client/control/InGameController.java)
        } else if (present > atStop && toLoad > atStop) {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                "traderoute.loadExportLimited", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%location%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .add("%goods%", type.getNameKey())
                .addName("%more%", Integer.toString(present - atStop));
        } else {

(startLine=880 endLine=888 srcPath=/root/NewExperiment/freecolFilter/00899/src/net/sf/freecol/client/control/InGameController.java)
        } else {
            m = new ModelMessage(ModelMessage.MessageType.GOODS_MOVEMENT,
                "traderoute.load", unit)
                .addName("%route%", route)
                .addStringTemplate("%unit%", Messages.getLabel(unit))
                .addStringTemplate("%location%", loc.getLocationNameFor(player))
                .addName("%amount%", Integer.toString(amount))
                .add("%goods%", type.getNameKey());
        }

commonMethod: 
(startLine=345 endLine=356 srcPath=/root/NewExperiment/freecolFilter/00900/src/net/sf/freecol/common/model/ModelMessage.java)
    /**
     * Add a key and an integer value to replace it to this
     * StringTemplate.
     *
     * @param key a <code>String</code> value
     * @param amount an <code>int</code> value
     * @return a <code>ModelMessage</code> value
     */
    public ModelMessage addAmount(String key, int amount) {
        super.addAmount(key, amount);
        return this;
    }


, Instance #
frags: 
(startLine=625 endLine=636 srcPath=/root/NewExperiment/freecolFilter/00920/src/net/sf/freecol/client/control/InGameInputHandler.java)
        for (FoundingFatherType type : FoundingFatherType.values()) {
            String id = element.getAttribute(type.toString());
            if (id != null && !id.equals("")) {
                FoundingFather father = getGame().getSpecification()
                    .getFoundingFather(id);
                if (father == null) {
                    logger.warning("Bogus " + type + " father: " + id);
                } else {
                    ffs.add(father);
                }
            }
        }

(startLine=256 endLine=268 srcPath=/root/NewExperiment/freecolFilter/00920/src/net/sf/freecol/server/ai/AIInGameInputHandler.java)
        for (FoundingFatherType type : FoundingFatherType.values()) {
            String id = element.getAttribute(type.toString());
            if (id != null && id != "") {
                FoundingFather father = aiMain.getGame().getSpecification()
                    .getFoundingFather(id);
                if (father == null) {
                    logger.warning("Bogus " + type.toString()
                                   + " father: " + id);
                } else {
                    possibleFoundingFathers.add(father);
                }
            }
        }

commonMethod: 
(startLine=122 endLine=136 srcPath=/root/NewExperiment/freecolFilter/00921/src/net/sf/freecol/common/networking/ChooseFoundingFatherMessage.java)
    /**
     * Convert this ChooseFoundingFatherMessage to XML.
     *
     * @return The XML representation of this message.
     */
    public Element toXMLElement() {
        Element result = createNewRootElement(getXMLElementTagName());
        for (FoundingFather f : fathers) {
            result.setAttribute(f.getType().toString(), f.getId());
        }
        if (foundingFather != null) {
            result.setAttribute("foundingFather", foundingFather.getId());
        }
        return result;
    }


, Instance #
frags: 
(startLine=495 endLine=557 srcPath=/root/NewExperiment/freecolFilter/00923/src/net/sf/freecol/client/gui/GUI.java)
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {

(startLine=587 endLine=649 srcPath=/root/NewExperiment/freecolFilter/00923/src/net/sf/freecol/client/gui/GUI.java)
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {
                            if (remainderUp > 0) {
                                // Upper-Right
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp == 0) {
                            if (remainderUp > 0) {
                                // Upper-Left
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Left
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {

(startLine=684 endLine=746 srcPath=/root/NewExperiment/freecolFilter/00923/src/net/sf/freecol/client/gui/GUI.java)
                    if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Left
                            if ((remainderUp * 2) > remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Left
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((remainderUp * 2) > remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Upper-Right
                                if ((remainderUp * 2) > -remainderLeft) {
                                    diffUp++;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((-remainderUp * 2) > remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft++;
                                }
                            } else {
                                // Lower-Right
                                if ((-remainderUp * 2) > -remainderLeft) {
                                    diffUp--;
                                } else {
                                    diffLeft--;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Right
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Right
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        }
                    } else if ((orDiffLeft % 2) == 0) {

(startLine=746 endLine=808 srcPath=/root/NewExperiment/freecolFilter/00923/src/net/sf/freecol/client/gui/GUI.java)
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {
                            if (remainderLeft > 0) {
                                // Lower-Left
                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp--;
                                }
                            } else {
                                // Lower-Right
                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp--;
                                }
                            }
                        } else if (orDiffLeft == 0) {
                            if (remainderLeft > 0) {
                                // Upper-Left
                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                    diffLeft++;
                                } else {
                                    diffUp++;
                                }
                            } else {
                                // Upper-Right
                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                    diffLeft--;
                                } else {
                                    diffUp++;
                                }
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {

commonMethod: 
(startLine=2306 endLine=2326 srcPath=/root/NewExperiment/freecolFilter/00924/src/net/sf/freecol/client/gui/Canvas.java)
    /**
     * Updates the sizes of the components on this Canvas.
     */
    public void updateSizes() {
        if (oldSize == null) {
            oldSize = getSize();
        }
        if (oldSize.width != getWidth() || oldSize.height != getHeight()) {
            MapControlsAction mca = (MapControlsAction) freeColClient
                .getActionManager().getFreeColAction(MapControlsAction.id);
            MapControls mc = mca.getMapControls();
            if (mc != null && mc.isShowing()) {
                mc.removeFromComponent(this);
                mc.addToComponent(this);
                mapControls = mc;
            }
            gui.setSize(getSize());
            gui.forceReposition();
            oldSize = getSize();
        }
    }


, Instance #
frags: 
(startLine=557 endLine=587 srcPath=/root/NewExperiment/freecolFilter/00923/src/net/sf/freecol/client/gui/GUI.java)
                    } else if ((orDiffLeft % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Left
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Right
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Left
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Right
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        }
                    } else if ((orDiffUp % 2) == 0) {

(startLine=649 endLine=679 srcPath=/root/NewExperiment/freecolFilter/00923/src/net/sf/freecol/client/gui/GUI.java)
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }

(startLine=808 endLine=838 srcPath=/root/NewExperiment/freecolFilter/00923/src/net/sf/freecol/client/gui/GUI.java)
                    } else if ((orDiffUp % 2) == 0) {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Upper-Right
                            if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft--;
                            }
                        } else if (orDiffUp > 0) {
                            // Upper-Left
                            if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp++;
                            } else {
                                diffLeft++;
                            }
                        } else if (orDiffLeft > 0) {
                            // Lower-Right
                            if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft--;
                            }
                        } else {
                            // Lower-Left
                            if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {
                                diffUp--;
                            } else {
                                diffLeft++;
                            }
                        }
                    } else {

(startLine=838 endLine=868 srcPath=/root/NewExperiment/freecolFilter/00923/src/net/sf/freecol/client/gui/GUI.java)
                    } else {
                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {
                            // Lower-Right
                            if ((remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffUp > 0) {
                            // Lower-Left
                            if ((remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp--;
                            }
                        } else if (orDiffLeft > 0) {
                            // Upper-Right
                            if ((-remainderUp * 2) > remainderLeft) {
                                diffLeft--;
                            } else {
                                diffUp++;
                            }
                        } else {
                            // Upper-Left
                            if ((-remainderUp * 2) > -remainderLeft) {
                                diffLeft++;
                            } else {
                                diffUp++;
                            }
                        }
                    }

commonMethod: 
(startLine=2306 endLine=2326 srcPath=/root/NewExperiment/freecolFilter/00924/src/net/sf/freecol/client/gui/Canvas.java)
    /**
     * Updates the sizes of the components on this Canvas.
     */
    public void updateSizes() {
        if (oldSize == null) {
            oldSize = getSize();
        }
        if (oldSize.width != getWidth() || oldSize.height != getHeight()) {
            MapControlsAction mca = (MapControlsAction) freeColClient
                .getActionManager().getFreeColAction(MapControlsAction.id);
            MapControls mc = mca.getMapControls();
            if (mc != null && mc.isShowing()) {
                mc.removeFromComponent(this);
                mc.addToComponent(this);
                mapControls = mc;
            }
            gui.setSize(getSize());
            gui.forceReposition();
            oldSize = getSize();
        }
    }


, Instance #
frags: 
(startLine=2062 endLine=2073 srcPath=/root/NewExperiment/freecolFilter/00923/src/net/sf/freecol/client/gui/GUI.java)
                    if (temp.getTurns() == 0) {
                        g.setColor(Color.GREEN);
                        image = lib.getPathImage(activeUnit);
                        if (activeUnit != null
                                && tile.isExplored()
                                && activeUnit.isNaval()
                                && tile.isLand()
                                && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {
                            image = lib.getPathImage(activeUnit.getFirstUnit());
                        }
                        textColor = Color.BLACK;
                    } else {

(startLine=2073 endLine=2084 srcPath=/root/NewExperiment/freecolFilter/00923/src/net/sf/freecol/client/gui/GUI.java)
                    } else {
                        g.setColor(Color.RED);
                        image = lib.getPathNextTurnImage(activeUnit);
                        if (activeUnit != null
                                && tile.isExplored()
                                && activeUnit.isNaval()
                                && tile.isLand()
                                && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {
                            image = lib.getPathNextTurnImage(activeUnit.getFirstUnit());
                        }
                        textColor = Color.WHITE;
                    }

commonMethod: 
(startLine=1807 endLine=1855 srcPath=/root/NewExperiment/freecolFilter/00924/src/net/sf/freecol/client/gui/Canvas.java)
    /**
     * Shows the <code>VideoPanel</code>.
     */
    public void showOpeningVideoPanel() {
        closeMenus();
        final Video video = ResourceManager.getVideo("Opening.video");
        boolean muteAudio = !getFreeColClient().canPlaySound();
        final VideoComponent vp = new VideoComponent(video, muteAudio);
        addCentered(vp, MAIN_LAYER);
        vp.play();

        final class AbortListener implements KeyListener, MouseListener, VideoListener {
            public void keyPressed(KeyEvent e) {
                execute();
            }

            public void keyReleased(KeyEvent e) {}

            public void keyTyped(KeyEvent e) {}

            public void mouseClicked(MouseEvent e) {
                execute();
            }

            public void mouseEntered(MouseEvent e) {}
            public void mouseExited(MouseEvent e) {}
            public void mousePressed(MouseEvent e) {}
            public void mouseReleased(MouseEvent e) {}
            public void stopped() {
                execute();
            }
            private void execute() {
                removeKeyListener(this);
                removeMouseListener(this);
                vp.removeMouseListener(this);
                vp.removeVideoListener(this);
                vp.stop();
                Canvas.this.remove(vp);
                showMainPanel();
                freeColClient.playSound("sound.intro.general");
            }
        }

        AbortListener l = new AbortListener();
        addMouseListener(l);
        addKeyListener(l);
        vp.addMouseListener(l);
        vp.addVideoListener(l);
    }


, Instance #
frags: 
(startLine=774 endLine=808 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (Goods goods : unit.getGoodsList()) {
            GoodsType type = goods.getType();
            int index, toLoad;
            if ((toLoad = GoodsContainer.CARGO_SIZE - goods.getAmount()) > 0
                && (index = goodsTypesToLoad.indexOf(type)) >= 0) {
                int present, atStop;
                if (unit.isInEurope()) {
                    present = atStop = Integer.MAX_VALUE;
                } else {
                    present = colony.getGoodsContainer().getGoodsCount(type);
                    atStop = colony.getExportAmount(type);
                }
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                0, present, 0, toLoad));
                    }
                }
                // Do not try to load this goods type again.  Either
                // it has already succeeded, or it can not ever
                // succeed because there is nothing available.
                goodsTypesToLoad.remove(index);
            }
        }

(startLine=811 endLine=837 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (GoodsType type : goodsTypesToLoad) {
            if (unit.getSpaceLeft() <= 0) break; // Full
            int toLoad = GoodsContainer.CARGO_SIZE;
            int present, atStop;
            if (unit.isInEurope()) {
                present = atStop = Integer.MAX_VALUE;
            } else {
                present = colony.getGoodsContainer().getGoodsCount(type);
                atStop = colony.getExportAmount(type);
            }
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {
                if (messages != null) {
                    messages.add(getLoadGoodsMessage(unit, type,
                            0, present, 0, toLoad));
                }
            }
        }

commonMethod: 
(startLine=3702 endLine=3712 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/control/InGameController.java)
    /**
     * Provides an opportunity to filter the messages delivered to the canvas.
     *
     * @param message the message that is candidate for delivery to the canvas
     * @return true if the message should be delivered
     */
    private boolean shouldAllowMessage(ModelMessage message) {
        BooleanOption option = freeColClient.getClientOptions()
            .getBooleanOption(message);
        return (option == null) ? true : option.getValue();
    }


, Instance #
frags: 
(startLine=774 endLine=808 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (Goods goods : unit.getGoodsList()) {
            GoodsType type = goods.getType();
            int index, toLoad;
            if ((toLoad = GoodsContainer.CARGO_SIZE - goods.getAmount()) > 0
                && (index = goodsTypesToLoad.indexOf(type)) >= 0) {
                int present, atStop;
                if (unit.isInEurope()) {
                    present = atStop = Integer.MAX_VALUE;
                } else {
                    present = colony.getGoodsContainer().getGoodsCount(type);
                    atStop = colony.getExportAmount(type);
                }
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                0, present, 0, toLoad));
                    }
                }
                // Do not try to load this goods type again.  Either
                // it has already succeeded, or it can not ever
                // succeed because there is nothing available.
                goodsTypesToLoad.remove(index);
            }
        }

(startLine=811 endLine=837 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (GoodsType type : goodsTypesToLoad) {
            if (unit.getSpaceLeft() <= 0) break; // Full
            int toLoad = GoodsContainer.CARGO_SIZE;
            int present, atStop;
            if (unit.isInEurope()) {
                present = atStop = Integer.MAX_VALUE;
            } else {
                present = colony.getGoodsContainer().getGoodsCount(type);
                atStop = colony.getExportAmount(type);
            }
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {
                if (messages != null) {
                    messages.add(getLoadGoodsMessage(unit, type,
                            0, present, 0, toLoad));
                }
            }
        }

commonMethod: 
(startLine=3826 endLine=3829 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/control/InGameController.java)
    private synchronized void startIgnoringMessage(String key, int turn) {
        logger.finer("Ignoring model message with key " + key);
        messagesToIgnore.put(key, new Integer(turn));
    }


, Instance #
frags: 
(startLine=774 endLine=808 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (Goods goods : unit.getGoodsList()) {
            GoodsType type = goods.getType();
            int index, toLoad;
            if ((toLoad = GoodsContainer.CARGO_SIZE - goods.getAmount()) > 0
                && (index = goodsTypesToLoad.indexOf(type)) >= 0) {
                int present, atStop;
                if (unit.isInEurope()) {
                    present = atStop = Integer.MAX_VALUE;
                } else {
                    present = colony.getGoodsContainer().getGoodsCount(type);
                    atStop = colony.getExportAmount(type);
                }
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                0, present, 0, toLoad));
                    }
                }
                // Do not try to load this goods type again.  Either
                // it has already succeeded, or it can not ever
                // succeed because there is nothing available.
                goodsTypesToLoad.remove(index);
            }
        }

(startLine=811 endLine=837 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (GoodsType type : goodsTypesToLoad) {
            if (unit.getSpaceLeft() <= 0) break; // Full
            int toLoad = GoodsContainer.CARGO_SIZE;
            int present, atStop;
            if (unit.isInEurope()) {
                present = atStop = Integer.MAX_VALUE;
            } else {
                present = colony.getGoodsContainer().getGoodsCount(type);
                atStop = colony.getExportAmount(type);
            }
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {
                if (messages != null) {
                    messages.add(getLoadGoodsMessage(unit, type,
                            0, present, 0, toLoad));
                }
            }
        }

commonMethod: 
(startLine=176 endLine=186 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/gui/action/ActionManager.java)
    /**
     * Updates every <code>FreeColAction</code> this object keeps.
     *
     * @see FreeColAction
     */
    public void update() {
        Iterator<Option> it = iterator();
        while (it.hasNext()) {
            ((FreeColAction) it.next()).update();
        }
    }


, Instance #
frags: 
(startLine=774 endLine=808 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (Goods goods : unit.getGoodsList()) {
            GoodsType type = goods.getType();
            int index, toLoad;
            if ((toLoad = GoodsContainer.CARGO_SIZE - goods.getAmount()) > 0
                && (index = goodsTypesToLoad.indexOf(type)) >= 0) {
                int present, atStop;
                if (unit.isInEurope()) {
                    present = atStop = Integer.MAX_VALUE;
                } else {
                    present = colony.getGoodsContainer().getGoodsCount(type);
                    atStop = colony.getExportAmount(type);
                }
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                0, present, 0, toLoad));
                    }
                }
                // Do not try to load this goods type again.  Either
                // it has already succeeded, or it can not ever
                // succeed because there is nothing available.
                goodsTypesToLoad.remove(index);
            }
        }

(startLine=811 endLine=837 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (GoodsType type : goodsTypesToLoad) {
            if (unit.getSpaceLeft() <= 0) break; // Full
            int toLoad = GoodsContainer.CARGO_SIZE;
            int present, atStop;
            if (unit.isInEurope()) {
                present = atStop = Integer.MAX_VALUE;
            } else {
                present = colony.getGoodsContainer().getGoodsCount(type);
                atStop = colony.getExportAmount(type);
            }
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {
                if (messages != null) {
                    messages.add(getLoadGoodsMessage(unit, type,
                            0, present, 0, toLoad));
                }
            }
        }

commonMethod: 
(startLine=1321 endLine=1339 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/gui/Canvas.java)
    /**
     * Displays a dialog with a text and a ok/cancel option.
     *
     * @param tile A <code>Tile</code> to make visible (not under the dialog!)
     * @param text The text that explains the choice for the user.
     * @param okText The text displayed on the "ok"-button.
     * @param cancelText The text displayed on the "cancel"-button.
     *
     * @return <i>true</i> if the user clicked the "ok"-button and <i>false</i>
     *         otherwise.
     * @see FreeColDialog
     */
    public boolean showConfirmDialog(Tile tile, StringTemplate text,
                                     String okText, String cancelText) {
        return showFreeColDialog(FreeColDialog.createConfirmDialog(gui, Messages.message(text),
                                                                   Messages.message(okText),
                                                                   Messages.message(cancelText)),
                                 tile);
    }


, Instance #
frags: 
(startLine=774 endLine=808 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (Goods goods : unit.getGoodsList()) {
            GoodsType type = goods.getType();
            int index, toLoad;
            if ((toLoad = GoodsContainer.CARGO_SIZE - goods.getAmount()) > 0
                && (index = goodsTypesToLoad.indexOf(type)) >= 0) {
                int present, atStop;
                if (unit.isInEurope()) {
                    present = atStop = Integer.MAX_VALUE;
                } else {
                    present = colony.getGoodsContainer().getGoodsCount(type);
                    atStop = colony.getExportAmount(type);
                }
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                0, present, 0, toLoad));
                    }
                }
                // Do not try to load this goods type again.  Either
                // it has already succeeded, or it can not ever
                // succeed because there is nothing available.
                goodsTypesToLoad.remove(index);
            }
        }

(startLine=811 endLine=837 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (GoodsType type : goodsTypesToLoad) {
            if (unit.getSpaceLeft() <= 0) break; // Full
            int toLoad = GoodsContainer.CARGO_SIZE;
            int present, atStop;
            if (unit.isInEurope()) {
                present = atStop = Integer.MAX_VALUE;
            } else {
                present = colony.getGoodsContainer().getGoodsCount(type);
                atStop = colony.getExportAmount(type);
            }
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {
                if (messages != null) {
                    messages.add(getLoadGoodsMessage(unit, type,
                            0, present, 0, toLoad));
                }
            }
        }

commonMethod: 
(startLine=902 endLine=980 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/control/InGameController.java)
    /**
     * Displays pending <code>ModelMessage</code>s.
     *
     * @param allMessages Display all messages or just the undisplayed ones.
     * @param endOfTurn Use a turn report panel if necessary.
     */
    public void displayModelMessages(final boolean allMessages,
                                     final boolean endOfTurn) {
        Player player = freeColClient.getMyPlayer();
        int thisTurn = freeColClient.getGame().getTurn().getNumber();
        final ArrayList<ModelMessage> messages = new ArrayList<ModelMessage>();

        for (ModelMessage m : ((allMessages) ? player.getModelMessages()
                : player.getNewModelMessages())) {
            if (shouldAllowMessage(m)) {
                if (m.getMessageType() == MessageType.WAREHOUSE_CAPACITY) {
                    String key = m.getSourceId();
                    switch (m.getTemplateType()) {
                    case TEMPLATE:
                        for (String otherkey : m.getKeys()) {
                            if ("%goods%".equals(otherkey)) {
                                key += otherkey;
                                break;
                            }
                        }
                        break;
                    default:
                        break;
                    }

                    Integer turn = getTurnForMessageIgnored(key);
                    if (turn != null && turn.intValue() == thisTurn - 1) {
                        startIgnoringMessage(key, thisTurn);
                        m.setBeenDisplayed(true);
                        continue;
                    }
                }
                messages.add(m);
            }

            // flag all messages delivered as "beenDisplayed".
            m.setBeenDisplayed(true);
        }

        for (Entry<String, Integer> entry : messagesToIgnore.entrySet()) {
            if (entry.getValue().intValue() < thisTurn - 1) {
                if (logger.isLoggable(Level.FINER)) {
                    logger.finer("Removing old model message with key "
                        + entry.getKey() + " from ignored messages.");
                }
                stopIgnoringMessage(entry.getKey());
            }
        }

        if (messages.size() > 0) {
            final ModelMessage[] a = messages.toArray(new ModelMessage[0]);
            Runnable uiTask = new Runnable() {
                    public void run() {
                        if (endOfTurn) {
                            gui.getCanvas().showReportTurnPanel(a);
                        } else {
                            gui.getCanvas().showModelMessages(a);
                        }
                    }
                };
            freeColClient.getActionManager().update();
            if (SwingUtilities.isEventDispatchThread()) {
                uiTask.run();
            } else {
                try {
                    SwingUtilities.invokeAndWait(uiTask);
                } catch (InterruptedException e) {
                    logger.log(Level.WARNING, "Message display", e);
                } catch (InvocationTargetException e) {
                    logger.log(Level.WARNING, "Message display", e);
                }
            }
        }
    }


, Instance #
frags: 
(startLine=774 endLine=808 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (Goods goods : unit.getGoodsList()) {
            GoodsType type = goods.getType();
            int index, toLoad;
            if ((toLoad = GoodsContainer.CARGO_SIZE - goods.getAmount()) > 0
                && (index = goodsTypesToLoad.indexOf(type)) >= 0) {
                int present, atStop;
                if (unit.isInEurope()) {
                    present = atStop = Integer.MAX_VALUE;
                } else {
                    present = colony.getGoodsContainer().getGoodsCount(type);
                    atStop = colony.getExportAmount(type);
                }
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                0, present, 0, toLoad));
                    }
                }
                // Do not try to load this goods type again.  Either
                // it has already succeeded, or it can not ever
                // succeed because there is nothing available.
                goodsTypesToLoad.remove(index);
            }
        }

(startLine=811 endLine=837 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
        for (GoodsType type : goodsTypesToLoad) {
            if (unit.getSpaceLeft() <= 0) break; // Full
            int toLoad = GoodsContainer.CARGO_SIZE;
            int present, atStop;
            if (unit.isInEurope()) {
                present = atStop = Integer.MAX_VALUE;
            } else {
                present = colony.getGoodsContainer().getGoodsCount(type);
                atStop = colony.getExportAmount(type);
            }
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {
                if (messages != null) {
                    messages.add(getLoadGoodsMessage(unit, type,
                            0, present, 0, toLoad));
                }
            }
        }

commonMethod: 
(startLine=523 endLine=541 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns all new ModelMessages for this player.
     *
     * @return all new ModelMessages for this player.
     */
    public List<ModelMessage> getNewModelMessages() {

        ArrayList<ModelMessage> out = new ArrayList<ModelMessage>();

        for (ModelMessage message : modelMessages) {
            if (message.hasBeenDisplayed()) {
                continue;
            } else {
                out.add(message); // preserve message order
            }
        }

        return out;
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=3687 endLine=3700 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/control/InGameController.java)
    /**
     * Require that it is this client's player's turn.
     * Put up the notYourTurn message if not.
     *
     * @return True if it is our turn.
     */
    private boolean requireOurTurn() {
        if (freeColClient.getGame().getCurrentPlayer()
            != freeColClient.getMyPlayer()) {
            gui.getCanvas().showInformationMessage("notYourTurn");
            return false;
        }
        return true;
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=3702 endLine=3712 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/control/InGameController.java)
    /**
     * Provides an opportunity to filter the messages delivered to the canvas.
     *
     * @param message the message that is candidate for delivery to the canvas
     * @return true if the message should be delivered
     */
    private boolean shouldAllowMessage(ModelMessage message) {
        BooleanOption option = freeColClient.getClientOptions()
            .getBooleanOption(message);
        return (option == null) ? true : option.getValue();
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=3826 endLine=3829 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/control/InGameController.java)
    private synchronized void startIgnoringMessage(String key, int turn) {
        logger.finer("Ignoring model message with key " + key);
        messagesToIgnore.put(key, new Integer(turn));
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=560 endLine=569 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/common/networking/ServerAPI.java)
    /**
     * Server query-response for disbanding a unit.
     *
     * @param unit The <code>Unit</code> to operate on.
     * @return True if the server interaction succeeded.
     */
    public boolean disbandUnit(Unit unit) {
        return askHandling(new DisbandUnitMessage(unit),
            null, null);
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=176 endLine=186 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/gui/action/ActionManager.java)
    /**
     * Updates every <code>FreeColAction</code> this object keeps.
     *
     * @see FreeColAction
     */
    public void update() {
        Iterator<Option> it = iterator();
        while (it.hasNext()) {
            ((FreeColAction) it.next()).update();
        }
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=2600 endLine=2602 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/control/InGameController.java)
    private synchronized Integer getTurnForMessageIgnored(String key) {
        return messagesToIgnore.get(key);
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=132 endLine=134 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/common/model/StringTemplate.java)
    public static StringTemplate key(String value) {
        return new StringTemplate(value, TemplateType.KEY);
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=1321 endLine=1339 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/gui/Canvas.java)
    /**
     * Displays a dialog with a text and a ok/cancel option.
     *
     * @param tile A <code>Tile</code> to make visible (not under the dialog!)
     * @param text The text that explains the choice for the user.
     * @param okText The text displayed on the "ok"-button.
     * @param cancelText The text displayed on the "cancel"-button.
     *
     * @return <i>true</i> if the user clicked the "ok"-button and <i>false</i>
     *         otherwise.
     * @see FreeColDialog
     */
    public boolean showConfirmDialog(Tile tile, StringTemplate text,
                                     String okText, String cancelText) {
        return showFreeColDialog(FreeColDialog.createConfirmDialog(gui, Messages.message(text),
                                                                   Messages.message(okText),
                                                                   Messages.message(cancelText)),
                                 tile);
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=902 endLine=980 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/control/InGameController.java)
    /**
     * Displays pending <code>ModelMessage</code>s.
     *
     * @param allMessages Display all messages or just the undisplayed ones.
     * @param endOfTurn Use a turn report panel if necessary.
     */
    public void displayModelMessages(final boolean allMessages,
                                     final boolean endOfTurn) {
        Player player = freeColClient.getMyPlayer();
        int thisTurn = freeColClient.getGame().getTurn().getNumber();
        final ArrayList<ModelMessage> messages = new ArrayList<ModelMessage>();

        for (ModelMessage m : ((allMessages) ? player.getModelMessages()
                : player.getNewModelMessages())) {
            if (shouldAllowMessage(m)) {
                if (m.getMessageType() == MessageType.WAREHOUSE_CAPACITY) {
                    String key = m.getSourceId();
                    switch (m.getTemplateType()) {
                    case TEMPLATE:
                        for (String otherkey : m.getKeys()) {
                            if ("%goods%".equals(otherkey)) {
                                key += otherkey;
                                break;
                            }
                        }
                        break;
                    default:
                        break;
                    }

                    Integer turn = getTurnForMessageIgnored(key);
                    if (turn != null && turn.intValue() == thisTurn - 1) {
                        startIgnoringMessage(key, thisTurn);
                        m.setBeenDisplayed(true);
                        continue;
                    }
                }
                messages.add(m);
            }

            // flag all messages delivered as "beenDisplayed".
            m.setBeenDisplayed(true);
        }

        for (Entry<String, Integer> entry : messagesToIgnore.entrySet()) {
            if (entry.getValue().intValue() < thisTurn - 1) {
                if (logger.isLoggable(Level.FINER)) {
                    logger.finer("Removing old model message with key "
                        + entry.getKey() + " from ignored messages.");
                }
                stopIgnoringMessage(entry.getKey());
            }
        }

        if (messages.size() > 0) {
            final ModelMessage[] a = messages.toArray(new ModelMessage[0]);
            Runnable uiTask = new Runnable() {
                    public void run() {
                        if (endOfTurn) {
                            gui.getCanvas().showReportTurnPanel(a);
                        } else {
                            gui.getCanvas().showModelMessages(a);
                        }
                    }
                };
            freeColClient.getActionManager().update();
            if (SwingUtilities.isEventDispatchThread()) {
                uiTask.run();
            } else {
                try {
                    SwingUtilities.invokeAndWait(uiTask);
                } catch (InterruptedException e) {
                    logger.log(Level.WARNING, "Message display", e);
                } catch (InvocationTargetException e) {
                    logger.log(Level.WARNING, "Message display", e);
                }
            }
        }
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=3831 endLine=3835 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/client/control/InGameController.java)
    private synchronized void stopIgnoringMessage(String key) {
        logger.finer("Removing model message with key " + key
            + " from ignored messages.");
        messagesToIgnore.remove(key);
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=523 endLine=541 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns all new ModelMessages for this player.
     *
     * @return all new ModelMessages for this player.
     */
    public List<ModelMessage> getNewModelMessages() {

        ArrayList<ModelMessage> out = new ArrayList<ModelMessage>();

        for (ModelMessage message : modelMessages) {
            if (message.hasBeenDisplayed()) {
                continue;
            } else {
                out.add(message); // preserve message order
            }
        }

        return out;
    }


, Instance #
frags: 
(startLine=786 endLine=797 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
                if (atStop > 0) {
                    Goods cargo = new Goods(game, loc, type,
                        Math.min(toLoad, atStop));
                    if (loadGoods(cargo, unit)) {
                        if (messages != null) {
                            messages.add(getLoadGoodsMessage(unit, type,
                                    cargo.getAmount(), present,
                                    atStop, toLoad));
                        }
                        ret = true;
                    }
                } else if (present > 0) {

(startLine=821 endLine=831 srcPath=/root/NewExperiment/freecolFilter/00931/src/net/sf/freecol/client/control/InGameController.java)
            if (atStop > 0) {
                Goods cargo = new Goods(game, loc, type,
                    Math.min(toLoad, atStop));
                if (loadGoods(cargo, unit)) {
                    if (messages != null) {
                        messages.add(getLoadGoodsMessage(unit, type,
                                cargo.getAmount(), present, atStop, toLoad));
                    }
                    ret = true;
                }
            } else if (present > 0) {

commonMethod: 
(startLine=2791 endLine=2800 srcPath=/root/NewExperiment/freecolFilter/00932/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Returns the Tile where this Unit is located. Or null if its location is
     * Europe.
     *
     * @return The Tile where this Unit is located. Or null if its location is
     *         Europe.
     */
    public Tile getTile() {
        return (location != null) ? location.getTile() : null;
    }


, Instance #
frags: 
(startLine=343 endLine=356 srcPath=/root/NewExperiment/freecolFilter/00935/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            } else {
                int haggling = 1;
                if (sessionRegister.containsKey(hagglingKey)) {
                    haggling = sessionRegister.get(hagglingKey).intValue();
                }
                if (getAIRandom().nextInt(3 + haggling) < 3) {
                    sessionRegister.put(goldKey, new Integer(gold));
                    sessionRegister.put(hagglingKey, new Integer(haggling + 1));
                    return gold;
                } else {
                    sessionRegister.put(goldKey, new Integer(-1));
                    return NetworkConstants.NO_TRADE;
                }
            }

(startLine=408 endLine=421 srcPath=/root/NewExperiment/freecolFilter/00935/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        } else {
            int haggling = 1;
            if (sessionRegister.containsKey(hagglingKey)) {
                haggling = sessionRegister.get(hagglingKey).intValue();
            }
            if (getAIRandom().nextInt(3 + haggling) < 3) {
                sessionRegister.put(goldKey, new Integer(gold));
                sessionRegister.put(hagglingKey, new Integer(haggling + 1));
                return gold;
            } else {
                sessionRegister.put(goldKey, new Integer(-1));
                return NetworkConstants.NO_TRADE;
            }
        }

commonMethod: 
(startLine=123 endLine=133 srcPath=/root/NewExperiment/freecolFilter/00936/src/net/sf/freecol/common/model/Tension.java)
    /** 
     * Get the current tension level.
     *
     * @return The current level.
     */
    public Level getLevel() {
        for (Level level : Level.values()) {
            if (value <= level.getLimit()) return level;
        }
        return Level.HATEFUL;
    }


, Instance #
frags: 
(startLine=343 endLine=356 srcPath=/root/NewExperiment/freecolFilter/00935/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            } else {
                int haggling = 1;
                if (sessionRegister.containsKey(hagglingKey)) {
                    haggling = sessionRegister.get(hagglingKey).intValue();
                }
                if (getAIRandom().nextInt(3 + haggling) < 3) {
                    sessionRegister.put(goldKey, new Integer(gold));
                    sessionRegister.put(hagglingKey, new Integer(haggling + 1));
                    return gold;
                } else {
                    sessionRegister.put(goldKey, new Integer(-1));
                    return NetworkConstants.NO_TRADE;
                }
            }

(startLine=408 endLine=421 srcPath=/root/NewExperiment/freecolFilter/00935/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        } else {
            int haggling = 1;
            if (sessionRegister.containsKey(hagglingKey)) {
                haggling = sessionRegister.get(hagglingKey).intValue();
            }
            if (getAIRandom().nextInt(3 + haggling) < 3) {
                sessionRegister.put(goldKey, new Integer(gold));
                sessionRegister.put(hagglingKey, new Integer(haggling + 1));
                return gold;
            } else {
                sessionRegister.put(goldKey, new Integer(-1));
                return NetworkConstants.NO_TRADE;
            }
        }

commonMethod: 
(startLine=258 endLine=267 srcPath=/root/NewExperiment/freecolFilter/00936/src/net/sf/freecol/common/model/IndianSettlement.java)
    /**
     * Gets the alarm level towards the given player.
     *
     * @param player The <code>Player</code> to get the alarm level for.
     * @return The current alarm level or null if the settlement has not
     *     encoutered the player.
     */
    public Tension getAlarm(Player player) {
        return alarm.get(player);
    }


, Instance #
frags: 
(startLine=319 endLine=335 srcPath=/root/NewExperiment/freecolFilter/00935/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        if (registered == null) {
            Set<Modifier> modifiers = new HashSet<Modifier>();
            int price = is.getPriceToSell(goods)
                + getPlayer().getTension(buyer).getValue();
            Unit missionary = is.getMissionary(buyer);
            if (missionary != null
                && spec.getBoolean(GameOptions.ENHANCED_MISSIONARIES)) {
                modifiers.addAll(getMissionaryTradeBonuses(missionary, false));
            }
            if (unit.isNaval()) {
                modifiers.addAll(getShipTradePenalties(false));
            }
            price = (int) FeatureContainer.applyModifierSet((float)price,
                getGame().getTurn(), modifiers);
            sessionRegister.put(goldKey, new Integer(price));
            return price;
        } else {

(startLine=385 endLine=401 srcPath=/root/NewExperiment/freecolFilter/00935/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        } else {
            Set<Modifier> modifiers = new HashSet<Modifier>();
            price = is.getPriceToBuy(goods)
                - getPlayer().getTension(seller).getValue();
            Unit missionary = is.getMissionary(seller);
            if (missionary != null
                && spec.getBoolean(GameOptions.ENHANCED_MISSIONARIES)) {
                modifiers.addAll(getMissionaryTradeBonuses(missionary, true));
            }
            if (unit.isNaval()) {
                modifiers.addAll(getShipTradePenalties(true));
            }
            price = (int) FeatureContainer.applyModifierSet((float)price,
                getGame().getTurn(), modifiers);
            if (price <= 0) return 0;
            sessionRegister.put(goldKey, new Integer(price));
        }

commonMethod: 
(startLine=123 endLine=133 srcPath=/root/NewExperiment/freecolFilter/00936/src/net/sf/freecol/common/model/Tension.java)
    /** 
     * Get the current tension level.
     *
     * @return The current level.
     */
    public Level getLevel() {
        for (Level level : Level.values()) {
            if (value <= level.getLimit()) return level;
        }
        return Level.HATEFUL;
    }


, Instance #
frags: 
(startLine=319 endLine=335 srcPath=/root/NewExperiment/freecolFilter/00935/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        if (registered == null) {
            Set<Modifier> modifiers = new HashSet<Modifier>();
            int price = is.getPriceToSell(goods)
                + getPlayer().getTension(buyer).getValue();
            Unit missionary = is.getMissionary(buyer);
            if (missionary != null
                && spec.getBoolean(GameOptions.ENHANCED_MISSIONARIES)) {
                modifiers.addAll(getMissionaryTradeBonuses(missionary, false));
            }
            if (unit.isNaval()) {
                modifiers.addAll(getShipTradePenalties(false));
            }
            price = (int) FeatureContainer.applyModifierSet((float)price,
                getGame().getTurn(), modifiers);
            sessionRegister.put(goldKey, new Integer(price));
            return price;
        } else {

(startLine=385 endLine=401 srcPath=/root/NewExperiment/freecolFilter/00935/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        } else {
            Set<Modifier> modifiers = new HashSet<Modifier>();
            price = is.getPriceToBuy(goods)
                - getPlayer().getTension(seller).getValue();
            Unit missionary = is.getMissionary(seller);
            if (missionary != null
                && spec.getBoolean(GameOptions.ENHANCED_MISSIONARIES)) {
                modifiers.addAll(getMissionaryTradeBonuses(missionary, true));
            }
            if (unit.isNaval()) {
                modifiers.addAll(getShipTradePenalties(true));
            }
            price = (int) FeatureContainer.applyModifierSet((float)price,
                getGame().getTurn(), modifiers);
            if (price <= 0) return 0;
            sessionRegister.put(goldKey, new Integer(price));
        }

commonMethod: 
(startLine=258 endLine=267 srcPath=/root/NewExperiment/freecolFilter/00936/src/net/sf/freecol/common/model/IndianSettlement.java)
    /**
     * Gets the alarm level towards the given player.
     *
     * @param player The <code>Player</code> to get the alarm level for.
     * @return The current alarm level or null if the settlement has not
     *     encoutered the player.
     */
    public Tension getAlarm(Player player) {
        return alarm.get(player);
    }


, Instance #
frags: 
(startLine=892 endLine=922 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            for (int i = 0; i < workLocationPlans.size() && food < 2; i++) {
                WorkLocationPlan wlp = workLocationPlans.get(i);
                WorkLocation wl = wlp.getWorkLocation();
                if (wlp.getGoodsType() == foodType
                    && (((ColonyTile) wl).getWorkTile().isLand()
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }
            }

(startLine=924 endLine=958 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            if (food >= 2) {
                for (int i = 0; i < workLocationPlans.size(); i++) {
                    WorkLocationPlan wlp = workLocationPlans.get(i);
                    if (wlp.getGoodsType() != foodType) {
                        Unit bestUnit = null;
                        int bestProduction = 0;
                        Iterator<Unit> unitIterator = units.iterator();
                        while (unitIterator.hasNext()) {
                            Unit unit = unitIterator.next();
                            int production = 0;
                            WorkLocation location = wlp.getWorkLocation();
                            if (location instanceof ColonyTile) {
                                production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                                  wlp.getGoodsType());
                            } else if (location instanceof Building) {
                                production = ((Building) location).getUnitProductivity(unit);
                            }
                            if (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel()) {
                                bestUnit = unit;
                                bestProduction = production;
                            }
                        }
                        if (bestUnit != null
                            && wlp.getWorkLocation().canAdd(bestUnit)) {
                            bestUnit.setLocation(wlp.getWorkLocation());
                            bestUnit.setWorkType(wlp.getGoodsType());
                            units.remove(bestUnit);
                            workLocationPlans.remove(wlp);
                            workerAdded = true;
                            food = colony.getFoodProduction() - colony.getFoodConsumption();
                        }
                    }
                }
            }

(startLine=1133 endLine=1161 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
        for (int i = 0; i < workLocationPlans.size(); i++) {
            WorkLocationPlan wlp = workLocationPlans.get(i);
            WorkLocation wl = wlp.getWorkLocation();
            if (wlp.getGoodsType() == foodType
                && (((ColonyTile) wl).getWorkTile().isLand()
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }
        }

commonMethod: 
(startLine=2439 endLine=2461 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns the net production of the given GoodsType adjusted by
     * the possible consumption of BuildQueues.
     *
     * @param goodsType a <code>GoodsType</code> value
     * @return an <code>int</code> value
     */
    public int getAdjustedNetProductionOf(GoodsType goodsType) {
        int result = productionCache.getNetProductionOf(goodsType);
        for (BuildQueue<?> queue : new BuildQueue<?>[] { buildQueue,
                                                         populationQueue }) {
            ProductionInfo info = productionCache.getProductionInfo(queue);
            if (info != null) {
                for (AbstractGoods goods : info.getConsumption()) {
                    if (goods.getType() == goodsType) {
                        result += goods.getAmount();
                        break;
                    }
                }
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=892 endLine=922 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            for (int i = 0; i < workLocationPlans.size() && food < 2; i++) {
                WorkLocationPlan wlp = workLocationPlans.get(i);
                WorkLocation wl = wlp.getWorkLocation();
                if (wlp.getGoodsType() == foodType
                    && (((ColonyTile) wl).getWorkTile().isLand()
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }
            }

(startLine=924 endLine=958 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            if (food >= 2) {
                for (int i = 0; i < workLocationPlans.size(); i++) {
                    WorkLocationPlan wlp = workLocationPlans.get(i);
                    if (wlp.getGoodsType() != foodType) {
                        Unit bestUnit = null;
                        int bestProduction = 0;
                        Iterator<Unit> unitIterator = units.iterator();
                        while (unitIterator.hasNext()) {
                            Unit unit = unitIterator.next();
                            int production = 0;
                            WorkLocation location = wlp.getWorkLocation();
                            if (location instanceof ColonyTile) {
                                production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                                  wlp.getGoodsType());
                            } else if (location instanceof Building) {
                                production = ((Building) location).getUnitProductivity(unit);
                            }
                            if (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel()) {
                                bestUnit = unit;
                                bestProduction = production;
                            }
                        }
                        if (bestUnit != null
                            && wlp.getWorkLocation().canAdd(bestUnit)) {
                            bestUnit.setLocation(wlp.getWorkLocation());
                            bestUnit.setWorkType(wlp.getGoodsType());
                            units.remove(bestUnit);
                            workLocationPlans.remove(wlp);
                            workerAdded = true;
                            food = colony.getFoodProduction() - colony.getFoodConsumption();
                        }
                    }
                }
            }

(startLine=1133 endLine=1161 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
        for (int i = 0; i < workLocationPlans.size(); i++) {
            WorkLocationPlan wlp = workLocationPlans.get(i);
            WorkLocation wl = wlp.getWorkLocation();
            if (wlp.getGoodsType() == foodType
                && (((ColonyTile) wl).getWorkTile().isLand()
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }
        }

commonMethod: 
(startLine=2106 endLine=2126 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Checks whether this unit can be equipped with the given
     * <code>EquipmentType</code> at the current
     * <code>Location</code>. This is the case if all requirements of
     * the EquipmentType are met.
     *
     * @param equipmentType an <code>EquipmentType</code> value
     * @return whether this unit can be equipped with the given
     *         <code>EquipmentType</code> at the current location.
     */
    public boolean canBeEquippedWith(EquipmentType equipmentType) {
        for (Entry<String, Boolean> entry : equipmentType.getUnitAbilitiesRequired().entrySet()) {
            if (hasAbility(entry.getKey()) != entry.getValue()) {
                return false;
            }
        }
        if (equipment.getCount(equipmentType) >= equipmentType.getMaximumCount()) {
            return false;
        }
        return true;
    }


, Instance #
frags: 
(startLine=892 endLine=922 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            for (int i = 0; i < workLocationPlans.size() && food < 2; i++) {
                WorkLocationPlan wlp = workLocationPlans.get(i);
                WorkLocation wl = wlp.getWorkLocation();
                if (wlp.getGoodsType() == foodType
                    && (((ColonyTile) wl).getWorkTile().isLand()
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }
            }

(startLine=924 endLine=958 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            if (food >= 2) {
                for (int i = 0; i < workLocationPlans.size(); i++) {
                    WorkLocationPlan wlp = workLocationPlans.get(i);
                    if (wlp.getGoodsType() != foodType) {
                        Unit bestUnit = null;
                        int bestProduction = 0;
                        Iterator<Unit> unitIterator = units.iterator();
                        while (unitIterator.hasNext()) {
                            Unit unit = unitIterator.next();
                            int production = 0;
                            WorkLocation location = wlp.getWorkLocation();
                            if (location instanceof ColonyTile) {
                                production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                                  wlp.getGoodsType());
                            } else if (location instanceof Building) {
                                production = ((Building) location).getUnitProductivity(unit);
                            }
                            if (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel()) {
                                bestUnit = unit;
                                bestProduction = production;
                            }
                        }
                        if (bestUnit != null
                            && wlp.getWorkLocation().canAdd(bestUnit)) {
                            bestUnit.setLocation(wlp.getWorkLocation());
                            bestUnit.setWorkType(wlp.getGoodsType());
                            units.remove(bestUnit);
                            workLocationPlans.remove(wlp);
                            workerAdded = true;
                            food = colony.getFoodProduction() - colony.getFoodConsumption();
                        }
                    }
                }
            }

(startLine=1133 endLine=1161 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
        for (int i = 0; i < workLocationPlans.size(); i++) {
            WorkLocationPlan wlp = workLocationPlans.get(i);
            WorkLocation wl = wlp.getWorkLocation();
            if (wlp.getGoodsType() == foodType
                && (((ColonyTile) wl).getWorkTile().isLand()
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }
        }

commonMethod: 
(startLine=589 endLine=610 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns the maximum food consumption of any unit types
     * available to this player.
     *
     * @return an <code>int</code> value
     */
    public int getMaximumFoodConsumption() {
        if (maximumFoodConsumption < 0) {
            for (UnitType unitType : getSpecification().getUnitTypeList()) {
                if (unitType.isAvailableTo(this)) {
                    int foodConsumption = 0;
                    for (GoodsType foodType : getSpecification().getFoodGoodsTypeList()) {
                        foodConsumption += unitType.getConsumptionOf(foodType);
                    }
                    if (foodConsumption > maximumFoodConsumption) {
                        maximumFoodConsumption = foodConsumption;
                    }
                }
            }
        }
        return maximumFoodConsumption;
    }


, Instance #
frags: 
(startLine=892 endLine=922 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            for (int i = 0; i < workLocationPlans.size() && food < 2; i++) {
                WorkLocationPlan wlp = workLocationPlans.get(i);
                WorkLocation wl = wlp.getWorkLocation();
                if (wlp.getGoodsType() == foodType
                    && (((ColonyTile) wl).getWorkTile().isLand()
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }
            }

(startLine=924 endLine=958 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            if (food >= 2) {
                for (int i = 0; i < workLocationPlans.size(); i++) {
                    WorkLocationPlan wlp = workLocationPlans.get(i);
                    if (wlp.getGoodsType() != foodType) {
                        Unit bestUnit = null;
                        int bestProduction = 0;
                        Iterator<Unit> unitIterator = units.iterator();
                        while (unitIterator.hasNext()) {
                            Unit unit = unitIterator.next();
                            int production = 0;
                            WorkLocation location = wlp.getWorkLocation();
                            if (location instanceof ColonyTile) {
                                production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                                  wlp.getGoodsType());
                            } else if (location instanceof Building) {
                                production = ((Building) location).getUnitProductivity(unit);
                            }
                            if (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel()) {
                                bestUnit = unit;
                                bestProduction = production;
                            }
                        }
                        if (bestUnit != null
                            && wlp.getWorkLocation().canAdd(bestUnit)) {
                            bestUnit.setLocation(wlp.getWorkLocation());
                            bestUnit.setWorkType(wlp.getGoodsType());
                            units.remove(bestUnit);
                            workLocationPlans.remove(wlp);
                            workerAdded = true;
                            food = colony.getFoodProduction() - colony.getFoodConsumption();
                        }
                    }
                }
            }

(startLine=1133 endLine=1161 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
        for (int i = 0; i < workLocationPlans.size(); i++) {
            WorkLocationPlan wlp = workLocationPlans.get(i);
            WorkLocation wl = wlp.getWorkLocation();
            if (wlp.getGoodsType() == foodType
                && (((ColonyTile) wl).getWorkTile().isLand()
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }
        }

commonMethod: 
(startLine=139 endLine=156 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/ProductionInfo.java)
    /**
     * Returns true if production equals maximum production.
     *
     * @return a <code>boolean</code> value
     */
    public boolean hasMaximumProduction() {
        if (maximumProduction.isEmpty()) {
            return true;
        }
        for (int index = 0; index < production.size(); index++) {
            if (maximumProduction.size() < index) {
                return true;
            } else if (maximumProduction.get(index).getAmount() > production.get(index).getAmount()) {
                return false;
            }
        }
        return true;
    }


, Instance #
frags: 
(startLine=892 endLine=922 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            for (int i = 0; i < workLocationPlans.size() && food < 2; i++) {
                WorkLocationPlan wlp = workLocationPlans.get(i);
                WorkLocation wl = wlp.getWorkLocation();
                if (wlp.getGoodsType() == foodType
                    && (((ColonyTile) wl).getWorkTile().isLand()
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }
            }

(startLine=924 endLine=958 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            if (food >= 2) {
                for (int i = 0; i < workLocationPlans.size(); i++) {
                    WorkLocationPlan wlp = workLocationPlans.get(i);
                    if (wlp.getGoodsType() != foodType) {
                        Unit bestUnit = null;
                        int bestProduction = 0;
                        Iterator<Unit> unitIterator = units.iterator();
                        while (unitIterator.hasNext()) {
                            Unit unit = unitIterator.next();
                            int production = 0;
                            WorkLocation location = wlp.getWorkLocation();
                            if (location instanceof ColonyTile) {
                                production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                                  wlp.getGoodsType());
                            } else if (location instanceof Building) {
                                production = ((Building) location).getUnitProductivity(unit);
                            }
                            if (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel()) {
                                bestUnit = unit;
                                bestProduction = production;
                            }
                        }
                        if (bestUnit != null
                            && wlp.getWorkLocation().canAdd(bestUnit)) {
                            bestUnit.setLocation(wlp.getWorkLocation());
                            bestUnit.setWorkType(wlp.getGoodsType());
                            units.remove(bestUnit);
                            workLocationPlans.remove(wlp);
                            workerAdded = true;
                            food = colony.getFoodProduction() - colony.getFoodConsumption();
                        }
                    }
                }
            }

(startLine=1133 endLine=1161 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
        for (int i = 0; i < workLocationPlans.size(); i++) {
            WorkLocationPlan wlp = workLocationPlans.get(i);
            WorkLocation wl = wlp.getWorkLocation();
            if (wlp.getGoodsType() == foodType
                && (((ColonyTile) wl).getWorkTile().isLand()
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }
        }

commonMethod: 
(startLine=1154 endLine=1171 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets the best defender type available to this colony.
     *
     * @return The best available defender type.
     */
    public UnitType getBestDefenderType() {
        UnitType bestDefender = null;
        for (UnitType unitType : getSpecification().getUnitTypeList()) {
            if (unitType.getDefence() > 0
                && (bestDefender == null
                    || bestDefender.getDefence() < unitType.getDefence())
                && !unitType.hasAbility(Ability.NAVAL_UNIT)
                && unitType.isAvailableTo(getOwner())) {
                bestDefender = unitType;
            }
        }
        return bestDefender;
    }


, Instance #
frags: 
(startLine=892 endLine=922 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            for (int i = 0; i < workLocationPlans.size() && food < 2; i++) {
                WorkLocationPlan wlp = workLocationPlans.get(i);
                WorkLocation wl = wlp.getWorkLocation();
                if (wlp.getGoodsType() == foodType
                    && (((ColonyTile) wl).getWorkTile().isLand()
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }
            }

(startLine=924 endLine=958 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            if (food >= 2) {
                for (int i = 0; i < workLocationPlans.size(); i++) {
                    WorkLocationPlan wlp = workLocationPlans.get(i);
                    if (wlp.getGoodsType() != foodType) {
                        Unit bestUnit = null;
                        int bestProduction = 0;
                        Iterator<Unit> unitIterator = units.iterator();
                        while (unitIterator.hasNext()) {
                            Unit unit = unitIterator.next();
                            int production = 0;
                            WorkLocation location = wlp.getWorkLocation();
                            if (location instanceof ColonyTile) {
                                production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                                  wlp.getGoodsType());
                            } else if (location instanceof Building) {
                                production = ((Building) location).getUnitProductivity(unit);
                            }
                            if (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel()) {
                                bestUnit = unit;
                                bestProduction = production;
                            }
                        }
                        if (bestUnit != null
                            && wlp.getWorkLocation().canAdd(bestUnit)) {
                            bestUnit.setLocation(wlp.getWorkLocation());
                            bestUnit.setWorkType(wlp.getGoodsType());
                            units.remove(bestUnit);
                            workLocationPlans.remove(wlp);
                            workerAdded = true;
                            food = colony.getFoodProduction() - colony.getFoodConsumption();
                        }
                    }
                }
            }

(startLine=1133 endLine=1161 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
        for (int i = 0; i < workLocationPlans.size(); i++) {
            WorkLocationPlan wlp = workLocationPlans.get(i);
            WorkLocation wl = wlp.getWorkLocation();
            if (wlp.getGoodsType() == foodType
                && (((ColonyTile) wl).getWorkTile().isLand()
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }
        }

commonMethod: 
(startLine=2082 endLine=2133 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns 1, 0, or -1 to indicate that government would improve,
     * remain the same, or deteriorate if the colony had the given
     * population.
     *
     * @param unitCount The proposed population for the colony.
     * @return 1, 0 or -1.
     */
    public int governmentChange(int unitCount) {
        final int veryBadGovernment = getSpecification()
            .getIntegerOption("model.option.veryBadGovernmentLimit").getValue();
        final int badGovernment = getSpecification()
            .getIntegerOption("model.option.badGovernmentLimit").getValue();

        int rebelPercent = calculateMembership(unitCount);
        int rebelCount = Math.round(0.01f * rebelPercent * unitCount);
        int loyalistCount = unitCount - rebelCount;

        int result = 0;
        if (rebelPercent >= 100) { // There are no tories left.
            if (sonsOfLiberty < 100) {
                result = 1;
            }
        } else if (rebelPercent >= 50) {
            if (sonsOfLiberty >= 100) {
                result = -1;
            } else if (sonsOfLiberty < 50) {
                result = 1;
            }
        } else {
            if (sonsOfLiberty >= 50) {
                result = -1;
            } else { // Now that no bonus is applied, penalties may.
                if (loyalistCount > veryBadGovernment) {
                    if (tories <= veryBadGovernment) {
                        result = -1;
                    }
                } else if (loyalistCount > badGovernment) {
                    if (tories <= badGovernment) {
                        result = -1;
                    } else if (tories > veryBadGovernment) {
                        result = 1;
                    }
                } else {
                    if (tories > badGovernment) {
                        result = 1;
                    }
                }
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=892 endLine=922 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            for (int i = 0; i < workLocationPlans.size() && food < 2; i++) {
                WorkLocationPlan wlp = workLocationPlans.get(i);
                WorkLocation wl = wlp.getWorkLocation();
                if (wlp.getGoodsType() == foodType
                    && (((ColonyTile) wl).getWorkTile().isLand()
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }
            }

(startLine=924 endLine=958 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
            if (food >= 2) {
                for (int i = 0; i < workLocationPlans.size(); i++) {
                    WorkLocationPlan wlp = workLocationPlans.get(i);
                    if (wlp.getGoodsType() != foodType) {
                        Unit bestUnit = null;
                        int bestProduction = 0;
                        Iterator<Unit> unitIterator = units.iterator();
                        while (unitIterator.hasNext()) {
                            Unit unit = unitIterator.next();
                            int production = 0;
                            WorkLocation location = wlp.getWorkLocation();
                            if (location instanceof ColonyTile) {
                                production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                                  wlp.getGoodsType());
                            } else if (location instanceof Building) {
                                production = ((Building) location).getUnitProductivity(unit);
                            }
                            if (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel()) {
                                bestUnit = unit;
                                bestProduction = production;
                            }
                        }
                        if (bestUnit != null
                            && wlp.getWorkLocation().canAdd(bestUnit)) {
                            bestUnit.setLocation(wlp.getWorkLocation());
                            bestUnit.setWorkType(wlp.getGoodsType());
                            units.remove(bestUnit);
                            workLocationPlans.remove(wlp);
                            workerAdded = true;
                            food = colony.getFoodProduction() - colony.getFoodConsumption();
                        }
                    }
                }
            }

(startLine=1133 endLine=1161 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
        for (int i = 0; i < workLocationPlans.size(); i++) {
            WorkLocationPlan wlp = workLocationPlans.get(i);
            WorkLocation wl = wlp.getWorkLocation();
            if (wlp.getGoodsType() == foodType
                && (((ColonyTile) wl).getWorkTile().isLand()
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }
        }

commonMethod: 
(startLine=508 endLine=531 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/AIColony.java)
    private UnitType getNextExpert(boolean onlyFood) {
        // some type should be returned, not null
        UnitType bestType = colony.getSpecification().getDefaultUnitType();
        List<WorkLocationPlan> plans = colonyPlan.getFoodPlans();
        if (!onlyFood) plans.addAll(colonyPlan.getWorkPlans());
        for (WorkLocationPlan plan : plans) {
            WorkLocation location = plan.getWorkLocation();
            if (location instanceof ColonyTile) {
                ColonyTile colonyTile = (ColonyTile) location;
                if (colonyTile.canBeWorked()) {
                    bestType = colony.getSpecification()
                        .getExpertForProducing(plan.getGoodsType());
                    break;
                }
            } else if (location instanceof Building) {
                Building building = (Building) location;
                if (building.canBeWorked()) {
                    bestType = building.getExpertUnitType();
                    break;
                }
            }
        }
        return bestType;
    }


, Instance #
frags: 
(startLine=897 endLine=921 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }

(startLine=1138 endLine=1160 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }

commonMethod: 
(startLine=2439 endLine=2461 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns the net production of the given GoodsType adjusted by
     * the possible consumption of BuildQueues.
     *
     * @param goodsType a <code>GoodsType</code> value
     * @return an <code>int</code> value
     */
    public int getAdjustedNetProductionOf(GoodsType goodsType) {
        int result = productionCache.getNetProductionOf(goodsType);
        for (BuildQueue<?> queue : new BuildQueue<?>[] { buildQueue,
                                                         populationQueue }) {
            ProductionInfo info = productionCache.getProductionInfo(queue);
            if (info != null) {
                for (AbstractGoods goods : info.getConsumption()) {
                    if (goods.getType() == goodsType) {
                        result += goods.getAmount();
                        break;
                    }
                }
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=897 endLine=921 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }

(startLine=1138 endLine=1160 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }

commonMethod: 
(startLine=2106 endLine=2126 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Checks whether this unit can be equipped with the given
     * <code>EquipmentType</code> at the current
     * <code>Location</code>. This is the case if all requirements of
     * the EquipmentType are met.
     *
     * @param equipmentType an <code>EquipmentType</code> value
     * @return whether this unit can be equipped with the given
     *         <code>EquipmentType</code> at the current location.
     */
    public boolean canBeEquippedWith(EquipmentType equipmentType) {
        for (Entry<String, Boolean> entry : equipmentType.getUnitAbilitiesRequired().entrySet()) {
            if (hasAbility(entry.getKey()) != entry.getValue()) {
                return false;
            }
        }
        if (equipment.getCount(equipmentType) >= equipmentType.getMaximumCount()) {
            return false;
        }
        return true;
    }


, Instance #
frags: 
(startLine=897 endLine=921 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }

(startLine=1138 endLine=1160 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }

commonMethod: 
(startLine=589 endLine=610 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns the maximum food consumption of any unit types
     * available to this player.
     *
     * @return an <code>int</code> value
     */
    public int getMaximumFoodConsumption() {
        if (maximumFoodConsumption < 0) {
            for (UnitType unitType : getSpecification().getUnitTypeList()) {
                if (unitType.isAvailableTo(this)) {
                    int foodConsumption = 0;
                    for (GoodsType foodType : getSpecification().getFoodGoodsTypeList()) {
                        foodConsumption += unitType.getConsumptionOf(foodType);
                    }
                    if (foodConsumption > maximumFoodConsumption) {
                        maximumFoodConsumption = foodConsumption;
                    }
                }
            }
        }
        return maximumFoodConsumption;
    }


, Instance #
frags: 
(startLine=897 endLine=921 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }

(startLine=1138 endLine=1160 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }

commonMethod: 
(startLine=139 endLine=156 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/ProductionInfo.java)
    /**
     * Returns true if production equals maximum production.
     *
     * @return a <code>boolean</code> value
     */
    public boolean hasMaximumProduction() {
        if (maximumProduction.isEmpty()) {
            return true;
        }
        for (int index = 0; index < production.size(); index++) {
            if (maximumProduction.size() < index) {
                return true;
            } else if (maximumProduction.get(index).getAmount() > production.get(index).getAmount()) {
                return false;
            }
        }
        return true;
    }


, Instance #
frags: 
(startLine=897 endLine=921 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }

(startLine=1138 endLine=1160 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }

commonMethod: 
(startLine=1154 endLine=1171 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets the best defender type available to this colony.
     *
     * @return The best available defender type.
     */
    public UnitType getBestDefenderType() {
        UnitType bestDefender = null;
        for (UnitType unitType : getSpecification().getUnitTypeList()) {
            if (unitType.getDefence() > 0
                && (bestDefender == null
                    || bestDefender.getDefence() < unitType.getDefence())
                && !unitType.hasAbility(Ability.NAVAL_UNIT)
                && unitType.isAvailableTo(getOwner())) {
                bestDefender = unitType;
            }
        }
        return bestDefender;
    }


, Instance #
frags: 
(startLine=897 endLine=921 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }

(startLine=1138 endLine=1160 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }

commonMethod: 
(startLine=2082 endLine=2133 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns 1, 0, or -1 to indicate that government would improve,
     * remain the same, or deteriorate if the colony had the given
     * population.
     *
     * @param unitCount The proposed population for the colony.
     * @return 1, 0 or -1.
     */
    public int governmentChange(int unitCount) {
        final int veryBadGovernment = getSpecification()
            .getIntegerOption("model.option.veryBadGovernmentLimit").getValue();
        final int badGovernment = getSpecification()
            .getIntegerOption("model.option.badGovernmentLimit").getValue();

        int rebelPercent = calculateMembership(unitCount);
        int rebelCount = Math.round(0.01f * rebelPercent * unitCount);
        int loyalistCount = unitCount - rebelCount;

        int result = 0;
        if (rebelPercent >= 100) { // There are no tories left.
            if (sonsOfLiberty < 100) {
                result = 1;
            }
        } else if (rebelPercent >= 50) {
            if (sonsOfLiberty >= 100) {
                result = -1;
            } else if (sonsOfLiberty < 50) {
                result = 1;
            }
        } else {
            if (sonsOfLiberty >= 50) {
                result = -1;
            } else { // Now that no bonus is applied, penalties may.
                if (loyalistCount > veryBadGovernment) {
                    if (tories <= veryBadGovernment) {
                        result = -1;
                    }
                } else if (loyalistCount > badGovernment) {
                    if (tories <= badGovernment) {
                        result = -1;
                    } else if (tories > veryBadGovernment) {
                        result = 1;
                    }
                } else {
                    if (tories > badGovernment) {
                        result = 1;
                    }
                }
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=897 endLine=921 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                        || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                    Unit bestUnit = null;
                    int bestProduction = 0;
                    Iterator<Unit> unitIterator = units.iterator();
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }
                    if (bestUnit != null
                        && wlp.getWorkLocation().canAdd(bestUnit)) {
                        bestUnit.setLocation(wlp.getWorkLocation());
                        bestUnit.setWorkType(wlp.getGoodsType());
                        units.remove(bestUnit);
                        workLocationPlans.remove(wlp);
                        workerAdded = true;
                        food = colony.getFoodProduction() - colony.getFoodConsumption();
                    }
                }

(startLine=1138 endLine=1160 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    || colony.hasAbility(Ability.PRODUCE_IN_WATER))) {
                Unit bestUnit = null;
                int bestProduction = 0;
                Iterator<Unit> unitIterator = units.iterator();
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }
                if (bestUnit != null && wlp.getWorkLocation().canAdd(bestUnit)) {

                    bestUnit.setLocation(wlp.getWorkLocation());
                    bestUnit.setWorkType(wlp.getGoodsType());
                    units.remove(bestUnit);
                    workLocationPlans.remove(wlp);
                }
            }

commonMethod: 
(startLine=508 endLine=531 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/AIColony.java)
    private UnitType getNextExpert(boolean onlyFood) {
        // some type should be returned, not null
        UnitType bestType = colony.getSpecification().getDefaultUnitType();
        List<WorkLocationPlan> plans = colonyPlan.getFoodPlans();
        if (!onlyFood) plans.addAll(colonyPlan.getWorkPlans());
        for (WorkLocationPlan plan : plans) {
            WorkLocation location = plan.getWorkLocation();
            if (location instanceof ColonyTile) {
                ColonyTile colonyTile = (ColonyTile) location;
                if (colonyTile.canBeWorked()) {
                    bestType = colony.getSpecification()
                        .getExpertForProducing(plan.getGoodsType());
                    break;
                }
            } else if (location instanceof Building) {
                Building building = (Building) location;
                if (building.canBeWorked()) {
                    bestType = building.getExpertUnitType();
                    break;
                }
            }
        }
        return bestType;
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=2439 endLine=2461 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns the net production of the given GoodsType adjusted by
     * the possible consumption of BuildQueues.
     *
     * @param goodsType a <code>GoodsType</code> value
     * @return an <code>int</code> value
     */
    public int getAdjustedNetProductionOf(GoodsType goodsType) {
        int result = productionCache.getNetProductionOf(goodsType);
        for (BuildQueue<?> queue : new BuildQueue<?>[] { buildQueue,
                                                         populationQueue }) {
            ProductionInfo info = productionCache.getProductionInfo(queue);
            if (info != null) {
                for (AbstractGoods goods : info.getConsumption()) {
                    if (goods.getType() == goodsType) {
                        result += goods.getAmount();
                        break;
                    }
                }
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=2106 endLine=2126 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Checks whether this unit can be equipped with the given
     * <code>EquipmentType</code> at the current
     * <code>Location</code>. This is the case if all requirements of
     * the EquipmentType are met.
     *
     * @param equipmentType an <code>EquipmentType</code> value
     * @return whether this unit can be equipped with the given
     *         <code>EquipmentType</code> at the current location.
     */
    public boolean canBeEquippedWith(EquipmentType equipmentType) {
        for (Entry<String, Boolean> entry : equipmentType.getUnitAbilitiesRequired().entrySet()) {
            if (hasAbility(entry.getKey()) != entry.getValue()) {
                return false;
            }
        }
        if (equipment.getCount(equipmentType) >= equipmentType.getMaximumCount()) {
            return false;
        }
        return true;
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=589 endLine=610 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Player.java)
    /**
     * Returns the maximum food consumption of any unit types
     * available to this player.
     *
     * @return an <code>int</code> value
     */
    public int getMaximumFoodConsumption() {
        if (maximumFoodConsumption < 0) {
            for (UnitType unitType : getSpecification().getUnitTypeList()) {
                if (unitType.isAvailableTo(this)) {
                    int foodConsumption = 0;
                    for (GoodsType foodType : getSpecification().getFoodGoodsTypeList()) {
                        foodConsumption += unitType.getConsumptionOf(foodType);
                    }
                    if (foodConsumption > maximumFoodConsumption) {
                        maximumFoodConsumption = foodConsumption;
                    }
                }
            }
        }
        return maximumFoodConsumption;
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=139 endLine=156 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/ProductionInfo.java)
    /**
     * Returns true if production equals maximum production.
     *
     * @return a <code>boolean</code> value
     */
    public boolean hasMaximumProduction() {
        if (maximumProduction.isEmpty()) {
            return true;
        }
        for (int index = 0; index < production.size(); index++) {
            if (maximumProduction.size() < index) {
                return true;
            } else if (maximumProduction.get(index).getAmount() > production.get(index).getAmount()) {
                return false;
            }
        }
        return true;
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=1154 endLine=1171 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets the best defender type available to this colony.
     *
     * @return The best available defender type.
     */
    public UnitType getBestDefenderType() {
        UnitType bestDefender = null;
        for (UnitType unitType : getSpecification().getUnitTypeList()) {
            if (unitType.getDefence() > 0
                && (bestDefender == null
                    || bestDefender.getDefence() < unitType.getDefence())
                && !unitType.hasAbility(Ability.NAVAL_UNIT)
                && unitType.isAvailableTo(getOwner())) {
                bestDefender = unitType;
            }
        }
        return bestDefender;
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=560 endLine=568 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/AIColony.java)
    /**
     * Is the colony badly defended?
     * TODO: check if this heuristic makes sense.
     *
     * @return True if the colony needs more defenders.
     */
    public boolean isBadlyDefended() {
        return colony.getTotalDefencePower() < 1.5f * colony.getUnitCount();
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=2082 endLine=2133 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns 1, 0, or -1 to indicate that government would improve,
     * remain the same, or deteriorate if the colony had the given
     * population.
     *
     * @param unitCount The proposed population for the colony.
     * @return 1, 0 or -1.
     */
    public int governmentChange(int unitCount) {
        final int veryBadGovernment = getSpecification()
            .getIntegerOption("model.option.veryBadGovernmentLimit").getValue();
        final int badGovernment = getSpecification()
            .getIntegerOption("model.option.badGovernmentLimit").getValue();

        int rebelPercent = calculateMembership(unitCount);
        int rebelCount = Math.round(0.01f * rebelPercent * unitCount);
        int loyalistCount = unitCount - rebelCount;

        int result = 0;
        if (rebelPercent >= 100) { // There are no tories left.
            if (sonsOfLiberty < 100) {
                result = 1;
            }
        } else if (rebelPercent >= 50) {
            if (sonsOfLiberty >= 100) {
                result = -1;
            } else if (sonsOfLiberty < 50) {
                result = 1;
            }
        } else {
            if (sonsOfLiberty >= 50) {
                result = -1;
            } else { // Now that no bonus is applied, penalties may.
                if (loyalistCount > veryBadGovernment) {
                    if (tories <= veryBadGovernment) {
                        result = -1;
                    }
                } else if (loyalistCount > badGovernment) {
                    if (tories <= badGovernment) {
                        result = -1;
                    } else if (tories > veryBadGovernment) {
                        result = 1;
                    }
                } else {
                    if (tories > badGovernment) {
                        result = 1;
                    }
                }
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=508 endLine=531 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/AIColony.java)
    private UnitType getNextExpert(boolean onlyFood) {
        // some type should be returned, not null
        UnitType bestType = colony.getSpecification().getDefaultUnitType();
        List<WorkLocationPlan> plans = colonyPlan.getFoodPlans();
        if (!onlyFood) plans.addAll(colonyPlan.getWorkPlans());
        for (WorkLocationPlan plan : plans) {
            WorkLocation location = plan.getWorkLocation();
            if (location instanceof ColonyTile) {
                ColonyTile colonyTile = (ColonyTile) location;
                if (colonyTile.canBeWorked()) {
                    bestType = colony.getSpecification()
                        .getExpertForProducing(plan.getGoodsType());
                    break;
                }
            } else if (location instanceof Building) {
                Building building = (Building) location;
                if (building.canBeWorked()) {
                    bestType = building.getExpertUnitType();
                    break;
                }
            }
        }
        return bestType;
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=66 endLine=73 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/BuildableType.java)
    /**
     * Get the <code>GoodsRequired</code> value.
     *
     * @return a <code>List<AbstractGoods></code> value
     */
    public final List<AbstractGoods> getGoodsRequired() {
        return goodsRequired;
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=975 endLine=977 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Specification.java)
    public List<EquipmentType> getEquipmentTypeList() {
        return equipmentTypes;
    }


, Instance #
frags: 
(startLine=901 endLine=911 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                    while (unitIterator.hasNext()) {
                        Unit unit = unitIterator.next();
                        int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                              foodType);
                        if (production > 1
                            && (bestUnit == null || production > bestProduction || production == bestProduction
                                && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                            bestUnit = unit;
                            bestProduction = production;
                        }
                    }

(startLine=1142 endLine=1152 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/AIColony.java)
                while (unitIterator.hasNext()) {
                    Unit unit = unitIterator.next();
                    int production = ((ColonyTile) wlp.getWorkLocation()).getProductionOf(unit,
                                                                                          foodType);
                    if (production > 1
                        && (bestUnit == null || production > bestProduction || production == bestProduction
                            && unit.getSkillLevel() < bestUnit.getSkillLevel())) {
                        bestUnit = unit;
                        bestProduction = production;
                    }
                }

commonMethod: 
(startLine=2463 endLine=2471 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns the ProductionInfo for the given Object.
     *
     * @param object an <code>Object</code> value
     * @return a <code>ProductionInfo</code> value
     */
    public ProductionInfo getProductionInfo(Object object) {
        return productionCache.getProductionInfo(object);
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=504 endLine=516 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Return whether this colony is connected to the HighSeas, or
     * not. A colony next to a lake would not be landlocked, for
     * example, but it might well be disconnected from Europe.
     *
     * @return a <code>boolean</code> value
     */
    public boolean isConnected() {
        for (Tile t : getTile().getSurroundingTiles(1)) {
            if (t.isConnected()) return true;
        }
        return false;
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=243 endLine=258 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Gets the production for a work location of a specified goods type,
     * using the default unit type to avoid considering which unit is
     * to be allocated.  This is thus an approximation to what will
     * finally occur when units are assigned, but it serves for planning
     * purposes.
     *
     * @param wl The <code>WorkLocation</code> where production is to occur.
     * @param goodsType The <code>GoodsType</code> to produce.
     * @return The work location production.
     */
    private int getWorkLocationProduction(WorkLocation wl,
                                          GoodsType goodsType) {
        return wl.getPotentialProduction(spec().getDefaultUnitType(),
                                         goodsType);
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=1922 endLine=1924 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Player.java)
    public List<Unit> getUnits() {
        return new ArrayList<Unit>(units.values());
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=1548 endLine=1578 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Tile.java)
     /**
      * Returns all the tiles surrounding this tile within the
      * given range. This tile is not included.
      *
      * @param range
      *            How far away do we need to go starting from this.
      * @return The tiles surrounding this tile.
      */
     public Iterable<Tile> getSurroundingTiles(final int range) {
         return new Iterable<Tile>() {
             public Iterator<Tile> iterator() {
                 final Iterator<Position> m = (range == 1)
                     ? getMap().getAdjacentIterator(getPosition())
                     : getMap().getCircleIterator(getPosition(), true, range);

                 return new Iterator<Tile>() {
                     public boolean hasNext() {
                         return m.hasNext();
                     }

                     public Tile next() {
                         return getMap().getTile(m.next());
                     }

                     public void remove() {
                         m.remove();
                     }
                 };
             }
         };
     }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=236 endLine=245 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/AIMain.java)
    /**
     * Gets the AI colony corresponding to a given colony.
     *
     * @param colony The <code>Colony</code> to look up.
     * @return The corresponding AI colony, or null if not found.
     */
    public AIColony getAIColony(Colony colony) {
        AIObject aio = getAIObject(colony.getId());
        return (aio instanceof AIColony) ? (AIColony) aio : null;
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=2350 endLine=2359 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns true if the Colony, or its owner has the ability
     * identified by <code>id</code>.
     *
     * @param id a <code>String</code> value
     * @return a <code>boolean</code> value
     */
    public boolean hasAbility(String id) {
        return hasAbility(id, null);
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=724 endLine=739 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Player.java)
    /**
     * Gets a fresh list of all colonies this player owns.
     *
     * @return A fresh list of the colonies this player owns.
     */
    public List<Colony> getColonies() {
        ArrayList<Colony> colonies = new ArrayList<Colony>();
        for (Settlement s : settlements) {
            if (s instanceof Colony) {
                colonies.add((Colony) s);
            } else {
                throw new RuntimeException("getColonies can only be called for players whose settlements are colonies.");
            }
        }
        return colonies;
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=958 endLine=1042 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Add the other goods types to the production list.  When this is
     * called the new world goods production is already present on the
     * produce list.  Ignores food which is treated separately.
     */
    private void updateProductionList(final Map<GoodsType, Map<WorkLocation, Integer>> production) {
        final Comparator<GoodsType> productionComparator
            = new Comparator<GoodsType>() {
                public int compare(GoodsType g1, GoodsType g2) {
                    int p1 = 0;
                    for (Integer i : production.get(g1).values()) {
                        p1 += i.intValue();
                    }
                    int p2 = 0;
                    for (Integer i : production.get(g2).values()) {
                        p2 += i.intValue();
                    }
                    return p2 - p1;
                }
            };
        List<GoodsType> toAdd = new ArrayList<GoodsType>();
        
        // If we need liberty put it before the new world production.
        if (colony.getSoL() < 100) {
            for (GoodsType g : libertyGoodsTypes) {
                if (production.containsKey(g)) toAdd.add(g);
            }
            Collections.sort(toAdd, productionComparator);
            produce.addAll(0, toAdd);
            toAdd.clear();
        }

        // Always add raw/building materials first.
        Collections.sort(rawBuildingGoodsTypes, productionComparator);
        for (GoodsType g : buildingGoodsTypes) {
            if (production.containsKey(g)) {
                GoodsType raw = g.getRawMaterial();
                if (colony.getGoodsCount(raw) >= GoodsContainer.CARGO_SIZE/2
                    || production.containsKey(raw)) {
                    toAdd.add(g);
                }
            }
        }
        Collections.sort(toAdd, new Comparator<GoodsType>() {
                public int compare(GoodsType g1, GoodsType g2) {
                    int i1 = rawBuildingGoodsTypes.indexOf(g1.getRawMaterial());
                    int i2 = rawBuildingGoodsTypes.indexOf(g2.getRawMaterial());
                    return i1 - i2;
                }
            });
        for (int i = toAdd.size()-1; i >= 0; i--) {
            GoodsType make = toAdd.get(i);
            GoodsType raw = make.getRawMaterial();
            if (production.containsKey(raw)) {
                if (colony.getGoodsCount(raw) >= GoodsContainer.CARGO_SIZE/2) {
                    produce.add(raw); // Add at the end, enough in stock
                    produce.add(0, make);
                } else {
                    produce.add(0, make);
                    produce.add(0, raw);
                }
            } else {
                produce.add(0, make);
            }
        }
        toAdd.clear();

        // Military goods after lucrative production.
        for (GoodsType g : militaryGoodsTypes) {
            if (production.containsKey(g)) toAdd.add(g);
        }
        Collections.sort(toAdd, productionComparator);
        produce.addAll(toAdd);
        toAdd.clear();

        // Immigration last.
        if (colony.getOwner().getEurope() != null) {
            for (GoodsType g : immigrationGoodsTypes) {
                if (production.containsKey(g)) toAdd.add(g);
            }
            Collections.sort(toAdd, productionComparator);
            produce.addAll(toAdd);
            toAdd.clear();
        }
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=675 endLine=697 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Adds or improves the priority of a buildable in a list.
     *
     * @param type The <code>BuildableType</code> to use.
     * @param weight The relative weight of this class of buildable with
     *     respect to other buildable classes.
     * @param support The support for this buildable within its class.
     * @return True if this type was prioritized.
     */
    private boolean prioritize(BuildableType type,
                               double weight, double support) {
        BuildPlan bp = findBuildPlan(type);
        if (bp == null) {
            buildPlans.add(new BuildPlan(type, weight, support));
            return true;
        }
        if (bp.weight * bp.support < weight * support) {
            bp.weight = weight;
            bp.support = support;
            return true;
        }
        return false;
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=662 endLine=673 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Finds a build plan for this type.
     *
     * @param type The <code>BuildableType</code> to search for.
     * @return A <code>BuildPlan</code> with this type, or null if not found.
     */
    private BuildPlan findBuildPlan(BuildableType type) {
        for (BuildPlan bp : buildPlans) {
            if (bp.type == type) return bp;
        }
        return null;
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=1841 endLine=1849 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns true if this Colony can build the given BuildableType.
     *
     * @param buildableType a <code>BuildableType</code> value
     * @return a <code>boolean</code> value
     */
    public boolean canBuild(BuildableType buildableType) {
        return (getNoBuildReason(buildableType) == NoBuildReason.NONE);
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=141 endLine=143 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/FreeColGameObjectType.java)
    public Set<Modifier> getModifierSet(String id) {
        return featureContainer.getModifierSet(id);
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=54 endLine=62 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/FeatureContainer.java)
    /**
     * Returns a Set of Abilities with the given ID.
     *
     * @param id a <code>String</code> value
     * @return a <code>Set<Feature></code> value
     */
    public Set<Ability> getAbilitySet(String id) {
        return getAbilitySet(id, null, null);
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=125 endLine=127 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/FreeColGameObjectType.java)
    public boolean hasAbility(String id) {
        return featureContainer.hasAbility(id);
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=621 endLine=628 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Tile.java)
    /**
     * Returns <code>true</code> if this Tile is a land Tile, 'false' otherwise.
     *
     * @return <code>true</code> if this Tile is a land Tile, 'false' otherwise.
     */
    public boolean isLand() {
        return type != null && !type.isWater();
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=1114 endLine=1122 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Player.java)
    /**
     * Checks if a tile can be claimed for use by a settlement.
     *
     * @param tile The <code>Tile</code> to try to claim.
     * @return True if the tile can be claimed to found a settlement.
     */
    public boolean canClaimForSettlement(Tile tile) {
        return canClaimForSettlementReason(tile) == NoClaimReason.NONE;
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=260 endLine=268 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/GoodsLocation.java)
    /**
     * Gets the amount of one type of Goods at this Settlement.
     *
     * @param type The type of goods to look for.
     * @return The amount of this type of Goods at this Location.
     */
    public int getGoodsCount(GoodsType type) {
        return goodsContainer.getGoodsCount(type);
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=699 endLine=728 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Given a buildable that improves production of a goods type,
     * prioritize it.
     *
     * @param type The <code>BuildableType</code> to consider.
     * @param goodsType The <code>GoodsType</code> improved by the buildable.
     * @return True if this type was prioritized.
     */
    private boolean prioritizeProduction(BuildableType type,
                                         GoodsType goodsType) {
        boolean ret = false;
        if (goodsType.isMilitaryGoods()) {
            ret = prioritize(type, MILITARY_WEIGHT,
                1.0/*FIXME: amount present wrt amount to equip*/);
        } else if (goodsType.isBuildingMaterial()) {
            ret = prioritize(type, BUILDING_WEIGHT,
                1.0/*FIXME: need for this type*/);
        } else if (goodsType.isLibertyType()) {
            ret = prioritize(type, LIBERTY_WEIGHT,
                (colony.getSoL() >= 100) ? 0.01 : 1.0);
        } else if (goodsType.isImmigrationType()) {
            ret = prioritize(type, IMMIGRATION_WEIGHT,
                1.0/*FIXME: Brewster?*/);
        } else if (produce.contains(goodsType)) {
            double f = 0.1 * colony.getProductionOf(goodsType.getRawMaterial());
            ret = prioritize(type, PRODUCTION_WEIGHT,
                f/*FIXME: improvement?*/);
        }
        return ret;
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=560 endLine=568 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/AIColony.java)
    /**
     * Is the colony badly defended?
     * TODO: check if this heuristic makes sense.
     *
     * @return True if the colony needs more defenders.
     */
    public boolean isBadlyDefended() {
        return colony.getTotalDefencePower() < 1.5f * colony.getUnitCount();
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=925 endLine=939 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Tile.java)
    /**
     * Returns true if this tile has at least one adjacent land tile (if water),
     * or at least one adjacent water tile (if land).
     *
     * @return a <code>boolean</code> value
     */
    public boolean isCoast() {
        for (Direction direction : Direction.values()) {
            Tile otherTile = getNeighbourOrNull(direction);
            if (otherTile != null && otherTile.isLand()!=this.isLand()) {
                return true;
            }
        }
        return false;
    }


, Instance #
frags: 
(startLine=656 endLine=670 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && secondaryRawMaterial.isNewWorldGoodsType()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

(startLine=673 endLine=687 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
        if (needsFood()) {
            Iterator<WorkLocationPlan> wlpIterator2 = workLocationPlans.iterator();
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }
        }

commonMethod: 
(startLine=766 endLine=805 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Returns true if the Unit, or its owner has the ability
     * identified by <code>id</code>.
     *
     * @param id a <code>String</code> value
     * @return a <code>boolean</code> value
     */
    public boolean hasAbility(String id) {
        Set<Ability> result = new HashSet<Ability>();
        // UnitType abilities always apply
        result.addAll(unitType.getFeatureContainer().getAbilitySet(id));
        // the player's abilities may not apply
        result.addAll(getOwner().getFeatureContainer()
                      .getAbilitySet(id, unitType, getGame().getTurn()));
        // EquipmentType abilities always apply
        for (EquipmentType equipmentType : equipment.keySet()) {
            result.addAll(equipmentType.getFeatureContainer().getAbilitySet(id));
            // player abilities may also apply to equipment (missionary)
            result.addAll(getOwner().getFeatureContainer()
                          .getAbilitySet(id, equipmentType, getGame().getTurn()));
        }
        // Location abilities may apply. TODO: extend this to all
        // locations? May simplify code. Units are also Locations,
        // however, which complicates the issue. We do not want Units
        // aboard other Units to share the abilities of the carriers.
        if (getColony() != null) {
            result.addAll(getColony().getFeatureContainer()
                          .getAbilitySet(id, unitType, getGame().getTurn()));
        } else if (isInEurope()) {
            // TODO: the following check should not be necessary
            // Presumably, it will become redundant as soon as
            // Europe abilities are in the spec
            if (getOwner().getEurope() != null
                && getOwner().getEurope().getFeatureContainer() != null) {
                result.addAll(getOwner().getEurope().getFeatureContainer()
                              .getAbilitySet(id, unitType, getGame().getTurn()));
            }
        }
        return FeatureContainer.hasAbility(result);
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=758 endLine=760 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Specification.java)
    public List<GoodsType> getGoodsTypeList() {
        return goodsTypeList;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=234 endLine=241 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Gets the specification.
     *
     * @return The specification.
     */
    private Specification spec() {
        return aiMain.getGame().getSpecification();
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=504 endLine=516 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Return whether this colony is connected to the HighSeas, or
     * not. A colony next to a lake would not be landlocked, for
     * example, but it might well be disconnected from Europe.
     *
     * @return a <code>boolean</code> value
     */
    public boolean isConnected() {
        for (Tile t : getTile().getSurroundingTiles(1)) {
            if (t.isConnected()) return true;
        }
        return false;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=730 endLine=732 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Specification.java)
    public List<BuildingType> getBuildingTypeList() {
        return buildingTypeList;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=243 endLine=258 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Gets the production for a work location of a specified goods type,
     * using the default unit type to avoid considering which unit is
     * to be allocated.  This is thus an approximation to what will
     * finally occur when units are assigned, but it serves for planning
     * purposes.
     *
     * @param wl The <code>WorkLocation</code> where production is to occur.
     * @param goodsType The <code>GoodsType</code> to produce.
     * @return The work location production.
     */
    private int getWorkLocationProduction(WorkLocation wl,
                                          GoodsType goodsType) {
        return wl.getPotentialProduction(spec().getDefaultUnitType(),
                                         goodsType);
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=1922 endLine=1924 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Player.java)
    public List<Unit> getUnits() {
        return new ArrayList<Unit>(units.values());
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=1548 endLine=1578 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Tile.java)
     /**
      * Returns all the tiles surrounding this tile within the
      * given range. This tile is not included.
      *
      * @param range
      *            How far away do we need to go starting from this.
      * @return The tiles surrounding this tile.
      */
     public Iterable<Tile> getSurroundingTiles(final int range) {
         return new Iterable<Tile>() {
             public Iterator<Tile> iterator() {
                 final Iterator<Position> m = (range == 1)
                     ? getMap().getAdjacentIterator(getPosition())
                     : getMap().getCircleIterator(getPosition(), true, range);

                 return new Iterator<Tile>() {
                     public boolean hasNext() {
                         return m.hasNext();
                     }

                     public Tile next() {
                         return getMap().getTile(m.next());
                     }

                     public void remove() {
                         m.remove();
                     }
                 };
             }
         };
     }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=236 endLine=245 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/AIMain.java)
    /**
     * Gets the AI colony corresponding to a given colony.
     *
     * @param colony The <code>Colony</code> to look up.
     * @return The corresponding AI colony, or null if not found.
     */
    public AIColony getAIColony(Colony colony) {
        AIObject aio = getAIObject(colony.getId());
        return (aio instanceof AIColony) ? (AIColony) aio : null;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=2350 endLine=2359 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns true if the Colony, or its owner has the ability
     * identified by <code>id</code>.
     *
     * @param id a <code>String</code> value
     * @return a <code>boolean</code> value
     */
    public boolean hasAbility(String id) {
        return hasAbility(id, null);
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=724 endLine=739 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Player.java)
    /**
     * Gets a fresh list of all colonies this player owns.
     *
     * @return A fresh list of the colonies this player owns.
     */
    public List<Colony> getColonies() {
        ArrayList<Colony> colonies = new ArrayList<Colony>();
        for (Settlement s : settlements) {
            if (s instanceof Colony) {
                colonies.add((Colony) s);
            } else {
                throw new RuntimeException("getColonies can only be called for players whose settlements are colonies.");
            }
        }
        return colonies;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=958 endLine=1042 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Add the other goods types to the production list.  When this is
     * called the new world goods production is already present on the
     * produce list.  Ignores food which is treated separately.
     */
    private void updateProductionList(final Map<GoodsType, Map<WorkLocation, Integer>> production) {
        final Comparator<GoodsType> productionComparator
            = new Comparator<GoodsType>() {
                public int compare(GoodsType g1, GoodsType g2) {
                    int p1 = 0;
                    for (Integer i : production.get(g1).values()) {
                        p1 += i.intValue();
                    }
                    int p2 = 0;
                    for (Integer i : production.get(g2).values()) {
                        p2 += i.intValue();
                    }
                    return p2 - p1;
                }
            };
        List<GoodsType> toAdd = new ArrayList<GoodsType>();
        
        // If we need liberty put it before the new world production.
        if (colony.getSoL() < 100) {
            for (GoodsType g : libertyGoodsTypes) {
                if (production.containsKey(g)) toAdd.add(g);
            }
            Collections.sort(toAdd, productionComparator);
            produce.addAll(0, toAdd);
            toAdd.clear();
        }

        // Always add raw/building materials first.
        Collections.sort(rawBuildingGoodsTypes, productionComparator);
        for (GoodsType g : buildingGoodsTypes) {
            if (production.containsKey(g)) {
                GoodsType raw = g.getRawMaterial();
                if (colony.getGoodsCount(raw) >= GoodsContainer.CARGO_SIZE/2
                    || production.containsKey(raw)) {
                    toAdd.add(g);
                }
            }
        }
        Collections.sort(toAdd, new Comparator<GoodsType>() {
                public int compare(GoodsType g1, GoodsType g2) {
                    int i1 = rawBuildingGoodsTypes.indexOf(g1.getRawMaterial());
                    int i2 = rawBuildingGoodsTypes.indexOf(g2.getRawMaterial());
                    return i1 - i2;
                }
            });
        for (int i = toAdd.size()-1; i >= 0; i--) {
            GoodsType make = toAdd.get(i);
            GoodsType raw = make.getRawMaterial();
            if (production.containsKey(raw)) {
                if (colony.getGoodsCount(raw) >= GoodsContainer.CARGO_SIZE/2) {
                    produce.add(raw); // Add at the end, enough in stock
                    produce.add(0, make);
                } else {
                    produce.add(0, make);
                    produce.add(0, raw);
                }
            } else {
                produce.add(0, make);
            }
        }
        toAdd.clear();

        // Military goods after lucrative production.
        for (GoodsType g : militaryGoodsTypes) {
            if (production.containsKey(g)) toAdd.add(g);
        }
        Collections.sort(toAdd, productionComparator);
        produce.addAll(toAdd);
        toAdd.clear();

        // Immigration last.
        if (colony.getOwner().getEurope() != null) {
            for (GoodsType g : immigrationGoodsTypes) {
                if (production.containsKey(g)) toAdd.add(g);
            }
            Collections.sort(toAdd, productionComparator);
            produce.addAll(toAdd);
            toAdd.clear();
        }
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=675 endLine=697 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Adds or improves the priority of a buildable in a list.
     *
     * @param type The <code>BuildableType</code> to use.
     * @param weight The relative weight of this class of buildable with
     *     respect to other buildable classes.
     * @param support The support for this buildable within its class.
     * @return True if this type was prioritized.
     */
    private boolean prioritize(BuildableType type,
                               double weight, double support) {
        BuildPlan bp = findBuildPlan(type);
        if (bp == null) {
            buildPlans.add(new BuildPlan(type, weight, support));
            return true;
        }
        if (bp.weight * bp.support < weight * support) {
            bp.weight = weight;
            bp.support = support;
            return true;
        }
        return false;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=662 endLine=673 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Finds a build plan for this type.
     *
     * @param type The <code>BuildableType</code> to search for.
     * @return A <code>BuildPlan</code> with this type, or null if not found.
     */
    private BuildPlan findBuildPlan(BuildableType type) {
        for (BuildPlan bp : buildPlans) {
            if (bp.type == type) return bp;
        }
        return null;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=1841 endLine=1849 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Returns true if this Colony can build the given BuildableType.
     *
     * @param buildableType a <code>BuildableType</code> value
     * @return a <code>boolean</code> value
     */
    public boolean canBuild(BuildableType buildableType) {
        return (getNoBuildReason(buildableType) == NoBuildReason.NONE);
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=66 endLine=73 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/BuildableType.java)
    /**
     * Get the <code>GoodsRequired</code> value.
     *
     * @return a <code>List<AbstractGoods></code> value
     */
    public final List<AbstractGoods> getGoodsRequired() {
        return goodsRequired;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=141 endLine=143 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/FreeColGameObjectType.java)
    public Set<Modifier> getModifierSet(String id) {
        return featureContainer.getModifierSet(id);
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=54 endLine=62 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/FeatureContainer.java)
    /**
     * Returns a Set of Abilities with the given ID.
     *
     * @param id a <code>String</code> value
     * @return a <code>Set<Feature></code> value
     */
    public Set<Ability> getAbilitySet(String id) {
        return getAbilitySet(id, null, null);
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=125 endLine=127 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/FreeColGameObjectType.java)
    public boolean hasAbility(String id) {
        return featureContainer.hasAbility(id);
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=621 endLine=628 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Tile.java)
    /**
     * Returns <code>true</code> if this Tile is a land Tile, 'false' otherwise.
     *
     * @return <code>true</code> if this Tile is a land Tile, 'false' otherwise.
     */
    public boolean isLand() {
        return type != null && !type.isWater();
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=860 endLine=862 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Specification.java)
    public List<UnitType> getUnitTypeList() {
        return unitTypeList;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=1114 endLine=1122 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Player.java)
    /**
     * Checks if a tile can be claimed for use by a settlement.
     *
     * @param tile The <code>Tile</code> to try to claim.
     * @return True if the tile can be claimed to found a settlement.
     */
    public boolean canClaimForSettlement(Tile tile) {
        return canClaimForSettlementReason(tile) == NoClaimReason.NONE;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=260 endLine=268 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/GoodsLocation.java)
    /**
     * Gets the amount of one type of Goods at this Settlement.
     *
     * @param type The type of goods to look for.
     * @return The amount of this type of Goods at this Location.
     */
    public int getGoodsCount(GoodsType type) {
        return goodsContainer.getGoodsCount(type);
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=85 endLine=92 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Feature.java)
    /**
     * Get the <code>Scopes</code> value.
     *
     * @return a <code>List<Scope></code> value
     */
    public final List<Scope> getScopes() {
        return scopes;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=699 endLine=728 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Given a buildable that improves production of a goods type,
     * prioritize it.
     *
     * @param type The <code>BuildableType</code> to consider.
     * @param goodsType The <code>GoodsType</code> improved by the buildable.
     * @return True if this type was prioritized.
     */
    private boolean prioritizeProduction(BuildableType type,
                                         GoodsType goodsType) {
        boolean ret = false;
        if (goodsType.isMilitaryGoods()) {
            ret = prioritize(type, MILITARY_WEIGHT,
                1.0/*FIXME: amount present wrt amount to equip*/);
        } else if (goodsType.isBuildingMaterial()) {
            ret = prioritize(type, BUILDING_WEIGHT,
                1.0/*FIXME: need for this type*/);
        } else if (goodsType.isLibertyType()) {
            ret = prioritize(type, LIBERTY_WEIGHT,
                (colony.getSoL() >= 100) ? 0.01 : 1.0);
        } else if (goodsType.isImmigrationType()) {
            ret = prioritize(type, IMMIGRATION_WEIGHT,
                1.0/*FIXME: Brewster?*/);
        } else if (produce.contains(goodsType)) {
            double f = 0.1 * colony.getProductionOf(goodsType.getRawMaterial());
            ret = prioritize(type, PRODUCTION_WEIGHT,
                f/*FIXME: improvement?*/);
        }
        return ret;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=560 endLine=568 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/AIColony.java)
    /**
     * Is the colony badly defended?
     * TODO: check if this heuristic makes sense.
     *
     * @return True if the colony needs more defenders.
     */
    public boolean isBadlyDefended() {
        return colony.getTotalDefencePower() < 1.5f * colony.getUnitCount();
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=925 endLine=939 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Tile.java)
    /**
     * Returns true if this tile has at least one adjacent land tile (if water),
     * or at least one adjacent water tile (if land).
     *
     * @return a <code>boolean</code> value
     */
    public boolean isCoast() {
        for (Direction direction : Direction.values()) {
            Tile otherTile = getNeighbourOrNull(direction);
            if (otherTile != null && otherTile.isLand()!=this.isLand()) {
                return true;
            }
        }
        return false;
    }


, Instance #
frags: 
(startLine=658 endLine=669 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == secondaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

(startLine=675 endLine=686 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
            while (wlpIterator2.hasNext() && needsFood()) {
                WorkLocationPlan wlp = wlpIterator2.next();
                if (wlp.getWorkLocation() instanceof ColonyTile && wlp.getGoodsType() == primaryRawMaterial) {
                    Tile t = ((ColonyTile) wlp.getWorkLocation()).getWorkTile();
                    // TODO: find out about unit working here, if any (?)
                    if (t.getMaximumPotential(food, null) > 2) {
                        wlp.setGoodsType(food);
                    } else {
                        wlpIterator2.remove();
                    }
                }
            }

commonMethod: 
(startLine=766 endLine=805 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Returns true if the Unit, or its owner has the ability
     * identified by <code>id</code>.
     *
     * @param id a <code>String</code> value
     * @return a <code>boolean</code> value
     */
    public boolean hasAbility(String id) {
        Set<Ability> result = new HashSet<Ability>();
        // UnitType abilities always apply
        result.addAll(unitType.getFeatureContainer().getAbilitySet(id));
        // the player's abilities may not apply
        result.addAll(getOwner().getFeatureContainer()
                      .getAbilitySet(id, unitType, getGame().getTurn()));
        // EquipmentType abilities always apply
        for (EquipmentType equipmentType : equipment.keySet()) {
            result.addAll(equipmentType.getFeatureContainer().getAbilitySet(id));
            // player abilities may also apply to equipment (missionary)
            result.addAll(getOwner().getFeatureContainer()
                          .getAbilitySet(id, equipmentType, getGame().getTurn()));
        }
        // Location abilities may apply. TODO: extend this to all
        // locations? May simplify code. Units are also Locations,
        // however, which complicates the issue. We do not want Units
        // aboard other Units to share the abilities of the carriers.
        if (getColony() != null) {
            result.addAll(getColony().getFeatureContainer()
                          .getAbilitySet(id, unitType, getGame().getTurn()));
        } else if (isInEurope()) {
            // TODO: the following check should not be necessary
            // Presumably, it will become redundant as soon as
            // Europe abilities are in the spec
            if (getOwner().getEurope() != null
                && getOwner().getEurope().getFeatureContainer() != null) {
                result.addAll(getOwner().getEurope().getFeatureContainer()
                              .getAbilitySet(id, unitType, getGame().getTurn()));
            }
        }
        return FeatureContainer.hasAbility(result);
    }


, Instance #
frags: 
(startLine=754 endLine=766 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                secondaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = secondaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    secondaryWorkers++;
                    if (secondaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

(startLine=772 endLine=784 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && primaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = primaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    primaryWorkers++;
                    if (primaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

commonMethod: 
(startLine=504 endLine=516 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Return whether this colony is connected to the HighSeas, or
     * not. A colony next to a lake would not be landlocked, for
     * example, but it might well be disconnected from Europe.
     *
     * @return a <code>boolean</code> value
     */
    public boolean isConnected() {
        for (Tile t : getTile().getSurroundingTiles(1)) {
            if (t.isConnected()) return true;
        }
        return false;
    }


, Instance #
frags: 
(startLine=754 endLine=766 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                secondaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = secondaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    secondaryWorkers++;
                    if (secondaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

(startLine=772 endLine=784 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && primaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = primaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    primaryWorkers++;
                    if (primaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

commonMethod: 
(startLine=1548 endLine=1578 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Tile.java)
     /**
      * Returns all the tiles surrounding this tile within the
      * given range. This tile is not included.
      *
      * @param range
      *            How far away do we need to go starting from this.
      * @return The tiles surrounding this tile.
      */
     public Iterable<Tile> getSurroundingTiles(final int range) {
         return new Iterable<Tile>() {
             public Iterator<Tile> iterator() {
                 final Iterator<Position> m = (range == 1)
                     ? getMap().getAdjacentIterator(getPosition())
                     : getMap().getCircleIterator(getPosition(), true, range);

                 return new Iterator<Tile>() {
                     public boolean hasNext() {
                         return m.hasNext();
                     }

                     public Tile next() {
                         return getMap().getTile(m.next());
                     }

                     public void remove() {
                         m.remove();
                     }
                 };
             }
         };
     }


, Instance #
frags: 
(startLine=754 endLine=766 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                secondaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = secondaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    secondaryWorkers++;
                    if (secondaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

(startLine=772 endLine=784 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && primaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = primaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    primaryWorkers++;
                    if (primaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

commonMethod: 
(startLine=724 endLine=739 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Player.java)
    /**
     * Gets a fresh list of all colonies this player owns.
     *
     * @return A fresh list of the colonies this player owns.
     */
    public List<Colony> getColonies() {
        ArrayList<Colony> colonies = new ArrayList<Colony>();
        for (Settlement s : settlements) {
            if (s instanceof Colony) {
                colonies.add((Colony) s);
            } else {
                throw new RuntimeException("getColonies can only be called for players whose settlements are colonies.");
            }
        }
        return colonies;
    }


, Instance #
frags: 
(startLine=754 endLine=766 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                secondaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = secondaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    secondaryWorkers++;
                    if (secondaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

(startLine=772 endLine=784 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && primaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = primaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    primaryWorkers++;
                    if (primaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

commonMethod: 
(startLine=958 endLine=1042 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Add the other goods types to the production list.  When this is
     * called the new world goods production is already present on the
     * produce list.  Ignores food which is treated separately.
     */
    private void updateProductionList(final Map<GoodsType, Map<WorkLocation, Integer>> production) {
        final Comparator<GoodsType> productionComparator
            = new Comparator<GoodsType>() {
                public int compare(GoodsType g1, GoodsType g2) {
                    int p1 = 0;
                    for (Integer i : production.get(g1).values()) {
                        p1 += i.intValue();
                    }
                    int p2 = 0;
                    for (Integer i : production.get(g2).values()) {
                        p2 += i.intValue();
                    }
                    return p2 - p1;
                }
            };
        List<GoodsType> toAdd = new ArrayList<GoodsType>();
        
        // If we need liberty put it before the new world production.
        if (colony.getSoL() < 100) {
            for (GoodsType g : libertyGoodsTypes) {
                if (production.containsKey(g)) toAdd.add(g);
            }
            Collections.sort(toAdd, productionComparator);
            produce.addAll(0, toAdd);
            toAdd.clear();
        }

        // Always add raw/building materials first.
        Collections.sort(rawBuildingGoodsTypes, productionComparator);
        for (GoodsType g : buildingGoodsTypes) {
            if (production.containsKey(g)) {
                GoodsType raw = g.getRawMaterial();
                if (colony.getGoodsCount(raw) >= GoodsContainer.CARGO_SIZE/2
                    || production.containsKey(raw)) {
                    toAdd.add(g);
                }
            }
        }
        Collections.sort(toAdd, new Comparator<GoodsType>() {
                public int compare(GoodsType g1, GoodsType g2) {
                    int i1 = rawBuildingGoodsTypes.indexOf(g1.getRawMaterial());
                    int i2 = rawBuildingGoodsTypes.indexOf(g2.getRawMaterial());
                    return i1 - i2;
                }
            });
        for (int i = toAdd.size()-1; i >= 0; i--) {
            GoodsType make = toAdd.get(i);
            GoodsType raw = make.getRawMaterial();
            if (production.containsKey(raw)) {
                if (colony.getGoodsCount(raw) >= GoodsContainer.CARGO_SIZE/2) {
                    produce.add(raw); // Add at the end, enough in stock
                    produce.add(0, make);
                } else {
                    produce.add(0, make);
                    produce.add(0, raw);
                }
            } else {
                produce.add(0, make);
            }
        }
        toAdd.clear();

        // Military goods after lucrative production.
        for (GoodsType g : militaryGoodsTypes) {
            if (production.containsKey(g)) toAdd.add(g);
        }
        Collections.sort(toAdd, productionComparator);
        produce.addAll(toAdd);
        toAdd.clear();

        // Immigration last.
        if (colony.getOwner().getEurope() != null) {
            for (GoodsType g : immigrationGoodsTypes) {
                if (production.containsKey(g)) toAdd.add(g);
            }
            Collections.sort(toAdd, productionComparator);
            produce.addAll(toAdd);
            toAdd.clear();
        }
    }


, Instance #
frags: 
(startLine=754 endLine=766 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                secondaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = secondaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    secondaryWorkers++;
                    if (secondaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

(startLine=772 endLine=784 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && primaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = primaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    primaryWorkers++;
                    if (primaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

commonMethod: 
(startLine=675 endLine=697 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Adds or improves the priority of a buildable in a list.
     *
     * @param type The <code>BuildableType</code> to use.
     * @param weight The relative weight of this class of buildable with
     *     respect to other buildable classes.
     * @param support The support for this buildable within its class.
     * @return True if this type was prioritized.
     */
    private boolean prioritize(BuildableType type,
                               double weight, double support) {
        BuildPlan bp = findBuildPlan(type);
        if (bp == null) {
            buildPlans.add(new BuildPlan(type, weight, support));
            return true;
        }
        if (bp.weight * bp.support < weight * support) {
            bp.weight = weight;
            bp.support = support;
            return true;
        }
        return false;
    }


, Instance #
frags: 
(startLine=754 endLine=766 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                secondaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = secondaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    secondaryWorkers++;
                    if (secondaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

(startLine=772 endLine=784 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && primaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = primaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    primaryWorkers++;
                    if (primaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

commonMethod: 
(startLine=699 endLine=728 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Given a buildable that improves production of a goods type,
     * prioritize it.
     *
     * @param type The <code>BuildableType</code> to consider.
     * @param goodsType The <code>GoodsType</code> improved by the buildable.
     * @return True if this type was prioritized.
     */
    private boolean prioritizeProduction(BuildableType type,
                                         GoodsType goodsType) {
        boolean ret = false;
        if (goodsType.isMilitaryGoods()) {
            ret = prioritize(type, MILITARY_WEIGHT,
                1.0/*FIXME: amount present wrt amount to equip*/);
        } else if (goodsType.isBuildingMaterial()) {
            ret = prioritize(type, BUILDING_WEIGHT,
                1.0/*FIXME: need for this type*/);
        } else if (goodsType.isLibertyType()) {
            ret = prioritize(type, LIBERTY_WEIGHT,
                (colony.getSoL() >= 100) ? 0.01 : 1.0);
        } else if (goodsType.isImmigrationType()) {
            ret = prioritize(type, IMMIGRATION_WEIGHT,
                1.0/*FIXME: Brewster?*/);
        } else if (produce.contains(goodsType)) {
            double f = 0.1 * colony.getProductionOf(goodsType.getRawMaterial());
            ret = prioritize(type, PRODUCTION_WEIGHT,
                f/*FIXME: improvement?*/);
        }
        return ret;
    }


, Instance #
frags: 
(startLine=754 endLine=766 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                secondaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = secondaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    secondaryWorkers++;
                    if (secondaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

(startLine=772 endLine=784 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && primaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = primaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    primaryWorkers++;
                    if (primaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

commonMethod: 
(startLine=925 endLine=939 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Tile.java)
    /**
     * Returns true if this tile has at least one adjacent land tile (if water),
     * or at least one adjacent water tile (if land).
     *
     * @return a <code>boolean</code> value
     */
    public boolean isCoast() {
        for (Direction direction : Direction.values()) {
            Tile otherTile = getNeighbourOrNull(direction);
            if (otherTile != null && otherTile.isLand()!=this.isLand()) {
                return true;
            }
        }
        return false;
    }


, Instance #
frags: 
(startLine=754 endLine=766 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                secondaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = secondaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    secondaryWorkers++;
                    if (secondaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

(startLine=772 endLine=784 srcPath=/root/NewExperiment/freecolFilter/00939/src/net/sf/freecol/server/ai/ColonyPlan.java)
                && primaryWorkers <= MAX_LEVEL) {
                GoodsType producedGoods = primaryRawMaterial.getProducedMaterial();
                Building b = colony.getBuildingForProducing(producedGoods);
                if (producedGoods != null && b != null) {
                    WorkLocationPlan wlp = new WorkLocationPlan(getAIMain(), b, producedGoods);
                    workLocationPlans.add(wlp);
                    colonistAdded = true;
                    primaryWorkers++;
                    if (primaryRawMaterial == ore) {
                        blacksmithAdded = true;
                    }
                }
            }

commonMethod: 
(startLine=766 endLine=805 srcPath=/root/NewExperiment/freecolFilter/00940/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Returns true if the Unit, or its owner has the ability
     * identified by <code>id</code>.
     *
     * @param id a <code>String</code> value
     * @return a <code>boolean</code> value
     */
    public boolean hasAbility(String id) {
        Set<Ability> result = new HashSet<Ability>();
        // UnitType abilities always apply
        result.addAll(unitType.getFeatureContainer().getAbilitySet(id));
        // the player's abilities may not apply
        result.addAll(getOwner().getFeatureContainer()
                      .getAbilitySet(id, unitType, getGame().getTurn()));
        // EquipmentType abilities always apply
        for (EquipmentType equipmentType : equipment.keySet()) {
            result.addAll(equipmentType.getFeatureContainer().getAbilitySet(id));
            // player abilities may also apply to equipment (missionary)
            result.addAll(getOwner().getFeatureContainer()
                          .getAbilitySet(id, equipmentType, getGame().getTurn()));
        }
        // Location abilities may apply. TODO: extend this to all
        // locations? May simplify code. Units are also Locations,
        // however, which complicates the issue. We do not want Units
        // aboard other Units to share the abilities of the carriers.
        if (getColony() != null) {
            result.addAll(getColony().getFeatureContainer()
                          .getAbilitySet(id, unitType, getGame().getTurn()));
        } else if (isInEurope()) {
            // TODO: the following check should not be necessary
            // Presumably, it will become redundant as soon as
            // Europe abilities are in the spec
            if (getOwner().getEurope() != null
                && getOwner().getEurope().getFeatureContainer() != null) {
                result.addAll(getOwner().getEurope().getFeatureContainer()
                              .getAbilitySet(id, unitType, getGame().getTurn()));
            }
        }
        return FeatureContainer.hasAbility(result);
    }


, Instance #
frags: 
(startLine=58 endLine=122 srcPath=/root/NewExperiment/freecolFilter/00966/test/src/net/sf/freecol/common/model/ColonyProductionTest.java)
    public void testProductionSoldier() {

        Game game = getStandardGame();

        Player dutch = game.getPlayer("model.nation.dutch");

        Tile[][] tiles = new Tile[10][15];

        for (int x = 0; x < 10; x++) {
            for (int y = 0; y < 15; y++) {
                tiles[x][y] = new Tile(game, plainsType, x, y);
            }
        }

        Map map = new Map(game, tiles);

        Resource grain = new Resource(game, map.getTile(5, 8),
                                      spec().getResourceType("model.resource.grain"));
        map.getTile(5, 8).addResource(grain);
        map.getTile(5, 8).setExploredBy(dutch, true);
        map.getTile(6, 8).setExploredBy(dutch, true);

        game.setMap(map);
        UnitType veteran = spec().getUnitType("model.unit.veteranSoldier");
        Unit soldier = new ServerUnit(game, map.getTile(6, 8), dutch, veteran);

        Colony colony = new ServerColony(game, dutch, "New Amsterdam", soldier.getTile());
        dutch.addSettlement(colony);
        GoodsType foodType = grainType;
        soldier.setWorkType(foodType);
        nonServerBuildColony(soldier, colony);

        // Test the colony
        assertEquals(map.getTile(6, 8), colony.getTile());

        assertEquals("New Amsterdam", colony.getName());

        assertEquals(colony, colony.getTile().getSettlement());

        assertEquals(dutch, colony.getTile().getOwner());

        // Disabled.  Removal of equipment has moved to the server, so
        // nonServerBuildColony is not going to work.
        //// Should have 50 Muskets and nothing else
        //GoodsType muskets = spec().getGoodsType("model.goods.muskets");
        //assertNotNull(muskets);
        //
        //for (GoodsType type : spec().getGoodsTypeList()){
        //    if (type == muskets)
        //        assertEquals(50, colony.getGoodsCount(type));
        //    else
        //        assertEquals(type.toString(), 0, colony.getGoodsCount(type));
        //}

        // Test the state of the soldier
        // Soldier should be working on the field with the bonus

        assertEquals(foodType, soldier.getWorkType());

        assertEquals(colony.getColonyTile(map.getTile(5,8)).getTile(), soldier.getLocation().getTile());

        assertEquals(0, soldier.getMovesLeft());

        //assertEquals(false, soldier.isArmed());
    }

(startLine=124 endLine=187 srcPath=/root/NewExperiment/freecolFilter/00966/test/src/net/sf/freecol/common/model/ColonyProductionTest.java)
    public void testProductionPioneer() {

        Game game = getStandardGame();

        Player dutch = game.getPlayer("model.nation.dutch");

        Tile[][] tiles = new Tile[10][15];

        for (int x = 0; x < 10; x++) {
            for (int y = 0; y < 15; y++) {
                tiles[x][y] = new Tile(game, plainsType, x, y);
            }
        }

        Map map = new Map(game, tiles);

        Resource grain = new Resource(game, map.getTile(5, 8),
                                      spec().getResourceType("model.resource.grain"));
        map.getTile(5, 8).addResource(grain);
        map.getTile(5, 8).setExploredBy(dutch, true);
        map.getTile(6, 8).setExploredBy(dutch, true);

        game.setMap(map);
        UnitType pioneerType = spec().getUnitType("model.unit.hardyPioneer");
        GoodsType foodType = grainType;
        Unit pioneer = new ServerUnit(game, map.getTile(6, 8), dutch, pioneerType);

        Colony colony = new ServerColony(game, dutch, "New Amsterdam", pioneer.getTile());
        dutch.addSettlement(colony);
        pioneer.setWorkType(foodType);
        nonServerBuildColony(pioneer, colony);

        // Test the colony
        assertEquals(map.getTile(6, 8), colony.getTile());

        assertEquals("New Amsterdam", colony.getName());

        assertEquals(colony, colony.getTile().getSettlement());

        assertEquals(dutch, colony.getTile().getOwner());

        // Disabled.  Removal of equipment has moved to the server, so
        // nonServerBuildColony is not going to work.
        //// Should have 100 tools and nothing else
        //GoodsType tools = spec().getGoodsType("model.goods.tools");
        //assertNotNull(tools);
        //
        //for (GoodsType type : spec().getGoodsTypeList()){
        //    if (type == tools)
        //        assertEquals(100, colony.getGoodsCount(type));
        //    else
        //        assertEquals(type.toString(), 0, colony.getGoodsCount(type));
        //}

        // Test the state of the pioneer
        // Pioneer should be working on the field with the bonus
        assertEquals(foodType, pioneer.getWorkType());

        assertEquals(colony.getColonyTile(map.getTile(5,8)).getTile(), pioneer.getLocation().getTile());

        assertEquals(0, pioneer.getMovesLeft());

        //assertEquals(false, pioneer.isArmed());
    }

commonMethod: 
(startLine=174 endLine=187 srcPath=/root/NewExperiment/freecolFilter/00967/test/src/net/sf/freecol/util/test/FreeColTestCase.java)
    /**
     * Creates a standardized map on which all fields have the plains type.
     *
     * Uses the getGame() method to access the currently running game.
     *
     * Does not call Game.setMap(Map) with the returned map. The map
     * is unexplored.
     *
     * @return The map created as described above.
     */
    public static Map getTestMap() {
        MapBuilder builder = new MapBuilder(getGame());
        return builder.build();
    }


, Instance #
frags: 
(startLine=132 endLine=162 srcPath=/root/NewExperiment/freecolFilter/00974/src/net/sf/freecol/client/gui/panel/ReportNavalPanel.java)
    private void gatherData() {
        locations = new HashMap<String, ArrayList<Unit>>();
        Player player = getMyPlayer();
        List<Colony> colonies = getSortedColonies();
        colonyNames = new ArrayList<String>();
        for (Colony colony : colonies) {
            colonyNames.add(colony.getName());
        }
        otherNames = new ArrayList<String>();
        if (player.getEurope() != null) {
            otherNames.add(Messages.message(player.getEurope().getNameKey()));
        }

        for (Unit unit : player.getUnits()) {
            if (unit.isNaval()) {
                navalUnits.incrementCount(unit.getType(), 1);

                String locationName = getLocationNameFor(unit);

                ArrayList<Unit> unitList = locations.get(locationName);
                if (unitList == null) {
                    unitList = new ArrayList<Unit>();
                    locations.put(locationName, unitList);
                }
                unitList.add(unit);
                if (!(colonyNames.contains(locationName) || otherNames.contains(locationName))) {
                    otherNames.add(locationName);
                }
            }
        }
    }

(startLine=125 endLine=156 srcPath=/root/NewExperiment/freecolFilter/00974/src/net/sf/freecol/client/gui/panel/ReportCargoPanel.java)
    private void gatherData() {
        locations = new HashMap<String, ArrayList<Unit>>();
        Player player = getMyPlayer();
        List<Colony> colonies = getSortedColonies();
        colonyNames = new ArrayList<String>();
        for (Colony colony : colonies) {
            colonyNames.add(colony.getName());
        }
        otherNames = new ArrayList<String>();
        if (player.getEurope() != null) {
            otherNames.add(Messages.message(player.getEurope().getNameKey()));
        }

        for (Unit unit : player.getUnits()) {
            if (unit.isCarrier()) {
                carriers.incrementCount(unit.getType(), 1);
                capacity += unit.getType().getSpace();

                String locationName = getLocationNameFor(unit);

                ArrayList<Unit> unitList = locations.get(locationName);
                if (unitList == null) {
                    unitList = new ArrayList<Unit>();
                    locations.put(locationName, unitList);
                }
                unitList.add(unit);
                if (!(colonyNames.contains(locationName) || otherNames.contains(locationName))) {
                    otherNames.add(locationName);
                }
            }
        }
    }

commonMethod: 
(startLine=145 endLine=171 srcPath=/root/NewExperiment/freecolFilter/00975/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
    protected void addUnit(Unit unit, String key) {
        if (unit.getLocation() == null) {
            // this should never happen
            return;
        } else if (unit.isInEurope()) {
            inEurope.add(unit);
        } else {
            Colony colony = unit.getLocation().getColony();
            if (colony == null) {
                String locationName = getLocationNameFor(unit);
                List<Unit> unitList = inLocations.get(locationName);
                if (unitList == null) {
                    unitList = new ArrayList<Unit>();
                    inLocations.put(locationName, unitList);
                }
                unitList.add(unit);
            } else {
                List<Unit> unitList = inColonies.get(colony);
                if (unitList == null) {
                    unitList = new ArrayList<Unit>();
                    inColonies.put(colony, unitList);
                }
                unitList.add(unit);
            }
        }
        incrementCount(key, unit.getType(), 1);
    }


, Instance #
frags: 
(startLine=145 endLine=161 srcPath=/root/NewExperiment/freecolFilter/00974/src/net/sf/freecol/client/gui/panel/ReportNavalPanel.java)
        for (Unit unit : player.getUnits()) {
            if (unit.isNaval()) {
                navalUnits.incrementCount(unit.getType(), 1);

                String locationName = getLocationNameFor(unit);

                ArrayList<Unit> unitList = locations.get(locationName);
                if (unitList == null) {
                    unitList = new ArrayList<Unit>();
                    locations.put(locationName, unitList);
                }
                unitList.add(unit);
                if (!(colonyNames.contains(locationName) || otherNames.contains(locationName))) {
                    otherNames.add(locationName);
                }
            }
        }

(startLine=138 endLine=155 srcPath=/root/NewExperiment/freecolFilter/00974/src/net/sf/freecol/client/gui/panel/ReportCargoPanel.java)
        for (Unit unit : player.getUnits()) {
            if (unit.isCarrier()) {
                carriers.incrementCount(unit.getType(), 1);
                capacity += unit.getType().getSpace();

                String locationName = getLocationNameFor(unit);

                ArrayList<Unit> unitList = locations.get(locationName);
                if (unitList == null) {
                    unitList = new ArrayList<Unit>();
                    locations.put(locationName, unitList);
                }
                unitList.add(unit);
                if (!(colonyNames.contains(locationName) || otherNames.contains(locationName))) {
                    otherNames.add(locationName);
                }
            }
        }

commonMethod: 
(startLine=145 endLine=171 srcPath=/root/NewExperiment/freecolFilter/00975/src/net/sf/freecol/client/gui/panel/ReportUnitPanel.java)
    protected void addUnit(Unit unit, String key) {
        if (unit.getLocation() == null) {
            // this should never happen
            return;
        } else if (unit.isInEurope()) {
            inEurope.add(unit);
        } else {
            Colony colony = unit.getLocation().getColony();
            if (colony == null) {
                String locationName = getLocationNameFor(unit);
                List<Unit> unitList = inLocations.get(locationName);
                if (unitList == null) {
                    unitList = new ArrayList<Unit>();
                    inLocations.put(locationName, unitList);
                }
                unitList.add(unit);
            } else {
                List<Unit> unitList = inColonies.get(colony);
                if (unitList == null) {
                    unitList = new ArrayList<Unit>();
                    inColonies.put(colony, unitList);
                }
                unitList.add(unit);
            }
        }
        incrementCount(key, unit.getType(), 1);
    }


, Instance #
frags: 
(startLine=265 endLine=347 srcPath=/root/NewExperiment/freecolFilter/00977/src/net/sf/freecol/client/gui/CanvasMouseMotionListener.java)
        public void run() {
            do {
                try {
                    sleep(100);
                } catch (InterruptedException e) {
                }

                try {
                    SwingUtilities.invokeAndWait(new Runnable() {
                        public void run() {
                            try {
                                int x, y;
                                Tile t = mapViewer.getFocus();
                                if (t == null) {
                                    return;
                                }

                                t = t.getNeighbourOrNull(direction);
                                if (t == null) {
                                    return;
                                }

                                if (mapViewer.isMapNearTop(t.getY()) && mapViewer.isMapNearTop(mapViewer.getFocus().getY())) {
                                    if (t.getY() > mapViewer.getFocus().getY()) {
                                        y = t.getY();
                                        do {
                                            y += 2;
                                        } while (mapViewer.isMapNearTop(y));
                                    } else {
                                        y = mapViewer.getFocus().getY();
                                    }
                                } else if (mapViewer.isMapNearBottom(t.getY()) && mapViewer.isMapNearBottom(mapViewer.getFocus().getY())) {
                                    if (t.getY() < mapViewer.getFocus().getY()) {
                                        y = t.getY();
                                        do {
                                            y -= 2;
                                        } while (mapViewer.isMapNearBottom(y));
                                    } else {
                                        y = mapViewer.getFocus().getY();
                                    }
                                } else {
                                    y = t.getY();
                                }

                                if (mapViewer.isMapNearLeft(t.getX(), t.getY())
                                        && mapViewer.isMapNearLeft(mapViewer.getFocus().getX(), mapViewer.getFocus().getY())) {
                                    if (t.getX() > mapViewer.getFocus().getX()) {
                                        x = t.getX();
                                        do {
                                            x++;
                                        } while (mapViewer.isMapNearLeft(x, y));
                                    } else {
                                        x = mapViewer.getFocus().getX();
                                    }
                                } else if (mapViewer.isMapNearRight(t.getX(), t.getY())
                                        && mapViewer.isMapNearRight(mapViewer.getFocus().getX(), mapViewer.getFocus().getY())) {
                                    if (t.getX() < mapViewer.getFocus().getX()) {
                                        x = t.getX();
                                        do {
                                            x--;
                                        } while (mapViewer.isMapNearRight(x, y));
                                    } else {
                                        x = mapViewer.getFocus().getX();
                                    }
                                } else {
                                    x = t.getX();
                                }

                                mapViewer.setFocus(map.getTile(x,y));
                            } catch (Exception e) {
                                logger.log(Level.WARNING, "Exception while scrolling!", e);
                            }
                        }
                    });
                } catch (InvocationTargetException e) {
                    logger.log(Level.WARNING, "Scroll thread caught error", e);
                    cont = false;
                } catch (InterruptedException e) {
                    logger.log(Level.WARNING, "Scroll thread interrupted", e);
                    cont = false;
                }
            } while (cont);
        }

(startLine=438 endLine=520 srcPath=/root/NewExperiment/freecolFilter/00977/src/net/sf/freecol/client/gui/CanvasMapEditorMouseListener.java)
        public void run() {
            do {
                try {
                    sleep(100);
                } catch (InterruptedException e) {
                }

                try {
                    SwingUtilities.invokeAndWait(new Runnable() {
                            public void run() {
                                try {
                                    int x, y;
                                    Tile t = mapViewer.getFocus();
                                    if (t == null) {
                                        return;
                                    }

                                    t = t.getNeighbourOrNull(direction);
                                    if (t == null) {
                                        return;
                                    }

                                    if (mapViewer.isMapNearTop(t.getY()) && mapViewer.isMapNearTop(mapViewer.getFocus().getY())) {
                                        if (t.getY() > mapViewer.getFocus().getY()) {
                                            y = t.getY();
                                            do {
                                                y += 2;
                                            } while (mapViewer.isMapNearTop(y));
                                        } else {
                                            y = mapViewer.getFocus().getY();
                                        }
                                    } else if (mapViewer.isMapNearBottom(t.getY()) && mapViewer.isMapNearBottom(mapViewer.getFocus().getY())) {
                                        if (t.getY() < mapViewer.getFocus().getY()) {
                                            y = t.getY();
                                            do {
                                                y -= 2;
                                            } while (mapViewer.isMapNearBottom(y));
                                        } else {
                                            y = mapViewer.getFocus().getY();
                                        }
                                    } else {
                                        y = t.getY();
                                    }

                                    if (mapViewer.isMapNearLeft(t.getX(), t.getY())
                                        && mapViewer.isMapNearLeft(mapViewer.getFocus().getX(), mapViewer.getFocus().getY())) {
                                        if (t.getX() > mapViewer.getFocus().getX()) {
                                            x = t.getX();
                                            do {
                                                x++;
                                            } while (mapViewer.isMapNearLeft(x, y));
                                        } else {
                                            x = mapViewer.getFocus().getX();
                                        }
                                    } else if (mapViewer.isMapNearRight(t.getX(), t.getY())
                                               && mapViewer.isMapNearRight(mapViewer.getFocus().getX(), mapViewer.getFocus().getY())) {
                                        if (t.getX() < mapViewer.getFocus().getX()) {
                                            x = t.getX();
                                            do {
                                                x--;
                                            } while (mapViewer.isMapNearRight(x, y));
                                        } else {
                                            x = mapViewer.getFocus().getX();
                                        }
                                    } else {
                                        x = t.getX();
                                    }

                                    mapViewer.setFocus(getMap().getTile(x,y));
                                } catch (Exception e) {
                                    logger.log(Level.WARNING, "Exception while scrolling!", e);
                                }
                            }
                        });
                } catch (InvocationTargetException e) {
                    logger.log(Level.WARNING, "Scroll thread caught error", e);
                    cont = false;
                } catch (InterruptedException e) {
                    logger.log(Level.WARNING, "Scroll thread interrupted", e);
                    cont = false;
                }
            } while (cont);
        }

commonMethod: 
(startLine=3433 endLine=3498 srcPath=/root/NewExperiment/freecolFilter/00978/src/net/sf/freecol/client/gui/MapViewer.java)
    public void scrollMap(Direction direction) {

        try {
            int x, y;
            Tile t = getFocus();
            if (t == null) {
                return;
            }

            t = t.getNeighbourOrNull(direction);
            if (t == null) {
                return;
            }

            if (isMapNearTop(t.getY()) && isMapNearTop(getFocus().getY())) {
                if (t.getY() > getFocus().getY()) {
                    y = t.getY();
                    do {
                        y += 2;
                    } while (isMapNearTop(y));
                } else {
                    y = getFocus().getY();
                }
            } else if (isMapNearBottom(t.getY()) && isMapNearBottom(getFocus().getY())) {
                if (t.getY() < getFocus().getY()) {
                    y = t.getY();
                    do {
                        y -= 2;
                    } while (isMapNearBottom(y));
                } else {
                    y = getFocus().getY();
                }
            } else {
                y = t.getY();
            }

            if (isMapNearLeft(t.getX(), t.getY())
                && isMapNearLeft(getFocus().getX(), getFocus().getY())) {
                if (t.getX() > getFocus().getX()) {
                    x = t.getX();
                    do {
                        x++;
                    } while (isMapNearLeft(x, y));
                } else {
                    x = getFocus().getX();
                }
            } else if (isMapNearRight(t.getX(), t.getY())
                       && isMapNearRight(getFocus().getX(), getFocus().getY())) {
                if (t.getX() < getFocus().getX()) {
                    x = t.getX();
                    do {
                        x--;
                    } while (isMapNearRight(x, y));
                } else {
                    x = getFocus().getX();
                }
            } else {
                x = t.getX();
            }

            setFocus(freeColClient.getGame().getMap().getTile(x,y));
        } catch (Exception e) {
            logger.log(Level.WARNING, "Exception while scrolling!", e);
        }
            
    }


, Instance #
frags: 
(startLine=182 endLine=193 srcPath=/root/NewExperiment/freecolFilter/00986/src/net/sf/freecol/server/ai/mission/DefendSettlementMission.java)
    public static PathNode findTarget(AIUnit aiUnit, int range) {
        Unit unit;
        Tile startTile;
        return (aiUnit == null
            || (unit = aiUnit.getUnit()) == null || unit.isDisposed()
            || (startTile = unit.getPathStartTile()) == null)
            ? null
            : unit.search(startTile,
                getMissionGoalDecider(aiUnit, DefendSettlementMission.class),
                CostDeciders.avoidIllegal(), range, 
                ((unit.isOnCarrier()) ? ((Unit)unit.getLocation()) : null));
    }

(startLine=297 endLine=308 srcPath=/root/NewExperiment/freecolFilter/00986/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMission.java)
    public static PathNode findTarget(AIUnit aiUnit, int range) {
        Unit unit;
        Tile startTile;
        if (aiUnit == null
            || (unit = aiUnit.getUnit()) == null || unit.isDisposed() 
            || (startTile = unit.getPathStartTile()) == null) return null;

        return unit.search(startTile,
            getMissionGoalDecider(aiUnit, UnitSeekAndDestroyMission.class),
            CostDeciders.avoidIllegal(), range,
            ((unit.isOnCarrier()) ? ((Unit)unit.getLocation()) : null));
    }

commonMethod: 
(startLine=485 endLine=503 srcPath=/root/NewExperiment/freecolFilter/00987/src/net/sf/freecol/server/ai/mission/Mission.java)
    /**
     * Finds a suitable seek-and-destroy target path for an AI unit.
     *
     * @param aiUnit The <code>AIUnit</code> to find a target for.
     * @param range An upper bound on the number of moves.
     * @param type The mission class.
     * @return A path to the target, or null if none found.
     */
    public static PathNode findTargetPath(AIUnit aiUnit, int range, Class type) {
        Unit unit;
        Tile startTile;
        return (aiUnit == null
            || (unit = aiUnit.getUnit()) == null || unit.isDisposed() 
            || (startTile = unit.getPathStartTile()) == null)
            ? null
            : unit.search(startTile, getMissionGoalDecider(aiUnit, type),
                CostDeciders.avoidIllegal(), range,
                ((unit.isOnCarrier()) ? ((Unit)unit.getLocation()) : null));
    }


, Instance #
frags: 
(startLine=1204 endLine=1219 srcPath=/root/NewExperiment/freecolFilter/01004/src/net/sf/freecol/server/FreeColServer.java)
    private void addBooleanOption(String id, String gr, boolean defaultValue) {
        Specification spec = game.getSpecification();
        if (!spec.hasOption(id)) {
            BooleanOption op = new BooleanOption(id);
            op.setGroup(gr);
            op.setValue(defaultValue);
            spec.addAbstractOption(op);
            if ("".equals(gr)) {
                for (OptionGroup level : spec.getDifficultyLevels()) {
                    level.add(op);
                }
            } else {
                spec.getOptionGroup(gr).add(op);
            }
        }
    }

(startLine=1221 endLine=1236 srcPath=/root/NewExperiment/freecolFilter/01004/src/net/sf/freecol/server/FreeColServer.java)
    private void addIntegerOption(String id, String gr, int defaultValue) {
        Specification spec = game.getSpecification();
        if (!spec.hasOption(id)) {
            IntegerOption op = new IntegerOption(id);
            op.setGroup(gr);
            op.setValue(defaultValue);
            spec.addAbstractOption(op);
            if ("".equals(gr)) {
                for (OptionGroup level : spec.getDifficultyLevels()) {
                    level.add(op);
                }
            } else {
                spec.getOptionGroup(gr).add(op);
            }
        }
    }

(startLine=1238 endLine=1253 srcPath=/root/NewExperiment/freecolFilter/01004/src/net/sf/freecol/server/FreeColServer.java)
    private void addStringOption(String id, String gr, String defaultValue) {
        Specification spec = game.getSpecification();
        if (!spec.hasOption(id)) {
            StringOption op = new StringOption(id);
            op.setGroup(gr);
            op.setValue(defaultValue);
            spec.addAbstractOption(op);
            if ("".equals(gr)) {
                for (OptionGroup level : spec.getDifficultyLevels()) {
                    level.add(op);
                }
            } else {
                spec.getOptionGroup(gr).add(op);
            }
        }
    }

commonMethod: 
(startLine=1226 endLine=1238 srcPath=/root/NewExperiment/freecolFilter/01005/src/net/sf/freecol/server/FreeColServer.java)
    private void addOption(AbstractOption option) {
        Specification spec = game.getSpecification();
        if (!spec.hasOption(option.getId())) {
            spec.addAbstractOption(option);
            if ("".equals(option.getGroup())) {
                for (OptionGroup level : spec.getDifficultyLevels()) {
                    level.add(option);
                }
            } else {
                spec.getOptionGroup(option.getGroup()).add(option);
            }
        }
    }


, Instance #
frags: 
(startLine=1206 endLine=1218 srcPath=/root/NewExperiment/freecolFilter/01004/src/net/sf/freecol/server/FreeColServer.java)
        if (!spec.hasOption(id)) {
            BooleanOption op = new BooleanOption(id);
            op.setGroup(gr);
            op.setValue(defaultValue);
            spec.addAbstractOption(op);
            if ("".equals(gr)) {
                for (OptionGroup level : spec.getDifficultyLevels()) {
                    level.add(op);
                }
            } else {
                spec.getOptionGroup(gr).add(op);
            }
        }

(startLine=1223 endLine=1235 srcPath=/root/NewExperiment/freecolFilter/01004/src/net/sf/freecol/server/FreeColServer.java)
        if (!spec.hasOption(id)) {
            IntegerOption op = new IntegerOption(id);
            op.setGroup(gr);
            op.setValue(defaultValue);
            spec.addAbstractOption(op);
            if ("".equals(gr)) {
                for (OptionGroup level : spec.getDifficultyLevels()) {
                    level.add(op);
                }
            } else {
                spec.getOptionGroup(gr).add(op);
            }
        }

(startLine=1240 endLine=1252 srcPath=/root/NewExperiment/freecolFilter/01004/src/net/sf/freecol/server/FreeColServer.java)
        if (!spec.hasOption(id)) {
            StringOption op = new StringOption(id);
            op.setGroup(gr);
            op.setValue(defaultValue);
            spec.addAbstractOption(op);
            if ("".equals(gr)) {
                for (OptionGroup level : spec.getDifficultyLevels()) {
                    level.add(op);
                }
            } else {
                spec.getOptionGroup(gr).add(op);
            }
        }

commonMethod: 
(startLine=1226 endLine=1238 srcPath=/root/NewExperiment/freecolFilter/01005/src/net/sf/freecol/server/FreeColServer.java)
    private void addOption(AbstractOption option) {
        Specification spec = game.getSpecification();
        if (!spec.hasOption(option.getId())) {
            spec.addAbstractOption(option);
            if ("".equals(option.getGroup())) {
                for (OptionGroup level : spec.getDifficultyLevels()) {
                    level.add(option);
                }
            } else {
                spec.getOptionGroup(option.getGroup()).add(option);
            }
        }
    }


, Instance #
frags: 
(startLine=193 endLine=202 srcPath=/root/NewExperiment/freecolFilter/01020/src/net/sf/freecol/client/gui/panel/DefaultTransferHandler.java)
                    && unitLabel.getParent() instanceof EuropePanel.InPortPanel) {
                    if (data instanceof UnitLabel
                        && ((UnitLabel) data).getUnit().isOnCarrier()
                        || data instanceof GoodsLabel
                        && ((GoodsLabel) data).getGoods().getLocation() instanceof Unit) {
                        oldSelectedUnit = ((EuropePanel) parentPanel).getSelectedUnitLabel();
                    }
                    ((EuropePanel) parentPanel).setSelectedUnitLabel(unitLabel);
                    comp = ((EuropePanel) parentPanel).getCargoPanel();
                } else if (unitLabel.getUnit().isCarrier()

(startLine=203 endLine=212 srcPath=/root/NewExperiment/freecolFilter/01020/src/net/sf/freecol/client/gui/panel/DefaultTransferHandler.java)
                    && unitLabel.getParent() instanceof ColonyPanel.InPortPanel) {
                    if (data instanceof UnitLabel
                        && ((UnitLabel) data).getUnit().isOnCarrier()
                        || data instanceof GoodsLabel
                        && ((GoodsLabel) data).getGoods().getLocation() instanceof Unit) {
                        oldSelectedUnit = ((ColonyPanel) parentPanel).getSelectedUnitLabel();
                    }
                    ((ColonyPanel) parentPanel).setSelectedUnitLabel(unitLabel);
                    comp = ((ColonyPanel) parentPanel).getCargoPanel();
                } else if (unitLabel.canUnitBeEquipedWith(data)) {

commonMethod: 
(startLine=348 endLine=356 srcPath=/root/NewExperiment/freecolFilter/01021/src/net/sf/freecol/client/gui/panel/DefaultTransferHandler.java)
    private void restoreSelection(UnitLabel oldSelectedUnit) {
        if (oldSelectedUnit != null) {
            if ((oldSelectedUnit).getParent() instanceof EuropePanel.EuropeInPortPanel) {
                ((EuropePanel) parentPanel).setSelectedUnit(oldSelectedUnit.getUnit());
            } else {
                ((ColonyPanel) parentPanel).setSelectedUnit(oldSelectedUnit.getUnit());
            }
        }
    }


, Instance #
frags: 
(startLine=359 endLine=381 srcPath=/root/NewExperiment/freecolFilter/01020/src/net/sf/freecol/client/gui/panel/DefaultTransferHandler.java)
                if (comp instanceof UnitLabel) {
                    UnitLabel unitLabel = ((UnitLabel) comp);
                    Unit unit = unitLabel.getUnit();
                    if (unit.hasAbility(Ability.CAN_BE_EQUIPPED)) {
                        Goods goods = label.getGoods();
                        for (EquipmentType equipment : freeColClient.getGame().getSpecification()
                                 .getEquipmentTypeList()) {
                            if (unit.canBeEquippedWith(equipment) && equipment.getGoodsRequired().size() == 1) {
                                AbstractGoods requiredGoods = equipment.getGoodsRequired().get(0);
                                if (requiredGoods.getType().equals(goods.getType())
                                    && requiredGoods.getAmount() <= goods.getAmount()) {
                                    int amount = Math.min(goods.getAmount() / requiredGoods.getAmount(),
                                        equipment.getMaximumCount());
                                    freeColClient.getInGameController()
                                        .equipUnit(unit, equipment, amount);
                                    unitLabel.updateIcon();
                                    return true;
                                }
                            }
                        }
                    }
                    return false;
                } else if (comp instanceof JLabel) {

(startLine=426 endLine=447 srcPath=/root/NewExperiment/freecolFilter/01020/src/net/sf/freecol/client/gui/panel/DefaultTransferHandler.java)
                if (comp instanceof UnitLabel) {
                    UnitLabel unitLabel = (UnitLabel) comp;
                    Unit unit = unitLabel.getUnit();
                    if (unit.hasAbility(Ability.CAN_BE_EQUIPPED)) {
                        for (EquipmentType equipment : freeColClient.getGame().getSpecification()
                                 .getEquipmentTypeList()) {
                            if (unit.canBeEquippedWith(equipment) && equipment.getGoodsRequired().size() == 1) {
                                AbstractGoods requiredGoods = equipment.getGoodsRequired().get(0);
                                if (requiredGoods.getType().equals(label.getType())
                                    && requiredGoods.getAmount() <= label.getAmount()) {
                                    int amount = Math.min(label.getAmount() / requiredGoods.getAmount(),
                                        equipment.getMaximumCount());
                                    freeColClient.getInGameController()
                                        .equipUnit(unit, equipment, amount);
                                    unitLabel.updateIcon();
                                    return true;
                                }
                            }
                        }
                    }
                    return false;
                } else if (comp instanceof JLabel) {

commonMethod: 
(startLine=359 endLine=379 srcPath=/root/NewExperiment/freecolFilter/01021/src/net/sf/freecol/client/gui/panel/DefaultTransferHandler.java)
    private boolean equipUnitIfPossible(UnitLabel unitLabel, AbstractGoods goods) {
        Unit unit = unitLabel.getUnit();
        if (unit.hasAbility(Ability.CAN_BE_EQUIPPED)) {
            for (EquipmentType equipment : freeColClient.getGame().getSpecification()
                     .getEquipmentTypeList()) {
                if (unit.canBeEquippedWith(equipment) && equipment.getGoodsRequired().size() == 1) {
                    AbstractGoods requiredGoods = equipment.getGoodsRequired().get(0);
                    if (requiredGoods.getType().equals(goods.getType())
                        && requiredGoods.getAmount() <= goods.getAmount()) {
                        int amount = Math.min(goods.getAmount() / requiredGoods.getAmount(),
                                              equipment.getMaximumCount());
                        freeColClient.getInGameController()
                            .equipUnit(unit, equipment, amount);
                        unitLabel.updateIcon();
                        return true;
                    }
                }
            }
        }
        return false;
    }


, Instance #
frags: 
(startLine=362 endLine=379 srcPath=/root/NewExperiment/freecolFilter/01020/src/net/sf/freecol/client/gui/panel/DefaultTransferHandler.java)
                    if (unit.hasAbility(Ability.CAN_BE_EQUIPPED)) {
                        Goods goods = label.getGoods();
                        for (EquipmentType equipment : freeColClient.getGame().getSpecification()
                                 .getEquipmentTypeList()) {
                            if (unit.canBeEquippedWith(equipment) && equipment.getGoodsRequired().size() == 1) {
                                AbstractGoods requiredGoods = equipment.getGoodsRequired().get(0);
                                if (requiredGoods.getType().equals(goods.getType())
                                    && requiredGoods.getAmount() <= goods.getAmount()) {
                                    int amount = Math.min(goods.getAmount() / requiredGoods.getAmount(),
                                        equipment.getMaximumCount());
                                    freeColClient.getInGameController()
                                        .equipUnit(unit, equipment, amount);
                                    unitLabel.updateIcon();
                                    return true;
                                }
                            }
                        }
                    }

(startLine=429 endLine=445 srcPath=/root/NewExperiment/freecolFilter/01020/src/net/sf/freecol/client/gui/panel/DefaultTransferHandler.java)
                    if (unit.hasAbility(Ability.CAN_BE_EQUIPPED)) {
                        for (EquipmentType equipment : freeColClient.getGame().getSpecification()
                                 .getEquipmentTypeList()) {
                            if (unit.canBeEquippedWith(equipment) && equipment.getGoodsRequired().size() == 1) {
                                AbstractGoods requiredGoods = equipment.getGoodsRequired().get(0);
                                if (requiredGoods.getType().equals(label.getType())
                                    && requiredGoods.getAmount() <= label.getAmount()) {
                                    int amount = Math.min(label.getAmount() / requiredGoods.getAmount(),
                                        equipment.getMaximumCount());
                                    freeColClient.getInGameController()
                                        .equipUnit(unit, equipment, amount);
                                    unitLabel.updateIcon();
                                    return true;
                                }
                            }
                        }
                    }

commonMethod: 
(startLine=359 endLine=379 srcPath=/root/NewExperiment/freecolFilter/01021/src/net/sf/freecol/client/gui/panel/DefaultTransferHandler.java)
    private boolean equipUnitIfPossible(UnitLabel unitLabel, AbstractGoods goods) {
        Unit unit = unitLabel.getUnit();
        if (unit.hasAbility(Ability.CAN_BE_EQUIPPED)) {
            for (EquipmentType equipment : freeColClient.getGame().getSpecification()
                     .getEquipmentTypeList()) {
                if (unit.canBeEquippedWith(equipment) && equipment.getGoodsRequired().size() == 1) {
                    AbstractGoods requiredGoods = equipment.getGoodsRequired().get(0);
                    if (requiredGoods.getType().equals(goods.getType())
                        && requiredGoods.getAmount() <= goods.getAmount()) {
                        int amount = Math.min(goods.getAmount() / requiredGoods.getAmount(),
                                              equipment.getMaximumCount());
                        freeColClient.getInGameController()
                            .equipUnit(unit, equipment, amount);
                        unitLabel.updateIcon();
                        return true;
                    }
                }
            }
        }
        return false;
    }


, Instance #
frags: 
(startLine=1120 endLine=1133 srcPath=/root/NewExperiment/freecolFilter/01037/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (getGold() >= upkeep) {
            modifyGold(-upkeep);
            if (isBankrupt()) {
                setBankrupt(false);
                for (RandomChoice<Effect> effect: bankruptcy.getEffects()) {
                    for (Modifier modifier : effect.getObject().getModifiers()) {
                        cs.removeModifier(this, modifier);
                    }
                }
                cs.addMessage(See.only(this),
                              new ModelMessage(ModelMessage.MessageType.GOVERNMENT_EFFICIENCY,
                                               "model.disaster.bankruptcy.stop", this));
            }
        } else {

(startLine=1133 endLine=1146 srcPath=/root/NewExperiment/freecolFilter/01037/src/net/sf/freecol/server/model/ServerPlayer.java)
        } else {
            modifyGold(-getGold());
            if (!isBankrupt()) {
                setBankrupt(true);
                for (Effect effect : getEffects(bankruptcy, random)) {
                    for (Modifier modifier : effect.getModifiers()) {
                        cs.addModifier(this, modifier);
                    }
                }
                cs.addMessage(See.only(this),
                              new ModelMessage(ModelMessage.MessageType.GOVERNMENT_EFFICIENCY,
                                               "model.disaster.bankruptcy.start", this));
            }
        }

commonMethod: 
(startLine=1302 endLine=1320 srcPath=/root/NewExperiment/freecolFilter/01038/src/net/sf/freecol/server/control/ChangeSet.java)
    /**
     * Helper function to add a Modifier to a FreeColGameObject, or remove it.
     *
     * @param serverPlayer a <code>ServerPlayer</code> value
     * @param object a <code>FreeColGameObject</code> value
     * @param modifier a <code>Modifier</code> value
     * @param add a <code>boolean</code> value
     * @return a <code>ChangeSet</code> value
     */
    public ChangeSet addFeatureChange(ServerPlayer serverPlayer, FreeColGameObject object,
                                      Modifier modifier, boolean add) {
        changes.add(new FeatureChange(See.only(serverPlayer), object, modifier, add));
        if (add) {
            object.addModifier(modifier);
        } else {
            object.removeModifier(modifier);
        }
        return this;
    }


, Instance #
frags: 
(startLine=660 endLine=674 srcPath=/root/NewExperiment/freecolFilter/01045/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (int i = 0; i < wishList.size(); i++) {
            // TODO: is this necessary? If so, use Iterator?
            WorkerWish ww = (WorkerWish) wishList.get(i);
            if (ww.getTransportable() != null) {
                wishList.remove(i);
                i--;
                continue;
            }
            int turns = getScaledTurns(distances, ww.getDestination());
            if (bestWish == null
                || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                bestWish = ww;
                bestTurns = turns;
            }
        }

(startLine=689 endLine=708 srcPath=/root/NewExperiment/freecolFilter/01045/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (!fewColonies || buildTarget == null || bestTurns > 10) {
            for (List<Wish> wishes : workerWishes.values()) {
                for (int j = 0; j < wishes.size(); j++) {
                    WorkerWish ww = (WorkerWish) wishes.get(j);
                    if (ww.getTransportable() != null) {
                        wishes.remove(j);
                        j--;
                        continue;
                    }
                    int turns = getScaledTurns(distances, ww.getDestination());
                    // TODO: Choose to build colony if the value of the
                    // wish is low.
                    if (bestWish == null
                        || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                        bestWish = ww;
                        bestTurns = turns;
                    }
                }
            }
        }

commonMethod: 
(startLine=1996 endLine=2009 srcPath=/root/NewExperiment/freecolFilter/01046/src/net/sf/freecol/common/model/Map.java)
    /**
     * Are two locations non-null and either the same or at the same tile.
     * This routine is here because Location is an interface.
     *
     * @param l1 The first <code>Location</code>.
     * @param l2 The second <code>Location</code>.
     * @return True if this location is the same or at the same tile.
     */
    public static final boolean isSameLocation(Location l1, Location l2) {
        return (l1 == null || l2 == null) ? false
            : (l1 == l2) ? true
            : (l1.getTile() == null) ? false
            : l1.getTile() == l2.getTile();
    }


, Instance #
frags: 
(startLine=660 endLine=674 srcPath=/root/NewExperiment/freecolFilter/01045/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (int i = 0; i < wishList.size(); i++) {
            // TODO: is this necessary? If so, use Iterator?
            WorkerWish ww = (WorkerWish) wishList.get(i);
            if (ww.getTransportable() != null) {
                wishList.remove(i);
                i--;
                continue;
            }
            int turns = getScaledTurns(distances, ww.getDestination());
            if (bestWish == null
                || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                bestWish = ww;
                bestTurns = turns;
            }
        }

(startLine=689 endLine=708 srcPath=/root/NewExperiment/freecolFilter/01045/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (!fewColonies || buildTarget == null || bestTurns > 10) {
            for (List<Wish> wishes : workerWishes.values()) {
                for (int j = 0; j < wishes.size(); j++) {
                    WorkerWish ww = (WorkerWish) wishes.get(j);
                    if (ww.getTransportable() != null) {
                        wishes.remove(j);
                        j--;
                        continue;
                    }
                    int turns = getScaledTurns(distances, ww.getDestination());
                    // TODO: Choose to build colony if the value of the
                    // wish is low.
                    if (bestWish == null
                        || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                        bestWish = ww;
                        bestTurns = turns;
                    }
                }
            }
        }

commonMethod: 
(startLine=2504 endLine=2516 srcPath=/root/NewExperiment/freecolFilter/01046/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Checks if this <code>Unit</code> is located in Europe. That is; either
     * directly or onboard a carrier which is in Europe.
     *
     * @return The result.
     */
    public boolean isInEurope() {
        if (location instanceof Unit) {
            return ((Unit) location).isInEurope();
        } else {
            return getLocation() instanceof Europe;
        }
    }


, Instance #
frags: 
(startLine=660 endLine=674 srcPath=/root/NewExperiment/freecolFilter/01045/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (int i = 0; i < wishList.size(); i++) {
            // TODO: is this necessary? If so, use Iterator?
            WorkerWish ww = (WorkerWish) wishList.get(i);
            if (ww.getTransportable() != null) {
                wishList.remove(i);
                i--;
                continue;
            }
            int turns = getScaledTurns(distances, ww.getDestination());
            if (bestWish == null
                || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                bestWish = ww;
                bestTurns = turns;
            }
        }

(startLine=689 endLine=708 srcPath=/root/NewExperiment/freecolFilter/01045/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (!fewColonies || buildTarget == null || bestTurns > 10) {
            for (List<Wish> wishes : workerWishes.values()) {
                for (int j = 0; j < wishes.size(); j++) {
                    WorkerWish ww = (WorkerWish) wishes.get(j);
                    if (ww.getTransportable() != null) {
                        wishes.remove(j);
                        j--;
                        continue;
                    }
                    int turns = getScaledTurns(distances, ww.getDestination());
                    // TODO: Choose to build colony if the value of the
                    // wish is low.
                    if (bestWish == null
                        || ww.getValue() - (turns * 2) > bestWish.getValue() - (bestTurns * 2)) {
                        bestWish = ww;
                        bestTurns = turns;
                    }
                }
            }
        }

commonMethod: 
(startLine=238 endLine=254 srcPath=/root/NewExperiment/freecolFilter/01046/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Gets a list of the players AI colonies.
     *
     * @return A list of AI colonies.
     */
    public List<AIColony> getAIColonies() {
        List<AIColony> ac = new ArrayList<AIColony>();
        for (Colony colony : getPlayer().getColonies()) {
            AIColony a = getAIColony(colony);
            if (a != null) {
                ac.add(a);
            } else {
                logger.warning("Could not find the AIColony for: " + colony);
            }
        }
        return ac;
    }


, Instance #
frags: 
(startLine=322 endLine=343 srcPath=/root/NewExperiment/freecolFilter/01048/src/net/sf/freecol/server/ai/mission/PioneeringMission.java)
    public static PathNode findTargetPath(AIUnit aiUnit, boolean deferOK) {
        if (invalidAIUnitReason(aiUnit) != null) return null;
        final Unit unit = aiUnit.getUnit();
        final Tile startTile = unit.getPathStartTile();
        if (startTile == null) return null;

        PathNode path;
        final Unit carrier = unit.getCarrier();
        final GoalDecider gd = getGoalDecider(aiUnit, deferOK);
        final CostDecider standardCd
            = CostDeciders.avoidSettlementsAndBlockingUnits();
        final CostDecider relaxedCd = CostDeciders.numberOfTiles();

        // Try for something sensible nearby.
        path = unit.searchFullPath(startTile, gd, standardCd,
                                   MAX_TURNS, carrier);
        if (path != null) return path;

        // One more try with a relaxed cost decider and no range limit.
        return unit.searchFullPath(startTile, gd, relaxedCd,
                                   INFINITY, carrier);
    }

(startLine=184 endLine=207 srcPath=/root/NewExperiment/freecolFilter/01048/src/net/sf/freecol/server/ai/mission/ScoutingMission.java)
    public static PathNode findTargetPath(AIUnit aiUnit, boolean deferOK) {
        if (invalidAIUnitReason(aiUnit) != null) return null;
        final Unit unit = aiUnit.getUnit();
        final Tile startTile = unit.getPathStartTile();
        if (startTile == null) return null;

        PathNode path;
        final Unit carrier = unit.getCarrier();
        final GoalDecider gd = getGoalDecider(aiUnit, deferOK);
        final CostDecider standardCd = CostDeciders.avoidIllegal();
        final CostDecider relaxedCd = CostDeciders.numberOfTiles();

        // Can the scout legally reach a valid target from where it
        // currently is?
        path = unit.searchFullPath(startTile, gd, standardCd,
                                   MAX_TURNS, carrier);
        if (path != null) return path;

        // Search again, purely on distance in tiles, which allows
        // water tiles and thus potentially finds targets that require
        // a carrier to reach.
        return unit.searchFullPath(startTile, gd, relaxedCd,
                                   INFINITY, carrier);
    }

(startLine=184 endLine=205 srcPath=/root/NewExperiment/freecolFilter/01048/src/net/sf/freecol/server/ai/mission/MissionaryMission.java)
    private static PathNode findTargetPath(AIUnit aiUnit, boolean deferOK) {
        if (invalidAIUnitReason(aiUnit) != null) return null;
        final Unit unit = aiUnit.getUnit();
        final Tile startTile = unit.getPathStartTile();
        if (startTile == null) return null;

        PathNode path;
        final Unit carrier = unit.getCarrier();
        final GoalDecider gd = getGoalDecider(aiUnit, deferOK);
        final CostDecider standardCd
            = CostDeciders.avoidSettlementsAndBlockingUnits();
        final CostDecider relaxedCd = CostDeciders.numberOfTiles();

        // Is there a valid target available from the starting tile?
        path = unit.searchFullPath(startTile, gd, standardCd,
                                   MAX_TURNS, carrier);
        if (path != null) return path;

        // One more try with a relaxed cost decider and no range limit.
        return unit.searchFullPath(startTile, gd, relaxedCd,
                                   MAX_TURNS, carrier);
    }

(startLine=208 endLine=234 srcPath=/root/NewExperiment/freecolFilter/01048/src/net/sf/freecol/server/ai/mission/BuildColonyMission.java)
    public static PathNode findTargetPath(AIUnit aiUnit, boolean deferOK) {
        if (invalidAIUnitReason(aiUnit) != null) return null;
        final Unit unit = aiUnit.getUnit();
        final Tile startTile = unit.getPathStartTile();
        if (startTile == null) return null;

        PathNode path;
        final Unit carrier = unit.getCarrier();
        final GoalDecider gd = getGoalDecider(aiUnit, deferOK);
        final CostDecider standardCd
            = CostDeciders.avoidSettlementsAndBlockingUnits();
        final CostDecider relaxedCd = CostDeciders.numberOfTiles();

        // Try for something sensible nearby.
        path = unit.searchFullPath(startTile, gd, standardCd,
                                   MAX_TURNS, carrier);
        if (path != null) return path;

        // Retry, but increase the range.
        path = unit.searchFullPath(startTile, gd, standardCd,
                                   MAX_TURNS*3, carrier);
        if (path != null) return path;

        // One more try with a relaxed cost decider and no range limit.
        return unit.searchFullPath(startTile, gd, relaxedCd,
                                   INFINITY, carrier);
    }

commonMethod: 
(startLine=1360 endLine=1379 srcPath=/root/NewExperiment/freecolFilter/01049/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Convenience wrapper for the
     * {@link net.sf.freecol.common.model.Map#search} function.
     *
     * @param start The <code>Location</code> to start the search from.
     * @param goalDecider The object responsible for determining whether a
     *     given <code>PathNode</code> is a goal or not.
     * @param costDecider An optional <code>CostDecider</code>
     *     responsible for determining the path cost.
     * @param maxTurns The maximum number of turns the given
     *     <code>Unit</code> is allowed to move. This is the
     *     maximum search range for a goal.
     * @param carrier An optional naval carrier <code>Unit</code> to use.
     * @return The path to a goal, or null if none can be found.
     */
    public PathNode search(Location start, GoalDecider gd,
                           CostDecider cd, int maxTurns, Unit carrier) {
        return getGame().getMap().search(this, start, gd, cd, maxTurns,
                                         carrier);
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=3170 endLine=3187 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Resolves a destination for a unit on the high seas.
     * That is, the location where the unit will appear when it leaves
     * the high seas, which will either be Europe or a tile.
     *
     * @return The location the unit should appear next after leaving
     *      the high seas.
     */
    public Location resolveDestination() {
        if (!isAtSea()) throw new IllegalArgumentException("Not at sea.");
        Location dst = getDestination();
        Tile best;
        return (dst == null) ? getFullEntryLocation()
            : (dst instanceof Europe) ? dst
            : (dst.getTile() != null
                && (best = getBestEntryTile(dst.getTile())) != null) ? best
            : getFullEntryLocation();
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=256 endLine=264 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Gets the AI unit corresponding to a given unit, if any.
     *
     * @param unit The <code>Unit</code> to look up.
     * @return The corresponding AI unit or null if not found.
     */
    protected AIUnit getAIUnit(Unit unit) {
        return getAIMain().getAIUnit(unit);
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=400 endLine=413 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Checks if a transportable needs transport.
     *
     * @param t The <code>Transportable</code> to check.
     * @return True if no transport is already present or the
     *     transportable is already aboard a carrier, and there is a
     *     well defined source and destination location.
     */
    private boolean requestsTransport(Transportable t) {
        return t.getTransport() == null
            && t.getTransportDestination() != null
            && t.getTransportSource() != null
            && !(t.getTransportLocatable().getLocation() instanceof Unit);
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=186 endLine=198 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/server/ai/AIObject.java)
    /**
     * Gets a location's settlement if it has one, or failing that at
     * least make sure the location is not just a carrier.  The intent
     * is to increase the relevance of a location used as a target.
     *
     * @param loc The <code>Location</code> to test.
     * @return The location settlement if any, otherwise, the original
     *     location.
     */
    public static Location upLoc(Location loc) {
        if (loc instanceof Unit) loc = ((Unit)loc).getLocation();
        return (loc.getSettlement() != null) ? loc.getSettlement() : loc;
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=1264 endLine=1281 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Gets the number of turns required for this unit to reach a
     * destination location from a starting location, using an optional
     * carrier and cost decider.
     *
     * @param start The <code>Location</code> to start the search from.
     * @param end The destination <code>Location</code>.
     * @param carrier An optional carrier <code>Unit</code> to use.
     * @param costDecider An optional <code>CostDecider</code> to
     *     score the path with.
     * @return The number of turns it will take to reach the <code>end</code>,
     *         or <code>INFINITY</code> if no path can be found.
     */
    public int getTurnsToReach(Location start, Location end, Unit carrier,
                               CostDecider costDecider) {
        PathNode path = findPath(start, end, carrier, costDecider);
        return (path == null) ? INFINITY : path.getTotalTurns();
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=108 endLine=125 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/common/util/Utils.java)
    /**
     * Appends a value to a list member of a map with a given key.
     *
     * @param map The <code>Map</code> to add to.
     * @param key The key with which to look up the list in the map.
     * @param value The value to append.
     */
    public static <T,K> void appendToMapList(Map<K, List<T>> map,
                                             K key, T value) {
        List<T> l = map.get(key);
        if (l == null) {
            l = new ArrayList<T>();
            l.add(value);
            map.put(key, l);
        } else if (!l.contains(value)) {
            l.add(value);
        }
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=508 endLine=525 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Gets the most urgent transportables.
     *
     * @return The most urgent 10% of the available transportables.
     */
    public List<Transportable> getUrgentTransportables() {
        List<Transportable> urgent = new ArrayList<Transportable>();
        for (Location l : transportSupply.keySet()) {
            urgent.addAll(transportSupply.get(l));
        }
        // Do not let the list exceed 10% of all transports
        Collections.sort(urgent, Transportable.transportableComparator);
        int urge = urgent.size();
        urge = Math.max(2, (urge + 5) / 10);
        while (urgent.size() > urge) urgent.remove(urge);

        return urgent;
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=1478 endLine=1530 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Assign transportable units and goods to available carriers.
     *
     * These supply driven assignments supplement the demand driven
     * calls inside TransportMission.
     *
     * @param missions A list of <code>TransportMission</code>s to potentially
     *     assign more transportables to.
     */
    private void allocateTransportables(List<TransportMission> missions) {
        List<Transportable> urgent = getUrgentTransportables();
        String logMe = "allocateTransportables(" + missions.size() + "):";
        for (Transportable t : urgent) logMe += " " + t.toString();
        logger.info(logMe);

        for (Transportable t : urgent) {
            if (missions.isEmpty()) break;
            TransportMission best = null;
            float bestValue = 0.0f;
            boolean present = false;
            for (TransportMission tm : missions) {
                Cargo cargo = tm.makeCargo(t);
                if (cargo == null) continue;
                int turns = cargo.getTurns();
                float value;
                if (turns == 0) {
                    value = tm.destinationCapacity();
                    if (!present) {
                        bestValue = 0.0f;
                        present = true;
                    }
                } else if (present) {
                    continue;
                } else {
                    value = t.getTransportPriority() / turns;
                }
                if (bestValue < value) {
                    bestValue = value;
                    best = tm;
                }
            }
            if (best != null) {
                if (best.queueTransportable(t, false)) {
                    logger.finest("Queued " + t + " to " + best);
                    if (best.destinationCapacity() <= 0) {
                        missions.remove(best);
                    }
                } else {
                    logger.warning("Failed to queue " + t + " to " + best);
                }
            }
        }
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=1249 endLine=1262 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Gets the number of turns required for this unit to reach a
     * destination location from a starting location.  If the unit is
     * currently on a carrier, it will be used.
     *
     * @param start The <code>Location</code> to start the search from.
     * @param end The destination <code>Location</code>.
     * @return The number of turns it will take to reach the <code>end</code>,
     *         or <code>INFINITY</code> if no path can be found.
     */
    public int getTurnsToReach(Location start, Location end) {
        return getTurnsToReach(start, end, getCarrier(),
            CostDeciders.avoidSettlementsAndBlockingUnits());
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=1366 endLine=1375 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private void putReason(AIUnit aiUnit, String reason) {
        final Unit unit = aiUnit.getUnit();
        final Mission mission = aiUnit.getMission();
        reasons.put(unit, unit.getLocation() + " " + reason + "-"
            + ((mission == null)
                ? "NoMission"
                : (mission instanceof TransportMission)
                ? ((TransportMission)mission).toFullString()
                : mission.toString()));
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=582 endLine=595 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/common/model/Map.java)
    /**
     * Are two locations non-null and either the same or at the same tile.
     * This routine is here because Location is an interface.
     *
     * @param l1 The first <code>Location</code>.
     * @param l2 The second <code>Location</code>.
     * @return True if the locations are the same or at the same tile.
     */
    public static final boolean isSameLocation(Location l1, Location l2) {
        return (l1 == null || l2 == null) ? false
            : (l1 == l2) ? true
            : (l1.getTile() == null) ? false
            : l1.getTile() == l2.getTile();
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=290 endLine=295 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/common/model/UnitLocation.java)
    /**
     * {@inheritDoc}
     */
    public List<Unit> getUnitList() {
        return new ArrayList<Unit>(units);
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=758 endLine=793 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Rebuilds the goods and worker wishes maps.
     */
    private void buildWishMaps() {
        for (UnitType unitType : getSpecification().getUnitTypeList()) {
            List<WorkerWish> wl = workerWishes.get(unitType);
            if (wl == null) {
                workerWishes.put(unitType, new ArrayList<WorkerWish>());
            } else {
                wl.clear();
            }
        }
        for (GoodsType goodsType : getSpecification().getGoodsTypeList()) {
            if (!goodsType.isStorable()) continue;
            List<GoodsWish> gl = goodsWishes.get(goodsType);
            if (gl == null) {
                goodsWishes.put(goodsType, new ArrayList<GoodsWish>());
            } else {
                gl.clear();
            }
        }

        for (Wish w : getWishes()) {
            if (w instanceof WorkerWish) {
                WorkerWish ww = (WorkerWish)w;
                if (ww.getTransportable() == null) {
                    Utils.appendToMapList(workerWishes, ww.getUnitType(), ww);
                }
            } else if (w instanceof GoodsWish) {
                GoodsWish gw = (GoodsWish)w;
                if (gw.getDestination() instanceof Colony) {
                    Utils.appendToMapList(goodsWishes, gw.getGoodsType(), gw);
                }
            }
        }
    }


, Instance #
frags: 
(startLine=773 endLine=783 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

(startLine=784 endLine=794 srcPath=/root/NewExperiment/freecolFilter/01060/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : navalUnits) {
            Mission m;
            if (aiUnit.getMission() instanceof IdleAtSettlementMission) {
                m = aiUnit.getMission();
            } else {
                m = new IdleAtSettlementMission(aiMain, aiUnit);
                aiUnit.setMission(m);
            }
            report += "\n  UNUSED-" + m
                + " at " + aiUnit.getUnit().getLocation();
        }

commonMethod: 
(startLine=268 endLine=286 srcPath=/root/NewExperiment/freecolFilter/01061/src/net/sf/freecol/server/ai/AIUnit.java)
    /**
     * Aborts a mission.  Always use this instead of setMission(null),
     * and provide a useful reason so that AI mission thrashing can be
     * tracked down.
     *
     * @param why A string describing why the mission is to be aborted
     *     (e.g. "invalid").
     */
    public void abortMission(String why) {
        if (this.mission != null) {
            if (!this.mission.isOneTime()) {
                logger.fine("Mission-ABORT(" + why + "): " + this.mission);
            }
            removeTransport(why);
            this.mission.dispose();
            this.mission = null;
            this.dynamicPriority = 0;
        }
    }


, Instance #
frags: 
(startLine=1518 endLine=1541 srcPath=/root/NewExperiment/freecolFilter/01070/src/net/sf/freecol/server/control/InGameController.java)
                                  Goods goods, int price) {
        TradeSession session
            = TradeSession.lookup(TradeSession.class, unit, settlement);
        if (session == null) {
            return DOMMessage.clientError("Proposing to buy without opening a transaction session?!");
        }
        if (!session.getBuy()) {
            return DOMMessage.clientError("Proposing to buy in a session where buying is not allowed.");
        }
        ChangeSet cs = new ChangeSet();
        if (settlement instanceof IndianSettlement) {
            csSpeakToChief(serverPlayer, (IndianSettlement)settlement,
                           false, cs);
        }

        // AI considers the proposition, return with a gold value
        AIPlayer ai = getFreeColServer().getAIPlayer(settlement.getOwner());
        int gold = ai.buyProposition(unit, settlement, goods, price);

        // Others can not see proposals.
        cs.addAttribute(See.only(serverPlayer),
                        "gold", Integer.toString(gold));
        return cs.build(serverPlayer);
    }

(startLine=1555 endLine=1578 srcPath=/root/NewExperiment/freecolFilter/01070/src/net/sf/freecol/server/control/InGameController.java)
                                   Goods goods, int price) {
        TradeSession session
            = TradeSession.lookup(TradeSession.class, unit, settlement);
        if (session == null) {
            return DOMMessage.clientError("Proposing to sell without opening a transaction session");
        }
        if (!session.getSell()) {
            return DOMMessage.clientError("Proposing to sell in a session where selling is not allowed.");
        }
        ChangeSet cs = new ChangeSet();
        if (settlement instanceof IndianSettlement) {
            csSpeakToChief(serverPlayer, (IndianSettlement)settlement,
                           false, cs);
        }

        // AI considers the proposition, return with a gold value
        AIPlayer ai = getFreeColServer().getAIPlayer(settlement.getOwner());
        int gold = ai.sellProposition(unit, settlement, goods, price);

        // Others can not see proposals.
        cs.addAttribute(See.only(serverPlayer),
                        "gold", Integer.toString(gold));
        return cs.build(serverPlayer);
    }

commonMethod: 
(startLine=616 endLine=639 srcPath=/root/NewExperiment/freecolFilter/01071/src/net/sf/freecol/server/control/InGameController.java)
    /**
     * Visits a native settlement, possibly scouting it full if it is
     * as a result of a scout actually asking to speak to the chief,
     * or for other settlement-contacting events such as missionary
     * actions, demanding tribute, learning skills and trading if the
     * settlementActionsContactChief game option is enabled.  It is
     * still unclear what Col1 did here.
     *
     * @param serverPlayer The <code>ServerPlayer</code> that is contacting
     *     the settlement.
     * @param is The <code>IndianSettlement</code> to contact.
     * @param scout True if this contact is due to a scout asking to
     *     speak to the chief.
     * @param cs A <code>ChangeSet</code> to update.
     */
    private void csVisit(ServerPlayer serverPlayer, IndianSettlement is,
                         boolean scout, ChangeSet cs) {
        serverPlayer.csContact((ServerPlayer) is.getOwner(), null, cs);
        is.setVisited(serverPlayer);
        if (scout || getGame().getSpecification()
            .getBoolean("model.option.settlementActionsContactChief")) {
            is.setScouted(serverPlayer);
        }
    }


, Instance #
frags: 
(startLine=533 endLine=544 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose gift unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianBringGiftMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), is.getTile(), null,
                                  CostDeciders.numberOfLegalTiles()) != null) {
                    unit = u;
                }
            }

(startLine=618 endLine=629 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose demand unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianDemandMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), is.getTile(), null,
                                  CostDeciders.numberOfLegalTiles()) != null) {
                    unit = u;
                }
            }

commonMethod: 
(startLine=48 endLine=60 srcPath=/root/NewExperiment/freecolFilter/01073/src/net/sf/freecol/common/util/RandomChoice.java)
    public static <T> T getWeightedRandom(Logger logger, String logMe,
                                          Random random,
                                          Collection<RandomChoice<T>> input) {
        int n;
        if (input == null || input.isEmpty()
            || (n = getTotalProbability(input)) <= 0) {
            return null;
        } else if (input.size() == 1) {
            return input.iterator().next().getObject();
        } else {
            return select(input, Utils.randomInt(logger, logMe, random, n));
        }
    }


, Instance #
frags: 
(startLine=533 endLine=544 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose gift unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianBringGiftMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), is.getTile(), null,
                                  CostDeciders.numberOfLegalTiles()) != null) {
                    unit = u;
                }
            }

(startLine=618 endLine=629 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose demand unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianDemandMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), is.getTile(), null,
                                  CostDeciders.numberOfLegalTiles()) != null) {
                    unit = u;
                }
            }

commonMethod: 
(startLine=251 endLine=259 srcPath=/root/NewExperiment/freecolFilter/01073/src/net/sf/freecol/common/model/PathNode.java)
    /**
     * Gets the number of turns it will take to move the entire path,
     * from the starting <code>PathNode</code> until the end.
     *
     * @return The number of turns, using zero for the first move.
     */
    public int getTotalTurns() {
        return getLastNode().getTurns();
    }


, Instance #
frags: 
(startLine=533 endLine=544 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose gift unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianBringGiftMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), is.getTile(), null,
                                  CostDeciders.numberOfLegalTiles()) != null) {
                    unit = u;
                }
            }

(startLine=618 endLine=629 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose demand unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianDemandMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), is.getTile(), null,
                                  CostDeciders.numberOfLegalTiles()) != null) {
                    unit = u;
                }
            }

commonMethod: 
(startLine=409 endLine=417 srcPath=/root/NewExperiment/freecolFilter/01073/src/net/sf/freecol/common/model/IndianSettlement.java)
    /**
     * Has a player contacted this settlement?
     *
     * @param player The <code>Player</code> to check.
     * @return True if the player has contacted this settlement.
     */
    public boolean hasContacted(Player player) {
        return getContactLevel(player) != ContactLevel.UNCONTACTED;
    }


, Instance #
frags: 
(startLine=554 endLine=563 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
                     .getSurroundingTiles(MAX_DISTANCE_TO_BRING_GIFTS)) {
                Colony c = t.getColony();
                if (c != null
                    && is.getAlarm(c.getOwner()) != null
                    && IndianBringGiftMission.invalidReason(aiUnit, c) == null
                    && unit.findPath(is.getTile(), c.getTile(), null,
                                     CostDeciders.numberOfLegalTiles()) != null) {
                    nearbyColonies.add(c);
                }
            }

(startLine=639 endLine=648 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
                     .getSurroundingTiles(MAX_DISTANCE_TO_MAKE_DEMANDS)) {
                Colony c = t.getColony();
                if (c != null
                    && is.getAlarm(c.getOwner()) != null
                    && IndianDemandMission.invalidReason(aiUnit, c) == null
                    && unit.findPath(is.getTile(), c.getTile(), null,
                                     CostDeciders.numberOfLegalTiles()) != null) {
                    nearbyColonies.add(c);
                }
            }

commonMethod: 
(startLine=793 endLine=808 srcPath=/root/NewExperiment/freecolFilter/01073/src/net/sf/freecol/common/model/Specification.java)
    /**
     * Gets the integer value of an option.
     *
     * @param id The id of the option.
     * @return The value.
     * @exception IllegalArgumentException If there is no integer
     *            value associated with the specified option.
     * @exception NullPointerException if the given <code>Option</code> does not exist.
     */
    public int getInteger(String id) {
        try {
            return ((IntegerOption) getOption(id)).getValue();
        } catch (ClassCastException e) {
            throw new IllegalArgumentException("No integer value associated with the specified option.");
        }
    }


, Instance #
frags: 
(startLine=554 endLine=563 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
                     .getSurroundingTiles(MAX_DISTANCE_TO_BRING_GIFTS)) {
                Colony c = t.getColony();
                if (c != null
                    && is.getAlarm(c.getOwner()) != null
                    && IndianBringGiftMission.invalidReason(aiUnit, c) == null
                    && unit.findPath(is.getTile(), c.getTile(), null,
                                     CostDeciders.numberOfLegalTiles()) != null) {
                    nearbyColonies.add(c);
                }
            }

(startLine=639 endLine=648 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
                     .getSurroundingTiles(MAX_DISTANCE_TO_MAKE_DEMANDS)) {
                Colony c = t.getColony();
                if (c != null
                    && is.getAlarm(c.getOwner()) != null
                    && IndianDemandMission.invalidReason(aiUnit, c) == null
                    && unit.findPath(is.getTile(), c.getTile(), null,
                                     CostDeciders.numberOfLegalTiles()) != null) {
                    nearbyColonies.add(c);
                }
            }

commonMethod: 
(startLine=48 endLine=60 srcPath=/root/NewExperiment/freecolFilter/01073/src/net/sf/freecol/common/util/RandomChoice.java)
    public static <T> T getWeightedRandom(Logger logger, String logMe,
                                          Random random,
                                          Collection<RandomChoice<T>> input) {
        int n;
        if (input == null || input.isEmpty()
            || (n = getTotalProbability(input)) <= 0) {
            return null;
        } else if (input.size() == 1) {
            return input.iterator().next().getObject();
        } else {
            return select(input, Utils.randomInt(logger, logMe, random, n));
        }
    }


, Instance #
frags: 
(startLine=554 endLine=563 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
                     .getSurroundingTiles(MAX_DISTANCE_TO_BRING_GIFTS)) {
                Colony c = t.getColony();
                if (c != null
                    && is.getAlarm(c.getOwner()) != null
                    && IndianBringGiftMission.invalidReason(aiUnit, c) == null
                    && unit.findPath(is.getTile(), c.getTile(), null,
                                     CostDeciders.numberOfLegalTiles()) != null) {
                    nearbyColonies.add(c);
                }
            }

(startLine=639 endLine=648 srcPath=/root/NewExperiment/freecolFilter/01072/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
                     .getSurroundingTiles(MAX_DISTANCE_TO_MAKE_DEMANDS)) {
                Colony c = t.getColony();
                if (c != null
                    && is.getAlarm(c.getOwner()) != null
                    && IndianDemandMission.invalidReason(aiUnit, c) == null
                    && unit.findPath(is.getTile(), c.getTile(), null,
                                     CostDeciders.numberOfLegalTiles()) != null) {
                    nearbyColonies.add(c);
                }
            }

commonMethod: 
(startLine=409 endLine=417 srcPath=/root/NewExperiment/freecolFilter/01073/src/net/sf/freecol/common/model/IndianSettlement.java)
    /**
     * Has a player contacted this settlement?
     *
     * @param player The <code>Player</code> to check.
     * @return True if the player has contacted this settlement.
     */
    public boolean hasContacted(Player player) {
        return getContactLevel(player) != ContactLevel.UNCONTACTED;
    }


, Instance #
frags: 
(startLine=475 endLine=485 srcPath=/root/NewExperiment/freecolFilter/01104/src/net/sf/freecol/common/model/TileType.java)
                 : primaryGoodsMap.entrySet()) {
            out.writeStartElement("primary-production");
            out.writeAttribute("goods-type",
                entry.getValue().getType().getId());
            out.writeAttribute(VALUE_TAG,
                Integer.toString(entry.getValue().getAmount()));
            if (entry.getKey() != null) {
                out.writeAttribute("tile-production", entry.getKey());
            }
            out.writeEndElement();
        }

(startLine=488 endLine=498 srcPath=/root/NewExperiment/freecolFilter/01104/src/net/sf/freecol/common/model/TileType.java)
                 : secondaryGoodsMap.entrySet()) {
            out.writeStartElement("secondary-production");
            out.writeAttribute("goods-type",
                entry.getValue().getType().getId());
            out.writeAttribute(VALUE_TAG,
                Integer.toString(entry.getValue().getAmount()));
            if (entry.getKey() != null) {
                out.writeAttribute("tile-production", entry.getKey());
            }
            out.writeEndElement();
        }

(startLine=501 endLine=512 srcPath=/root/NewExperiment/freecolFilter/01104/src/net/sf/freecol/common/model/TileType.java)
                 : productionMap.entrySet()) {
            for (AbstractGoods goods : entry.getValue().values()) {
                out.writeStartElement("production");
                out.writeAttribute("goods-type", goods.getType().getId());
                out.writeAttribute(VALUE_TAG,
                    Integer.toString(goods.getAmount()));
                if (entry.getKey() != null) {
                    out.writeAttribute("tile-production", entry.getKey());
                }
                out.writeEndElement();
            }
        }

commonMethod: 
(startLine=322 endLine=335 srcPath=/root/NewExperiment/freecolFilter/01105/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * This method writes an XML-representation of this object to
     * the given stream.
     *
     * All attributes will be made visible.
     *
     * @param out The target stream.
     * @throws XMLStreamException if there are any problems writing
     *      to the stream.
     * @see #toXML(XMLStreamWriter, Player, boolean, boolean)
     */
    public void toXML(XMLStreamWriter out) throws XMLStreamException {
        toXMLImpl(out);
    }


, Instance #
frags: 
(startLine=746 endLine=764 srcPath=/root/NewExperiment/freecolFilter/01128/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            if (workingOnLand != null) {
                GoodsType goodsType = unit.getWorkType();
                int producing = workingOnLand.getProductionOf(unit, goodsType);
                unitIcon = imageLibrary.getUnitImageIcon(unit, 0.5);
                String nominative = Messages.message(StringTemplate.template(
                    goodsType.getNameKey()).addAmount("%amount%", producing));
                String menuTitle = new String(Messages.message(unit.getLabel())
                    + " " + Messages.message("producing.name")
                    + " " + producing + " " + nominative);
                subMenu = new JMenuItem(menuTitle, unitIcon);
                    subMenu.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        unitMenu.createUnitMenu(new UnitLabel(getFreeColClient(), unit, getGUI()));
                        unitMenu.show(getGUI().getCanvas(), 0, 0);
                    }
                });
                unitNumber++;
                colonyUnitsMenu.add(subMenu);
            }else{

(startLine=764 endLine=785 srcPath=/root/NewExperiment/freecolFilter/01128/src/net/sf/freecol/client/gui/panel/ColonyPanel.java)
            }else{
                Building workingInBuilding = unit.getWorkLocation();
                if(workingInBuilding != null){
                    GoodsType goodsType = unit.getWorkType();
                    int producing = workingInBuilding.getProductionOf(unit, goodsType);
                    unitIcon = imageLibrary.getUnitImageIcon(unit, 0.5);
                    String nominative = Messages.message(StringTemplate.template(goodsType.getNameKey())
                        .addAmount("%amount%", producing));
                    String menuTitle = new String(Messages.message(unit.getLabel())
                        + " " + Messages.message("producing.name")
                        + " " + producing + " " + nominative);
                    subMenu = new JMenuItem(menuTitle, unitIcon);
                    subMenu.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            unitMenu.createUnitMenu(new UnitLabel(getFreeColClient(), unit, getGUI()));
                            unitMenu.show(getGUI().getCanvas(), 0, 0);
                        }
                    });
                    unitNumber++;
                    colonyUnitsMenu.add(subMenu);
                }
            }

commonMethod: 
(startLine=653 endLine=671 srcPath=/root/NewExperiment/freecolFilter/01129/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Gets the number of turns this unit has to train to educate a student.
     * This value is only meaningful for units that can be put in a school.
     *
     * @return The turns of training needed to teach its current type to a free
     *         colonist or to promote an indentured servant or a petty criminal.
     * @see #getTurnsOfTraining
     */
    public int getNeededTurnsOfTraining() {
        // number of turns is 4/6/8 for skill 1/2/3
        int result = 0;
        if (student != null) {
            result = getNeededTurnsOfTraining(unitType, student.unitType);
            if (getColony() != null) {
                result -= getColony().getProductionBonus();
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=487 endLine=498 srcPath=/root/NewExperiment/freecolFilter/01136/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
        throws XMLStreamException {
        super.readAttributes(in);

        String str = in.getAttributeValue(null, "target");
        target = getGame().getFreeColGameObject(str, Colony.class);

        str = in.getAttributeValue(null, "completed");
        completed = Boolean.valueOf(str).booleanValue();

        str = in.getAttributeValue(null, "demanded");
        demanded = Boolean.valueOf(str).booleanValue();
    }

(startLine=347 endLine=358 srcPath=/root/NewExperiment/freecolFilter/01136/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
        throws XMLStreamException {
        super.readAttributes(in);

        String str = in.getAttributeValue(null, "target");
        target = getGame().getFreeColGameObject(str, Colony.class);

        str = in.getAttributeValue(null, "completed");
        // @compat 0.9.x
        if (str == null) str = in.getAttributeValue(null, "giftDelivered");
        // end compatibility code
        completed = Boolean.valueOf(str).booleanValue();
    }

commonMethod: 
(startLine=636 endLine=650 srcPath=/root/NewExperiment/freecolFilter/01137/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Gets a boolean from an attribute in a stream.
     *
     * @param in The <code>XMLStreamReader</code> to read from.
     * @param attributeName The attribute name.
     * @param defaultValue The default value.
     * @return The boolean attribute value, or the default value if none found.
     */
    public boolean getAttribute(XMLStreamReader in, String attributeName,
                                boolean defaultValue) {
        final String attrib = in.getAttributeValue(null, attributeName);

        return (attrib == null) ? defaultValue
            : Boolean.parseBoolean(attrib);
    }


, Instance #
frags: 
(startLine=487 endLine=498 srcPath=/root/NewExperiment/freecolFilter/01136/src/net/sf/freecol/server/ai/mission/IndianDemandMission.java)
        throws XMLStreamException {
        super.readAttributes(in);

        String str = in.getAttributeValue(null, "target");
        target = getGame().getFreeColGameObject(str, Colony.class);

        str = in.getAttributeValue(null, "completed");
        completed = Boolean.valueOf(str).booleanValue();

        str = in.getAttributeValue(null, "demanded");
        demanded = Boolean.valueOf(str).booleanValue();
    }

(startLine=347 endLine=358 srcPath=/root/NewExperiment/freecolFilter/01136/src/net/sf/freecol/server/ai/mission/IndianBringGiftMission.java)
        throws XMLStreamException {
        super.readAttributes(in);

        String str = in.getAttributeValue(null, "target");
        target = getGame().getFreeColGameObject(str, Colony.class);

        str = in.getAttributeValue(null, "completed");
        // @compat 0.9.x
        if (str == null) str = in.getAttributeValue(null, "giftDelivered");
        // end compatibility code
        completed = Boolean.valueOf(str).booleanValue();
    }

commonMethod: 
(startLine=740 endLine=761 srcPath=/root/NewExperiment/freecolFilter/01137/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Gets a FreeCol object from an attribute in a stream.
     *
     * @param in The <code>XMLStreamReader</code> to read from.
     * @param attributeName The attribute name.
     * @param game The <code>Game</code> to look in.
     * @param returnType The <code>FreeColObject</code> type to expect.
     * @param defaultValue The default value.
     * @return The <code>FreeColObject</code> found, or the default
     *     value if not.
     */
    public <T extends FreeColGameObject> T getAttribute(XMLStreamReader in,
        String attributeName, Game game, Class<T> returnType, T defaultValue) {
        final String attrib = 
        // @compat 0.10.7
            (ID_ATTRIBUTE_TAG.equals(attributeName)) ? readId(in) :
        // end @compat
            in.getAttributeValue(null, attributeName);

        return (attrib == null) ? defaultValue
            : game.getFreeColGameObject(attrib, returnType);
    }


, Instance #
frags: 
(startLine=3884 endLine=3892 srcPath=/root/NewExperiment/freecolFilter/01150/src/net/sf/freecol/common/model/Player.java)
            } else if (in.getLocalName().equals(FOUNDING_FATHER_TAG)) {
                int length = Integer.parseInt(in.getAttributeValue(null, ARRAY_SIZE));
                for (int index = 0; index < length; index++) {
                    String fatherId = in.getAttributeValue(null, "x" + String.valueOf(index));
                    FoundingFather father = getSpecification().getFoundingFather(fatherId);
                    addFather(father);
                }
                in.nextTag();
            } else if (in.getLocalName().equals(OFFERED_FATHER_TAG)) {

(startLine=3892 endLine=3900 srcPath=/root/NewExperiment/freecolFilter/01150/src/net/sf/freecol/common/model/Player.java)
            } else if (in.getLocalName().equals(OFFERED_FATHER_TAG)) {
                int length = Integer.parseInt(in.getAttributeValue(null, ARRAY_SIZE));
                for (int index = 0; index < length; index++) {
                    String fatherId = in.getAttributeValue(null, "x" + String.valueOf(index));
                    FoundingFather father = getSpecification().getFoundingFather(fatherId);
                    offeredFathers.add(father);
                }
                in.nextTag();
            } else if (in.getLocalName().equals(STANCE_TAG)) {

commonMethod: 
(startLine=695 endLine=708 srcPath=/root/NewExperiment/freecolFilter/01151/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Close the current tag, checking that it did indeed close correctly.
     *
     * @param in The input stream with the XML.
     * @param tag The expected tag name.
     * @exception XMLStreamException if a closing tag is not found.
     */
    public void closeTag(XMLStreamReader in, String tag) throws XMLStreamException {
        if (in.nextTag() != XMLStreamConstants.END_ELEMENT) {
            throw new XMLStreamException("Parse error, END_ELEMENT expected,"
                + " not: " + in.getLocalName());
        }
        expectTag(in, tag);
    }


, Instance #
frags: 
(startLine=3884 endLine=3892 srcPath=/root/NewExperiment/freecolFilter/01150/src/net/sf/freecol/common/model/Player.java)
            } else if (in.getLocalName().equals(FOUNDING_FATHER_TAG)) {
                int length = Integer.parseInt(in.getAttributeValue(null, ARRAY_SIZE));
                for (int index = 0; index < length; index++) {
                    String fatherId = in.getAttributeValue(null, "x" + String.valueOf(index));
                    FoundingFather father = getSpecification().getFoundingFather(fatherId);
                    addFather(father);
                }
                in.nextTag();
            } else if (in.getLocalName().equals(OFFERED_FATHER_TAG)) {

(startLine=3892 endLine=3900 srcPath=/root/NewExperiment/freecolFilter/01150/src/net/sf/freecol/common/model/Player.java)
            } else if (in.getLocalName().equals(OFFERED_FATHER_TAG)) {
                int length = Integer.parseInt(in.getAttributeValue(null, ARRAY_SIZE));
                for (int index = 0; index < length; index++) {
                    String fatherId = in.getAttributeValue(null, "x" + String.valueOf(index));
                    FoundingFather father = getSpecification().getFoundingFather(fatherId);
                    offeredFathers.add(father);
                }
                in.nextTag();
            } else if (in.getLocalName().equals(STANCE_TAG)) {

commonMethod: 
(startLine=807 endLine=837 srcPath=/root/NewExperiment/freecolFilter/01151/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Reads an XML-representation of a list of
     * <code>FreeColGameObjectType</code>s.
     *
     * @param in The input stream with the XML.
     * @param tag The tag for the list <code>Element</code>.
     * @param spec The <code>Specification</code> to find items in.
     * @param type The type of the items to be added.  The type must exist
     *     in the supplied specification.
     * @return The list.
     * @exception XMLStreamException if a problem was encountered
     *     during parsing.
     */
    protected <T extends FreeColGameObjectType> List<T>
        readFromListElement(XMLStreamReader in, String tag, Specification spec,
                            Class<T> type) throws XMLStreamException {
        expectTag(in, tag);

        final int length = getAttribute(in, ARRAY_SIZE_TAG, -1);
        if (length < 0) return Collections.emptyList();

        List<T> list = new ArrayList<T>(length);
        for (int x = 0; x < length; x++) {
            T value = spec.getType(in, "x" + x, type, (T)null); 
            if (value == null) logger.warning("Null list value(" + x + ")");
            list.add(value);
        }

        closeTag(in, tag);
        return list;
    }


, Instance #
frags: 
(startLine=678 endLine=696 srcPath=/root/NewExperiment/freecolFilter/01163/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
            if (freeColClient.getMyPlayer().canTrade(goods.getType())) {
                JMenuItem unload = new JMenuItem(Messages.message("unload"));
                unload.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            inGameController.unloadCargo(goods, false);
                            if (parentPanel instanceof CargoPanel) {
                                CargoPanel cargoPanel = (CargoPanel) parentPanel;
                                cargoPanel.initialize();
                                /*
                                  if (cargoPanel.getParentPanel() instanceof ColonyPanel) {
                                  ((ColonyPanel) cargoPanel.getParentPanel()).updateWarehouse();
                                  }
                                */
                            }
                            parentPanel.revalidate();
                        }
                    });
                this.add(unload);
            } else {

(startLine=696 endLine=712 srcPath=/root/NewExperiment/freecolFilter/01163/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
            } else {
                if (goods.getLocation() instanceof Unit
                    && ((Unit)goods.getLocation()).isInEurope()) {
                    JMenuItem pay = new JMenuItem(Messages.message("boycottedGoods.payArrears"));
                    pay.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                inGameController.payArrears(goods.getType());
                                if (parentPanel instanceof CargoPanel) {
                                    CargoPanel cargoPanel = (CargoPanel) parentPanel;
                                    cargoPanel.initialize();
                                }
                                parentPanel.revalidate();
                            }
                        });
                    this.add(pay);
                }
            }

commonMethod: 
(startLine=500 endLine=506 srcPath=/root/NewExperiment/freecolFilter/01164/src/net/sf/freecol/common/model/Settlement.java)
    /**
     * {@inheritDoc}
     */
    @Override
    public final Tile getTile() {
        return tile;
    }


, Instance #
frags: 
(startLine=678 endLine=696 srcPath=/root/NewExperiment/freecolFilter/01163/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
            if (freeColClient.getMyPlayer().canTrade(goods.getType())) {
                JMenuItem unload = new JMenuItem(Messages.message("unload"));
                unload.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            inGameController.unloadCargo(goods, false);
                            if (parentPanel instanceof CargoPanel) {
                                CargoPanel cargoPanel = (CargoPanel) parentPanel;
                                cargoPanel.initialize();
                                /*
                                  if (cargoPanel.getParentPanel() instanceof ColonyPanel) {
                                  ((ColonyPanel) cargoPanel.getParentPanel()).updateWarehouse();
                                  }
                                */
                            }
                            parentPanel.revalidate();
                        }
                    });
                this.add(unload);
            } else {

(startLine=696 endLine=712 srcPath=/root/NewExperiment/freecolFilter/01163/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
            } else {
                if (goods.getLocation() instanceof Unit
                    && ((Unit)goods.getLocation()).isInEurope()) {
                    JMenuItem pay = new JMenuItem(Messages.message("boycottedGoods.payArrears"));
                    pay.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                inGameController.payArrears(goods.getType());
                                if (parentPanel instanceof CargoPanel) {
                                    CargoPanel cargoPanel = (CargoPanel) parentPanel;
                                    cargoPanel.initialize();
                                }
                                parentPanel.revalidate();
                            }
                        });
                    this.add(pay);
                }
            }

commonMethod: 
(startLine=190 endLine=212 srcPath=/root/NewExperiment/freecolFilter/01164/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
    private boolean addLoadItems(final GoodsLabel goodsLabel, Location loc) {
        final InGameController igc = freeColClient.getInGameController();
        final Goods goods = goodsLabel.getGoods();

        boolean added = false;
        for (Unit unit : loc.getUnitList()) {
            if (unit.isCarrier() && unit.canCarryGoods()
                && unit.canAdd(goods)) {
                final Unit funit = unit;
                StringTemplate template = StringTemplate.template("loadOnTo")
                    .addStringTemplate("%unit%", unit.getLabel());
                JMenuItem menuItem = new JMenuItem(Messages.message(template));
                menuItem.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            igc.loadCargo(goods, funit);
                        }
                    });
                this.add(menuItem);
                added = true;
            }
        }
        return added;
    }


, Instance #
frags: 
(startLine=309 endLine=329 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/ProductionType.java)
        if (INPUT_TAG.equals(tag)) {
            GoodsType type = spec.getType(in, GOODS_TYPE_TAG,
                                          GoodsType.class, (GoodsType)null);
            if (type == null) {
                logger.warning("Invalid goods type: "
                    + in.getAttributeValue(null, GOODS_TYPE_TAG));
            }

            int amount = getAttribute(in, VALUE_TAG, -1);
            if (amount < 0) {
                logger.warning("Invalid amount: "
                    + in.getAttributeValue(null, VALUE_TAG));
            }

            if (type != null && amount >= 0) {
                if (inputs == null) inputs = new ArrayList<AbstractGoods>(1);
                inputs.add(new AbstractGoods(type, amount));
            }
            closeTag(in, INPUT_TAG);

        } else if (OUTPUT_TAG.equals(tag)) {

(startLine=329 endLine=349 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/ProductionType.java)
        } else if (OUTPUT_TAG.equals(tag)) {
            GoodsType type = spec.getType(in, GOODS_TYPE_TAG,
                                          GoodsType.class, (GoodsType)null);
            if (type == null) {
                logger.warning("Invalid goods type: "
                    + in.getAttributeValue(null, GOODS_TYPE_TAG));
            }

            int amount = getAttribute(in, VALUE_TAG, -1);
            if (amount < 0) {
                logger.warning("Invalid amount: "
                    + in.getAttributeValue(null, VALUE_TAG));
            }

            if (type != null && amount >= 00) {
                if (outputs == null) outputs = new ArrayList<AbstractGoods>(1);
                outputs.add(new AbstractGoods(type, amount));
            }
            closeTag(in, OUTPUT_TAG);

        } else {

commonMethod: 
(startLine=188 endLine=197 srcPath=/root/NewExperiment/freecolFilter/01170/src/net/sf/freecol/common/model/ProductionType.java)
    /**
     * Add a new output.
     *
     * @param type The <code>GoodsType</code> to add.
     * @param amount The amount of goods.
     */
    private void addOutput(GoodsType type, int amount) {
        if (outputs == null) outputs = new ArrayList<AbstractGoods>(1);
        outputs.add(new AbstractGoods(type, amount));
    }


, Instance #
frags: 
(startLine=309 endLine=329 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/ProductionType.java)
        if (INPUT_TAG.equals(tag)) {
            GoodsType type = spec.getType(in, GOODS_TYPE_TAG,
                                          GoodsType.class, (GoodsType)null);
            if (type == null) {
                logger.warning("Invalid goods type: "
                    + in.getAttributeValue(null, GOODS_TYPE_TAG));
            }

            int amount = getAttribute(in, VALUE_TAG, -1);
            if (amount < 0) {
                logger.warning("Invalid amount: "
                    + in.getAttributeValue(null, VALUE_TAG));
            }

            if (type != null && amount >= 0) {
                if (inputs == null) inputs = new ArrayList<AbstractGoods>(1);
                inputs.add(new AbstractGoods(type, amount));
            }
            closeTag(in, INPUT_TAG);

        } else if (OUTPUT_TAG.equals(tag)) {

(startLine=329 endLine=349 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/ProductionType.java)
        } else if (OUTPUT_TAG.equals(tag)) {
            GoodsType type = spec.getType(in, GOODS_TYPE_TAG,
                                          GoodsType.class, (GoodsType)null);
            if (type == null) {
                logger.warning("Invalid goods type: "
                    + in.getAttributeValue(null, GOODS_TYPE_TAG));
            }

            int amount = getAttribute(in, VALUE_TAG, -1);
            if (amount < 0) {
                logger.warning("Invalid amount: "
                    + in.getAttributeValue(null, VALUE_TAG));
            }

            if (type != null && amount >= 00) {
                if (outputs == null) outputs = new ArrayList<AbstractGoods>(1);
                outputs.add(new AbstractGoods(type, amount));
            }
            closeTag(in, OUTPUT_TAG);

        } else {

commonMethod: 
(startLine=148 endLine=157 srcPath=/root/NewExperiment/freecolFilter/01170/src/net/sf/freecol/common/model/ProductionType.java)
    /**
     * Add a new input.
     *
     * @param type The <code>GoodsType</code> to add.
     * @param amount The amount of goods.
     */
    private void addInput(GoodsType type, int amount) {
        if (inputs == null) inputs = new ArrayList<AbstractGoods>(1);
        inputs.add(new AbstractGoods(type, amount));
    }


, Instance #
frags: 
(startLine=217 endLine=227 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/StringTemplate.java)
    public StringTemplate add(String key, String value) {
        if (templateType == TemplateType.TEMPLATE) {
            requireKeys(); requireReplacements();
            keys.add(key);
            replacements.add(new StringTemplate(value, TemplateType.KEY));
        } else {
            throw new IllegalArgumentException("Cannot add key-value pair to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }

(startLine=256 endLine=266 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/StringTemplate.java)
    public StringTemplate addName(String key, String value) {
        if (templateType == TemplateType.TEMPLATE) {
            requireKeys(); requireReplacements();
            keys.add(key);
            replacements.add(new StringTemplate(value, TemplateType.NAME));
        } else {
            throw new IllegalArgumentException("Cannot add key-value pair to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }

(startLine=277 endLine=288 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/StringTemplate.java)
    public StringTemplate addName(String key, FreeColObject object) {
        if (templateType == TemplateType.TEMPLATE) {
            requireKeys(); requireReplacements();
            keys.add(key);
            replacements.add(new StringTemplate(object.getId() + ".name",
                                                TemplateType.KEY));
        } else {
            throw new IllegalArgumentException("Cannot add key-value pair to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }

(startLine=329 endLine=339 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/StringTemplate.java)
                                                          StringTemplate template) {
        if (templateType == TemplateType.TEMPLATE) {
            requireKeys(); requireReplacements();
            keys.add(key);
            replacements.add(template);
        } else {
            throw new IllegalArgumentException("Cannot add a key-template pair to a StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }

commonMethod: 
(startLine=153 endLine=161 srcPath=/root/NewExperiment/freecolFilter/01170/src/net/sf/freecol/common/model/StringTemplate.java)
    /**
     * Add a key.
     * 
     * @param key The key to add.
     */
    private void addKey(String key) {
        if (keys == null) keys = new ArrayList<String>();
        keys.add(key);
    }


, Instance #
frags: 
(startLine=217 endLine=227 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/StringTemplate.java)
    public StringTemplate add(String key, String value) {
        if (templateType == TemplateType.TEMPLATE) {
            requireKeys(); requireReplacements();
            keys.add(key);
            replacements.add(new StringTemplate(value, TemplateType.KEY));
        } else {
            throw new IllegalArgumentException("Cannot add key-value pair to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }

(startLine=256 endLine=266 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/StringTemplate.java)
    public StringTemplate addName(String key, String value) {
        if (templateType == TemplateType.TEMPLATE) {
            requireKeys(); requireReplacements();
            keys.add(key);
            replacements.add(new StringTemplate(value, TemplateType.NAME));
        } else {
            throw new IllegalArgumentException("Cannot add key-value pair to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }

(startLine=277 endLine=288 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/StringTemplate.java)
    public StringTemplate addName(String key, FreeColObject object) {
        if (templateType == TemplateType.TEMPLATE) {
            requireKeys(); requireReplacements();
            keys.add(key);
            replacements.add(new StringTemplate(object.getId() + ".name",
                                                TemplateType.KEY));
        } else {
            throw new IllegalArgumentException("Cannot add key-value pair to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }

(startLine=329 endLine=339 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/StringTemplate.java)
                                                          StringTemplate template) {
        if (templateType == TemplateType.TEMPLATE) {
            requireKeys(); requireReplacements();
            keys.add(key);
            replacements.add(template);
        } else {
            throw new IllegalArgumentException("Cannot add a key-template pair to a StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }

commonMethod: 
(startLine=173 endLine=183 srcPath=/root/NewExperiment/freecolFilter/01170/src/net/sf/freecol/common/model/StringTemplate.java)
    /**
     * Add a replacement.
     *
     * @param replacement The <code>StringTemplate</code> replacement to add.
     */
    private void addReplacement(StringTemplate replacement) {
        if (replacements == null) {
            replacements = new ArrayList<StringTemplate>();
        }
        replacements.add(replacement);
    }


, Instance #
frags: 
(startLine=236 endLine=245 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/StringTemplate.java)
    public StringTemplate add(String value) {
        if (templateType == TemplateType.LABEL) {
            requireReplacements();
            replacements.add(new StringTemplate(value, TemplateType.KEY));
        } else {
            throw new IllegalArgumentException("Cannot add a single string to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }

(startLine=298 endLine=307 srcPath=/root/NewExperiment/freecolFilter/01169/src/net/sf/freecol/common/model/StringTemplate.java)
    public StringTemplate addName(String value) {
        if (templateType == TemplateType.LABEL) {
            requireReplacements();
            replacements.add(new StringTemplate(value, TemplateType.NAME));
        } else {
            throw new IllegalArgumentException("Cannot add a single string to StringTemplate type "
                                               + templateType.toString());
        }
        return this;
    }

commonMethod: 
(startLine=173 endLine=183 srcPath=/root/NewExperiment/freecolFilter/01170/src/net/sf/freecol/common/model/StringTemplate.java)
    /**
     * Add a replacement.
     *
     * @param replacement The <code>StringTemplate</code> replacement to add.
     */
    private void addReplacement(StringTemplate replacement) {
        if (replacements == null) {
            replacements = new ArrayList<StringTemplate>();
        }
        replacements.add(replacement);
    }


, Instance #
frags: 
(startLine=394 endLine=403 srcPath=/root/NewExperiment/freecolFilter/01170/src/net/sf/freecol/server/ai/AIMain.java)
        while (fit.hasNext()) {
            FreeColGameObject f = fit.next();
            if ((f instanceof Unit
                 || f instanceof Colony
                 || (f instanceof Player && !((Player)f).isUnknownEnemy()))
                && !aiObjects.containsKey(f.getId())) {
                logger.warning("Missing AIObject for: " + f.getId());
                ok = false;
            }
        }

(startLine=423 endLine=432 srcPath=/root/NewExperiment/freecolFilter/01170/src/net/sf/freecol/server/ai/AIMain.java)
        while (fit.hasNext()) {
            FreeColGameObject f = fit.next();
            if ((f instanceof Unit
                 || f instanceof Colony
                 || (f instanceof Player && !((Player)f).isUnknownEnemy()))
                && !aiObjects.containsKey(f.getId())) {
                logger.warning("Added missing AIObject for: " + f.getId());
                setFreeColGameObject(f.getId(), f);
            }
        }

commonMethod: 
(startLine=139 endLine=157 srcPath=/root/NewExperiment/freecolFilter/01171/src/net/sf/freecol/server/ai/AIMain.java)
    /**
     * Should a <code>FreeColGameObject</code> have a corresponding AI
     * object?
     *
     * Strictly true only for AI players and their units and colonies
     * (not (yet) for native settlements).  However object
     * initialization is not necessarily complete when we arrive here,
     * which means we can not yet use the Colony or Unit owner fields.
     * So the actual test implemented here is somewhat sloppy.
     *
     * @param fcgo The <code>FreeColGameObject</code> to test.
     * @return True if a corresponding AI object is needed.
     */
    private boolean shouldHaveAIObject(FreeColGameObject fcgo) {
        return (fcgo instanceof Colony) ? true
            : (fcgo instanceof Player)  ? ((Player)fcgo).isAI()
            : (fcgo instanceof Unit)    ? true
            : false;
    }


, Instance #
frags: 
(startLine=572 endLine=588 srcPath=/root/NewExperiment/freecolFilter/01179/src/net/sf/freecol/client/ClientOptions.java)
    public void loadOptions(InputStream in) {
        if (in == null) return;
        try {
            XMLStreamReader xsr = XMLInputFactory.newInstance()
                .createXMLStreamReader(in, "UTF-8");
            xsr.nextTag();
            readFromXML(xsr);
        } catch (Exception e) {
            logger.log(Level.WARNING, "Exception when loading options.", e);
        } finally {
            try {
                in.close();
            } catch (Exception e) {
                logger.log(Level.WARNING, "Exception when closing stream.", e);
            }
        }
    }

(startLine=609 endLine=624 srcPath=/root/NewExperiment/freecolFilter/01179/src/net/sf/freecol/client/ClientOptions.java)
    public void updateOptions(InputStream in) {
        try {
            XMLStreamReader xsr = XMLInputFactory.newInstance()
                .createXMLStreamReader(in, "UTF-8");
            xsr.nextTag();
            readFromXML(xsr);
        } catch (Exception e) {
            logger.log(Level.WARNING, "Exception when loading options.", e);
        } finally {
            try {
                if (in != null) in.close();
            } catch (Exception e) {
                logger.log(Level.WARNING, "Exception when closing stream.", e);
            }
        }
    }

commonMethod: 
(startLine=92 endLine=101 srcPath=/root/NewExperiment/freecolFilter/01180/src/net/sf/freecol/common/util/XMLStream.java)
    /**
     * Get the <code>XMLStreamReader</code>.
     *
     * @return The <code>XMLStreamReader</code> created using
     *      the underlying stream provided by the contructor
     *      on this object.
     */
    public XMLStreamReader getXMLStreamReader() {
        return xmlStreamReader;
    }


, Instance #
frags: 
(startLine=1234 endLine=1248 srcPath=/root/NewExperiment/freecolFilter/01179/src/net/sf/freecol/common/model/FreeColObject.java)
        try {
            try {
                TransformerFactory factory = TransformerFactory.newInstance();
                Transformer xmlTransformer = factory.newTransformer();
                StringWriter stringWriter = new StringWriter();
                xmlTransformer.transform(new DOMSource(element), new StreamResult(stringWriter));
                String xml = stringWriter.toString();
                XMLStreamReader xsr = xif.createXMLStreamReader(new StringReader(xml));
                xsr.nextTag();
                readFromXML(xsr);
            } catch (TransformerException e) {
                logger.log(Level.WARNING, "TransformerException", e);
                throw new IllegalStateException("TransformerException");
            }
        } catch (XMLStreamException e) {

(startLine=1263 endLine=1281 srcPath=/root/NewExperiment/freecolFilter/01179/src/net/sf/freecol/common/model/FreeColObject.java)
                                   Specification specification) throws XMLStreamException {
        setSpecification(specification);
        XMLInputFactory xif = XMLInputFactory.newInstance();
        try {
            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer xmlTransformer = factory.newTransformer();
            StringWriter stringWriter = new StringWriter();
            xmlTransformer.transform(new DOMSource(element),
                                     new StreamResult(stringWriter));
            String xml = stringWriter.toString();
            XMLStreamReader xsr
                = xif.createXMLStreamReader(new StringReader(xml));
            xsr.nextTag();
            readFromXML(xsr);
        } catch (TransformerException e) {
            logger.log(Level.WARNING, "TransformerException", e);
            throw new IllegalStateException("TransformerException");
        }
    }

commonMethod: 
(startLine=103 endLine=125 srcPath=/root/NewExperiment/freecolFilter/01180/src/net/sf/freecol/common/util/XMLStream.java)
    /**
     * Closes both the <code>XMLStreamReader</code> and
     * the underlying stream.
     */
    public void close() {
        if (xmlStreamReader != null) {
            try {
                xmlStreamReader.close();
            } catch (Exception e) {
                logger.log(Level.WARNING, "Error closing XMLStreamReader", e);
            }
            xmlStreamReader = null;
        }

        if (inputStream != null) {
            try {
                inputStream.close();
            } catch (Exception e) {
                logger.log(Level.WARNING, "Error closing InputStream", e);
            }
            inputStream = null;
        }
    }


, Instance #
frags: 
(startLine=1660 endLine=1671 srcPath=/root/NewExperiment/freecolFilter/01204/src/net/sf/freecol/server/ai/ColonyPlan.java)
        for (WorkLocationPlan wlp : getFoodPlans()) {
            WorkLocation wl = wlp.getWorkLocation();
            String wlStr = (wl instanceof Building)
                ? ((Building)wl).getType().toString().substring(15)
                : (wl instanceof ColonyTile)
                ? tile.getDirection(((ColonyTile)wl).getWorkTile()).toString()
                : wl.getId();
            sb.append(wlStr
                + ": " + getWorkLocationProduction(wl, wlp.getGoodsType())
                + " " + wlp.getGoodsType().toString().substring(12)
                + "\n");
        }

(startLine=1673 endLine=1684 srcPath=/root/NewExperiment/freecolFilter/01204/src/net/sf/freecol/server/ai/ColonyPlan.java)
        for (WorkLocationPlan wlp : getWorkPlans()) {
            WorkLocation wl = wlp.getWorkLocation();
            String wlStr = (wl instanceof Building)
                ? ((Building)wl).getType().toString().substring(15)
                : (wl instanceof ColonyTile)
                ? tile.getDirection(((ColonyTile)wl).getWorkTile()).toString()
                : wl.getId();
            sb.append(wlStr
                + ": " + getWorkLocationProduction(wl, wlp.getGoodsType())
                + " " + wlp.getGoodsType().toString().substring(12)
                + "\n");
        }

commonMethod: 
(startLine=1594 endLine=1614 srcPath=/root/NewExperiment/freecolFilter/01205/src/net/sf/freecol/server/ai/ColonyPlan.java)
    /**
     * Gets a concise textual description of a location associated with
     * the colony.  No i18n here, this is for debugging purposes.
     *
     * @param loc The <code>Location</code> to describe.
     * @return The text description.
     */
    private String locationDescription(Location loc) {
        if (loc instanceof Building) {
            Building building = (Building)loc;
            return Utils.lastPart(building.getType().toString(), ".");
        } else if (loc instanceof ColonyTile) {
            ColonyTile colonyTile = (ColonyTile)loc;
            Tile workTile = colonyTile.getWorkTile();
            return Utils.lastPart(workTile.getType().toString(), ".")
                + "/"
                + colony.getTile().getDirection(workTile).toString();
        } else {
            return ((FreeColObject)loc).getId();
        }
    }


, Instance #
frags: 
(startLine=1660 endLine=1671 srcPath=/root/NewExperiment/freecolFilter/01204/src/net/sf/freecol/server/ai/ColonyPlan.java)
        for (WorkLocationPlan wlp : getFoodPlans()) {
            WorkLocation wl = wlp.getWorkLocation();
            String wlStr = (wl instanceof Building)
                ? ((Building)wl).getType().toString().substring(15)
                : (wl instanceof ColonyTile)
                ? tile.getDirection(((ColonyTile)wl).getWorkTile()).toString()
                : wl.getId();
            sb.append(wlStr
                + ": " + getWorkLocationProduction(wl, wlp.getGoodsType())
                + " " + wlp.getGoodsType().toString().substring(12)
                + "\n");
        }

(startLine=1673 endLine=1684 srcPath=/root/NewExperiment/freecolFilter/01204/src/net/sf/freecol/server/ai/ColonyPlan.java)
        for (WorkLocationPlan wlp : getWorkPlans()) {
            WorkLocation wl = wlp.getWorkLocation();
            String wlStr = (wl instanceof Building)
                ? ((Building)wl).getType().toString().substring(15)
                : (wl instanceof ColonyTile)
                ? tile.getDirection(((ColonyTile)wl).getWorkTile()).toString()
                : wl.getId();
            sb.append(wlStr
                + ": " + getWorkLocationProduction(wl, wlp.getGoodsType())
                + " " + wlp.getGoodsType().toString().substring(12)
                + "\n");
        }

commonMethod: 
(startLine=94 endLine=107 srcPath=/root/NewExperiment/freecolFilter/01205/src/net/sf/freecol/common/util/Utils.java)
    /**
     * Gets the last part of a string after a supplied delimiter.
     *
     * @param s The string to operate on.
     * @param delim The delimiter.
     * @return The last part of the string after the last instance of
     *     the delimiter, or the original string if the delimiter is
     *     not present.
     */
    public static String lastPart(String s, String delim) {
        int last = (s == null) ? -1 : s.lastIndexOf(delim);
        return (last > 0) ? s.substring(last+delim.length(), s.length())
            : s;
    }


, Instance #
frags: 
(startLine=1601 endLine=1606 srcPath=/root/NewExperiment/freecolFilter/01206/src/net/sf/freecol/server/ai/ColonyPlan.java)
            if ((other = trySwapExpert(u1, experts, col)) != null) {
                report.append("Swapped ").append(u1.getId()).append("(")
                    .append(Utils.lastPart(u1.getType().toString(), "."))
                    .append(") for ").append(other).append("\n");
                experts.remove(u1);
            } else if ((other = trySwapExpert(u1, nonExperts, col)) != null) {

(startLine=1606 endLine=1611 srcPath=/root/NewExperiment/freecolFilter/01206/src/net/sf/freecol/server/ai/ColonyPlan.java)
            } else if ((other = trySwapExpert(u1, nonExperts, col)) != null) {
                report.append("Swapped ").append(u1.getId()).append("(")
                    .append(Utils.lastPart(u1.getType().toString(), "."))
                    .append(") for ").append(other).append("\n");
                experts.remove(u1);
            } else {

commonMethod: 
(startLine=170 endLine=178 srcPath=/root/NewExperiment/freecolFilter/01207/src/net/sf/freecol/common/model/FreeColGameObjectType.java)
    /**
     * Gets the usual suffix of this object's identifier, that is everything
     * after the last ".".
     *
     * @return The usual identifier suffix.
     */
    public final String getSuffix() {
        return Utils.lastPart(getId(), ".");
    }


, Instance #
frags: 
(startLine=1698 endLine=1706 srcPath=/root/NewExperiment/freecolFilter/01206/src/net/sf/freecol/server/ai/ColonyPlan.java)
        for (WorkLocationPlan wlp : getFoodPlans()) {
            WorkLocation wl = wlp.getWorkLocation();
            sb.append(locationDescription(wl))
                .append(": ")
                .append(wl.getGenericPotential(wlp.getGoodsType()))
                .append(" ")
                .append(Utils.lastPart(wlp.getGoodsType().toString(), "."))
                .append("\n");
        }

(startLine=1708 endLine=1716 srcPath=/root/NewExperiment/freecolFilter/01206/src/net/sf/freecol/server/ai/ColonyPlan.java)
        for (WorkLocationPlan wlp : getWorkPlans()) {
            WorkLocation wl = wlp.getWorkLocation();
            sb.append(locationDescription(wl))
                .append(": ")
                .append(wl.getGenericPotential(wlp.getGoodsType()))
                .append(" ")
                .append(Utils.lastPart(wlp.getGoodsType().toString(), "."))
                .append("\n");
        }

commonMethod: 
(startLine=170 endLine=178 srcPath=/root/NewExperiment/freecolFilter/01207/src/net/sf/freecol/common/model/FreeColGameObjectType.java)
    /**
     * Gets the usual suffix of this object's identifier, that is everything
     * after the last ".".
     *
     * @return The usual identifier suffix.
     */
    public final String getSuffix() {
        return Utils.lastPart(getId(), ".");
    }


, Instance #
frags: 
(startLine=2532 endLine=2580 srcPath=/root/NewExperiment/freecolFilter/01222/src/net/sf/freecol/server/control/InGameController.java)
                                     Goods goods, int amount) {
        ChangeSet cs = new ChangeSet();
        csVisit(serverPlayer, settlement, 0, cs);

        TradeSession session
            = TradeSession.lookup(TradeSession.class, unit, settlement);
        if (session == null) {
            return DOMMessage.clientError("Trying to buy without opening a transaction session");
        }
        if (!session.getBuy()) {
            return DOMMessage.clientError("Trying to buy in a session where buying is not allowed.");
        }
        if (!unit.hasSpaceLeft()) {
            return DOMMessage.clientError("Unit is full, unable to buy.");
        }

        // Check that this is the agreement that was made
        AIPlayer ai = getFreeColServer().getAIPlayer(settlement.getOwner());
        int returnGold = ai.buyProposition(unit, settlement, goods, amount);
        if (returnGold != amount) {
            return DOMMessage.clientError("This was not the price we agreed upon! Cheater?");
        }
        if (!serverPlayer.checkGold(amount)) { // Check this is funded.
            return DOMMessage.clientError("Insufficient gold to buy.");
        }

        // Valid, make the trade.
        moveGoods(goods, unit);
        cs.add(See.perhaps(), unit);

        Player settlementPlayer = settlement.getOwner();
        Tile tile = settlement.getTile();
        settlement.updateWantedGoods();
        settlementPlayer.modifyGold(amount);
        serverPlayer.modifyGold(-amount);
        cs.addTension(See.perhaps(),//-til,+til
            ((ServerIndianSettlement)settlement).modifyAlarm(serverPlayer,
                -amount / 50));
        tile.updateIndianSettlement(serverPlayer);
        cs.add(See.only(serverPlayer), tile);
        cs.addPartial(See.only(serverPlayer), serverPlayer, "gold");
        session.setBuy();
        logger.finest(serverPlayer.getName() + " " + unit + " buys " + goods
                      + " at " + settlement.getName() + " for " + amount);

        // Others can see the unit capacity.
        sendToOthers(serverPlayer, cs);
        return cs.build(serverPlayer);
    }

(startLine=2594 endLine=2638 srcPath=/root/NewExperiment/freecolFilter/01222/src/net/sf/freecol/server/control/InGameController.java)
                                    Goods goods, int amount) {
        ChangeSet cs = new ChangeSet();
        csVisit(serverPlayer, settlement, 0, cs);

        TradeSession session
            = TransactionSession.lookup(TradeSession.class, unit, settlement);
        if (session == null) {
            return DOMMessage.clientError("Trying to sell without opening a transaction session");
        }
        if (!session.getSell()) {
            return DOMMessage.clientError("Trying to sell in a session where selling is not allowed.");
        }

        // Check that the gold is the agreed amount
        AIPlayer ai = getFreeColServer().getAIPlayer(settlement.getOwner());
        int returnGold = ai.sellProposition(unit, settlement, goods, amount);
        if (returnGold != amount) {
            return DOMMessage.clientError("This was not the price we agreed upon! Cheater?");
        }

        // Valid, make the trade.
        moveGoods(goods, settlement);
        cs.add(See.perhaps(), unit);

        Player settlementPlayer = settlement.getOwner();
        settlementPlayer.modifyGold(-amount);
        serverPlayer.modifyGold(amount);
        cs.addTension(See.perhaps(),//-til,+til
            ((ServerIndianSettlement)settlement).modifyAlarm(serverPlayer,
                -amount / 500));
        Tile tile = settlement.getTile();
        settlement.updateWantedGoods();
        tile.updateIndianSettlement(serverPlayer);
        cs.add(See.only(serverPlayer), tile);
        cs.addPartial(See.only(serverPlayer), serverPlayer, "gold");
        session.setSell();
        cs.addSale(serverPlayer, settlement, goods.getType(),
                   (int) Math.round((float) amount / goods.getAmount()));
        logger.finest(serverPlayer.getName() + " " + unit + " sells " + goods
                      + " at " + settlement.getName() + " for " + amount);

        // Others can see the unit capacity.
        sendToOthers(serverPlayer, cs);
        return cs.build(serverPlayer);
    }

commonMethod: 
(startLine=304 endLine=334 srcPath=/root/NewExperiment/freecolFilter/01223/src/net/sf/freecol/server/model/ServerIndianSettlement.java)
    /**
     * Modifies the alarm level towards the given player due to an event
     * at this settlement, and propagate the alarm upwards through the
     * tribe.
     *
     * +til: Handles tile visibility changes.
     *
     * @param serverPlayer The <code>ServerPlayer</code> to modify alarm for.
     * @param add The amount to add to the current alarm level.
     * @param propagate If true, propagate the alarm change upward to the
     *     owning player.
     * @param cs A <code>ChangeSet</code> to update.
     */
    public void csModifyAlarm(Player player, int add, boolean propagate,
                              ChangeSet cs) {
        boolean change = changeAlarm(player, add);//-til
        if (change && player.hasExplored(getTile())) {
            cs.add(See.perhaps(), this);
            getTile().updatePlayerExploredTiles();//+til
        }

        if (propagate) {
            // Propagate alarm upwards.  Capital has a greater impact.
            ((ServerPlayer)getOwner()).csModifyTension(player,
                ((isCapital()) ? add : add/2), this, cs);
        }
        logger.finest("Alarm at " + getName()
            + " toward " + player.getName()
            + " modified by " + add
            + " now = " + getAlarm(player).getValue());
    }


, Instance #
frags: 
(startLine=1072 endLine=1090 srcPath=/root/NewExperiment/freecolFilter/01222/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (old != stance) {
            int modifier = old.getTensionModifier(stance);
            setStance(otherPlayer, stance);
            if (modifier != 0) {
                cs.addTension(See.perhaps(),//-til,+til
                    modifyTension(otherPlayer, modifier));
            }
            logger.info("Stance modification " + getName()
                + " " + old.toString() + " -> " + stance.toString()
                + " wrt " + otherPlayer.getName());
            this.addStanceChange(other);
            cs.addMessage(See.only(other),
                new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,
                    "model.diplomacy." + stance + ".declared", this)
                .addStringTemplate("%nation%", getNationName()));
            cs.addStance(See.only(this), this, stance, otherPlayer);
            cs.addStance(See.only(other), this, stance, otherPlayer);
            change = true;
        }

(startLine=1091 endLine=1109 srcPath=/root/NewExperiment/freecolFilter/01222/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (symmetric && (old = otherPlayer.getStance(this)) != stance) {
            int modifier = old.getTensionModifier(stance);
            otherPlayer.setStance(this, stance);
            if (modifier != 0) {
                cs.addTension(See.perhaps(),//-til,+til
                    otherPlayer.modifyTension(this, modifier));
            }
            logger.info("Stance modification " + otherPlayer.getName()
                + " " + old.toString() + " -> " + stance.toString()
                + " wrt " + getName() + " (symmetric)");
            other.addStanceChange(this);
            cs.addMessage(See.only(this),
                new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,
                    "model.diplomacy." + stance + ".declared", otherPlayer)
                .addStringTemplate("%nation%", otherPlayer.getNationName()));
            cs.addStance(See.only(this), otherPlayer, stance, this);
            cs.addStance(See.only(other), otherPlayer, stance, this);
            change = true;
        }

commonMethod: 
(startLine=1112 endLine=1123 srcPath=/root/NewExperiment/freecolFilter/01223/src/net/sf/freecol/server/model/ServerPlayer.java)
    /**
     * Modifies the hostility against the given player.
     *
     * +til: Handles tile modifications.
     *
     * @param player The <code>Player</code>.
     * @param add The amount to add to the current tension level.
     * @param cs A <code>ChangeSet</code> to update.
     */
    public void csModifyTension(Player player, int add, ChangeSet cs) {
        csModifyTension(player, add, null, cs);
    }


, Instance #
frags: 
(startLine=426 endLine=434 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((attacker = game.getFreeColGameObject(str, Unit.class)) == null
                && (attacker = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted attacker: " + str);
                return null;
            }
        }

(startLine=439 endLine=447 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((defender = game.getFreeColGameObject(str, Unit.class)) == null
                && (defender = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted defender: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=536 endLine=553 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/common/model/Game.java)
    /**
     * Adds the specified player to the game.
     *
     * @param player The <code>Player</code> to add.
     * @return True if the player was added.
     */
    public boolean addPlayer(Player player) {
        if (player.isAI() || canAddNewPlayer()) {
            players.add(player);
            Nation nation = getSpecification().getNation(player.getNationId());
            nationOptions.getNations().put(nation, NationState.NOT_AVAILABLE);
            if (currentPlayer == null) currentPlayer = player;
            return true;
        }
        logger.warning("Game already full, but tried to add: "
            + player.getName());
        return false;
    }


, Instance #
frags: 
(startLine=426 endLine=434 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((attacker = game.getFreeColGameObject(str, Unit.class)) == null
                && (attacker = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted attacker: " + str);
                return null;
            }
        }

(startLine=439 endLine=447 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((defender = game.getFreeColGameObject(str, Unit.class)) == null
                && (defender = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted defender: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=1679 endLine=1682 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/client/gui/GUI.java)
    public boolean onScreen(Tile tileToCheck) {
        if (mapViewer == null) return true; // Lets pretend.
        return mapViewer.onScreen(tileToCheck);
    }


, Instance #
frags: 
(startLine=426 endLine=434 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((attacker = game.getFreeColGameObject(str, Unit.class)) == null
                && (attacker = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted attacker: " + str);
                return null;
            }
        }

(startLine=439 endLine=447 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((defender = game.getFreeColGameObject(str, Unit.class)) == null
                && (defender = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted defender: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=1689 endLine=1692 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/client/gui/GUI.java)
    public void setFocusImmediately(Tile tileToFocus) {
        if (mapViewer == null) return;
        mapViewer.setFocusImmediately(tileToFocus);
    }


, Instance #
frags: 
(startLine=426 endLine=434 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((attacker = game.getFreeColGameObject(str, Unit.class)) == null
                && (attacker = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted attacker: " + str);
                return null;
            }
        }

(startLine=439 endLine=447 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((defender = game.getFreeColGameObject(str, Unit.class)) == null
                && (defender = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted defender: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=782 endLine=813 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Initialize this object from an XML-representation of this object.
     *
     * @param element An XML-element that will be used to initialize
     *      this object.
     */
    public void readFromXMLElement(Element element) {
        FreeColXMLReader xr = null;
        try {
            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer xmlTransformer = factory.newTransformer();
            StringWriter stringWriter = new StringWriter();
            xmlTransformer.transform(new DOMSource(element),
                                     new StreamResult(stringWriter));
            String xml = stringWriter.toString();
            xr = new FreeColXMLReader(new StringReader(xml));
            xr.nextTag();
            readFromXML(xr);

        } catch (IOException ioe) {
            logger.log(Level.WARNING, "IOException", ioe);
            throw new IllegalStateException("IOException");
        } catch (TransformerException te) {
            logger.log(Level.WARNING, "TransformerException", te);
            throw new IllegalStateException("TransformerException");
        } catch (XMLStreamException xe) {
            logger.log(Level.WARNING, "XMLStreamException", xe);
            throw new IllegalStateException("XMLStreamException");
        } finally {
            if (xr != null) xr.close();
        }
    }


, Instance #
frags: 
(startLine=426 endLine=434 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((attacker = game.getFreeColGameObject(str, Unit.class)) == null
                && (attacker = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted attacker: " + str);
                return null;
            }
        }

(startLine=439 endLine=447 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((defender = game.getFreeColGameObject(str, Unit.class)) == null
                && (defender = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted defender: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=766 endLine=779 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Version of readId(FreeColXMLReader) that reads from an element.
     *
     * To be replaced with just:
     *   element.getAttribute(FreeColObject.ID_ATTRIBUTE_TAG);
     *
     * @param element An element to read the id attribute from.
     * @return The identifier attribute value.
     */
    public static String readId(Element element) {
        String id = element.getAttribute(ID_ATTRIBUTE_TAG);
        if (id == null) id = element.getAttribute(ID_ATTRIBUTE);
        return id;
    }


, Instance #
frags: 
(startLine=426 endLine=434 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((attacker = game.getFreeColGameObject(str, Unit.class)) == null
                && (attacker = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted attacker: " + str);
                return null;
            }
        }

(startLine=439 endLine=447 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            if ((defender = game.getFreeColGameObject(str, Unit.class)) == null
                && (defender = selectUnitFromElement(game, element, str)) == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " incorrectly omitted defender: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=889 endLine=904 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/client/gui/GUI.java)
    /**
     * Animate a unit attack.
     *
     * @param attacker The attacking <code>Unit</code>.
     * @param defender The defending <code>Unit</code>.
     * @param attackerTile The <code>Tile</code> to show the attacker on.
     * @param defenderTile The <code>Tile</code> to show the defender on.
     * @param success Did the attack succeed?
     */
    public void animateUnitAttack(Unit attacker, Unit defender,
                                  Tile attackerTile, Tile defenderTile,
                                  boolean success) {
        if (canvas == null) return;
        Animations.unitAttack(this, attacker, defender,
                              attackerTile, defenderTile, success);
    }


, Instance #
frags: 
(startLine=452 endLine=460 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            attackerTile = game.getFreeColGameObject(str, Tile.class);
            if (attackerTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find attacker tile: " + str);
                return null;
            }
        }

(startLine=465 endLine=473 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            defenderTile = game.getFreeColGameObject(str, Tile.class);
            if (defenderTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find defender tile: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=1679 endLine=1682 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/client/gui/GUI.java)
    public boolean onScreen(Tile tileToCheck) {
        if (mapViewer == null) return true; // Lets pretend.
        return mapViewer.onScreen(tileToCheck);
    }


, Instance #
frags: 
(startLine=452 endLine=460 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            attackerTile = game.getFreeColGameObject(str, Tile.class);
            if (attackerTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find attacker tile: " + str);
                return null;
            }
        }

(startLine=465 endLine=473 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            defenderTile = game.getFreeColGameObject(str, Tile.class);
            if (defenderTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find defender tile: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=170 endLine=185 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/client/control/InGameInputHandler.java)
    /**
     * Refresh the canvas.
     *
     * @param focus If true, request the focus.
     */
    private void refreshCanvas(final boolean focus) {
        SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    getGUI().refresh();

                    if (focus && !getGUI().isShowingSubPanel()) {
                        getGUI().requestFocusInWindow();
                    }
                }
            });
    }


, Instance #
frags: 
(startLine=452 endLine=460 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            attackerTile = game.getFreeColGameObject(str, Tile.class);
            if (attackerTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find attacker tile: " + str);
                return null;
            }
        }

(startLine=465 endLine=473 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            defenderTile = game.getFreeColGameObject(str, Tile.class);
            if (defenderTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find defender tile: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=154 endLine=168 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/client/control/InGameInputHandler.java)
    /**
     * Wrapper for SwingUtilities.invokeAndWait.  This has to handle the
     * case where we are already in the EDT.
     *
     * @param runnable A <code>Runnable</code> to run.
     */
    private void invokeAndWait(Runnable runnable) {
        if (SwingUtilities.isEventDispatchThread()) {
            runnable.run();
        } else {
            try {
                SwingUtilities.invokeAndWait(runnable);
            } catch (Exception e) {}
        }
    }


, Instance #
frags: 
(startLine=452 endLine=460 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            attackerTile = game.getFreeColGameObject(str, Tile.class);
            if (attackerTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find attacker tile: " + str);
                return null;
            }
        }

(startLine=465 endLine=473 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            defenderTile = game.getFreeColGameObject(str, Tile.class);
            if (defenderTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find defender tile: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=1689 endLine=1692 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/client/gui/GUI.java)
    public void setFocusImmediately(Tile tileToFocus) {
        if (mapViewer == null) return;
        mapViewer.setFocusImmediately(tileToFocus);
    }


, Instance #
frags: 
(startLine=452 endLine=460 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            attackerTile = game.getFreeColGameObject(str, Tile.class);
            if (attackerTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find attacker tile: " + str);
                return null;
            }
        }

(startLine=465 endLine=473 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            defenderTile = game.getFreeColGameObject(str, Tile.class);
            if (defenderTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find defender tile: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=766 endLine=779 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Version of readId(FreeColXMLReader) that reads from an element.
     *
     * To be replaced with just:
     *   element.getAttribute(FreeColObject.ID_ATTRIBUTE_TAG);
     *
     * @param element An element to read the id attribute from.
     * @return The identifier attribute value.
     */
    public static String readId(Element element) {
        String id = element.getAttribute(ID_ATTRIBUTE_TAG);
        if (id == null) id = element.getAttribute(ID_ATTRIBUTE);
        return id;
    }


, Instance #
frags: 
(startLine=452 endLine=460 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            attackerTile = game.getFreeColGameObject(str, Tile.class);
            if (attackerTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find attacker tile: " + str);
                return null;
            }
        }

(startLine=465 endLine=473 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            defenderTile = game.getFreeColGameObject(str, Tile.class);
            if (defenderTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find defender tile: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=782 endLine=813 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Initialize this object from an XML-representation of this object.
     *
     * @param element An XML-element that will be used to initialize
     *      this object.
     */
    public void readFromXMLElement(Element element) {
        FreeColXMLReader xr = null;
        try {
            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer xmlTransformer = factory.newTransformer();
            StringWriter stringWriter = new StringWriter();
            xmlTransformer.transform(new DOMSource(element),
                                     new StreamResult(stringWriter));
            String xml = stringWriter.toString();
            xr = new FreeColXMLReader(new StringReader(xml));
            xr.nextTag();
            readFromXML(xr);

        } catch (IOException ioe) {
            logger.log(Level.WARNING, "IOException", ioe);
            throw new IllegalStateException("IOException");
        } catch (TransformerException te) {
            logger.log(Level.WARNING, "TransformerException", te);
            throw new IllegalStateException("TransformerException");
        } catch (XMLStreamException xe) {
            logger.log(Level.WARNING, "XMLStreamException", xe);
            throw new IllegalStateException("XMLStreamException");
        } finally {
            if (xr != null) xr.close();
        }
    }


, Instance #
frags: 
(startLine=452 endLine=460 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            attackerTile = game.getFreeColGameObject(str, Tile.class);
            if (attackerTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find attacker tile: " + str);
                return null;
            }
        }

(startLine=465 endLine=473 srcPath=/root/NewExperiment/freecolFilter/01238/src/net/sf/freecol/client/control/InGameInputHandler.java)
        } else {
            defenderTile = game.getFreeColGameObject(str, Tile.class);
            if (defenderTile == null) {
                logger.warning("Attack animation"
                    + " for: " + client.getMyPlayer().getId()
                    + " can not find defender tile: " + str);
                return null;
            }
        }

commonMethod: 
(startLine=889 endLine=904 srcPath=/root/NewExperiment/freecolFilter/01239/src/net/sf/freecol/client/gui/GUI.java)
    /**
     * Animate a unit attack.
     *
     * @param attacker The attacking <code>Unit</code>.
     * @param defender The defending <code>Unit</code>.
     * @param attackerTile The <code>Tile</code> to show the attacker on.
     * @param defenderTile The <code>Tile</code> to show the defender on.
     * @param success Did the attack succeed?
     */
    public void animateUnitAttack(Unit attacker, Unit defender,
                                  Tile attackerTile, Tile defenderTile,
                                  boolean success) {
        if (canvas == null) return;
        Animations.unitAttack(this, attacker, defender,
                              attackerTile, defenderTile, success);
    }


, Instance #
frags: 
(startLine=3913 endLine=3928 srcPath=/root/NewExperiment/freecolFilter/01270/src/net/sf/freecol/server/model/ServerPlayer.java)
        if (isIndian()) {
            // Ignore native-to-native contacts.
            if (other.isIndian()) {
                return false;
            } else {
                String key = other.getContactKey(this);
                if (key != null) {
                    cs.addMessage(See.only(other),
                        new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,
                            key, other, this));
                }
                cs.addHistory(other, new HistoryEvent(turn,
                        HistoryEvent.EventType.MEET_NATION, other)
                    .addStringTemplate("%nation%", getNationName()));
            }
        } else { // (serverPlayer.isEuropean)

(startLine=3928 endLine=3940 srcPath=/root/NewExperiment/freecolFilter/01270/src/net/sf/freecol/server/model/ServerPlayer.java)
        } else { // (serverPlayer.isEuropean)
            String key = getContactKey(other);
            if (key != null) {
                cs.addMessage(See.only(this),
                    new ModelMessage(ModelMessage.MessageType.FOREIGN_DIPLOMACY,
                        key, this, other));
            }

            // History event for European players.
            cs.addHistory(this, new HistoryEvent(turn,
                    HistoryEvent.EventType.MEET_NATION, other)
                .addStringTemplate("%nation%", other.getNationName()));
        }

commonMethod: 
(startLine=1317 endLine=1328 srcPath=/root/NewExperiment/freecolFilter/01271/src/net/sf/freecol/server/control/ChangeSet.java)
    /**
     * Helper function to add a Message to a ChangeSet.
     *
     * @param see The visibility of this change.
     * @param cp The priority of this change.
     * @param message The <code>Message</code> to add.
     * @return The updated <code>ChangeSet</code>.
     */
    public ChangeSet add(See see, ChangePriority cp, DOMMessage message) {
        changes.add(new MessageChange(see, cp, message));
        return this;
    }


, Instance #
frags: 
(startLine=434 endLine=443 srcPath=/root/NewExperiment/freecolFilter/01293/src/net/sf/freecol/client/gui/panel/Flag.java)
        } else if (stars == 2) {
            unionPath = new GeneralPath();
            GeneralPath newStar = getStar();
            newStar.transform(AffineTransform.getScaleInstance(1.5, 1.5));
            unionPath.append(newStar, false);
            newStar = getStar();
            newStar.transform(AffineTransform.getScaleInstance(1.5, 1.5));
            newStar.transform(AffineTransform.getTranslateInstance(radius, 0));
            unionPath.append(newStar, false);
        } else if (stars < 14) {

(startLine=495 endLine=505 srcPath=/root/NewExperiment/freecolFilter/01293/src/net/sf/freecol/client/gui/panel/Flag.java)
        } else if (stars == 2) {
            unionPath = new GeneralPath();
            GeneralPath newStar = getStar();
            newStar.transform(AffineTransform.getScaleInstance(1.5, 1.5));
            unionPath.append(newStar, false);
            newStar = getStar();
            newStar.transform(AffineTransform.getScaleInstance(1.5, 1.5));
            newStar.transform(AffineTransform.getTranslateInstance(radius, 0));
            unionPath.append(newStar, false);
            unionPath.transform(AffineTransform.getTranslateInstance(r, HEIGHT / 2));
        } else if (stars < 14) {

commonMethod: 
(startLine=912 endLine=923 srcPath=/root/NewExperiment/freecolFilter/01294/src/net/sf/freecol/client/gui/panel/Flag.java)
    /**
     * Centers the given path on the given point (x,y).
     *
     * @param path The path to center.
     * @param x The x coordinate of the center.
     * @param y The y coordinate of the center.
     */
    private void center(GeneralPath path, double x, double y) {
        double dx = x - path.getBounds().getX() - path.getBounds().getWidth() / 2;
        double dy = y - path.getBounds().getY() - path.getBounds().getHeight() / 2;
        path.transform(AffineTransform.getTranslateInstance(dx, dy));
    }


, Instance #
frags: 
(startLine=416 endLine=442 srcPath=/root/NewExperiment/freecolFilter/01312/src/net/sf/freecol/common/model/Colony.java)
            if (alone) {
                for (ProductionType pt
                         : wl.getAvailableProductionTypes(false)) {
                    if (sb != null) {
                        sb.append("\n      try=").append(pt);
                    }
                    for (GoodsType gt : workTypes) {
                        if (sb != null) {
                            sb.append(" ").append(gt.getSuffix());
                        }
                        if (pt.getOutput(gt) == null) continue;
                        int amount = getMinimumGoodsCount(pt.getInputs());
                        amount = Math.min(amount, 
                            wl.getPotentialProduction(gt, type));
                        if (sb != null) {
                            sb.append("=").append(amount);
                            if (bestAmount < amount) sb.append("!");
                        }
                        if (bestAmount < amount) {
                            bestAmount = amount;
                            best.workLocation = wl;
                            best.productionType = pt;
                            best.workType = gt;
                        }
                    }
                }
            } else {

(startLine=442 endLine=466 srcPath=/root/NewExperiment/freecolFilter/01312/src/net/sf/freecol/common/model/Colony.java)
            } else {
                ProductionType pt = wl.getProductionType();
                if (sb != null) {
                    sb.append("\n      fixed=").append(pt);
                }
                for (GoodsType gt : workTypes) {
                    if (sb != null) {
                        sb.append(" ").append(gt.getSuffix());
                    }
                    if (pt.getOutput(gt) == null) continue;
                    int amount = getMinimumGoodsCount(pt.getInputs());
                    amount = Math.min(amount, 
                        wl.getPotentialProduction(gt, type));
                    if (sb != null) {
                        sb.append("=").append(amount);
                        if (bestAmount < amount) sb.append("!");
                    }
                    if (bestAmount < amount) {
                        bestAmount = amount;
                        best.workLocation = wl;
                        best.productionType = pt;
                        best.workType = gt;
                    }
                }
            }

commonMethod: 
(startLine=498 endLine=560 srcPath=/root/NewExperiment/freecolFilter/01313/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Check a particular work location for the best available production
     * for the given unit.
     *
     * @param unit The <code>Unit</code> to produce the goods.
     * @param wl The <code>WorkLocation</code> to check.
     * @param best The best <code>Occupation</code> found so far.
     * @param bestAmount The amount of goods produced.
     * @param workTypes A collection of <code>GoodsType</code> to
     *     consider producing.
     * @param sb An optional <code>StringBuffer</code> to log to.
     * @return The updated best amount of production found.
     */
    private int getOccupationAt(Unit unit, WorkLocation wl,
                                Occupation best, int bestAmount,
                                Collection<GoodsType> workTypes,
                                StringBuffer sb) {
        final UnitType type = unit.getType();

        // Can the unit work at this wl?
        boolean present = unit.getLocation() == wl;
        if (sb != null) {
            sb.append("\n    ").append(wl);
            if (!present && !wl.canAdd(unit)) sb.append(" no-add");
        }
        if (!present && !wl.canAdd(unit)) return bestAmount;

        // Can the unit determine the production type at this WL?
        // This will be true if the unit is going to be alone or
        // if the production type is as yet unset.
        boolean alone = wl.getProductionType() == null
            || wl.isEmpty()
            || (present && wl.getUnitCount() == 1);
        if (sb != null) sb.append(" alone=").append(alone);

        // Try the available production types for the best production.
        List<ProductionType> productionTypes = new ArrayList<ProductionType>();
        if (alone) {
            productionTypes.addAll(wl.getAvailableProductionTypes(false));
        } else {
            productionTypes.add(wl.getProductionType());
        }
        for (ProductionType pt : productionTypes) {
            if (sb != null) sb.append("\n      try=").append(pt);
            for (GoodsType gt : workTypes) {
                if (pt.getOutput(gt) == null) continue;
                int amount = getMinimumGoodsCount(pt.getInputs());
                amount = Math.min(amount, wl.getPotentialProduction(gt, type));
                if (sb != null) {
                    sb.append(" ").append(gt.getSuffix())
                        .append("=").append(amount);
                    if (bestAmount < amount) sb.append("!");
                }
                if (bestAmount < amount) {
                    bestAmount = amount;
                    best.workLocation = wl;
                    best.productionType = pt;
                    best.workType = gt;
                }
            }
        }
        return bestAmount;   
    }


, Instance #
frags: 
(startLine=416 endLine=442 srcPath=/root/NewExperiment/freecolFilter/01312/src/net/sf/freecol/common/model/Colony.java)
            if (alone) {
                for (ProductionType pt
                         : wl.getAvailableProductionTypes(false)) {
                    if (sb != null) {
                        sb.append("\n      try=").append(pt);
                    }
                    for (GoodsType gt : workTypes) {
                        if (sb != null) {
                            sb.append(" ").append(gt.getSuffix());
                        }
                        if (pt.getOutput(gt) == null) continue;
                        int amount = getMinimumGoodsCount(pt.getInputs());
                        amount = Math.min(amount, 
                            wl.getPotentialProduction(gt, type));
                        if (sb != null) {
                            sb.append("=").append(amount);
                            if (bestAmount < amount) sb.append("!");
                        }
                        if (bestAmount < amount) {
                            bestAmount = amount;
                            best.workLocation = wl;
                            best.productionType = pt;
                            best.workType = gt;
                        }
                    }
                }
            } else {

(startLine=442 endLine=466 srcPath=/root/NewExperiment/freecolFilter/01312/src/net/sf/freecol/common/model/Colony.java)
            } else {
                ProductionType pt = wl.getProductionType();
                if (sb != null) {
                    sb.append("\n      fixed=").append(pt);
                }
                for (GoodsType gt : workTypes) {
                    if (sb != null) {
                        sb.append(" ").append(gt.getSuffix());
                    }
                    if (pt.getOutput(gt) == null) continue;
                    int amount = getMinimumGoodsCount(pt.getInputs());
                    amount = Math.min(amount, 
                        wl.getPotentialProduction(gt, type));
                    if (sb != null) {
                        sb.append("=").append(amount);
                        if (bestAmount < amount) sb.append("!");
                    }
                    if (bestAmount < amount) {
                        bestAmount = amount;
                        best.workLocation = wl;
                        best.productionType = pt;
                        best.workType = gt;
                    }
                }
            }

commonMethod: 
(startLine=432 endLine=440 srcPath=/root/NewExperiment/freecolFilter/01313/src/net/sf/freecol/common/model/Colony.java)
    private void accumulateChoices(Collection<GoodsType> workTypes,
                                   Collection<GoodsType> tried,
                                   List<Collection<GoodsType>> result) {
        workTypes.removeAll(tried);
        if (!workTypes.isEmpty()) {
            result.add(workTypes);
            tried.addAll(workTypes);
        }
    }


, Instance #
frags: 
(startLine=416 endLine=442 srcPath=/root/NewExperiment/freecolFilter/01312/src/net/sf/freecol/common/model/Colony.java)
            if (alone) {
                for (ProductionType pt
                         : wl.getAvailableProductionTypes(false)) {
                    if (sb != null) {
                        sb.append("\n      try=").append(pt);
                    }
                    for (GoodsType gt : workTypes) {
                        if (sb != null) {
                            sb.append(" ").append(gt.getSuffix());
                        }
                        if (pt.getOutput(gt) == null) continue;
                        int amount = getMinimumGoodsCount(pt.getInputs());
                        amount = Math.min(amount, 
                            wl.getPotentialProduction(gt, type));
                        if (sb != null) {
                            sb.append("=").append(amount);
                            if (bestAmount < amount) sb.append("!");
                        }
                        if (bestAmount < amount) {
                            bestAmount = amount;
                            best.workLocation = wl;
                            best.productionType = pt;
                            best.workType = gt;
                        }
                    }
                }
            } else {

(startLine=442 endLine=466 srcPath=/root/NewExperiment/freecolFilter/01312/src/net/sf/freecol/common/model/Colony.java)
            } else {
                ProductionType pt = wl.getProductionType();
                if (sb != null) {
                    sb.append("\n      fixed=").append(pt);
                }
                for (GoodsType gt : workTypes) {
                    if (sb != null) {
                        sb.append(" ").append(gt.getSuffix());
                    }
                    if (pt.getOutput(gt) == null) continue;
                    int amount = getMinimumGoodsCount(pt.getInputs());
                    amount = Math.min(amount, 
                        wl.getPotentialProduction(gt, type));
                    if (sb != null) {
                        sb.append("=").append(amount);
                        if (bestAmount < amount) sb.append("!");
                    }
                    if (bestAmount < amount) {
                        bestAmount = amount;
                        best.workLocation = wl;
                        best.productionType = pt;
                        best.workType = gt;
                    }
                }
            }

commonMethod: 
(startLine=442 endLine=447 srcPath=/root/NewExperiment/freecolFilter/01313/src/net/sf/freecol/common/model/Colony.java)
    private void accumulateChoice(GoodsType workType,
                                  Collection<GoodsType> tried,
                                  List<Collection<GoodsType>> result) {
        if (workType == null) return;
        accumulateChoices(workType.getEquivalentTypes(), tried, result);
    }


, Instance #
frags: 
(startLine=416 endLine=442 srcPath=/root/NewExperiment/freecolFilter/01312/src/net/sf/freecol/common/model/Colony.java)
            if (alone) {
                for (ProductionType pt
                         : wl.getAvailableProductionTypes(false)) {
                    if (sb != null) {
                        sb.append("\n      try=").append(pt);
                    }
                    for (GoodsType gt : workTypes) {
                        if (sb != null) {
                            sb.append(" ").append(gt.getSuffix());
                        }
                        if (pt.getOutput(gt) == null) continue;
                        int amount = getMinimumGoodsCount(pt.getInputs());
                        amount = Math.min(amount, 
                            wl.getPotentialProduction(gt, type));
                        if (sb != null) {
                            sb.append("=").append(amount);
                            if (bestAmount < amount) sb.append("!");
                        }
                        if (bestAmount < amount) {
                            bestAmount = amount;
                            best.workLocation = wl;
                            best.productionType = pt;
                            best.workType = gt;
                        }
                    }
                }
            } else {

(startLine=442 endLine=466 srcPath=/root/NewExperiment/freecolFilter/01312/src/net/sf/freecol/common/model/Colony.java)
            } else {
                ProductionType pt = wl.getProductionType();
                if (sb != null) {
                    sb.append("\n      fixed=").append(pt);
                }
                for (GoodsType gt : workTypes) {
                    if (sb != null) {
                        sb.append(" ").append(gt.getSuffix());
                    }
                    if (pt.getOutput(gt) == null) continue;
                    int amount = getMinimumGoodsCount(pt.getInputs());
                    amount = Math.min(amount, 
                        wl.getPotentialProduction(gt, type));
                    if (sb != null) {
                        sb.append("=").append(amount);
                        if (bestAmount < amount) sb.append("!");
                    }
                    if (bestAmount < amount) {
                        bestAmount = amount;
                        best.workLocation = wl;
                        best.productionType = pt;
                        best.workType = gt;
                    }
                }
            }

commonMethod: 
(startLine=455 endLine=469 srcPath=/root/NewExperiment/freecolFilter/01313/src/net/sf/freecol/common/model/GoodsType.java)
    /**
     * Get all the equivalent goods types, in the sense that they are
     * stored as this type.
     *
     * @return A set of equivalent <code>GoodsType</code>s, which
     *     must include this one.
     */
    public Set<GoodsType> getEquivalentTypes() {
        Set<GoodsType> result = new HashSet<GoodsType>();
        for (GoodsType type : getSpecification().getGoodsTypeList()) {
            if (type == this
                || type.getStoredAs() == this) result.add(type);
        }
        return result;
    }


, Instance #
frags: 
(startLine=416 endLine=442 srcPath=/root/NewExperiment/freecolFilter/01312/src/net/sf/freecol/common/model/Colony.java)
            if (alone) {
                for (ProductionType pt
                         : wl.getAvailableProductionTypes(false)) {
                    if (sb != null) {
                        sb.append("\n      try=").append(pt);
                    }
                    for (GoodsType gt : workTypes) {
                        if (sb != null) {
                            sb.append(" ").append(gt.getSuffix());
                        }
                        if (pt.getOutput(gt) == null) continue;
                        int amount = getMinimumGoodsCount(pt.getInputs());
                        amount = Math.min(amount, 
                            wl.getPotentialProduction(gt, type));
                        if (sb != null) {
                            sb.append("=").append(amount);
                            if (bestAmount < amount) sb.append("!");
                        }
                        if (bestAmount < amount) {
                            bestAmount = amount;
                            best.workLocation = wl;
                            best.productionType = pt;
                            best.workType = gt;
                        }
                    }
                }
            } else {

(startLine=442 endLine=466 srcPath=/root/NewExperiment/freecolFilter/01312/src/net/sf/freecol/common/model/Colony.java)
            } else {
                ProductionType pt = wl.getProductionType();
                if (sb != null) {
                    sb.append("\n      fixed=").append(pt);
                }
                for (GoodsType gt : workTypes) {
                    if (sb != null) {
                        sb.append(" ").append(gt.getSuffix());
                    }
                    if (pt.getOutput(gt) == null) continue;
                    int amount = getMinimumGoodsCount(pt.getInputs());
                    amount = Math.min(amount, 
                        wl.getPotentialProduction(gt, type));
                    if (sb != null) {
                        sb.append("=").append(amount);
                        if (bestAmount < amount) sb.append("!");
                    }
                    if (bestAmount < amount) {
                        bestAmount = amount;
                        best.workLocation = wl;
                        best.productionType = pt;
                        best.workType = gt;
                    }
                }
            }

commonMethod: 
(startLine=606 endLine=620 srcPath=/root/NewExperiment/freecolFilter/01313/src/net/sf/freecol/common/model/UnitType.java)
    /**
     * Gets a list of goods this Consumer consumes.
     *
     * @return The goods consumed by this unit type.
     */
    public List<AbstractGoods> getConsumedGoods() {
        List<AbstractGoods> result = new ArrayList<AbstractGoods>();
        if (consumption != null) {
            for (GoodsType goodsType : consumption.keySet()) {
                result.add(new AbstractGoods(goodsType,
                        consumption.getCount(goodsType)));
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=596 endLine=606 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/common/model/Settlement.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count < 0) {
                unit.changeEquipment(et, count);
                if (!addEquipment(et, -count)) {
                    throw new RuntimeException("equipForRole drop failure"
                        + " for " + unit + " / " + role + " at " + this);
                }
            }
        }

(startLine=610 endLine=620 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/common/model/Settlement.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count > 0) {
                unit.changeEquipment(et, count);
                if (!addEquipment(et, -count)) {
                    throw new RuntimeException("equipForRole take failure"
                        + " for " + unit + " / " + role + " at " + this);
                }
            }
        }

commonMethod: 
(startLine=674 endLine=689 srcPath=/root/NewExperiment/freecolFilter/01327/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Change the current role of this unit.
     *
     * @param role The new <code>Role</code>.
     * @param roleCount The new role count.
     */
    public void changeRole(Role role, int roleCount) {
        final Specification spec = getSpecification();
        setRole(role);
        setRoleCount((role.isDefaultRole()) ? 0 : roleCount);

        equipment.clear();
        for (EquipmentType et : spec.getRoleEquipment(role.getId())) {
            equipment.incrementCount(et, roleCount);
        }
    }


, Instance #
frags: 
(startLine=596 endLine=606 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/common/model/Settlement.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count < 0) {
                unit.changeEquipment(et, count);
                if (!addEquipment(et, -count)) {
                    throw new RuntimeException("equipForRole drop failure"
                        + " for " + unit + " / " + role + " at " + this);
                }
            }
        }

(startLine=610 endLine=620 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/common/model/Settlement.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count > 0) {
                unit.changeEquipment(et, count);
                if (!addEquipment(et, -count)) {
                    throw new RuntimeException("equipForRole take failure"
                        + " for " + unit + " / " + role + " at " + this);
                }
            }
        }

commonMethod: 
(startLine=664 endLine=672 srcPath=/root/NewExperiment/freecolFilter/01327/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Is a role available to this unit?
     *
     * @param role The <code>Role</code> to test.
     * @return True if the role is available to this unit.
     */
    public boolean roleIsAvailable(Role role) {
        return role.isAvailableTo(this);
    }


, Instance #
frags: 
(startLine=596 endLine=606 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/common/model/Settlement.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count < 0) {
                unit.changeEquipment(et, count);
                if (!addEquipment(et, -count)) {
                    throw new RuntimeException("equipForRole drop failure"
                        + " for " + unit + " / " + role + " at " + this);
                }
            }
        }

(startLine=610 endLine=620 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/common/model/Settlement.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count > 0) {
                unit.changeEquipment(et, count);
                if (!addEquipment(et, -count)) {
                    throw new RuntimeException("equipForRole take failure"
                        + " for " + unit + " / " + role + " at " + this);
                }
            }
        }

commonMethod: 
(startLine=282 endLine=294 srcPath=/root/NewExperiment/freecolFilter/01327/src/net/sf/freecol/common/model/GoodsLocation.java)
    /**
     * Adds a specified amount of a type of goods to this location.
     *
     * @param type The <code>GoodsType</code> to add.
     * @param amount The amount of goods to add.
     * @return True if the goods were added.
     */
    public boolean addGoods(GoodsType type, int amount) {
        if (goodsContainer == null) {
            goodsContainer = new GoodsContainer(getGame(), this);
        }
        return goodsContainer.addGoods(type, amount);
    }


, Instance #
frags: 
(startLine=88 endLine=103 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count < 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int rm = owner.sell(null, ag.getType(),
                                            ag.getAmount() * count);
                        if (rm > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), rm));
                        }
                    }
                }
            }
        }

(startLine=108 endLine=123 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count > 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int m = owner.buy(null, ag.getType(),
                                          ag.getAmount() * count);
                        if (m > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), -m));
                        }
                    }
                }
            }
        }

commonMethod: 
(startLine=674 endLine=689 srcPath=/root/NewExperiment/freecolFilter/01327/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Change the current role of this unit.
     *
     * @param role The new <code>Role</code>.
     * @param roleCount The new role count.
     */
    public void changeRole(Role role, int roleCount) {
        final Specification spec = getSpecification();
        setRole(role);
        setRoleCount((role.isDefaultRole()) ? 0 : roleCount);

        equipment.clear();
        for (EquipmentType et : spec.getRoleEquipment(role.getId())) {
            equipment.incrementCount(et, roleCount);
        }
    }


, Instance #
frags: 
(startLine=88 endLine=103 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count < 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int rm = owner.sell(null, ag.getType(),
                                            ag.getAmount() * count);
                        if (rm > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), rm));
                        }
                    }
                }
            }
        }

(startLine=108 endLine=123 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count > 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int m = owner.buy(null, ag.getType(),
                                          ag.getAmount() * count);
                        if (m > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), -m));
                        }
                    }
                }
            }
        }

commonMethod: 
(startLine=691 endLine=702 srcPath=/root/NewExperiment/freecolFilter/01327/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Get the change in goods required to change to a new role/count.
     *
     * @param role The new <code>Role</code> to change to.
     * @param roleCount The new role count.
     * @return A list of <code>AbstractGoods</code> defining the change
     *     in goods required.
     */
    public List<AbstractGoods> getGoodsDifference(Role role, int roleCount) {
        return Role.getGoodsDifference(getRole(), getRoleCount(),
                                       role, roleCount);
    }


, Instance #
frags: 
(startLine=88 endLine=103 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count < 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int rm = owner.sell(null, ag.getType(),
                                            ag.getAmount() * count);
                        if (rm > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), rm));
                        }
                    }
                }
            }
        }

(startLine=108 endLine=123 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
                 : change.getValues().entrySet()) {
            EquipmentType et = entry.getKey();
            int count = entry.getValue().intValue();
            if (count > 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int m = owner.buy(null, ag.getType(),
                                          ag.getAmount() * count);
                        if (m > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), -m));
                        }
                    }
                }
            }
        }

commonMethod: 
(startLine=323 endLine=342 srcPath=/root/NewExperiment/freecolFilter/01327/src/net/sf/freecol/common/model/Europe.java)
    /**
     * {@inheritDoc}
     */
    @Override
    public int priceGoods(List<AbstractGoods> goods) {
        Player player = getOwner();
        Market market = player.getMarket();
        int price = 0;
        for (AbstractGoods ag : goods) {
            if (ag.getAmount() <= 0) continue;
            GoodsType goodsType = ag.getType();
            // Refuse to trade in boycotted goods
            if (!player.canTrade(goodsType)) {
                price = -1;
                break;
            }
            price += market.getBidPrice(goodsType, ag.getAmount());
        }
        return price;
    }


, Instance #
frags: 
(startLine=91 endLine=102 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
            if (count < 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int rm = owner.sell(null, ag.getType(),
                                            ag.getAmount() * count);
                        if (rm > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), rm));
                        }
                    }
                }
            }

(startLine=111 endLine=122 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
            if (count > 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int m = owner.buy(null, ag.getType(),
                                          ag.getAmount() * count);
                        if (m > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), -m));
                        }
                    }
                }
            }

commonMethod: 
(startLine=674 endLine=689 srcPath=/root/NewExperiment/freecolFilter/01327/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Change the current role of this unit.
     *
     * @param role The new <code>Role</code>.
     * @param roleCount The new role count.
     */
    public void changeRole(Role role, int roleCount) {
        final Specification spec = getSpecification();
        setRole(role);
        setRoleCount((role.isDefaultRole()) ? 0 : roleCount);

        equipment.clear();
        for (EquipmentType et : spec.getRoleEquipment(role.getId())) {
            equipment.incrementCount(et, roleCount);
        }
    }


, Instance #
frags: 
(startLine=91 endLine=102 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
            if (count < 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int rm = owner.sell(null, ag.getType(),
                                            ag.getAmount() * count);
                        if (rm > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), rm));
                        }
                    }
                }
            }

(startLine=111 endLine=122 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
            if (count > 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int m = owner.buy(null, ag.getType(),
                                          ag.getAmount() * count);
                        if (m > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), -m));
                        }
                    }
                }
            }

commonMethod: 
(startLine=664 endLine=672 srcPath=/root/NewExperiment/freecolFilter/01327/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Is a role available to this unit?
     *
     * @param role The <code>Role</code> to test.
     * @return True if the role is available to this unit.
     */
    public boolean roleIsAvailable(Role role) {
        return role.isAvailableTo(this);
    }


, Instance #
frags: 
(startLine=91 endLine=102 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
            if (count < 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int rm = owner.sell(null, ag.getType(),
                                            ag.getAmount() * count);
                        if (rm > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), rm));
                        }
                    }
                }
            }

(startLine=111 endLine=122 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
            if (count > 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int m = owner.buy(null, ag.getType(),
                                          ag.getAmount() * count);
                        if (m > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), -m));
                        }
                    }
                }
            }

commonMethod: 
(startLine=691 endLine=702 srcPath=/root/NewExperiment/freecolFilter/01327/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Get the change in goods required to change to a new role/count.
     *
     * @param role The new <code>Role</code> to change to.
     * @param roleCount The new role count.
     * @return A list of <code>AbstractGoods</code> defining the change
     *     in goods required.
     */
    public List<AbstractGoods> getGoodsDifference(Role role, int roleCount) {
        return Role.getGoodsDifference(getRole(), getRoleCount(),
                                       role, roleCount);
    }


, Instance #
frags: 
(startLine=91 endLine=102 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
            if (count < 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int rm = owner.sell(null, ag.getType(),
                                            ag.getAmount() * count);
                        if (rm > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), rm));
                        }
                    }
                }
            }

(startLine=111 endLine=122 srcPath=/root/NewExperiment/freecolFilter/01326/src/net/sf/freecol/server/model/ServerEurope.java)
            if (count > 0) {
                unit.changeEquipment(et, count);
                for (AbstractGoods ag : et.getRequiredGoods()) {
                    if (owner.canTrade(ag.getType(), Market.Access.EUROPE)) {
                        int m = owner.buy(null, ag.getType(),
                                          ag.getAmount() * count);
                        if (m > 0) {
                            owner.addExtraTrade(new AbstractGoods(ag.getType(), -m));
                        }
                    }
                }
            }

commonMethod: 
(startLine=323 endLine=342 srcPath=/root/NewExperiment/freecolFilter/01327/src/net/sf/freecol/common/model/Europe.java)
    /**
     * {@inheritDoc}
     */
    @Override
    public int priceGoods(List<AbstractGoods> goods) {
        Player player = getOwner();
        Market market = player.getMarket();
        int price = 0;
        for (AbstractGoods ag : goods) {
            if (ag.getAmount() <= 0) continue;
            GoodsType goodsType = ag.getType();
            // Refuse to trade in boycotted goods
            if (!player.canTrade(goodsType)) {
                price = -1;
                break;
            }
            price += market.getBidPrice(goodsType, ag.getAmount());
        }
        return price;
    }


, Instance #
frags: 
(startLine=637 endLine=647 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                        public void actionPerformed(ActionEvent e) {
                            int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                && items > 1) ? promptForEquipment(unit, et, items, false)
                                : items;
                            if (n <= 0) return;
                            igc.equipUnit(unit, et, -n);
                            unitLabel.updateIcon();
                            if (parentPanel instanceof ColonyPanel) {
                                ((ColonyPanel)parentPanel).update();
                            }
                        }

(startLine=693 endLine=703 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                            public void actionPerformed(ActionEvent e) {
                                int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                    && items > 1) ? promptForEquipment(unit, et, items, true)
                                    : items;
                                if (n <= 0) return;
                                igc.equipUnit(unit, et, n);
                                unitLabel.updateIcon();
                                if (parentPanel instanceof ColonyPanel) {
                                    ((ColonyPanel)parentPanel).update();
                                }
                            }

commonMethod: 
(startLine=94 endLine=107 srcPath=/root/NewExperiment/freecolFilter/01329/src/net/sf/freecol/common/util/Utils.java)
    /**
     * Gets the last part of a string after a supplied delimiter.
     *
     * @param s The string to operate on.
     * @param delim The delimiter.
     * @return The last part of the string after the last instance of
     *     the delimiter, or the original string if the delimiter is
     *     not present.
     */
    public static String lastPart(String s, String delim) {
        int last = (s == null) ? -1 : s.lastIndexOf(delim);
        return (last > 0) ? s.substring(last+delim.length(), s.length())
            : s;
    }


, Instance #
frags: 
(startLine=637 endLine=647 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                        public void actionPerformed(ActionEvent e) {
                            int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                && items > 1) ? promptForEquipment(unit, et, items, false)
                                : items;
                            if (n <= 0) return;
                            igc.equipUnit(unit, et, -n);
                            unitLabel.updateIcon();
                            if (parentPanel instanceof ColonyPanel) {
                                ((ColonyPanel)parentPanel).update();
                            }
                        }

(startLine=693 endLine=703 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                            public void actionPerformed(ActionEvent e) {
                                int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                    && items > 1) ? promptForEquipment(unit, et, items, true)
                                    : items;
                                if (n <= 0) return;
                                igc.equipUnit(unit, et, n);
                                unitLabel.updateIcon();
                                if (parentPanel instanceof ColonyPanel) {
                                    ((ColonyPanel)parentPanel).update();
                                }
                            }

commonMethod: 
(startLine=2185 endLine=2237 srcPath=/root/NewExperiment/freecolFilter/01329/src/net/sf/freecol/client/control/InGameController.java)
    /**
     * Change the role-equipment a unit has.
     *
     * @param unit The <code>Unit</code>.
     * @param role The <code>Role</code> to assume.
     * @param roleCount The role count.
     * @return True if the role was changed.
     */
    public boolean equipUnitForRole(Unit unit, Role role, int roleCount) {
        if (!requireOurTurn() || unit == null || role == null
            || roleCount < 0 || roleCount > role.getMaximumCount()
            || (role == unit.getRole() && roleCount == unit.getRoleCount())) {
            return false;
        }

        final Player player = freeColClient.getMyPlayer();
        final Colony colony = unit.getColony();

        List<AbstractGoods> req = unit.getGoodsDifference(role, roleCount);
        if (unit.isInEurope()) {
            for (AbstractGoods ag : req) {
                GoodsType goodsType = ag.getType();
                if (!player.canTrade(goodsType) && !payArrears(goodsType)) {
                    return false; // payment failed
                }
            }
            int price = player.getEurope().priceGoods(req);
            if (price < 0 || !player.checkGold(price)) return false;
        } else if (colony != null) {
            for (AbstractGoods ag : req) {
                if (colony.getGoodsCount(ag.getType()) < ag.getAmount()) {
                    gui.showInformationMessage(unit,
                        StringTemplate.template("equipUnit.impossible")
                            .addName("%colony%", colony.getName())
                            .add("%equipment%", ag.getType().getNameKey())
                            .addStringTemplate("%unit%", unit.getFullLabel()));
                    return false;
                }
            }
        } else {
            throw new IllegalStateException("Unit not in settlement/Europe");
        }

        ColonyWas colonyWas = (colony == null) ? null : new ColonyWas(colony);
        UnitWas unitWas = new UnitWas(unit);
        if (askServer().equipUnitForRole(unit, role, roleCount)) {
            if (colonyWas != null) colonyWas.fireChanges();
            unitWas.fireChanges();
            gui.updateMenuBar();
            return true;
        }
        return false;
    }


, Instance #
frags: 
(startLine=637 endLine=647 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                        public void actionPerformed(ActionEvent e) {
                            int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                && items > 1) ? promptForEquipment(unit, et, items, false)
                                : items;
                            if (n <= 0) return;
                            igc.equipUnit(unit, et, -n);
                            unitLabel.updateIcon();
                            if (parentPanel instanceof ColonyPanel) {
                                ((ColonyPanel)parentPanel).update();
                            }
                        }

(startLine=693 endLine=703 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                            public void actionPerformed(ActionEvent e) {
                                int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                    && items > 1) ? promptForEquipment(unit, et, items, true)
                                    : items;
                                if (n <= 0) return;
                                igc.equipUnit(unit, et, n);
                                unitLabel.updateIcon();
                                if (parentPanel instanceof ColonyPanel) {
                                    ((ColonyPanel)parentPanel).update();
                                }
                            }

commonMethod: 
(startLine=707 endLine=718 srcPath=/root/NewExperiment/freecolFilter/01329/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Get the change in goods required to change to a new role/count.
     *
     * @param role The new <code>Role</code> to change to.
     * @param roleCount The new role count.
     * @return A list of <code>AbstractGoods</code> defining the change
     *     in goods required.
     */
    public List<AbstractGoods> getGoodsDifference(Role role, int roleCount) {
        return Role.getGoodsDifference(getRole(), getRoleCount(),
                                       role, roleCount);
    }


, Instance #
frags: 
(startLine=637 endLine=647 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                        public void actionPerformed(ActionEvent e) {
                            int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                && items > 1) ? promptForEquipment(unit, et, items, false)
                                : items;
                            if (n <= 0) return;
                            igc.equipUnit(unit, et, -n);
                            unitLabel.updateIcon();
                            if (parentPanel instanceof ColonyPanel) {
                                ((ColonyPanel)parentPanel).update();
                            }
                        }

(startLine=693 endLine=703 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                            public void actionPerformed(ActionEvent e) {
                                int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                    && items > 1) ? promptForEquipment(unit, et, items, true)
                                    : items;
                                if (n <= 0) return;
                                igc.equipUnit(unit, et, n);
                                unitLabel.updateIcon();
                                if (parentPanel instanceof ColonyPanel) {
                                    ((ColonyPanel)parentPanel).update();
                                }
                            }

commonMethod: 
(startLine=344 endLine=380 srcPath=/root/NewExperiment/freecolFilter/01329/src/net/sf/freecol/common/model/Role.java)
    /**
     * Gets a list of goods required to change from the first role to
     * the second.  The first role may be <code>null</code> implying
     * the default role, the second must not.  Note that excess goods
     * that are left over after the change will appear on the list
     * with negative amounts.
     *
     * @param from The current <code>Role</code>.
     * @param fromCount The role count for the current role.
     * @param to The new <code>Role</code> to assume.
     * @param toCount The role count for the new role.
     * @return A list of <code>AbstractGoods</code> required to
     *     make the change.
     */
    public static List<AbstractGoods> getGoodsDifference(Role from,
        int fromCount, Role to, int toCount) {
        List<AbstractGoods> result = new ArrayList<AbstractGoods>();
        if (from != to && !(from == null && to.isDefaultRole())) {
            List<AbstractGoods> fromGoods = (from == null)
                ? new ArrayList<AbstractGoods>()
                : from.getRequiredGoods(fromCount);
            List<AbstractGoods> toGoods = to.getRequiredGoods(toCount);
            for (AbstractGoods ag : toGoods) {
                int amount = ag.getAmount()
                    - AbstractGoods.getCount(ag.getType(), fromGoods);
                if (amount != 0) {
                    result.add(new AbstractGoods(ag.getType(), amount));
                }
            }
            for (AbstractGoods ag : fromGoods) {
                if (AbstractGoods.findByType(ag.getType(), toGoods) == null) {
                    result.add(new AbstractGoods(ag.getType(), -ag.getAmount()));
                }
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=637 endLine=647 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                        public void actionPerformed(ActionEvent e) {
                            int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                && items > 1) ? promptForEquipment(unit, et, items, false)
                                : items;
                            if (n <= 0) return;
                            igc.equipUnit(unit, et, -n);
                            unitLabel.updateIcon();
                            if (parentPanel instanceof ColonyPanel) {
                                ((ColonyPanel)parentPanel).update();
                            }
                        }

(startLine=693 endLine=703 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                            public void actionPerformed(ActionEvent e) {
                                int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                    && items > 1) ? promptForEquipment(unit, et, items, true)
                                    : items;
                                if (n <= 0) return;
                                igc.equipUnit(unit, et, n);
                                unitLabel.updateIcon();
                                if (parentPanel instanceof ColonyPanel) {
                                    ((ColonyPanel)parentPanel).update();
                                }
                            }

commonMethod: 
(startLine=691 endLine=705 srcPath=/root/NewExperiment/freecolFilter/01329/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Filter a list of roles to return only those available to this unit.
     *
     * @param roles The list of <code>Role</code>s to filter, if null all
     *     available roles are used.
     * @return A list of available <code>Role</code>s.
     */
    public List<Role> getAvailableRoles(List<Role> roles) {
        if (roles == null) roles = getSpecification().getRoles();
        List<Role> result = new ArrayList<Role>();
        for (Role role : roles) {
            if (roleIsAvailable(role)) result.add(role);
        }
        return result;
    }


, Instance #
frags: 
(startLine=637 endLine=647 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                        public void actionPerformed(ActionEvent e) {
                            int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                && items > 1) ? promptForEquipment(unit, et, items, false)
                                : items;
                            if (n <= 0) return;
                            igc.equipUnit(unit, et, -n);
                            unitLabel.updateIcon();
                            if (parentPanel instanceof ColonyPanel) {
                                ((ColonyPanel)parentPanel).update();
                            }
                        }

(startLine=693 endLine=703 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                            public void actionPerformed(ActionEvent e) {
                                int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                    && items > 1) ? promptForEquipment(unit, et, items, true)
                                    : items;
                                if (n <= 0) return;
                                igc.equipUnit(unit, et, n);
                                unitLabel.updateIcon();
                                if (parentPanel instanceof ColonyPanel) {
                                    ((ColonyPanel)parentPanel).update();
                                }
                            }

commonMethod: 
(startLine=592 endLine=666 srcPath=/root/NewExperiment/freecolFilter/01329/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
    /**
     * Nasty hack to get menu item to change roles.
     *
     * Hacky because we are continuing to express this in terms of equipment
     * changes despite the point of the role cutover was to get rid of
     * equipment types.  However, its time to release, and we should avoid
     * string changes.  Get rid of this post 0.11.0-release.
     */
    private JMenuItem fakeRoleItem(final UnitLabel unitLabel,
                                   final Role from, final int fromCount, 
                                   final Role to, final int toCount,
                                   final int price) {
        String key = null;
        AbstractGoods change = null;

        if ("model.role.missionary".equals(to.getId())) {
            key = "model.equipment.missionary.add";
        } else if ("model.role.dragoon".equals(to.getId())) {
            key = "model.equipment.dragoon";
        } else {
            List<AbstractGoods> need = Role.getGoodsDifference(from, fromCount,
                                                               to, toCount);
            switch (need.size()) {
            case 0:
                key = "model.equipment.missionary.remove";
                break;
            case 1:
                change = need.get(0);
                break;
            default:
                if (to.isDefaultRole()) {
                    key = "model.equipment.removeAll";
                } else {
                    for (AbstractGoods ag : need) {
                        if (ag.getAmount() > 0) {
                            change = ag;
                            break;
                        }
                    }
                }
                break;
            }
        }
        if (change != null) {
            key = "model.equipment."
                + Utils.lastPart(change.getType().getId(), ".")
                + ((change.getAmount() < 0) ? ".remove" : ".add");
        }
        if (key == null) return null;

        final InGameController igc = freeColClient.getInGameController();
        String text = Messages.message(key);
        if (price > 0) {
            text += " ("
                + Messages.message(StringTemplate.template("goldAmount")
                    .addAmount("%amount%", price))
                + ")";
        }
        JMenuItem item = new JMenuItem(text);
        if (change != null) {
            final ImageLibrary imageLibrary = gui.getImageLibrary();
            item.setIcon(imageLibrary.getScaledGoodsImageIcon(change.getType(),
                                                              0.66f));
        }
        item.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    igc.equipUnitForRole(unitLabel.getUnit(), to, toCount);
                    unitLabel.updateIcon();
                    if (parentPanel instanceof ColonyPanel) {
                        ((ColonyPanel)parentPanel).update();
                    }
                }
            });
        return item;
    }


, Instance #
frags: 
(startLine=637 endLine=647 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                        public void actionPerformed(ActionEvent e) {
                            int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                && items > 1) ? promptForEquipment(unit, et, items, false)
                                : items;
                            if (n <= 0) return;
                            igc.equipUnit(unit, et, -n);
                            unitLabel.updateIcon();
                            if (parentPanel instanceof ColonyPanel) {
                                ((ColonyPanel)parentPanel).update();
                            }
                        }

(startLine=693 endLine=703 srcPath=/root/NewExperiment/freecolFilter/01328/src/net/sf/freecol/client/gui/panel/QuickActionMenu.java)
                            public void actionPerformed(ActionEvent e) {
                                int n = ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0
                                    && items > 1) ? promptForEquipment(unit, et, items, true)
                                    : items;
                                if (n <= 0) return;
                                igc.equipUnit(unit, et, n);
                                unitLabel.updateIcon();
                                if (parentPanel instanceof ColonyPanel) {
                                    ((ColonyPanel)parentPanel).update();
                                }
                            }

commonMethod: 
(startLine=3618 endLine=3625 srcPath=/root/NewExperiment/freecolFilter/01329/src/net/sf/freecol/common/model/Unit.java)
    /**
     * {@inheritDoc}
     */
    @Override
    public Settlement getSettlement() {
        Location location = getLocation();
        return (location != null) ? location.getSettlement() : null;
    }


, Instance #
frags: 
(startLine=274 endLine=287 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        for (Unit u : new ArrayList<Unit>(units)) {
            AIUnit aiu = aiMain.getAIUnit(u);
            if (aiu == null) {
                units.remove(u);
            } else if (aiu.getMission() instanceof DefendSettlementMission
                && (((DefendSettlementMission)aiu.getMission())
                    .getTarget() == is)) {
                sb.append(" ").append(u.getId());
                defenders.add(u);
                units.remove(u);
            } else if (Mission.invalidNewMissionReason(aiu) != null) {
                units.remove(u);
            }
        }

(startLine=296 endLine=312 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            } else if ((enemy = t.getFirstUnit().getOwner()) == player) {
                // Its one of ours!
                for (Unit u : t.getUnitList()) {
                    AIUnit aiu;
                    if (defenders.contains(u) || units.contains(u)
                        || (aiu = aiMain.getAIUnit(u)) == null) {
                        ; // Do nothing
                    } else if (aiu.getMission() instanceof DefendSettlementMission
                        && ((DefendSettlementMission)aiu.getMission())
                        .getTarget() == is) {
                        sb.append(" ").append(u.getId());
                        defenders.add(u);
                    } else if (Mission.invalidNewMissionReason(aiu) == null) {
                        units.add(u);
                    }
                }
            } else if ((tension = is.getAlarm(enemy)) == null

commonMethod: 
(startLine=3439 endLine=3451 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/Unit.java)
    /**
     * {@inheritDoc}
     */
    public String toShortString() {
        StringBuffer sb = new StringBuffer(32);
        sb.append(getId()).append("-").append(getType().getSuffix());
        if (!hasDefaultRole()) {
            sb.append("-").append(getRoleSuffix());
            int count = getRoleCount();
            if (count > 1) sb.append(".").append(count);
        }
        return sb.toString();
    }


, Instance #
frags: 
(startLine=274 endLine=287 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        for (Unit u : new ArrayList<Unit>(units)) {
            AIUnit aiu = aiMain.getAIUnit(u);
            if (aiu == null) {
                units.remove(u);
            } else if (aiu.getMission() instanceof DefendSettlementMission
                && (((DefendSettlementMission)aiu.getMission())
                    .getTarget() == is)) {
                sb.append(" ").append(u.getId());
                defenders.add(u);
                units.remove(u);
            } else if (Mission.invalidNewMissionReason(aiu) != null) {
                units.remove(u);
            }
        }

(startLine=296 endLine=312 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            } else if ((enemy = t.getFirstUnit().getOwner()) == player) {
                // Its one of ours!
                for (Unit u : t.getUnitList()) {
                    AIUnit aiu;
                    if (defenders.contains(u) || units.contains(u)
                        || (aiu = aiMain.getAIUnit(u)) == null) {
                        ; // Do nothing
                    } else if (aiu.getMission() instanceof DefendSettlementMission
                        && ((DefendSettlementMission)aiu.getMission())
                        .getTarget() == is) {
                        sb.append(" ").append(u.getId());
                        defenders.add(u);
                    } else if (Mission.invalidNewMissionReason(aiu) == null) {
                        units.add(u);
                    }
                }
            } else if ((tension = is.getAlarm(enemy)) == null

commonMethod: 
(startLine=1980 endLine=1988 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/Tile.java)
    /**
     * {@inheritDoc}
     */
    public String toShortString() {
        StringBuilder sb = new StringBuilder(16);
        sb.append(getX()).append(",").append(getY())
            .append("-").append(getType().getSuffix());
        return sb.toString();
    }


, Instance #
frags: 
(startLine=274 endLine=287 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        for (Unit u : new ArrayList<Unit>(units)) {
            AIUnit aiu = aiMain.getAIUnit(u);
            if (aiu == null) {
                units.remove(u);
            } else if (aiu.getMission() instanceof DefendSettlementMission
                && (((DefendSettlementMission)aiu.getMission())
                    .getTarget() == is)) {
                sb.append(" ").append(u.getId());
                defenders.add(u);
                units.remove(u);
            } else if (Mission.invalidNewMissionReason(aiu) != null) {
                units.remove(u);
            }
        }

(startLine=296 endLine=312 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
            } else if ((enemy = t.getFirstUnit().getOwner()) == player) {
                // Its one of ours!
                for (Unit u : t.getUnitList()) {
                    AIUnit aiu;
                    if (defenders.contains(u) || units.contains(u)
                        || (aiu = aiMain.getAIUnit(u)) == null) {
                        ; // Do nothing
                    } else if (aiu.getMission() instanceof DefendSettlementMission
                        && ((DefendSettlementMission)aiu.getMission())
                        .getTarget() == is) {
                        sb.append(" ").append(u.getId());
                        defenders.add(u);
                    } else if (Mission.invalidNewMissionReason(aiu) == null) {
                        units.add(u);
                    }
                }
            } else if ((tension = is.getAlarm(enemy)) == null

commonMethod: 
(startLine=165 endLine=172 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/server/ai/AIUnit.java)
    /**
     * Gets the <code>Unit</code> this <code>AIUnit</code> controls.
     *
     * @return The <code>Unit</code>.
     */
    public Unit getUnit() {
        return unit;
    }


, Instance #
frags: 
(startLine=1287 endLine=1302 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nNaval) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

(startLine=1307 endLine=1322 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nCarrier) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

commonMethod: 
(startLine=147 endLine=162 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/BuildableType.java)
    /**
     * Get the goods required to build an instance of this buildable.
     *
     * Note we must take care to return a deep copy, as these lists
     * are subject to complex manipulations in the role code.
     *
     * @return A deep copy of the list of required goods.
     */
    public List<AbstractGoods> getRequiredGoods() {
        if (requiredGoods == null) return Collections.emptyList();
        List<AbstractGoods> result = new ArrayList<AbstractGoods>();
        for (AbstractGoods ag : requiredGoods) {
            result.add(new AbstractGoods(ag.getType(), ag.getAmount()));
        }
        return result;
    }


, Instance #
frags: 
(startLine=1287 endLine=1302 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nNaval) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

(startLine=1307 endLine=1322 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nCarrier) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

commonMethod: 
(startLine=1790 endLine=1801 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Evaluate goods for trade purposes.
     *
     * @param goods The <code>Goods</code> to evaluate.
     * @return The score.
     */
    private int evaluateGoods(AbstractGoods ag) {
        final Market market = getPlayer().getMarket();

        return (market == null) ? 0
            : market.getSalePrice(ag.getType(), ag.getAmount());
    }


, Instance #
frags: 
(startLine=1287 endLine=1302 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nNaval) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

(startLine=1307 endLine=1322 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nCarrier) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

commonMethod: 
(startLine=744 endLine=761 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets a list of all freely available work locations
     * in this colony.
     *
     * @return The list of available <code>WorkLocation</code>s.
     */
    public List<WorkLocation> getAvailableWorkLocations() {
        List<WorkLocation> result
            = new ArrayList<WorkLocation>(buildingMap.values());
        for (ColonyTile ct : colonyTiles) {
            Tile tile = ct.getWorkTile();
            if (tile.getOwningSettlement() == this
                || getOwner().canClaimForSettlement(tile)) {
                result.add(ct);
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=1287 endLine=1302 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nNaval) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

(startLine=1307 endLine=1322 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nCarrier) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

commonMethod: 
(startLine=183 endLine=193 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/GoodsLocation.java)
    /**
     * Gets an list of all the goods in this location.  There is only
     * one <code>Goods</code> for each <code>GoodsType</code>, thus the
     * amount of goods may exceed CARGO_SIZE.
     *
     * @return A list of goods.
     */
    public final List<Goods> getCompactGoods() {
        if (goodsContainer == null) return Collections.emptyList();
        return goodsContainer.getCompactGoods();
    }


, Instance #
frags: 
(startLine=1287 endLine=1302 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nNaval) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

(startLine=1307 endLine=1322 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nCarrier) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

commonMethod: 
(startLine=1007 endLine=1016 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/Tile.java)
    /**
     * Gets all the tiles surrounding a tile within the given range.
     * The center tile is not included.
     *
     * @param range How far away do we need to go starting from this.
     * @return The tiles surrounding this <code>Tile</code>.
     */
    public Iterable<Tile> getSurroundingTiles(int range) {
        return getMap().getCircleTiles(this, true, range);
    }


, Instance #
frags: 
(startLine=1287 endLine=1302 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nNaval) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

(startLine=1307 endLine=1322 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            < nCarrier) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            cheatUnit(rc);
        }

commonMethod: 
(startLine=1777 endLine=1788 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Evaluate a unit for trade purposes.
     *
     * @param unit The <code>Unit</code> to evaluate.
     * @return The score.
     */
    private int evaluateUnit(Unit unit) {
        final Europe europe = getPlayer().getEurope();

        return (europe == null) ? 0
            : europe.getUnitPrice(unit.getType());
    }


, Instance #
frags: 
(startLine=1290 endLine=1300 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

(startLine=1310 endLine=1320 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

commonMethod: 
(startLine=147 endLine=162 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/BuildableType.java)
    /**
     * Get the goods required to build an instance of this buildable.
     *
     * Note we must take care to return a deep copy, as these lists
     * are subject to complex manipulations in the role code.
     *
     * @return A deep copy of the list of required goods.
     */
    public List<AbstractGoods> getRequiredGoods() {
        if (requiredGoods == null) return Collections.emptyList();
        List<AbstractGoods> result = new ArrayList<AbstractGoods>();
        for (AbstractGoods ag : requiredGoods) {
            result.add(new AbstractGoods(ag.getType(), ag.getAmount()));
        }
        return result;
    }


, Instance #
frags: 
(startLine=1290 endLine=1300 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

(startLine=1310 endLine=1320 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

commonMethod: 
(startLine=1790 endLine=1801 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Evaluate goods for trade purposes.
     *
     * @param goods The <code>Goods</code> to evaluate.
     * @return The score.
     */
    private int evaluateGoods(AbstractGoods ag) {
        final Market market = getPlayer().getMarket();

        return (market == null) ? 0
            : market.getSalePrice(ag.getType(), ag.getAmount());
    }


, Instance #
frags: 
(startLine=1290 endLine=1300 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

(startLine=1310 endLine=1320 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

commonMethod: 
(startLine=1732 endLine=1740 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets the apparent number of units at this colony.
     * Used in client enemy colonies
     *
     * @return The apparent number of <code>Unit</code>s at this colony.
     */
    public int getDisplayUnitCount() {
        return (displayUnitCount > 0) ? displayUnitCount : getUnitCount();
    }


, Instance #
frags: 
(startLine=1290 endLine=1300 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

(startLine=1310 endLine=1320 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

commonMethod: 
(startLine=744 endLine=761 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/Colony.java)
    /**
     * Gets a list of all freely available work locations
     * in this colony.
     *
     * @return The list of available <code>WorkLocation</code>s.
     */
    public List<WorkLocation> getAvailableWorkLocations() {
        List<WorkLocation> result
            = new ArrayList<WorkLocation>(buildingMap.values());
        for (ColonyTile ct : colonyTiles) {
            Tile tile = ct.getWorkTile();
            if (tile.getOwningSettlement() == this
                || getOwner().canClaimForSettlement(tile)) {
                result.add(ct);
            }
        }
        return result;
    }


, Instance #
frags: 
(startLine=1290 endLine=1300 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

(startLine=1310 endLine=1320 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

commonMethod: 
(startLine=183 endLine=193 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/GoodsLocation.java)
    /**
     * Gets an list of all the goods in this location.  There is only
     * one <code>Goods</code> for each <code>GoodsType</code>, thus the
     * amount of goods may exceed CARGO_SIZE.
     *
     * @return A list of goods.
     */
    public final List<Goods> getCompactGoods() {
        if (goodsContainer == null) return Collections.emptyList();
        return goodsContainer.getCompactGoods();
    }


, Instance #
frags: 
(startLine=1290 endLine=1300 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

(startLine=1310 endLine=1320 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

commonMethod: 
(startLine=1007 endLine=1016 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/Tile.java)
    /**
     * Gets all the tiles surrounding a tile within the given range.
     * The center tile is not included.
     *
     * @param range How far away do we need to go starting from this.
     * @return The tiles surrounding this <code>Tile</code>.
     */
    public Iterable<Tile> getSurroundingTiles(int range) {
        return getMap().getCircleTiles(this, true, range);
    }


, Instance #
frags: 
(startLine=1290 endLine=1300 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

(startLine=1310 endLine=1320 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }

commonMethod: 
(startLine=1777 endLine=1788 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Evaluate a unit for trade purposes.
     *
     * @param unit The <code>Unit</code> to evaluate.
     * @return The score.
     */
    private int evaluateUnit(Unit unit) {
        final Europe europe = getPlayer().getEurope();

        return (europe == null) ? 0
            : europe.getUnitPrice(unit.getType());
    }


, Instance #
frags: 
(startLine=1585 endLine=1600 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (logger.isLoggable(Level.FINE)) {
            for (AIUnit aiu : getAIUnits()) {
                Unit u = aiu.getUnit();
                String reason = reasons.get(u);
                if (reason == null) reason = "OMITTED";
                Mission m = aiu.getMission();
                sb.append("\n  ").append(u.getLocation())
                    .append(" ").append(reason)
                    .append("-").append((m == null)
                        ? "NoMission"
                        : (m instanceof TransportMission)
                        ? ((TransportMission)m).toFullString()
                        : m.toString());
            }
            logger.fine(sb.toString());
        }

(startLine=496 endLine=507 srcPath=/root/NewExperiment/freecolFilter/01339/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
        if (sb != null) {
            for (AIUnit aiu : getAIUnits()) {
                Unit u = aiu.getUnit();
                String reason = reasons.get(u);
                if (reason == null) reason = "OMITTED";
                Mission m = aiu.getMission();
                sb.append("\n  ").append(u.getLocation())
                    .append(" ").append(reason)
                    .append("-").append((m == null) ? "NONE" : m.toString());
            }
            logger.fine(sb.toString());
        }

commonMethod: 
(startLine=3439 endLine=3451 srcPath=/root/NewExperiment/freecolFilter/01340/src/net/sf/freecol/common/model/Unit.java)
    /**
     * {@inheritDoc}
     */
    public String toShortString() {
        StringBuffer sb = new StringBuffer(32);
        sb.append(getId()).append("-").append(getType().getSuffix());
        if (!hasDefaultRole()) {
            sb.append("-").append(getRoleSuffix());
            int count = getRoleCount();
            if (count > 1) sb.append(".").append(count);
        }
        return sb.toString();
    }


, Instance #
frags: 
(startLine=1465 endLine=1486 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private void determineStances(StringBuffer sb) {
        final Player player = getPlayer();
        int point = (sb == null) ? -1 : sb.length();

        for (Player p : getGame().getLivePlayers(player)) {
            Stance newStance = determineStance(p);
            if (newStance != player.getStance(p)) {
                if (newStance == Stance.WAR && peaceHolds(p)) {
                    ; // Peace treaty holds for now
                } else {
                    getAIMain().getFreeColServer().getInGameController()
                        .changeStance(player, newStance, p, true);
                    logSB(sb, " ", p.getNation().getSuffix(),
                          "->", newStance, ", ");
                }
            }
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Stance changes:");
            sb.setLength(sb.length() - 2);
        }
    }

(startLine=186 endLine=203 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void determineStances(StringBuffer sb) {
        final Player player = getPlayer();
        int point = (sb == null) ? -1 : sb.length();

        for (Player p : getGame().getLivePlayers(player)) {
            Stance newStance = determineStance(p);
            if (newStance != player.getStance(p)) {
                getAIMain().getFreeColServer().getInGameController()
                    .changeStance(player, newStance, p, true);
                logSB(sb, " ", p.getNation().getSuffix(),
                      "->", newStance, ", ");
            }
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Stance changes:");
            sb.setLength(sb.length() - 2);
        }
    }

commonMethod: 
(startLine=717 endLine=729 srcPath=/root/NewExperiment/freecolFilter/01343/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Shorten a string buffer by a trailing delimiter.
     *
     * (Cheats, does not really check that the delimiter is there)
     *
     * @param sb The <code>StringBuilder</code> to shorten.
     * @param delim The delimiter to remove.
     */
    public static void sbShrink(StringBuilder sb, String delim) {
        if (sb != null && delim != null) {
            sb.setLength(sb.length() - delim.length());
        }
    }


, Instance #
frags: 
(startLine=1465 endLine=1486 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private void determineStances(StringBuffer sb) {
        final Player player = getPlayer();
        int point = (sb == null) ? -1 : sb.length();

        for (Player p : getGame().getLivePlayers(player)) {
            Stance newStance = determineStance(p);
            if (newStance != player.getStance(p)) {
                if (newStance == Stance.WAR && peaceHolds(p)) {
                    ; // Peace treaty holds for now
                } else {
                    getAIMain().getFreeColServer().getInGameController()
                        .changeStance(player, newStance, p, true);
                    logSB(sb, " ", p.getNation().getSuffix(),
                          "->", newStance, ", ");
                }
            }
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Stance changes:");
            sb.setLength(sb.length() - 2);
        }
    }

(startLine=186 endLine=203 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void determineStances(StringBuffer sb) {
        final Player player = getPlayer();
        int point = (sb == null) ? -1 : sb.length();

        for (Player p : getGame().getLivePlayers(player)) {
            Stance newStance = determineStance(p);
            if (newStance != player.getStance(p)) {
                getAIMain().getFreeColServer().getInGameController()
                    .changeStance(player, newStance, p, true);
                logSB(sb, " ", p.getNation().getSuffix(),
                      "->", newStance, ", ");
            }
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Stance changes:");
            sb.setLength(sb.length() - 2);
        }
    }

commonMethod: 
(startLine=741 endLine=754 srcPath=/root/NewExperiment/freecolFilter/01343/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Check if a string buffer has grown since marked, and optionally
     * insert text at that point.
     *
     * @param sb The <code>StringBuilder</code> to check.
     * @param point A previous mark (from #sbMark).
     * @param add Optional text to add.
     * @return True if the buffer grew.
     */
    public static boolean sbGrew(StringBuilder sb, int point, String add) {
        if (sb == null || sb.length() <= point) return false;
        if (add != null) sb.insert(point, add);
        return true;
    }


, Instance #
frags: 
(startLine=1465 endLine=1486 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    private void determineStances(StringBuffer sb) {
        final Player player = getPlayer();
        int point = (sb == null) ? -1 : sb.length();

        for (Player p : getGame().getLivePlayers(player)) {
            Stance newStance = determineStance(p);
            if (newStance != player.getStance(p)) {
                if (newStance == Stance.WAR && peaceHolds(p)) {
                    ; // Peace treaty holds for now
                } else {
                    getAIMain().getFreeColServer().getInGameController()
                        .changeStance(player, newStance, p, true);
                    logSB(sb, " ", p.getNation().getSuffix(),
                          "->", newStance, ", ");
                }
            }
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Stance changes:");
            sb.setLength(sb.length() - 2);
        }
    }

(startLine=186 endLine=203 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void determineStances(StringBuffer sb) {
        final Player player = getPlayer();
        int point = (sb == null) ? -1 : sb.length();

        for (Player p : getGame().getLivePlayers(player)) {
            Stance newStance = determineStance(p);
            if (newStance != player.getStance(p)) {
                getAIMain().getFreeColServer().getInGameController()
                    .changeStance(player, newStance, p, true);
                logSB(sb, " ", p.getNation().getSuffix(),
                      "->", newStance, ", ");
            }
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Stance changes:");
            sb.setLength(sb.length() - 2);
        }
    }

commonMethod: 
(startLine=731 endLine=739 srcPath=/root/NewExperiment/freecolFilter/01343/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Remember a position in a string buffer.
     *
     * @param sb The <code>StringBuilder</code> to mark.
     * @return The current buffer position if non-null.
     */
    public static int sbMark(StringBuilder sb) {
        return (sb == null) ? -1 : sb.length();
    }


, Instance #
frags: 
(startLine=538 endLine=637 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void bringGifts(int[] randoms, StringBuffer sb) {
        final Player player = getPlayer();
        final Map map = getGame().getMap();
        final CostDecider cd = CostDeciders.numberOfLegalTiles();
        final int giftProbability = getGame().getSpecification()
            .getInteger(GameOptions.GIFT_PROBABILITY);
        int point = (sb == null) ? -1 : sb.length();
        int randomIdx = 0;

        for (IndianSettlement is : player.getIndianSettlements()) {
            // Do not bring gifts all the time.
            if (randoms[randomIdx++] >= giftProbability) continue;

            // Check if the settlement has anything to give.
            Goods gift = is.getRandomGift(getAIRandom());
            if (gift == null) continue;

            // Check if there are available units, and if there are already
            // enough missions in operation.
            List<Unit> availableUnits = new ArrayList<Unit>();
            int alreadyAssignedUnits = 0;
            for (Unit ou : is.getOwnedUnits()) {
                AIUnit aiu = getAIUnit(ou);
                if (aiu == null) {
                    continue;
                } else if (aiu.getMission() instanceof IndianBringGiftMission) {
                    alreadyAssignedUnits++;
                } else if (Mission.invalidNewMissionReason(aiu) == null) {
                    availableUnits.add(ou);
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_GIFTS_BEING_DELIVERED) {
                logSB(sb, is.getName(), " has ", alreadyAssignedUnits, 
                      " already, ");
                continue;
            } else if (availableUnits.isEmpty()) {
                logSB(sb, is.getName(), " has no gift units, ");
                continue;
            }
            // Pick a random available capable unit.
            Unit unit = null;
            AIUnit aiUnit = null;
            Tile home = is.getTile();
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose gift unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianBringGiftMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), home, null, cd) != null) {
                    unit = u;
                }
            }
            if (unit == null) {
                logSB(sb, is.getName(), " found no gift unit, ");
                continue;
            }

            // Collect nearby colonies.  Filter out ones which are uncontacted,
            // unreachable or otherwise unsuitable.  Score the rest on alarm
            // and distance.
            List<RandomChoice<Colony>> nearbyColonies
                = new ArrayList<RandomChoice<Colony>>();
            for (Tile t : home.getSurroundingTiles(MAX_DISTANCE_TO_BRING_GIFTS)) {
                Colony c = t.getColony();
                PathNode path;
                if (c == null
                    || !is.hasContacted(c.getOwner())
                    || IndianBringGiftMission.invalidReason(aiUnit, c) != null
                    || (path = unit.findPath(home, c.getTile(),
                                             null, cd)) == null) continue;
                int alarm = Math.max(1, is.getAlarm(c.getOwner()).getValue());
                nearbyColonies.add(new RandomChoice<Colony>(c,
                        1000000 / alarm / path.getTotalTurns()));
            }

            // If there are any suitable colonies, pick a random one
            // to send a gift to.
            if (nearbyColonies.isEmpty()) {
                logSB(sb, is.getName(), " found no gift colonies, ");
                continue;
            }
            Colony target = RandomChoice.getWeightedRandom(logger,
                "Choose gift colony", nearbyColonies, getAIRandom());
            if (target == null) {
                throw new IllegalStateException("No gift target!?!");
            }

            // Send the unit.
            logSB(sb, "At ", is.getName(), " ");
            Mission m = new IndianBringGiftMission(getAIMain(), aiUnit, target);
            aiUnit.changeMission(m, sb);
            logSB(sb, " and takes ", gift, " to ", target.getName(), ", ");
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Gifts: ");
            sb.setLength(sb.length() - 2);
        }
    }

(startLine=645 endLine=743 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void demandTribute(int[] randoms, StringBuffer sb) {
        final Map map = getGame().getMap();
        final Player player = getPlayer();
        final CostDecider cd = CostDeciders.numberOfLegalTiles();
        final int demandProbability = getGame().getSpecification()
            .getInteger(GameOptions.DEMAND_PROBABILITY);
        int point = (sb == null) ? -1 : sb.length();
        int randomIdx = 0;

        for (IndianSettlement is : player.getIndianSettlements()) {
            // Do not demand tribute all of the time.
            if (randoms[randomIdx++] >= demandProbability) continue;

            // Check if there are available units, and if there are already
            // enough missions in operation.
            List<Unit> availableUnits = new ArrayList<Unit>();
            int alreadyAssignedUnits = 0;
            for (Unit ou : is.getOwnedUnits()) {
                AIUnit aiu = getAIUnit(ou);
                if (Mission.invalidNewMissionReason(aiu) == null) {
                    if (aiu.getMission() instanceof IndianDemandMission) {
                        alreadyAssignedUnits++;
                    } else {
                        availableUnits.add(ou);
                    }
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_DEMANDS) {
                logSB(sb, is.getName(), " has ", alreadyAssignedUnits,
                    " already, ");
                continue;
            } else if (availableUnits.isEmpty()) {
                logSB(sb, is.getName(), " has no demand units, ");
                continue;
            }
            // Pick a random available capable unit.
            Tile home = is.getTile();
            Unit unit = null;
            AIUnit aiUnit = null;
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose demand unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianDemandMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), home, null, cd) != null) {
                    unit = u;
                }
            }
            if (unit == null) {
                logSB(sb, is.getName(), " found no demand unit, ");
                continue;
            }

            // Collect nearby colonies.  Filter out ones which are unreachable
            // or with which the settlement is on adequate terms.
            List<RandomChoice<Colony>> nearbyColonies
                = new ArrayList<RandomChoice<Colony>>();
            for (Tile t : home.getSurroundingTiles(MAX_DISTANCE_TO_MAKE_DEMANDS)) {
                Colony c = t.getColony();
                PathNode path;
                if (c == null
                    || !is.hasContacted(c.getOwner())
                    || IndianDemandMission.invalidReason(aiUnit, c) != null
                    || (path = unit.findPath(home, c.getTile(),
                                             null, cd)) == null) continue;
                int alarm = is.getAlarm(c.getOwner()).getValue();
                int defence = c.getUnitCount() + ((c.getStockade() == null) ? 1
                    : (c.getStockade().getLevel() * 10));
                int weight = 1 + alarm * (1000000 / defence
                                                  / path.getTotalTurns());
                nearbyColonies.add(new RandomChoice<Colony>(c, weight));
            }
            // If there are any suitable colonies, pick one to demand from.
            // Sometimes a random one, sometimes the weakest, sometimes the
            // most annoying.
            if (nearbyColonies.isEmpty()) {
                logSB(sb, is.getName(), " found no demand colonies, ");
                continue;
            }
            Colony target = RandomChoice.getWeightedRandom(logger,
                "Choose demand colony", nearbyColonies, getAIRandom());
            if (target == null) {
                logSB(sb, is.getName(), " found no demand target, ");
                continue;
            }

            // Send the unit.
            logSB(sb, "At ", is.getName(), " ");
            Mission m = new IndianDemandMission(getAIMain(), aiUnit, target);
            aiUnit.changeMission(m, sb);
            logSB(sb, " and will demand of ", target, ", ");
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Tribute: ");
            sb.setLength(sb.length() - 2);
        }
    }

commonMethod: 
(startLine=717 endLine=729 srcPath=/root/NewExperiment/freecolFilter/01343/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Shorten a string buffer by a trailing delimiter.
     *
     * (Cheats, does not really check that the delimiter is there)
     *
     * @param sb The <code>StringBuilder</code> to shorten.
     * @param delim The delimiter to remove.
     */
    public static void sbShrink(StringBuilder sb, String delim) {
        if (sb != null && delim != null) {
            sb.setLength(sb.length() - delim.length());
        }
    }


, Instance #
frags: 
(startLine=538 endLine=637 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void bringGifts(int[] randoms, StringBuffer sb) {
        final Player player = getPlayer();
        final Map map = getGame().getMap();
        final CostDecider cd = CostDeciders.numberOfLegalTiles();
        final int giftProbability = getGame().getSpecification()
            .getInteger(GameOptions.GIFT_PROBABILITY);
        int point = (sb == null) ? -1 : sb.length();
        int randomIdx = 0;

        for (IndianSettlement is : player.getIndianSettlements()) {
            // Do not bring gifts all the time.
            if (randoms[randomIdx++] >= giftProbability) continue;

            // Check if the settlement has anything to give.
            Goods gift = is.getRandomGift(getAIRandom());
            if (gift == null) continue;

            // Check if there are available units, and if there are already
            // enough missions in operation.
            List<Unit> availableUnits = new ArrayList<Unit>();
            int alreadyAssignedUnits = 0;
            for (Unit ou : is.getOwnedUnits()) {
                AIUnit aiu = getAIUnit(ou);
                if (aiu == null) {
                    continue;
                } else if (aiu.getMission() instanceof IndianBringGiftMission) {
                    alreadyAssignedUnits++;
                } else if (Mission.invalidNewMissionReason(aiu) == null) {
                    availableUnits.add(ou);
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_GIFTS_BEING_DELIVERED) {
                logSB(sb, is.getName(), " has ", alreadyAssignedUnits, 
                      " already, ");
                continue;
            } else if (availableUnits.isEmpty()) {
                logSB(sb, is.getName(), " has no gift units, ");
                continue;
            }
            // Pick a random available capable unit.
            Unit unit = null;
            AIUnit aiUnit = null;
            Tile home = is.getTile();
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose gift unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianBringGiftMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), home, null, cd) != null) {
                    unit = u;
                }
            }
            if (unit == null) {
                logSB(sb, is.getName(), " found no gift unit, ");
                continue;
            }

            // Collect nearby colonies.  Filter out ones which are uncontacted,
            // unreachable or otherwise unsuitable.  Score the rest on alarm
            // and distance.
            List<RandomChoice<Colony>> nearbyColonies
                = new ArrayList<RandomChoice<Colony>>();
            for (Tile t : home.getSurroundingTiles(MAX_DISTANCE_TO_BRING_GIFTS)) {
                Colony c = t.getColony();
                PathNode path;
                if (c == null
                    || !is.hasContacted(c.getOwner())
                    || IndianBringGiftMission.invalidReason(aiUnit, c) != null
                    || (path = unit.findPath(home, c.getTile(),
                                             null, cd)) == null) continue;
                int alarm = Math.max(1, is.getAlarm(c.getOwner()).getValue());
                nearbyColonies.add(new RandomChoice<Colony>(c,
                        1000000 / alarm / path.getTotalTurns()));
            }

            // If there are any suitable colonies, pick a random one
            // to send a gift to.
            if (nearbyColonies.isEmpty()) {
                logSB(sb, is.getName(), " found no gift colonies, ");
                continue;
            }
            Colony target = RandomChoice.getWeightedRandom(logger,
                "Choose gift colony", nearbyColonies, getAIRandom());
            if (target == null) {
                throw new IllegalStateException("No gift target!?!");
            }

            // Send the unit.
            logSB(sb, "At ", is.getName(), " ");
            Mission m = new IndianBringGiftMission(getAIMain(), aiUnit, target);
            aiUnit.changeMission(m, sb);
            logSB(sb, " and takes ", gift, " to ", target.getName(), ", ");
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Gifts: ");
            sb.setLength(sb.length() - 2);
        }
    }

(startLine=645 endLine=743 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void demandTribute(int[] randoms, StringBuffer sb) {
        final Map map = getGame().getMap();
        final Player player = getPlayer();
        final CostDecider cd = CostDeciders.numberOfLegalTiles();
        final int demandProbability = getGame().getSpecification()
            .getInteger(GameOptions.DEMAND_PROBABILITY);
        int point = (sb == null) ? -1 : sb.length();
        int randomIdx = 0;

        for (IndianSettlement is : player.getIndianSettlements()) {
            // Do not demand tribute all of the time.
            if (randoms[randomIdx++] >= demandProbability) continue;

            // Check if there are available units, and if there are already
            // enough missions in operation.
            List<Unit> availableUnits = new ArrayList<Unit>();
            int alreadyAssignedUnits = 0;
            for (Unit ou : is.getOwnedUnits()) {
                AIUnit aiu = getAIUnit(ou);
                if (Mission.invalidNewMissionReason(aiu) == null) {
                    if (aiu.getMission() instanceof IndianDemandMission) {
                        alreadyAssignedUnits++;
                    } else {
                        availableUnits.add(ou);
                    }
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_DEMANDS) {
                logSB(sb, is.getName(), " has ", alreadyAssignedUnits,
                    " already, ");
                continue;
            } else if (availableUnits.isEmpty()) {
                logSB(sb, is.getName(), " has no demand units, ");
                continue;
            }
            // Pick a random available capable unit.
            Tile home = is.getTile();
            Unit unit = null;
            AIUnit aiUnit = null;
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose demand unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianDemandMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), home, null, cd) != null) {
                    unit = u;
                }
            }
            if (unit == null) {
                logSB(sb, is.getName(), " found no demand unit, ");
                continue;
            }

            // Collect nearby colonies.  Filter out ones which are unreachable
            // or with which the settlement is on adequate terms.
            List<RandomChoice<Colony>> nearbyColonies
                = new ArrayList<RandomChoice<Colony>>();
            for (Tile t : home.getSurroundingTiles(MAX_DISTANCE_TO_MAKE_DEMANDS)) {
                Colony c = t.getColony();
                PathNode path;
                if (c == null
                    || !is.hasContacted(c.getOwner())
                    || IndianDemandMission.invalidReason(aiUnit, c) != null
                    || (path = unit.findPath(home, c.getTile(),
                                             null, cd)) == null) continue;
                int alarm = is.getAlarm(c.getOwner()).getValue();
                int defence = c.getUnitCount() + ((c.getStockade() == null) ? 1
                    : (c.getStockade().getLevel() * 10));
                int weight = 1 + alarm * (1000000 / defence
                                                  / path.getTotalTurns());
                nearbyColonies.add(new RandomChoice<Colony>(c, weight));
            }
            // If there are any suitable colonies, pick one to demand from.
            // Sometimes a random one, sometimes the weakest, sometimes the
            // most annoying.
            if (nearbyColonies.isEmpty()) {
                logSB(sb, is.getName(), " found no demand colonies, ");
                continue;
            }
            Colony target = RandomChoice.getWeightedRandom(logger,
                "Choose demand colony", nearbyColonies, getAIRandom());
            if (target == null) {
                logSB(sb, is.getName(), " found no demand target, ");
                continue;
            }

            // Send the unit.
            logSB(sb, "At ", is.getName(), " ");
            Mission m = new IndianDemandMission(getAIMain(), aiUnit, target);
            aiUnit.changeMission(m, sb);
            logSB(sb, " and will demand of ", target, ", ");
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Tribute: ");
            sb.setLength(sb.length() - 2);
        }
    }

commonMethod: 
(startLine=741 endLine=754 srcPath=/root/NewExperiment/freecolFilter/01343/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Check if a string buffer has grown since marked, and optionally
     * insert text at that point.
     *
     * @param sb The <code>StringBuilder</code> to check.
     * @param point A previous mark (from #sbMark).
     * @param add Optional text to add.
     * @return True if the buffer grew.
     */
    public static boolean sbGrew(StringBuilder sb, int point, String add) {
        if (sb == null || sb.length() <= point) return false;
        if (add != null) sb.insert(point, add);
        return true;
    }


, Instance #
frags: 
(startLine=538 endLine=637 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void bringGifts(int[] randoms, StringBuffer sb) {
        final Player player = getPlayer();
        final Map map = getGame().getMap();
        final CostDecider cd = CostDeciders.numberOfLegalTiles();
        final int giftProbability = getGame().getSpecification()
            .getInteger(GameOptions.GIFT_PROBABILITY);
        int point = (sb == null) ? -1 : sb.length();
        int randomIdx = 0;

        for (IndianSettlement is : player.getIndianSettlements()) {
            // Do not bring gifts all the time.
            if (randoms[randomIdx++] >= giftProbability) continue;

            // Check if the settlement has anything to give.
            Goods gift = is.getRandomGift(getAIRandom());
            if (gift == null) continue;

            // Check if there are available units, and if there are already
            // enough missions in operation.
            List<Unit> availableUnits = new ArrayList<Unit>();
            int alreadyAssignedUnits = 0;
            for (Unit ou : is.getOwnedUnits()) {
                AIUnit aiu = getAIUnit(ou);
                if (aiu == null) {
                    continue;
                } else if (aiu.getMission() instanceof IndianBringGiftMission) {
                    alreadyAssignedUnits++;
                } else if (Mission.invalidNewMissionReason(aiu) == null) {
                    availableUnits.add(ou);
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_GIFTS_BEING_DELIVERED) {
                logSB(sb, is.getName(), " has ", alreadyAssignedUnits, 
                      " already, ");
                continue;
            } else if (availableUnits.isEmpty()) {
                logSB(sb, is.getName(), " has no gift units, ");
                continue;
            }
            // Pick a random available capable unit.
            Unit unit = null;
            AIUnit aiUnit = null;
            Tile home = is.getTile();
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose gift unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianBringGiftMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), home, null, cd) != null) {
                    unit = u;
                }
            }
            if (unit == null) {
                logSB(sb, is.getName(), " found no gift unit, ");
                continue;
            }

            // Collect nearby colonies.  Filter out ones which are uncontacted,
            // unreachable or otherwise unsuitable.  Score the rest on alarm
            // and distance.
            List<RandomChoice<Colony>> nearbyColonies
                = new ArrayList<RandomChoice<Colony>>();
            for (Tile t : home.getSurroundingTiles(MAX_DISTANCE_TO_BRING_GIFTS)) {
                Colony c = t.getColony();
                PathNode path;
                if (c == null
                    || !is.hasContacted(c.getOwner())
                    || IndianBringGiftMission.invalidReason(aiUnit, c) != null
                    || (path = unit.findPath(home, c.getTile(),
                                             null, cd)) == null) continue;
                int alarm = Math.max(1, is.getAlarm(c.getOwner()).getValue());
                nearbyColonies.add(new RandomChoice<Colony>(c,
                        1000000 / alarm / path.getTotalTurns()));
            }

            // If there are any suitable colonies, pick a random one
            // to send a gift to.
            if (nearbyColonies.isEmpty()) {
                logSB(sb, is.getName(), " found no gift colonies, ");
                continue;
            }
            Colony target = RandomChoice.getWeightedRandom(logger,
                "Choose gift colony", nearbyColonies, getAIRandom());
            if (target == null) {
                throw new IllegalStateException("No gift target!?!");
            }

            // Send the unit.
            logSB(sb, "At ", is.getName(), " ");
            Mission m = new IndianBringGiftMission(getAIMain(), aiUnit, target);
            aiUnit.changeMission(m, sb);
            logSB(sb, " and takes ", gift, " to ", target.getName(), ", ");
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Gifts: ");
            sb.setLength(sb.length() - 2);
        }
    }

(startLine=645 endLine=743 srcPath=/root/NewExperiment/freecolFilter/01342/src/net/sf/freecol/server/ai/NativeAIPlayer.java)
    private void demandTribute(int[] randoms, StringBuffer sb) {
        final Map map = getGame().getMap();
        final Player player = getPlayer();
        final CostDecider cd = CostDeciders.numberOfLegalTiles();
        final int demandProbability = getGame().getSpecification()
            .getInteger(GameOptions.DEMAND_PROBABILITY);
        int point = (sb == null) ? -1 : sb.length();
        int randomIdx = 0;

        for (IndianSettlement is : player.getIndianSettlements()) {
            // Do not demand tribute all of the time.
            if (randoms[randomIdx++] >= demandProbability) continue;

            // Check if there are available units, and if there are already
            // enough missions in operation.
            List<Unit> availableUnits = new ArrayList<Unit>();
            int alreadyAssignedUnits = 0;
            for (Unit ou : is.getOwnedUnits()) {
                AIUnit aiu = getAIUnit(ou);
                if (Mission.invalidNewMissionReason(aiu) == null) {
                    if (aiu.getMission() instanceof IndianDemandMission) {
                        alreadyAssignedUnits++;
                    } else {
                        availableUnits.add(ou);
                    }
                }
            }
            if (alreadyAssignedUnits > MAX_NUMBER_OF_DEMANDS) {
                logSB(sb, is.getName(), " has ", alreadyAssignedUnits,
                    " already, ");
                continue;
            } else if (availableUnits.isEmpty()) {
                logSB(sb, is.getName(), " has no demand units, ");
                continue;
            }
            // Pick a random available capable unit.
            Tile home = is.getTile();
            Unit unit = null;
            AIUnit aiUnit = null;
            while (unit == null && !availableUnits.isEmpty()) {
                Unit u = availableUnits.get(Utils.randomInt(logger,
                        "Choose demand unit", getAIRandom(),
                        availableUnits.size()));
                availableUnits.remove(u);
                aiUnit = getAIUnit(u);
                if (IndianDemandMission.invalidReason(aiUnit) == null
                    && u.findPath(u.getTile(), home, null, cd) != null) {
                    unit = u;
                }
            }
            if (unit == null) {
                logSB(sb, is.getName(), " found no demand unit, ");
                continue;
            }

            // Collect nearby colonies.  Filter out ones which are unreachable
            // or with which the settlement is on adequate terms.
            List<RandomChoice<Colony>> nearbyColonies
                = new ArrayList<RandomChoice<Colony>>();
            for (Tile t : home.getSurroundingTiles(MAX_DISTANCE_TO_MAKE_DEMANDS)) {
                Colony c = t.getColony();
                PathNode path;
                if (c == null
                    || !is.hasContacted(c.getOwner())
                    || IndianDemandMission.invalidReason(aiUnit, c) != null
                    || (path = unit.findPath(home, c.getTile(),
                                             null, cd)) == null) continue;
                int alarm = is.getAlarm(c.getOwner()).getValue();
                int defence = c.getUnitCount() + ((c.getStockade() == null) ? 1
                    : (c.getStockade().getLevel() * 10));
                int weight = 1 + alarm * (1000000 / defence
                                                  / path.getTotalTurns());
                nearbyColonies.add(new RandomChoice<Colony>(c, weight));
            }
            // If there are any suitable colonies, pick one to demand from.
            // Sometimes a random one, sometimes the weakest, sometimes the
            // most annoying.
            if (nearbyColonies.isEmpty()) {
                logSB(sb, is.getName(), " found no demand colonies, ");
                continue;
            }
            Colony target = RandomChoice.getWeightedRandom(logger,
                "Choose demand colony", nearbyColonies, getAIRandom());
            if (target == null) {
                logSB(sb, is.getName(), " found no demand target, ");
                continue;
            }

            // Send the unit.
            logSB(sb, "At ", is.getName(), " ");
            Mission m = new IndianDemandMission(getAIMain(), aiUnit, target);
            aiUnit.changeMission(m, sb);
            logSB(sb, " and will demand of ", target, ", ");
        }
        if (sb != null && sb.length() > point) {
            sb.insert(point, "\n  Tribute: ");
            sb.setLength(sb.length() - 2);
        }
    }

commonMethod: 
(startLine=731 endLine=739 srcPath=/root/NewExperiment/freecolFilter/01343/src/net/sf/freecol/common/model/FreeColObject.java)
    /**
     * Remember a position in a string buffer.
     *
     * @param sb The <code>StringBuilder</code> to mark.
     * @return The current buffer position if non-null.
     */
    public static int sbMark(StringBuilder sb) {
        return (sb == null) ? -1 : sb.length();
    }


, Instance #
frags: 
(startLine=609 endLine=627 srcPath=/root/NewExperiment/freecolFilter/01343/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (randoms[cheatIndex++] < nNaval) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.isOffensive()) {
                    navalUnits.add(unitType);
                    int weight = unitType.getOffence()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            AIUnit c = cheatUnit(rc);
            if (sb != null && c != null) {
                logSB(sb, "offensive-naval ", c.getUnit(), ", ");
            }
        }

(startLine=631 endLine=649 srcPath=/root/NewExperiment/freecolFilter/01343/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (randoms[cheatIndex++] < nCarrier) {
            rc.clear();
            List<UnitType> navalUnits = new ArrayList<UnitType>();
            for (UnitType unitType : spec.getUnitTypeList()) {
                if (unitType.hasAbility(Ability.NAVAL_UNIT)
                    && unitType.isAvailableTo(player)
                    && unitType.hasPrice()
                    && unitType.getSpace() > 0) {
                    navalUnits.add(unitType);
                    int weight = unitType.getSpace()
                        * 100000 / europe.getUnitPrice(unitType);
                    rc.add(new RandomChoice<UnitType>(unitType, weight));
                }
            }
            AIUnit c = cheatUnit(rc);
            if (sb != null && c != null) {
                logSB(sb, "transport-naval ", c.getUnit(), ", ");
            }
        }

commonMethod: 
(startLine=153 endLine=164 srcPath=/root/NewExperiment/freecolFilter/01344/src/net/sf/freecol/common/util/LogBuilder.java)
    /**
     * Shorten a buffer by a trailing delimiter.
     *
     * (Cheats, does not really check that the delimiter is there)
     *
     * @param delim The delimiter to remove.
     */
    public void shrink(String delim) {
        if (sb != null && delim != null) {
            sb.setLength(sb.length() - delim.length());
        }
    }


, Instance #
frags: 
(startLine=1821 endLine=1838 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (nScouts > 0) {
            Collections.sort(aiUnits, scoutComparator);
            for (AIUnit aiUnit : aiUnits) {
                final Unit unit = aiUnit.getUnit();
                Mission m = getScoutingMission(aiUnit, lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(unit, "Scout" + nScouts);
                if (--nScouts <= 0) break;
            }
            aiUnits.removeAll(done);
            done.clear();
        }

(startLine=1839 endLine=1856 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (nPioneers > 0) {
            Collections.sort(aiUnits, pioneerComparator);
            for (AIUnit aiUnit : aiUnits) {
                final Unit unit = aiUnit.getUnit();
                Mission m = getPioneeringMission(aiUnit, lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(unit, "Pioneer" + nPioneers);
                if (--nPioneers <= 0) break;
            }
            aiUnits.removeAll(done);
            done.clear();
        }

commonMethod: 
(startLine=446 endLine=455 srcPath=/root/NewExperiment/freecolFilter/01358/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Gets a new IdleAtSettlementMission for a unit.
     *
     * @param aiUnit The <code>AIUnit</code> to use.
     * @return A new mission, or null if impossible.
     */
    public Mission getIdleAtSettlementMission(AIUnit aiUnit) {
        return (IdleAtSettlementMission.invalidReason(aiUnit) != null) ? null
            : new IdleAtSettlementMission(getAIMain(), aiUnit);
    }


, Instance #
frags: 
(startLine=1821 endLine=1838 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (nScouts > 0) {
            Collections.sort(aiUnits, scoutComparator);
            for (AIUnit aiUnit : aiUnits) {
                final Unit unit = aiUnit.getUnit();
                Mission m = getScoutingMission(aiUnit, lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(unit, "Scout" + nScouts);
                if (--nScouts <= 0) break;
            }
            aiUnits.removeAll(done);
            done.clear();
        }

(startLine=1839 endLine=1856 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (nPioneers > 0) {
            Collections.sort(aiUnits, pioneerComparator);
            for (AIUnit aiUnit : aiUnits) {
                final Unit unit = aiUnit.getUnit();
                Mission m = getPioneeringMission(aiUnit, lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(unit, "Pioneer" + nPioneers);
                if (--nPioneers <= 0) break;
            }
            aiUnits.removeAll(done);
            done.clear();
        }

commonMethod: 
(startLine=2189 endLine=2204 srcPath=/root/NewExperiment/freecolFilter/01358/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Gets a WorkInsideColonyMission for a unit.
     *
     * @param aiUnit The <code>AIUnit</code> to check.
     * @param aiColony An optional <code>AIColony</code> to work at.
     * @return A new mission, or null if impossible.
     */
    public Mission getWorkInsideColonyMission(AIUnit aiUnit,
                                              AIColony aiColony) {
        if (WorkInsideColonyMission.invalidReason(aiUnit) != null) return null;
        if (aiColony == null) {
            aiColony = getAIColony(aiUnit.getUnit().getColony());
        }
        return (aiColony == null) ? null
            : new WorkInsideColonyMission(getAIMain(), aiUnit, aiColony);
    }


, Instance #
frags: 
(startLine=1823 endLine=1835 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                final Unit unit = aiUnit.getUnit();
                Mission m = getScoutingMission(aiUnit, lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(unit, "Scout" + nScouts);
                if (--nScouts <= 0) break;
            }

(startLine=1841 endLine=1853 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                final Unit unit = aiUnit.getUnit();
                Mission m = getPioneeringMission(aiUnit, lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(unit, "Pioneer" + nPioneers);
                if (--nPioneers <= 0) break;
            }

commonMethod: 
(startLine=446 endLine=455 srcPath=/root/NewExperiment/freecolFilter/01358/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Gets a new IdleAtSettlementMission for a unit.
     *
     * @param aiUnit The <code>AIUnit</code> to use.
     * @return A new mission, or null if impossible.
     */
    public Mission getIdleAtSettlementMission(AIUnit aiUnit) {
        return (IdleAtSettlementMission.invalidReason(aiUnit) != null) ? null
            : new IdleAtSettlementMission(getAIMain(), aiUnit);
    }


, Instance #
frags: 
(startLine=1823 endLine=1835 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                final Unit unit = aiUnit.getUnit();
                Mission m = getScoutingMission(aiUnit, lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(unit, "Scout" + nScouts);
                if (--nScouts <= 0) break;
            }

(startLine=1841 endLine=1853 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                final Unit unit = aiUnit.getUnit();
                Mission m = getPioneeringMission(aiUnit, lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(unit, "Pioneer" + nPioneers);
                if (--nPioneers <= 0) break;
            }

commonMethod: 
(startLine=2189 endLine=2204 srcPath=/root/NewExperiment/freecolFilter/01358/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Gets a WorkInsideColonyMission for a unit.
     *
     * @param aiUnit The <code>AIUnit</code> to check.
     * @param aiColony An optional <code>AIColony</code> to work at.
     * @return A new mission, or null if impossible.
     */
    public Mission getWorkInsideColonyMission(AIUnit aiUnit,
                                              AIColony aiColony) {
        if (WorkInsideColonyMission.invalidReason(aiUnit) != null) return null;
        if (aiColony == null) {
            aiColony = getAIColony(aiUnit.getUnit().getColony());
        }
        return (aiColony == null) ? null
            : new WorkInsideColonyMission(getAIMain(), aiUnit, aiColony);
    }


, Instance #
frags: 
(startLine=1790 endLine=1800 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                Mission m = getBuildColonyMission(aiUnit, bcm.getTarget(), lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(aiUnit.getUnit(), "0Builder");
            }

(startLine=1806 endLine=1817 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                Mission m = getBuildColonyMission(aiUnit, null, lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(aiUnit.getUnit(), "Builder" + nBuilders);
                if (--nBuilders <= 0) break;
            }

commonMethod: 
(startLine=446 endLine=455 srcPath=/root/NewExperiment/freecolFilter/01358/src/net/sf/freecol/server/ai/AIPlayer.java)
    /**
     * Gets a new IdleAtSettlementMission for a unit.
     *
     * @param aiUnit The <code>AIUnit</code> to use.
     * @return A new mission, or null if impossible.
     */
    public Mission getIdleAtSettlementMission(AIUnit aiUnit) {
        return (IdleAtSettlementMission.invalidReason(aiUnit) != null) ? null
            : new IdleAtSettlementMission(getAIMain(), aiUnit);
    }


, Instance #
frags: 
(startLine=1790 endLine=1800 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                Mission m = getBuildColonyMission(aiUnit, bcm.getTarget(), lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(aiUnit.getUnit(), "0Builder");
            }

(startLine=1806 endLine=1817 srcPath=/root/NewExperiment/freecolFilter/01357/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                Mission m = getBuildColonyMission(aiUnit, null, lb);
                if (m == null) continue;
                done.add(aiUnit);
                lb.add(", ");
                if (requestsTransport(aiUnit)) {
                    Utils.appendToMapList(transportSupply,
                        upLoc(aiUnit.getTransportSource()), aiUnit);
                }
                reasons.put(aiUnit.getUnit(), "Builder" + nBuilders);
                if (--nBuilders <= 0) break;
            }

commonMethod: 
(startLine=2189 endLine=2204 srcPath=/root/NewExperiment/freecolFilter/01358/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Gets a WorkInsideColonyMission for a unit.
     *
     * @param aiUnit The <code>AIUnit</code> to check.
     * @param aiColony An optional <code>AIColony</code> to work at.
     * @return A new mission, or null if impossible.
     */
    public Mission getWorkInsideColonyMission(AIUnit aiUnit,
                                              AIColony aiColony) {
        if (WorkInsideColonyMission.invalidReason(aiUnit) != null) return null;
        if (aiColony == null) {
            aiColony = getAIColony(aiUnit.getUnit().getColony());
        }
        return (aiColony == null) ? null
            : new WorkInsideColonyMission(getAIMain(), aiUnit, aiColony);
    }


, Instance #
frags: 
(startLine=639 endLine=648 srcPath=/root/NewExperiment/freecolFilter/01358/src/net/sf/freecol/server/ai/mission/Mission.java)
            if (unit.getType().canMoveToHighSeas()) {
                unit.setDestination(target);
                if (AIMessage.askMoveTo(aiUnit, map)) {
                    lb.add(", sailed for ", target, ".");
                    return MoveType.MOVE_HIGH_SEAS;
                } else {
                    lb.add(", failed to sail for ", target, ".");
                    return MoveType.MOVE_ILLEGAL;
                }
            }

(startLine=657 endLine=665 srcPath=/root/NewExperiment/freecolFilter/01358/src/net/sf/freecol/server/ai/mission/Mission.java)
                && unit.getTile().isDirectlyHighSeasConnected()) {
                if (AIMessage.askMoveTo(aiUnit, target)) {
                    lb.add(", sailed for ", target, ".");
                    return MoveType.MOVE_HIGH_SEAS;
                } else {
                    lb.add(", failed to sail for ", target, ".");
                    return MoveType.MOVE_ILLEGAL;
                }
            }

commonMethod: 
(startLine=2847 endLine=2854 srcPath=/root/NewExperiment/freecolFilter/01359/src/net/sf/freecol/common/model/Unit.java)
    /**
     * Can this unit carry goods.
     *
     * @return True if the unit can carry goods.
     */
    public boolean canCarryGoods() {
        return hasAbility(Ability.CARRY_GOODS);
    }


, Instance #
frags: 
(startLine=1363 endLine=1390 srcPath=/root/NewExperiment/freecolFilter/01364/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    for (Cargo cargo : curr) {
                        CargoResult result = (cargo.getMode().isCollection())
                            ? CargoResult.TCONTINUE
                            : tryCargo(cargo, lb);
                        switch (result) {
                        case TCONTINUE:
                            cont.add(cargo);
                            break;
                        case TRETRY: // will check again below
                            if (cargo.retry()) {
                                cont.add(cargo);
                                break;
                            }
                            // Fall through
                        case TFAIL:
                            if (cargo.isCarried()) {
                                cargo.dump();
                                break;
                            }
                            // Fall through
                        case TDONE:
                            dropTransportable(cargo.getTransportable());
                            cargo.clear();
                            break;
                        case TNEXT: default:
                            throw new IllegalStateException("Can not happen");
                        }
                    }

(startLine=1400 endLine=1424 srcPath=/root/NewExperiment/freecolFilter/01364/src/net/sf/freecol/server/ai/mission/TransportMission.java)
                    for (Cargo cargo : tClear()) {
                        CargoResult result = (cargo.getMode().isCollection())
                            ? tryCargo(cargo, lb)
                            : CargoResult.TCONTINUE;
                        switch (result) {
                        case TCONTINUE:
                            cont.add(cargo);
                            break;
                        case TNEXT:
                            cont.add(cargo);
                            break;
                        case TRETRY:
                            if (cargo.retry()) { // Can not reach the target.
                                next.add(cargo); // Try again next turn.
                                break;
                            }
                            // Fall through
                        case TFAIL: case TDONE:
                            dropTransportable(cargo.getTransportable());
                            cargo.clear();
                            break;
                        default:
                            throw new IllegalStateException("Can not happen");
                        }
                    }

commonMethod: 
(startLine=1017 endLine=1122 srcPath=/root/NewExperiment/freecolFilter/01365/src/net/sf/freecol/server/ai/mission/TransportMission.java)
    /**
     * Perform the transport load/unload operations on arrival at the
     * target for the top cargo.
     *
     * @param lb A <code>LogBuilder</code> to log to.
     */
    private void doTransport(LogBuilder lb) {
        final Unit unit = getUnit();
        if (tSize() > 0) {
            // Arrived at a target.  Deliver what can be delivered.
            // Check other deliveries, we might be in port so this is
            // a good time to decide to fail to deliver something.
            lbAt(lb);
            lb.add(", delivering");
            List<Cargo> cont = new ArrayList<Cargo>();
            List<Cargo> next = new ArrayList<Cargo>();
            List<Cargo> curr = tClear();
            for (Cargo cargo : curr) {
                CargoResult result = (cargo.getMode().isCollection())
                    ? CargoResult.TCONTINUE
                    : tryCargo(cargo, lb);
                switch (result) {
                case TCONTINUE:
                    cont.add(cargo);
                    break;
                case TRETRY: // will check again below
                    if (cargo.retry()) {
                        cont.add(cargo);
                        break;
                    }
                    // Fall through
                case TFAIL:
                    if (cargo.isCarried()) {
                        cargo.dump();
                        break;
                    }
                    // Fall through
                case TDONE:
                    dropTransportable(cargo.getTransportable());
                    cargo.clear();
                    break;
                case TNEXT: default:
                    throw new IllegalStateException("Can not happen");
                }
            }
            curr.clear();
            // Rebuild the cargo list with the original members,
            // less the transportables that were dropped.
            tSet(cont, true);

            // Now try again, this time collecting as well as
            // delivering.
            lb.add(", collecting");
            cont.clear();
            for (Cargo cargo : tClear()) {
                CargoResult result = (cargo.getMode().isCollection())
                    ? tryCargo(cargo, lb)
                    : CargoResult.TCONTINUE;
                switch (result) {
                case TCONTINUE:
                    cont.add(cargo);
                    break;
                case TNEXT:
                    cont.add(cargo);
                    break;
                case TRETRY:
                    if (cargo.retry()) { // Can not reach the target.
                        next.add(cargo); // Try again next turn.
                        break;
                    }
                    // Fall through
                case TFAIL: case TDONE:
                    dropTransportable(cargo.getTransportable());
                    cargo.clear();
                    break;
                default:
                    throw new IllegalStateException("Can not happen");
                }
            }

            // Rebuild the cargo list with the original members,
            // less the transportables that were dropped.
            tSet(cont, true);

            // Add the new and blocked cargoes incrementally with
            // the current arrangement, which is likely to put them
            // at the end.
            if (!next.isEmpty()) {
                lb.add(", requeue");
                for (Cargo c : next) queueCargo(c, false, lb);
            }

            optimizeCargoes(lb);
        }

        // Replenish cargoes up to available destination capacity
        // and 50% above maximum cargoes (TODO: longer?)
        final EuropeanAIPlayer euaip = getEuropeanAIPlayer();
        while (destinationCapacity() > 0
            && tSize() < unit.getCargoCapacity() * 3 / 2) {
            TransportableAIObject t = getBestTransportable(unit);
            if (t == null) break;
            if (!queueTransportable(t, false, lb)) break;
            euaip.claimTransportable(t);
        }
    }


, Instance #
frags: 
(startLine=493 endLine=508 srcPath=/root/NewExperiment/freecolFilter/01367/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            && randoms[cheatIndex++] < equipScoutCheatPercent) {
            for (Unit u : europe.getUnitList()) {
                if (u.hasDefaultRole()
                    && u.hasAbility(Ability.CAN_BE_EQUIPPED)) {
                    int price = europe.priceGoods(u.getGoodsDifference(scoutRole, 1));
                    if (!u.getOwner().checkGold(price)) {
                        player.modifyGold(price);
                        lb.add("added ", price, " gold to ");
                    }
                    if (getAIUnit(u).equipForRole("model.role.scout")) {
                        lb.add("equip scout ", u, ", ");
                    }
                    break;
                }
            }
        }

(startLine=512 endLine=527 srcPath=/root/NewExperiment/freecolFilter/01367/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            && randoms[cheatIndex++] < equipPioneerCheatPercent) {
            for (Unit u : europe.getUnitList()) {
                if (u.hasDefaultRole()
                    && u.hasAbility(Ability.CAN_BE_EQUIPPED)) {
                    int price = europe.priceGoods(u.getGoodsDifference(pioneerRole, 1));
                    if (!u.getOwner().checkGold(price)) {
                        player.modifyGold(price);
                        lb.add("added ", price, " gold to ");
                    }
                    if (getAIUnit(u).equipForRole("model.role.pioneer")) {
                        lb.add("equip pioneer ", u, ", ");
                    }
                    break;
                }
            }
        }

commonMethod: 
(startLine=3563 endLine=3575 srcPath=/root/NewExperiment/freecolFilter/01368/src/net/sf/freecol/common/model/Unit.java)
    /**
     * {@inheritDoc}
     */
    public String toShortString() {
        StringBuilder sb = new StringBuilder(32);
        sb.append(getId()).append("-").append(getType().getSuffix());
        if (!hasDefaultRole()) {
            sb.append("-").append(getRoleSuffix());
            int count = getRoleCount();
            if (count > 1) sb.append(".").append(count);
        }
        return sb.toString();
    }


, Instance #
frags: 
(startLine=493 endLine=508 srcPath=/root/NewExperiment/freecolFilter/01367/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            && randoms[cheatIndex++] < equipScoutCheatPercent) {
            for (Unit u : europe.getUnitList()) {
                if (u.hasDefaultRole()
                    && u.hasAbility(Ability.CAN_BE_EQUIPPED)) {
                    int price = europe.priceGoods(u.getGoodsDifference(scoutRole, 1));
                    if (!u.getOwner().checkGold(price)) {
                        player.modifyGold(price);
                        lb.add("added ", price, " gold to ");
                    }
                    if (getAIUnit(u).equipForRole("model.role.scout")) {
                        lb.add("equip scout ", u, ", ");
                    }
                    break;
                }
            }
        }

(startLine=512 endLine=527 srcPath=/root/NewExperiment/freecolFilter/01367/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            && randoms[cheatIndex++] < equipPioneerCheatPercent) {
            for (Unit u : europe.getUnitList()) {
                if (u.hasDefaultRole()
                    && u.hasAbility(Ability.CAN_BE_EQUIPPED)) {
                    int price = europe.priceGoods(u.getGoodsDifference(pioneerRole, 1));
                    if (!u.getOwner().checkGold(price)) {
                        player.modifyGold(price);
                        lb.add("added ", price, " gold to ");
                    }
                    if (getAIUnit(u).equipForRole("model.role.pioneer")) {
                        lb.add("equip pioneer ", u, ", ");
                    }
                    break;
                }
            }
        }

commonMethod: 
(startLine=440 endLine=455 srcPath=/root/NewExperiment/freecolFilter/01368/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Cheat by adding gold to guarantee the player has a minimum amount.
     *
     * @param amount The minimum amount of gold required.
     * @param lb A <code>LogBuilder</code> to log to.
     */
    public void cheatGold(int amount, LogBuilder lb) {
        final Player player = getPlayer();
        int gold = player.getGold();
        if (gold < amount) {
            amount -= gold;
            player.modifyGold(amount);
            lb.add("added ", amount, " gold");
        }
        player.logCheat(amount + " gold");
    }


, Instance #
frags: 
(startLine=1847 endLine=1861 srcPath=/root/NewExperiment/freecolFilter/01374/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (player.getNumberOfSettlements() <= 0 && bcm != null) {
            Collections.sort(aiUnits, builderComparator);
            for (AIUnit aiUnit : aiUnits) {
                if ((m = getBuildColonyMission(aiUnit,
                            bcm.getTarget())) == null) continue;
                lb.add(m, ", ");
                done.add(aiUnit);
                if (requestsTransport(aiUnit)) {
                    transportSupply.add(aiUnit);
                }
                reasons.put(aiUnit.getUnit(), "0Builder");
            }
            aiUnits.removeAll(done);
            done.clear();
        }

(startLine=1862 endLine=1877 srcPath=/root/NewExperiment/freecolFilter/01374/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (nBuilders > 0) {
            Collections.sort(aiUnits, builderComparator);
            for (AIUnit aiUnit : aiUnits) {
                if ((m = getBuildColonyMission(aiUnit,
                                               null)) == null) continue;
                lb.add(m, ", ");
                done.add(aiUnit);
                if (requestsTransport(aiUnit)) {
                    transportSupply.add(aiUnit);
                }
                reasons.put(aiUnit.getUnit(), "Builder" + nBuilders);
                if (--nBuilders <= 0) break;
            }
            aiUnits.removeAll(done);
            done.clear();
        }

commonMethod: 
(startLine=914 endLine=944 srcPath=/root/NewExperiment/freecolFilter/01375/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Update the transport of a unit following a target change.
     *
     * If the target has changed
     * - drop all non-boarded transport unless the target is the same
     * - dump boarded transport with no target
     * - requeue all boarded transport unless the target is the same
     *
     * @param aiu The <code>AIUnit</code> to check.
     * @param oldTarget The old target <code>Location</code>.
     * @param lb A <code>LogBuilder</code> to log to.
     */
    public void updateTransport(AIUnit aiu, Location oldTarget, LogBuilder lb) {
        final AIUnit aiCarrier = aiu.getTransport();
        final Mission newMission = aiu.getMission();
        final Location newTarget = (newMission == null) ? null
            : newMission.getTarget();
        TransportMission tm;
        if (aiCarrier != null
            && (tm = aiCarrier.getMission(TransportMission.class)) != null
            && !Map.isSameLocation(oldTarget, newTarget)) {
            if (aiu.getUnit().getLocation() != aiCarrier.getUnit()) {
                lb.add(", drop transport ", aiCarrier.getUnit());
                aiu.dropTransport();
            } else if (newTarget == null) {
                tm.dumpTransportable(aiu, lb);
            } else {
                tm.requeueTransportable(aiu, lb);
            }
        }
    }


, Instance #
frags: 
(startLine=1821 endLine=1839 srcPath=/root/NewExperiment/freecolFilter/01375/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (player.getNumberOfSettlements() <= 0 && bcm != null) {
            final Location bcmTarget = bcm.getTarget();
            Collections.sort(aiUnits, builderComparator);
            for (AIUnit aiUnit : aiUnits) {
                final Location oldTarget = ((m = aiUnit.getMission()) == null)
                    ? null : m.getTarget();
                if ((m = getBuildColonyMission(aiUnit, bcmTarget)) == null)
                    continue;
                lb.add(", ", m);
                updateTransport(aiUnit, oldTarget, lb);
                done.add(aiUnit);
                if (requestsTransport(aiUnit)) {
                    transportSupply.add(aiUnit);
                }
                reasons.put(aiUnit.getUnit(), "0Builder");
            }
            aiUnits.removeAll(done);
            done.clear();
        }

(startLine=1840 endLine=1858 srcPath=/root/NewExperiment/freecolFilter/01375/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (nBuilders > 0) {
            Collections.sort(aiUnits, builderComparator);
            for (AIUnit aiUnit : aiUnits) {
                final Location oldTarget = ((m = aiUnit.getMission()) == null)
                    ? null : m.getTarget();
                if ((m = getBuildColonyMission(aiUnit, null)) == null)
                    continue;
                lb.add(", ", m);
                updateTransport(aiUnit, oldTarget, lb);
                done.add(aiUnit);
                if (requestsTransport(aiUnit)) {
                    transportSupply.add(aiUnit);
                }
                reasons.put(aiUnit.getUnit(), "Builder" + nBuilders);
                if (--nBuilders <= 0) break;
            }
            aiUnits.removeAll(done);
            done.clear();
        }

(startLine=1859 endLine=1877 srcPath=/root/NewExperiment/freecolFilter/01375/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (nScouts > 0) {
            Collections.sort(aiUnits, scoutComparator);
            for (AIUnit aiUnit : aiUnits) {
                final Location oldTarget = ((m = aiUnit.getMission()) == null)
                    ? null : m.getTarget();
                final Unit unit = aiUnit.getUnit();
                if ((m = getScoutingMission(aiUnit)) == null) continue;
                lb.add(", ", m);
                updateTransport(aiUnit, oldTarget, lb);
                done.add(aiUnit);
                if (requestsTransport(aiUnit)) {
                    transportSupply.add(aiUnit);
                }
                reasons.put(unit, "Scout" + nScouts);
                if (--nScouts <= 0) break;
            }
            aiUnits.removeAll(done);
            done.clear();
        }

(startLine=1878 endLine=1896 srcPath=/root/NewExperiment/freecolFilter/01375/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        if (nPioneers > 0) {
            Collections.sort(aiUnits, pioneerComparator);
            for (AIUnit aiUnit : aiUnits) {
                final Unit unit = aiUnit.getUnit();
                final Location oldTarget = ((m = aiUnit.getMission()) == null)
                    ? null : m.getTarget();
                if ((m = getPioneeringMission(aiUnit, null)) == null) continue;
                lb.add(", ", m);
                updateTransport(aiUnit, oldTarget, lb);
                done.add(aiUnit);
                if (requestsTransport(aiUnit)) {
                    transportSupply.add(aiUnit);
                }
                reasons.put(unit, "Pioneer" + nPioneers);
                if (--nPioneers <= 0) break;
            }
            aiUnits.removeAll(done);
            done.clear();
        }

commonMethod: 
(startLine=1106 endLine=1120 srcPath=/root/NewExperiment/freecolFilter/01376/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Gets the most urgent transportables.
     *
     * @return The most urgent 10% of the available transportables.
     */
    public List<TransportableAIObject> getUrgentTransportables() {
        List<TransportableAIObject> urgent
            = new ArrayList<TransportableAIObject>(transportSupply);
        // Do not let the list exceed 10% of all transports
        Collections.sort(urgent);
        int urge = urgent.size();
        urge = Math.max(2, (urge + 5) / 10);
        while (urgent.size() > urge) urgent.remove(urge);
        return urgent;
    }


, Instance #
frags: 
(startLine=1824 endLine=1836 srcPath=/root/NewExperiment/freecolFilter/01375/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                final Location oldTarget = ((m = aiUnit.getMission()) == null)
                    ? null : m.getTarget();
                if ((m = getBuildColonyMission(aiUnit, bcmTarget)) == null)
                    continue;
                lb.add(", ", m);
                updateTransport(aiUnit, oldTarget, lb);
                done.add(aiUnit);
                if (requestsTransport(aiUnit)) {
                    transportSupply.add(aiUnit);
                }
                reasons.put(aiUnit.getUnit(), "0Builder");
            }

(startLine=1842 endLine=1855 srcPath=/root/NewExperiment/freecolFilter/01375/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                final Location oldTarget = ((m = aiUnit.getMission()) == null)
                    ? null : m.getTarget();
                if ((m = getBuildColonyMission(aiUnit, null)) == null)
                    continue;
                lb.add(", ", m);
                updateTransport(aiUnit, oldTarget, lb);
                done.add(aiUnit);
                if (requestsTransport(aiUnit)) {
                    transportSupply.add(aiUnit);
                }
                reasons.put(aiUnit.getUnit(), "Builder" + nBuilders);
                if (--nBuilders <= 0) break;
            }

(startLine=1861 endLine=1874 srcPath=/root/NewExperiment/freecolFilter/01375/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                final Location oldTarget = ((m = aiUnit.getMission()) == null)
                    ? null : m.getTarget();
                final Unit unit = aiUnit.getUnit();
                if ((m = getScoutingMission(aiUnit)) == null) continue;
                lb.add(", ", m);
                updateTransport(aiUnit, oldTarget, lb);
                done.add(aiUnit);
                if (requestsTransport(aiUnit)) {
                    transportSupply.add(aiUnit);
                }
                reasons.put(unit, "Scout" + nScouts);
                if (--nScouts <= 0) break;
            }

(startLine=1880 endLine=1893 srcPath=/root/NewExperiment/freecolFilter/01375/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
            for (AIUnit aiUnit : aiUnits) {
                final Unit unit = aiUnit.getUnit();
                final Location oldTarget = ((m = aiUnit.getMission()) == null)
                    ? null : m.getTarget();
                if ((m = getPioneeringMission(aiUnit, null)) == null) continue;
                lb.add(", ", m);
                updateTransport(aiUnit, oldTarget, lb);
                done.add(aiUnit);
                if (requestsTransport(aiUnit)) {
                    transportSupply.add(aiUnit);
                }
                reasons.put(unit, "Pioneer" + nPioneers);
                if (--nPioneers <= 0) break;
            }

(startLine=1899 endLine=1911 srcPath=/root/NewExperiment/freecolFilter/01375/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
        for (AIUnit aiUnit : aiUnits) {
            final Unit unit = aiUnit.getUnit();
            final Location oldTarget = ((m = aiUnit.getMission()) == null)
                ? null : m.getTarget();
            if ((m = getSimpleMission(aiUnit)) == null) continue;
            lb.add(", ", m);
            updateTransport(aiUnit, oldTarget, lb);
            reasons.put(unit, "New-Land");
            done.add(aiUnit);
            if (requestsTransport(aiUnit)) {
                transportSupply.add(aiUnit);
            }
        }

commonMethod: 
(startLine=1106 endLine=1120 srcPath=/root/NewExperiment/freecolFilter/01376/src/net/sf/freecol/server/ai/EuropeanAIPlayer.java)
    /**
     * Gets the most urgent transportables.
     *
     * @return The most urgent 10% of the available transportables.
     */
    public List<TransportableAIObject> getUrgentTransportables() {
        List<TransportableAIObject> urgent
            = new ArrayList<TransportableAIObject>(transportSupply);
        // Do not let the list exceed 10% of all transports
        Collections.sort(urgent);
        int urge = urgent.size();
        urge = Math.max(2, (urge + 5) / 10);
        while (urgent.size() > urge) urgent.remove(urge);
        return urgent;
    }


, Instance #
frags: 
(startLine=327 endLine=342 srcPath=/root/NewExperiment/freecolFilter/01379/src/net/sf/freecol/common/model/SimpleCombatModel.java)
        } else if (combatIsSettlementAttack(attacker, defender)) {
            // Settlement present, apply bombardment bonus
            result.addAll(attacker.getModifiers(Modifier.BOMBARD_BONUS));

            // Popular support bonus
            if (combatIsWarOfIndependence(attacker, defender)) {
                Colony colony = (Colony)defender;
                int bonus = colony.getSoLPercentage();
                if (bonus >= 0) {
                    if (attacker.getOwner().isREF()) bonus = 100 - bonus;
                    result.add(new Modifier(Modifier.POPULAR_SUPPORT, bonus,
                            ModifierType.PERCENTAGE, colony));
                }
            }

        } else if (combatIsAttack(attacker, defender)) {

(startLine=346 endLine=363 srcPath=/root/NewExperiment/freecolFilter/01379/src/net/sf/freecol/common/model/SimpleCombatModel.java)
                if (tile.hasSettlement()) {
                    // Bombard bonus applies to settlement defence
                    result.addAll(attacker
                                  .getModifiers(Modifier.BOMBARD_BONUS));

                    // Popular support bonus
                    if (combatIsWarOfIndependence(attacker, defender)) {
                        Colony colony = (Colony)tile.getSettlement();
                        int bonus = colony.getSoLPercentage();
                        if (bonus >= 0) {
                            if (attacker.getOwner().isREF()) {
                                bonus = 100 - bonus;
                            }
                            result.add(new Modifier(Modifier.POPULAR_SUPPORT,
                                    bonus, ModifierType.PERCENTAGE, colony));
                        }
                    }
                } else {

commonMethod: 
(startLine=307 endLine=325 srcPath=/root/NewExperiment/freecolFilter/01380/src/net/sf/freecol/common/model/SimpleCombatModel.java)
    /**
     * Add the popular support bonus to the result set if applicable.
     *
     * @param colony The <code>Colony</code> under attack.
     * @param attacker The attacking <code>Unit</code>.
     * @param result The set of modifiers to add to.
     */
    private void addPopularSupportBonus(Colony colony, Unit attacker,
                                        Set<Modifier> result) {
        int bonus = colony.getSoL();
        if (bonus >= 0) {
            if (attacker.getOwner().isREF()) bonus = 100 - bonus;
            if (bonus > 0) {
                result.add(new Modifier(Modifier.POPULAR_SUPPORT,
                                        bonus, ModifierType.PERCENTAGE, colony,
                                        Modifier.GENERAL_COMBAT_INDEX));
            }
        }
    }


, Instance #
frags: 
(startLine=1843 endLine=1866 srcPath=/root/NewExperiment/freecolFilter/01381/src/net/sf/freecol/common/model/Specification.java)
        if (allOptions.get(id) == null) {
            UnitListOption interventionForce = new UnitListOption(id, this);
            AbstractUnitOption regulars
                = new AbstractUnitOption(id + ".regulars", this);
            regulars.setValue(new AbstractUnit("model.unit.colonialRegular",
                                               "model.role.soldier", 2));
            interventionForce.getValue().add(regulars);
            AbstractUnitOption dragoons
                = new AbstractUnitOption(id + ".dragoons", this);
            dragoons.setValue(new AbstractUnit("model.unit.colonialRegular",
                                               "model.role.dragoon", 2));
            interventionForce.getValue().add(dragoons);
            AbstractUnitOption artillery
                = new AbstractUnitOption(id + ".artillery", this);
            artillery.setValue(new AbstractUnit("model.unit.artillery",
                                                DEFAULT_ROLE_ID, 2));
            interventionForce.getValue().add(artillery);
            AbstractUnitOption menOfWar
                = new AbstractUnitOption(id + ".menOfWar", this);
            menOfWar.setValue(new AbstractUnit("model.unit.manOWar",
                                               DEFAULT_ROLE_ID, 2));
            interventionForce.getValue().add(menOfWar);
            allOptions.put(id, interventionForce);
        }

(startLine=1868 endLine=1891 srcPath=/root/NewExperiment/freecolFilter/01381/src/net/sf/freecol/common/model/Specification.java)
        if (allOptions.get(id) == null) {
            UnitListOption mercenaryForce = new UnitListOption(id, this);
            AbstractUnitOption regulars
                = new AbstractUnitOption(id + ".regulars", this);
            regulars.setValue(new AbstractUnit("model.unit.veteranSoldier",
                                               "model.role.soldier", 2));
            mercenaryForce.getValue().add(regulars);
            AbstractUnitOption dragoons
                = new AbstractUnitOption(id + ".dragoons", this);
            dragoons.setValue(new AbstractUnit("model.unit.veteranSoldier",
                                               "model.role.dragoon", 2));
            mercenaryForce.getValue().add(dragoons);
            AbstractUnitOption artillery
                = new AbstractUnitOption(id + ".artillery", this);
            artillery.setValue(new AbstractUnit("model.unit.artillery",
                                                DEFAULT_ROLE_ID, 2));
            mercenaryForce.getValue().add(artillery);
            AbstractUnitOption menOfWar
                = new AbstractUnitOption(id + ".menOfWar", this);
            menOfWar.setValue(new AbstractUnit("model.unit.manOWar",
                                               DEFAULT_ROLE_ID, 2));
            mercenaryForce.getValue().add(menOfWar);
            allOptions.put(id, mercenaryForce);
        }

commonMethod: 
(startLine=882 endLine=893 srcPath=/root/NewExperiment/freecolFilter/01382/src/net/sf/freecol/common/model/Specification.java)
    /**
     * Add a modifier.
     *
     * @param modifier The <code>Modifier</code> to add.
     */
    public void addModifier(Modifier modifier) {
        String id = modifier.getId();
        if (!allModifiers.containsKey(id)) {
            allModifiers.put(id, new ArrayList<Modifier>());
        }
        allModifiers.get(id).add(modifier);
    }


, Instance #
frags: 
(startLine=1843 endLine=1866 srcPath=/root/NewExperiment/freecolFilter/01381/src/net/sf/freecol/common/model/Specification.java)
        if (allOptions.get(id) == null) {
            UnitListOption interventionForce = new UnitListOption(id, this);
            AbstractUnitOption regulars
                = new AbstractUnitOption(id + ".regulars", this);
            regulars.setValue(new AbstractUnit("model.unit.colonialRegular",
                                               "model.role.soldier", 2));
            interventionForce.getValue().add(regulars);
            AbstractUnitOption dragoons
                = new AbstractUnitOption(id + ".dragoons", this);
            dragoons.setValue(new AbstractUnit("model.unit.colonialRegular",
                                               "model.role.dragoon", 2));
            interventionForce.getValue().add(dragoons);
            AbstractUnitOption artillery
                = new AbstractUnitOption(id + ".artillery", this);
            artillery.setValue(new AbstractUnit("model.unit.artillery",
                                                DEFAULT_ROLE_ID, 2));
            interventionForce.getValue().add(artillery);
            AbstractUnitOption menOfWar
                = new AbstractUnitOption(id + ".menOfWar", this);
            menOfWar.setValue(new AbstractUnit("model.unit.manOWar",
                                               DEFAULT_ROLE_ID, 2));
            interventionForce.getValue().add(menOfWar);
            allOptions.put(id, interventionForce);
        }

(startLine=1868 endLine=1891 srcPath=/root/NewExperiment/freecolFilter/01381/src/net/sf/freecol/common/model/Specification.java)
        if (allOptions.get(id) == null) {
            UnitListOption mercenaryForce = new UnitListOption(id, this);
            AbstractUnitOption regulars
                = new AbstractUnitOption(id + ".regulars", this);
            regulars.setValue(new AbstractUnit("model.unit.veteranSoldier",
                                               "model.role.soldier", 2));
            mercenaryForce.getValue().add(regulars);
            AbstractUnitOption dragoons
                = new AbstractUnitOption(id + ".dragoons", this);
            dragoons.setValue(new AbstractUnit("model.unit.veteranSoldier",
                                               "model.role.dragoon", 2));
            mercenaryForce.getValue().add(dragoons);
            AbstractUnitOption artillery
                = new AbstractUnitOption(id + ".artillery", this);
            artillery.setValue(new AbstractUnit("model.unit.artillery",
                                                DEFAULT_ROLE_ID, 2));
            mercenaryForce.getValue().add(artillery);
            AbstractUnitOption menOfWar
                = new AbstractUnitOption(id + ".menOfWar", this);
            menOfWar.setValue(new AbstractUnit("model.unit.manOWar",
                                               DEFAULT_ROLE_ID, 2));
            mercenaryForce.getValue().add(menOfWar);
            allOptions.put(id, mercenaryForce);
        }

commonMethod: 
(startLine=1502 endLine=1516 srcPath=/root/NewExperiment/freecolFilter/01382/src/net/sf/freecol/common/model/Specification.java)
    /**
     * Gets the difficulty levels in this specification.
     *
     * @return A list of difficulty levels in this specification.
     */
    public List<OptionGroup> getDifficultyLevels() {
        List<OptionGroup> result = new ArrayList<OptionGroup>();
        for (Option option : allOptionGroups.get(DIFFICULTY_LEVELS)
                 .getOptions()) {
            if (option instanceof OptionGroup) {
                result.add((OptionGroup) option);
            }
        }
        return result;
    }


]